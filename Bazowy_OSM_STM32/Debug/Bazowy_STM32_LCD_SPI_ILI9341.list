
Bazowy_STM32_LCD_SPI_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e10  200001b0  200001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e40  20005fc0  20005fc0  00015fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20009e00  20009e00  00019ec4  2**0
                  CONTENTS
  4 .ARM          00000000  20009e00  20009e00  00019ec4  2**0
                  CONTENTS
  5 .preinit_array 00000000  20009e00  20009ec4  00019ec4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20009e00  20009e00  00019e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20009e04  20009e04  00019e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20009e08  20009e08  00019e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014a5c  20009ec4  20009ec4  00019ec4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001e920  2001e920  00019ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019ec4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010506  00000000  00000000  00019ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002511  00000000  00000000  0002a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0002c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  0002d770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005520  00000000  00000000  0002e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c624  00000000  00000000  00033a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b49d8  00000000  00000000  0004002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4a04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f04  00000000  00000000  000f4a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001b0 <__do_global_dtors_aux>:
200001b0:	b510      	push	{r4, lr}
200001b2:	4c05      	ldr	r4, [pc, #20]	; (200001c8 <__do_global_dtors_aux+0x18>)
200001b4:	7823      	ldrb	r3, [r4, #0]
200001b6:	b933      	cbnz	r3, 200001c6 <__do_global_dtors_aux+0x16>
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <__do_global_dtors_aux+0x1c>)
200001ba:	b113      	cbz	r3, 200001c2 <__do_global_dtors_aux+0x12>
200001bc:	4804      	ldr	r0, [pc, #16]	; (200001d0 <__do_global_dtors_aux+0x20>)
200001be:	f3af 8000 	nop.w
200001c2:	2301      	movs	r3, #1
200001c4:	7023      	strb	r3, [r4, #0]
200001c6:	bd10      	pop	{r4, pc}
200001c8:	20009ec4 	.word	0x20009ec4
200001cc:	00000000 	.word	0x00000000
200001d0:	20005fa8 	.word	0x20005fa8

200001d4 <frame_dummy>:
200001d4:	b508      	push	{r3, lr}
200001d6:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <frame_dummy+0x10>)
200001d8:	b11b      	cbz	r3, 200001e2 <frame_dummy+0xe>
200001da:	4903      	ldr	r1, [pc, #12]	; (200001e8 <frame_dummy+0x14>)
200001dc:	4803      	ldr	r0, [pc, #12]	; (200001ec <frame_dummy+0x18>)
200001de:	f3af 8000 	nop.w
200001e2:	bd08      	pop	{r3, pc}
200001e4:	00000000 	.word	0x00000000
200001e8:	20009ec8 	.word	0x20009ec8
200001ec:	20005fa8 	.word	0x20005fa8

200001f0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
200001f0:	b480      	push	{r7}
200001f2:	b089      	sub	sp, #36	; 0x24
200001f4:	af00      	add	r7, sp, #0
200001f6:	60f8      	str	r0, [r7, #12]
200001f8:	60b9      	str	r1, [r7, #8]
200001fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
200001fc:	68fb      	ldr	r3, [r7, #12]
200001fe:	681a      	ldr	r2, [r3, #0]
20000200:	68bb      	ldr	r3, [r7, #8]
20000202:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000204:	697b      	ldr	r3, [r7, #20]
20000206:	fa93 f3a3 	rbit	r3, r3
2000020a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
2000020c:	693b      	ldr	r3, [r7, #16]
2000020e:	fab3 f383 	clz	r3, r3
20000212:	b2db      	uxtb	r3, r3
20000214:	005b      	lsls	r3, r3, #1
20000216:	2103      	movs	r1, #3
20000218:	fa01 f303 	lsl.w	r3, r1, r3
2000021c:	43db      	mvns	r3, r3
2000021e:	401a      	ands	r2, r3
20000220:	68bb      	ldr	r3, [r7, #8]
20000222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000224:	69fb      	ldr	r3, [r7, #28]
20000226:	fa93 f3a3 	rbit	r3, r3
2000022a:	61bb      	str	r3, [r7, #24]
  return result;
2000022c:	69bb      	ldr	r3, [r7, #24]
2000022e:	fab3 f383 	clz	r3, r3
20000232:	b2db      	uxtb	r3, r3
20000234:	005b      	lsls	r3, r3, #1
20000236:	6879      	ldr	r1, [r7, #4]
20000238:	fa01 f303 	lsl.w	r3, r1, r3
2000023c:	431a      	orrs	r2, r3
2000023e:	68fb      	ldr	r3, [r7, #12]
20000240:	601a      	str	r2, [r3, #0]
}
20000242:	bf00      	nop
20000244:	3724      	adds	r7, #36	; 0x24
20000246:	46bd      	mov	sp, r7
20000248:	f85d 7b04 	ldr.w	r7, [sp], #4
2000024c:	4770      	bx	lr

2000024e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
2000024e:	b480      	push	{r7}
20000250:	b085      	sub	sp, #20
20000252:	af00      	add	r7, sp, #0
20000254:	60f8      	str	r0, [r7, #12]
20000256:	60b9      	str	r1, [r7, #8]
20000258:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
2000025a:	68fb      	ldr	r3, [r7, #12]
2000025c:	685a      	ldr	r2, [r3, #4]
2000025e:	68bb      	ldr	r3, [r7, #8]
20000260:	43db      	mvns	r3, r3
20000262:	401a      	ands	r2, r3
20000264:	68bb      	ldr	r3, [r7, #8]
20000266:	6879      	ldr	r1, [r7, #4]
20000268:	fb01 f303 	mul.w	r3, r1, r3
2000026c:	431a      	orrs	r2, r3
2000026e:	68fb      	ldr	r3, [r7, #12]
20000270:	605a      	str	r2, [r3, #4]
}
20000272:	bf00      	nop
20000274:	3714      	adds	r7, #20
20000276:	46bd      	mov	sp, r7
20000278:	f85d 7b04 	ldr.w	r7, [sp], #4
2000027c:	4770      	bx	lr

2000027e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
2000027e:	b480      	push	{r7}
20000280:	b089      	sub	sp, #36	; 0x24
20000282:	af00      	add	r7, sp, #0
20000284:	60f8      	str	r0, [r7, #12]
20000286:	60b9      	str	r1, [r7, #8]
20000288:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
2000028a:	68fb      	ldr	r3, [r7, #12]
2000028c:	689a      	ldr	r2, [r3, #8]
2000028e:	68bb      	ldr	r3, [r7, #8]
20000290:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000292:	697b      	ldr	r3, [r7, #20]
20000294:	fa93 f3a3 	rbit	r3, r3
20000298:	613b      	str	r3, [r7, #16]
  return result;
2000029a:	693b      	ldr	r3, [r7, #16]
2000029c:	fab3 f383 	clz	r3, r3
200002a0:	b2db      	uxtb	r3, r3
200002a2:	005b      	lsls	r3, r3, #1
200002a4:	2103      	movs	r1, #3
200002a6:	fa01 f303 	lsl.w	r3, r1, r3
200002aa:	43db      	mvns	r3, r3
200002ac:	401a      	ands	r2, r3
200002ae:	68bb      	ldr	r3, [r7, #8]
200002b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200002b2:	69fb      	ldr	r3, [r7, #28]
200002b4:	fa93 f3a3 	rbit	r3, r3
200002b8:	61bb      	str	r3, [r7, #24]
  return result;
200002ba:	69bb      	ldr	r3, [r7, #24]
200002bc:	fab3 f383 	clz	r3, r3
200002c0:	b2db      	uxtb	r3, r3
200002c2:	005b      	lsls	r3, r3, #1
200002c4:	6879      	ldr	r1, [r7, #4]
200002c6:	fa01 f303 	lsl.w	r3, r1, r3
200002ca:	431a      	orrs	r2, r3
200002cc:	68fb      	ldr	r3, [r7, #12]
200002ce:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
200002d0:	bf00      	nop
200002d2:	3724      	adds	r7, #36	; 0x24
200002d4:	46bd      	mov	sp, r7
200002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200002da:	4770      	bx	lr

200002dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
200002dc:	b480      	push	{r7}
200002de:	b089      	sub	sp, #36	; 0x24
200002e0:	af00      	add	r7, sp, #0
200002e2:	60f8      	str	r0, [r7, #12]
200002e4:	60b9      	str	r1, [r7, #8]
200002e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
200002e8:	68fb      	ldr	r3, [r7, #12]
200002ea:	68da      	ldr	r2, [r3, #12]
200002ec:	68bb      	ldr	r3, [r7, #8]
200002ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200002f0:	697b      	ldr	r3, [r7, #20]
200002f2:	fa93 f3a3 	rbit	r3, r3
200002f6:	613b      	str	r3, [r7, #16]
  return result;
200002f8:	693b      	ldr	r3, [r7, #16]
200002fa:	fab3 f383 	clz	r3, r3
200002fe:	b2db      	uxtb	r3, r3
20000300:	005b      	lsls	r3, r3, #1
20000302:	2103      	movs	r1, #3
20000304:	fa01 f303 	lsl.w	r3, r1, r3
20000308:	43db      	mvns	r3, r3
2000030a:	401a      	ands	r2, r3
2000030c:	68bb      	ldr	r3, [r7, #8]
2000030e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000310:	69fb      	ldr	r3, [r7, #28]
20000312:	fa93 f3a3 	rbit	r3, r3
20000316:	61bb      	str	r3, [r7, #24]
  return result;
20000318:	69bb      	ldr	r3, [r7, #24]
2000031a:	fab3 f383 	clz	r3, r3
2000031e:	b2db      	uxtb	r3, r3
20000320:	005b      	lsls	r3, r3, #1
20000322:	6879      	ldr	r1, [r7, #4]
20000324:	fa01 f303 	lsl.w	r3, r1, r3
20000328:	431a      	orrs	r2, r3
2000032a:	68fb      	ldr	r3, [r7, #12]
2000032c:	60da      	str	r2, [r3, #12]
}
2000032e:	bf00      	nop
20000330:	3724      	adds	r7, #36	; 0x24
20000332:	46bd      	mov	sp, r7
20000334:	f85d 7b04 	ldr.w	r7, [sp], #4
20000338:	4770      	bx	lr

2000033a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
2000033a:	b480      	push	{r7}
2000033c:	b089      	sub	sp, #36	; 0x24
2000033e:	af00      	add	r7, sp, #0
20000340:	60f8      	str	r0, [r7, #12]
20000342:	60b9      	str	r1, [r7, #8]
20000344:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
20000346:	68fb      	ldr	r3, [r7, #12]
20000348:	6a1a      	ldr	r2, [r3, #32]
2000034a:	68bb      	ldr	r3, [r7, #8]
2000034c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000034e:	697b      	ldr	r3, [r7, #20]
20000350:	fa93 f3a3 	rbit	r3, r3
20000354:	613b      	str	r3, [r7, #16]
  return result;
20000356:	693b      	ldr	r3, [r7, #16]
20000358:	fab3 f383 	clz	r3, r3
2000035c:	b2db      	uxtb	r3, r3
2000035e:	009b      	lsls	r3, r3, #2
20000360:	210f      	movs	r1, #15
20000362:	fa01 f303 	lsl.w	r3, r1, r3
20000366:	43db      	mvns	r3, r3
20000368:	401a      	ands	r2, r3
2000036a:	68bb      	ldr	r3, [r7, #8]
2000036c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000036e:	69fb      	ldr	r3, [r7, #28]
20000370:	fa93 f3a3 	rbit	r3, r3
20000374:	61bb      	str	r3, [r7, #24]
  return result;
20000376:	69bb      	ldr	r3, [r7, #24]
20000378:	fab3 f383 	clz	r3, r3
2000037c:	b2db      	uxtb	r3, r3
2000037e:	009b      	lsls	r3, r3, #2
20000380:	6879      	ldr	r1, [r7, #4]
20000382:	fa01 f303 	lsl.w	r3, r1, r3
20000386:	431a      	orrs	r2, r3
20000388:	68fb      	ldr	r3, [r7, #12]
2000038a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
2000038c:	bf00      	nop
2000038e:	3724      	adds	r7, #36	; 0x24
20000390:	46bd      	mov	sp, r7
20000392:	f85d 7b04 	ldr.w	r7, [sp], #4
20000396:	4770      	bx	lr

20000398 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000398:	b480      	push	{r7}
2000039a:	b089      	sub	sp, #36	; 0x24
2000039c:	af00      	add	r7, sp, #0
2000039e:	60f8      	str	r0, [r7, #12]
200003a0:	60b9      	str	r1, [r7, #8]
200003a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
200003a4:	68fb      	ldr	r3, [r7, #12]
200003a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200003a8:	68bb      	ldr	r3, [r7, #8]
200003aa:	0a1b      	lsrs	r3, r3, #8
200003ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200003ae:	697b      	ldr	r3, [r7, #20]
200003b0:	fa93 f3a3 	rbit	r3, r3
200003b4:	613b      	str	r3, [r7, #16]
  return result;
200003b6:	693b      	ldr	r3, [r7, #16]
200003b8:	fab3 f383 	clz	r3, r3
200003bc:	b2db      	uxtb	r3, r3
200003be:	009b      	lsls	r3, r3, #2
200003c0:	210f      	movs	r1, #15
200003c2:	fa01 f303 	lsl.w	r3, r1, r3
200003c6:	43db      	mvns	r3, r3
200003c8:	401a      	ands	r2, r3
200003ca:	68bb      	ldr	r3, [r7, #8]
200003cc:	0a1b      	lsrs	r3, r3, #8
200003ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200003d0:	69fb      	ldr	r3, [r7, #28]
200003d2:	fa93 f3a3 	rbit	r3, r3
200003d6:	61bb      	str	r3, [r7, #24]
  return result;
200003d8:	69bb      	ldr	r3, [r7, #24]
200003da:	fab3 f383 	clz	r3, r3
200003de:	b2db      	uxtb	r3, r3
200003e0:	009b      	lsls	r3, r3, #2
200003e2:	6879      	ldr	r1, [r7, #4]
200003e4:	fa01 f303 	lsl.w	r3, r1, r3
200003e8:	431a      	orrs	r2, r3
200003ea:	68fb      	ldr	r3, [r7, #12]
200003ec:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
200003ee:	bf00      	nop
200003f0:	3724      	adds	r7, #36	; 0x24
200003f2:	46bd      	mov	sp, r7
200003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200003f8:	4770      	bx	lr

200003fa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
200003fa:	b580      	push	{r7, lr}
200003fc:	b088      	sub	sp, #32
200003fe:	af00      	add	r7, sp, #0
20000400:	6078      	str	r0, [r7, #4]
20000402:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
20000404:	2300      	movs	r3, #0
20000406:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
20000408:	2300      	movs	r3, #0
2000040a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
2000040c:	683b      	ldr	r3, [r7, #0]
2000040e:	681b      	ldr	r3, [r3, #0]
20000410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000412:	697b      	ldr	r3, [r7, #20]
20000414:	fa93 f3a3 	rbit	r3, r3
20000418:	613b      	str	r3, [r7, #16]
  return result;
2000041a:	693b      	ldr	r3, [r7, #16]
2000041c:	fab3 f383 	clz	r3, r3
20000420:	b2db      	uxtb	r3, r3
20000422:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
20000424:	e050      	b.n	200004c8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
20000426:	683b      	ldr	r3, [r7, #0]
20000428:	681a      	ldr	r2, [r3, #0]
2000042a:	2101      	movs	r1, #1
2000042c:	69fb      	ldr	r3, [r7, #28]
2000042e:	fa01 f303 	lsl.w	r3, r1, r3
20000432:	4013      	ands	r3, r2
20000434:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
20000436:	69bb      	ldr	r3, [r7, #24]
20000438:	2b00      	cmp	r3, #0
2000043a:	d042      	beq.n	200004c2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
2000043c:	683b      	ldr	r3, [r7, #0]
2000043e:	685b      	ldr	r3, [r3, #4]
20000440:	2b01      	cmp	r3, #1
20000442:	d003      	beq.n	2000044c <LL_GPIO_Init+0x52>
20000444:	683b      	ldr	r3, [r7, #0]
20000446:	685b      	ldr	r3, [r3, #4]
20000448:	2b02      	cmp	r3, #2
2000044a:	d10d      	bne.n	20000468 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
2000044c:	683b      	ldr	r3, [r7, #0]
2000044e:	689b      	ldr	r3, [r3, #8]
20000450:	461a      	mov	r2, r3
20000452:	69b9      	ldr	r1, [r7, #24]
20000454:	6878      	ldr	r0, [r7, #4]
20000456:	f7ff ff12 	bl	2000027e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
2000045a:	683b      	ldr	r3, [r7, #0]
2000045c:	68db      	ldr	r3, [r3, #12]
2000045e:	461a      	mov	r2, r3
20000460:	69b9      	ldr	r1, [r7, #24]
20000462:	6878      	ldr	r0, [r7, #4]
20000464:	f7ff fef3 	bl	2000024e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
20000468:	683b      	ldr	r3, [r7, #0]
2000046a:	691b      	ldr	r3, [r3, #16]
2000046c:	461a      	mov	r2, r3
2000046e:	69b9      	ldr	r1, [r7, #24]
20000470:	6878      	ldr	r0, [r7, #4]
20000472:	f7ff ff33 	bl	200002dc <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
20000476:	683b      	ldr	r3, [r7, #0]
20000478:	685b      	ldr	r3, [r3, #4]
2000047a:	2b02      	cmp	r3, #2
2000047c:	d11a      	bne.n	200004b4 <LL_GPIO_Init+0xba>
2000047e:	69bb      	ldr	r3, [r7, #24]
20000480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000482:	68fb      	ldr	r3, [r7, #12]
20000484:	fa93 f3a3 	rbit	r3, r3
20000488:	60bb      	str	r3, [r7, #8]
  return result;
2000048a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
2000048c:	fab3 f383 	clz	r3, r3
20000490:	b2db      	uxtb	r3, r3
20000492:	2b07      	cmp	r3, #7
20000494:	d807      	bhi.n	200004a6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
20000496:	683b      	ldr	r3, [r7, #0]
20000498:	695b      	ldr	r3, [r3, #20]
2000049a:	461a      	mov	r2, r3
2000049c:	69b9      	ldr	r1, [r7, #24]
2000049e:	6878      	ldr	r0, [r7, #4]
200004a0:	f7ff ff4b 	bl	2000033a <LL_GPIO_SetAFPin_0_7>
200004a4:	e006      	b.n	200004b4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200004a6:	683b      	ldr	r3, [r7, #0]
200004a8:	695b      	ldr	r3, [r3, #20]
200004aa:	461a      	mov	r2, r3
200004ac:	69b9      	ldr	r1, [r7, #24]
200004ae:	6878      	ldr	r0, [r7, #4]
200004b0:	f7ff ff72 	bl	20000398 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
200004b4:	683b      	ldr	r3, [r7, #0]
200004b6:	685b      	ldr	r3, [r3, #4]
200004b8:	461a      	mov	r2, r3
200004ba:	69b9      	ldr	r1, [r7, #24]
200004bc:	6878      	ldr	r0, [r7, #4]
200004be:	f7ff fe97 	bl	200001f0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
200004c2:	69fb      	ldr	r3, [r7, #28]
200004c4:	3301      	adds	r3, #1
200004c6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
200004c8:	683b      	ldr	r3, [r7, #0]
200004ca:	681a      	ldr	r2, [r3, #0]
200004cc:	69fb      	ldr	r3, [r7, #28]
200004ce:	fa22 f303 	lsr.w	r3, r2, r3
200004d2:	2b00      	cmp	r3, #0
200004d4:	d1a7      	bne.n	20000426 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
200004d6:	2300      	movs	r3, #0
}
200004d8:	4618      	mov	r0, r3
200004da:	3720      	adds	r7, #32
200004dc:	46bd      	mov	sp, r7
200004de:	bd80      	pop	{r7, pc}

200004e0 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
200004e0:	b480      	push	{r7}
200004e2:	b083      	sub	sp, #12
200004e4:	af00      	add	r7, sp, #0
200004e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
200004e8:	687b      	ldr	r3, [r7, #4]
200004ea:	681b      	ldr	r3, [r3, #0]
200004ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
200004f0:	2b40      	cmp	r3, #64	; 0x40
200004f2:	d101      	bne.n	200004f8 <LL_SPI_IsEnabled+0x18>
200004f4:	2301      	movs	r3, #1
200004f6:	e000      	b.n	200004fa <LL_SPI_IsEnabled+0x1a>
200004f8:	2300      	movs	r3, #0
}
200004fa:	4618      	mov	r0, r3
200004fc:	370c      	adds	r7, #12
200004fe:	46bd      	mov	sp, r7
20000500:	f85d 7b04 	ldr.w	r7, [sp], #4
20000504:	4770      	bx	lr

20000506 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
20000506:	b480      	push	{r7}
20000508:	b083      	sub	sp, #12
2000050a:	af00      	add	r7, sp, #0
2000050c:	6078      	str	r0, [r7, #4]
2000050e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
20000510:	683b      	ldr	r3, [r7, #0]
20000512:	b29b      	uxth	r3, r3
20000514:	461a      	mov	r2, r3
20000516:	687b      	ldr	r3, [r7, #4]
20000518:	611a      	str	r2, [r3, #16]
}
2000051a:	bf00      	nop
2000051c:	370c      	adds	r7, #12
2000051e:	46bd      	mov	sp, r7
20000520:	f85d 7b04 	ldr.w	r7, [sp], #4
20000524:	4770      	bx	lr

20000526 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
20000526:	b580      	push	{r7, lr}
20000528:	b084      	sub	sp, #16
2000052a:	af00      	add	r7, sp, #0
2000052c:	6078      	str	r0, [r7, #4]
2000052e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
20000530:	2301      	movs	r3, #1
20000532:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
20000534:	6878      	ldr	r0, [r7, #4]
20000536:	f7ff ffd3 	bl	200004e0 <LL_SPI_IsEnabled>
2000053a:	4603      	mov	r3, r0
2000053c:	2b00      	cmp	r3, #0
2000053e:	d139      	bne.n	200005b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
20000540:	687b      	ldr	r3, [r7, #4]
20000542:	681b      	ldr	r3, [r3, #0]
20000544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
20000548:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
2000054c:	683a      	ldr	r2, [r7, #0]
2000054e:	6811      	ldr	r1, [r2, #0]
20000550:	683a      	ldr	r2, [r7, #0]
20000552:	6852      	ldr	r2, [r2, #4]
20000554:	4311      	orrs	r1, r2
20000556:	683a      	ldr	r2, [r7, #0]
20000558:	6892      	ldr	r2, [r2, #8]
2000055a:	4311      	orrs	r1, r2
2000055c:	683a      	ldr	r2, [r7, #0]
2000055e:	68d2      	ldr	r2, [r2, #12]
20000560:	4311      	orrs	r1, r2
20000562:	683a      	ldr	r2, [r7, #0]
20000564:	6912      	ldr	r2, [r2, #16]
20000566:	4311      	orrs	r1, r2
20000568:	683a      	ldr	r2, [r7, #0]
2000056a:	6952      	ldr	r2, [r2, #20]
2000056c:	4311      	orrs	r1, r2
2000056e:	683a      	ldr	r2, [r7, #0]
20000570:	6992      	ldr	r2, [r2, #24]
20000572:	4311      	orrs	r1, r2
20000574:	683a      	ldr	r2, [r7, #0]
20000576:	69d2      	ldr	r2, [r2, #28]
20000578:	4311      	orrs	r1, r2
2000057a:	683a      	ldr	r2, [r7, #0]
2000057c:	6a12      	ldr	r2, [r2, #32]
2000057e:	430a      	orrs	r2, r1
20000580:	431a      	orrs	r2, r3
20000582:	687b      	ldr	r3, [r7, #4]
20000584:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
20000586:	687b      	ldr	r3, [r7, #4]
20000588:	685b      	ldr	r3, [r3, #4]
2000058a:	f023 0204 	bic.w	r2, r3, #4
2000058e:	683b      	ldr	r3, [r7, #0]
20000590:	695b      	ldr	r3, [r3, #20]
20000592:	0c1b      	lsrs	r3, r3, #16
20000594:	431a      	orrs	r2, r3
20000596:	687b      	ldr	r3, [r7, #4]
20000598:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
2000059a:	683b      	ldr	r3, [r7, #0]
2000059c:	6a1b      	ldr	r3, [r3, #32]
2000059e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200005a2:	d105      	bne.n	200005b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
200005a4:	683b      	ldr	r3, [r7, #0]
200005a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200005a8:	4619      	mov	r1, r3
200005aa:	6878      	ldr	r0, [r7, #4]
200005ac:	f7ff ffab 	bl	20000506 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
200005b0:	2300      	movs	r3, #0
200005b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	69db      	ldr	r3, [r3, #28]
200005b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	61da      	str	r2, [r3, #28]
  return status;
200005c0:	7bfb      	ldrb	r3, [r7, #15]
}
200005c2:	4618      	mov	r0, r3
200005c4:	3710      	adds	r7, #16
200005c6:	46bd      	mov	sp, r7
200005c8:	bd80      	pop	{r7, pc}
	...

200005cc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
200005cc:	b480      	push	{r7}
200005ce:	b083      	sub	sp, #12
200005d0:	af00      	add	r7, sp, #0
200005d2:	6078      	str	r0, [r7, #4]
200005d4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
200005d6:	687a      	ldr	r2, [r7, #4]
200005d8:	683b      	ldr	r3, [r7, #0]
200005da:	fbb2 f3f3 	udiv	r3, r2, r3
200005de:	4a07      	ldr	r2, [pc, #28]	; (200005fc <LL_InitTick+0x30>)
200005e0:	3b01      	subs	r3, #1
200005e2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
200005e4:	4b05      	ldr	r3, [pc, #20]	; (200005fc <LL_InitTick+0x30>)
200005e6:	2200      	movs	r2, #0
200005e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200005ea:	4b04      	ldr	r3, [pc, #16]	; (200005fc <LL_InitTick+0x30>)
200005ec:	2205      	movs	r2, #5
200005ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
200005f0:	bf00      	nop
200005f2:	370c      	adds	r7, #12
200005f4:	46bd      	mov	sp, r7
200005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200005fa:	4770      	bx	lr
200005fc:	e000e010 	.word	0xe000e010

20000600 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
20000600:	b580      	push	{r7, lr}
20000602:	b082      	sub	sp, #8
20000604:	af00      	add	r7, sp, #0
20000606:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
20000608:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
2000060c:	6878      	ldr	r0, [r7, #4]
2000060e:	f7ff ffdd 	bl	200005cc <LL_InitTick>
}
20000612:	bf00      	nop
20000614:	3708      	adds	r7, #8
20000616:	46bd      	mov	sp, r7
20000618:	bd80      	pop	{r7, pc}
	...

2000061c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
2000061c:	b480      	push	{r7}
2000061e:	b085      	sub	sp, #20
20000620:	af00      	add	r7, sp, #0
20000622:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
20000624:	4b0f      	ldr	r3, [pc, #60]	; (20000664 <LL_mDelay+0x48>)
20000626:	681b      	ldr	r3, [r3, #0]
20000628:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
2000062a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
2000062c:	687b      	ldr	r3, [r7, #4]
2000062e:	f1b3 3fff 	cmp.w	r3, #4294967295
20000632:	d00c      	beq.n	2000064e <LL_mDelay+0x32>
  {
    Delay++;
20000634:	687b      	ldr	r3, [r7, #4]
20000636:	3301      	adds	r3, #1
20000638:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
2000063a:	e008      	b.n	2000064e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
2000063c:	4b09      	ldr	r3, [pc, #36]	; (20000664 <LL_mDelay+0x48>)
2000063e:	681b      	ldr	r3, [r3, #0]
20000640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000644:	2b00      	cmp	r3, #0
20000646:	d002      	beq.n	2000064e <LL_mDelay+0x32>
    {
      Delay--;
20000648:	687b      	ldr	r3, [r7, #4]
2000064a:	3b01      	subs	r3, #1
2000064c:	607b      	str	r3, [r7, #4]
  while (Delay)
2000064e:	687b      	ldr	r3, [r7, #4]
20000650:	2b00      	cmp	r3, #0
20000652:	d1f3      	bne.n	2000063c <LL_mDelay+0x20>
    }
  }
}
20000654:	bf00      	nop
20000656:	bf00      	nop
20000658:	3714      	adds	r7, #20
2000065a:	46bd      	mov	sp, r7
2000065c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000660:	4770      	bx	lr
20000662:	bf00      	nop
20000664:	e000e010 	.word	0xe000e010

20000668 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
20000668:	b480      	push	{r7}
2000066a:	b083      	sub	sp, #12
2000066c:	af00      	add	r7, sp, #0
2000066e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
20000670:	4a04      	ldr	r2, [pc, #16]	; (20000684 <LL_SetSystemCoreClock+0x1c>)
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	6013      	str	r3, [r2, #0]
}
20000676:	bf00      	nop
20000678:	370c      	adds	r7, #12
2000067a:	46bd      	mov	sp, r7
2000067c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000680:	4770      	bx	lr
20000682:	bf00      	nop
20000684:	20009e5c 	.word	0x20009e5c

20000688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000688:	b480      	push	{r7}
2000068a:	b083      	sub	sp, #12
2000068c:	af00      	add	r7, sp, #0
2000068e:	4603      	mov	r3, r0
20000690:	6039      	str	r1, [r7, #0]
20000692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000694:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000698:	2b00      	cmp	r3, #0
2000069a:	db0a      	blt.n	200006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000069c:	683b      	ldr	r3, [r7, #0]
2000069e:	b2da      	uxtb	r2, r3
200006a0:	490c      	ldr	r1, [pc, #48]	; (200006d4 <__NVIC_SetPriority+0x4c>)
200006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200006a6:	0112      	lsls	r2, r2, #4
200006a8:	b2d2      	uxtb	r2, r2
200006aa:	440b      	add	r3, r1
200006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
200006b0:	e00a      	b.n	200006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200006b2:	683b      	ldr	r3, [r7, #0]
200006b4:	b2da      	uxtb	r2, r3
200006b6:	4908      	ldr	r1, [pc, #32]	; (200006d8 <__NVIC_SetPriority+0x50>)
200006b8:	79fb      	ldrb	r3, [r7, #7]
200006ba:	f003 030f 	and.w	r3, r3, #15
200006be:	3b04      	subs	r3, #4
200006c0:	0112      	lsls	r2, r2, #4
200006c2:	b2d2      	uxtb	r2, r2
200006c4:	440b      	add	r3, r1
200006c6:	761a      	strb	r2, [r3, #24]
}
200006c8:	bf00      	nop
200006ca:	370c      	adds	r7, #12
200006cc:	46bd      	mov	sp, r7
200006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200006d2:	4770      	bx	lr
200006d4:	e000e100 	.word	0xe000e100
200006d8:	e000ed00 	.word	0xe000ed00

200006dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
200006dc:	b580      	push	{r7, lr}
200006de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
200006e0:	2100      	movs	r1, #0
200006e2:	f06f 0004 	mvn.w	r0, #4
200006e6:	f7ff ffcf 	bl	20000688 <__NVIC_SetPriority>
#endif
}
200006ea:	bf00      	nop
200006ec:	bd80      	pop	{r7, pc}
	...

200006f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
200006f0:	b480      	push	{r7}
200006f2:	b083      	sub	sp, #12
200006f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200006f6:	f3ef 8305 	mrs	r3, IPSR
200006fa:	603b      	str	r3, [r7, #0]
  return(result);
200006fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
200006fe:	2b00      	cmp	r3, #0
20000700:	d003      	beq.n	2000070a <osKernelInitialize+0x1a>
    stat = osErrorISR;
20000702:	f06f 0305 	mvn.w	r3, #5
20000706:	607b      	str	r3, [r7, #4]
20000708:	e00c      	b.n	20000724 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
2000070a:	4b0a      	ldr	r3, [pc, #40]	; (20000734 <osKernelInitialize+0x44>)
2000070c:	681b      	ldr	r3, [r3, #0]
2000070e:	2b00      	cmp	r3, #0
20000710:	d105      	bne.n	2000071e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
20000712:	4b08      	ldr	r3, [pc, #32]	; (20000734 <osKernelInitialize+0x44>)
20000714:	2201      	movs	r2, #1
20000716:	601a      	str	r2, [r3, #0]
      stat = osOK;
20000718:	2300      	movs	r3, #0
2000071a:	607b      	str	r3, [r7, #4]
2000071c:	e002      	b.n	20000724 <osKernelInitialize+0x34>
    } else {
      stat = osError;
2000071e:	f04f 33ff 	mov.w	r3, #4294967295
20000722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000724:	687b      	ldr	r3, [r7, #4]
}
20000726:	4618      	mov	r0, r3
20000728:	370c      	adds	r7, #12
2000072a:	46bd      	mov	sp, r7
2000072c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000730:	4770      	bx	lr
20000732:	bf00      	nop
20000734:	20009ee0 	.word	0x20009ee0

20000738 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
20000738:	b580      	push	{r7, lr}
2000073a:	b082      	sub	sp, #8
2000073c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
2000073e:	f3ef 8305 	mrs	r3, IPSR
20000742:	603b      	str	r3, [r7, #0]
  return(result);
20000744:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000746:	2b00      	cmp	r3, #0
20000748:	d003      	beq.n	20000752 <osKernelStart+0x1a>
    stat = osErrorISR;
2000074a:	f06f 0305 	mvn.w	r3, #5
2000074e:	607b      	str	r3, [r7, #4]
20000750:	e010      	b.n	20000774 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
20000752:	4b0b      	ldr	r3, [pc, #44]	; (20000780 <osKernelStart+0x48>)
20000754:	681b      	ldr	r3, [r3, #0]
20000756:	2b01      	cmp	r3, #1
20000758:	d109      	bne.n	2000076e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
2000075a:	f7ff ffbf 	bl	200006dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
2000075e:	4b08      	ldr	r3, [pc, #32]	; (20000780 <osKernelStart+0x48>)
20000760:	2202      	movs	r2, #2
20000762:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
20000764:	f001 fcbc 	bl	200020e0 <vTaskStartScheduler>
      stat = osOK;
20000768:	2300      	movs	r3, #0
2000076a:	607b      	str	r3, [r7, #4]
2000076c:	e002      	b.n	20000774 <osKernelStart+0x3c>
    } else {
      stat = osError;
2000076e:	f04f 33ff 	mov.w	r3, #4294967295
20000772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000774:	687b      	ldr	r3, [r7, #4]
}
20000776:	4618      	mov	r0, r3
20000778:	3708      	adds	r7, #8
2000077a:	46bd      	mov	sp, r7
2000077c:	bd80      	pop	{r7, pc}
2000077e:	bf00      	nop
20000780:	20009ee0 	.word	0x20009ee0

20000784 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
20000784:	b580      	push	{r7, lr}
20000786:	b08e      	sub	sp, #56	; 0x38
20000788:	af04      	add	r7, sp, #16
2000078a:	60f8      	str	r0, [r7, #12]
2000078c:	60b9      	str	r1, [r7, #8]
2000078e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
20000790:	2300      	movs	r3, #0
20000792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000794:	f3ef 8305 	mrs	r3, IPSR
20000798:	617b      	str	r3, [r7, #20]
  return(result);
2000079a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
2000079c:	2b00      	cmp	r3, #0
2000079e:	d17e      	bne.n	2000089e <osThreadNew+0x11a>
200007a0:	68fb      	ldr	r3, [r7, #12]
200007a2:	2b00      	cmp	r3, #0
200007a4:	d07b      	beq.n	2000089e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
200007a6:	2380      	movs	r3, #128	; 0x80
200007a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
200007aa:	2318      	movs	r3, #24
200007ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
200007ae:	2300      	movs	r3, #0
200007b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
200007b2:	f04f 33ff 	mov.w	r3, #4294967295
200007b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
200007b8:	687b      	ldr	r3, [r7, #4]
200007ba:	2b00      	cmp	r3, #0
200007bc:	d045      	beq.n	2000084a <osThreadNew+0xc6>
      if (attr->name != NULL) {
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	681b      	ldr	r3, [r3, #0]
200007c2:	2b00      	cmp	r3, #0
200007c4:	d002      	beq.n	200007cc <osThreadNew+0x48>
        name = attr->name;
200007c6:	687b      	ldr	r3, [r7, #4]
200007c8:	681b      	ldr	r3, [r3, #0]
200007ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	699b      	ldr	r3, [r3, #24]
200007d0:	2b00      	cmp	r3, #0
200007d2:	d002      	beq.n	200007da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	699b      	ldr	r3, [r3, #24]
200007d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
200007da:	69fb      	ldr	r3, [r7, #28]
200007dc:	2b00      	cmp	r3, #0
200007de:	d008      	beq.n	200007f2 <osThreadNew+0x6e>
200007e0:	69fb      	ldr	r3, [r7, #28]
200007e2:	2b38      	cmp	r3, #56	; 0x38
200007e4:	d805      	bhi.n	200007f2 <osThreadNew+0x6e>
200007e6:	687b      	ldr	r3, [r7, #4]
200007e8:	685b      	ldr	r3, [r3, #4]
200007ea:	f003 0301 	and.w	r3, r3, #1
200007ee:	2b00      	cmp	r3, #0
200007f0:	d001      	beq.n	200007f6 <osThreadNew+0x72>
        return (NULL);
200007f2:	2300      	movs	r3, #0
200007f4:	e054      	b.n	200008a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	695b      	ldr	r3, [r3, #20]
200007fa:	2b00      	cmp	r3, #0
200007fc:	d003      	beq.n	20000806 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
200007fe:	687b      	ldr	r3, [r7, #4]
20000800:	695b      	ldr	r3, [r3, #20]
20000802:	089b      	lsrs	r3, r3, #2
20000804:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20000806:	687b      	ldr	r3, [r7, #4]
20000808:	689b      	ldr	r3, [r3, #8]
2000080a:	2b00      	cmp	r3, #0
2000080c:	d00e      	beq.n	2000082c <osThreadNew+0xa8>
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	68db      	ldr	r3, [r3, #12]
20000812:	2bbb      	cmp	r3, #187	; 0xbb
20000814:	d90a      	bls.n	2000082c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20000816:	687b      	ldr	r3, [r7, #4]
20000818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
2000081a:	2b00      	cmp	r3, #0
2000081c:	d006      	beq.n	2000082c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
2000081e:	687b      	ldr	r3, [r7, #4]
20000820:	695b      	ldr	r3, [r3, #20]
20000822:	2b00      	cmp	r3, #0
20000824:	d002      	beq.n	2000082c <osThreadNew+0xa8>
        mem = 1;
20000826:	2301      	movs	r3, #1
20000828:	61bb      	str	r3, [r7, #24]
2000082a:	e010      	b.n	2000084e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
2000082c:	687b      	ldr	r3, [r7, #4]
2000082e:	689b      	ldr	r3, [r3, #8]
20000830:	2b00      	cmp	r3, #0
20000832:	d10c      	bne.n	2000084e <osThreadNew+0xca>
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	68db      	ldr	r3, [r3, #12]
20000838:	2b00      	cmp	r3, #0
2000083a:	d108      	bne.n	2000084e <osThreadNew+0xca>
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	691b      	ldr	r3, [r3, #16]
20000840:	2b00      	cmp	r3, #0
20000842:	d104      	bne.n	2000084e <osThreadNew+0xca>
          mem = 0;
20000844:	2300      	movs	r3, #0
20000846:	61bb      	str	r3, [r7, #24]
20000848:	e001      	b.n	2000084e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
2000084a:	2300      	movs	r3, #0
2000084c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
2000084e:	69bb      	ldr	r3, [r7, #24]
20000850:	2b01      	cmp	r3, #1
20000852:	d110      	bne.n	20000876 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20000854:	687b      	ldr	r3, [r7, #4]
20000856:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
20000858:	687a      	ldr	r2, [r7, #4]
2000085a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
2000085c:	9202      	str	r2, [sp, #8]
2000085e:	9301      	str	r3, [sp, #4]
20000860:	69fb      	ldr	r3, [r7, #28]
20000862:	9300      	str	r3, [sp, #0]
20000864:	68bb      	ldr	r3, [r7, #8]
20000866:	6a3a      	ldr	r2, [r7, #32]
20000868:	6a79      	ldr	r1, [r7, #36]	; 0x24
2000086a:	68f8      	ldr	r0, [r7, #12]
2000086c:	f001 fa4c 	bl	20001d08 <xTaskCreateStatic>
20000870:	4603      	mov	r3, r0
20000872:	613b      	str	r3, [r7, #16]
20000874:	e013      	b.n	2000089e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
20000876:	69bb      	ldr	r3, [r7, #24]
20000878:	2b00      	cmp	r3, #0
2000087a:	d110      	bne.n	2000089e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
2000087c:	6a3b      	ldr	r3, [r7, #32]
2000087e:	b29a      	uxth	r2, r3
20000880:	f107 0310 	add.w	r3, r7, #16
20000884:	9301      	str	r3, [sp, #4]
20000886:	69fb      	ldr	r3, [r7, #28]
20000888:	9300      	str	r3, [sp, #0]
2000088a:	68bb      	ldr	r3, [r7, #8]
2000088c:	6a79      	ldr	r1, [r7, #36]	; 0x24
2000088e:	68f8      	ldr	r0, [r7, #12]
20000890:	f001 fa97 	bl	20001dc2 <xTaskCreate>
20000894:	4603      	mov	r3, r0
20000896:	2b01      	cmp	r3, #1
20000898:	d001      	beq.n	2000089e <osThreadNew+0x11a>
            hTask = NULL;
2000089a:	2300      	movs	r3, #0
2000089c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
2000089e:	693b      	ldr	r3, [r7, #16]
}
200008a0:	4618      	mov	r0, r3
200008a2:	3728      	adds	r7, #40	; 0x28
200008a4:	46bd      	mov	sp, r7
200008a6:	bd80      	pop	{r7, pc}

200008a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
200008a8:	b580      	push	{r7, lr}
200008aa:	b084      	sub	sp, #16
200008ac:	af00      	add	r7, sp, #0
200008ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200008b0:	f3ef 8305 	mrs	r3, IPSR
200008b4:	60bb      	str	r3, [r7, #8]
  return(result);
200008b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
200008b8:	2b00      	cmp	r3, #0
200008ba:	d003      	beq.n	200008c4 <osDelay+0x1c>
    stat = osErrorISR;
200008bc:	f06f 0305 	mvn.w	r3, #5
200008c0:	60fb      	str	r3, [r7, #12]
200008c2:	e007      	b.n	200008d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
200008c4:	2300      	movs	r3, #0
200008c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	2b00      	cmp	r3, #0
200008cc:	d002      	beq.n	200008d4 <osDelay+0x2c>
      vTaskDelay(ticks);
200008ce:	6878      	ldr	r0, [r7, #4]
200008d0:	f001 fbd2 	bl	20002078 <vTaskDelay>
    }
  }

  return (stat);
200008d4:	68fb      	ldr	r3, [r7, #12]
}
200008d6:	4618      	mov	r0, r3
200008d8:	3710      	adds	r7, #16
200008da:	46bd      	mov	sp, r7
200008dc:	bd80      	pop	{r7, pc}

200008de <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
200008de:	b580      	push	{r7, lr}
200008e0:	b08a      	sub	sp, #40	; 0x28
200008e2:	af02      	add	r7, sp, #8
200008e4:	60f8      	str	r0, [r7, #12]
200008e6:	60b9      	str	r1, [r7, #8]
200008e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
200008ea:	2300      	movs	r3, #0
200008ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200008ee:	f3ef 8305 	mrs	r3, IPSR
200008f2:	613b      	str	r3, [r7, #16]
  return(result);
200008f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
200008f6:	2b00      	cmp	r3, #0
200008f8:	d175      	bne.n	200009e6 <osSemaphoreNew+0x108>
200008fa:	68fb      	ldr	r3, [r7, #12]
200008fc:	2b00      	cmp	r3, #0
200008fe:	d072      	beq.n	200009e6 <osSemaphoreNew+0x108>
20000900:	68ba      	ldr	r2, [r7, #8]
20000902:	68fb      	ldr	r3, [r7, #12]
20000904:	429a      	cmp	r2, r3
20000906:	d86e      	bhi.n	200009e6 <osSemaphoreNew+0x108>
    mem = -1;
20000908:	f04f 33ff 	mov.w	r3, #4294967295
2000090c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	2b00      	cmp	r3, #0
20000912:	d015      	beq.n	20000940 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	689b      	ldr	r3, [r3, #8]
20000918:	2b00      	cmp	r3, #0
2000091a:	d006      	beq.n	2000092a <osSemaphoreNew+0x4c>
2000091c:	687b      	ldr	r3, [r7, #4]
2000091e:	68db      	ldr	r3, [r3, #12]
20000920:	2b4f      	cmp	r3, #79	; 0x4f
20000922:	d902      	bls.n	2000092a <osSemaphoreNew+0x4c>
        mem = 1;
20000924:	2301      	movs	r3, #1
20000926:	61bb      	str	r3, [r7, #24]
20000928:	e00c      	b.n	20000944 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
2000092a:	687b      	ldr	r3, [r7, #4]
2000092c:	689b      	ldr	r3, [r3, #8]
2000092e:	2b00      	cmp	r3, #0
20000930:	d108      	bne.n	20000944 <osSemaphoreNew+0x66>
20000932:	687b      	ldr	r3, [r7, #4]
20000934:	68db      	ldr	r3, [r3, #12]
20000936:	2b00      	cmp	r3, #0
20000938:	d104      	bne.n	20000944 <osSemaphoreNew+0x66>
          mem = 0;
2000093a:	2300      	movs	r3, #0
2000093c:	61bb      	str	r3, [r7, #24]
2000093e:	e001      	b.n	20000944 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
20000940:	2300      	movs	r3, #0
20000942:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
20000944:	69bb      	ldr	r3, [r7, #24]
20000946:	f1b3 3fff 	cmp.w	r3, #4294967295
2000094a:	d04c      	beq.n	200009e6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
2000094c:	68fb      	ldr	r3, [r7, #12]
2000094e:	2b01      	cmp	r3, #1
20000950:	d128      	bne.n	200009a4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
20000952:	69bb      	ldr	r3, [r7, #24]
20000954:	2b01      	cmp	r3, #1
20000956:	d10a      	bne.n	2000096e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	689b      	ldr	r3, [r3, #8]
2000095c:	2203      	movs	r2, #3
2000095e:	9200      	str	r2, [sp, #0]
20000960:	2200      	movs	r2, #0
20000962:	2100      	movs	r1, #0
20000964:	2001      	movs	r0, #1
20000966:	f000 fa29 	bl	20000dbc <xQueueGenericCreateStatic>
2000096a:	61f8      	str	r0, [r7, #28]
2000096c:	e005      	b.n	2000097a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
2000096e:	2203      	movs	r2, #3
20000970:	2100      	movs	r1, #0
20000972:	2001      	movs	r0, #1
20000974:	f000 fa9a 	bl	20000eac <xQueueGenericCreate>
20000978:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
2000097a:	69fb      	ldr	r3, [r7, #28]
2000097c:	2b00      	cmp	r3, #0
2000097e:	d022      	beq.n	200009c6 <osSemaphoreNew+0xe8>
20000980:	68bb      	ldr	r3, [r7, #8]
20000982:	2b00      	cmp	r3, #0
20000984:	d01f      	beq.n	200009c6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
20000986:	2300      	movs	r3, #0
20000988:	2200      	movs	r2, #0
2000098a:	2100      	movs	r1, #0
2000098c:	69f8      	ldr	r0, [r7, #28]
2000098e:	f000 fb55 	bl	2000103c <xQueueGenericSend>
20000992:	4603      	mov	r3, r0
20000994:	2b01      	cmp	r3, #1
20000996:	d016      	beq.n	200009c6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
20000998:	69f8      	ldr	r0, [r7, #28]
2000099a:	f000 ffe1 	bl	20001960 <vQueueDelete>
            hSemaphore = NULL;
2000099e:	2300      	movs	r3, #0
200009a0:	61fb      	str	r3, [r7, #28]
200009a2:	e010      	b.n	200009c6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
200009a4:	69bb      	ldr	r3, [r7, #24]
200009a6:	2b01      	cmp	r3, #1
200009a8:	d108      	bne.n	200009bc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
200009aa:	687b      	ldr	r3, [r7, #4]
200009ac:	689b      	ldr	r3, [r3, #8]
200009ae:	461a      	mov	r2, r3
200009b0:	68b9      	ldr	r1, [r7, #8]
200009b2:	68f8      	ldr	r0, [r7, #12]
200009b4:	f000 fad7 	bl	20000f66 <xQueueCreateCountingSemaphoreStatic>
200009b8:	61f8      	str	r0, [r7, #28]
200009ba:	e004      	b.n	200009c6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
200009bc:	68b9      	ldr	r1, [r7, #8]
200009be:	68f8      	ldr	r0, [r7, #12]
200009c0:	f000 fb08 	bl	20000fd4 <xQueueCreateCountingSemaphore>
200009c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
200009c6:	69fb      	ldr	r3, [r7, #28]
200009c8:	2b00      	cmp	r3, #0
200009ca:	d00c      	beq.n	200009e6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
200009cc:	687b      	ldr	r3, [r7, #4]
200009ce:	2b00      	cmp	r3, #0
200009d0:	d003      	beq.n	200009da <osSemaphoreNew+0xfc>
          name = attr->name;
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	681b      	ldr	r3, [r3, #0]
200009d6:	617b      	str	r3, [r7, #20]
200009d8:	e001      	b.n	200009de <osSemaphoreNew+0x100>
        } else {
          name = NULL;
200009da:	2300      	movs	r3, #0
200009dc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
200009de:	6979      	ldr	r1, [r7, #20]
200009e0:	69f8      	ldr	r0, [r7, #28]
200009e2:	f001 f909 	bl	20001bf8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
200009e6:	69fb      	ldr	r3, [r7, #28]
}
200009e8:	4618      	mov	r0, r3
200009ea:	3720      	adds	r7, #32
200009ec:	46bd      	mov	sp, r7
200009ee:	bd80      	pop	{r7, pc}

200009f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
200009f0:	b580      	push	{r7, lr}
200009f2:	b086      	sub	sp, #24
200009f4:	af00      	add	r7, sp, #0
200009f6:	6078      	str	r0, [r7, #4]
200009f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
200009fa:	687b      	ldr	r3, [r7, #4]
200009fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
200009fe:	2300      	movs	r3, #0
20000a00:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
20000a02:	693b      	ldr	r3, [r7, #16]
20000a04:	2b00      	cmp	r3, #0
20000a06:	d103      	bne.n	20000a10 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
20000a08:	f06f 0303 	mvn.w	r3, #3
20000a0c:	617b      	str	r3, [r7, #20]
20000a0e:	e039      	b.n	20000a84 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000a10:	f3ef 8305 	mrs	r3, IPSR
20000a14:	60fb      	str	r3, [r7, #12]
  return(result);
20000a16:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
20000a18:	2b00      	cmp	r3, #0
20000a1a:	d022      	beq.n	20000a62 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
20000a1c:	683b      	ldr	r3, [r7, #0]
20000a1e:	2b00      	cmp	r3, #0
20000a20:	d003      	beq.n	20000a2a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
20000a22:	f06f 0303 	mvn.w	r3, #3
20000a26:	617b      	str	r3, [r7, #20]
20000a28:	e02c      	b.n	20000a84 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
20000a2a:	2300      	movs	r3, #0
20000a2c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
20000a2e:	f107 0308 	add.w	r3, r7, #8
20000a32:	461a      	mov	r2, r3
20000a34:	2100      	movs	r1, #0
20000a36:	6938      	ldr	r0, [r7, #16]
20000a38:	f000 ff12 	bl	20001860 <xQueueReceiveFromISR>
20000a3c:	4603      	mov	r3, r0
20000a3e:	2b01      	cmp	r3, #1
20000a40:	d003      	beq.n	20000a4a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
20000a42:	f06f 0302 	mvn.w	r3, #2
20000a46:	617b      	str	r3, [r7, #20]
20000a48:	e01c      	b.n	20000a84 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
20000a4a:	68bb      	ldr	r3, [r7, #8]
20000a4c:	2b00      	cmp	r3, #0
20000a4e:	d019      	beq.n	20000a84 <osSemaphoreAcquire+0x94>
20000a50:	4b0f      	ldr	r3, [pc, #60]	; (20000a90 <osSemaphoreAcquire+0xa0>)
20000a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20000a56:	601a      	str	r2, [r3, #0]
20000a58:	f3bf 8f4f 	dsb	sy
20000a5c:	f3bf 8f6f 	isb	sy
20000a60:	e010      	b.n	20000a84 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
20000a62:	6839      	ldr	r1, [r7, #0]
20000a64:	6938      	ldr	r0, [r7, #16]
20000a66:	f000 fdef 	bl	20001648 <xQueueSemaphoreTake>
20000a6a:	4603      	mov	r3, r0
20000a6c:	2b01      	cmp	r3, #1
20000a6e:	d009      	beq.n	20000a84 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
20000a70:	683b      	ldr	r3, [r7, #0]
20000a72:	2b00      	cmp	r3, #0
20000a74:	d003      	beq.n	20000a7e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
20000a76:	f06f 0301 	mvn.w	r3, #1
20000a7a:	617b      	str	r3, [r7, #20]
20000a7c:	e002      	b.n	20000a84 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
20000a7e:	f06f 0302 	mvn.w	r3, #2
20000a82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
20000a84:	697b      	ldr	r3, [r7, #20]
}
20000a86:	4618      	mov	r0, r3
20000a88:	3718      	adds	r7, #24
20000a8a:	46bd      	mov	sp, r7
20000a8c:	bd80      	pop	{r7, pc}
20000a8e:	bf00      	nop
20000a90:	e000ed04 	.word	0xe000ed04

20000a94 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
20000a94:	b580      	push	{r7, lr}
20000a96:	b086      	sub	sp, #24
20000a98:	af00      	add	r7, sp, #0
20000a9a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
20000a9c:	687b      	ldr	r3, [r7, #4]
20000a9e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
20000aa0:	2300      	movs	r3, #0
20000aa2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
20000aa4:	693b      	ldr	r3, [r7, #16]
20000aa6:	2b00      	cmp	r3, #0
20000aa8:	d103      	bne.n	20000ab2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
20000aaa:	f06f 0303 	mvn.w	r3, #3
20000aae:	617b      	str	r3, [r7, #20]
20000ab0:	e02c      	b.n	20000b0c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000ab2:	f3ef 8305 	mrs	r3, IPSR
20000ab6:	60fb      	str	r3, [r7, #12]
  return(result);
20000ab8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
20000aba:	2b00      	cmp	r3, #0
20000abc:	d01a      	beq.n	20000af4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
20000abe:	2300      	movs	r3, #0
20000ac0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
20000ac2:	f107 0308 	add.w	r3, r7, #8
20000ac6:	4619      	mov	r1, r3
20000ac8:	6938      	ldr	r0, [r7, #16]
20000aca:	f000 fc50 	bl	2000136e <xQueueGiveFromISR>
20000ace:	4603      	mov	r3, r0
20000ad0:	2b01      	cmp	r3, #1
20000ad2:	d003      	beq.n	20000adc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
20000ad4:	f06f 0302 	mvn.w	r3, #2
20000ad8:	617b      	str	r3, [r7, #20]
20000ada:	e017      	b.n	20000b0c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
20000adc:	68bb      	ldr	r3, [r7, #8]
20000ade:	2b00      	cmp	r3, #0
20000ae0:	d014      	beq.n	20000b0c <osSemaphoreRelease+0x78>
20000ae2:	4b0d      	ldr	r3, [pc, #52]	; (20000b18 <osSemaphoreRelease+0x84>)
20000ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20000ae8:	601a      	str	r2, [r3, #0]
20000aea:	f3bf 8f4f 	dsb	sy
20000aee:	f3bf 8f6f 	isb	sy
20000af2:	e00b      	b.n	20000b0c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
20000af4:	2300      	movs	r3, #0
20000af6:	2200      	movs	r2, #0
20000af8:	2100      	movs	r1, #0
20000afa:	6938      	ldr	r0, [r7, #16]
20000afc:	f000 fa9e 	bl	2000103c <xQueueGenericSend>
20000b00:	4603      	mov	r3, r0
20000b02:	2b01      	cmp	r3, #1
20000b04:	d002      	beq.n	20000b0c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
20000b06:	f06f 0302 	mvn.w	r3, #2
20000b0a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
20000b0c:	697b      	ldr	r3, [r7, #20]
}
20000b0e:	4618      	mov	r0, r3
20000b10:	3718      	adds	r7, #24
20000b12:	46bd      	mov	sp, r7
20000b14:	bd80      	pop	{r7, pc}
20000b16:	bf00      	nop
20000b18:	e000ed04 	.word	0xe000ed04

20000b1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
20000b1c:	b480      	push	{r7}
20000b1e:	b085      	sub	sp, #20
20000b20:	af00      	add	r7, sp, #0
20000b22:	60f8      	str	r0, [r7, #12]
20000b24:	60b9      	str	r1, [r7, #8]
20000b26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
20000b28:	68fb      	ldr	r3, [r7, #12]
20000b2a:	4a07      	ldr	r2, [pc, #28]	; (20000b48 <vApplicationGetIdleTaskMemory+0x2c>)
20000b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
20000b2e:	68bb      	ldr	r3, [r7, #8]
20000b30:	4a06      	ldr	r2, [pc, #24]	; (20000b4c <vApplicationGetIdleTaskMemory+0x30>)
20000b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
20000b34:	687b      	ldr	r3, [r7, #4]
20000b36:	2280      	movs	r2, #128	; 0x80
20000b38:	601a      	str	r2, [r3, #0]
}
20000b3a:	bf00      	nop
20000b3c:	3714      	adds	r7, #20
20000b3e:	46bd      	mov	sp, r7
20000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b44:	4770      	bx	lr
20000b46:	bf00      	nop
20000b48:	20009ee4 	.word	0x20009ee4
20000b4c:	20009fa0 	.word	0x20009fa0

20000b50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
20000b50:	b480      	push	{r7}
20000b52:	b085      	sub	sp, #20
20000b54:	af00      	add	r7, sp, #0
20000b56:	60f8      	str	r0, [r7, #12]
20000b58:	60b9      	str	r1, [r7, #8]
20000b5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
20000b5c:	68fb      	ldr	r3, [r7, #12]
20000b5e:	4a07      	ldr	r2, [pc, #28]	; (20000b7c <vApplicationGetTimerTaskMemory+0x2c>)
20000b60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
20000b62:	68bb      	ldr	r3, [r7, #8]
20000b64:	4a06      	ldr	r2, [pc, #24]	; (20000b80 <vApplicationGetTimerTaskMemory+0x30>)
20000b66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
20000b68:	687b      	ldr	r3, [r7, #4]
20000b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
20000b6e:	601a      	str	r2, [r3, #0]
}
20000b70:	bf00      	nop
20000b72:	3714      	adds	r7, #20
20000b74:	46bd      	mov	sp, r7
20000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b7a:	4770      	bx	lr
20000b7c:	2000a1a0 	.word	0x2000a1a0
20000b80:	2000a25c 	.word	0x2000a25c

20000b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20000b84:	b480      	push	{r7}
20000b86:	b083      	sub	sp, #12
20000b88:	af00      	add	r7, sp, #0
20000b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000b8c:	687b      	ldr	r3, [r7, #4]
20000b8e:	f103 0208 	add.w	r2, r3, #8
20000b92:	687b      	ldr	r3, [r7, #4]
20000b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20000b96:	687b      	ldr	r3, [r7, #4]
20000b98:	f04f 32ff 	mov.w	r2, #4294967295
20000b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000b9e:	687b      	ldr	r3, [r7, #4]
20000ba0:	f103 0208 	add.w	r2, r3, #8
20000ba4:	687b      	ldr	r3, [r7, #4]
20000ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000ba8:	687b      	ldr	r3, [r7, #4]
20000baa:	f103 0208 	add.w	r2, r3, #8
20000bae:	687b      	ldr	r3, [r7, #4]
20000bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20000bb2:	687b      	ldr	r3, [r7, #4]
20000bb4:	2200      	movs	r2, #0
20000bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20000bb8:	bf00      	nop
20000bba:	370c      	adds	r7, #12
20000bbc:	46bd      	mov	sp, r7
20000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
20000bc2:	4770      	bx	lr

20000bc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20000bc4:	b480      	push	{r7}
20000bc6:	b083      	sub	sp, #12
20000bc8:	af00      	add	r7, sp, #0
20000bca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
20000bcc:	687b      	ldr	r3, [r7, #4]
20000bce:	2200      	movs	r2, #0
20000bd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20000bd2:	bf00      	nop
20000bd4:	370c      	adds	r7, #12
20000bd6:	46bd      	mov	sp, r7
20000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20000bdc:	4770      	bx	lr

20000bde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000bde:	b480      	push	{r7}
20000be0:	b085      	sub	sp, #20
20000be2:	af00      	add	r7, sp, #0
20000be4:	6078      	str	r0, [r7, #4]
20000be6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20000be8:	687b      	ldr	r3, [r7, #4]
20000bea:	685b      	ldr	r3, [r3, #4]
20000bec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20000bee:	683b      	ldr	r3, [r7, #0]
20000bf0:	68fa      	ldr	r2, [r7, #12]
20000bf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
20000bf4:	68fb      	ldr	r3, [r7, #12]
20000bf6:	689a      	ldr	r2, [r3, #8]
20000bf8:	683b      	ldr	r3, [r7, #0]
20000bfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20000bfc:	68fb      	ldr	r3, [r7, #12]
20000bfe:	689b      	ldr	r3, [r3, #8]
20000c00:	683a      	ldr	r2, [r7, #0]
20000c02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
20000c04:	68fb      	ldr	r3, [r7, #12]
20000c06:	683a      	ldr	r2, [r7, #0]
20000c08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
20000c0a:	683b      	ldr	r3, [r7, #0]
20000c0c:	687a      	ldr	r2, [r7, #4]
20000c0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20000c10:	687b      	ldr	r3, [r7, #4]
20000c12:	681b      	ldr	r3, [r3, #0]
20000c14:	1c5a      	adds	r2, r3, #1
20000c16:	687b      	ldr	r3, [r7, #4]
20000c18:	601a      	str	r2, [r3, #0]
}
20000c1a:	bf00      	nop
20000c1c:	3714      	adds	r7, #20
20000c1e:	46bd      	mov	sp, r7
20000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c24:	4770      	bx	lr

20000c26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000c26:	b480      	push	{r7}
20000c28:	b085      	sub	sp, #20
20000c2a:	af00      	add	r7, sp, #0
20000c2c:	6078      	str	r0, [r7, #4]
20000c2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
20000c30:	683b      	ldr	r3, [r7, #0]
20000c32:	681b      	ldr	r3, [r3, #0]
20000c34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20000c36:	68bb      	ldr	r3, [r7, #8]
20000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
20000c3c:	d103      	bne.n	20000c46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20000c3e:	687b      	ldr	r3, [r7, #4]
20000c40:	691b      	ldr	r3, [r3, #16]
20000c42:	60fb      	str	r3, [r7, #12]
20000c44:	e00c      	b.n	20000c60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
20000c46:	687b      	ldr	r3, [r7, #4]
20000c48:	3308      	adds	r3, #8
20000c4a:	60fb      	str	r3, [r7, #12]
20000c4c:	e002      	b.n	20000c54 <vListInsert+0x2e>
20000c4e:	68fb      	ldr	r3, [r7, #12]
20000c50:	685b      	ldr	r3, [r3, #4]
20000c52:	60fb      	str	r3, [r7, #12]
20000c54:	68fb      	ldr	r3, [r7, #12]
20000c56:	685b      	ldr	r3, [r3, #4]
20000c58:	681b      	ldr	r3, [r3, #0]
20000c5a:	68ba      	ldr	r2, [r7, #8]
20000c5c:	429a      	cmp	r2, r3
20000c5e:	d2f6      	bcs.n	20000c4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
20000c60:	68fb      	ldr	r3, [r7, #12]
20000c62:	685a      	ldr	r2, [r3, #4]
20000c64:	683b      	ldr	r3, [r7, #0]
20000c66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20000c68:	683b      	ldr	r3, [r7, #0]
20000c6a:	685b      	ldr	r3, [r3, #4]
20000c6c:	683a      	ldr	r2, [r7, #0]
20000c6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
20000c70:	683b      	ldr	r3, [r7, #0]
20000c72:	68fa      	ldr	r2, [r7, #12]
20000c74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20000c76:	68fb      	ldr	r3, [r7, #12]
20000c78:	683a      	ldr	r2, [r7, #0]
20000c7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
20000c7c:	683b      	ldr	r3, [r7, #0]
20000c7e:	687a      	ldr	r2, [r7, #4]
20000c80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20000c82:	687b      	ldr	r3, [r7, #4]
20000c84:	681b      	ldr	r3, [r3, #0]
20000c86:	1c5a      	adds	r2, r3, #1
20000c88:	687b      	ldr	r3, [r7, #4]
20000c8a:	601a      	str	r2, [r3, #0]
}
20000c8c:	bf00      	nop
20000c8e:	3714      	adds	r7, #20
20000c90:	46bd      	mov	sp, r7
20000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c96:	4770      	bx	lr

20000c98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20000c98:	b480      	push	{r7}
20000c9a:	b085      	sub	sp, #20
20000c9c:	af00      	add	r7, sp, #0
20000c9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
20000ca0:	687b      	ldr	r3, [r7, #4]
20000ca2:	691b      	ldr	r3, [r3, #16]
20000ca4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20000ca6:	687b      	ldr	r3, [r7, #4]
20000ca8:	685b      	ldr	r3, [r3, #4]
20000caa:	687a      	ldr	r2, [r7, #4]
20000cac:	6892      	ldr	r2, [r2, #8]
20000cae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
20000cb0:	687b      	ldr	r3, [r7, #4]
20000cb2:	689b      	ldr	r3, [r3, #8]
20000cb4:	687a      	ldr	r2, [r7, #4]
20000cb6:	6852      	ldr	r2, [r2, #4]
20000cb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
20000cba:	68fb      	ldr	r3, [r7, #12]
20000cbc:	685b      	ldr	r3, [r3, #4]
20000cbe:	687a      	ldr	r2, [r7, #4]
20000cc0:	429a      	cmp	r2, r3
20000cc2:	d103      	bne.n	20000ccc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
20000cc4:	687b      	ldr	r3, [r7, #4]
20000cc6:	689a      	ldr	r2, [r3, #8]
20000cc8:	68fb      	ldr	r3, [r7, #12]
20000cca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
20000ccc:	687b      	ldr	r3, [r7, #4]
20000cce:	2200      	movs	r2, #0
20000cd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
20000cd2:	68fb      	ldr	r3, [r7, #12]
20000cd4:	681b      	ldr	r3, [r3, #0]
20000cd6:	1e5a      	subs	r2, r3, #1
20000cd8:	68fb      	ldr	r3, [r7, #12]
20000cda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
20000cdc:	68fb      	ldr	r3, [r7, #12]
20000cde:	681b      	ldr	r3, [r3, #0]
}
20000ce0:	4618      	mov	r0, r3
20000ce2:	3714      	adds	r7, #20
20000ce4:	46bd      	mov	sp, r7
20000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000cea:	4770      	bx	lr

20000cec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
20000cec:	b580      	push	{r7, lr}
20000cee:	b084      	sub	sp, #16
20000cf0:	af00      	add	r7, sp, #0
20000cf2:	6078      	str	r0, [r7, #4]
20000cf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
20000cf6:	687b      	ldr	r3, [r7, #4]
20000cf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
20000cfa:	68fb      	ldr	r3, [r7, #12]
20000cfc:	2b00      	cmp	r3, #0
20000cfe:	d10a      	bne.n	20000d16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000d00:	f04f 0350 	mov.w	r3, #80	; 0x50
20000d04:	f383 8811 	msr	BASEPRI, r3
20000d08:	f3bf 8f6f 	isb	sy
20000d0c:	f3bf 8f4f 	dsb	sy
20000d10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
20000d12:	bf00      	nop
20000d14:	e7fe      	b.n	20000d14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
20000d16:	f002 fc95 	bl	20003644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20000d1a:	68fb      	ldr	r3, [r7, #12]
20000d1c:	681a      	ldr	r2, [r3, #0]
20000d1e:	68fb      	ldr	r3, [r7, #12]
20000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20000d22:	68f9      	ldr	r1, [r7, #12]
20000d24:	6c09      	ldr	r1, [r1, #64]	; 0x40
20000d26:	fb01 f303 	mul.w	r3, r1, r3
20000d2a:	441a      	add	r2, r3
20000d2c:	68fb      	ldr	r3, [r7, #12]
20000d2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
20000d30:	68fb      	ldr	r3, [r7, #12]
20000d32:	2200      	movs	r2, #0
20000d34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20000d36:	68fb      	ldr	r3, [r7, #12]
20000d38:	681a      	ldr	r2, [r3, #0]
20000d3a:	68fb      	ldr	r3, [r7, #12]
20000d3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20000d3e:	68fb      	ldr	r3, [r7, #12]
20000d40:	681a      	ldr	r2, [r3, #0]
20000d42:	68fb      	ldr	r3, [r7, #12]
20000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20000d46:	3b01      	subs	r3, #1
20000d48:	68f9      	ldr	r1, [r7, #12]
20000d4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
20000d4c:	fb01 f303 	mul.w	r3, r1, r3
20000d50:	441a      	add	r2, r3
20000d52:	68fb      	ldr	r3, [r7, #12]
20000d54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20000d56:	68fb      	ldr	r3, [r7, #12]
20000d58:	22ff      	movs	r2, #255	; 0xff
20000d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
20000d5e:	68fb      	ldr	r3, [r7, #12]
20000d60:	22ff      	movs	r2, #255	; 0xff
20000d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
20000d66:	683b      	ldr	r3, [r7, #0]
20000d68:	2b00      	cmp	r3, #0
20000d6a:	d114      	bne.n	20000d96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20000d6c:	68fb      	ldr	r3, [r7, #12]
20000d6e:	691b      	ldr	r3, [r3, #16]
20000d70:	2b00      	cmp	r3, #0
20000d72:	d01a      	beq.n	20000daa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20000d74:	68fb      	ldr	r3, [r7, #12]
20000d76:	3310      	adds	r3, #16
20000d78:	4618      	mov	r0, r3
20000d7a:	f001 fc4b 	bl	20002614 <xTaskRemoveFromEventList>
20000d7e:	4603      	mov	r3, r0
20000d80:	2b00      	cmp	r3, #0
20000d82:	d012      	beq.n	20000daa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
20000d84:	4b0c      	ldr	r3, [pc, #48]	; (20000db8 <xQueueGenericReset+0xcc>)
20000d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20000d8a:	601a      	str	r2, [r3, #0]
20000d8c:	f3bf 8f4f 	dsb	sy
20000d90:	f3bf 8f6f 	isb	sy
20000d94:	e009      	b.n	20000daa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20000d96:	68fb      	ldr	r3, [r7, #12]
20000d98:	3310      	adds	r3, #16
20000d9a:	4618      	mov	r0, r3
20000d9c:	f7ff fef2 	bl	20000b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
20000da0:	68fb      	ldr	r3, [r7, #12]
20000da2:	3324      	adds	r3, #36	; 0x24
20000da4:	4618      	mov	r0, r3
20000da6:	f7ff feed 	bl	20000b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
20000daa:	f002 fc7b 	bl	200036a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
20000dae:	2301      	movs	r3, #1
}
20000db0:	4618      	mov	r0, r3
20000db2:	3710      	adds	r7, #16
20000db4:	46bd      	mov	sp, r7
20000db6:	bd80      	pop	{r7, pc}
20000db8:	e000ed04 	.word	0xe000ed04

20000dbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
20000dbc:	b580      	push	{r7, lr}
20000dbe:	b08e      	sub	sp, #56	; 0x38
20000dc0:	af02      	add	r7, sp, #8
20000dc2:	60f8      	str	r0, [r7, #12]
20000dc4:	60b9      	str	r1, [r7, #8]
20000dc6:	607a      	str	r2, [r7, #4]
20000dc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20000dca:	68fb      	ldr	r3, [r7, #12]
20000dcc:	2b00      	cmp	r3, #0
20000dce:	d10a      	bne.n	20000de6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
20000dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
20000dd4:	f383 8811 	msr	BASEPRI, r3
20000dd8:	f3bf 8f6f 	isb	sy
20000ddc:	f3bf 8f4f 	dsb	sy
20000de0:	62bb      	str	r3, [r7, #40]	; 0x28
}
20000de2:	bf00      	nop
20000de4:	e7fe      	b.n	20000de4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
20000de6:	683b      	ldr	r3, [r7, #0]
20000de8:	2b00      	cmp	r3, #0
20000dea:	d10a      	bne.n	20000e02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
20000dec:	f04f 0350 	mov.w	r3, #80	; 0x50
20000df0:	f383 8811 	msr	BASEPRI, r3
20000df4:	f3bf 8f6f 	isb	sy
20000df8:	f3bf 8f4f 	dsb	sy
20000dfc:	627b      	str	r3, [r7, #36]	; 0x24
}
20000dfe:	bf00      	nop
20000e00:	e7fe      	b.n	20000e00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
20000e02:	687b      	ldr	r3, [r7, #4]
20000e04:	2b00      	cmp	r3, #0
20000e06:	d002      	beq.n	20000e0e <xQueueGenericCreateStatic+0x52>
20000e08:	68bb      	ldr	r3, [r7, #8]
20000e0a:	2b00      	cmp	r3, #0
20000e0c:	d001      	beq.n	20000e12 <xQueueGenericCreateStatic+0x56>
20000e0e:	2301      	movs	r3, #1
20000e10:	e000      	b.n	20000e14 <xQueueGenericCreateStatic+0x58>
20000e12:	2300      	movs	r3, #0
20000e14:	2b00      	cmp	r3, #0
20000e16:	d10a      	bne.n	20000e2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
20000e18:	f04f 0350 	mov.w	r3, #80	; 0x50
20000e1c:	f383 8811 	msr	BASEPRI, r3
20000e20:	f3bf 8f6f 	isb	sy
20000e24:	f3bf 8f4f 	dsb	sy
20000e28:	623b      	str	r3, [r7, #32]
}
20000e2a:	bf00      	nop
20000e2c:	e7fe      	b.n	20000e2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
20000e2e:	687b      	ldr	r3, [r7, #4]
20000e30:	2b00      	cmp	r3, #0
20000e32:	d102      	bne.n	20000e3a <xQueueGenericCreateStatic+0x7e>
20000e34:	68bb      	ldr	r3, [r7, #8]
20000e36:	2b00      	cmp	r3, #0
20000e38:	d101      	bne.n	20000e3e <xQueueGenericCreateStatic+0x82>
20000e3a:	2301      	movs	r3, #1
20000e3c:	e000      	b.n	20000e40 <xQueueGenericCreateStatic+0x84>
20000e3e:	2300      	movs	r3, #0
20000e40:	2b00      	cmp	r3, #0
20000e42:	d10a      	bne.n	20000e5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
20000e44:	f04f 0350 	mov.w	r3, #80	; 0x50
20000e48:	f383 8811 	msr	BASEPRI, r3
20000e4c:	f3bf 8f6f 	isb	sy
20000e50:	f3bf 8f4f 	dsb	sy
20000e54:	61fb      	str	r3, [r7, #28]
}
20000e56:	bf00      	nop
20000e58:	e7fe      	b.n	20000e58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
20000e5a:	2350      	movs	r3, #80	; 0x50
20000e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
20000e5e:	697b      	ldr	r3, [r7, #20]
20000e60:	2b50      	cmp	r3, #80	; 0x50
20000e62:	d00a      	beq.n	20000e7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
20000e64:	f04f 0350 	mov.w	r3, #80	; 0x50
20000e68:	f383 8811 	msr	BASEPRI, r3
20000e6c:	f3bf 8f6f 	isb	sy
20000e70:	f3bf 8f4f 	dsb	sy
20000e74:	61bb      	str	r3, [r7, #24]
}
20000e76:	bf00      	nop
20000e78:	e7fe      	b.n	20000e78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
20000e7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20000e7c:	683b      	ldr	r3, [r7, #0]
20000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
20000e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e82:	2b00      	cmp	r3, #0
20000e84:	d00d      	beq.n	20000ea2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
20000e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e88:	2201      	movs	r2, #1
20000e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20000e8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
20000e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20000e94:	9300      	str	r3, [sp, #0]
20000e96:	4613      	mov	r3, r2
20000e98:	687a      	ldr	r2, [r7, #4]
20000e9a:	68b9      	ldr	r1, [r7, #8]
20000e9c:	68f8      	ldr	r0, [r7, #12]
20000e9e:	f000 f83f 	bl	20000f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
20000ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
20000ea4:	4618      	mov	r0, r3
20000ea6:	3730      	adds	r7, #48	; 0x30
20000ea8:	46bd      	mov	sp, r7
20000eaa:	bd80      	pop	{r7, pc}

20000eac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20000eac:	b580      	push	{r7, lr}
20000eae:	b08a      	sub	sp, #40	; 0x28
20000eb0:	af02      	add	r7, sp, #8
20000eb2:	60f8      	str	r0, [r7, #12]
20000eb4:	60b9      	str	r1, [r7, #8]
20000eb6:	4613      	mov	r3, r2
20000eb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
20000eba:	68fb      	ldr	r3, [r7, #12]
20000ebc:	2b00      	cmp	r3, #0
20000ebe:	d10a      	bne.n	20000ed6 <xQueueGenericCreate+0x2a>
	__asm volatile
20000ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
20000ec4:	f383 8811 	msr	BASEPRI, r3
20000ec8:	f3bf 8f6f 	isb	sy
20000ecc:	f3bf 8f4f 	dsb	sy
20000ed0:	613b      	str	r3, [r7, #16]
}
20000ed2:	bf00      	nop
20000ed4:	e7fe      	b.n	20000ed4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20000ed6:	68fb      	ldr	r3, [r7, #12]
20000ed8:	68ba      	ldr	r2, [r7, #8]
20000eda:	fb02 f303 	mul.w	r3, r2, r3
20000ede:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
20000ee0:	69fb      	ldr	r3, [r7, #28]
20000ee2:	3350      	adds	r3, #80	; 0x50
20000ee4:	4618      	mov	r0, r3
20000ee6:	f002 fccf 	bl	20003888 <pvPortMalloc>
20000eea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
20000eec:	69bb      	ldr	r3, [r7, #24]
20000eee:	2b00      	cmp	r3, #0
20000ef0:	d011      	beq.n	20000f16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
20000ef2:	69bb      	ldr	r3, [r7, #24]
20000ef4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20000ef6:	697b      	ldr	r3, [r7, #20]
20000ef8:	3350      	adds	r3, #80	; 0x50
20000efa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
20000efc:	69bb      	ldr	r3, [r7, #24]
20000efe:	2200      	movs	r2, #0
20000f00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20000f04:	79fa      	ldrb	r2, [r7, #7]
20000f06:	69bb      	ldr	r3, [r7, #24]
20000f08:	9300      	str	r3, [sp, #0]
20000f0a:	4613      	mov	r3, r2
20000f0c:	697a      	ldr	r2, [r7, #20]
20000f0e:	68b9      	ldr	r1, [r7, #8]
20000f10:	68f8      	ldr	r0, [r7, #12]
20000f12:	f000 f805 	bl	20000f20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
20000f16:	69bb      	ldr	r3, [r7, #24]
	}
20000f18:	4618      	mov	r0, r3
20000f1a:	3720      	adds	r7, #32
20000f1c:	46bd      	mov	sp, r7
20000f1e:	bd80      	pop	{r7, pc}

20000f20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20000f20:	b580      	push	{r7, lr}
20000f22:	b084      	sub	sp, #16
20000f24:	af00      	add	r7, sp, #0
20000f26:	60f8      	str	r0, [r7, #12]
20000f28:	60b9      	str	r1, [r7, #8]
20000f2a:	607a      	str	r2, [r7, #4]
20000f2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20000f2e:	68bb      	ldr	r3, [r7, #8]
20000f30:	2b00      	cmp	r3, #0
20000f32:	d103      	bne.n	20000f3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20000f34:	69bb      	ldr	r3, [r7, #24]
20000f36:	69ba      	ldr	r2, [r7, #24]
20000f38:	601a      	str	r2, [r3, #0]
20000f3a:	e002      	b.n	20000f42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20000f3c:	69bb      	ldr	r3, [r7, #24]
20000f3e:	687a      	ldr	r2, [r7, #4]
20000f40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20000f42:	69bb      	ldr	r3, [r7, #24]
20000f44:	68fa      	ldr	r2, [r7, #12]
20000f46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20000f48:	69bb      	ldr	r3, [r7, #24]
20000f4a:	68ba      	ldr	r2, [r7, #8]
20000f4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
20000f4e:	2101      	movs	r1, #1
20000f50:	69b8      	ldr	r0, [r7, #24]
20000f52:	f7ff fecb 	bl	20000cec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
20000f56:	69bb      	ldr	r3, [r7, #24]
20000f58:	78fa      	ldrb	r2, [r7, #3]
20000f5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
20000f5e:	bf00      	nop
20000f60:	3710      	adds	r7, #16
20000f62:	46bd      	mov	sp, r7
20000f64:	bd80      	pop	{r7, pc}

20000f66 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
20000f66:	b580      	push	{r7, lr}
20000f68:	b08a      	sub	sp, #40	; 0x28
20000f6a:	af02      	add	r7, sp, #8
20000f6c:	60f8      	str	r0, [r7, #12]
20000f6e:	60b9      	str	r1, [r7, #8]
20000f70:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
20000f72:	68fb      	ldr	r3, [r7, #12]
20000f74:	2b00      	cmp	r3, #0
20000f76:	d10a      	bne.n	20000f8e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
20000f78:	f04f 0350 	mov.w	r3, #80	; 0x50
20000f7c:	f383 8811 	msr	BASEPRI, r3
20000f80:	f3bf 8f6f 	isb	sy
20000f84:	f3bf 8f4f 	dsb	sy
20000f88:	61bb      	str	r3, [r7, #24]
}
20000f8a:	bf00      	nop
20000f8c:	e7fe      	b.n	20000f8c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
20000f8e:	68ba      	ldr	r2, [r7, #8]
20000f90:	68fb      	ldr	r3, [r7, #12]
20000f92:	429a      	cmp	r2, r3
20000f94:	d90a      	bls.n	20000fac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
20000f96:	f04f 0350 	mov.w	r3, #80	; 0x50
20000f9a:	f383 8811 	msr	BASEPRI, r3
20000f9e:	f3bf 8f6f 	isb	sy
20000fa2:	f3bf 8f4f 	dsb	sy
20000fa6:	617b      	str	r3, [r7, #20]
}
20000fa8:	bf00      	nop
20000faa:	e7fe      	b.n	20000faa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20000fac:	2302      	movs	r3, #2
20000fae:	9300      	str	r3, [sp, #0]
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	2200      	movs	r2, #0
20000fb4:	2100      	movs	r1, #0
20000fb6:	68f8      	ldr	r0, [r7, #12]
20000fb8:	f7ff ff00 	bl	20000dbc <xQueueGenericCreateStatic>
20000fbc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
20000fbe:	69fb      	ldr	r3, [r7, #28]
20000fc0:	2b00      	cmp	r3, #0
20000fc2:	d002      	beq.n	20000fca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
20000fc4:	69fb      	ldr	r3, [r7, #28]
20000fc6:	68ba      	ldr	r2, [r7, #8]
20000fc8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
20000fca:	69fb      	ldr	r3, [r7, #28]
	}
20000fcc:	4618      	mov	r0, r3
20000fce:	3720      	adds	r7, #32
20000fd0:	46bd      	mov	sp, r7
20000fd2:	bd80      	pop	{r7, pc}

20000fd4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
20000fd4:	b580      	push	{r7, lr}
20000fd6:	b086      	sub	sp, #24
20000fd8:	af00      	add	r7, sp, #0
20000fda:	6078      	str	r0, [r7, #4]
20000fdc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
20000fde:	687b      	ldr	r3, [r7, #4]
20000fe0:	2b00      	cmp	r3, #0
20000fe2:	d10a      	bne.n	20000ffa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
20000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
20000fe8:	f383 8811 	msr	BASEPRI, r3
20000fec:	f3bf 8f6f 	isb	sy
20000ff0:	f3bf 8f4f 	dsb	sy
20000ff4:	613b      	str	r3, [r7, #16]
}
20000ff6:	bf00      	nop
20000ff8:	e7fe      	b.n	20000ff8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
20000ffa:	683a      	ldr	r2, [r7, #0]
20000ffc:	687b      	ldr	r3, [r7, #4]
20000ffe:	429a      	cmp	r2, r3
20001000:	d90a      	bls.n	20001018 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
20001002:	f04f 0350 	mov.w	r3, #80	; 0x50
20001006:	f383 8811 	msr	BASEPRI, r3
2000100a:	f3bf 8f6f 	isb	sy
2000100e:	f3bf 8f4f 	dsb	sy
20001012:	60fb      	str	r3, [r7, #12]
}
20001014:	bf00      	nop
20001016:	e7fe      	b.n	20001016 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001018:	2202      	movs	r2, #2
2000101a:	2100      	movs	r1, #0
2000101c:	6878      	ldr	r0, [r7, #4]
2000101e:	f7ff ff45 	bl	20000eac <xQueueGenericCreate>
20001022:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
20001024:	697b      	ldr	r3, [r7, #20]
20001026:	2b00      	cmp	r3, #0
20001028:	d002      	beq.n	20001030 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
2000102a:	697b      	ldr	r3, [r7, #20]
2000102c:	683a      	ldr	r2, [r7, #0]
2000102e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
20001030:	697b      	ldr	r3, [r7, #20]
	}
20001032:	4618      	mov	r0, r3
20001034:	3718      	adds	r7, #24
20001036:	46bd      	mov	sp, r7
20001038:	bd80      	pop	{r7, pc}
	...

2000103c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
2000103c:	b580      	push	{r7, lr}
2000103e:	b08e      	sub	sp, #56	; 0x38
20001040:	af00      	add	r7, sp, #0
20001042:	60f8      	str	r0, [r7, #12]
20001044:	60b9      	str	r1, [r7, #8]
20001046:	607a      	str	r2, [r7, #4]
20001048:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
2000104a:	2300      	movs	r3, #0
2000104c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
2000104e:	68fb      	ldr	r3, [r7, #12]
20001050:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
20001052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001054:	2b00      	cmp	r3, #0
20001056:	d10a      	bne.n	2000106e <xQueueGenericSend+0x32>
	__asm volatile
20001058:	f04f 0350 	mov.w	r3, #80	; 0x50
2000105c:	f383 8811 	msr	BASEPRI, r3
20001060:	f3bf 8f6f 	isb	sy
20001064:	f3bf 8f4f 	dsb	sy
20001068:	62bb      	str	r3, [r7, #40]	; 0x28
}
2000106a:	bf00      	nop
2000106c:	e7fe      	b.n	2000106c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000106e:	68bb      	ldr	r3, [r7, #8]
20001070:	2b00      	cmp	r3, #0
20001072:	d103      	bne.n	2000107c <xQueueGenericSend+0x40>
20001074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001078:	2b00      	cmp	r3, #0
2000107a:	d101      	bne.n	20001080 <xQueueGenericSend+0x44>
2000107c:	2301      	movs	r3, #1
2000107e:	e000      	b.n	20001082 <xQueueGenericSend+0x46>
20001080:	2300      	movs	r3, #0
20001082:	2b00      	cmp	r3, #0
20001084:	d10a      	bne.n	2000109c <xQueueGenericSend+0x60>
	__asm volatile
20001086:	f04f 0350 	mov.w	r3, #80	; 0x50
2000108a:	f383 8811 	msr	BASEPRI, r3
2000108e:	f3bf 8f6f 	isb	sy
20001092:	f3bf 8f4f 	dsb	sy
20001096:	627b      	str	r3, [r7, #36]	; 0x24
}
20001098:	bf00      	nop
2000109a:	e7fe      	b.n	2000109a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
2000109c:	683b      	ldr	r3, [r7, #0]
2000109e:	2b02      	cmp	r3, #2
200010a0:	d103      	bne.n	200010aa <xQueueGenericSend+0x6e>
200010a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200010a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200010a6:	2b01      	cmp	r3, #1
200010a8:	d101      	bne.n	200010ae <xQueueGenericSend+0x72>
200010aa:	2301      	movs	r3, #1
200010ac:	e000      	b.n	200010b0 <xQueueGenericSend+0x74>
200010ae:	2300      	movs	r3, #0
200010b0:	2b00      	cmp	r3, #0
200010b2:	d10a      	bne.n	200010ca <xQueueGenericSend+0x8e>
	__asm volatile
200010b4:	f04f 0350 	mov.w	r3, #80	; 0x50
200010b8:	f383 8811 	msr	BASEPRI, r3
200010bc:	f3bf 8f6f 	isb	sy
200010c0:	f3bf 8f4f 	dsb	sy
200010c4:	623b      	str	r3, [r7, #32]
}
200010c6:	bf00      	nop
200010c8:	e7fe      	b.n	200010c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200010ca:	f001 fc65 	bl	20002998 <xTaskGetSchedulerState>
200010ce:	4603      	mov	r3, r0
200010d0:	2b00      	cmp	r3, #0
200010d2:	d102      	bne.n	200010da <xQueueGenericSend+0x9e>
200010d4:	687b      	ldr	r3, [r7, #4]
200010d6:	2b00      	cmp	r3, #0
200010d8:	d101      	bne.n	200010de <xQueueGenericSend+0xa2>
200010da:	2301      	movs	r3, #1
200010dc:	e000      	b.n	200010e0 <xQueueGenericSend+0xa4>
200010de:	2300      	movs	r3, #0
200010e0:	2b00      	cmp	r3, #0
200010e2:	d10a      	bne.n	200010fa <xQueueGenericSend+0xbe>
	__asm volatile
200010e4:	f04f 0350 	mov.w	r3, #80	; 0x50
200010e8:	f383 8811 	msr	BASEPRI, r3
200010ec:	f3bf 8f6f 	isb	sy
200010f0:	f3bf 8f4f 	dsb	sy
200010f4:	61fb      	str	r3, [r7, #28]
}
200010f6:	bf00      	nop
200010f8:	e7fe      	b.n	200010f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200010fa:	f002 faa3 	bl	20003644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200010fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001106:	429a      	cmp	r2, r3
20001108:	d302      	bcc.n	20001110 <xQueueGenericSend+0xd4>
2000110a:	683b      	ldr	r3, [r7, #0]
2000110c:	2b02      	cmp	r3, #2
2000110e:	d129      	bne.n	20001164 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001110:	683a      	ldr	r2, [r7, #0]
20001112:	68b9      	ldr	r1, [r7, #8]
20001114:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001116:	f000 fc5e 	bl	200019d6 <prvCopyDataToQueue>
2000111a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000111c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001120:	2b00      	cmp	r3, #0
20001122:	d010      	beq.n	20001146 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001126:	3324      	adds	r3, #36	; 0x24
20001128:	4618      	mov	r0, r3
2000112a:	f001 fa73 	bl	20002614 <xTaskRemoveFromEventList>
2000112e:	4603      	mov	r3, r0
20001130:	2b00      	cmp	r3, #0
20001132:	d013      	beq.n	2000115c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001134:	4b3f      	ldr	r3, [pc, #252]	; (20001234 <xQueueGenericSend+0x1f8>)
20001136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000113a:	601a      	str	r2, [r3, #0]
2000113c:	f3bf 8f4f 	dsb	sy
20001140:	f3bf 8f6f 	isb	sy
20001144:	e00a      	b.n	2000115c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001148:	2b00      	cmp	r3, #0
2000114a:	d007      	beq.n	2000115c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
2000114c:	4b39      	ldr	r3, [pc, #228]	; (20001234 <xQueueGenericSend+0x1f8>)
2000114e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001152:	601a      	str	r2, [r3, #0]
20001154:	f3bf 8f4f 	dsb	sy
20001158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
2000115c:	f002 faa2 	bl	200036a4 <vPortExitCritical>
				return pdPASS;
20001160:	2301      	movs	r3, #1
20001162:	e063      	b.n	2000122c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001164:	687b      	ldr	r3, [r7, #4]
20001166:	2b00      	cmp	r3, #0
20001168:	d103      	bne.n	20001172 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
2000116a:	f002 fa9b 	bl	200036a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
2000116e:	2300      	movs	r3, #0
20001170:	e05c      	b.n	2000122c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
20001172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001174:	2b00      	cmp	r3, #0
20001176:	d106      	bne.n	20001186 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001178:	f107 0314 	add.w	r3, r7, #20
2000117c:	4618      	mov	r0, r3
2000117e:	f001 faad 	bl	200026dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001182:	2301      	movs	r3, #1
20001184:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001186:	f002 fa8d 	bl	200036a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
2000118a:	f001 f819 	bl	200021c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000118e:	f002 fa59 	bl	20003644 <vPortEnterCritical>
20001192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001198:	b25b      	sxtb	r3, r3
2000119a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000119e:	d103      	bne.n	200011a8 <xQueueGenericSend+0x16c>
200011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011a2:	2200      	movs	r2, #0
200011a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200011a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200011ae:	b25b      	sxtb	r3, r3
200011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
200011b4:	d103      	bne.n	200011be <xQueueGenericSend+0x182>
200011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011b8:	2200      	movs	r2, #0
200011ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200011be:	f002 fa71 	bl	200036a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200011c2:	1d3a      	adds	r2, r7, #4
200011c4:	f107 0314 	add.w	r3, r7, #20
200011c8:	4611      	mov	r1, r2
200011ca:	4618      	mov	r0, r3
200011cc:	f001 fa9c 	bl	20002708 <xTaskCheckForTimeOut>
200011d0:	4603      	mov	r3, r0
200011d2:	2b00      	cmp	r3, #0
200011d4:	d124      	bne.n	20001220 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200011d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
200011d8:	f000 fcf5 	bl	20001bc6 <prvIsQueueFull>
200011dc:	4603      	mov	r3, r0
200011de:	2b00      	cmp	r3, #0
200011e0:	d018      	beq.n	20001214 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
200011e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200011e4:	3310      	adds	r3, #16
200011e6:	687a      	ldr	r2, [r7, #4]
200011e8:	4611      	mov	r1, r2
200011ea:	4618      	mov	r0, r3
200011ec:	f001 f9c2 	bl	20002574 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
200011f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
200011f2:	f000 fc80 	bl	20001af6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
200011f6:	f000 fff1 	bl	200021dc <xTaskResumeAll>
200011fa:	4603      	mov	r3, r0
200011fc:	2b00      	cmp	r3, #0
200011fe:	f47f af7c 	bne.w	200010fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
20001202:	4b0c      	ldr	r3, [pc, #48]	; (20001234 <xQueueGenericSend+0x1f8>)
20001204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001208:	601a      	str	r2, [r3, #0]
2000120a:	f3bf 8f4f 	dsb	sy
2000120e:	f3bf 8f6f 	isb	sy
20001212:	e772      	b.n	200010fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001214:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001216:	f000 fc6e 	bl	20001af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
2000121a:	f000 ffdf 	bl	200021dc <xTaskResumeAll>
2000121e:	e76c      	b.n	200010fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
20001220:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001222:	f000 fc68 	bl	20001af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001226:	f000 ffd9 	bl	200021dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
2000122a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
2000122c:	4618      	mov	r0, r3
2000122e:	3738      	adds	r7, #56	; 0x38
20001230:	46bd      	mov	sp, r7
20001232:	bd80      	pop	{r7, pc}
20001234:	e000ed04 	.word	0xe000ed04

20001238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001238:	b580      	push	{r7, lr}
2000123a:	b090      	sub	sp, #64	; 0x40
2000123c:	af00      	add	r7, sp, #0
2000123e:	60f8      	str	r0, [r7, #12]
20001240:	60b9      	str	r1, [r7, #8]
20001242:	607a      	str	r2, [r7, #4]
20001244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001246:	68fb      	ldr	r3, [r7, #12]
20001248:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
2000124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000124c:	2b00      	cmp	r3, #0
2000124e:	d10a      	bne.n	20001266 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
20001250:	f04f 0350 	mov.w	r3, #80	; 0x50
20001254:	f383 8811 	msr	BASEPRI, r3
20001258:	f3bf 8f6f 	isb	sy
2000125c:	f3bf 8f4f 	dsb	sy
20001260:	62bb      	str	r3, [r7, #40]	; 0x28
}
20001262:	bf00      	nop
20001264:	e7fe      	b.n	20001264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001266:	68bb      	ldr	r3, [r7, #8]
20001268:	2b00      	cmp	r3, #0
2000126a:	d103      	bne.n	20001274 <xQueueGenericSendFromISR+0x3c>
2000126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001270:	2b00      	cmp	r3, #0
20001272:	d101      	bne.n	20001278 <xQueueGenericSendFromISR+0x40>
20001274:	2301      	movs	r3, #1
20001276:	e000      	b.n	2000127a <xQueueGenericSendFromISR+0x42>
20001278:	2300      	movs	r3, #0
2000127a:	2b00      	cmp	r3, #0
2000127c:	d10a      	bne.n	20001294 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
2000127e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001282:	f383 8811 	msr	BASEPRI, r3
20001286:	f3bf 8f6f 	isb	sy
2000128a:	f3bf 8f4f 	dsb	sy
2000128e:	627b      	str	r3, [r7, #36]	; 0x24
}
20001290:	bf00      	nop
20001292:	e7fe      	b.n	20001292 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001294:	683b      	ldr	r3, [r7, #0]
20001296:	2b02      	cmp	r3, #2
20001298:	d103      	bne.n	200012a2 <xQueueGenericSendFromISR+0x6a>
2000129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000129c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000129e:	2b01      	cmp	r3, #1
200012a0:	d101      	bne.n	200012a6 <xQueueGenericSendFromISR+0x6e>
200012a2:	2301      	movs	r3, #1
200012a4:	e000      	b.n	200012a8 <xQueueGenericSendFromISR+0x70>
200012a6:	2300      	movs	r3, #0
200012a8:	2b00      	cmp	r3, #0
200012aa:	d10a      	bne.n	200012c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
200012ac:	f04f 0350 	mov.w	r3, #80	; 0x50
200012b0:	f383 8811 	msr	BASEPRI, r3
200012b4:	f3bf 8f6f 	isb	sy
200012b8:	f3bf 8f4f 	dsb	sy
200012bc:	623b      	str	r3, [r7, #32]
}
200012be:	bf00      	nop
200012c0:	e7fe      	b.n	200012c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200012c2:	f002 faa1 	bl	20003808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200012c6:	f3ef 8211 	mrs	r2, BASEPRI
200012ca:	f04f 0350 	mov.w	r3, #80	; 0x50
200012ce:	f383 8811 	msr	BASEPRI, r3
200012d2:	f3bf 8f6f 	isb	sy
200012d6:	f3bf 8f4f 	dsb	sy
200012da:	61fa      	str	r2, [r7, #28]
200012dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200012de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200012e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200012e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200012e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200012e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200012ea:	429a      	cmp	r2, r3
200012ec:	d302      	bcc.n	200012f4 <xQueueGenericSendFromISR+0xbc>
200012ee:	683b      	ldr	r3, [r7, #0]
200012f0:	2b02      	cmp	r3, #2
200012f2:	d12f      	bne.n	20001354 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
200012f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200012f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200012fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
200012fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001302:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001304:	683a      	ldr	r2, [r7, #0]
20001306:	68b9      	ldr	r1, [r7, #8]
20001308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
2000130a:	f000 fb64 	bl	200019d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
2000130e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
20001312:	f1b3 3fff 	cmp.w	r3, #4294967295
20001316:	d112      	bne.n	2000133e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000131c:	2b00      	cmp	r3, #0
2000131e:	d016      	beq.n	2000134e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001322:	3324      	adds	r3, #36	; 0x24
20001324:	4618      	mov	r0, r3
20001326:	f001 f975 	bl	20002614 <xTaskRemoveFromEventList>
2000132a:	4603      	mov	r3, r0
2000132c:	2b00      	cmp	r3, #0
2000132e:	d00e      	beq.n	2000134e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001330:	687b      	ldr	r3, [r7, #4]
20001332:	2b00      	cmp	r3, #0
20001334:	d00b      	beq.n	2000134e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001336:	687b      	ldr	r3, [r7, #4]
20001338:	2201      	movs	r2, #1
2000133a:	601a      	str	r2, [r3, #0]
2000133c:	e007      	b.n	2000134e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
2000133e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
20001342:	3301      	adds	r3, #1
20001344:	b2db      	uxtb	r3, r3
20001346:	b25a      	sxtb	r2, r3
20001348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000134a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
2000134e:	2301      	movs	r3, #1
20001350:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
20001352:	e001      	b.n	20001358 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001354:	2300      	movs	r3, #0
20001356:	63fb      	str	r3, [r7, #60]	; 0x3c
20001358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000135a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
2000135c:	697b      	ldr	r3, [r7, #20]
2000135e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
20001362:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
20001366:	4618      	mov	r0, r3
20001368:	3740      	adds	r7, #64	; 0x40
2000136a:	46bd      	mov	sp, r7
2000136c:	bd80      	pop	{r7, pc}

2000136e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
2000136e:	b580      	push	{r7, lr}
20001370:	b08e      	sub	sp, #56	; 0x38
20001372:	af00      	add	r7, sp, #0
20001374:	6078      	str	r0, [r7, #4]
20001376:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001378:	687b      	ldr	r3, [r7, #4]
2000137a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
2000137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000137e:	2b00      	cmp	r3, #0
20001380:	d10a      	bne.n	20001398 <xQueueGiveFromISR+0x2a>
	__asm volatile
20001382:	f04f 0350 	mov.w	r3, #80	; 0x50
20001386:	f383 8811 	msr	BASEPRI, r3
2000138a:	f3bf 8f6f 	isb	sy
2000138e:	f3bf 8f4f 	dsb	sy
20001392:	623b      	str	r3, [r7, #32]
}
20001394:	bf00      	nop
20001396:	e7fe      	b.n	20001396 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
20001398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000139c:	2b00      	cmp	r3, #0
2000139e:	d00a      	beq.n	200013b6 <xQueueGiveFromISR+0x48>
	__asm volatile
200013a0:	f04f 0350 	mov.w	r3, #80	; 0x50
200013a4:	f383 8811 	msr	BASEPRI, r3
200013a8:	f3bf 8f6f 	isb	sy
200013ac:	f3bf 8f4f 	dsb	sy
200013b0:	61fb      	str	r3, [r7, #28]
}
200013b2:	bf00      	nop
200013b4:	e7fe      	b.n	200013b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
200013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200013b8:	681b      	ldr	r3, [r3, #0]
200013ba:	2b00      	cmp	r3, #0
200013bc:	d103      	bne.n	200013c6 <xQueueGiveFromISR+0x58>
200013be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200013c0:	689b      	ldr	r3, [r3, #8]
200013c2:	2b00      	cmp	r3, #0
200013c4:	d101      	bne.n	200013ca <xQueueGiveFromISR+0x5c>
200013c6:	2301      	movs	r3, #1
200013c8:	e000      	b.n	200013cc <xQueueGiveFromISR+0x5e>
200013ca:	2300      	movs	r3, #0
200013cc:	2b00      	cmp	r3, #0
200013ce:	d10a      	bne.n	200013e6 <xQueueGiveFromISR+0x78>
	__asm volatile
200013d0:	f04f 0350 	mov.w	r3, #80	; 0x50
200013d4:	f383 8811 	msr	BASEPRI, r3
200013d8:	f3bf 8f6f 	isb	sy
200013dc:	f3bf 8f4f 	dsb	sy
200013e0:	61bb      	str	r3, [r7, #24]
}
200013e2:	bf00      	nop
200013e4:	e7fe      	b.n	200013e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200013e6:	f002 fa0f 	bl	20003808 <vPortValidateInterruptPriority>
	__asm volatile
200013ea:	f3ef 8211 	mrs	r2, BASEPRI
200013ee:	f04f 0350 	mov.w	r3, #80	; 0x50
200013f2:	f383 8811 	msr	BASEPRI, r3
200013f6:	f3bf 8f6f 	isb	sy
200013fa:	f3bf 8f4f 	dsb	sy
200013fe:	617a      	str	r2, [r7, #20]
20001400:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
20001402:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001404:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000140a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
2000140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000140e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001410:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001412:	429a      	cmp	r2, r3
20001414:	d22b      	bcs.n	2000146e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
2000141c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001422:	1c5a      	adds	r2, r3, #1
20001424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001426:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001428:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
2000142c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001430:	d112      	bne.n	20001458 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001436:	2b00      	cmp	r3, #0
20001438:	d016      	beq.n	20001468 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2000143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000143c:	3324      	adds	r3, #36	; 0x24
2000143e:	4618      	mov	r0, r3
20001440:	f001 f8e8 	bl	20002614 <xTaskRemoveFromEventList>
20001444:	4603      	mov	r3, r0
20001446:	2b00      	cmp	r3, #0
20001448:	d00e      	beq.n	20001468 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
2000144a:	683b      	ldr	r3, [r7, #0]
2000144c:	2b00      	cmp	r3, #0
2000144e:	d00b      	beq.n	20001468 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001450:	683b      	ldr	r3, [r7, #0]
20001452:	2201      	movs	r2, #1
20001454:	601a      	str	r2, [r3, #0]
20001456:	e007      	b.n	20001468 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
2000145c:	3301      	adds	r3, #1
2000145e:	b2db      	uxtb	r3, r3
20001460:	b25a      	sxtb	r2, r3
20001462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
20001468:	2301      	movs	r3, #1
2000146a:	637b      	str	r3, [r7, #52]	; 0x34
2000146c:	e001      	b.n	20001472 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
2000146e:	2300      	movs	r3, #0
20001470:	637b      	str	r3, [r7, #52]	; 0x34
20001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001474:	60fb      	str	r3, [r7, #12]
	__asm volatile
20001476:	68fb      	ldr	r3, [r7, #12]
20001478:	f383 8811 	msr	BASEPRI, r3
}
2000147c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
2000147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
20001480:	4618      	mov	r0, r3
20001482:	3738      	adds	r7, #56	; 0x38
20001484:	46bd      	mov	sp, r7
20001486:	bd80      	pop	{r7, pc}

20001488 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
20001488:	b580      	push	{r7, lr}
2000148a:	b08c      	sub	sp, #48	; 0x30
2000148c:	af00      	add	r7, sp, #0
2000148e:	60f8      	str	r0, [r7, #12]
20001490:	60b9      	str	r1, [r7, #8]
20001492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
20001494:	2300      	movs	r3, #0
20001496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001498:	68fb      	ldr	r3, [r7, #12]
2000149a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
2000149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000149e:	2b00      	cmp	r3, #0
200014a0:	d10a      	bne.n	200014b8 <xQueueReceive+0x30>
	__asm volatile
200014a2:	f04f 0350 	mov.w	r3, #80	; 0x50
200014a6:	f383 8811 	msr	BASEPRI, r3
200014aa:	f3bf 8f6f 	isb	sy
200014ae:	f3bf 8f4f 	dsb	sy
200014b2:	623b      	str	r3, [r7, #32]
}
200014b4:	bf00      	nop
200014b6:	e7fe      	b.n	200014b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
200014b8:	68bb      	ldr	r3, [r7, #8]
200014ba:	2b00      	cmp	r3, #0
200014bc:	d103      	bne.n	200014c6 <xQueueReceive+0x3e>
200014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
200014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200014c2:	2b00      	cmp	r3, #0
200014c4:	d101      	bne.n	200014ca <xQueueReceive+0x42>
200014c6:	2301      	movs	r3, #1
200014c8:	e000      	b.n	200014cc <xQueueReceive+0x44>
200014ca:	2300      	movs	r3, #0
200014cc:	2b00      	cmp	r3, #0
200014ce:	d10a      	bne.n	200014e6 <xQueueReceive+0x5e>
	__asm volatile
200014d0:	f04f 0350 	mov.w	r3, #80	; 0x50
200014d4:	f383 8811 	msr	BASEPRI, r3
200014d8:	f3bf 8f6f 	isb	sy
200014dc:	f3bf 8f4f 	dsb	sy
200014e0:	61fb      	str	r3, [r7, #28]
}
200014e2:	bf00      	nop
200014e4:	e7fe      	b.n	200014e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200014e6:	f001 fa57 	bl	20002998 <xTaskGetSchedulerState>
200014ea:	4603      	mov	r3, r0
200014ec:	2b00      	cmp	r3, #0
200014ee:	d102      	bne.n	200014f6 <xQueueReceive+0x6e>
200014f0:	687b      	ldr	r3, [r7, #4]
200014f2:	2b00      	cmp	r3, #0
200014f4:	d101      	bne.n	200014fa <xQueueReceive+0x72>
200014f6:	2301      	movs	r3, #1
200014f8:	e000      	b.n	200014fc <xQueueReceive+0x74>
200014fa:	2300      	movs	r3, #0
200014fc:	2b00      	cmp	r3, #0
200014fe:	d10a      	bne.n	20001516 <xQueueReceive+0x8e>
	__asm volatile
20001500:	f04f 0350 	mov.w	r3, #80	; 0x50
20001504:	f383 8811 	msr	BASEPRI, r3
20001508:	f3bf 8f6f 	isb	sy
2000150c:	f3bf 8f4f 	dsb	sy
20001510:	61bb      	str	r3, [r7, #24]
}
20001512:	bf00      	nop
20001514:	e7fe      	b.n	20001514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001516:	f002 f895 	bl	20003644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2000151a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000151c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000151e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001522:	2b00      	cmp	r3, #0
20001524:	d01f      	beq.n	20001566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001526:	68b9      	ldr	r1, [r7, #8]
20001528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000152a:	f000 fabe 	bl	20001aaa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
2000152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001530:	1e5a      	subs	r2, r3, #1
20001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001536:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001538:	691b      	ldr	r3, [r3, #16]
2000153a:	2b00      	cmp	r3, #0
2000153c:	d00f      	beq.n	2000155e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001540:	3310      	adds	r3, #16
20001542:	4618      	mov	r0, r3
20001544:	f001 f866 	bl	20002614 <xTaskRemoveFromEventList>
20001548:	4603      	mov	r3, r0
2000154a:	2b00      	cmp	r3, #0
2000154c:	d007      	beq.n	2000155e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
2000154e:	4b3d      	ldr	r3, [pc, #244]	; (20001644 <xQueueReceive+0x1bc>)
20001550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001554:	601a      	str	r2, [r3, #0]
20001556:	f3bf 8f4f 	dsb	sy
2000155a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
2000155e:	f002 f8a1 	bl	200036a4 <vPortExitCritical>
				return pdPASS;
20001562:	2301      	movs	r3, #1
20001564:	e069      	b.n	2000163a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001566:	687b      	ldr	r3, [r7, #4]
20001568:	2b00      	cmp	r3, #0
2000156a:	d103      	bne.n	20001574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
2000156c:	f002 f89a 	bl	200036a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001570:	2300      	movs	r3, #0
20001572:	e062      	b.n	2000163a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
20001574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001576:	2b00      	cmp	r3, #0
20001578:	d106      	bne.n	20001588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
2000157a:	f107 0310 	add.w	r3, r7, #16
2000157e:	4618      	mov	r0, r3
20001580:	f001 f8ac 	bl	200026dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001584:	2301      	movs	r3, #1
20001586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001588:	f002 f88c 	bl	200036a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
2000158c:	f000 fe18 	bl	200021c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001590:	f002 f858 	bl	20003644 <vPortEnterCritical>
20001594:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
2000159a:	b25b      	sxtb	r3, r3
2000159c:	f1b3 3fff 	cmp.w	r3, #4294967295
200015a0:	d103      	bne.n	200015aa <xQueueReceive+0x122>
200015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200015a4:	2200      	movs	r2, #0
200015a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
200015ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200015b0:	b25b      	sxtb	r3, r3
200015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
200015b6:	d103      	bne.n	200015c0 <xQueueReceive+0x138>
200015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200015ba:	2200      	movs	r2, #0
200015bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200015c0:	f002 f870 	bl	200036a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200015c4:	1d3a      	adds	r2, r7, #4
200015c6:	f107 0310 	add.w	r3, r7, #16
200015ca:	4611      	mov	r1, r2
200015cc:	4618      	mov	r0, r3
200015ce:	f001 f89b 	bl	20002708 <xTaskCheckForTimeOut>
200015d2:	4603      	mov	r3, r0
200015d4:	2b00      	cmp	r3, #0
200015d6:	d123      	bne.n	20001620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200015d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200015da:	f000 fade 	bl	20001b9a <prvIsQueueEmpty>
200015de:	4603      	mov	r3, r0
200015e0:	2b00      	cmp	r3, #0
200015e2:	d017      	beq.n	20001614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
200015e6:	3324      	adds	r3, #36	; 0x24
200015e8:	687a      	ldr	r2, [r7, #4]
200015ea:	4611      	mov	r1, r2
200015ec:	4618      	mov	r0, r3
200015ee:	f000 ffc1 	bl	20002574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
200015f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200015f4:	f000 fa7f 	bl	20001af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
200015f8:	f000 fdf0 	bl	200021dc <xTaskResumeAll>
200015fc:	4603      	mov	r3, r0
200015fe:	2b00      	cmp	r3, #0
20001600:	d189      	bne.n	20001516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
20001602:	4b10      	ldr	r3, [pc, #64]	; (20001644 <xQueueReceive+0x1bc>)
20001604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001608:	601a      	str	r2, [r3, #0]
2000160a:	f3bf 8f4f 	dsb	sy
2000160e:	f3bf 8f6f 	isb	sy
20001612:	e780      	b.n	20001516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
20001614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001616:	f000 fa6e 	bl	20001af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
2000161a:	f000 fddf 	bl	200021dc <xTaskResumeAll>
2000161e:	e77a      	b.n	20001516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
20001620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001622:	f000 fa68 	bl	20001af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001626:	f000 fdd9 	bl	200021dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
2000162a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000162c:	f000 fab5 	bl	20001b9a <prvIsQueueEmpty>
20001630:	4603      	mov	r3, r0
20001632:	2b00      	cmp	r3, #0
20001634:	f43f af6f 	beq.w	20001516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
2000163a:	4618      	mov	r0, r3
2000163c:	3730      	adds	r7, #48	; 0x30
2000163e:	46bd      	mov	sp, r7
20001640:	bd80      	pop	{r7, pc}
20001642:	bf00      	nop
20001644:	e000ed04 	.word	0xe000ed04

20001648 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
20001648:	b580      	push	{r7, lr}
2000164a:	b08e      	sub	sp, #56	; 0x38
2000164c:	af00      	add	r7, sp, #0
2000164e:	6078      	str	r0, [r7, #4]
20001650:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001652:	2300      	movs	r3, #0
20001654:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001656:	687b      	ldr	r3, [r7, #4]
20001658:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
2000165a:	2300      	movs	r3, #0
2000165c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
2000165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001660:	2b00      	cmp	r3, #0
20001662:	d10a      	bne.n	2000167a <xQueueSemaphoreTake+0x32>
	__asm volatile
20001664:	f04f 0350 	mov.w	r3, #80	; 0x50
20001668:	f383 8811 	msr	BASEPRI, r3
2000166c:	f3bf 8f6f 	isb	sy
20001670:	f3bf 8f4f 	dsb	sy
20001674:	623b      	str	r3, [r7, #32]
}
20001676:	bf00      	nop
20001678:	e7fe      	b.n	20001678 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
2000167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000167e:	2b00      	cmp	r3, #0
20001680:	d00a      	beq.n	20001698 <xQueueSemaphoreTake+0x50>
	__asm volatile
20001682:	f04f 0350 	mov.w	r3, #80	; 0x50
20001686:	f383 8811 	msr	BASEPRI, r3
2000168a:	f3bf 8f6f 	isb	sy
2000168e:	f3bf 8f4f 	dsb	sy
20001692:	61fb      	str	r3, [r7, #28]
}
20001694:	bf00      	nop
20001696:	e7fe      	b.n	20001696 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001698:	f001 f97e 	bl	20002998 <xTaskGetSchedulerState>
2000169c:	4603      	mov	r3, r0
2000169e:	2b00      	cmp	r3, #0
200016a0:	d102      	bne.n	200016a8 <xQueueSemaphoreTake+0x60>
200016a2:	683b      	ldr	r3, [r7, #0]
200016a4:	2b00      	cmp	r3, #0
200016a6:	d101      	bne.n	200016ac <xQueueSemaphoreTake+0x64>
200016a8:	2301      	movs	r3, #1
200016aa:	e000      	b.n	200016ae <xQueueSemaphoreTake+0x66>
200016ac:	2300      	movs	r3, #0
200016ae:	2b00      	cmp	r3, #0
200016b0:	d10a      	bne.n	200016c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
200016b2:	f04f 0350 	mov.w	r3, #80	; 0x50
200016b6:	f383 8811 	msr	BASEPRI, r3
200016ba:	f3bf 8f6f 	isb	sy
200016be:	f3bf 8f4f 	dsb	sy
200016c2:	61bb      	str	r3, [r7, #24]
}
200016c4:	bf00      	nop
200016c6:	e7fe      	b.n	200016c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200016c8:	f001 ffbc 	bl	20003644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
200016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200016ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200016d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
200016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200016d4:	2b00      	cmp	r3, #0
200016d6:	d024      	beq.n	20001722 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
200016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200016da:	1e5a      	subs	r2, r3, #1
200016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200016de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
200016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200016e2:	681b      	ldr	r3, [r3, #0]
200016e4:	2b00      	cmp	r3, #0
200016e6:	d104      	bne.n	200016f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
200016e8:	f001 facc 	bl	20002c84 <pvTaskIncrementMutexHeldCount>
200016ec:	4602      	mov	r2, r0
200016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200016f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
200016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200016f4:	691b      	ldr	r3, [r3, #16]
200016f6:	2b00      	cmp	r3, #0
200016f8:	d00f      	beq.n	2000171a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
200016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200016fc:	3310      	adds	r3, #16
200016fe:	4618      	mov	r0, r3
20001700:	f000 ff88 	bl	20002614 <xTaskRemoveFromEventList>
20001704:	4603      	mov	r3, r0
20001706:	2b00      	cmp	r3, #0
20001708:	d007      	beq.n	2000171a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
2000170a:	4b54      	ldr	r3, [pc, #336]	; (2000185c <xQueueSemaphoreTake+0x214>)
2000170c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001710:	601a      	str	r2, [r3, #0]
20001712:	f3bf 8f4f 	dsb	sy
20001716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
2000171a:	f001 ffc3 	bl	200036a4 <vPortExitCritical>
				return pdPASS;
2000171e:	2301      	movs	r3, #1
20001720:	e097      	b.n	20001852 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001722:	683b      	ldr	r3, [r7, #0]
20001724:	2b00      	cmp	r3, #0
20001726:	d111      	bne.n	2000174c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
20001728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000172a:	2b00      	cmp	r3, #0
2000172c:	d00a      	beq.n	20001744 <xQueueSemaphoreTake+0xfc>
	__asm volatile
2000172e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001732:	f383 8811 	msr	BASEPRI, r3
20001736:	f3bf 8f6f 	isb	sy
2000173a:	f3bf 8f4f 	dsb	sy
2000173e:	617b      	str	r3, [r7, #20]
}
20001740:	bf00      	nop
20001742:	e7fe      	b.n	20001742 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
20001744:	f001 ffae 	bl	200036a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001748:	2300      	movs	r3, #0
2000174a:	e082      	b.n	20001852 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
2000174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000174e:	2b00      	cmp	r3, #0
20001750:	d106      	bne.n	20001760 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001752:	f107 030c 	add.w	r3, r7, #12
20001756:	4618      	mov	r0, r3
20001758:	f000 ffc0 	bl	200026dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000175c:	2301      	movs	r3, #1
2000175e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001760:	f001 ffa0 	bl	200036a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
20001764:	f000 fd2c 	bl	200021c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001768:	f001 ff6c 	bl	20003644 <vPortEnterCritical>
2000176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000176e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001772:	b25b      	sxtb	r3, r3
20001774:	f1b3 3fff 	cmp.w	r3, #4294967295
20001778:	d103      	bne.n	20001782 <xQueueSemaphoreTake+0x13a>
2000177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000177c:	2200      	movs	r2, #0
2000177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001788:	b25b      	sxtb	r3, r3
2000178a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000178e:	d103      	bne.n	20001798 <xQueueSemaphoreTake+0x150>
20001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001792:	2200      	movs	r2, #0
20001794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001798:	f001 ff84 	bl	200036a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
2000179c:	463a      	mov	r2, r7
2000179e:	f107 030c 	add.w	r3, r7, #12
200017a2:	4611      	mov	r1, r2
200017a4:	4618      	mov	r0, r3
200017a6:	f000 ffaf 	bl	20002708 <xTaskCheckForTimeOut>
200017aa:	4603      	mov	r3, r0
200017ac:	2b00      	cmp	r3, #0
200017ae:	d132      	bne.n	20001816 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200017b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200017b2:	f000 f9f2 	bl	20001b9a <prvIsQueueEmpty>
200017b6:	4603      	mov	r3, r0
200017b8:	2b00      	cmp	r3, #0
200017ba:	d026      	beq.n	2000180a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
200017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200017be:	681b      	ldr	r3, [r3, #0]
200017c0:	2b00      	cmp	r3, #0
200017c2:	d109      	bne.n	200017d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
200017c4:	f001 ff3e 	bl	20003644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
200017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200017ca:	689b      	ldr	r3, [r3, #8]
200017cc:	4618      	mov	r0, r3
200017ce:	f001 f901 	bl	200029d4 <xTaskPriorityInherit>
200017d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
200017d4:	f001 ff66 	bl	200036a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200017da:	3324      	adds	r3, #36	; 0x24
200017dc:	683a      	ldr	r2, [r7, #0]
200017de:	4611      	mov	r1, r2
200017e0:	4618      	mov	r0, r3
200017e2:	f000 fec7 	bl	20002574 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
200017e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
200017e8:	f000 f985 	bl	20001af6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
200017ec:	f000 fcf6 	bl	200021dc <xTaskResumeAll>
200017f0:	4603      	mov	r3, r0
200017f2:	2b00      	cmp	r3, #0
200017f4:	f47f af68 	bne.w	200016c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
200017f8:	4b18      	ldr	r3, [pc, #96]	; (2000185c <xQueueSemaphoreTake+0x214>)
200017fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017fe:	601a      	str	r2, [r3, #0]
20001800:	f3bf 8f4f 	dsb	sy
20001804:	f3bf 8f6f 	isb	sy
20001808:	e75e      	b.n	200016c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
2000180a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000180c:	f000 f973 	bl	20001af6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001810:	f000 fce4 	bl	200021dc <xTaskResumeAll>
20001814:	e758      	b.n	200016c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
20001816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001818:	f000 f96d 	bl	20001af6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
2000181c:	f000 fcde 	bl	200021dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001822:	f000 f9ba 	bl	20001b9a <prvIsQueueEmpty>
20001826:	4603      	mov	r3, r0
20001828:	2b00      	cmp	r3, #0
2000182a:	f43f af4d 	beq.w	200016c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
2000182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001830:	2b00      	cmp	r3, #0
20001832:	d00d      	beq.n	20001850 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
20001834:	f001 ff06 	bl	20003644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
20001838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000183a:	f000 f8b4 	bl	200019a6 <prvGetDisinheritPriorityAfterTimeout>
2000183e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
20001840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001842:	689b      	ldr	r3, [r3, #8]
20001844:	6a79      	ldr	r1, [r7, #36]	; 0x24
20001846:	4618      	mov	r0, r3
20001848:	f001 f99a 	bl	20002b80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
2000184c:	f001 ff2a 	bl	200036a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
20001852:	4618      	mov	r0, r3
20001854:	3738      	adds	r7, #56	; 0x38
20001856:	46bd      	mov	sp, r7
20001858:	bd80      	pop	{r7, pc}
2000185a:	bf00      	nop
2000185c:	e000ed04 	.word	0xe000ed04

20001860 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
20001860:	b580      	push	{r7, lr}
20001862:	b08e      	sub	sp, #56	; 0x38
20001864:	af00      	add	r7, sp, #0
20001866:	60f8      	str	r0, [r7, #12]
20001868:	60b9      	str	r1, [r7, #8]
2000186a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
2000186c:	68fb      	ldr	r3, [r7, #12]
2000186e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
20001870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001872:	2b00      	cmp	r3, #0
20001874:	d10a      	bne.n	2000188c <xQueueReceiveFromISR+0x2c>
	__asm volatile
20001876:	f04f 0350 	mov.w	r3, #80	; 0x50
2000187a:	f383 8811 	msr	BASEPRI, r3
2000187e:	f3bf 8f6f 	isb	sy
20001882:	f3bf 8f4f 	dsb	sy
20001886:	623b      	str	r3, [r7, #32]
}
20001888:	bf00      	nop
2000188a:	e7fe      	b.n	2000188a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000188c:	68bb      	ldr	r3, [r7, #8]
2000188e:	2b00      	cmp	r3, #0
20001890:	d103      	bne.n	2000189a <xQueueReceiveFromISR+0x3a>
20001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001896:	2b00      	cmp	r3, #0
20001898:	d101      	bne.n	2000189e <xQueueReceiveFromISR+0x3e>
2000189a:	2301      	movs	r3, #1
2000189c:	e000      	b.n	200018a0 <xQueueReceiveFromISR+0x40>
2000189e:	2300      	movs	r3, #0
200018a0:	2b00      	cmp	r3, #0
200018a2:	d10a      	bne.n	200018ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
200018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
200018a8:	f383 8811 	msr	BASEPRI, r3
200018ac:	f3bf 8f6f 	isb	sy
200018b0:	f3bf 8f4f 	dsb	sy
200018b4:	61fb      	str	r3, [r7, #28]
}
200018b6:	bf00      	nop
200018b8:	e7fe      	b.n	200018b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200018ba:	f001 ffa5 	bl	20003808 <vPortValidateInterruptPriority>
	__asm volatile
200018be:	f3ef 8211 	mrs	r2, BASEPRI
200018c2:	f04f 0350 	mov.w	r3, #80	; 0x50
200018c6:	f383 8811 	msr	BASEPRI, r3
200018ca:	f3bf 8f6f 	isb	sy
200018ce:	f3bf 8f4f 	dsb	sy
200018d2:	61ba      	str	r2, [r7, #24]
200018d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
200018d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
200018da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200018dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200018de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200018e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200018e2:	2b00      	cmp	r3, #0
200018e4:	d02f      	beq.n	20001946 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
200018e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200018e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200018ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
200018f0:	68b9      	ldr	r1, [r7, #8]
200018f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
200018f4:	f000 f8d9 	bl	20001aaa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
200018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200018fa:	1e5a      	subs	r2, r3, #1
200018fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200018fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
20001900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
20001904:	f1b3 3fff 	cmp.w	r3, #4294967295
20001908:	d112      	bne.n	20001930 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2000190a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000190c:	691b      	ldr	r3, [r3, #16]
2000190e:	2b00      	cmp	r3, #0
20001910:	d016      	beq.n	20001940 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001914:	3310      	adds	r3, #16
20001916:	4618      	mov	r0, r3
20001918:	f000 fe7c 	bl	20002614 <xTaskRemoveFromEventList>
2000191c:	4603      	mov	r3, r0
2000191e:	2b00      	cmp	r3, #0
20001920:	d00e      	beq.n	20001940 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
20001922:	687b      	ldr	r3, [r7, #4]
20001924:	2b00      	cmp	r3, #0
20001926:	d00b      	beq.n	20001940 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
20001928:	687b      	ldr	r3, [r7, #4]
2000192a:	2201      	movs	r2, #1
2000192c:	601a      	str	r2, [r3, #0]
2000192e:	e007      	b.n	20001940 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
20001930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001934:	3301      	adds	r3, #1
20001936:	b2db      	uxtb	r3, r3
20001938:	b25a      	sxtb	r2, r3
2000193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
20001940:	2301      	movs	r3, #1
20001942:	637b      	str	r3, [r7, #52]	; 0x34
20001944:	e001      	b.n	2000194a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
20001946:	2300      	movs	r3, #0
20001948:	637b      	str	r3, [r7, #52]	; 0x34
2000194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000194c:	613b      	str	r3, [r7, #16]
	__asm volatile
2000194e:	693b      	ldr	r3, [r7, #16]
20001950:	f383 8811 	msr	BASEPRI, r3
}
20001954:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
20001958:	4618      	mov	r0, r3
2000195a:	3738      	adds	r7, #56	; 0x38
2000195c:	46bd      	mov	sp, r7
2000195e:	bd80      	pop	{r7, pc}

20001960 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
20001960:	b580      	push	{r7, lr}
20001962:	b084      	sub	sp, #16
20001964:	af00      	add	r7, sp, #0
20001966:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
20001968:	687b      	ldr	r3, [r7, #4]
2000196a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
2000196c:	68fb      	ldr	r3, [r7, #12]
2000196e:	2b00      	cmp	r3, #0
20001970:	d10a      	bne.n	20001988 <vQueueDelete+0x28>
	__asm volatile
20001972:	f04f 0350 	mov.w	r3, #80	; 0x50
20001976:	f383 8811 	msr	BASEPRI, r3
2000197a:	f3bf 8f6f 	isb	sy
2000197e:	f3bf 8f4f 	dsb	sy
20001982:	60bb      	str	r3, [r7, #8]
}
20001984:	bf00      	nop
20001986:	e7fe      	b.n	20001986 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
20001988:	68f8      	ldr	r0, [r7, #12]
2000198a:	f000 f95f 	bl	20001c4c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2000198e:	68fb      	ldr	r3, [r7, #12]
20001990:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
20001994:	2b00      	cmp	r3, #0
20001996:	d102      	bne.n	2000199e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
20001998:	68f8      	ldr	r0, [r7, #12]
2000199a:	f002 f841 	bl	20003a20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
2000199e:	bf00      	nop
200019a0:	3710      	adds	r7, #16
200019a2:	46bd      	mov	sp, r7
200019a4:	bd80      	pop	{r7, pc}

200019a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
200019a6:	b480      	push	{r7}
200019a8:	b085      	sub	sp, #20
200019aa:	af00      	add	r7, sp, #0
200019ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
200019ae:	687b      	ldr	r3, [r7, #4]
200019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200019b2:	2b00      	cmp	r3, #0
200019b4:	d006      	beq.n	200019c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
200019b6:	687b      	ldr	r3, [r7, #4]
200019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200019ba:	681b      	ldr	r3, [r3, #0]
200019bc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
200019c0:	60fb      	str	r3, [r7, #12]
200019c2:	e001      	b.n	200019c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
200019c4:	2300      	movs	r3, #0
200019c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
200019c8:	68fb      	ldr	r3, [r7, #12]
	}
200019ca:	4618      	mov	r0, r3
200019cc:	3714      	adds	r7, #20
200019ce:	46bd      	mov	sp, r7
200019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200019d4:	4770      	bx	lr

200019d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
200019d6:	b580      	push	{r7, lr}
200019d8:	b086      	sub	sp, #24
200019da:	af00      	add	r7, sp, #0
200019dc:	60f8      	str	r0, [r7, #12]
200019de:	60b9      	str	r1, [r7, #8]
200019e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
200019e2:	2300      	movs	r3, #0
200019e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
200019e6:	68fb      	ldr	r3, [r7, #12]
200019e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200019ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
200019ec:	68fb      	ldr	r3, [r7, #12]
200019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200019f0:	2b00      	cmp	r3, #0
200019f2:	d10d      	bne.n	20001a10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
200019f4:	68fb      	ldr	r3, [r7, #12]
200019f6:	681b      	ldr	r3, [r3, #0]
200019f8:	2b00      	cmp	r3, #0
200019fa:	d14d      	bne.n	20001a98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
200019fc:	68fb      	ldr	r3, [r7, #12]
200019fe:	689b      	ldr	r3, [r3, #8]
20001a00:	4618      	mov	r0, r3
20001a02:	f001 f84f 	bl	20002aa4 <xTaskPriorityDisinherit>
20001a06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
20001a08:	68fb      	ldr	r3, [r7, #12]
20001a0a:	2200      	movs	r2, #0
20001a0c:	609a      	str	r2, [r3, #8]
20001a0e:	e043      	b.n	20001a98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001a10:	687b      	ldr	r3, [r7, #4]
20001a12:	2b00      	cmp	r3, #0
20001a14:	d119      	bne.n	20001a4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
20001a16:	68fb      	ldr	r3, [r7, #12]
20001a18:	6858      	ldr	r0, [r3, #4]
20001a1a:	68fb      	ldr	r3, [r7, #12]
20001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a1e:	461a      	mov	r2, r3
20001a20:	68b9      	ldr	r1, [r7, #8]
20001a22:	f004 f9e9 	bl	20005df8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20001a26:	68fb      	ldr	r3, [r7, #12]
20001a28:	685a      	ldr	r2, [r3, #4]
20001a2a:	68fb      	ldr	r3, [r7, #12]
20001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a2e:	441a      	add	r2, r3
20001a30:	68fb      	ldr	r3, [r7, #12]
20001a32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001a34:	68fb      	ldr	r3, [r7, #12]
20001a36:	685a      	ldr	r2, [r3, #4]
20001a38:	68fb      	ldr	r3, [r7, #12]
20001a3a:	689b      	ldr	r3, [r3, #8]
20001a3c:	429a      	cmp	r2, r3
20001a3e:	d32b      	bcc.n	20001a98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001a40:	68fb      	ldr	r3, [r7, #12]
20001a42:	681a      	ldr	r2, [r3, #0]
20001a44:	68fb      	ldr	r3, [r7, #12]
20001a46:	605a      	str	r2, [r3, #4]
20001a48:	e026      	b.n	20001a98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
20001a4a:	68fb      	ldr	r3, [r7, #12]
20001a4c:	68d8      	ldr	r0, [r3, #12]
20001a4e:	68fb      	ldr	r3, [r7, #12]
20001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a52:	461a      	mov	r2, r3
20001a54:	68b9      	ldr	r1, [r7, #8]
20001a56:	f004 f9cf 	bl	20005df8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
20001a5a:	68fb      	ldr	r3, [r7, #12]
20001a5c:	68da      	ldr	r2, [r3, #12]
20001a5e:	68fb      	ldr	r3, [r7, #12]
20001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a62:	425b      	negs	r3, r3
20001a64:	441a      	add	r2, r3
20001a66:	68fb      	ldr	r3, [r7, #12]
20001a68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001a6a:	68fb      	ldr	r3, [r7, #12]
20001a6c:	68da      	ldr	r2, [r3, #12]
20001a6e:	68fb      	ldr	r3, [r7, #12]
20001a70:	681b      	ldr	r3, [r3, #0]
20001a72:	429a      	cmp	r2, r3
20001a74:	d207      	bcs.n	20001a86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
20001a76:	68fb      	ldr	r3, [r7, #12]
20001a78:	689a      	ldr	r2, [r3, #8]
20001a7a:	68fb      	ldr	r3, [r7, #12]
20001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a7e:	425b      	negs	r3, r3
20001a80:	441a      	add	r2, r3
20001a82:	68fb      	ldr	r3, [r7, #12]
20001a84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001a86:	687b      	ldr	r3, [r7, #4]
20001a88:	2b02      	cmp	r3, #2
20001a8a:	d105      	bne.n	20001a98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001a8c:	693b      	ldr	r3, [r7, #16]
20001a8e:	2b00      	cmp	r3, #0
20001a90:	d002      	beq.n	20001a98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001a92:	693b      	ldr	r3, [r7, #16]
20001a94:	3b01      	subs	r3, #1
20001a96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20001a98:	693b      	ldr	r3, [r7, #16]
20001a9a:	1c5a      	adds	r2, r3, #1
20001a9c:	68fb      	ldr	r3, [r7, #12]
20001a9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001aa0:	697b      	ldr	r3, [r7, #20]
}
20001aa2:	4618      	mov	r0, r3
20001aa4:	3718      	adds	r7, #24
20001aa6:	46bd      	mov	sp, r7
20001aa8:	bd80      	pop	{r7, pc}

20001aaa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001aaa:	b580      	push	{r7, lr}
20001aac:	b082      	sub	sp, #8
20001aae:	af00      	add	r7, sp, #0
20001ab0:	6078      	str	r0, [r7, #4]
20001ab2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001ab4:	687b      	ldr	r3, [r7, #4]
20001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ab8:	2b00      	cmp	r3, #0
20001aba:	d018      	beq.n	20001aee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20001abc:	687b      	ldr	r3, [r7, #4]
20001abe:	68da      	ldr	r2, [r3, #12]
20001ac0:	687b      	ldr	r3, [r7, #4]
20001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ac4:	441a      	add	r2, r3
20001ac6:	687b      	ldr	r3, [r7, #4]
20001ac8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001aca:	687b      	ldr	r3, [r7, #4]
20001acc:	68da      	ldr	r2, [r3, #12]
20001ace:	687b      	ldr	r3, [r7, #4]
20001ad0:	689b      	ldr	r3, [r3, #8]
20001ad2:	429a      	cmp	r2, r3
20001ad4:	d303      	bcc.n	20001ade <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
20001ad6:	687b      	ldr	r3, [r7, #4]
20001ad8:	681a      	ldr	r2, [r3, #0]
20001ada:	687b      	ldr	r3, [r7, #4]
20001adc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
20001ade:	687b      	ldr	r3, [r7, #4]
20001ae0:	68d9      	ldr	r1, [r3, #12]
20001ae2:	687b      	ldr	r3, [r7, #4]
20001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ae6:	461a      	mov	r2, r3
20001ae8:	6838      	ldr	r0, [r7, #0]
20001aea:	f004 f985 	bl	20005df8 <memcpy>
	}
}
20001aee:	bf00      	nop
20001af0:	3708      	adds	r7, #8
20001af2:	46bd      	mov	sp, r7
20001af4:	bd80      	pop	{r7, pc}

20001af6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001af6:	b580      	push	{r7, lr}
20001af8:	b084      	sub	sp, #16
20001afa:	af00      	add	r7, sp, #0
20001afc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001afe:	f001 fda1 	bl	20003644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001b02:	687b      	ldr	r3, [r7, #4]
20001b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001b08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001b0a:	e011      	b.n	20001b30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001b0c:	687b      	ldr	r3, [r7, #4]
20001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001b10:	2b00      	cmp	r3, #0
20001b12:	d012      	beq.n	20001b3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001b14:	687b      	ldr	r3, [r7, #4]
20001b16:	3324      	adds	r3, #36	; 0x24
20001b18:	4618      	mov	r0, r3
20001b1a:	f000 fd7b 	bl	20002614 <xTaskRemoveFromEventList>
20001b1e:	4603      	mov	r3, r0
20001b20:	2b00      	cmp	r3, #0
20001b22:	d001      	beq.n	20001b28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001b24:	f000 fe52 	bl	200027cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001b28:	7bfb      	ldrb	r3, [r7, #15]
20001b2a:	3b01      	subs	r3, #1
20001b2c:	b2db      	uxtb	r3, r3
20001b2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001b34:	2b00      	cmp	r3, #0
20001b36:	dce9      	bgt.n	20001b0c <prvUnlockQueue+0x16>
20001b38:	e000      	b.n	20001b3c <prvUnlockQueue+0x46>
					break;
20001b3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001b3c:	687b      	ldr	r3, [r7, #4]
20001b3e:	22ff      	movs	r2, #255	; 0xff
20001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001b44:	f001 fdae 	bl	200036a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001b48:	f001 fd7c 	bl	20003644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001b4c:	687b      	ldr	r3, [r7, #4]
20001b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001b52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001b54:	e011      	b.n	20001b7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001b56:	687b      	ldr	r3, [r7, #4]
20001b58:	691b      	ldr	r3, [r3, #16]
20001b5a:	2b00      	cmp	r3, #0
20001b5c:	d012      	beq.n	20001b84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001b5e:	687b      	ldr	r3, [r7, #4]
20001b60:	3310      	adds	r3, #16
20001b62:	4618      	mov	r0, r3
20001b64:	f000 fd56 	bl	20002614 <xTaskRemoveFromEventList>
20001b68:	4603      	mov	r3, r0
20001b6a:	2b00      	cmp	r3, #0
20001b6c:	d001      	beq.n	20001b72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
20001b6e:	f000 fe2d 	bl	200027cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001b72:	7bbb      	ldrb	r3, [r7, #14]
20001b74:	3b01      	subs	r3, #1
20001b76:	b2db      	uxtb	r3, r3
20001b78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
20001b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001b7e:	2b00      	cmp	r3, #0
20001b80:	dce9      	bgt.n	20001b56 <prvUnlockQueue+0x60>
20001b82:	e000      	b.n	20001b86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
20001b84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001b86:	687b      	ldr	r3, [r7, #4]
20001b88:	22ff      	movs	r2, #255	; 0xff
20001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001b8e:	f001 fd89 	bl	200036a4 <vPortExitCritical>
}
20001b92:	bf00      	nop
20001b94:	3710      	adds	r7, #16
20001b96:	46bd      	mov	sp, r7
20001b98:	bd80      	pop	{r7, pc}

20001b9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001b9a:	b580      	push	{r7, lr}
20001b9c:	b084      	sub	sp, #16
20001b9e:	af00      	add	r7, sp, #0
20001ba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001ba2:	f001 fd4f 	bl	20003644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001ba6:	687b      	ldr	r3, [r7, #4]
20001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001baa:	2b00      	cmp	r3, #0
20001bac:	d102      	bne.n	20001bb4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
20001bae:	2301      	movs	r3, #1
20001bb0:	60fb      	str	r3, [r7, #12]
20001bb2:	e001      	b.n	20001bb8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
20001bb4:	2300      	movs	r3, #0
20001bb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001bb8:	f001 fd74 	bl	200036a4 <vPortExitCritical>

	return xReturn;
20001bbc:	68fb      	ldr	r3, [r7, #12]
}
20001bbe:	4618      	mov	r0, r3
20001bc0:	3710      	adds	r7, #16
20001bc2:	46bd      	mov	sp, r7
20001bc4:	bd80      	pop	{r7, pc}

20001bc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001bc6:	b580      	push	{r7, lr}
20001bc8:	b084      	sub	sp, #16
20001bca:	af00      	add	r7, sp, #0
20001bcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001bce:	f001 fd39 	bl	20003644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001bd2:	687b      	ldr	r3, [r7, #4]
20001bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001bd6:	687b      	ldr	r3, [r7, #4]
20001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001bda:	429a      	cmp	r2, r3
20001bdc:	d102      	bne.n	20001be4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
20001bde:	2301      	movs	r3, #1
20001be0:	60fb      	str	r3, [r7, #12]
20001be2:	e001      	b.n	20001be8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001be4:	2300      	movs	r3, #0
20001be6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001be8:	f001 fd5c 	bl	200036a4 <vPortExitCritical>

	return xReturn;
20001bec:	68fb      	ldr	r3, [r7, #12]
}
20001bee:	4618      	mov	r0, r3
20001bf0:	3710      	adds	r7, #16
20001bf2:	46bd      	mov	sp, r7
20001bf4:	bd80      	pop	{r7, pc}
	...

20001bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001bf8:	b480      	push	{r7}
20001bfa:	b085      	sub	sp, #20
20001bfc:	af00      	add	r7, sp, #0
20001bfe:	6078      	str	r0, [r7, #4]
20001c00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001c02:	2300      	movs	r3, #0
20001c04:	60fb      	str	r3, [r7, #12]
20001c06:	e014      	b.n	20001c32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
20001c08:	4a0f      	ldr	r2, [pc, #60]	; (20001c48 <vQueueAddToRegistry+0x50>)
20001c0a:	68fb      	ldr	r3, [r7, #12]
20001c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
20001c10:	2b00      	cmp	r3, #0
20001c12:	d10b      	bne.n	20001c2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
20001c14:	490c      	ldr	r1, [pc, #48]	; (20001c48 <vQueueAddToRegistry+0x50>)
20001c16:	68fb      	ldr	r3, [r7, #12]
20001c18:	683a      	ldr	r2, [r7, #0]
20001c1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
20001c1e:	4a0a      	ldr	r2, [pc, #40]	; (20001c48 <vQueueAddToRegistry+0x50>)
20001c20:	68fb      	ldr	r3, [r7, #12]
20001c22:	00db      	lsls	r3, r3, #3
20001c24:	4413      	add	r3, r2
20001c26:	687a      	ldr	r2, [r7, #4]
20001c28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
20001c2a:	e006      	b.n	20001c3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001c2c:	68fb      	ldr	r3, [r7, #12]
20001c2e:	3301      	adds	r3, #1
20001c30:	60fb      	str	r3, [r7, #12]
20001c32:	68fb      	ldr	r3, [r7, #12]
20001c34:	2b07      	cmp	r3, #7
20001c36:	d9e7      	bls.n	20001c08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001c38:	bf00      	nop
20001c3a:	bf00      	nop
20001c3c:	3714      	adds	r7, #20
20001c3e:	46bd      	mov	sp, r7
20001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c44:	4770      	bx	lr
20001c46:	bf00      	nop
20001c48:	2000a65c 	.word	0x2000a65c

20001c4c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
20001c4c:	b480      	push	{r7}
20001c4e:	b085      	sub	sp, #20
20001c50:	af00      	add	r7, sp, #0
20001c52:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001c54:	2300      	movs	r3, #0
20001c56:	60fb      	str	r3, [r7, #12]
20001c58:	e016      	b.n	20001c88 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
20001c5a:	4a10      	ldr	r2, [pc, #64]	; (20001c9c <vQueueUnregisterQueue+0x50>)
20001c5c:	68fb      	ldr	r3, [r7, #12]
20001c5e:	00db      	lsls	r3, r3, #3
20001c60:	4413      	add	r3, r2
20001c62:	685b      	ldr	r3, [r3, #4]
20001c64:	687a      	ldr	r2, [r7, #4]
20001c66:	429a      	cmp	r2, r3
20001c68:	d10b      	bne.n	20001c82 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
20001c6a:	4a0c      	ldr	r2, [pc, #48]	; (20001c9c <vQueueUnregisterQueue+0x50>)
20001c6c:	68fb      	ldr	r3, [r7, #12]
20001c6e:	2100      	movs	r1, #0
20001c70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
20001c74:	4a09      	ldr	r2, [pc, #36]	; (20001c9c <vQueueUnregisterQueue+0x50>)
20001c76:	68fb      	ldr	r3, [r7, #12]
20001c78:	00db      	lsls	r3, r3, #3
20001c7a:	4413      	add	r3, r2
20001c7c:	2200      	movs	r2, #0
20001c7e:	605a      	str	r2, [r3, #4]
				break;
20001c80:	e006      	b.n	20001c90 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001c82:	68fb      	ldr	r3, [r7, #12]
20001c84:	3301      	adds	r3, #1
20001c86:	60fb      	str	r3, [r7, #12]
20001c88:	68fb      	ldr	r3, [r7, #12]
20001c8a:	2b07      	cmp	r3, #7
20001c8c:	d9e5      	bls.n	20001c5a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
20001c8e:	bf00      	nop
20001c90:	bf00      	nop
20001c92:	3714      	adds	r7, #20
20001c94:	46bd      	mov	sp, r7
20001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c9a:	4770      	bx	lr
20001c9c:	2000a65c 	.word	0x2000a65c

20001ca0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001ca0:	b580      	push	{r7, lr}
20001ca2:	b086      	sub	sp, #24
20001ca4:	af00      	add	r7, sp, #0
20001ca6:	60f8      	str	r0, [r7, #12]
20001ca8:	60b9      	str	r1, [r7, #8]
20001caa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
20001cac:	68fb      	ldr	r3, [r7, #12]
20001cae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001cb0:	f001 fcc8 	bl	20003644 <vPortEnterCritical>
20001cb4:	697b      	ldr	r3, [r7, #20]
20001cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001cba:	b25b      	sxtb	r3, r3
20001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
20001cc0:	d103      	bne.n	20001cca <vQueueWaitForMessageRestricted+0x2a>
20001cc2:	697b      	ldr	r3, [r7, #20]
20001cc4:	2200      	movs	r2, #0
20001cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001cca:	697b      	ldr	r3, [r7, #20]
20001ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001cd0:	b25b      	sxtb	r3, r3
20001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
20001cd6:	d103      	bne.n	20001ce0 <vQueueWaitForMessageRestricted+0x40>
20001cd8:	697b      	ldr	r3, [r7, #20]
20001cda:	2200      	movs	r2, #0
20001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001ce0:	f001 fce0 	bl	200036a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001ce4:	697b      	ldr	r3, [r7, #20]
20001ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001ce8:	2b00      	cmp	r3, #0
20001cea:	d106      	bne.n	20001cfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001cec:	697b      	ldr	r3, [r7, #20]
20001cee:	3324      	adds	r3, #36	; 0x24
20001cf0:	687a      	ldr	r2, [r7, #4]
20001cf2:	68b9      	ldr	r1, [r7, #8]
20001cf4:	4618      	mov	r0, r3
20001cf6:	f000 fc61 	bl	200025bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001cfa:	6978      	ldr	r0, [r7, #20]
20001cfc:	f7ff fefb 	bl	20001af6 <prvUnlockQueue>
	}
20001d00:	bf00      	nop
20001d02:	3718      	adds	r7, #24
20001d04:	46bd      	mov	sp, r7
20001d06:	bd80      	pop	{r7, pc}

20001d08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
20001d08:	b580      	push	{r7, lr}
20001d0a:	b08e      	sub	sp, #56	; 0x38
20001d0c:	af04      	add	r7, sp, #16
20001d0e:	60f8      	str	r0, [r7, #12]
20001d10:	60b9      	str	r1, [r7, #8]
20001d12:	607a      	str	r2, [r7, #4]
20001d14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
20001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001d18:	2b00      	cmp	r3, #0
20001d1a:	d10a      	bne.n	20001d32 <xTaskCreateStatic+0x2a>
	__asm volatile
20001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d20:	f383 8811 	msr	BASEPRI, r3
20001d24:	f3bf 8f6f 	isb	sy
20001d28:	f3bf 8f4f 	dsb	sy
20001d2c:	623b      	str	r3, [r7, #32]
}
20001d2e:	bf00      	nop
20001d30:	e7fe      	b.n	20001d30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
20001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001d34:	2b00      	cmp	r3, #0
20001d36:	d10a      	bne.n	20001d4e <xTaskCreateStatic+0x46>
	__asm volatile
20001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d3c:	f383 8811 	msr	BASEPRI, r3
20001d40:	f3bf 8f6f 	isb	sy
20001d44:	f3bf 8f4f 	dsb	sy
20001d48:	61fb      	str	r3, [r7, #28]
}
20001d4a:	bf00      	nop
20001d4c:	e7fe      	b.n	20001d4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
20001d4e:	23bc      	movs	r3, #188	; 0xbc
20001d50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
20001d52:	693b      	ldr	r3, [r7, #16]
20001d54:	2bbc      	cmp	r3, #188	; 0xbc
20001d56:	d00a      	beq.n	20001d6e <xTaskCreateStatic+0x66>
	__asm volatile
20001d58:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d5c:	f383 8811 	msr	BASEPRI, r3
20001d60:	f3bf 8f6f 	isb	sy
20001d64:	f3bf 8f4f 	dsb	sy
20001d68:	61bb      	str	r3, [r7, #24]
}
20001d6a:	bf00      	nop
20001d6c:	e7fe      	b.n	20001d6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
20001d6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
20001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001d72:	2b00      	cmp	r3, #0
20001d74:	d01e      	beq.n	20001db4 <xTaskCreateStatic+0xac>
20001d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001d78:	2b00      	cmp	r3, #0
20001d7a:	d01b      	beq.n	20001db4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20001d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001d7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
20001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001d84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
20001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d88:	2202      	movs	r2, #2
20001d8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
20001d8e:	2300      	movs	r3, #0
20001d90:	9303      	str	r3, [sp, #12]
20001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d94:	9302      	str	r3, [sp, #8]
20001d96:	f107 0314 	add.w	r3, r7, #20
20001d9a:	9301      	str	r3, [sp, #4]
20001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d9e:	9300      	str	r3, [sp, #0]
20001da0:	683b      	ldr	r3, [r7, #0]
20001da2:	687a      	ldr	r2, [r7, #4]
20001da4:	68b9      	ldr	r1, [r7, #8]
20001da6:	68f8      	ldr	r0, [r7, #12]
20001da8:	f000 f850 	bl	20001e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001dae:	f000 f8f3 	bl	20001f98 <prvAddNewTaskToReadyList>
20001db2:	e001      	b.n	20001db8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
20001db4:	2300      	movs	r3, #0
20001db6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
20001db8:	697b      	ldr	r3, [r7, #20]
	}
20001dba:	4618      	mov	r0, r3
20001dbc:	3728      	adds	r7, #40	; 0x28
20001dbe:	46bd      	mov	sp, r7
20001dc0:	bd80      	pop	{r7, pc}

20001dc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
20001dc2:	b580      	push	{r7, lr}
20001dc4:	b08c      	sub	sp, #48	; 0x30
20001dc6:	af04      	add	r7, sp, #16
20001dc8:	60f8      	str	r0, [r7, #12]
20001dca:	60b9      	str	r1, [r7, #8]
20001dcc:	603b      	str	r3, [r7, #0]
20001dce:	4613      	mov	r3, r2
20001dd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
20001dd2:	88fb      	ldrh	r3, [r7, #6]
20001dd4:	009b      	lsls	r3, r3, #2
20001dd6:	4618      	mov	r0, r3
20001dd8:	f001 fd56 	bl	20003888 <pvPortMalloc>
20001ddc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
20001dde:	697b      	ldr	r3, [r7, #20]
20001de0:	2b00      	cmp	r3, #0
20001de2:	d00e      	beq.n	20001e02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
20001de4:	20bc      	movs	r0, #188	; 0xbc
20001de6:	f001 fd4f 	bl	20003888 <pvPortMalloc>
20001dea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
20001dec:	69fb      	ldr	r3, [r7, #28]
20001dee:	2b00      	cmp	r3, #0
20001df0:	d003      	beq.n	20001dfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001df2:	69fb      	ldr	r3, [r7, #28]
20001df4:	697a      	ldr	r2, [r7, #20]
20001df6:	631a      	str	r2, [r3, #48]	; 0x30
20001df8:	e005      	b.n	20001e06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001dfa:	6978      	ldr	r0, [r7, #20]
20001dfc:	f001 fe10 	bl	20003a20 <vPortFree>
20001e00:	e001      	b.n	20001e06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001e02:	2300      	movs	r3, #0
20001e04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001e06:	69fb      	ldr	r3, [r7, #28]
20001e08:	2b00      	cmp	r3, #0
20001e0a:	d017      	beq.n	20001e3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
20001e0c:	69fb      	ldr	r3, [r7, #28]
20001e0e:	2200      	movs	r2, #0
20001e10:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001e14:	88fa      	ldrh	r2, [r7, #6]
20001e16:	2300      	movs	r3, #0
20001e18:	9303      	str	r3, [sp, #12]
20001e1a:	69fb      	ldr	r3, [r7, #28]
20001e1c:	9302      	str	r3, [sp, #8]
20001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001e20:	9301      	str	r3, [sp, #4]
20001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001e24:	9300      	str	r3, [sp, #0]
20001e26:	683b      	ldr	r3, [r7, #0]
20001e28:	68b9      	ldr	r1, [r7, #8]
20001e2a:	68f8      	ldr	r0, [r7, #12]
20001e2c:	f000 f80e 	bl	20001e4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001e30:	69f8      	ldr	r0, [r7, #28]
20001e32:	f000 f8b1 	bl	20001f98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001e36:	2301      	movs	r3, #1
20001e38:	61bb      	str	r3, [r7, #24]
20001e3a:	e002      	b.n	20001e42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001e3c:	f04f 33ff 	mov.w	r3, #4294967295
20001e40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001e42:	69bb      	ldr	r3, [r7, #24]
	}
20001e44:	4618      	mov	r0, r3
20001e46:	3720      	adds	r7, #32
20001e48:	46bd      	mov	sp, r7
20001e4a:	bd80      	pop	{r7, pc}

20001e4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
20001e4c:	b580      	push	{r7, lr}
20001e4e:	b088      	sub	sp, #32
20001e50:	af00      	add	r7, sp, #0
20001e52:	60f8      	str	r0, [r7, #12]
20001e54:	60b9      	str	r1, [r7, #8]
20001e56:	607a      	str	r2, [r7, #4]
20001e58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001e5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
20001e5e:	687b      	ldr	r3, [r7, #4]
20001e60:	009b      	lsls	r3, r3, #2
20001e62:	461a      	mov	r2, r3
20001e64:	21a5      	movs	r1, #165	; 0xa5
20001e66:	f003 ffd5 	bl	20005e14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
20001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001e6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001e6e:	687b      	ldr	r3, [r7, #4]
20001e70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
20001e74:	3b01      	subs	r3, #1
20001e76:	009b      	lsls	r3, r3, #2
20001e78:	4413      	add	r3, r2
20001e7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
20001e7c:	69bb      	ldr	r3, [r7, #24]
20001e7e:	f023 0307 	bic.w	r3, r3, #7
20001e82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20001e84:	69bb      	ldr	r3, [r7, #24]
20001e86:	f003 0307 	and.w	r3, r3, #7
20001e8a:	2b00      	cmp	r3, #0
20001e8c:	d00a      	beq.n	20001ea4 <prvInitialiseNewTask+0x58>
	__asm volatile
20001e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001e92:	f383 8811 	msr	BASEPRI, r3
20001e96:	f3bf 8f6f 	isb	sy
20001e9a:	f3bf 8f4f 	dsb	sy
20001e9e:	617b      	str	r3, [r7, #20]
}
20001ea0:	bf00      	nop
20001ea2:	e7fe      	b.n	20001ea2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
20001ea4:	68bb      	ldr	r3, [r7, #8]
20001ea6:	2b00      	cmp	r3, #0
20001ea8:	d01f      	beq.n	20001eea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001eaa:	2300      	movs	r3, #0
20001eac:	61fb      	str	r3, [r7, #28]
20001eae:	e012      	b.n	20001ed6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20001eb0:	68ba      	ldr	r2, [r7, #8]
20001eb2:	69fb      	ldr	r3, [r7, #28]
20001eb4:	4413      	add	r3, r2
20001eb6:	7819      	ldrb	r1, [r3, #0]
20001eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001eba:	69fb      	ldr	r3, [r7, #28]
20001ebc:	4413      	add	r3, r2
20001ebe:	3334      	adds	r3, #52	; 0x34
20001ec0:	460a      	mov	r2, r1
20001ec2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
20001ec4:	68ba      	ldr	r2, [r7, #8]
20001ec6:	69fb      	ldr	r3, [r7, #28]
20001ec8:	4413      	add	r3, r2
20001eca:	781b      	ldrb	r3, [r3, #0]
20001ecc:	2b00      	cmp	r3, #0
20001ece:	d006      	beq.n	20001ede <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001ed0:	69fb      	ldr	r3, [r7, #28]
20001ed2:	3301      	adds	r3, #1
20001ed4:	61fb      	str	r3, [r7, #28]
20001ed6:	69fb      	ldr	r3, [r7, #28]
20001ed8:	2b0f      	cmp	r3, #15
20001eda:	d9e9      	bls.n	20001eb0 <prvInitialiseNewTask+0x64>
20001edc:	e000      	b.n	20001ee0 <prvInitialiseNewTask+0x94>
			{
				break;
20001ede:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20001ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ee2:	2200      	movs	r2, #0
20001ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20001ee8:	e003      	b.n	20001ef2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
20001eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001eec:	2200      	movs	r2, #0
20001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001ef4:	2b37      	cmp	r3, #55	; 0x37
20001ef6:	d901      	bls.n	20001efc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001ef8:	2337      	movs	r3, #55	; 0x37
20001efa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001f00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001f06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
20001f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f0a:	2200      	movs	r2, #0
20001f0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f10:	3304      	adds	r3, #4
20001f12:	4618      	mov	r0, r3
20001f14:	f7fe fe56 	bl	20000bc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f1a:	3318      	adds	r3, #24
20001f1c:	4618      	mov	r0, r3
20001f1e:	f7fe fe51 	bl	20000bc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001f26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001f36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f3a:	2200      	movs	r2, #0
20001f3c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f42:	2200      	movs	r2, #0
20001f44:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
20001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f4a:	3354      	adds	r3, #84	; 0x54
20001f4c:	2260      	movs	r2, #96	; 0x60
20001f4e:	2100      	movs	r1, #0
20001f50:	4618      	mov	r0, r3
20001f52:	f003 ff5f 	bl	20005e14 <memset>
20001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f58:	4a0c      	ldr	r2, [pc, #48]	; (20001f8c <prvInitialiseNewTask+0x140>)
20001f5a:	659a      	str	r2, [r3, #88]	; 0x58
20001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f5e:	4a0c      	ldr	r2, [pc, #48]	; (20001f90 <prvInitialiseNewTask+0x144>)
20001f60:	65da      	str	r2, [r3, #92]	; 0x5c
20001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f64:	4a0b      	ldr	r2, [pc, #44]	; (20001f94 <prvInitialiseNewTask+0x148>)
20001f66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20001f68:	683a      	ldr	r2, [r7, #0]
20001f6a:	68f9      	ldr	r1, [r7, #12]
20001f6c:	69b8      	ldr	r0, [r7, #24]
20001f6e:	f001 fa3f 	bl	200033f0 <pxPortInitialiseStack>
20001f72:	4602      	mov	r2, r0
20001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
20001f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f7a:	2b00      	cmp	r3, #0
20001f7c:	d002      	beq.n	20001f84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20001f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001f82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001f84:	bf00      	nop
20001f86:	3720      	adds	r7, #32
20001f88:	46bd      	mov	sp, r7
20001f8a:	bd80      	pop	{r7, pc}
20001f8c:	20009dc0 	.word	0x20009dc0
20001f90:	20009de0 	.word	0x20009de0
20001f94:	20009da0 	.word	0x20009da0

20001f98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20001f98:	b580      	push	{r7, lr}
20001f9a:	b082      	sub	sp, #8
20001f9c:	af00      	add	r7, sp, #0
20001f9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20001fa0:	f001 fb50 	bl	20003644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20001fa4:	4b2d      	ldr	r3, [pc, #180]	; (2000205c <prvAddNewTaskToReadyList+0xc4>)
20001fa6:	681b      	ldr	r3, [r3, #0]
20001fa8:	3301      	adds	r3, #1
20001faa:	4a2c      	ldr	r2, [pc, #176]	; (2000205c <prvAddNewTaskToReadyList+0xc4>)
20001fac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
20001fae:	4b2c      	ldr	r3, [pc, #176]	; (20002060 <prvAddNewTaskToReadyList+0xc8>)
20001fb0:	681b      	ldr	r3, [r3, #0]
20001fb2:	2b00      	cmp	r3, #0
20001fb4:	d109      	bne.n	20001fca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20001fb6:	4a2a      	ldr	r2, [pc, #168]	; (20002060 <prvAddNewTaskToReadyList+0xc8>)
20001fb8:	687b      	ldr	r3, [r7, #4]
20001fba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20001fbc:	4b27      	ldr	r3, [pc, #156]	; (2000205c <prvAddNewTaskToReadyList+0xc4>)
20001fbe:	681b      	ldr	r3, [r3, #0]
20001fc0:	2b01      	cmp	r3, #1
20001fc2:	d110      	bne.n	20001fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001fc4:	f000 fc26 	bl	20002814 <prvInitialiseTaskLists>
20001fc8:	e00d      	b.n	20001fe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20001fca:	4b26      	ldr	r3, [pc, #152]	; (20002064 <prvAddNewTaskToReadyList+0xcc>)
20001fcc:	681b      	ldr	r3, [r3, #0]
20001fce:	2b00      	cmp	r3, #0
20001fd0:	d109      	bne.n	20001fe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20001fd2:	4b23      	ldr	r3, [pc, #140]	; (20002060 <prvAddNewTaskToReadyList+0xc8>)
20001fd4:	681b      	ldr	r3, [r3, #0]
20001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001fd8:	687b      	ldr	r3, [r7, #4]
20001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001fdc:	429a      	cmp	r2, r3
20001fde:	d802      	bhi.n	20001fe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
20001fe0:	4a1f      	ldr	r2, [pc, #124]	; (20002060 <prvAddNewTaskToReadyList+0xc8>)
20001fe2:	687b      	ldr	r3, [r7, #4]
20001fe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20001fe6:	4b20      	ldr	r3, [pc, #128]	; (20002068 <prvAddNewTaskToReadyList+0xd0>)
20001fe8:	681b      	ldr	r3, [r3, #0]
20001fea:	3301      	adds	r3, #1
20001fec:	4a1e      	ldr	r2, [pc, #120]	; (20002068 <prvAddNewTaskToReadyList+0xd0>)
20001fee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20001ff0:	4b1d      	ldr	r3, [pc, #116]	; (20002068 <prvAddNewTaskToReadyList+0xd0>)
20001ff2:	681a      	ldr	r2, [r3, #0]
20001ff4:	687b      	ldr	r3, [r7, #4]
20001ff6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20001ff8:	687b      	ldr	r3, [r7, #4]
20001ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001ffc:	4b1b      	ldr	r3, [pc, #108]	; (2000206c <prvAddNewTaskToReadyList+0xd4>)
20001ffe:	681b      	ldr	r3, [r3, #0]
20002000:	429a      	cmp	r2, r3
20002002:	d903      	bls.n	2000200c <prvAddNewTaskToReadyList+0x74>
20002004:	687b      	ldr	r3, [r7, #4]
20002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002008:	4a18      	ldr	r2, [pc, #96]	; (2000206c <prvAddNewTaskToReadyList+0xd4>)
2000200a:	6013      	str	r3, [r2, #0]
2000200c:	687b      	ldr	r3, [r7, #4]
2000200e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002010:	4613      	mov	r3, r2
20002012:	009b      	lsls	r3, r3, #2
20002014:	4413      	add	r3, r2
20002016:	009b      	lsls	r3, r3, #2
20002018:	4a15      	ldr	r2, [pc, #84]	; (20002070 <prvAddNewTaskToReadyList+0xd8>)
2000201a:	441a      	add	r2, r3
2000201c:	687b      	ldr	r3, [r7, #4]
2000201e:	3304      	adds	r3, #4
20002020:	4619      	mov	r1, r3
20002022:	4610      	mov	r0, r2
20002024:	f7fe fddb 	bl	20000bde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20002028:	f001 fb3c 	bl	200036a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
2000202c:	4b0d      	ldr	r3, [pc, #52]	; (20002064 <prvAddNewTaskToReadyList+0xcc>)
2000202e:	681b      	ldr	r3, [r3, #0]
20002030:	2b00      	cmp	r3, #0
20002032:	d00e      	beq.n	20002052 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20002034:	4b0a      	ldr	r3, [pc, #40]	; (20002060 <prvAddNewTaskToReadyList+0xc8>)
20002036:	681b      	ldr	r3, [r3, #0]
20002038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000203a:	687b      	ldr	r3, [r7, #4]
2000203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000203e:	429a      	cmp	r2, r3
20002040:	d207      	bcs.n	20002052 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
20002042:	4b0c      	ldr	r3, [pc, #48]	; (20002074 <prvAddNewTaskToReadyList+0xdc>)
20002044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002048:	601a      	str	r2, [r3, #0]
2000204a:	f3bf 8f4f 	dsb	sy
2000204e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002052:	bf00      	nop
20002054:	3708      	adds	r7, #8
20002056:	46bd      	mov	sp, r7
20002058:	bd80      	pop	{r7, pc}
2000205a:	bf00      	nop
2000205c:	2000ab70 	.word	0x2000ab70
20002060:	2000a69c 	.word	0x2000a69c
20002064:	2000ab7c 	.word	0x2000ab7c
20002068:	2000ab8c 	.word	0x2000ab8c
2000206c:	2000ab78 	.word	0x2000ab78
20002070:	2000a6a0 	.word	0x2000a6a0
20002074:	e000ed04 	.word	0xe000ed04

20002078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20002078:	b580      	push	{r7, lr}
2000207a:	b084      	sub	sp, #16
2000207c:	af00      	add	r7, sp, #0
2000207e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
20002080:	2300      	movs	r3, #0
20002082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
20002084:	687b      	ldr	r3, [r7, #4]
20002086:	2b00      	cmp	r3, #0
20002088:	d017      	beq.n	200020ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
2000208a:	4b13      	ldr	r3, [pc, #76]	; (200020d8 <vTaskDelay+0x60>)
2000208c:	681b      	ldr	r3, [r3, #0]
2000208e:	2b00      	cmp	r3, #0
20002090:	d00a      	beq.n	200020a8 <vTaskDelay+0x30>
	__asm volatile
20002092:	f04f 0350 	mov.w	r3, #80	; 0x50
20002096:	f383 8811 	msr	BASEPRI, r3
2000209a:	f3bf 8f6f 	isb	sy
2000209e:	f3bf 8f4f 	dsb	sy
200020a2:	60bb      	str	r3, [r7, #8]
}
200020a4:	bf00      	nop
200020a6:	e7fe      	b.n	200020a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
200020a8:	f000 f88a 	bl	200021c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
200020ac:	2100      	movs	r1, #0
200020ae:	6878      	ldr	r0, [r7, #4]
200020b0:	f000 fdfc 	bl	20002cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
200020b4:	f000 f892 	bl	200021dc <xTaskResumeAll>
200020b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
200020ba:	68fb      	ldr	r3, [r7, #12]
200020bc:	2b00      	cmp	r3, #0
200020be:	d107      	bne.n	200020d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
200020c0:	4b06      	ldr	r3, [pc, #24]	; (200020dc <vTaskDelay+0x64>)
200020c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200020c6:	601a      	str	r2, [r3, #0]
200020c8:	f3bf 8f4f 	dsb	sy
200020cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
200020d0:	bf00      	nop
200020d2:	3710      	adds	r7, #16
200020d4:	46bd      	mov	sp, r7
200020d6:	bd80      	pop	{r7, pc}
200020d8:	2000ab98 	.word	0x2000ab98
200020dc:	e000ed04 	.word	0xe000ed04

200020e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
200020e0:	b580      	push	{r7, lr}
200020e2:	b08a      	sub	sp, #40	; 0x28
200020e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
200020e6:	2300      	movs	r3, #0
200020e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
200020ea:	2300      	movs	r3, #0
200020ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
200020ee:	463a      	mov	r2, r7
200020f0:	1d39      	adds	r1, r7, #4
200020f2:	f107 0308 	add.w	r3, r7, #8
200020f6:	4618      	mov	r0, r3
200020f8:	f7fe fd10 	bl	20000b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
200020fc:	6839      	ldr	r1, [r7, #0]
200020fe:	687b      	ldr	r3, [r7, #4]
20002100:	68ba      	ldr	r2, [r7, #8]
20002102:	9202      	str	r2, [sp, #8]
20002104:	9301      	str	r3, [sp, #4]
20002106:	2300      	movs	r3, #0
20002108:	9300      	str	r3, [sp, #0]
2000210a:	2300      	movs	r3, #0
2000210c:	460a      	mov	r2, r1
2000210e:	4924      	ldr	r1, [pc, #144]	; (200021a0 <vTaskStartScheduler+0xc0>)
20002110:	4824      	ldr	r0, [pc, #144]	; (200021a4 <vTaskStartScheduler+0xc4>)
20002112:	f7ff fdf9 	bl	20001d08 <xTaskCreateStatic>
20002116:	4603      	mov	r3, r0
20002118:	4a23      	ldr	r2, [pc, #140]	; (200021a8 <vTaskStartScheduler+0xc8>)
2000211a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
2000211c:	4b22      	ldr	r3, [pc, #136]	; (200021a8 <vTaskStartScheduler+0xc8>)
2000211e:	681b      	ldr	r3, [r3, #0]
20002120:	2b00      	cmp	r3, #0
20002122:	d002      	beq.n	2000212a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
20002124:	2301      	movs	r3, #1
20002126:	617b      	str	r3, [r7, #20]
20002128:	e001      	b.n	2000212e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
2000212a:	2300      	movs	r3, #0
2000212c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
2000212e:	697b      	ldr	r3, [r7, #20]
20002130:	2b01      	cmp	r3, #1
20002132:	d102      	bne.n	2000213a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
20002134:	f000 fe0e 	bl	20002d54 <xTimerCreateTimerTask>
20002138:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
2000213a:	697b      	ldr	r3, [r7, #20]
2000213c:	2b01      	cmp	r3, #1
2000213e:	d11b      	bne.n	20002178 <vTaskStartScheduler+0x98>
	__asm volatile
20002140:	f04f 0350 	mov.w	r3, #80	; 0x50
20002144:	f383 8811 	msr	BASEPRI, r3
20002148:	f3bf 8f6f 	isb	sy
2000214c:	f3bf 8f4f 	dsb	sy
20002150:	613b      	str	r3, [r7, #16]
}
20002152:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
20002154:	4b15      	ldr	r3, [pc, #84]	; (200021ac <vTaskStartScheduler+0xcc>)
20002156:	681b      	ldr	r3, [r3, #0]
20002158:	3354      	adds	r3, #84	; 0x54
2000215a:	4a15      	ldr	r2, [pc, #84]	; (200021b0 <vTaskStartScheduler+0xd0>)
2000215c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
2000215e:	4b15      	ldr	r3, [pc, #84]	; (200021b4 <vTaskStartScheduler+0xd4>)
20002160:	f04f 32ff 	mov.w	r2, #4294967295
20002164:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20002166:	4b14      	ldr	r3, [pc, #80]	; (200021b8 <vTaskStartScheduler+0xd8>)
20002168:	2201      	movs	r2, #1
2000216a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2000216c:	4b13      	ldr	r3, [pc, #76]	; (200021bc <vTaskStartScheduler+0xdc>)
2000216e:	2200      	movs	r2, #0
20002170:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20002172:	f001 f9c5 	bl	20003500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20002176:	e00e      	b.n	20002196 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002178:	697b      	ldr	r3, [r7, #20]
2000217a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000217e:	d10a      	bne.n	20002196 <vTaskStartScheduler+0xb6>
	__asm volatile
20002180:	f04f 0350 	mov.w	r3, #80	; 0x50
20002184:	f383 8811 	msr	BASEPRI, r3
20002188:	f3bf 8f6f 	isb	sy
2000218c:	f3bf 8f4f 	dsb	sy
20002190:	60fb      	str	r3, [r7, #12]
}
20002192:	bf00      	nop
20002194:	e7fe      	b.n	20002194 <vTaskStartScheduler+0xb4>
}
20002196:	bf00      	nop
20002198:	3718      	adds	r7, #24
2000219a:	46bd      	mov	sp, r7
2000219c:	bd80      	pop	{r7, pc}
2000219e:	bf00      	nop
200021a0:	20005fc0 	.word	0x20005fc0
200021a4:	200027e5 	.word	0x200027e5
200021a8:	2000ab94 	.word	0x2000ab94
200021ac:	2000a69c 	.word	0x2000a69c
200021b0:	20009e60 	.word	0x20009e60
200021b4:	2000ab90 	.word	0x2000ab90
200021b8:	2000ab7c 	.word	0x2000ab7c
200021bc:	2000ab74 	.word	0x2000ab74

200021c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
200021c0:	b480      	push	{r7}
200021c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
200021c4:	4b04      	ldr	r3, [pc, #16]	; (200021d8 <vTaskSuspendAll+0x18>)
200021c6:	681b      	ldr	r3, [r3, #0]
200021c8:	3301      	adds	r3, #1
200021ca:	4a03      	ldr	r2, [pc, #12]	; (200021d8 <vTaskSuspendAll+0x18>)
200021cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
200021ce:	bf00      	nop
200021d0:	46bd      	mov	sp, r7
200021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200021d6:	4770      	bx	lr
200021d8:	2000ab98 	.word	0x2000ab98

200021dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
200021dc:	b580      	push	{r7, lr}
200021de:	b084      	sub	sp, #16
200021e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
200021e2:	2300      	movs	r3, #0
200021e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
200021e6:	2300      	movs	r3, #0
200021e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
200021ea:	4b42      	ldr	r3, [pc, #264]	; (200022f4 <xTaskResumeAll+0x118>)
200021ec:	681b      	ldr	r3, [r3, #0]
200021ee:	2b00      	cmp	r3, #0
200021f0:	d10a      	bne.n	20002208 <xTaskResumeAll+0x2c>
	__asm volatile
200021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
200021f6:	f383 8811 	msr	BASEPRI, r3
200021fa:	f3bf 8f6f 	isb	sy
200021fe:	f3bf 8f4f 	dsb	sy
20002202:	603b      	str	r3, [r7, #0]
}
20002204:	bf00      	nop
20002206:	e7fe      	b.n	20002206 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002208:	f001 fa1c 	bl	20003644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
2000220c:	4b39      	ldr	r3, [pc, #228]	; (200022f4 <xTaskResumeAll+0x118>)
2000220e:	681b      	ldr	r3, [r3, #0]
20002210:	3b01      	subs	r3, #1
20002212:	4a38      	ldr	r2, [pc, #224]	; (200022f4 <xTaskResumeAll+0x118>)
20002214:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002216:	4b37      	ldr	r3, [pc, #220]	; (200022f4 <xTaskResumeAll+0x118>)
20002218:	681b      	ldr	r3, [r3, #0]
2000221a:	2b00      	cmp	r3, #0
2000221c:	d162      	bne.n	200022e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2000221e:	4b36      	ldr	r3, [pc, #216]	; (200022f8 <xTaskResumeAll+0x11c>)
20002220:	681b      	ldr	r3, [r3, #0]
20002222:	2b00      	cmp	r3, #0
20002224:	d05e      	beq.n	200022e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002226:	e02f      	b.n	20002288 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002228:	4b34      	ldr	r3, [pc, #208]	; (200022fc <xTaskResumeAll+0x120>)
2000222a:	68db      	ldr	r3, [r3, #12]
2000222c:	68db      	ldr	r3, [r3, #12]
2000222e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002230:	68fb      	ldr	r3, [r7, #12]
20002232:	3318      	adds	r3, #24
20002234:	4618      	mov	r0, r3
20002236:	f7fe fd2f 	bl	20000c98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000223a:	68fb      	ldr	r3, [r7, #12]
2000223c:	3304      	adds	r3, #4
2000223e:	4618      	mov	r0, r3
20002240:	f7fe fd2a 	bl	20000c98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002244:	68fb      	ldr	r3, [r7, #12]
20002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002248:	4b2d      	ldr	r3, [pc, #180]	; (20002300 <xTaskResumeAll+0x124>)
2000224a:	681b      	ldr	r3, [r3, #0]
2000224c:	429a      	cmp	r2, r3
2000224e:	d903      	bls.n	20002258 <xTaskResumeAll+0x7c>
20002250:	68fb      	ldr	r3, [r7, #12]
20002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002254:	4a2a      	ldr	r2, [pc, #168]	; (20002300 <xTaskResumeAll+0x124>)
20002256:	6013      	str	r3, [r2, #0]
20002258:	68fb      	ldr	r3, [r7, #12]
2000225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000225c:	4613      	mov	r3, r2
2000225e:	009b      	lsls	r3, r3, #2
20002260:	4413      	add	r3, r2
20002262:	009b      	lsls	r3, r3, #2
20002264:	4a27      	ldr	r2, [pc, #156]	; (20002304 <xTaskResumeAll+0x128>)
20002266:	441a      	add	r2, r3
20002268:	68fb      	ldr	r3, [r7, #12]
2000226a:	3304      	adds	r3, #4
2000226c:	4619      	mov	r1, r3
2000226e:	4610      	mov	r0, r2
20002270:	f7fe fcb5 	bl	20000bde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002274:	68fb      	ldr	r3, [r7, #12]
20002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002278:	4b23      	ldr	r3, [pc, #140]	; (20002308 <xTaskResumeAll+0x12c>)
2000227a:	681b      	ldr	r3, [r3, #0]
2000227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000227e:	429a      	cmp	r2, r3
20002280:	d302      	bcc.n	20002288 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
20002282:	4b22      	ldr	r3, [pc, #136]	; (2000230c <xTaskResumeAll+0x130>)
20002284:	2201      	movs	r2, #1
20002286:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002288:	4b1c      	ldr	r3, [pc, #112]	; (200022fc <xTaskResumeAll+0x120>)
2000228a:	681b      	ldr	r3, [r3, #0]
2000228c:	2b00      	cmp	r3, #0
2000228e:	d1cb      	bne.n	20002228 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
20002290:	68fb      	ldr	r3, [r7, #12]
20002292:	2b00      	cmp	r3, #0
20002294:	d001      	beq.n	2000229a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002296:	f000 fb5f 	bl	20002958 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2000229a:	4b1d      	ldr	r3, [pc, #116]	; (20002310 <xTaskResumeAll+0x134>)
2000229c:	681b      	ldr	r3, [r3, #0]
2000229e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
200022a0:	687b      	ldr	r3, [r7, #4]
200022a2:	2b00      	cmp	r3, #0
200022a4:	d010      	beq.n	200022c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200022a6:	f000 f847 	bl	20002338 <xTaskIncrementTick>
200022aa:	4603      	mov	r3, r0
200022ac:	2b00      	cmp	r3, #0
200022ae:	d002      	beq.n	200022b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
200022b0:	4b16      	ldr	r3, [pc, #88]	; (2000230c <xTaskResumeAll+0x130>)
200022b2:	2201      	movs	r2, #1
200022b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
200022b6:	687b      	ldr	r3, [r7, #4]
200022b8:	3b01      	subs	r3, #1
200022ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
200022bc:	687b      	ldr	r3, [r7, #4]
200022be:	2b00      	cmp	r3, #0
200022c0:	d1f1      	bne.n	200022a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
200022c2:	4b13      	ldr	r3, [pc, #76]	; (20002310 <xTaskResumeAll+0x134>)
200022c4:	2200      	movs	r2, #0
200022c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
200022c8:	4b10      	ldr	r3, [pc, #64]	; (2000230c <xTaskResumeAll+0x130>)
200022ca:	681b      	ldr	r3, [r3, #0]
200022cc:	2b00      	cmp	r3, #0
200022ce:	d009      	beq.n	200022e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
200022d0:	2301      	movs	r3, #1
200022d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
200022d4:	4b0f      	ldr	r3, [pc, #60]	; (20002314 <xTaskResumeAll+0x138>)
200022d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200022da:	601a      	str	r2, [r3, #0]
200022dc:	f3bf 8f4f 	dsb	sy
200022e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
200022e4:	f001 f9de 	bl	200036a4 <vPortExitCritical>

	return xAlreadyYielded;
200022e8:	68bb      	ldr	r3, [r7, #8]
}
200022ea:	4618      	mov	r0, r3
200022ec:	3710      	adds	r7, #16
200022ee:	46bd      	mov	sp, r7
200022f0:	bd80      	pop	{r7, pc}
200022f2:	bf00      	nop
200022f4:	2000ab98 	.word	0x2000ab98
200022f8:	2000ab70 	.word	0x2000ab70
200022fc:	2000ab30 	.word	0x2000ab30
20002300:	2000ab78 	.word	0x2000ab78
20002304:	2000a6a0 	.word	0x2000a6a0
20002308:	2000a69c 	.word	0x2000a69c
2000230c:	2000ab84 	.word	0x2000ab84
20002310:	2000ab80 	.word	0x2000ab80
20002314:	e000ed04 	.word	0xe000ed04

20002318 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002318:	b480      	push	{r7}
2000231a:	b083      	sub	sp, #12
2000231c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
2000231e:	4b05      	ldr	r3, [pc, #20]	; (20002334 <xTaskGetTickCount+0x1c>)
20002320:	681b      	ldr	r3, [r3, #0]
20002322:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
20002324:	687b      	ldr	r3, [r7, #4]
}
20002326:	4618      	mov	r0, r3
20002328:	370c      	adds	r7, #12
2000232a:	46bd      	mov	sp, r7
2000232c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002330:	4770      	bx	lr
20002332:	bf00      	nop
20002334:	2000ab74 	.word	0x2000ab74

20002338 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002338:	b580      	push	{r7, lr}
2000233a:	b086      	sub	sp, #24
2000233c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
2000233e:	2300      	movs	r3, #0
20002340:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002342:	4b4f      	ldr	r3, [pc, #316]	; (20002480 <xTaskIncrementTick+0x148>)
20002344:	681b      	ldr	r3, [r3, #0]
20002346:	2b00      	cmp	r3, #0
20002348:	f040 808f 	bne.w	2000246a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2000234c:	4b4d      	ldr	r3, [pc, #308]	; (20002484 <xTaskIncrementTick+0x14c>)
2000234e:	681b      	ldr	r3, [r3, #0]
20002350:	3301      	adds	r3, #1
20002352:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
20002354:	4a4b      	ldr	r2, [pc, #300]	; (20002484 <xTaskIncrementTick+0x14c>)
20002356:	693b      	ldr	r3, [r7, #16]
20002358:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
2000235a:	693b      	ldr	r3, [r7, #16]
2000235c:	2b00      	cmp	r3, #0
2000235e:	d120      	bne.n	200023a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
20002360:	4b49      	ldr	r3, [pc, #292]	; (20002488 <xTaskIncrementTick+0x150>)
20002362:	681b      	ldr	r3, [r3, #0]
20002364:	681b      	ldr	r3, [r3, #0]
20002366:	2b00      	cmp	r3, #0
20002368:	d00a      	beq.n	20002380 <xTaskIncrementTick+0x48>
	__asm volatile
2000236a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000236e:	f383 8811 	msr	BASEPRI, r3
20002372:	f3bf 8f6f 	isb	sy
20002376:	f3bf 8f4f 	dsb	sy
2000237a:	603b      	str	r3, [r7, #0]
}
2000237c:	bf00      	nop
2000237e:	e7fe      	b.n	2000237e <xTaskIncrementTick+0x46>
20002380:	4b41      	ldr	r3, [pc, #260]	; (20002488 <xTaskIncrementTick+0x150>)
20002382:	681b      	ldr	r3, [r3, #0]
20002384:	60fb      	str	r3, [r7, #12]
20002386:	4b41      	ldr	r3, [pc, #260]	; (2000248c <xTaskIncrementTick+0x154>)
20002388:	681b      	ldr	r3, [r3, #0]
2000238a:	4a3f      	ldr	r2, [pc, #252]	; (20002488 <xTaskIncrementTick+0x150>)
2000238c:	6013      	str	r3, [r2, #0]
2000238e:	4a3f      	ldr	r2, [pc, #252]	; (2000248c <xTaskIncrementTick+0x154>)
20002390:	68fb      	ldr	r3, [r7, #12]
20002392:	6013      	str	r3, [r2, #0]
20002394:	4b3e      	ldr	r3, [pc, #248]	; (20002490 <xTaskIncrementTick+0x158>)
20002396:	681b      	ldr	r3, [r3, #0]
20002398:	3301      	adds	r3, #1
2000239a:	4a3d      	ldr	r2, [pc, #244]	; (20002490 <xTaskIncrementTick+0x158>)
2000239c:	6013      	str	r3, [r2, #0]
2000239e:	f000 fadb 	bl	20002958 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
200023a2:	4b3c      	ldr	r3, [pc, #240]	; (20002494 <xTaskIncrementTick+0x15c>)
200023a4:	681b      	ldr	r3, [r3, #0]
200023a6:	693a      	ldr	r2, [r7, #16]
200023a8:	429a      	cmp	r2, r3
200023aa:	d349      	bcc.n	20002440 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
200023ac:	4b36      	ldr	r3, [pc, #216]	; (20002488 <xTaskIncrementTick+0x150>)
200023ae:	681b      	ldr	r3, [r3, #0]
200023b0:	681b      	ldr	r3, [r3, #0]
200023b2:	2b00      	cmp	r3, #0
200023b4:	d104      	bne.n	200023c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200023b6:	4b37      	ldr	r3, [pc, #220]	; (20002494 <xTaskIncrementTick+0x15c>)
200023b8:	f04f 32ff 	mov.w	r2, #4294967295
200023bc:	601a      	str	r2, [r3, #0]
					break;
200023be:	e03f      	b.n	20002440 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200023c0:	4b31      	ldr	r3, [pc, #196]	; (20002488 <xTaskIncrementTick+0x150>)
200023c2:	681b      	ldr	r3, [r3, #0]
200023c4:	68db      	ldr	r3, [r3, #12]
200023c6:	68db      	ldr	r3, [r3, #12]
200023c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
200023ca:	68bb      	ldr	r3, [r7, #8]
200023cc:	685b      	ldr	r3, [r3, #4]
200023ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
200023d0:	693a      	ldr	r2, [r7, #16]
200023d2:	687b      	ldr	r3, [r7, #4]
200023d4:	429a      	cmp	r2, r3
200023d6:	d203      	bcs.n	200023e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
200023d8:	4a2e      	ldr	r2, [pc, #184]	; (20002494 <xTaskIncrementTick+0x15c>)
200023da:	687b      	ldr	r3, [r7, #4]
200023dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
200023de:	e02f      	b.n	20002440 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200023e0:	68bb      	ldr	r3, [r7, #8]
200023e2:	3304      	adds	r3, #4
200023e4:	4618      	mov	r0, r3
200023e6:	f7fe fc57 	bl	20000c98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
200023ea:	68bb      	ldr	r3, [r7, #8]
200023ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200023ee:	2b00      	cmp	r3, #0
200023f0:	d004      	beq.n	200023fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
200023f2:	68bb      	ldr	r3, [r7, #8]
200023f4:	3318      	adds	r3, #24
200023f6:	4618      	mov	r0, r3
200023f8:	f7fe fc4e 	bl	20000c98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
200023fc:	68bb      	ldr	r3, [r7, #8]
200023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002400:	4b25      	ldr	r3, [pc, #148]	; (20002498 <xTaskIncrementTick+0x160>)
20002402:	681b      	ldr	r3, [r3, #0]
20002404:	429a      	cmp	r2, r3
20002406:	d903      	bls.n	20002410 <xTaskIncrementTick+0xd8>
20002408:	68bb      	ldr	r3, [r7, #8]
2000240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000240c:	4a22      	ldr	r2, [pc, #136]	; (20002498 <xTaskIncrementTick+0x160>)
2000240e:	6013      	str	r3, [r2, #0]
20002410:	68bb      	ldr	r3, [r7, #8]
20002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002414:	4613      	mov	r3, r2
20002416:	009b      	lsls	r3, r3, #2
20002418:	4413      	add	r3, r2
2000241a:	009b      	lsls	r3, r3, #2
2000241c:	4a1f      	ldr	r2, [pc, #124]	; (2000249c <xTaskIncrementTick+0x164>)
2000241e:	441a      	add	r2, r3
20002420:	68bb      	ldr	r3, [r7, #8]
20002422:	3304      	adds	r3, #4
20002424:	4619      	mov	r1, r3
20002426:	4610      	mov	r0, r2
20002428:	f7fe fbd9 	bl	20000bde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2000242c:	68bb      	ldr	r3, [r7, #8]
2000242e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002430:	4b1b      	ldr	r3, [pc, #108]	; (200024a0 <xTaskIncrementTick+0x168>)
20002432:	681b      	ldr	r3, [r3, #0]
20002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002436:	429a      	cmp	r2, r3
20002438:	d3b8      	bcc.n	200023ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
2000243a:	2301      	movs	r3, #1
2000243c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000243e:	e7b5      	b.n	200023ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002440:	4b17      	ldr	r3, [pc, #92]	; (200024a0 <xTaskIncrementTick+0x168>)
20002442:	681b      	ldr	r3, [r3, #0]
20002444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002446:	4915      	ldr	r1, [pc, #84]	; (2000249c <xTaskIncrementTick+0x164>)
20002448:	4613      	mov	r3, r2
2000244a:	009b      	lsls	r3, r3, #2
2000244c:	4413      	add	r3, r2
2000244e:	009b      	lsls	r3, r3, #2
20002450:	440b      	add	r3, r1
20002452:	681b      	ldr	r3, [r3, #0]
20002454:	2b01      	cmp	r3, #1
20002456:	d901      	bls.n	2000245c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
20002458:	2301      	movs	r3, #1
2000245a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
2000245c:	4b11      	ldr	r3, [pc, #68]	; (200024a4 <xTaskIncrementTick+0x16c>)
2000245e:	681b      	ldr	r3, [r3, #0]
20002460:	2b00      	cmp	r3, #0
20002462:	d007      	beq.n	20002474 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
20002464:	2301      	movs	r3, #1
20002466:	617b      	str	r3, [r7, #20]
20002468:	e004      	b.n	20002474 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
2000246a:	4b0f      	ldr	r3, [pc, #60]	; (200024a8 <xTaskIncrementTick+0x170>)
2000246c:	681b      	ldr	r3, [r3, #0]
2000246e:	3301      	adds	r3, #1
20002470:	4a0d      	ldr	r2, [pc, #52]	; (200024a8 <xTaskIncrementTick+0x170>)
20002472:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
20002474:	697b      	ldr	r3, [r7, #20]
}
20002476:	4618      	mov	r0, r3
20002478:	3718      	adds	r7, #24
2000247a:	46bd      	mov	sp, r7
2000247c:	bd80      	pop	{r7, pc}
2000247e:	bf00      	nop
20002480:	2000ab98 	.word	0x2000ab98
20002484:	2000ab74 	.word	0x2000ab74
20002488:	2000ab28 	.word	0x2000ab28
2000248c:	2000ab2c 	.word	0x2000ab2c
20002490:	2000ab88 	.word	0x2000ab88
20002494:	2000ab90 	.word	0x2000ab90
20002498:	2000ab78 	.word	0x2000ab78
2000249c:	2000a6a0 	.word	0x2000a6a0
200024a0:	2000a69c 	.word	0x2000a69c
200024a4:	2000ab84 	.word	0x2000ab84
200024a8:	2000ab80 	.word	0x2000ab80

200024ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
200024ac:	b480      	push	{r7}
200024ae:	b085      	sub	sp, #20
200024b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
200024b2:	4b2a      	ldr	r3, [pc, #168]	; (2000255c <vTaskSwitchContext+0xb0>)
200024b4:	681b      	ldr	r3, [r3, #0]
200024b6:	2b00      	cmp	r3, #0
200024b8:	d003      	beq.n	200024c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
200024ba:	4b29      	ldr	r3, [pc, #164]	; (20002560 <vTaskSwitchContext+0xb4>)
200024bc:	2201      	movs	r2, #1
200024be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
200024c0:	e046      	b.n	20002550 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
200024c2:	4b27      	ldr	r3, [pc, #156]	; (20002560 <vTaskSwitchContext+0xb4>)
200024c4:	2200      	movs	r2, #0
200024c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200024c8:	4b26      	ldr	r3, [pc, #152]	; (20002564 <vTaskSwitchContext+0xb8>)
200024ca:	681b      	ldr	r3, [r3, #0]
200024cc:	60fb      	str	r3, [r7, #12]
200024ce:	e010      	b.n	200024f2 <vTaskSwitchContext+0x46>
200024d0:	68fb      	ldr	r3, [r7, #12]
200024d2:	2b00      	cmp	r3, #0
200024d4:	d10a      	bne.n	200024ec <vTaskSwitchContext+0x40>
	__asm volatile
200024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
200024da:	f383 8811 	msr	BASEPRI, r3
200024de:	f3bf 8f6f 	isb	sy
200024e2:	f3bf 8f4f 	dsb	sy
200024e6:	607b      	str	r3, [r7, #4]
}
200024e8:	bf00      	nop
200024ea:	e7fe      	b.n	200024ea <vTaskSwitchContext+0x3e>
200024ec:	68fb      	ldr	r3, [r7, #12]
200024ee:	3b01      	subs	r3, #1
200024f0:	60fb      	str	r3, [r7, #12]
200024f2:	491d      	ldr	r1, [pc, #116]	; (20002568 <vTaskSwitchContext+0xbc>)
200024f4:	68fa      	ldr	r2, [r7, #12]
200024f6:	4613      	mov	r3, r2
200024f8:	009b      	lsls	r3, r3, #2
200024fa:	4413      	add	r3, r2
200024fc:	009b      	lsls	r3, r3, #2
200024fe:	440b      	add	r3, r1
20002500:	681b      	ldr	r3, [r3, #0]
20002502:	2b00      	cmp	r3, #0
20002504:	d0e4      	beq.n	200024d0 <vTaskSwitchContext+0x24>
20002506:	68fa      	ldr	r2, [r7, #12]
20002508:	4613      	mov	r3, r2
2000250a:	009b      	lsls	r3, r3, #2
2000250c:	4413      	add	r3, r2
2000250e:	009b      	lsls	r3, r3, #2
20002510:	4a15      	ldr	r2, [pc, #84]	; (20002568 <vTaskSwitchContext+0xbc>)
20002512:	4413      	add	r3, r2
20002514:	60bb      	str	r3, [r7, #8]
20002516:	68bb      	ldr	r3, [r7, #8]
20002518:	685b      	ldr	r3, [r3, #4]
2000251a:	685a      	ldr	r2, [r3, #4]
2000251c:	68bb      	ldr	r3, [r7, #8]
2000251e:	605a      	str	r2, [r3, #4]
20002520:	68bb      	ldr	r3, [r7, #8]
20002522:	685a      	ldr	r2, [r3, #4]
20002524:	68bb      	ldr	r3, [r7, #8]
20002526:	3308      	adds	r3, #8
20002528:	429a      	cmp	r2, r3
2000252a:	d104      	bne.n	20002536 <vTaskSwitchContext+0x8a>
2000252c:	68bb      	ldr	r3, [r7, #8]
2000252e:	685b      	ldr	r3, [r3, #4]
20002530:	685a      	ldr	r2, [r3, #4]
20002532:	68bb      	ldr	r3, [r7, #8]
20002534:	605a      	str	r2, [r3, #4]
20002536:	68bb      	ldr	r3, [r7, #8]
20002538:	685b      	ldr	r3, [r3, #4]
2000253a:	68db      	ldr	r3, [r3, #12]
2000253c:	4a0b      	ldr	r2, [pc, #44]	; (2000256c <vTaskSwitchContext+0xc0>)
2000253e:	6013      	str	r3, [r2, #0]
20002540:	4a08      	ldr	r2, [pc, #32]	; (20002564 <vTaskSwitchContext+0xb8>)
20002542:	68fb      	ldr	r3, [r7, #12]
20002544:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
20002546:	4b09      	ldr	r3, [pc, #36]	; (2000256c <vTaskSwitchContext+0xc0>)
20002548:	681b      	ldr	r3, [r3, #0]
2000254a:	3354      	adds	r3, #84	; 0x54
2000254c:	4a08      	ldr	r2, [pc, #32]	; (20002570 <vTaskSwitchContext+0xc4>)
2000254e:	6013      	str	r3, [r2, #0]
}
20002550:	bf00      	nop
20002552:	3714      	adds	r7, #20
20002554:	46bd      	mov	sp, r7
20002556:	f85d 7b04 	ldr.w	r7, [sp], #4
2000255a:	4770      	bx	lr
2000255c:	2000ab98 	.word	0x2000ab98
20002560:	2000ab84 	.word	0x2000ab84
20002564:	2000ab78 	.word	0x2000ab78
20002568:	2000a6a0 	.word	0x2000a6a0
2000256c:	2000a69c 	.word	0x2000a69c
20002570:	20009e60 	.word	0x20009e60

20002574 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002574:	b580      	push	{r7, lr}
20002576:	b084      	sub	sp, #16
20002578:	af00      	add	r7, sp, #0
2000257a:	6078      	str	r0, [r7, #4]
2000257c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
2000257e:	687b      	ldr	r3, [r7, #4]
20002580:	2b00      	cmp	r3, #0
20002582:	d10a      	bne.n	2000259a <vTaskPlaceOnEventList+0x26>
	__asm volatile
20002584:	f04f 0350 	mov.w	r3, #80	; 0x50
20002588:	f383 8811 	msr	BASEPRI, r3
2000258c:	f3bf 8f6f 	isb	sy
20002590:	f3bf 8f4f 	dsb	sy
20002594:	60fb      	str	r3, [r7, #12]
}
20002596:	bf00      	nop
20002598:	e7fe      	b.n	20002598 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2000259a:	4b07      	ldr	r3, [pc, #28]	; (200025b8 <vTaskPlaceOnEventList+0x44>)
2000259c:	681b      	ldr	r3, [r3, #0]
2000259e:	3318      	adds	r3, #24
200025a0:	4619      	mov	r1, r3
200025a2:	6878      	ldr	r0, [r7, #4]
200025a4:	f7fe fb3f 	bl	20000c26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200025a8:	2101      	movs	r1, #1
200025aa:	6838      	ldr	r0, [r7, #0]
200025ac:	f000 fb7e 	bl	20002cac <prvAddCurrentTaskToDelayedList>
}
200025b0:	bf00      	nop
200025b2:	3710      	adds	r7, #16
200025b4:	46bd      	mov	sp, r7
200025b6:	bd80      	pop	{r7, pc}
200025b8:	2000a69c 	.word	0x2000a69c

200025bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
200025bc:	b580      	push	{r7, lr}
200025be:	b086      	sub	sp, #24
200025c0:	af00      	add	r7, sp, #0
200025c2:	60f8      	str	r0, [r7, #12]
200025c4:	60b9      	str	r1, [r7, #8]
200025c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
200025c8:	68fb      	ldr	r3, [r7, #12]
200025ca:	2b00      	cmp	r3, #0
200025cc:	d10a      	bne.n	200025e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
200025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
200025d2:	f383 8811 	msr	BASEPRI, r3
200025d6:	f3bf 8f6f 	isb	sy
200025da:	f3bf 8f4f 	dsb	sy
200025de:	617b      	str	r3, [r7, #20]
}
200025e0:	bf00      	nop
200025e2:	e7fe      	b.n	200025e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
200025e4:	4b0a      	ldr	r3, [pc, #40]	; (20002610 <vTaskPlaceOnEventListRestricted+0x54>)
200025e6:	681b      	ldr	r3, [r3, #0]
200025e8:	3318      	adds	r3, #24
200025ea:	4619      	mov	r1, r3
200025ec:	68f8      	ldr	r0, [r7, #12]
200025ee:	f7fe faf6 	bl	20000bde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
200025f2:	687b      	ldr	r3, [r7, #4]
200025f4:	2b00      	cmp	r3, #0
200025f6:	d002      	beq.n	200025fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
200025f8:	f04f 33ff 	mov.w	r3, #4294967295
200025fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
200025fe:	6879      	ldr	r1, [r7, #4]
20002600:	68b8      	ldr	r0, [r7, #8]
20002602:	f000 fb53 	bl	20002cac <prvAddCurrentTaskToDelayedList>
	}
20002606:	bf00      	nop
20002608:	3718      	adds	r7, #24
2000260a:	46bd      	mov	sp, r7
2000260c:	bd80      	pop	{r7, pc}
2000260e:	bf00      	nop
20002610:	2000a69c 	.word	0x2000a69c

20002614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002614:	b580      	push	{r7, lr}
20002616:	b086      	sub	sp, #24
20002618:	af00      	add	r7, sp, #0
2000261a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
2000261c:	687b      	ldr	r3, [r7, #4]
2000261e:	68db      	ldr	r3, [r3, #12]
20002620:	68db      	ldr	r3, [r3, #12]
20002622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
20002624:	693b      	ldr	r3, [r7, #16]
20002626:	2b00      	cmp	r3, #0
20002628:	d10a      	bne.n	20002640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
2000262a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000262e:	f383 8811 	msr	BASEPRI, r3
20002632:	f3bf 8f6f 	isb	sy
20002636:	f3bf 8f4f 	dsb	sy
2000263a:	60fb      	str	r3, [r7, #12]
}
2000263c:	bf00      	nop
2000263e:	e7fe      	b.n	2000263e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002640:	693b      	ldr	r3, [r7, #16]
20002642:	3318      	adds	r3, #24
20002644:	4618      	mov	r0, r3
20002646:	f7fe fb27 	bl	20000c98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000264a:	4b1e      	ldr	r3, [pc, #120]	; (200026c4 <xTaskRemoveFromEventList+0xb0>)
2000264c:	681b      	ldr	r3, [r3, #0]
2000264e:	2b00      	cmp	r3, #0
20002650:	d11d      	bne.n	2000268e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002652:	693b      	ldr	r3, [r7, #16]
20002654:	3304      	adds	r3, #4
20002656:	4618      	mov	r0, r3
20002658:	f7fe fb1e 	bl	20000c98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
2000265c:	693b      	ldr	r3, [r7, #16]
2000265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002660:	4b19      	ldr	r3, [pc, #100]	; (200026c8 <xTaskRemoveFromEventList+0xb4>)
20002662:	681b      	ldr	r3, [r3, #0]
20002664:	429a      	cmp	r2, r3
20002666:	d903      	bls.n	20002670 <xTaskRemoveFromEventList+0x5c>
20002668:	693b      	ldr	r3, [r7, #16]
2000266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000266c:	4a16      	ldr	r2, [pc, #88]	; (200026c8 <xTaskRemoveFromEventList+0xb4>)
2000266e:	6013      	str	r3, [r2, #0]
20002670:	693b      	ldr	r3, [r7, #16]
20002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002674:	4613      	mov	r3, r2
20002676:	009b      	lsls	r3, r3, #2
20002678:	4413      	add	r3, r2
2000267a:	009b      	lsls	r3, r3, #2
2000267c:	4a13      	ldr	r2, [pc, #76]	; (200026cc <xTaskRemoveFromEventList+0xb8>)
2000267e:	441a      	add	r2, r3
20002680:	693b      	ldr	r3, [r7, #16]
20002682:	3304      	adds	r3, #4
20002684:	4619      	mov	r1, r3
20002686:	4610      	mov	r0, r2
20002688:	f7fe faa9 	bl	20000bde <vListInsertEnd>
2000268c:	e005      	b.n	2000269a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2000268e:	693b      	ldr	r3, [r7, #16]
20002690:	3318      	adds	r3, #24
20002692:	4619      	mov	r1, r3
20002694:	480e      	ldr	r0, [pc, #56]	; (200026d0 <xTaskRemoveFromEventList+0xbc>)
20002696:	f7fe faa2 	bl	20000bde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2000269a:	693b      	ldr	r3, [r7, #16]
2000269c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000269e:	4b0d      	ldr	r3, [pc, #52]	; (200026d4 <xTaskRemoveFromEventList+0xc0>)
200026a0:	681b      	ldr	r3, [r3, #0]
200026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200026a4:	429a      	cmp	r2, r3
200026a6:	d905      	bls.n	200026b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
200026a8:	2301      	movs	r3, #1
200026aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
200026ac:	4b0a      	ldr	r3, [pc, #40]	; (200026d8 <xTaskRemoveFromEventList+0xc4>)
200026ae:	2201      	movs	r2, #1
200026b0:	601a      	str	r2, [r3, #0]
200026b2:	e001      	b.n	200026b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
200026b4:	2300      	movs	r3, #0
200026b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
200026b8:	697b      	ldr	r3, [r7, #20]
}
200026ba:	4618      	mov	r0, r3
200026bc:	3718      	adds	r7, #24
200026be:	46bd      	mov	sp, r7
200026c0:	bd80      	pop	{r7, pc}
200026c2:	bf00      	nop
200026c4:	2000ab98 	.word	0x2000ab98
200026c8:	2000ab78 	.word	0x2000ab78
200026cc:	2000a6a0 	.word	0x2000a6a0
200026d0:	2000ab30 	.word	0x2000ab30
200026d4:	2000a69c 	.word	0x2000a69c
200026d8:	2000ab84 	.word	0x2000ab84

200026dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
200026dc:	b480      	push	{r7}
200026de:	b083      	sub	sp, #12
200026e0:	af00      	add	r7, sp, #0
200026e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
200026e4:	4b06      	ldr	r3, [pc, #24]	; (20002700 <vTaskInternalSetTimeOutState+0x24>)
200026e6:	681a      	ldr	r2, [r3, #0]
200026e8:	687b      	ldr	r3, [r7, #4]
200026ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
200026ec:	4b05      	ldr	r3, [pc, #20]	; (20002704 <vTaskInternalSetTimeOutState+0x28>)
200026ee:	681a      	ldr	r2, [r3, #0]
200026f0:	687b      	ldr	r3, [r7, #4]
200026f2:	605a      	str	r2, [r3, #4]
}
200026f4:	bf00      	nop
200026f6:	370c      	adds	r7, #12
200026f8:	46bd      	mov	sp, r7
200026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200026fe:	4770      	bx	lr
20002700:	2000ab88 	.word	0x2000ab88
20002704:	2000ab74 	.word	0x2000ab74

20002708 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002708:	b580      	push	{r7, lr}
2000270a:	b088      	sub	sp, #32
2000270c:	af00      	add	r7, sp, #0
2000270e:	6078      	str	r0, [r7, #4]
20002710:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002712:	687b      	ldr	r3, [r7, #4]
20002714:	2b00      	cmp	r3, #0
20002716:	d10a      	bne.n	2000272e <xTaskCheckForTimeOut+0x26>
	__asm volatile
20002718:	f04f 0350 	mov.w	r3, #80	; 0x50
2000271c:	f383 8811 	msr	BASEPRI, r3
20002720:	f3bf 8f6f 	isb	sy
20002724:	f3bf 8f4f 	dsb	sy
20002728:	613b      	str	r3, [r7, #16]
}
2000272a:	bf00      	nop
2000272c:	e7fe      	b.n	2000272c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
2000272e:	683b      	ldr	r3, [r7, #0]
20002730:	2b00      	cmp	r3, #0
20002732:	d10a      	bne.n	2000274a <xTaskCheckForTimeOut+0x42>
	__asm volatile
20002734:	f04f 0350 	mov.w	r3, #80	; 0x50
20002738:	f383 8811 	msr	BASEPRI, r3
2000273c:	f3bf 8f6f 	isb	sy
20002740:	f3bf 8f4f 	dsb	sy
20002744:	60fb      	str	r3, [r7, #12]
}
20002746:	bf00      	nop
20002748:	e7fe      	b.n	20002748 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
2000274a:	f000 ff7b 	bl	20003644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
2000274e:	4b1d      	ldr	r3, [pc, #116]	; (200027c4 <xTaskCheckForTimeOut+0xbc>)
20002750:	681b      	ldr	r3, [r3, #0]
20002752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
20002754:	687b      	ldr	r3, [r7, #4]
20002756:	685b      	ldr	r3, [r3, #4]
20002758:	69ba      	ldr	r2, [r7, #24]
2000275a:	1ad3      	subs	r3, r2, r3
2000275c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
2000275e:	683b      	ldr	r3, [r7, #0]
20002760:	681b      	ldr	r3, [r3, #0]
20002762:	f1b3 3fff 	cmp.w	r3, #4294967295
20002766:	d102      	bne.n	2000276e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002768:	2300      	movs	r3, #0
2000276a:	61fb      	str	r3, [r7, #28]
2000276c:	e023      	b.n	200027b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
2000276e:	687b      	ldr	r3, [r7, #4]
20002770:	681a      	ldr	r2, [r3, #0]
20002772:	4b15      	ldr	r3, [pc, #84]	; (200027c8 <xTaskCheckForTimeOut+0xc0>)
20002774:	681b      	ldr	r3, [r3, #0]
20002776:	429a      	cmp	r2, r3
20002778:	d007      	beq.n	2000278a <xTaskCheckForTimeOut+0x82>
2000277a:	687b      	ldr	r3, [r7, #4]
2000277c:	685b      	ldr	r3, [r3, #4]
2000277e:	69ba      	ldr	r2, [r7, #24]
20002780:	429a      	cmp	r2, r3
20002782:	d302      	bcc.n	2000278a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002784:	2301      	movs	r3, #1
20002786:	61fb      	str	r3, [r7, #28]
20002788:	e015      	b.n	200027b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
2000278a:	683b      	ldr	r3, [r7, #0]
2000278c:	681b      	ldr	r3, [r3, #0]
2000278e:	697a      	ldr	r2, [r7, #20]
20002790:	429a      	cmp	r2, r3
20002792:	d20b      	bcs.n	200027ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
20002794:	683b      	ldr	r3, [r7, #0]
20002796:	681a      	ldr	r2, [r3, #0]
20002798:	697b      	ldr	r3, [r7, #20]
2000279a:	1ad2      	subs	r2, r2, r3
2000279c:	683b      	ldr	r3, [r7, #0]
2000279e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
200027a0:	6878      	ldr	r0, [r7, #4]
200027a2:	f7ff ff9b 	bl	200026dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
200027a6:	2300      	movs	r3, #0
200027a8:	61fb      	str	r3, [r7, #28]
200027aa:	e004      	b.n	200027b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
200027ac:	683b      	ldr	r3, [r7, #0]
200027ae:	2200      	movs	r2, #0
200027b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
200027b2:	2301      	movs	r3, #1
200027b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
200027b6:	f000 ff75 	bl	200036a4 <vPortExitCritical>

	return xReturn;
200027ba:	69fb      	ldr	r3, [r7, #28]
}
200027bc:	4618      	mov	r0, r3
200027be:	3720      	adds	r7, #32
200027c0:	46bd      	mov	sp, r7
200027c2:	bd80      	pop	{r7, pc}
200027c4:	2000ab74 	.word	0x2000ab74
200027c8:	2000ab88 	.word	0x2000ab88

200027cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
200027cc:	b480      	push	{r7}
200027ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
200027d0:	4b03      	ldr	r3, [pc, #12]	; (200027e0 <vTaskMissedYield+0x14>)
200027d2:	2201      	movs	r2, #1
200027d4:	601a      	str	r2, [r3, #0]
}
200027d6:	bf00      	nop
200027d8:	46bd      	mov	sp, r7
200027da:	f85d 7b04 	ldr.w	r7, [sp], #4
200027de:	4770      	bx	lr
200027e0:	2000ab84 	.word	0x2000ab84

200027e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
200027e4:	b580      	push	{r7, lr}
200027e6:	b082      	sub	sp, #8
200027e8:	af00      	add	r7, sp, #0
200027ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
200027ec:	f000 f852 	bl	20002894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
200027f0:	4b06      	ldr	r3, [pc, #24]	; (2000280c <prvIdleTask+0x28>)
200027f2:	681b      	ldr	r3, [r3, #0]
200027f4:	2b01      	cmp	r3, #1
200027f6:	d9f9      	bls.n	200027ec <prvIdleTask+0x8>
			{
				taskYIELD();
200027f8:	4b05      	ldr	r3, [pc, #20]	; (20002810 <prvIdleTask+0x2c>)
200027fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200027fe:	601a      	str	r2, [r3, #0]
20002800:	f3bf 8f4f 	dsb	sy
20002804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
20002808:	e7f0      	b.n	200027ec <prvIdleTask+0x8>
2000280a:	bf00      	nop
2000280c:	2000a6a0 	.word	0x2000a6a0
20002810:	e000ed04 	.word	0xe000ed04

20002814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002814:	b580      	push	{r7, lr}
20002816:	b082      	sub	sp, #8
20002818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
2000281a:	2300      	movs	r3, #0
2000281c:	607b      	str	r3, [r7, #4]
2000281e:	e00c      	b.n	2000283a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002820:	687a      	ldr	r2, [r7, #4]
20002822:	4613      	mov	r3, r2
20002824:	009b      	lsls	r3, r3, #2
20002826:	4413      	add	r3, r2
20002828:	009b      	lsls	r3, r3, #2
2000282a:	4a12      	ldr	r2, [pc, #72]	; (20002874 <prvInitialiseTaskLists+0x60>)
2000282c:	4413      	add	r3, r2
2000282e:	4618      	mov	r0, r3
20002830:	f7fe f9a8 	bl	20000b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002834:	687b      	ldr	r3, [r7, #4]
20002836:	3301      	adds	r3, #1
20002838:	607b      	str	r3, [r7, #4]
2000283a:	687b      	ldr	r3, [r7, #4]
2000283c:	2b37      	cmp	r3, #55	; 0x37
2000283e:	d9ef      	bls.n	20002820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
20002840:	480d      	ldr	r0, [pc, #52]	; (20002878 <prvInitialiseTaskLists+0x64>)
20002842:	f7fe f99f 	bl	20000b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002846:	480d      	ldr	r0, [pc, #52]	; (2000287c <prvInitialiseTaskLists+0x68>)
20002848:	f7fe f99c 	bl	20000b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
2000284c:	480c      	ldr	r0, [pc, #48]	; (20002880 <prvInitialiseTaskLists+0x6c>)
2000284e:	f7fe f999 	bl	20000b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002852:	480c      	ldr	r0, [pc, #48]	; (20002884 <prvInitialiseTaskLists+0x70>)
20002854:	f7fe f996 	bl	20000b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002858:	480b      	ldr	r0, [pc, #44]	; (20002888 <prvInitialiseTaskLists+0x74>)
2000285a:	f7fe f993 	bl	20000b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
2000285e:	4b0b      	ldr	r3, [pc, #44]	; (2000288c <prvInitialiseTaskLists+0x78>)
20002860:	4a05      	ldr	r2, [pc, #20]	; (20002878 <prvInitialiseTaskLists+0x64>)
20002862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002864:	4b0a      	ldr	r3, [pc, #40]	; (20002890 <prvInitialiseTaskLists+0x7c>)
20002866:	4a05      	ldr	r2, [pc, #20]	; (2000287c <prvInitialiseTaskLists+0x68>)
20002868:	601a      	str	r2, [r3, #0]
}
2000286a:	bf00      	nop
2000286c:	3708      	adds	r7, #8
2000286e:	46bd      	mov	sp, r7
20002870:	bd80      	pop	{r7, pc}
20002872:	bf00      	nop
20002874:	2000a6a0 	.word	0x2000a6a0
20002878:	2000ab00 	.word	0x2000ab00
2000287c:	2000ab14 	.word	0x2000ab14
20002880:	2000ab30 	.word	0x2000ab30
20002884:	2000ab44 	.word	0x2000ab44
20002888:	2000ab5c 	.word	0x2000ab5c
2000288c:	2000ab28 	.word	0x2000ab28
20002890:	2000ab2c 	.word	0x2000ab2c

20002894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002894:	b580      	push	{r7, lr}
20002896:	b082      	sub	sp, #8
20002898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
2000289a:	e019      	b.n	200028d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
2000289c:	f000 fed2 	bl	20003644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200028a0:	4b10      	ldr	r3, [pc, #64]	; (200028e4 <prvCheckTasksWaitingTermination+0x50>)
200028a2:	68db      	ldr	r3, [r3, #12]
200028a4:	68db      	ldr	r3, [r3, #12]
200028a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200028a8:	687b      	ldr	r3, [r7, #4]
200028aa:	3304      	adds	r3, #4
200028ac:	4618      	mov	r0, r3
200028ae:	f7fe f9f3 	bl	20000c98 <uxListRemove>
				--uxCurrentNumberOfTasks;
200028b2:	4b0d      	ldr	r3, [pc, #52]	; (200028e8 <prvCheckTasksWaitingTermination+0x54>)
200028b4:	681b      	ldr	r3, [r3, #0]
200028b6:	3b01      	subs	r3, #1
200028b8:	4a0b      	ldr	r2, [pc, #44]	; (200028e8 <prvCheckTasksWaitingTermination+0x54>)
200028ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
200028bc:	4b0b      	ldr	r3, [pc, #44]	; (200028ec <prvCheckTasksWaitingTermination+0x58>)
200028be:	681b      	ldr	r3, [r3, #0]
200028c0:	3b01      	subs	r3, #1
200028c2:	4a0a      	ldr	r2, [pc, #40]	; (200028ec <prvCheckTasksWaitingTermination+0x58>)
200028c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
200028c6:	f000 feed 	bl	200036a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
200028ca:	6878      	ldr	r0, [r7, #4]
200028cc:	f000 f810 	bl	200028f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
200028d0:	4b06      	ldr	r3, [pc, #24]	; (200028ec <prvCheckTasksWaitingTermination+0x58>)
200028d2:	681b      	ldr	r3, [r3, #0]
200028d4:	2b00      	cmp	r3, #0
200028d6:	d1e1      	bne.n	2000289c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
200028d8:	bf00      	nop
200028da:	bf00      	nop
200028dc:	3708      	adds	r7, #8
200028de:	46bd      	mov	sp, r7
200028e0:	bd80      	pop	{r7, pc}
200028e2:	bf00      	nop
200028e4:	2000ab44 	.word	0x2000ab44
200028e8:	2000ab70 	.word	0x2000ab70
200028ec:	2000ab58 	.word	0x2000ab58

200028f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
200028f0:	b580      	push	{r7, lr}
200028f2:	b084      	sub	sp, #16
200028f4:	af00      	add	r7, sp, #0
200028f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
200028f8:	687b      	ldr	r3, [r7, #4]
200028fa:	3354      	adds	r3, #84	; 0x54
200028fc:	4618      	mov	r0, r3
200028fe:	f003 fa9f 	bl	20005e40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
20002902:	687b      	ldr	r3, [r7, #4]
20002904:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002908:	2b00      	cmp	r3, #0
2000290a:	d108      	bne.n	2000291e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
2000290c:	687b      	ldr	r3, [r7, #4]
2000290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002910:	4618      	mov	r0, r3
20002912:	f001 f885 	bl	20003a20 <vPortFree>
				vPortFree( pxTCB );
20002916:	6878      	ldr	r0, [r7, #4]
20002918:	f001 f882 	bl	20003a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
2000291c:	e018      	b.n	20002950 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
2000291e:	687b      	ldr	r3, [r7, #4]
20002920:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002924:	2b01      	cmp	r3, #1
20002926:	d103      	bne.n	20002930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
20002928:	6878      	ldr	r0, [r7, #4]
2000292a:	f001 f879 	bl	20003a20 <vPortFree>
	}
2000292e:	e00f      	b.n	20002950 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
20002930:	687b      	ldr	r3, [r7, #4]
20002932:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002936:	2b02      	cmp	r3, #2
20002938:	d00a      	beq.n	20002950 <prvDeleteTCB+0x60>
	__asm volatile
2000293a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000293e:	f383 8811 	msr	BASEPRI, r3
20002942:	f3bf 8f6f 	isb	sy
20002946:	f3bf 8f4f 	dsb	sy
2000294a:	60fb      	str	r3, [r7, #12]
}
2000294c:	bf00      	nop
2000294e:	e7fe      	b.n	2000294e <prvDeleteTCB+0x5e>
	}
20002950:	bf00      	nop
20002952:	3710      	adds	r7, #16
20002954:	46bd      	mov	sp, r7
20002956:	bd80      	pop	{r7, pc}

20002958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002958:	b480      	push	{r7}
2000295a:	b083      	sub	sp, #12
2000295c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000295e:	4b0c      	ldr	r3, [pc, #48]	; (20002990 <prvResetNextTaskUnblockTime+0x38>)
20002960:	681b      	ldr	r3, [r3, #0]
20002962:	681b      	ldr	r3, [r3, #0]
20002964:	2b00      	cmp	r3, #0
20002966:	d104      	bne.n	20002972 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002968:	4b0a      	ldr	r3, [pc, #40]	; (20002994 <prvResetNextTaskUnblockTime+0x3c>)
2000296a:	f04f 32ff 	mov.w	r2, #4294967295
2000296e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
20002970:	e008      	b.n	20002984 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002972:	4b07      	ldr	r3, [pc, #28]	; (20002990 <prvResetNextTaskUnblockTime+0x38>)
20002974:	681b      	ldr	r3, [r3, #0]
20002976:	68db      	ldr	r3, [r3, #12]
20002978:	68db      	ldr	r3, [r3, #12]
2000297a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
2000297c:	687b      	ldr	r3, [r7, #4]
2000297e:	685b      	ldr	r3, [r3, #4]
20002980:	4a04      	ldr	r2, [pc, #16]	; (20002994 <prvResetNextTaskUnblockTime+0x3c>)
20002982:	6013      	str	r3, [r2, #0]
}
20002984:	bf00      	nop
20002986:	370c      	adds	r7, #12
20002988:	46bd      	mov	sp, r7
2000298a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000298e:	4770      	bx	lr
20002990:	2000ab28 	.word	0x2000ab28
20002994:	2000ab90 	.word	0x2000ab90

20002998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20002998:	b480      	push	{r7}
2000299a:	b083      	sub	sp, #12
2000299c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
2000299e:	4b0b      	ldr	r3, [pc, #44]	; (200029cc <xTaskGetSchedulerState+0x34>)
200029a0:	681b      	ldr	r3, [r3, #0]
200029a2:	2b00      	cmp	r3, #0
200029a4:	d102      	bne.n	200029ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
200029a6:	2301      	movs	r3, #1
200029a8:	607b      	str	r3, [r7, #4]
200029aa:	e008      	b.n	200029be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200029ac:	4b08      	ldr	r3, [pc, #32]	; (200029d0 <xTaskGetSchedulerState+0x38>)
200029ae:	681b      	ldr	r3, [r3, #0]
200029b0:	2b00      	cmp	r3, #0
200029b2:	d102      	bne.n	200029ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
200029b4:	2302      	movs	r3, #2
200029b6:	607b      	str	r3, [r7, #4]
200029b8:	e001      	b.n	200029be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
200029ba:	2300      	movs	r3, #0
200029bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
200029be:	687b      	ldr	r3, [r7, #4]
	}
200029c0:	4618      	mov	r0, r3
200029c2:	370c      	adds	r7, #12
200029c4:	46bd      	mov	sp, r7
200029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200029ca:	4770      	bx	lr
200029cc:	2000ab7c 	.word	0x2000ab7c
200029d0:	2000ab98 	.word	0x2000ab98

200029d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
200029d4:	b580      	push	{r7, lr}
200029d6:	b084      	sub	sp, #16
200029d8:	af00      	add	r7, sp, #0
200029da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
200029dc:	687b      	ldr	r3, [r7, #4]
200029de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
200029e0:	2300      	movs	r3, #0
200029e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
200029e4:	687b      	ldr	r3, [r7, #4]
200029e6:	2b00      	cmp	r3, #0
200029e8:	d051      	beq.n	20002a8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
200029ea:	68bb      	ldr	r3, [r7, #8]
200029ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200029ee:	4b2a      	ldr	r3, [pc, #168]	; (20002a98 <xTaskPriorityInherit+0xc4>)
200029f0:	681b      	ldr	r3, [r3, #0]
200029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200029f4:	429a      	cmp	r2, r3
200029f6:	d241      	bcs.n	20002a7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
200029f8:	68bb      	ldr	r3, [r7, #8]
200029fa:	699b      	ldr	r3, [r3, #24]
200029fc:	2b00      	cmp	r3, #0
200029fe:	db06      	blt.n	20002a0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002a00:	4b25      	ldr	r3, [pc, #148]	; (20002a98 <xTaskPriorityInherit+0xc4>)
20002a02:	681b      	ldr	r3, [r3, #0]
20002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20002a0a:	68bb      	ldr	r3, [r7, #8]
20002a0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
20002a0e:	68bb      	ldr	r3, [r7, #8]
20002a10:	6959      	ldr	r1, [r3, #20]
20002a12:	68bb      	ldr	r3, [r7, #8]
20002a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a16:	4613      	mov	r3, r2
20002a18:	009b      	lsls	r3, r3, #2
20002a1a:	4413      	add	r3, r2
20002a1c:	009b      	lsls	r3, r3, #2
20002a1e:	4a1f      	ldr	r2, [pc, #124]	; (20002a9c <xTaskPriorityInherit+0xc8>)
20002a20:	4413      	add	r3, r2
20002a22:	4299      	cmp	r1, r3
20002a24:	d122      	bne.n	20002a6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002a26:	68bb      	ldr	r3, [r7, #8]
20002a28:	3304      	adds	r3, #4
20002a2a:	4618      	mov	r0, r3
20002a2c:	f7fe f934 	bl	20000c98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
20002a30:	4b19      	ldr	r3, [pc, #100]	; (20002a98 <xTaskPriorityInherit+0xc4>)
20002a32:	681b      	ldr	r3, [r3, #0]
20002a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a36:	68bb      	ldr	r3, [r7, #8]
20002a38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
20002a3a:	68bb      	ldr	r3, [r7, #8]
20002a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a3e:	4b18      	ldr	r3, [pc, #96]	; (20002aa0 <xTaskPriorityInherit+0xcc>)
20002a40:	681b      	ldr	r3, [r3, #0]
20002a42:	429a      	cmp	r2, r3
20002a44:	d903      	bls.n	20002a4e <xTaskPriorityInherit+0x7a>
20002a46:	68bb      	ldr	r3, [r7, #8]
20002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a4a:	4a15      	ldr	r2, [pc, #84]	; (20002aa0 <xTaskPriorityInherit+0xcc>)
20002a4c:	6013      	str	r3, [r2, #0]
20002a4e:	68bb      	ldr	r3, [r7, #8]
20002a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a52:	4613      	mov	r3, r2
20002a54:	009b      	lsls	r3, r3, #2
20002a56:	4413      	add	r3, r2
20002a58:	009b      	lsls	r3, r3, #2
20002a5a:	4a10      	ldr	r2, [pc, #64]	; (20002a9c <xTaskPriorityInherit+0xc8>)
20002a5c:	441a      	add	r2, r3
20002a5e:	68bb      	ldr	r3, [r7, #8]
20002a60:	3304      	adds	r3, #4
20002a62:	4619      	mov	r1, r3
20002a64:	4610      	mov	r0, r2
20002a66:	f7fe f8ba 	bl	20000bde <vListInsertEnd>
20002a6a:	e004      	b.n	20002a76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
20002a6c:	4b0a      	ldr	r3, [pc, #40]	; (20002a98 <xTaskPriorityInherit+0xc4>)
20002a6e:	681b      	ldr	r3, [r3, #0]
20002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a72:	68bb      	ldr	r3, [r7, #8]
20002a74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
20002a76:	2301      	movs	r3, #1
20002a78:	60fb      	str	r3, [r7, #12]
20002a7a:	e008      	b.n	20002a8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
20002a7c:	68bb      	ldr	r3, [r7, #8]
20002a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002a80:	4b05      	ldr	r3, [pc, #20]	; (20002a98 <xTaskPriorityInherit+0xc4>)
20002a82:	681b      	ldr	r3, [r3, #0]
20002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a86:	429a      	cmp	r2, r3
20002a88:	d201      	bcs.n	20002a8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
20002a8a:	2301      	movs	r3, #1
20002a8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002a8e:	68fb      	ldr	r3, [r7, #12]
	}
20002a90:	4618      	mov	r0, r3
20002a92:	3710      	adds	r7, #16
20002a94:	46bd      	mov	sp, r7
20002a96:	bd80      	pop	{r7, pc}
20002a98:	2000a69c 	.word	0x2000a69c
20002a9c:	2000a6a0 	.word	0x2000a6a0
20002aa0:	2000ab78 	.word	0x2000ab78

20002aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20002aa4:	b580      	push	{r7, lr}
20002aa6:	b086      	sub	sp, #24
20002aa8:	af00      	add	r7, sp, #0
20002aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
20002aac:	687b      	ldr	r3, [r7, #4]
20002aae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
20002ab0:	2300      	movs	r3, #0
20002ab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20002ab4:	687b      	ldr	r3, [r7, #4]
20002ab6:	2b00      	cmp	r3, #0
20002ab8:	d056      	beq.n	20002b68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20002aba:	4b2e      	ldr	r3, [pc, #184]	; (20002b74 <xTaskPriorityDisinherit+0xd0>)
20002abc:	681b      	ldr	r3, [r3, #0]
20002abe:	693a      	ldr	r2, [r7, #16]
20002ac0:	429a      	cmp	r2, r3
20002ac2:	d00a      	beq.n	20002ada <xTaskPriorityDisinherit+0x36>
	__asm volatile
20002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
20002ac8:	f383 8811 	msr	BASEPRI, r3
20002acc:	f3bf 8f6f 	isb	sy
20002ad0:	f3bf 8f4f 	dsb	sy
20002ad4:	60fb      	str	r3, [r7, #12]
}
20002ad6:	bf00      	nop
20002ad8:	e7fe      	b.n	20002ad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
20002ada:	693b      	ldr	r3, [r7, #16]
20002adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002ade:	2b00      	cmp	r3, #0
20002ae0:	d10a      	bne.n	20002af8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
20002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
20002ae6:	f383 8811 	msr	BASEPRI, r3
20002aea:	f3bf 8f6f 	isb	sy
20002aee:	f3bf 8f4f 	dsb	sy
20002af2:	60bb      	str	r3, [r7, #8]
}
20002af4:	bf00      	nop
20002af6:	e7fe      	b.n	20002af6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
20002af8:	693b      	ldr	r3, [r7, #16]
20002afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002afc:	1e5a      	subs	r2, r3, #1
20002afe:	693b      	ldr	r3, [r7, #16]
20002b00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20002b02:	693b      	ldr	r3, [r7, #16]
20002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b06:	693b      	ldr	r3, [r7, #16]
20002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002b0a:	429a      	cmp	r2, r3
20002b0c:	d02c      	beq.n	20002b68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
20002b0e:	693b      	ldr	r3, [r7, #16]
20002b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002b12:	2b00      	cmp	r3, #0
20002b14:	d128      	bne.n	20002b68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002b16:	693b      	ldr	r3, [r7, #16]
20002b18:	3304      	adds	r3, #4
20002b1a:	4618      	mov	r0, r3
20002b1c:	f7fe f8bc 	bl	20000c98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20002b20:	693b      	ldr	r3, [r7, #16]
20002b22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002b24:	693b      	ldr	r3, [r7, #16]
20002b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002b28:	693b      	ldr	r3, [r7, #16]
20002b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002b2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20002b30:	693b      	ldr	r3, [r7, #16]
20002b32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20002b34:	693b      	ldr	r3, [r7, #16]
20002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b38:	4b0f      	ldr	r3, [pc, #60]	; (20002b78 <xTaskPriorityDisinherit+0xd4>)
20002b3a:	681b      	ldr	r3, [r3, #0]
20002b3c:	429a      	cmp	r2, r3
20002b3e:	d903      	bls.n	20002b48 <xTaskPriorityDisinherit+0xa4>
20002b40:	693b      	ldr	r3, [r7, #16]
20002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002b44:	4a0c      	ldr	r2, [pc, #48]	; (20002b78 <xTaskPriorityDisinherit+0xd4>)
20002b46:	6013      	str	r3, [r2, #0]
20002b48:	693b      	ldr	r3, [r7, #16]
20002b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002b4c:	4613      	mov	r3, r2
20002b4e:	009b      	lsls	r3, r3, #2
20002b50:	4413      	add	r3, r2
20002b52:	009b      	lsls	r3, r3, #2
20002b54:	4a09      	ldr	r2, [pc, #36]	; (20002b7c <xTaskPriorityDisinherit+0xd8>)
20002b56:	441a      	add	r2, r3
20002b58:	693b      	ldr	r3, [r7, #16]
20002b5a:	3304      	adds	r3, #4
20002b5c:	4619      	mov	r1, r3
20002b5e:	4610      	mov	r0, r2
20002b60:	f7fe f83d 	bl	20000bde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20002b64:	2301      	movs	r3, #1
20002b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002b68:	697b      	ldr	r3, [r7, #20]
	}
20002b6a:	4618      	mov	r0, r3
20002b6c:	3718      	adds	r7, #24
20002b6e:	46bd      	mov	sp, r7
20002b70:	bd80      	pop	{r7, pc}
20002b72:	bf00      	nop
20002b74:	2000a69c 	.word	0x2000a69c
20002b78:	2000ab78 	.word	0x2000ab78
20002b7c:	2000a6a0 	.word	0x2000a6a0

20002b80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
20002b80:	b580      	push	{r7, lr}
20002b82:	b088      	sub	sp, #32
20002b84:	af00      	add	r7, sp, #0
20002b86:	6078      	str	r0, [r7, #4]
20002b88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
20002b8a:	687b      	ldr	r3, [r7, #4]
20002b8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
20002b8e:	2301      	movs	r3, #1
20002b90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20002b92:	687b      	ldr	r3, [r7, #4]
20002b94:	2b00      	cmp	r3, #0
20002b96:	d06a      	beq.n	20002c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
20002b98:	69bb      	ldr	r3, [r7, #24]
20002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002b9c:	2b00      	cmp	r3, #0
20002b9e:	d10a      	bne.n	20002bb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
20002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
20002ba4:	f383 8811 	msr	BASEPRI, r3
20002ba8:	f3bf 8f6f 	isb	sy
20002bac:	f3bf 8f4f 	dsb	sy
20002bb0:	60fb      	str	r3, [r7, #12]
}
20002bb2:	bf00      	nop
20002bb4:	e7fe      	b.n	20002bb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
20002bb6:	69bb      	ldr	r3, [r7, #24]
20002bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002bba:	683a      	ldr	r2, [r7, #0]
20002bbc:	429a      	cmp	r2, r3
20002bbe:	d902      	bls.n	20002bc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
20002bc0:	683b      	ldr	r3, [r7, #0]
20002bc2:	61fb      	str	r3, [r7, #28]
20002bc4:	e002      	b.n	20002bcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
20002bc6:	69bb      	ldr	r3, [r7, #24]
20002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002bca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
20002bcc:	69bb      	ldr	r3, [r7, #24]
20002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002bd0:	69fa      	ldr	r2, [r7, #28]
20002bd2:	429a      	cmp	r2, r3
20002bd4:	d04b      	beq.n	20002c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
20002bd6:	69bb      	ldr	r3, [r7, #24]
20002bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002bda:	697a      	ldr	r2, [r7, #20]
20002bdc:	429a      	cmp	r2, r3
20002bde:	d146      	bne.n	20002c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
20002be0:	4b25      	ldr	r3, [pc, #148]	; (20002c78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
20002be2:	681b      	ldr	r3, [r3, #0]
20002be4:	69ba      	ldr	r2, [r7, #24]
20002be6:	429a      	cmp	r2, r3
20002be8:	d10a      	bne.n	20002c00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
20002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
20002bee:	f383 8811 	msr	BASEPRI, r3
20002bf2:	f3bf 8f6f 	isb	sy
20002bf6:	f3bf 8f4f 	dsb	sy
20002bfa:	60bb      	str	r3, [r7, #8]
}
20002bfc:	bf00      	nop
20002bfe:	e7fe      	b.n	20002bfe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
20002c00:	69bb      	ldr	r3, [r7, #24]
20002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
20002c06:	69bb      	ldr	r3, [r7, #24]
20002c08:	69fa      	ldr	r2, [r7, #28]
20002c0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002c0c:	69bb      	ldr	r3, [r7, #24]
20002c0e:	699b      	ldr	r3, [r3, #24]
20002c10:	2b00      	cmp	r3, #0
20002c12:	db04      	blt.n	20002c1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002c14:	69fb      	ldr	r3, [r7, #28]
20002c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20002c1a:	69bb      	ldr	r3, [r7, #24]
20002c1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20002c1e:	69bb      	ldr	r3, [r7, #24]
20002c20:	6959      	ldr	r1, [r3, #20]
20002c22:	693a      	ldr	r2, [r7, #16]
20002c24:	4613      	mov	r3, r2
20002c26:	009b      	lsls	r3, r3, #2
20002c28:	4413      	add	r3, r2
20002c2a:	009b      	lsls	r3, r3, #2
20002c2c:	4a13      	ldr	r2, [pc, #76]	; (20002c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
20002c2e:	4413      	add	r3, r2
20002c30:	4299      	cmp	r1, r3
20002c32:	d11c      	bne.n	20002c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002c34:	69bb      	ldr	r3, [r7, #24]
20002c36:	3304      	adds	r3, #4
20002c38:	4618      	mov	r0, r3
20002c3a:	f7fe f82d 	bl	20000c98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
20002c3e:	69bb      	ldr	r3, [r7, #24]
20002c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c42:	4b0f      	ldr	r3, [pc, #60]	; (20002c80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
20002c44:	681b      	ldr	r3, [r3, #0]
20002c46:	429a      	cmp	r2, r3
20002c48:	d903      	bls.n	20002c52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
20002c4a:	69bb      	ldr	r3, [r7, #24]
20002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c4e:	4a0c      	ldr	r2, [pc, #48]	; (20002c80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
20002c50:	6013      	str	r3, [r2, #0]
20002c52:	69bb      	ldr	r3, [r7, #24]
20002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c56:	4613      	mov	r3, r2
20002c58:	009b      	lsls	r3, r3, #2
20002c5a:	4413      	add	r3, r2
20002c5c:	009b      	lsls	r3, r3, #2
20002c5e:	4a07      	ldr	r2, [pc, #28]	; (20002c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
20002c60:	441a      	add	r2, r3
20002c62:	69bb      	ldr	r3, [r7, #24]
20002c64:	3304      	adds	r3, #4
20002c66:	4619      	mov	r1, r3
20002c68:	4610      	mov	r0, r2
20002c6a:	f7fd ffb8 	bl	20000bde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20002c6e:	bf00      	nop
20002c70:	3720      	adds	r7, #32
20002c72:	46bd      	mov	sp, r7
20002c74:	bd80      	pop	{r7, pc}
20002c76:	bf00      	nop
20002c78:	2000a69c 	.word	0x2000a69c
20002c7c:	2000a6a0 	.word	0x2000a6a0
20002c80:	2000ab78 	.word	0x2000ab78

20002c84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
20002c84:	b480      	push	{r7}
20002c86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20002c88:	4b07      	ldr	r3, [pc, #28]	; (20002ca8 <pvTaskIncrementMutexHeldCount+0x24>)
20002c8a:	681b      	ldr	r3, [r3, #0]
20002c8c:	2b00      	cmp	r3, #0
20002c8e:	d004      	beq.n	20002c9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20002c90:	4b05      	ldr	r3, [pc, #20]	; (20002ca8 <pvTaskIncrementMutexHeldCount+0x24>)
20002c92:	681b      	ldr	r3, [r3, #0]
20002c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20002c96:	3201      	adds	r2, #1
20002c98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
20002c9a:	4b03      	ldr	r3, [pc, #12]	; (20002ca8 <pvTaskIncrementMutexHeldCount+0x24>)
20002c9c:	681b      	ldr	r3, [r3, #0]
	}
20002c9e:	4618      	mov	r0, r3
20002ca0:	46bd      	mov	sp, r7
20002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ca6:	4770      	bx	lr
20002ca8:	2000a69c 	.word	0x2000a69c

20002cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
20002cac:	b580      	push	{r7, lr}
20002cae:	b084      	sub	sp, #16
20002cb0:	af00      	add	r7, sp, #0
20002cb2:	6078      	str	r0, [r7, #4]
20002cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20002cb6:	4b21      	ldr	r3, [pc, #132]	; (20002d3c <prvAddCurrentTaskToDelayedList+0x90>)
20002cb8:	681b      	ldr	r3, [r3, #0]
20002cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002cbc:	4b20      	ldr	r3, [pc, #128]	; (20002d40 <prvAddCurrentTaskToDelayedList+0x94>)
20002cbe:	681b      	ldr	r3, [r3, #0]
20002cc0:	3304      	adds	r3, #4
20002cc2:	4618      	mov	r0, r3
20002cc4:	f7fd ffe8 	bl	20000c98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20002cc8:	687b      	ldr	r3, [r7, #4]
20002cca:	f1b3 3fff 	cmp.w	r3, #4294967295
20002cce:	d10a      	bne.n	20002ce6 <prvAddCurrentTaskToDelayedList+0x3a>
20002cd0:	683b      	ldr	r3, [r7, #0]
20002cd2:	2b00      	cmp	r3, #0
20002cd4:	d007      	beq.n	20002ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002cd6:	4b1a      	ldr	r3, [pc, #104]	; (20002d40 <prvAddCurrentTaskToDelayedList+0x94>)
20002cd8:	681b      	ldr	r3, [r3, #0]
20002cda:	3304      	adds	r3, #4
20002cdc:	4619      	mov	r1, r3
20002cde:	4819      	ldr	r0, [pc, #100]	; (20002d44 <prvAddCurrentTaskToDelayedList+0x98>)
20002ce0:	f7fd ff7d 	bl	20000bde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
20002ce4:	e026      	b.n	20002d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
20002ce6:	68fa      	ldr	r2, [r7, #12]
20002ce8:	687b      	ldr	r3, [r7, #4]
20002cea:	4413      	add	r3, r2
20002cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
20002cee:	4b14      	ldr	r3, [pc, #80]	; (20002d40 <prvAddCurrentTaskToDelayedList+0x94>)
20002cf0:	681b      	ldr	r3, [r3, #0]
20002cf2:	68ba      	ldr	r2, [r7, #8]
20002cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
20002cf6:	68ba      	ldr	r2, [r7, #8]
20002cf8:	68fb      	ldr	r3, [r7, #12]
20002cfa:	429a      	cmp	r2, r3
20002cfc:	d209      	bcs.n	20002d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002cfe:	4b12      	ldr	r3, [pc, #72]	; (20002d48 <prvAddCurrentTaskToDelayedList+0x9c>)
20002d00:	681a      	ldr	r2, [r3, #0]
20002d02:	4b0f      	ldr	r3, [pc, #60]	; (20002d40 <prvAddCurrentTaskToDelayedList+0x94>)
20002d04:	681b      	ldr	r3, [r3, #0]
20002d06:	3304      	adds	r3, #4
20002d08:	4619      	mov	r1, r3
20002d0a:	4610      	mov	r0, r2
20002d0c:	f7fd ff8b 	bl	20000c26 <vListInsert>
}
20002d10:	e010      	b.n	20002d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002d12:	4b0e      	ldr	r3, [pc, #56]	; (20002d4c <prvAddCurrentTaskToDelayedList+0xa0>)
20002d14:	681a      	ldr	r2, [r3, #0]
20002d16:	4b0a      	ldr	r3, [pc, #40]	; (20002d40 <prvAddCurrentTaskToDelayedList+0x94>)
20002d18:	681b      	ldr	r3, [r3, #0]
20002d1a:	3304      	adds	r3, #4
20002d1c:	4619      	mov	r1, r3
20002d1e:	4610      	mov	r0, r2
20002d20:	f7fd ff81 	bl	20000c26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
20002d24:	4b0a      	ldr	r3, [pc, #40]	; (20002d50 <prvAddCurrentTaskToDelayedList+0xa4>)
20002d26:	681b      	ldr	r3, [r3, #0]
20002d28:	68ba      	ldr	r2, [r7, #8]
20002d2a:	429a      	cmp	r2, r3
20002d2c:	d202      	bcs.n	20002d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
20002d2e:	4a08      	ldr	r2, [pc, #32]	; (20002d50 <prvAddCurrentTaskToDelayedList+0xa4>)
20002d30:	68bb      	ldr	r3, [r7, #8]
20002d32:	6013      	str	r3, [r2, #0]
}
20002d34:	bf00      	nop
20002d36:	3710      	adds	r7, #16
20002d38:	46bd      	mov	sp, r7
20002d3a:	bd80      	pop	{r7, pc}
20002d3c:	2000ab74 	.word	0x2000ab74
20002d40:	2000a69c 	.word	0x2000a69c
20002d44:	2000ab5c 	.word	0x2000ab5c
20002d48:	2000ab2c 	.word	0x2000ab2c
20002d4c:	2000ab28 	.word	0x2000ab28
20002d50:	2000ab90 	.word	0x2000ab90

20002d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
20002d54:	b580      	push	{r7, lr}
20002d56:	b08a      	sub	sp, #40	; 0x28
20002d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
20002d5a:	2300      	movs	r3, #0
20002d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
20002d5e:	f000 fb07 	bl	20003370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20002d62:	4b1c      	ldr	r3, [pc, #112]	; (20002dd4 <xTimerCreateTimerTask+0x80>)
20002d64:	681b      	ldr	r3, [r3, #0]
20002d66:	2b00      	cmp	r3, #0
20002d68:	d021      	beq.n	20002dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
20002d6a:	2300      	movs	r3, #0
20002d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
20002d6e:	2300      	movs	r3, #0
20002d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
20002d72:	1d3a      	adds	r2, r7, #4
20002d74:	f107 0108 	add.w	r1, r7, #8
20002d78:	f107 030c 	add.w	r3, r7, #12
20002d7c:	4618      	mov	r0, r3
20002d7e:	f7fd fee7 	bl	20000b50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
20002d82:	6879      	ldr	r1, [r7, #4]
20002d84:	68bb      	ldr	r3, [r7, #8]
20002d86:	68fa      	ldr	r2, [r7, #12]
20002d88:	9202      	str	r2, [sp, #8]
20002d8a:	9301      	str	r3, [sp, #4]
20002d8c:	2302      	movs	r3, #2
20002d8e:	9300      	str	r3, [sp, #0]
20002d90:	2300      	movs	r3, #0
20002d92:	460a      	mov	r2, r1
20002d94:	4910      	ldr	r1, [pc, #64]	; (20002dd8 <xTimerCreateTimerTask+0x84>)
20002d96:	4811      	ldr	r0, [pc, #68]	; (20002ddc <xTimerCreateTimerTask+0x88>)
20002d98:	f7fe ffb6 	bl	20001d08 <xTaskCreateStatic>
20002d9c:	4603      	mov	r3, r0
20002d9e:	4a10      	ldr	r2, [pc, #64]	; (20002de0 <xTimerCreateTimerTask+0x8c>)
20002da0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
20002da2:	4b0f      	ldr	r3, [pc, #60]	; (20002de0 <xTimerCreateTimerTask+0x8c>)
20002da4:	681b      	ldr	r3, [r3, #0]
20002da6:	2b00      	cmp	r3, #0
20002da8:	d001      	beq.n	20002dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
20002daa:	2301      	movs	r3, #1
20002dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
20002dae:	697b      	ldr	r3, [r7, #20]
20002db0:	2b00      	cmp	r3, #0
20002db2:	d10a      	bne.n	20002dca <xTimerCreateTimerTask+0x76>
	__asm volatile
20002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
20002db8:	f383 8811 	msr	BASEPRI, r3
20002dbc:	f3bf 8f6f 	isb	sy
20002dc0:	f3bf 8f4f 	dsb	sy
20002dc4:	613b      	str	r3, [r7, #16]
}
20002dc6:	bf00      	nop
20002dc8:	e7fe      	b.n	20002dc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
20002dca:	697b      	ldr	r3, [r7, #20]
}
20002dcc:	4618      	mov	r0, r3
20002dce:	3718      	adds	r7, #24
20002dd0:	46bd      	mov	sp, r7
20002dd2:	bd80      	pop	{r7, pc}
20002dd4:	2000abcc 	.word	0x2000abcc
20002dd8:	20005fc8 	.word	0x20005fc8
20002ddc:	20002f19 	.word	0x20002f19
20002de0:	2000abd0 	.word	0x2000abd0

20002de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20002de4:	b580      	push	{r7, lr}
20002de6:	b08a      	sub	sp, #40	; 0x28
20002de8:	af00      	add	r7, sp, #0
20002dea:	60f8      	str	r0, [r7, #12]
20002dec:	60b9      	str	r1, [r7, #8]
20002dee:	607a      	str	r2, [r7, #4]
20002df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
20002df2:	2300      	movs	r3, #0
20002df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20002df6:	68fb      	ldr	r3, [r7, #12]
20002df8:	2b00      	cmp	r3, #0
20002dfa:	d10a      	bne.n	20002e12 <xTimerGenericCommand+0x2e>
	__asm volatile
20002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
20002e00:	f383 8811 	msr	BASEPRI, r3
20002e04:	f3bf 8f6f 	isb	sy
20002e08:	f3bf 8f4f 	dsb	sy
20002e0c:	623b      	str	r3, [r7, #32]
}
20002e0e:	bf00      	nop
20002e10:	e7fe      	b.n	20002e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
20002e12:	4b1a      	ldr	r3, [pc, #104]	; (20002e7c <xTimerGenericCommand+0x98>)
20002e14:	681b      	ldr	r3, [r3, #0]
20002e16:	2b00      	cmp	r3, #0
20002e18:	d02a      	beq.n	20002e70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20002e1a:	68bb      	ldr	r3, [r7, #8]
20002e1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20002e1e:	687b      	ldr	r3, [r7, #4]
20002e20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
20002e22:	68fb      	ldr	r3, [r7, #12]
20002e24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20002e26:	68bb      	ldr	r3, [r7, #8]
20002e28:	2b05      	cmp	r3, #5
20002e2a:	dc18      	bgt.n	20002e5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20002e2c:	f7ff fdb4 	bl	20002998 <xTaskGetSchedulerState>
20002e30:	4603      	mov	r3, r0
20002e32:	2b02      	cmp	r3, #2
20002e34:	d109      	bne.n	20002e4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20002e36:	4b11      	ldr	r3, [pc, #68]	; (20002e7c <xTimerGenericCommand+0x98>)
20002e38:	6818      	ldr	r0, [r3, #0]
20002e3a:	f107 0110 	add.w	r1, r7, #16
20002e3e:	2300      	movs	r3, #0
20002e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002e42:	f7fe f8fb 	bl	2000103c <xQueueGenericSend>
20002e46:	6278      	str	r0, [r7, #36]	; 0x24
20002e48:	e012      	b.n	20002e70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20002e4a:	4b0c      	ldr	r3, [pc, #48]	; (20002e7c <xTimerGenericCommand+0x98>)
20002e4c:	6818      	ldr	r0, [r3, #0]
20002e4e:	f107 0110 	add.w	r1, r7, #16
20002e52:	2300      	movs	r3, #0
20002e54:	2200      	movs	r2, #0
20002e56:	f7fe f8f1 	bl	2000103c <xQueueGenericSend>
20002e5a:	6278      	str	r0, [r7, #36]	; 0x24
20002e5c:	e008      	b.n	20002e70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
20002e5e:	4b07      	ldr	r3, [pc, #28]	; (20002e7c <xTimerGenericCommand+0x98>)
20002e60:	6818      	ldr	r0, [r3, #0]
20002e62:	f107 0110 	add.w	r1, r7, #16
20002e66:	2300      	movs	r3, #0
20002e68:	683a      	ldr	r2, [r7, #0]
20002e6a:	f7fe f9e5 	bl	20001238 <xQueueGenericSendFromISR>
20002e6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
20002e72:	4618      	mov	r0, r3
20002e74:	3728      	adds	r7, #40	; 0x28
20002e76:	46bd      	mov	sp, r7
20002e78:	bd80      	pop	{r7, pc}
20002e7a:	bf00      	nop
20002e7c:	2000abcc 	.word	0x2000abcc

20002e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20002e80:	b580      	push	{r7, lr}
20002e82:	b088      	sub	sp, #32
20002e84:	af02      	add	r7, sp, #8
20002e86:	6078      	str	r0, [r7, #4]
20002e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002e8a:	4b22      	ldr	r3, [pc, #136]	; (20002f14 <prvProcessExpiredTimer+0x94>)
20002e8c:	681b      	ldr	r3, [r3, #0]
20002e8e:	68db      	ldr	r3, [r3, #12]
20002e90:	68db      	ldr	r3, [r3, #12]
20002e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20002e94:	697b      	ldr	r3, [r7, #20]
20002e96:	3304      	adds	r3, #4
20002e98:	4618      	mov	r0, r3
20002e9a:	f7fd fefd 	bl	20000c98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20002e9e:	697b      	ldr	r3, [r7, #20]
20002ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002ea4:	f003 0304 	and.w	r3, r3, #4
20002ea8:	2b00      	cmp	r3, #0
20002eaa:	d022      	beq.n	20002ef2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
20002eac:	697b      	ldr	r3, [r7, #20]
20002eae:	699a      	ldr	r2, [r3, #24]
20002eb0:	687b      	ldr	r3, [r7, #4]
20002eb2:	18d1      	adds	r1, r2, r3
20002eb4:	687b      	ldr	r3, [r7, #4]
20002eb6:	683a      	ldr	r2, [r7, #0]
20002eb8:	6978      	ldr	r0, [r7, #20]
20002eba:	f000 f8d1 	bl	20003060 <prvInsertTimerInActiveList>
20002ebe:	4603      	mov	r3, r0
20002ec0:	2b00      	cmp	r3, #0
20002ec2:	d01f      	beq.n	20002f04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20002ec4:	2300      	movs	r3, #0
20002ec6:	9300      	str	r3, [sp, #0]
20002ec8:	2300      	movs	r3, #0
20002eca:	687a      	ldr	r2, [r7, #4]
20002ecc:	2100      	movs	r1, #0
20002ece:	6978      	ldr	r0, [r7, #20]
20002ed0:	f7ff ff88 	bl	20002de4 <xTimerGenericCommand>
20002ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
20002ed6:	693b      	ldr	r3, [r7, #16]
20002ed8:	2b00      	cmp	r3, #0
20002eda:	d113      	bne.n	20002f04 <prvProcessExpiredTimer+0x84>
	__asm volatile
20002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
20002ee0:	f383 8811 	msr	BASEPRI, r3
20002ee4:	f3bf 8f6f 	isb	sy
20002ee8:	f3bf 8f4f 	dsb	sy
20002eec:	60fb      	str	r3, [r7, #12]
}
20002eee:	bf00      	nop
20002ef0:	e7fe      	b.n	20002ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20002ef2:	697b      	ldr	r3, [r7, #20]
20002ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002ef8:	f023 0301 	bic.w	r3, r3, #1
20002efc:	b2da      	uxtb	r2, r3
20002efe:	697b      	ldr	r3, [r7, #20]
20002f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20002f04:	697b      	ldr	r3, [r7, #20]
20002f06:	6a1b      	ldr	r3, [r3, #32]
20002f08:	6978      	ldr	r0, [r7, #20]
20002f0a:	4798      	blx	r3
}
20002f0c:	bf00      	nop
20002f0e:	3718      	adds	r7, #24
20002f10:	46bd      	mov	sp, r7
20002f12:	bd80      	pop	{r7, pc}
20002f14:	2000abc4 	.word	0x2000abc4

20002f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
20002f18:	b580      	push	{r7, lr}
20002f1a:	b084      	sub	sp, #16
20002f1c:	af00      	add	r7, sp, #0
20002f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20002f20:	f107 0308 	add.w	r3, r7, #8
20002f24:	4618      	mov	r0, r3
20002f26:	f000 f857 	bl	20002fd8 <prvGetNextExpireTime>
20002f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20002f2c:	68bb      	ldr	r3, [r7, #8]
20002f2e:	4619      	mov	r1, r3
20002f30:	68f8      	ldr	r0, [r7, #12]
20002f32:	f000 f803 	bl	20002f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20002f36:	f000 f8d5 	bl	200030e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20002f3a:	e7f1      	b.n	20002f20 <prvTimerTask+0x8>

20002f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20002f3c:	b580      	push	{r7, lr}
20002f3e:	b084      	sub	sp, #16
20002f40:	af00      	add	r7, sp, #0
20002f42:	6078      	str	r0, [r7, #4]
20002f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
20002f46:	f7ff f93b 	bl	200021c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20002f4a:	f107 0308 	add.w	r3, r7, #8
20002f4e:	4618      	mov	r0, r3
20002f50:	f000 f866 	bl	20003020 <prvSampleTimeNow>
20002f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
20002f56:	68bb      	ldr	r3, [r7, #8]
20002f58:	2b00      	cmp	r3, #0
20002f5a:	d130      	bne.n	20002fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20002f5c:	683b      	ldr	r3, [r7, #0]
20002f5e:	2b00      	cmp	r3, #0
20002f60:	d10a      	bne.n	20002f78 <prvProcessTimerOrBlockTask+0x3c>
20002f62:	687a      	ldr	r2, [r7, #4]
20002f64:	68fb      	ldr	r3, [r7, #12]
20002f66:	429a      	cmp	r2, r3
20002f68:	d806      	bhi.n	20002f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
20002f6a:	f7ff f937 	bl	200021dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20002f6e:	68f9      	ldr	r1, [r7, #12]
20002f70:	6878      	ldr	r0, [r7, #4]
20002f72:	f7ff ff85 	bl	20002e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20002f76:	e024      	b.n	20002fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
20002f78:	683b      	ldr	r3, [r7, #0]
20002f7a:	2b00      	cmp	r3, #0
20002f7c:	d008      	beq.n	20002f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20002f7e:	4b13      	ldr	r3, [pc, #76]	; (20002fcc <prvProcessTimerOrBlockTask+0x90>)
20002f80:	681b      	ldr	r3, [r3, #0]
20002f82:	681b      	ldr	r3, [r3, #0]
20002f84:	2b00      	cmp	r3, #0
20002f86:	d101      	bne.n	20002f8c <prvProcessTimerOrBlockTask+0x50>
20002f88:	2301      	movs	r3, #1
20002f8a:	e000      	b.n	20002f8e <prvProcessTimerOrBlockTask+0x52>
20002f8c:	2300      	movs	r3, #0
20002f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20002f90:	4b0f      	ldr	r3, [pc, #60]	; (20002fd0 <prvProcessTimerOrBlockTask+0x94>)
20002f92:	6818      	ldr	r0, [r3, #0]
20002f94:	687a      	ldr	r2, [r7, #4]
20002f96:	68fb      	ldr	r3, [r7, #12]
20002f98:	1ad3      	subs	r3, r2, r3
20002f9a:	683a      	ldr	r2, [r7, #0]
20002f9c:	4619      	mov	r1, r3
20002f9e:	f7fe fe7f 	bl	20001ca0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
20002fa2:	f7ff f91b 	bl	200021dc <xTaskResumeAll>
20002fa6:	4603      	mov	r3, r0
20002fa8:	2b00      	cmp	r3, #0
20002faa:	d10a      	bne.n	20002fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
20002fac:	4b09      	ldr	r3, [pc, #36]	; (20002fd4 <prvProcessTimerOrBlockTask+0x98>)
20002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002fb2:	601a      	str	r2, [r3, #0]
20002fb4:	f3bf 8f4f 	dsb	sy
20002fb8:	f3bf 8f6f 	isb	sy
}
20002fbc:	e001      	b.n	20002fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
20002fbe:	f7ff f90d 	bl	200021dc <xTaskResumeAll>
}
20002fc2:	bf00      	nop
20002fc4:	3710      	adds	r7, #16
20002fc6:	46bd      	mov	sp, r7
20002fc8:	bd80      	pop	{r7, pc}
20002fca:	bf00      	nop
20002fcc:	2000abc8 	.word	0x2000abc8
20002fd0:	2000abcc 	.word	0x2000abcc
20002fd4:	e000ed04 	.word	0xe000ed04

20002fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20002fd8:	b480      	push	{r7}
20002fda:	b085      	sub	sp, #20
20002fdc:	af00      	add	r7, sp, #0
20002fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20002fe0:	4b0e      	ldr	r3, [pc, #56]	; (2000301c <prvGetNextExpireTime+0x44>)
20002fe2:	681b      	ldr	r3, [r3, #0]
20002fe4:	681b      	ldr	r3, [r3, #0]
20002fe6:	2b00      	cmp	r3, #0
20002fe8:	d101      	bne.n	20002fee <prvGetNextExpireTime+0x16>
20002fea:	2201      	movs	r2, #1
20002fec:	e000      	b.n	20002ff0 <prvGetNextExpireTime+0x18>
20002fee:	2200      	movs	r2, #0
20002ff0:	687b      	ldr	r3, [r7, #4]
20002ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20002ff4:	687b      	ldr	r3, [r7, #4]
20002ff6:	681b      	ldr	r3, [r3, #0]
20002ff8:	2b00      	cmp	r3, #0
20002ffa:	d105      	bne.n	20003008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20002ffc:	4b07      	ldr	r3, [pc, #28]	; (2000301c <prvGetNextExpireTime+0x44>)
20002ffe:	681b      	ldr	r3, [r3, #0]
20003000:	68db      	ldr	r3, [r3, #12]
20003002:	681b      	ldr	r3, [r3, #0]
20003004:	60fb      	str	r3, [r7, #12]
20003006:	e001      	b.n	2000300c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003008:	2300      	movs	r3, #0
2000300a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
2000300c:	68fb      	ldr	r3, [r7, #12]
}
2000300e:	4618      	mov	r0, r3
20003010:	3714      	adds	r7, #20
20003012:	46bd      	mov	sp, r7
20003014:	f85d 7b04 	ldr.w	r7, [sp], #4
20003018:	4770      	bx	lr
2000301a:	bf00      	nop
2000301c:	2000abc4 	.word	0x2000abc4

20003020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003020:	b580      	push	{r7, lr}
20003022:	b084      	sub	sp, #16
20003024:	af00      	add	r7, sp, #0
20003026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003028:	f7ff f976 	bl	20002318 <xTaskGetTickCount>
2000302c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
2000302e:	4b0b      	ldr	r3, [pc, #44]	; (2000305c <prvSampleTimeNow+0x3c>)
20003030:	681b      	ldr	r3, [r3, #0]
20003032:	68fa      	ldr	r2, [r7, #12]
20003034:	429a      	cmp	r2, r3
20003036:	d205      	bcs.n	20003044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
20003038:	f000 f936 	bl	200032a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
2000303c:	687b      	ldr	r3, [r7, #4]
2000303e:	2201      	movs	r2, #1
20003040:	601a      	str	r2, [r3, #0]
20003042:	e002      	b.n	2000304a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20003044:	687b      	ldr	r3, [r7, #4]
20003046:	2200      	movs	r2, #0
20003048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
2000304a:	4a04      	ldr	r2, [pc, #16]	; (2000305c <prvSampleTimeNow+0x3c>)
2000304c:	68fb      	ldr	r3, [r7, #12]
2000304e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
20003050:	68fb      	ldr	r3, [r7, #12]
}
20003052:	4618      	mov	r0, r3
20003054:	3710      	adds	r7, #16
20003056:	46bd      	mov	sp, r7
20003058:	bd80      	pop	{r7, pc}
2000305a:	bf00      	nop
2000305c:	2000abd4 	.word	0x2000abd4

20003060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003060:	b580      	push	{r7, lr}
20003062:	b086      	sub	sp, #24
20003064:	af00      	add	r7, sp, #0
20003066:	60f8      	str	r0, [r7, #12]
20003068:	60b9      	str	r1, [r7, #8]
2000306a:	607a      	str	r2, [r7, #4]
2000306c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
2000306e:	2300      	movs	r3, #0
20003070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003072:	68fb      	ldr	r3, [r7, #12]
20003074:	68ba      	ldr	r2, [r7, #8]
20003076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003078:	68fb      	ldr	r3, [r7, #12]
2000307a:	68fa      	ldr	r2, [r7, #12]
2000307c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
2000307e:	68ba      	ldr	r2, [r7, #8]
20003080:	687b      	ldr	r3, [r7, #4]
20003082:	429a      	cmp	r2, r3
20003084:	d812      	bhi.n	200030ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003086:	687a      	ldr	r2, [r7, #4]
20003088:	683b      	ldr	r3, [r7, #0]
2000308a:	1ad2      	subs	r2, r2, r3
2000308c:	68fb      	ldr	r3, [r7, #12]
2000308e:	699b      	ldr	r3, [r3, #24]
20003090:	429a      	cmp	r2, r3
20003092:	d302      	bcc.n	2000309a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003094:	2301      	movs	r3, #1
20003096:	617b      	str	r3, [r7, #20]
20003098:	e01b      	b.n	200030d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
2000309a:	4b10      	ldr	r3, [pc, #64]	; (200030dc <prvInsertTimerInActiveList+0x7c>)
2000309c:	681a      	ldr	r2, [r3, #0]
2000309e:	68fb      	ldr	r3, [r7, #12]
200030a0:	3304      	adds	r3, #4
200030a2:	4619      	mov	r1, r3
200030a4:	4610      	mov	r0, r2
200030a6:	f7fd fdbe 	bl	20000c26 <vListInsert>
200030aa:	e012      	b.n	200030d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
200030ac:	687a      	ldr	r2, [r7, #4]
200030ae:	683b      	ldr	r3, [r7, #0]
200030b0:	429a      	cmp	r2, r3
200030b2:	d206      	bcs.n	200030c2 <prvInsertTimerInActiveList+0x62>
200030b4:	68ba      	ldr	r2, [r7, #8]
200030b6:	683b      	ldr	r3, [r7, #0]
200030b8:	429a      	cmp	r2, r3
200030ba:	d302      	bcc.n	200030c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
200030bc:	2301      	movs	r3, #1
200030be:	617b      	str	r3, [r7, #20]
200030c0:	e007      	b.n	200030d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
200030c2:	4b07      	ldr	r3, [pc, #28]	; (200030e0 <prvInsertTimerInActiveList+0x80>)
200030c4:	681a      	ldr	r2, [r3, #0]
200030c6:	68fb      	ldr	r3, [r7, #12]
200030c8:	3304      	adds	r3, #4
200030ca:	4619      	mov	r1, r3
200030cc:	4610      	mov	r0, r2
200030ce:	f7fd fdaa 	bl	20000c26 <vListInsert>
		}
	}

	return xProcessTimerNow;
200030d2:	697b      	ldr	r3, [r7, #20]
}
200030d4:	4618      	mov	r0, r3
200030d6:	3718      	adds	r7, #24
200030d8:	46bd      	mov	sp, r7
200030da:	bd80      	pop	{r7, pc}
200030dc:	2000abc8 	.word	0x2000abc8
200030e0:	2000abc4 	.word	0x2000abc4

200030e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
200030e4:	b580      	push	{r7, lr}
200030e6:	b08e      	sub	sp, #56	; 0x38
200030e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
200030ea:	e0ca      	b.n	20003282 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
200030ec:	687b      	ldr	r3, [r7, #4]
200030ee:	2b00      	cmp	r3, #0
200030f0:	da18      	bge.n	20003124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
200030f2:	1d3b      	adds	r3, r7, #4
200030f4:	3304      	adds	r3, #4
200030f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
200030f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200030fa:	2b00      	cmp	r3, #0
200030fc:	d10a      	bne.n	20003114 <prvProcessReceivedCommands+0x30>
	__asm volatile
200030fe:	f04f 0350 	mov.w	r3, #80	; 0x50
20003102:	f383 8811 	msr	BASEPRI, r3
20003106:	f3bf 8f6f 	isb	sy
2000310a:	f3bf 8f4f 	dsb	sy
2000310e:	61fb      	str	r3, [r7, #28]
}
20003110:	bf00      	nop
20003112:	e7fe      	b.n	20003112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20003116:	681b      	ldr	r3, [r3, #0]
20003118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000311a:	6850      	ldr	r0, [r2, #4]
2000311c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000311e:	6892      	ldr	r2, [r2, #8]
20003120:	4611      	mov	r1, r2
20003122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003124:	687b      	ldr	r3, [r7, #4]
20003126:	2b00      	cmp	r3, #0
20003128:	f2c0 80aa 	blt.w	20003280 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
2000312c:	68fb      	ldr	r3, [r7, #12]
2000312e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
20003130:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003132:	695b      	ldr	r3, [r3, #20]
20003134:	2b00      	cmp	r3, #0
20003136:	d004      	beq.n	20003142 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003138:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000313a:	3304      	adds	r3, #4
2000313c:	4618      	mov	r0, r3
2000313e:	f7fd fdab 	bl	20000c98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003142:	463b      	mov	r3, r7
20003144:	4618      	mov	r0, r3
20003146:	f7ff ff6b 	bl	20003020 <prvSampleTimeNow>
2000314a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
2000314c:	687b      	ldr	r3, [r7, #4]
2000314e:	2b09      	cmp	r3, #9
20003150:	f200 8097 	bhi.w	20003282 <prvProcessReceivedCommands+0x19e>
20003154:	a201      	add	r2, pc, #4	; (adr r2, 2000315c <prvProcessReceivedCommands+0x78>)
20003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000315a:	bf00      	nop
2000315c:	20003185 	.word	0x20003185
20003160:	20003185 	.word	0x20003185
20003164:	20003185 	.word	0x20003185
20003168:	200031f9 	.word	0x200031f9
2000316c:	2000320d 	.word	0x2000320d
20003170:	20003257 	.word	0x20003257
20003174:	20003185 	.word	0x20003185
20003178:	20003185 	.word	0x20003185
2000317c:	200031f9 	.word	0x200031f9
20003180:	2000320d 	.word	0x2000320d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000318a:	f043 0301 	orr.w	r3, r3, #1
2000318e:	b2da      	uxtb	r2, r3
20003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003196:	68ba      	ldr	r2, [r7, #8]
20003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000319a:	699b      	ldr	r3, [r3, #24]
2000319c:	18d1      	adds	r1, r2, r3
2000319e:	68bb      	ldr	r3, [r7, #8]
200031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200031a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200031a4:	f7ff ff5c 	bl	20003060 <prvInsertTimerInActiveList>
200031a8:	4603      	mov	r3, r0
200031aa:	2b00      	cmp	r3, #0
200031ac:	d069      	beq.n	20003282 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
200031b0:	6a1b      	ldr	r3, [r3, #32]
200031b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200031b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
200031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200031b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200031bc:	f003 0304 	and.w	r3, r3, #4
200031c0:	2b00      	cmp	r3, #0
200031c2:	d05e      	beq.n	20003282 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
200031c4:	68ba      	ldr	r2, [r7, #8]
200031c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200031c8:	699b      	ldr	r3, [r3, #24]
200031ca:	441a      	add	r2, r3
200031cc:	2300      	movs	r3, #0
200031ce:	9300      	str	r3, [sp, #0]
200031d0:	2300      	movs	r3, #0
200031d2:	2100      	movs	r1, #0
200031d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200031d6:	f7ff fe05 	bl	20002de4 <xTimerGenericCommand>
200031da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
200031dc:	6a3b      	ldr	r3, [r7, #32]
200031de:	2b00      	cmp	r3, #0
200031e0:	d14f      	bne.n	20003282 <prvProcessReceivedCommands+0x19e>
	__asm volatile
200031e2:	f04f 0350 	mov.w	r3, #80	; 0x50
200031e6:	f383 8811 	msr	BASEPRI, r3
200031ea:	f3bf 8f6f 	isb	sy
200031ee:	f3bf 8f4f 	dsb	sy
200031f2:	61bb      	str	r3, [r7, #24]
}
200031f4:	bf00      	nop
200031f6:	e7fe      	b.n	200031f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
200031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200031fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200031fe:	f023 0301 	bic.w	r3, r3, #1
20003202:	b2da      	uxtb	r2, r3
20003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
2000320a:	e03a      	b.n	20003282 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
2000320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000320e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003212:	f043 0301 	orr.w	r3, r3, #1
20003216:	b2da      	uxtb	r2, r3
20003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000321a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
2000321e:	68ba      	ldr	r2, [r7, #8]
20003220:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003222:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003226:	699b      	ldr	r3, [r3, #24]
20003228:	2b00      	cmp	r3, #0
2000322a:	d10a      	bne.n	20003242 <prvProcessReceivedCommands+0x15e>
	__asm volatile
2000322c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003230:	f383 8811 	msr	BASEPRI, r3
20003234:	f3bf 8f6f 	isb	sy
20003238:	f3bf 8f4f 	dsb	sy
2000323c:	617b      	str	r3, [r7, #20]
}
2000323e:	bf00      	nop
20003240:	e7fe      	b.n	20003240 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003244:	699a      	ldr	r2, [r3, #24]
20003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003248:	18d1      	adds	r1, r2, r3
2000324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000324e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003250:	f7ff ff06 	bl	20003060 <prvInsertTimerInActiveList>
					break;
20003254:	e015      	b.n	20003282 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
20003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000325c:	f003 0302 	and.w	r3, r3, #2
20003260:	2b00      	cmp	r3, #0
20003262:	d103      	bne.n	2000326c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
20003264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003266:	f000 fbdb 	bl	20003a20 <vPortFree>
2000326a:	e00a      	b.n	20003282 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
2000326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000326e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003272:	f023 0301 	bic.w	r3, r3, #1
20003276:	b2da      	uxtb	r2, r3
20003278:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000327a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
2000327e:	e000      	b.n	20003282 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
20003280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003282:	4b08      	ldr	r3, [pc, #32]	; (200032a4 <prvProcessReceivedCommands+0x1c0>)
20003284:	681b      	ldr	r3, [r3, #0]
20003286:	1d39      	adds	r1, r7, #4
20003288:	2200      	movs	r2, #0
2000328a:	4618      	mov	r0, r3
2000328c:	f7fe f8fc 	bl	20001488 <xQueueReceive>
20003290:	4603      	mov	r3, r0
20003292:	2b00      	cmp	r3, #0
20003294:	f47f af2a 	bne.w	200030ec <prvProcessReceivedCommands+0x8>
	}
}
20003298:	bf00      	nop
2000329a:	bf00      	nop
2000329c:	3730      	adds	r7, #48	; 0x30
2000329e:	46bd      	mov	sp, r7
200032a0:	bd80      	pop	{r7, pc}
200032a2:	bf00      	nop
200032a4:	2000abcc 	.word	0x2000abcc

200032a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
200032a8:	b580      	push	{r7, lr}
200032aa:	b088      	sub	sp, #32
200032ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200032ae:	e048      	b.n	20003342 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
200032b0:	4b2d      	ldr	r3, [pc, #180]	; (20003368 <prvSwitchTimerLists+0xc0>)
200032b2:	681b      	ldr	r3, [r3, #0]
200032b4:	68db      	ldr	r3, [r3, #12]
200032b6:	681b      	ldr	r3, [r3, #0]
200032b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200032ba:	4b2b      	ldr	r3, [pc, #172]	; (20003368 <prvSwitchTimerLists+0xc0>)
200032bc:	681b      	ldr	r3, [r3, #0]
200032be:	68db      	ldr	r3, [r3, #12]
200032c0:	68db      	ldr	r3, [r3, #12]
200032c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200032c4:	68fb      	ldr	r3, [r7, #12]
200032c6:	3304      	adds	r3, #4
200032c8:	4618      	mov	r0, r3
200032ca:	f7fd fce5 	bl	20000c98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200032ce:	68fb      	ldr	r3, [r7, #12]
200032d0:	6a1b      	ldr	r3, [r3, #32]
200032d2:	68f8      	ldr	r0, [r7, #12]
200032d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
200032d6:	68fb      	ldr	r3, [r7, #12]
200032d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200032dc:	f003 0304 	and.w	r3, r3, #4
200032e0:	2b00      	cmp	r3, #0
200032e2:	d02e      	beq.n	20003342 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
200032e4:	68fb      	ldr	r3, [r7, #12]
200032e6:	699b      	ldr	r3, [r3, #24]
200032e8:	693a      	ldr	r2, [r7, #16]
200032ea:	4413      	add	r3, r2
200032ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
200032ee:	68ba      	ldr	r2, [r7, #8]
200032f0:	693b      	ldr	r3, [r7, #16]
200032f2:	429a      	cmp	r2, r3
200032f4:	d90e      	bls.n	20003314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
200032f6:	68fb      	ldr	r3, [r7, #12]
200032f8:	68ba      	ldr	r2, [r7, #8]
200032fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
200032fc:	68fb      	ldr	r3, [r7, #12]
200032fe:	68fa      	ldr	r2, [r7, #12]
20003300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003302:	4b19      	ldr	r3, [pc, #100]	; (20003368 <prvSwitchTimerLists+0xc0>)
20003304:	681a      	ldr	r2, [r3, #0]
20003306:	68fb      	ldr	r3, [r7, #12]
20003308:	3304      	adds	r3, #4
2000330a:	4619      	mov	r1, r3
2000330c:	4610      	mov	r0, r2
2000330e:	f7fd fc8a 	bl	20000c26 <vListInsert>
20003312:	e016      	b.n	20003342 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003314:	2300      	movs	r3, #0
20003316:	9300      	str	r3, [sp, #0]
20003318:	2300      	movs	r3, #0
2000331a:	693a      	ldr	r2, [r7, #16]
2000331c:	2100      	movs	r1, #0
2000331e:	68f8      	ldr	r0, [r7, #12]
20003320:	f7ff fd60 	bl	20002de4 <xTimerGenericCommand>
20003324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
20003326:	687b      	ldr	r3, [r7, #4]
20003328:	2b00      	cmp	r3, #0
2000332a:	d10a      	bne.n	20003342 <prvSwitchTimerLists+0x9a>
	__asm volatile
2000332c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003330:	f383 8811 	msr	BASEPRI, r3
20003334:	f3bf 8f6f 	isb	sy
20003338:	f3bf 8f4f 	dsb	sy
2000333c:	603b      	str	r3, [r7, #0]
}
2000333e:	bf00      	nop
20003340:	e7fe      	b.n	20003340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003342:	4b09      	ldr	r3, [pc, #36]	; (20003368 <prvSwitchTimerLists+0xc0>)
20003344:	681b      	ldr	r3, [r3, #0]
20003346:	681b      	ldr	r3, [r3, #0]
20003348:	2b00      	cmp	r3, #0
2000334a:	d1b1      	bne.n	200032b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
2000334c:	4b06      	ldr	r3, [pc, #24]	; (20003368 <prvSwitchTimerLists+0xc0>)
2000334e:	681b      	ldr	r3, [r3, #0]
20003350:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
20003352:	4b06      	ldr	r3, [pc, #24]	; (2000336c <prvSwitchTimerLists+0xc4>)
20003354:	681b      	ldr	r3, [r3, #0]
20003356:	4a04      	ldr	r2, [pc, #16]	; (20003368 <prvSwitchTimerLists+0xc0>)
20003358:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
2000335a:	4a04      	ldr	r2, [pc, #16]	; (2000336c <prvSwitchTimerLists+0xc4>)
2000335c:	697b      	ldr	r3, [r7, #20]
2000335e:	6013      	str	r3, [r2, #0]
}
20003360:	bf00      	nop
20003362:	3718      	adds	r7, #24
20003364:	46bd      	mov	sp, r7
20003366:	bd80      	pop	{r7, pc}
20003368:	2000abc4 	.word	0x2000abc4
2000336c:	2000abc8 	.word	0x2000abc8

20003370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003370:	b580      	push	{r7, lr}
20003372:	b082      	sub	sp, #8
20003374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003376:	f000 f965 	bl	20003644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
2000337a:	4b15      	ldr	r3, [pc, #84]	; (200033d0 <prvCheckForValidListAndQueue+0x60>)
2000337c:	681b      	ldr	r3, [r3, #0]
2000337e:	2b00      	cmp	r3, #0
20003380:	d120      	bne.n	200033c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
20003382:	4814      	ldr	r0, [pc, #80]	; (200033d4 <prvCheckForValidListAndQueue+0x64>)
20003384:	f7fd fbfe 	bl	20000b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003388:	4813      	ldr	r0, [pc, #76]	; (200033d8 <prvCheckForValidListAndQueue+0x68>)
2000338a:	f7fd fbfb 	bl	20000b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
2000338e:	4b13      	ldr	r3, [pc, #76]	; (200033dc <prvCheckForValidListAndQueue+0x6c>)
20003390:	4a10      	ldr	r2, [pc, #64]	; (200033d4 <prvCheckForValidListAndQueue+0x64>)
20003392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003394:	4b12      	ldr	r3, [pc, #72]	; (200033e0 <prvCheckForValidListAndQueue+0x70>)
20003396:	4a10      	ldr	r2, [pc, #64]	; (200033d8 <prvCheckForValidListAndQueue+0x68>)
20003398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
2000339a:	2300      	movs	r3, #0
2000339c:	9300      	str	r3, [sp, #0]
2000339e:	4b11      	ldr	r3, [pc, #68]	; (200033e4 <prvCheckForValidListAndQueue+0x74>)
200033a0:	4a11      	ldr	r2, [pc, #68]	; (200033e8 <prvCheckForValidListAndQueue+0x78>)
200033a2:	2110      	movs	r1, #16
200033a4:	200a      	movs	r0, #10
200033a6:	f7fd fd09 	bl	20000dbc <xQueueGenericCreateStatic>
200033aa:	4603      	mov	r3, r0
200033ac:	4a08      	ldr	r2, [pc, #32]	; (200033d0 <prvCheckForValidListAndQueue+0x60>)
200033ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
200033b0:	4b07      	ldr	r3, [pc, #28]	; (200033d0 <prvCheckForValidListAndQueue+0x60>)
200033b2:	681b      	ldr	r3, [r3, #0]
200033b4:	2b00      	cmp	r3, #0
200033b6:	d005      	beq.n	200033c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
200033b8:	4b05      	ldr	r3, [pc, #20]	; (200033d0 <prvCheckForValidListAndQueue+0x60>)
200033ba:	681b      	ldr	r3, [r3, #0]
200033bc:	490b      	ldr	r1, [pc, #44]	; (200033ec <prvCheckForValidListAndQueue+0x7c>)
200033be:	4618      	mov	r0, r3
200033c0:	f7fe fc1a 	bl	20001bf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
200033c4:	f000 f96e 	bl	200036a4 <vPortExitCritical>
}
200033c8:	bf00      	nop
200033ca:	46bd      	mov	sp, r7
200033cc:	bd80      	pop	{r7, pc}
200033ce:	bf00      	nop
200033d0:	2000abcc 	.word	0x2000abcc
200033d4:	2000ab9c 	.word	0x2000ab9c
200033d8:	2000abb0 	.word	0x2000abb0
200033dc:	2000abc4 	.word	0x2000abc4
200033e0:	2000abc8 	.word	0x2000abc8
200033e4:	2000ac78 	.word	0x2000ac78
200033e8:	2000abd8 	.word	0x2000abd8
200033ec:	20005fd0 	.word	0x20005fd0

200033f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
200033f0:	b480      	push	{r7}
200033f2:	b085      	sub	sp, #20
200033f4:	af00      	add	r7, sp, #0
200033f6:	60f8      	str	r0, [r7, #12]
200033f8:	60b9      	str	r1, [r7, #8]
200033fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
200033fc:	68fb      	ldr	r3, [r7, #12]
200033fe:	3b04      	subs	r3, #4
20003400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003402:	68fb      	ldr	r3, [r7, #12]
20003404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000340a:	68fb      	ldr	r3, [r7, #12]
2000340c:	3b04      	subs	r3, #4
2000340e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20003410:	68bb      	ldr	r3, [r7, #8]
20003412:	f023 0201 	bic.w	r2, r3, #1
20003416:	68fb      	ldr	r3, [r7, #12]
20003418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000341a:	68fb      	ldr	r3, [r7, #12]
2000341c:	3b04      	subs	r3, #4
2000341e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20003420:	4a0c      	ldr	r2, [pc, #48]	; (20003454 <pxPortInitialiseStack+0x64>)
20003422:	68fb      	ldr	r3, [r7, #12]
20003424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20003426:	68fb      	ldr	r3, [r7, #12]
20003428:	3b14      	subs	r3, #20
2000342a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
2000342c:	687a      	ldr	r2, [r7, #4]
2000342e:	68fb      	ldr	r3, [r7, #12]
20003430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
20003432:	68fb      	ldr	r3, [r7, #12]
20003434:	3b04      	subs	r3, #4
20003436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
20003438:	68fb      	ldr	r3, [r7, #12]
2000343a:	f06f 0202 	mvn.w	r2, #2
2000343e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20003440:	68fb      	ldr	r3, [r7, #12]
20003442:	3b20      	subs	r3, #32
20003444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20003446:	68fb      	ldr	r3, [r7, #12]
}
20003448:	4618      	mov	r0, r3
2000344a:	3714      	adds	r7, #20
2000344c:	46bd      	mov	sp, r7
2000344e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003452:	4770      	bx	lr
20003454:	20003459 	.word	0x20003459

20003458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20003458:	b480      	push	{r7}
2000345a:	b085      	sub	sp, #20
2000345c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
2000345e:	2300      	movs	r3, #0
20003460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20003462:	4b12      	ldr	r3, [pc, #72]	; (200034ac <prvTaskExitError+0x54>)
20003464:	681b      	ldr	r3, [r3, #0]
20003466:	f1b3 3fff 	cmp.w	r3, #4294967295
2000346a:	d00a      	beq.n	20003482 <prvTaskExitError+0x2a>
	__asm volatile
2000346c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003470:	f383 8811 	msr	BASEPRI, r3
20003474:	f3bf 8f6f 	isb	sy
20003478:	f3bf 8f4f 	dsb	sy
2000347c:	60fb      	str	r3, [r7, #12]
}
2000347e:	bf00      	nop
20003480:	e7fe      	b.n	20003480 <prvTaskExitError+0x28>
	__asm volatile
20003482:	f04f 0350 	mov.w	r3, #80	; 0x50
20003486:	f383 8811 	msr	BASEPRI, r3
2000348a:	f3bf 8f6f 	isb	sy
2000348e:	f3bf 8f4f 	dsb	sy
20003492:	60bb      	str	r3, [r7, #8]
}
20003494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
20003496:	bf00      	nop
20003498:	687b      	ldr	r3, [r7, #4]
2000349a:	2b00      	cmp	r3, #0
2000349c:	d0fc      	beq.n	20003498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
2000349e:	bf00      	nop
200034a0:	bf00      	nop
200034a2:	3714      	adds	r7, #20
200034a4:	46bd      	mov	sp, r7
200034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200034aa:	4770      	bx	lr
200034ac:	20009e08 	.word	0x20009e08

200034b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
200034b0:	4b07      	ldr	r3, [pc, #28]	; (200034d0 <pxCurrentTCBConst2>)
200034b2:	6819      	ldr	r1, [r3, #0]
200034b4:	6808      	ldr	r0, [r1, #0]
200034b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200034ba:	f380 8809 	msr	PSP, r0
200034be:	f3bf 8f6f 	isb	sy
200034c2:	f04f 0000 	mov.w	r0, #0
200034c6:	f380 8811 	msr	BASEPRI, r0
200034ca:	4770      	bx	lr
200034cc:	f3af 8000 	nop.w

200034d0 <pxCurrentTCBConst2>:
200034d0:	2000a69c 	.word	0x2000a69c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
200034d4:	bf00      	nop
200034d6:	bf00      	nop

200034d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
200034d8:	4808      	ldr	r0, [pc, #32]	; (200034fc <prvPortStartFirstTask+0x24>)
200034da:	6800      	ldr	r0, [r0, #0]
200034dc:	6800      	ldr	r0, [r0, #0]
200034de:	f380 8808 	msr	MSP, r0
200034e2:	f04f 0000 	mov.w	r0, #0
200034e6:	f380 8814 	msr	CONTROL, r0
200034ea:	b662      	cpsie	i
200034ec:	b661      	cpsie	f
200034ee:	f3bf 8f4f 	dsb	sy
200034f2:	f3bf 8f6f 	isb	sy
200034f6:	df00      	svc	0
200034f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
200034fa:	bf00      	nop
200034fc:	e000ed08 	.word	0xe000ed08

20003500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003500:	b580      	push	{r7, lr}
20003502:	b086      	sub	sp, #24
20003504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
20003506:	4b46      	ldr	r3, [pc, #280]	; (20003620 <xPortStartScheduler+0x120>)
20003508:	681b      	ldr	r3, [r3, #0]
2000350a:	4a46      	ldr	r2, [pc, #280]	; (20003624 <xPortStartScheduler+0x124>)
2000350c:	4293      	cmp	r3, r2
2000350e:	d10a      	bne.n	20003526 <xPortStartScheduler+0x26>
	__asm volatile
20003510:	f04f 0350 	mov.w	r3, #80	; 0x50
20003514:	f383 8811 	msr	BASEPRI, r3
20003518:	f3bf 8f6f 	isb	sy
2000351c:	f3bf 8f4f 	dsb	sy
20003520:	613b      	str	r3, [r7, #16]
}
20003522:	bf00      	nop
20003524:	e7fe      	b.n	20003524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
20003526:	4b3e      	ldr	r3, [pc, #248]	; (20003620 <xPortStartScheduler+0x120>)
20003528:	681b      	ldr	r3, [r3, #0]
2000352a:	4a3f      	ldr	r2, [pc, #252]	; (20003628 <xPortStartScheduler+0x128>)
2000352c:	4293      	cmp	r3, r2
2000352e:	d10a      	bne.n	20003546 <xPortStartScheduler+0x46>
	__asm volatile
20003530:	f04f 0350 	mov.w	r3, #80	; 0x50
20003534:	f383 8811 	msr	BASEPRI, r3
20003538:	f3bf 8f6f 	isb	sy
2000353c:	f3bf 8f4f 	dsb	sy
20003540:	60fb      	str	r3, [r7, #12]
}
20003542:	bf00      	nop
20003544:	e7fe      	b.n	20003544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20003546:	4b39      	ldr	r3, [pc, #228]	; (2000362c <xPortStartScheduler+0x12c>)
20003548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
2000354a:	697b      	ldr	r3, [r7, #20]
2000354c:	781b      	ldrb	r3, [r3, #0]
2000354e:	b2db      	uxtb	r3, r3
20003550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20003552:	697b      	ldr	r3, [r7, #20]
20003554:	22ff      	movs	r2, #255	; 0xff
20003556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20003558:	697b      	ldr	r3, [r7, #20]
2000355a:	781b      	ldrb	r3, [r3, #0]
2000355c:	b2db      	uxtb	r3, r3
2000355e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20003560:	78fb      	ldrb	r3, [r7, #3]
20003562:	b2db      	uxtb	r3, r3
20003564:	f003 0350 	and.w	r3, r3, #80	; 0x50
20003568:	b2da      	uxtb	r2, r3
2000356a:	4b31      	ldr	r3, [pc, #196]	; (20003630 <xPortStartScheduler+0x130>)
2000356c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
2000356e:	4b31      	ldr	r3, [pc, #196]	; (20003634 <xPortStartScheduler+0x134>)
20003570:	2207      	movs	r2, #7
20003572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003574:	e009      	b.n	2000358a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
20003576:	4b2f      	ldr	r3, [pc, #188]	; (20003634 <xPortStartScheduler+0x134>)
20003578:	681b      	ldr	r3, [r3, #0]
2000357a:	3b01      	subs	r3, #1
2000357c:	4a2d      	ldr	r2, [pc, #180]	; (20003634 <xPortStartScheduler+0x134>)
2000357e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20003580:	78fb      	ldrb	r3, [r7, #3]
20003582:	b2db      	uxtb	r3, r3
20003584:	005b      	lsls	r3, r3, #1
20003586:	b2db      	uxtb	r3, r3
20003588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
2000358a:	78fb      	ldrb	r3, [r7, #3]
2000358c:	b2db      	uxtb	r3, r3
2000358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003592:	2b80      	cmp	r3, #128	; 0x80
20003594:	d0ef      	beq.n	20003576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
20003596:	4b27      	ldr	r3, [pc, #156]	; (20003634 <xPortStartScheduler+0x134>)
20003598:	681b      	ldr	r3, [r3, #0]
2000359a:	f1c3 0307 	rsb	r3, r3, #7
2000359e:	2b04      	cmp	r3, #4
200035a0:	d00a      	beq.n	200035b8 <xPortStartScheduler+0xb8>
	__asm volatile
200035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
200035a6:	f383 8811 	msr	BASEPRI, r3
200035aa:	f3bf 8f6f 	isb	sy
200035ae:	f3bf 8f4f 	dsb	sy
200035b2:	60bb      	str	r3, [r7, #8]
}
200035b4:	bf00      	nop
200035b6:	e7fe      	b.n	200035b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
200035b8:	4b1e      	ldr	r3, [pc, #120]	; (20003634 <xPortStartScheduler+0x134>)
200035ba:	681b      	ldr	r3, [r3, #0]
200035bc:	021b      	lsls	r3, r3, #8
200035be:	4a1d      	ldr	r2, [pc, #116]	; (20003634 <xPortStartScheduler+0x134>)
200035c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
200035c2:	4b1c      	ldr	r3, [pc, #112]	; (20003634 <xPortStartScheduler+0x134>)
200035c4:	681b      	ldr	r3, [r3, #0]
200035c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
200035ca:	4a1a      	ldr	r2, [pc, #104]	; (20003634 <xPortStartScheduler+0x134>)
200035cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
200035ce:	687b      	ldr	r3, [r7, #4]
200035d0:	b2da      	uxtb	r2, r3
200035d2:	697b      	ldr	r3, [r7, #20]
200035d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
200035d6:	4b18      	ldr	r3, [pc, #96]	; (20003638 <xPortStartScheduler+0x138>)
200035d8:	681b      	ldr	r3, [r3, #0]
200035da:	4a17      	ldr	r2, [pc, #92]	; (20003638 <xPortStartScheduler+0x138>)
200035dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200035e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
200035e2:	4b15      	ldr	r3, [pc, #84]	; (20003638 <xPortStartScheduler+0x138>)
200035e4:	681b      	ldr	r3, [r3, #0]
200035e6:	4a14      	ldr	r2, [pc, #80]	; (20003638 <xPortStartScheduler+0x138>)
200035e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
200035ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
200035ee:	f000 f8dd 	bl	200037ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
200035f2:	4b12      	ldr	r3, [pc, #72]	; (2000363c <xPortStartScheduler+0x13c>)
200035f4:	2200      	movs	r2, #0
200035f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
200035f8:	f000 f8fc 	bl	200037f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
200035fc:	4b10      	ldr	r3, [pc, #64]	; (20003640 <xPortStartScheduler+0x140>)
200035fe:	681b      	ldr	r3, [r3, #0]
20003600:	4a0f      	ldr	r2, [pc, #60]	; (20003640 <xPortStartScheduler+0x140>)
20003602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
20003606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003608:	f7ff ff66 	bl	200034d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
2000360c:	f7fe ff4e 	bl	200024ac <vTaskSwitchContext>
	prvTaskExitError();
20003610:	f7ff ff22 	bl	20003458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
20003614:	2300      	movs	r3, #0
}
20003616:	4618      	mov	r0, r3
20003618:	3718      	adds	r7, #24
2000361a:	46bd      	mov	sp, r7
2000361c:	bd80      	pop	{r7, pc}
2000361e:	bf00      	nop
20003620:	e000ed00 	.word	0xe000ed00
20003624:	410fc271 	.word	0x410fc271
20003628:	410fc270 	.word	0x410fc270
2000362c:	e000e400 	.word	0xe000e400
20003630:	2000acc8 	.word	0x2000acc8
20003634:	2000accc 	.word	0x2000accc
20003638:	e000ed20 	.word	0xe000ed20
2000363c:	20009e08 	.word	0x20009e08
20003640:	e000ef34 	.word	0xe000ef34

20003644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
20003644:	b480      	push	{r7}
20003646:	b083      	sub	sp, #12
20003648:	af00      	add	r7, sp, #0
	__asm volatile
2000364a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000364e:	f383 8811 	msr	BASEPRI, r3
20003652:	f3bf 8f6f 	isb	sy
20003656:	f3bf 8f4f 	dsb	sy
2000365a:	607b      	str	r3, [r7, #4]
}
2000365c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
2000365e:	4b0f      	ldr	r3, [pc, #60]	; (2000369c <vPortEnterCritical+0x58>)
20003660:	681b      	ldr	r3, [r3, #0]
20003662:	3301      	adds	r3, #1
20003664:	4a0d      	ldr	r2, [pc, #52]	; (2000369c <vPortEnterCritical+0x58>)
20003666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
20003668:	4b0c      	ldr	r3, [pc, #48]	; (2000369c <vPortEnterCritical+0x58>)
2000366a:	681b      	ldr	r3, [r3, #0]
2000366c:	2b01      	cmp	r3, #1
2000366e:	d10f      	bne.n	20003690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003670:	4b0b      	ldr	r3, [pc, #44]	; (200036a0 <vPortEnterCritical+0x5c>)
20003672:	681b      	ldr	r3, [r3, #0]
20003674:	b2db      	uxtb	r3, r3
20003676:	2b00      	cmp	r3, #0
20003678:	d00a      	beq.n	20003690 <vPortEnterCritical+0x4c>
	__asm volatile
2000367a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000367e:	f383 8811 	msr	BASEPRI, r3
20003682:	f3bf 8f6f 	isb	sy
20003686:	f3bf 8f4f 	dsb	sy
2000368a:	603b      	str	r3, [r7, #0]
}
2000368c:	bf00      	nop
2000368e:	e7fe      	b.n	2000368e <vPortEnterCritical+0x4a>
	}
}
20003690:	bf00      	nop
20003692:	370c      	adds	r7, #12
20003694:	46bd      	mov	sp, r7
20003696:	f85d 7b04 	ldr.w	r7, [sp], #4
2000369a:	4770      	bx	lr
2000369c:	20009e08 	.word	0x20009e08
200036a0:	e000ed04 	.word	0xe000ed04

200036a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
200036a4:	b480      	push	{r7}
200036a6:	b083      	sub	sp, #12
200036a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
200036aa:	4b12      	ldr	r3, [pc, #72]	; (200036f4 <vPortExitCritical+0x50>)
200036ac:	681b      	ldr	r3, [r3, #0]
200036ae:	2b00      	cmp	r3, #0
200036b0:	d10a      	bne.n	200036c8 <vPortExitCritical+0x24>
	__asm volatile
200036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
200036b6:	f383 8811 	msr	BASEPRI, r3
200036ba:	f3bf 8f6f 	isb	sy
200036be:	f3bf 8f4f 	dsb	sy
200036c2:	607b      	str	r3, [r7, #4]
}
200036c4:	bf00      	nop
200036c6:	e7fe      	b.n	200036c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
200036c8:	4b0a      	ldr	r3, [pc, #40]	; (200036f4 <vPortExitCritical+0x50>)
200036ca:	681b      	ldr	r3, [r3, #0]
200036cc:	3b01      	subs	r3, #1
200036ce:	4a09      	ldr	r2, [pc, #36]	; (200036f4 <vPortExitCritical+0x50>)
200036d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
200036d2:	4b08      	ldr	r3, [pc, #32]	; (200036f4 <vPortExitCritical+0x50>)
200036d4:	681b      	ldr	r3, [r3, #0]
200036d6:	2b00      	cmp	r3, #0
200036d8:	d105      	bne.n	200036e6 <vPortExitCritical+0x42>
200036da:	2300      	movs	r3, #0
200036dc:	603b      	str	r3, [r7, #0]
	__asm volatile
200036de:	683b      	ldr	r3, [r7, #0]
200036e0:	f383 8811 	msr	BASEPRI, r3
}
200036e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
200036e6:	bf00      	nop
200036e8:	370c      	adds	r7, #12
200036ea:	46bd      	mov	sp, r7
200036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200036f0:	4770      	bx	lr
200036f2:	bf00      	nop
200036f4:	20009e08 	.word	0x20009e08
	...

20003700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003700:	f3ef 8009 	mrs	r0, PSP
20003704:	f3bf 8f6f 	isb	sy
20003708:	4b15      	ldr	r3, [pc, #84]	; (20003760 <pxCurrentTCBConst>)
2000370a:	681a      	ldr	r2, [r3, #0]
2000370c:	f01e 0f10 	tst.w	lr, #16
20003710:	bf08      	it	eq
20003712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
20003716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000371a:	6010      	str	r0, [r2, #0]
2000371c:	e92d 0009 	stmdb	sp!, {r0, r3}
20003720:	f04f 0050 	mov.w	r0, #80	; 0x50
20003724:	f380 8811 	msr	BASEPRI, r0
20003728:	f3bf 8f4f 	dsb	sy
2000372c:	f3bf 8f6f 	isb	sy
20003730:	f7fe febc 	bl	200024ac <vTaskSwitchContext>
20003734:	f04f 0000 	mov.w	r0, #0
20003738:	f380 8811 	msr	BASEPRI, r0
2000373c:	bc09      	pop	{r0, r3}
2000373e:	6819      	ldr	r1, [r3, #0]
20003740:	6808      	ldr	r0, [r1, #0]
20003742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003746:	f01e 0f10 	tst.w	lr, #16
2000374a:	bf08      	it	eq
2000374c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
20003750:	f380 8809 	msr	PSP, r0
20003754:	f3bf 8f6f 	isb	sy
20003758:	4770      	bx	lr
2000375a:	bf00      	nop
2000375c:	f3af 8000 	nop.w

20003760 <pxCurrentTCBConst>:
20003760:	2000a69c 	.word	0x2000a69c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
20003764:	bf00      	nop
20003766:	bf00      	nop

20003768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20003768:	b580      	push	{r7, lr}
2000376a:	b082      	sub	sp, #8
2000376c:	af00      	add	r7, sp, #0
	__asm volatile
2000376e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003772:	f383 8811 	msr	BASEPRI, r3
20003776:	f3bf 8f6f 	isb	sy
2000377a:	f3bf 8f4f 	dsb	sy
2000377e:	607b      	str	r3, [r7, #4]
}
20003780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20003782:	f7fe fdd9 	bl	20002338 <xTaskIncrementTick>
20003786:	4603      	mov	r3, r0
20003788:	2b00      	cmp	r3, #0
2000378a:	d003      	beq.n	20003794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
2000378c:	4b06      	ldr	r3, [pc, #24]	; (200037a8 <xPortSysTickHandler+0x40>)
2000378e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003792:	601a      	str	r2, [r3, #0]
20003794:	2300      	movs	r3, #0
20003796:	603b      	str	r3, [r7, #0]
	__asm volatile
20003798:	683b      	ldr	r3, [r7, #0]
2000379a:	f383 8811 	msr	BASEPRI, r3
}
2000379e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
200037a0:	bf00      	nop
200037a2:	3708      	adds	r7, #8
200037a4:	46bd      	mov	sp, r7
200037a6:	bd80      	pop	{r7, pc}
200037a8:	e000ed04 	.word	0xe000ed04

200037ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
200037ac:	b480      	push	{r7}
200037ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
200037b0:	4b0b      	ldr	r3, [pc, #44]	; (200037e0 <vPortSetupTimerInterrupt+0x34>)
200037b2:	2200      	movs	r2, #0
200037b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
200037b6:	4b0b      	ldr	r3, [pc, #44]	; (200037e4 <vPortSetupTimerInterrupt+0x38>)
200037b8:	2200      	movs	r2, #0
200037ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
200037bc:	4b0a      	ldr	r3, [pc, #40]	; (200037e8 <vPortSetupTimerInterrupt+0x3c>)
200037be:	681b      	ldr	r3, [r3, #0]
200037c0:	4a0a      	ldr	r2, [pc, #40]	; (200037ec <vPortSetupTimerInterrupt+0x40>)
200037c2:	fba2 2303 	umull	r2, r3, r2, r3
200037c6:	099b      	lsrs	r3, r3, #6
200037c8:	4a09      	ldr	r2, [pc, #36]	; (200037f0 <vPortSetupTimerInterrupt+0x44>)
200037ca:	3b01      	subs	r3, #1
200037cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
200037ce:	4b04      	ldr	r3, [pc, #16]	; (200037e0 <vPortSetupTimerInterrupt+0x34>)
200037d0:	2207      	movs	r2, #7
200037d2:	601a      	str	r2, [r3, #0]
}
200037d4:	bf00      	nop
200037d6:	46bd      	mov	sp, r7
200037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200037dc:	4770      	bx	lr
200037de:	bf00      	nop
200037e0:	e000e010 	.word	0xe000e010
200037e4:	e000e018 	.word	0xe000e018
200037e8:	20009e5c 	.word	0x20009e5c
200037ec:	10624dd3 	.word	0x10624dd3
200037f0:	e000e014 	.word	0xe000e014

200037f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
200037f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 20003804 <vPortEnableVFP+0x10>
200037f8:	6801      	ldr	r1, [r0, #0]
200037fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
200037fe:	6001      	str	r1, [r0, #0]
20003800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
20003802:	bf00      	nop
20003804:	e000ed88 	.word	0xe000ed88

20003808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20003808:	b480      	push	{r7}
2000380a:	b085      	sub	sp, #20
2000380c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
2000380e:	f3ef 8305 	mrs	r3, IPSR
20003812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20003814:	68fb      	ldr	r3, [r7, #12]
20003816:	2b0f      	cmp	r3, #15
20003818:	d914      	bls.n	20003844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
2000381a:	4a17      	ldr	r2, [pc, #92]	; (20003878 <vPortValidateInterruptPriority+0x70>)
2000381c:	68fb      	ldr	r3, [r7, #12]
2000381e:	4413      	add	r3, r2
20003820:	781b      	ldrb	r3, [r3, #0]
20003822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20003824:	4b15      	ldr	r3, [pc, #84]	; (2000387c <vPortValidateInterruptPriority+0x74>)
20003826:	781b      	ldrb	r3, [r3, #0]
20003828:	7afa      	ldrb	r2, [r7, #11]
2000382a:	429a      	cmp	r2, r3
2000382c:	d20a      	bcs.n	20003844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
2000382e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003832:	f383 8811 	msr	BASEPRI, r3
20003836:	f3bf 8f6f 	isb	sy
2000383a:	f3bf 8f4f 	dsb	sy
2000383e:	607b      	str	r3, [r7, #4]
}
20003840:	bf00      	nop
20003842:	e7fe      	b.n	20003842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
20003844:	4b0e      	ldr	r3, [pc, #56]	; (20003880 <vPortValidateInterruptPriority+0x78>)
20003846:	681b      	ldr	r3, [r3, #0]
20003848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
2000384c:	4b0d      	ldr	r3, [pc, #52]	; (20003884 <vPortValidateInterruptPriority+0x7c>)
2000384e:	681b      	ldr	r3, [r3, #0]
20003850:	429a      	cmp	r2, r3
20003852:	d90a      	bls.n	2000386a <vPortValidateInterruptPriority+0x62>
	__asm volatile
20003854:	f04f 0350 	mov.w	r3, #80	; 0x50
20003858:	f383 8811 	msr	BASEPRI, r3
2000385c:	f3bf 8f6f 	isb	sy
20003860:	f3bf 8f4f 	dsb	sy
20003864:	603b      	str	r3, [r7, #0]
}
20003866:	bf00      	nop
20003868:	e7fe      	b.n	20003868 <vPortValidateInterruptPriority+0x60>
	}
2000386a:	bf00      	nop
2000386c:	3714      	adds	r7, #20
2000386e:	46bd      	mov	sp, r7
20003870:	f85d 7b04 	ldr.w	r7, [sp], #4
20003874:	4770      	bx	lr
20003876:	bf00      	nop
20003878:	e000e3f0 	.word	0xe000e3f0
2000387c:	2000acc8 	.word	0x2000acc8
20003880:	e000ed0c 	.word	0xe000ed0c
20003884:	2000accc 	.word	0x2000accc

20003888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003888:	b580      	push	{r7, lr}
2000388a:	b08a      	sub	sp, #40	; 0x28
2000388c:	af00      	add	r7, sp, #0
2000388e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003890:	2300      	movs	r3, #0
20003892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
20003894:	f7fe fc94 	bl	200021c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003898:	4b5b      	ldr	r3, [pc, #364]	; (20003a08 <pvPortMalloc+0x180>)
2000389a:	681b      	ldr	r3, [r3, #0]
2000389c:	2b00      	cmp	r3, #0
2000389e:	d101      	bne.n	200038a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
200038a0:	f000 f920 	bl	20003ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
200038a4:	4b59      	ldr	r3, [pc, #356]	; (20003a0c <pvPortMalloc+0x184>)
200038a6:	681a      	ldr	r2, [r3, #0]
200038a8:	687b      	ldr	r3, [r7, #4]
200038aa:	4013      	ands	r3, r2
200038ac:	2b00      	cmp	r3, #0
200038ae:	f040 8093 	bne.w	200039d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
200038b2:	687b      	ldr	r3, [r7, #4]
200038b4:	2b00      	cmp	r3, #0
200038b6:	d01d      	beq.n	200038f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
200038b8:	2208      	movs	r2, #8
200038ba:	687b      	ldr	r3, [r7, #4]
200038bc:	4413      	add	r3, r2
200038be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
200038c0:	687b      	ldr	r3, [r7, #4]
200038c2:	f003 0307 	and.w	r3, r3, #7
200038c6:	2b00      	cmp	r3, #0
200038c8:	d014      	beq.n	200038f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
200038ca:	687b      	ldr	r3, [r7, #4]
200038cc:	f023 0307 	bic.w	r3, r3, #7
200038d0:	3308      	adds	r3, #8
200038d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
200038d4:	687b      	ldr	r3, [r7, #4]
200038d6:	f003 0307 	and.w	r3, r3, #7
200038da:	2b00      	cmp	r3, #0
200038dc:	d00a      	beq.n	200038f4 <pvPortMalloc+0x6c>
	__asm volatile
200038de:	f04f 0350 	mov.w	r3, #80	; 0x50
200038e2:	f383 8811 	msr	BASEPRI, r3
200038e6:	f3bf 8f6f 	isb	sy
200038ea:	f3bf 8f4f 	dsb	sy
200038ee:	617b      	str	r3, [r7, #20]
}
200038f0:	bf00      	nop
200038f2:	e7fe      	b.n	200038f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
200038f4:	687b      	ldr	r3, [r7, #4]
200038f6:	2b00      	cmp	r3, #0
200038f8:	d06e      	beq.n	200039d8 <pvPortMalloc+0x150>
200038fa:	4b45      	ldr	r3, [pc, #276]	; (20003a10 <pvPortMalloc+0x188>)
200038fc:	681b      	ldr	r3, [r3, #0]
200038fe:	687a      	ldr	r2, [r7, #4]
20003900:	429a      	cmp	r2, r3
20003902:	d869      	bhi.n	200039d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003904:	4b43      	ldr	r3, [pc, #268]	; (20003a14 <pvPortMalloc+0x18c>)
20003906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
20003908:	4b42      	ldr	r3, [pc, #264]	; (20003a14 <pvPortMalloc+0x18c>)
2000390a:	681b      	ldr	r3, [r3, #0]
2000390c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000390e:	e004      	b.n	2000391a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
20003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
20003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003916:	681b      	ldr	r3, [r3, #0]
20003918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000391c:	685b      	ldr	r3, [r3, #4]
2000391e:	687a      	ldr	r2, [r7, #4]
20003920:	429a      	cmp	r2, r3
20003922:	d903      	bls.n	2000392c <pvPortMalloc+0xa4>
20003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003926:	681b      	ldr	r3, [r3, #0]
20003928:	2b00      	cmp	r3, #0
2000392a:	d1f1      	bne.n	20003910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
2000392c:	4b36      	ldr	r3, [pc, #216]	; (20003a08 <pvPortMalloc+0x180>)
2000392e:	681b      	ldr	r3, [r3, #0]
20003930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003932:	429a      	cmp	r2, r3
20003934:	d050      	beq.n	200039d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003936:	6a3b      	ldr	r3, [r7, #32]
20003938:	681b      	ldr	r3, [r3, #0]
2000393a:	2208      	movs	r2, #8
2000393c:	4413      	add	r3, r2
2000393e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003942:	681a      	ldr	r2, [r3, #0]
20003944:	6a3b      	ldr	r3, [r7, #32]
20003946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000394a:	685a      	ldr	r2, [r3, #4]
2000394c:	687b      	ldr	r3, [r7, #4]
2000394e:	1ad2      	subs	r2, r2, r3
20003950:	2308      	movs	r3, #8
20003952:	005b      	lsls	r3, r3, #1
20003954:	429a      	cmp	r2, r3
20003956:	d91f      	bls.n	20003998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000395a:	687b      	ldr	r3, [r7, #4]
2000395c:	4413      	add	r3, r2
2000395e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003960:	69bb      	ldr	r3, [r7, #24]
20003962:	f003 0307 	and.w	r3, r3, #7
20003966:	2b00      	cmp	r3, #0
20003968:	d00a      	beq.n	20003980 <pvPortMalloc+0xf8>
	__asm volatile
2000396a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000396e:	f383 8811 	msr	BASEPRI, r3
20003972:	f3bf 8f6f 	isb	sy
20003976:	f3bf 8f4f 	dsb	sy
2000397a:	613b      	str	r3, [r7, #16]
}
2000397c:	bf00      	nop
2000397e:	e7fe      	b.n	2000397e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003982:	685a      	ldr	r2, [r3, #4]
20003984:	687b      	ldr	r3, [r7, #4]
20003986:	1ad2      	subs	r2, r2, r3
20003988:	69bb      	ldr	r3, [r7, #24]
2000398a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
2000398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000398e:	687a      	ldr	r2, [r7, #4]
20003990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003992:	69b8      	ldr	r0, [r7, #24]
20003994:	f000 f908 	bl	20003ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003998:	4b1d      	ldr	r3, [pc, #116]	; (20003a10 <pvPortMalloc+0x188>)
2000399a:	681a      	ldr	r2, [r3, #0]
2000399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000399e:	685b      	ldr	r3, [r3, #4]
200039a0:	1ad3      	subs	r3, r2, r3
200039a2:	4a1b      	ldr	r2, [pc, #108]	; (20003a10 <pvPortMalloc+0x188>)
200039a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
200039a6:	4b1a      	ldr	r3, [pc, #104]	; (20003a10 <pvPortMalloc+0x188>)
200039a8:	681a      	ldr	r2, [r3, #0]
200039aa:	4b1b      	ldr	r3, [pc, #108]	; (20003a18 <pvPortMalloc+0x190>)
200039ac:	681b      	ldr	r3, [r3, #0]
200039ae:	429a      	cmp	r2, r3
200039b0:	d203      	bcs.n	200039ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
200039b2:	4b17      	ldr	r3, [pc, #92]	; (20003a10 <pvPortMalloc+0x188>)
200039b4:	681b      	ldr	r3, [r3, #0]
200039b6:	4a18      	ldr	r2, [pc, #96]	; (20003a18 <pvPortMalloc+0x190>)
200039b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
200039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039bc:	685a      	ldr	r2, [r3, #4]
200039be:	4b13      	ldr	r3, [pc, #76]	; (20003a0c <pvPortMalloc+0x184>)
200039c0:	681b      	ldr	r3, [r3, #0]
200039c2:	431a      	orrs	r2, r3
200039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
200039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200039ca:	2200      	movs	r2, #0
200039cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
200039ce:	4b13      	ldr	r3, [pc, #76]	; (20003a1c <pvPortMalloc+0x194>)
200039d0:	681b      	ldr	r3, [r3, #0]
200039d2:	3301      	adds	r3, #1
200039d4:	4a11      	ldr	r2, [pc, #68]	; (20003a1c <pvPortMalloc+0x194>)
200039d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
200039d8:	f7fe fc00 	bl	200021dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
200039dc:	69fb      	ldr	r3, [r7, #28]
200039de:	f003 0307 	and.w	r3, r3, #7
200039e2:	2b00      	cmp	r3, #0
200039e4:	d00a      	beq.n	200039fc <pvPortMalloc+0x174>
	__asm volatile
200039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
200039ea:	f383 8811 	msr	BASEPRI, r3
200039ee:	f3bf 8f6f 	isb	sy
200039f2:	f3bf 8f4f 	dsb	sy
200039f6:	60fb      	str	r3, [r7, #12]
}
200039f8:	bf00      	nop
200039fa:	e7fe      	b.n	200039fa <pvPortMalloc+0x172>
	return pvReturn;
200039fc:	69fb      	ldr	r3, [r7, #28]
}
200039fe:	4618      	mov	r0, r3
20003a00:	3728      	adds	r7, #40	; 0x28
20003a02:	46bd      	mov	sp, r7
20003a04:	bd80      	pop	{r7, pc}
20003a06:	bf00      	nop
20003a08:	2000e8d8 	.word	0x2000e8d8
20003a0c:	2000e8ec 	.word	0x2000e8ec
20003a10:	2000e8dc 	.word	0x2000e8dc
20003a14:	2000e8d0 	.word	0x2000e8d0
20003a18:	2000e8e0 	.word	0x2000e8e0
20003a1c:	2000e8e4 	.word	0x2000e8e4

20003a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003a20:	b580      	push	{r7, lr}
20003a22:	b086      	sub	sp, #24
20003a24:	af00      	add	r7, sp, #0
20003a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20003a28:	687b      	ldr	r3, [r7, #4]
20003a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
20003a2c:	687b      	ldr	r3, [r7, #4]
20003a2e:	2b00      	cmp	r3, #0
20003a30:	d04d      	beq.n	20003ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003a32:	2308      	movs	r3, #8
20003a34:	425b      	negs	r3, r3
20003a36:	697a      	ldr	r2, [r7, #20]
20003a38:	4413      	add	r3, r2
20003a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
20003a3c:	697b      	ldr	r3, [r7, #20]
20003a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20003a40:	693b      	ldr	r3, [r7, #16]
20003a42:	685a      	ldr	r2, [r3, #4]
20003a44:	4b24      	ldr	r3, [pc, #144]	; (20003ad8 <vPortFree+0xb8>)
20003a46:	681b      	ldr	r3, [r3, #0]
20003a48:	4013      	ands	r3, r2
20003a4a:	2b00      	cmp	r3, #0
20003a4c:	d10a      	bne.n	20003a64 <vPortFree+0x44>
	__asm volatile
20003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003a52:	f383 8811 	msr	BASEPRI, r3
20003a56:	f3bf 8f6f 	isb	sy
20003a5a:	f3bf 8f4f 	dsb	sy
20003a5e:	60fb      	str	r3, [r7, #12]
}
20003a60:	bf00      	nop
20003a62:	e7fe      	b.n	20003a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20003a64:	693b      	ldr	r3, [r7, #16]
20003a66:	681b      	ldr	r3, [r3, #0]
20003a68:	2b00      	cmp	r3, #0
20003a6a:	d00a      	beq.n	20003a82 <vPortFree+0x62>
	__asm volatile
20003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003a70:	f383 8811 	msr	BASEPRI, r3
20003a74:	f3bf 8f6f 	isb	sy
20003a78:	f3bf 8f4f 	dsb	sy
20003a7c:	60bb      	str	r3, [r7, #8]
}
20003a7e:	bf00      	nop
20003a80:	e7fe      	b.n	20003a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003a82:	693b      	ldr	r3, [r7, #16]
20003a84:	685a      	ldr	r2, [r3, #4]
20003a86:	4b14      	ldr	r3, [pc, #80]	; (20003ad8 <vPortFree+0xb8>)
20003a88:	681b      	ldr	r3, [r3, #0]
20003a8a:	4013      	ands	r3, r2
20003a8c:	2b00      	cmp	r3, #0
20003a8e:	d01e      	beq.n	20003ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003a90:	693b      	ldr	r3, [r7, #16]
20003a92:	681b      	ldr	r3, [r3, #0]
20003a94:	2b00      	cmp	r3, #0
20003a96:	d11a      	bne.n	20003ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003a98:	693b      	ldr	r3, [r7, #16]
20003a9a:	685a      	ldr	r2, [r3, #4]
20003a9c:	4b0e      	ldr	r3, [pc, #56]	; (20003ad8 <vPortFree+0xb8>)
20003a9e:	681b      	ldr	r3, [r3, #0]
20003aa0:	43db      	mvns	r3, r3
20003aa2:	401a      	ands	r2, r3
20003aa4:	693b      	ldr	r3, [r7, #16]
20003aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003aa8:	f7fe fb8a 	bl	200021c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003aac:	693b      	ldr	r3, [r7, #16]
20003aae:	685a      	ldr	r2, [r3, #4]
20003ab0:	4b0a      	ldr	r3, [pc, #40]	; (20003adc <vPortFree+0xbc>)
20003ab2:	681b      	ldr	r3, [r3, #0]
20003ab4:	4413      	add	r3, r2
20003ab6:	4a09      	ldr	r2, [pc, #36]	; (20003adc <vPortFree+0xbc>)
20003ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20003aba:	6938      	ldr	r0, [r7, #16]
20003abc:	f000 f874 	bl	20003ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
20003ac0:	4b07      	ldr	r3, [pc, #28]	; (20003ae0 <vPortFree+0xc0>)
20003ac2:	681b      	ldr	r3, [r3, #0]
20003ac4:	3301      	adds	r3, #1
20003ac6:	4a06      	ldr	r2, [pc, #24]	; (20003ae0 <vPortFree+0xc0>)
20003ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
20003aca:	f7fe fb87 	bl	200021dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003ace:	bf00      	nop
20003ad0:	3718      	adds	r7, #24
20003ad2:	46bd      	mov	sp, r7
20003ad4:	bd80      	pop	{r7, pc}
20003ad6:	bf00      	nop
20003ad8:	2000e8ec 	.word	0x2000e8ec
20003adc:	2000e8dc 	.word	0x2000e8dc
20003ae0:	2000e8e8 	.word	0x2000e8e8

20003ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003ae4:	b480      	push	{r7}
20003ae6:	b085      	sub	sp, #20
20003ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003aea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
20003aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003af0:	4b27      	ldr	r3, [pc, #156]	; (20003b90 <prvHeapInit+0xac>)
20003af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003af4:	68fb      	ldr	r3, [r7, #12]
20003af6:	f003 0307 	and.w	r3, r3, #7
20003afa:	2b00      	cmp	r3, #0
20003afc:	d00c      	beq.n	20003b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20003afe:	68fb      	ldr	r3, [r7, #12]
20003b00:	3307      	adds	r3, #7
20003b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003b04:	68fb      	ldr	r3, [r7, #12]
20003b06:	f023 0307 	bic.w	r3, r3, #7
20003b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20003b0c:	68ba      	ldr	r2, [r7, #8]
20003b0e:	68fb      	ldr	r3, [r7, #12]
20003b10:	1ad3      	subs	r3, r2, r3
20003b12:	4a1f      	ldr	r2, [pc, #124]	; (20003b90 <prvHeapInit+0xac>)
20003b14:	4413      	add	r3, r2
20003b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20003b18:	68fb      	ldr	r3, [r7, #12]
20003b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20003b1c:	4a1d      	ldr	r2, [pc, #116]	; (20003b94 <prvHeapInit+0xb0>)
20003b1e:	687b      	ldr	r3, [r7, #4]
20003b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
20003b22:	4b1c      	ldr	r3, [pc, #112]	; (20003b94 <prvHeapInit+0xb0>)
20003b24:	2200      	movs	r2, #0
20003b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20003b28:	687b      	ldr	r3, [r7, #4]
20003b2a:	68ba      	ldr	r2, [r7, #8]
20003b2c:	4413      	add	r3, r2
20003b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
20003b30:	2208      	movs	r2, #8
20003b32:	68fb      	ldr	r3, [r7, #12]
20003b34:	1a9b      	subs	r3, r3, r2
20003b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003b38:	68fb      	ldr	r3, [r7, #12]
20003b3a:	f023 0307 	bic.w	r3, r3, #7
20003b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
20003b40:	68fb      	ldr	r3, [r7, #12]
20003b42:	4a15      	ldr	r2, [pc, #84]	; (20003b98 <prvHeapInit+0xb4>)
20003b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
20003b46:	4b14      	ldr	r3, [pc, #80]	; (20003b98 <prvHeapInit+0xb4>)
20003b48:	681b      	ldr	r3, [r3, #0]
20003b4a:	2200      	movs	r2, #0
20003b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
20003b4e:	4b12      	ldr	r3, [pc, #72]	; (20003b98 <prvHeapInit+0xb4>)
20003b50:	681b      	ldr	r3, [r3, #0]
20003b52:	2200      	movs	r2, #0
20003b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20003b56:	687b      	ldr	r3, [r7, #4]
20003b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20003b5a:	683b      	ldr	r3, [r7, #0]
20003b5c:	68fa      	ldr	r2, [r7, #12]
20003b5e:	1ad2      	subs	r2, r2, r3
20003b60:	683b      	ldr	r3, [r7, #0]
20003b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20003b64:	4b0c      	ldr	r3, [pc, #48]	; (20003b98 <prvHeapInit+0xb4>)
20003b66:	681a      	ldr	r2, [r3, #0]
20003b68:	683b      	ldr	r3, [r7, #0]
20003b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003b6c:	683b      	ldr	r3, [r7, #0]
20003b6e:	685b      	ldr	r3, [r3, #4]
20003b70:	4a0a      	ldr	r2, [pc, #40]	; (20003b9c <prvHeapInit+0xb8>)
20003b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003b74:	683b      	ldr	r3, [r7, #0]
20003b76:	685b      	ldr	r3, [r3, #4]
20003b78:	4a09      	ldr	r2, [pc, #36]	; (20003ba0 <prvHeapInit+0xbc>)
20003b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20003b7c:	4b09      	ldr	r3, [pc, #36]	; (20003ba4 <prvHeapInit+0xc0>)
20003b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20003b82:	601a      	str	r2, [r3, #0]
}
20003b84:	bf00      	nop
20003b86:	3714      	adds	r7, #20
20003b88:	46bd      	mov	sp, r7
20003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20003b8e:	4770      	bx	lr
20003b90:	2000acd0 	.word	0x2000acd0
20003b94:	2000e8d0 	.word	0x2000e8d0
20003b98:	2000e8d8 	.word	0x2000e8d8
20003b9c:	2000e8e0 	.word	0x2000e8e0
20003ba0:	2000e8dc 	.word	0x2000e8dc
20003ba4:	2000e8ec 	.word	0x2000e8ec

20003ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20003ba8:	b480      	push	{r7}
20003baa:	b085      	sub	sp, #20
20003bac:	af00      	add	r7, sp, #0
20003bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20003bb0:	4b28      	ldr	r3, [pc, #160]	; (20003c54 <prvInsertBlockIntoFreeList+0xac>)
20003bb2:	60fb      	str	r3, [r7, #12]
20003bb4:	e002      	b.n	20003bbc <prvInsertBlockIntoFreeList+0x14>
20003bb6:	68fb      	ldr	r3, [r7, #12]
20003bb8:	681b      	ldr	r3, [r3, #0]
20003bba:	60fb      	str	r3, [r7, #12]
20003bbc:	68fb      	ldr	r3, [r7, #12]
20003bbe:	681b      	ldr	r3, [r3, #0]
20003bc0:	687a      	ldr	r2, [r7, #4]
20003bc2:	429a      	cmp	r2, r3
20003bc4:	d8f7      	bhi.n	20003bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20003bc6:	68fb      	ldr	r3, [r7, #12]
20003bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20003bca:	68fb      	ldr	r3, [r7, #12]
20003bcc:	685b      	ldr	r3, [r3, #4]
20003bce:	68ba      	ldr	r2, [r7, #8]
20003bd0:	4413      	add	r3, r2
20003bd2:	687a      	ldr	r2, [r7, #4]
20003bd4:	429a      	cmp	r2, r3
20003bd6:	d108      	bne.n	20003bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20003bd8:	68fb      	ldr	r3, [r7, #12]
20003bda:	685a      	ldr	r2, [r3, #4]
20003bdc:	687b      	ldr	r3, [r7, #4]
20003bde:	685b      	ldr	r3, [r3, #4]
20003be0:	441a      	add	r2, r3
20003be2:	68fb      	ldr	r3, [r7, #12]
20003be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20003be6:	68fb      	ldr	r3, [r7, #12]
20003be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
20003bea:	687b      	ldr	r3, [r7, #4]
20003bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
20003bee:	687b      	ldr	r3, [r7, #4]
20003bf0:	685b      	ldr	r3, [r3, #4]
20003bf2:	68ba      	ldr	r2, [r7, #8]
20003bf4:	441a      	add	r2, r3
20003bf6:	68fb      	ldr	r3, [r7, #12]
20003bf8:	681b      	ldr	r3, [r3, #0]
20003bfa:	429a      	cmp	r2, r3
20003bfc:	d118      	bne.n	20003c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
20003bfe:	68fb      	ldr	r3, [r7, #12]
20003c00:	681a      	ldr	r2, [r3, #0]
20003c02:	4b15      	ldr	r3, [pc, #84]	; (20003c58 <prvInsertBlockIntoFreeList+0xb0>)
20003c04:	681b      	ldr	r3, [r3, #0]
20003c06:	429a      	cmp	r2, r3
20003c08:	d00d      	beq.n	20003c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
20003c0a:	687b      	ldr	r3, [r7, #4]
20003c0c:	685a      	ldr	r2, [r3, #4]
20003c0e:	68fb      	ldr	r3, [r7, #12]
20003c10:	681b      	ldr	r3, [r3, #0]
20003c12:	685b      	ldr	r3, [r3, #4]
20003c14:	441a      	add	r2, r3
20003c16:	687b      	ldr	r3, [r7, #4]
20003c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
20003c1a:	68fb      	ldr	r3, [r7, #12]
20003c1c:	681b      	ldr	r3, [r3, #0]
20003c1e:	681a      	ldr	r2, [r3, #0]
20003c20:	687b      	ldr	r3, [r7, #4]
20003c22:	601a      	str	r2, [r3, #0]
20003c24:	e008      	b.n	20003c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20003c26:	4b0c      	ldr	r3, [pc, #48]	; (20003c58 <prvInsertBlockIntoFreeList+0xb0>)
20003c28:	681a      	ldr	r2, [r3, #0]
20003c2a:	687b      	ldr	r3, [r7, #4]
20003c2c:	601a      	str	r2, [r3, #0]
20003c2e:	e003      	b.n	20003c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
20003c30:	68fb      	ldr	r3, [r7, #12]
20003c32:	681a      	ldr	r2, [r3, #0]
20003c34:	687b      	ldr	r3, [r7, #4]
20003c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
20003c38:	68fa      	ldr	r2, [r7, #12]
20003c3a:	687b      	ldr	r3, [r7, #4]
20003c3c:	429a      	cmp	r2, r3
20003c3e:	d002      	beq.n	20003c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20003c40:	68fb      	ldr	r3, [r7, #12]
20003c42:	687a      	ldr	r2, [r7, #4]
20003c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20003c46:	bf00      	nop
20003c48:	3714      	adds	r7, #20
20003c4a:	46bd      	mov	sp, r7
20003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c50:	4770      	bx	lr
20003c52:	bf00      	nop
20003c54:	2000e8d0 	.word	0x2000e8d0
20003c58:	2000e8d8 	.word	0x2000e8d8

20003c5c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
20003c5c:	b480      	push	{r7}
20003c5e:	b083      	sub	sp, #12
20003c60:	af00      	add	r7, sp, #0
20003c62:	6078      	str	r0, [r7, #4]
20003c64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20003c66:	687b      	ldr	r3, [r7, #4]
20003c68:	683a      	ldr	r2, [r7, #0]
20003c6a:	619a      	str	r2, [r3, #24]
}
20003c6c:	bf00      	nop
20003c6e:	370c      	adds	r7, #12
20003c70:	46bd      	mov	sp, r7
20003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c76:	4770      	bx	lr

20003c78 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
20003c78:	b480      	push	{r7}
20003c7a:	b083      	sub	sp, #12
20003c7c:	af00      	add	r7, sp, #0
20003c7e:	6078      	str	r0, [r7, #4]
20003c80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
20003c82:	683b      	ldr	r3, [r7, #0]
20003c84:	041a      	lsls	r2, r3, #16
20003c86:	687b      	ldr	r3, [r7, #4]
20003c88:	619a      	str	r2, [r3, #24]
}
20003c8a:	bf00      	nop
20003c8c:	370c      	adds	r7, #12
20003c8e:	46bd      	mov	sp, r7
20003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c94:	4770      	bx	lr

20003c96 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
20003c96:	b480      	push	{r7}
20003c98:	b083      	sub	sp, #12
20003c9a:	af00      	add	r7, sp, #0
20003c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
20003c9e:	687b      	ldr	r3, [r7, #4]
20003ca0:	689b      	ldr	r3, [r3, #8]
20003ca2:	f003 0301 	and.w	r3, r3, #1
20003ca6:	2b01      	cmp	r3, #1
20003ca8:	d101      	bne.n	20003cae <LL_SPI_IsActiveFlag_RXNE+0x18>
20003caa:	2301      	movs	r3, #1
20003cac:	e000      	b.n	20003cb0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
20003cae:	2300      	movs	r3, #0
}
20003cb0:	4618      	mov	r0, r3
20003cb2:	370c      	adds	r7, #12
20003cb4:	46bd      	mov	sp, r7
20003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20003cba:	4770      	bx	lr

20003cbc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
20003cbc:	b480      	push	{r7}
20003cbe:	b083      	sub	sp, #12
20003cc0:	af00      	add	r7, sp, #0
20003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
20003cc4:	687b      	ldr	r3, [r7, #4]
20003cc6:	689b      	ldr	r3, [r3, #8]
20003cc8:	f003 0302 	and.w	r3, r3, #2
20003ccc:	2b02      	cmp	r3, #2
20003cce:	d101      	bne.n	20003cd4 <LL_SPI_IsActiveFlag_TXE+0x18>
20003cd0:	2301      	movs	r3, #1
20003cd2:	e000      	b.n	20003cd6 <LL_SPI_IsActiveFlag_TXE+0x1a>
20003cd4:	2300      	movs	r3, #0
}
20003cd6:	4618      	mov	r0, r3
20003cd8:	370c      	adds	r7, #12
20003cda:	46bd      	mov	sp, r7
20003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
20003ce0:	4770      	bx	lr

20003ce2 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
20003ce2:	b480      	push	{r7}
20003ce4:	b083      	sub	sp, #12
20003ce6:	af00      	add	r7, sp, #0
20003ce8:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
20003cea:	687b      	ldr	r3, [r7, #4]
20003cec:	330c      	adds	r3, #12
}
20003cee:	4618      	mov	r0, r3
20003cf0:	370c      	adds	r7, #12
20003cf2:	46bd      	mov	sp, r7
20003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
20003cf8:	4770      	bx	lr

20003cfa <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
20003cfa:	b480      	push	{r7}
20003cfc:	b083      	sub	sp, #12
20003cfe:	af00      	add	r7, sp, #0
20003d00:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
20003d02:	687b      	ldr	r3, [r7, #4]
20003d04:	330c      	adds	r3, #12
20003d06:	781b      	ldrb	r3, [r3, #0]
20003d08:	b2db      	uxtb	r3, r3
}
20003d0a:	4618      	mov	r0, r3
20003d0c:	370c      	adds	r7, #12
20003d0e:	46bd      	mov	sp, r7
20003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d14:	4770      	bx	lr

20003d16 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
20003d16:	b480      	push	{r7}
20003d18:	b085      	sub	sp, #20
20003d1a:	af00      	add	r7, sp, #0
20003d1c:	6078      	str	r0, [r7, #4]
20003d1e:	460b      	mov	r3, r1
20003d20:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
20003d22:	687b      	ldr	r3, [r7, #4]
20003d24:	330c      	adds	r3, #12
20003d26:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
20003d28:	68fb      	ldr	r3, [r7, #12]
20003d2a:	78fa      	ldrb	r2, [r7, #3]
20003d2c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
20003d2e:	bf00      	nop
20003d30:	3714      	adds	r7, #20
20003d32:	46bd      	mov	sp, r7
20003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d38:	4770      	bx	lr
	...

20003d3c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
20003d3c:	b480      	push	{r7}
20003d3e:	b083      	sub	sp, #12
20003d40:	af00      	add	r7, sp, #0
20003d42:	6078      	str	r0, [r7, #4]
20003d44:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20003d46:	4a0c      	ldr	r2, [pc, #48]	; (20003d78 <LL_DMA_EnableStream+0x3c>)
20003d48:	683b      	ldr	r3, [r7, #0]
20003d4a:	4413      	add	r3, r2
20003d4c:	781b      	ldrb	r3, [r3, #0]
20003d4e:	461a      	mov	r2, r3
20003d50:	687b      	ldr	r3, [r7, #4]
20003d52:	4413      	add	r3, r2
20003d54:	681b      	ldr	r3, [r3, #0]
20003d56:	4908      	ldr	r1, [pc, #32]	; (20003d78 <LL_DMA_EnableStream+0x3c>)
20003d58:	683a      	ldr	r2, [r7, #0]
20003d5a:	440a      	add	r2, r1
20003d5c:	7812      	ldrb	r2, [r2, #0]
20003d5e:	4611      	mov	r1, r2
20003d60:	687a      	ldr	r2, [r7, #4]
20003d62:	440a      	add	r2, r1
20003d64:	f043 0301 	orr.w	r3, r3, #1
20003d68:	6013      	str	r3, [r2, #0]
}
20003d6a:	bf00      	nop
20003d6c:	370c      	adds	r7, #12
20003d6e:	46bd      	mov	sp, r7
20003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d74:	4770      	bx	lr
20003d76:	bf00      	nop
20003d78:	20006014 	.word	0x20006014

20003d7c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
20003d7c:	b480      	push	{r7}
20003d7e:	b083      	sub	sp, #12
20003d80:	af00      	add	r7, sp, #0
20003d82:	6078      	str	r0, [r7, #4]
20003d84:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20003d86:	4a0c      	ldr	r2, [pc, #48]	; (20003db8 <LL_DMA_DisableStream+0x3c>)
20003d88:	683b      	ldr	r3, [r7, #0]
20003d8a:	4413      	add	r3, r2
20003d8c:	781b      	ldrb	r3, [r3, #0]
20003d8e:	461a      	mov	r2, r3
20003d90:	687b      	ldr	r3, [r7, #4]
20003d92:	4413      	add	r3, r2
20003d94:	681b      	ldr	r3, [r3, #0]
20003d96:	4908      	ldr	r1, [pc, #32]	; (20003db8 <LL_DMA_DisableStream+0x3c>)
20003d98:	683a      	ldr	r2, [r7, #0]
20003d9a:	440a      	add	r2, r1
20003d9c:	7812      	ldrb	r2, [r2, #0]
20003d9e:	4611      	mov	r1, r2
20003da0:	687a      	ldr	r2, [r7, #4]
20003da2:	440a      	add	r2, r1
20003da4:	f023 0301 	bic.w	r3, r3, #1
20003da8:	6013      	str	r3, [r2, #0]
}
20003daa:	bf00      	nop
20003dac:	370c      	adds	r7, #12
20003dae:	46bd      	mov	sp, r7
20003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
20003db4:	4770      	bx	lr
20003db6:	bf00      	nop
20003db8:	20006014 	.word	0x20006014

20003dbc <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
20003dbc:	b480      	push	{r7}
20003dbe:	b083      	sub	sp, #12
20003dc0:	af00      	add	r7, sp, #0
20003dc2:	6078      	str	r0, [r7, #4]
20003dc4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
20003dc6:	4a08      	ldr	r2, [pc, #32]	; (20003de8 <LL_DMA_GetDataTransferDirection+0x2c>)
20003dc8:	683b      	ldr	r3, [r7, #0]
20003dca:	4413      	add	r3, r2
20003dcc:	781b      	ldrb	r3, [r3, #0]
20003dce:	461a      	mov	r2, r3
20003dd0:	687b      	ldr	r3, [r7, #4]
20003dd2:	4413      	add	r3, r2
20003dd4:	681b      	ldr	r3, [r3, #0]
20003dd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
20003dda:	4618      	mov	r0, r3
20003ddc:	370c      	adds	r7, #12
20003dde:	46bd      	mov	sp, r7
20003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
20003de4:	4770      	bx	lr
20003de6:	bf00      	nop
20003de8:	20006014 	.word	0x20006014

20003dec <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
20003dec:	b480      	push	{r7}
20003dee:	b085      	sub	sp, #20
20003df0:	af00      	add	r7, sp, #0
20003df2:	60f8      	str	r0, [r7, #12]
20003df4:	60b9      	str	r1, [r7, #8]
20003df6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
20003df8:	4a0d      	ldr	r2, [pc, #52]	; (20003e30 <LL_DMA_SetDataLength+0x44>)
20003dfa:	68bb      	ldr	r3, [r7, #8]
20003dfc:	4413      	add	r3, r2
20003dfe:	781b      	ldrb	r3, [r3, #0]
20003e00:	461a      	mov	r2, r3
20003e02:	68fb      	ldr	r3, [r7, #12]
20003e04:	4413      	add	r3, r2
20003e06:	685b      	ldr	r3, [r3, #4]
20003e08:	0c1b      	lsrs	r3, r3, #16
20003e0a:	041b      	lsls	r3, r3, #16
20003e0c:	4908      	ldr	r1, [pc, #32]	; (20003e30 <LL_DMA_SetDataLength+0x44>)
20003e0e:	68ba      	ldr	r2, [r7, #8]
20003e10:	440a      	add	r2, r1
20003e12:	7812      	ldrb	r2, [r2, #0]
20003e14:	4611      	mov	r1, r2
20003e16:	68fa      	ldr	r2, [r7, #12]
20003e18:	440a      	add	r2, r1
20003e1a:	4611      	mov	r1, r2
20003e1c:	687a      	ldr	r2, [r7, #4]
20003e1e:	4313      	orrs	r3, r2
20003e20:	604b      	str	r3, [r1, #4]
}
20003e22:	bf00      	nop
20003e24:	3714      	adds	r7, #20
20003e26:	46bd      	mov	sp, r7
20003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e2c:	4770      	bx	lr
20003e2e:	bf00      	nop
20003e30:	20006014 	.word	0x20006014

20003e34 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
20003e34:	b480      	push	{r7}
20003e36:	b085      	sub	sp, #20
20003e38:	af00      	add	r7, sp, #0
20003e3a:	60f8      	str	r0, [r7, #12]
20003e3c:	60b9      	str	r1, [r7, #8]
20003e3e:	607a      	str	r2, [r7, #4]
20003e40:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
20003e42:	69bb      	ldr	r3, [r7, #24]
20003e44:	2b40      	cmp	r3, #64	; 0x40
20003e46:	d114      	bne.n	20003e72 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
20003e48:	4a17      	ldr	r2, [pc, #92]	; (20003ea8 <LL_DMA_ConfigAddresses+0x74>)
20003e4a:	68bb      	ldr	r3, [r7, #8]
20003e4c:	4413      	add	r3, r2
20003e4e:	781b      	ldrb	r3, [r3, #0]
20003e50:	461a      	mov	r2, r3
20003e52:	68fb      	ldr	r3, [r7, #12]
20003e54:	4413      	add	r3, r2
20003e56:	461a      	mov	r2, r3
20003e58:	687b      	ldr	r3, [r7, #4]
20003e5a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
20003e5c:	4a12      	ldr	r2, [pc, #72]	; (20003ea8 <LL_DMA_ConfigAddresses+0x74>)
20003e5e:	68bb      	ldr	r3, [r7, #8]
20003e60:	4413      	add	r3, r2
20003e62:	781b      	ldrb	r3, [r3, #0]
20003e64:	461a      	mov	r2, r3
20003e66:	68fb      	ldr	r3, [r7, #12]
20003e68:	4413      	add	r3, r2
20003e6a:	461a      	mov	r2, r3
20003e6c:	683b      	ldr	r3, [r7, #0]
20003e6e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
20003e70:	e013      	b.n	20003e9a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
20003e72:	4a0d      	ldr	r2, [pc, #52]	; (20003ea8 <LL_DMA_ConfigAddresses+0x74>)
20003e74:	68bb      	ldr	r3, [r7, #8]
20003e76:	4413      	add	r3, r2
20003e78:	781b      	ldrb	r3, [r3, #0]
20003e7a:	461a      	mov	r2, r3
20003e7c:	68fb      	ldr	r3, [r7, #12]
20003e7e:	4413      	add	r3, r2
20003e80:	461a      	mov	r2, r3
20003e82:	687b      	ldr	r3, [r7, #4]
20003e84:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
20003e86:	4a08      	ldr	r2, [pc, #32]	; (20003ea8 <LL_DMA_ConfigAddresses+0x74>)
20003e88:	68bb      	ldr	r3, [r7, #8]
20003e8a:	4413      	add	r3, r2
20003e8c:	781b      	ldrb	r3, [r3, #0]
20003e8e:	461a      	mov	r2, r3
20003e90:	68fb      	ldr	r3, [r7, #12]
20003e92:	4413      	add	r3, r2
20003e94:	461a      	mov	r2, r3
20003e96:	683b      	ldr	r3, [r7, #0]
20003e98:	60d3      	str	r3, [r2, #12]
}
20003e9a:	bf00      	nop
20003e9c:	3714      	adds	r7, #20
20003e9e:	46bd      	mov	sp, r7
20003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
20003ea4:	4770      	bx	lr
20003ea6:	bf00      	nop
20003ea8:	20006014 	.word	0x20006014

20003eac <TFTDisplay_ILI9341_Initialization>:
static void tftDisplay_ILI9341_Reset(void);
static void tftDisplay_ILI9341_FontsInitialization(void);
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_Initialization(uint16_t screenWidth, uint16_t screeHeight)
{
20003eac:	b580      	push	{r7, lr}
20003eae:	b082      	sub	sp, #8
20003eb0:	af00      	add	r7, sp, #0
20003eb2:	4603      	mov	r3, r0
20003eb4:	460a      	mov	r2, r1
20003eb6:	80fb      	strh	r3, [r7, #6]
20003eb8:	4613      	mov	r3, r2
20003eba:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE();
20003ebc:	2104      	movs	r1, #4
20003ebe:	4823      	ldr	r0, [pc, #140]	; (20003f4c <TFTDisplay_ILI9341_Initialization+0xa0>)
20003ec0:	f7ff feda 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	tftDisplay_ILI9341_Reset();
20003ec4:	f000 fd16 	bl	200048f4 <tftDisplay_ILI9341_Reset>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SWRESET);
20003ec8:	2001      	movs	r0, #1
20003eca:	f000 fbf7 	bl	200046bc <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(1000);
20003ece:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003ed2:	f7fc fba3 	bl	2000061c <LL_mDelay>

	tftDisplay_ILI9341_Init_PowerControl_A();
20003ed6:	f000 fdad 	bl	20004a34 <tftDisplay_ILI9341_Init_PowerControl_A>
	tftDisplay_ILI9341_Init_PowerControl_B();
20003eda:	f000 fdc9 	bl	20004a70 <tftDisplay_ILI9341_Init_PowerControl_B>
	tftDisplay_ILI9341_Init_DriverTimingControl_A();
20003ede:	f000 fddf 	bl	20004aa0 <tftDisplay_ILI9341_Init_DriverTimingControl_A>
	tftDisplay_ILI9341_Init_DriverTimingControl_B();
20003ee2:	f000 fdf5 	bl	20004ad0 <tftDisplay_ILI9341_Init_DriverTimingControl_B>
	tftDisplay_ILI9341_Init_PowerSequenceControl();
20003ee6:	f000 fe07 	bl	20004af8 <tftDisplay_ILI9341_Init_PowerSequenceControl>
	tftDisplay_ILI9341_Init_PumpRatioControl();
20003eea:	f000 fe1f 	bl	20004b2c <tftDisplay_ILI9341_Init_PumpRatioControl>
	tftDisplay_ILI9341_Init_PowerControlVRH();
20003eee:	f000 fe2d 	bl	20004b4c <tftDisplay_ILI9341_Init_PowerControlVRH>
	tftDisplay_ILI9341_Init_PowerControlSAP();
20003ef2:	f000 fe3b 	bl	20004b6c <tftDisplay_ILI9341_Init_PowerControlSAP>
	tftDisplay_ILI9341_Init_VCOMControl_1();
20003ef6:	f000 fe49 	bl	20004b8c <tftDisplay_ILI9341_Init_VCOMControl_1>
	tftDisplay_ILI9341_Init_VCOMControl_2();
20003efa:	f000 fe5b 	bl	20004bb4 <tftDisplay_ILI9341_Init_VCOMControl_2>
	tftDisplay_ILI9341_Init_MemmoryAccessControl();
20003efe:	f000 fe69 	bl	20004bd4 <tftDisplay_ILI9341_Init_MemmoryAccessControl>
	tftDisplay_ILI9341_Init_PixelFormatSet();
20003f02:	f000 fe77 	bl	20004bf4 <tftDisplay_ILI9341_Init_PixelFormatSet>
	tftDisplay_ILI9341_Init_FrameRationControl();
20003f06:	f000 fe85 	bl	20004c14 <tftDisplay_ILI9341_Init_FrameRationControl>
	tftDisplay_ILI9341_Init_DisplayFunctionControl();
20003f0a:	f000 fe97 	bl	20004c3c <tftDisplay_ILI9341_Init_DisplayFunctionControl>
	tftDisplay_ILI9341_Init_GammaSet();
20003f0e:	f000 fea5 	bl	20004c5c <tftDisplay_ILI9341_Init_GammaSet>
	tftDisplay_ILI9341_Init_PositiveGammaCorection();
20003f12:	f000 feb3 	bl	20004c7c <tftDisplay_ILI9341_Init_PositiveGammaCorection>
	tftDisplay_ILI9341_Init_NegativeGammaCorection();
20003f16:	f000 feed 	bl	20004cf4 <tftDisplay_ILI9341_Init_NegativeGammaCorection>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SLEEP_OUT);
20003f1a:	2011      	movs	r0, #17
20003f1c:	f000 fbce 	bl	200046bc <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(120);
20003f20:	2078      	movs	r0, #120	; 0x78
20003f22:	f7fc fb7b 	bl	2000061c <LL_mDelay>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DISPLAY_ON);
20003f26:	2029      	movs	r0, #41	; 0x29
20003f28:	f000 fbc8 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(TFT_ILI9341_ROTATION);
20003f2c:	2048      	movs	r0, #72	; 0x48
20003f2e:	f000 fc13 	bl	20004758 <tftDisplay_ILI9341_SendData>
	TFTDisplay_ILI9341_WIDTH = screenWidth;
20003f32:	4a07      	ldr	r2, [pc, #28]	; (20003f50 <TFTDisplay_ILI9341_Initialization+0xa4>)
20003f34:	88fb      	ldrh	r3, [r7, #6]
20003f36:	8013      	strh	r3, [r2, #0]
	TFTDisplay_ILI9341_HEIGHT = screeHeight;
20003f38:	4a06      	ldr	r2, [pc, #24]	; (20003f54 <TFTDisplay_ILI9341_Initialization+0xa8>)
20003f3a:	88bb      	ldrh	r3, [r7, #4]
20003f3c:	8013      	strh	r3, [r2, #0]
	tftDisplay_ILI9341_FontsInitialization();
20003f3e:	f000 fced 	bl	2000491c <tftDisplay_ILI9341_FontsInitialization>
}
20003f42:	bf00      	nop
20003f44:	3708      	adds	r7, #8
20003f46:	46bd      	mov	sp, r7
20003f48:	bd80      	pop	{r7, pc}
20003f4a:	bf00      	nop
20003f4c:	40020800 	.word	0x40020800
20003f50:	2000e8f0 	.word	0x2000e8f0
20003f54:	2000e8f2 	.word	0x2000e8f2

20003f58 <TFTDisplay_ILI9341_FillRect>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
20003f58:	b590      	push	{r4, r7, lr}
20003f5a:	b089      	sub	sp, #36	; 0x24
20003f5c:	af00      	add	r7, sp, #0
20003f5e:	4604      	mov	r4, r0
20003f60:	4608      	mov	r0, r1
20003f62:	4611      	mov	r1, r2
20003f64:	461a      	mov	r2, r3
20003f66:	4623      	mov	r3, r4
20003f68:	80fb      	strh	r3, [r7, #6]
20003f6a:	4603      	mov	r3, r0
20003f6c:	80bb      	strh	r3, [r7, #4]
20003f6e:	460b      	mov	r3, r1
20003f70:	807b      	strh	r3, [r7, #2]
20003f72:	4613      	mov	r3, r2
20003f74:	803b      	strh	r3, [r7, #0]
  uint32_t i = 0;
20003f76:	2300      	movs	r3, #0
20003f78:	61fb      	str	r3, [r7, #28]
  uint32_t n = 0;
20003f7a:	2300      	movs	r3, #0
20003f7c:	613b      	str	r3, [r7, #16]
  uint8_t cnt = 0;
20003f7e:	2300      	movs	r3, #0
20003f80:	76fb      	strb	r3, [r7, #27]
  uint32_t buf_size = 0;
20003f82:	2300      	movs	r3, #0
20003f84:	617b      	str	r3, [r7, #20]

  if((x1 >= TFTDisplay_ILI9341_WIDTH) || (y1 >= TFTDisplay_ILI9341_HEIGHT) ||
20003f86:	4b47      	ldr	r3, [pc, #284]	; (200040a4 <TFTDisplay_ILI9341_FillRect+0x14c>)
20003f88:	881b      	ldrh	r3, [r3, #0]
20003f8a:	88fa      	ldrh	r2, [r7, #6]
20003f8c:	429a      	cmp	r2, r3
20003f8e:	f080 8084 	bcs.w	2000409a <TFTDisplay_ILI9341_FillRect+0x142>
20003f92:	4b45      	ldr	r3, [pc, #276]	; (200040a8 <TFTDisplay_ILI9341_FillRect+0x150>)
20003f94:	881b      	ldrh	r3, [r3, #0]
20003f96:	88ba      	ldrh	r2, [r7, #4]
20003f98:	429a      	cmp	r2, r3
20003f9a:	d27e      	bcs.n	2000409a <TFTDisplay_ILI9341_FillRect+0x142>
     (x2 >= TFTDisplay_ILI9341_WIDTH) || (y2 >= TFTDisplay_ILI9341_HEIGHT)) {
20003f9c:	4b41      	ldr	r3, [pc, #260]	; (200040a4 <TFTDisplay_ILI9341_FillRect+0x14c>)
20003f9e:	881b      	ldrh	r3, [r3, #0]
  if((x1 >= TFTDisplay_ILI9341_WIDTH) || (y1 >= TFTDisplay_ILI9341_HEIGHT) ||
20003fa0:	887a      	ldrh	r2, [r7, #2]
20003fa2:	429a      	cmp	r2, r3
20003fa4:	d279      	bcs.n	2000409a <TFTDisplay_ILI9341_FillRect+0x142>
     (x2 >= TFTDisplay_ILI9341_WIDTH) || (y2 >= TFTDisplay_ILI9341_HEIGHT)) {
20003fa6:	4b40      	ldr	r3, [pc, #256]	; (200040a8 <TFTDisplay_ILI9341_FillRect+0x150>)
20003fa8:	881b      	ldrh	r3, [r3, #0]
20003faa:	883a      	ldrh	r2, [r7, #0]
20003fac:	429a      	cmp	r2, r3
20003fae:	d274      	bcs.n	2000409a <TFTDisplay_ILI9341_FillRect+0x142>
	  return;
  }
  if(x1>x2) {
20003fb0:	88fa      	ldrh	r2, [r7, #6]
20003fb2:	887b      	ldrh	r3, [r7, #2]
20003fb4:	429a      	cmp	r2, r3
20003fb6:	d905      	bls.n	20003fc4 <TFTDisplay_ILI9341_FillRect+0x6c>
	  SWAP(x1,x2);
20003fb8:	88fb      	ldrh	r3, [r7, #6]
20003fba:	81fb      	strh	r3, [r7, #14]
20003fbc:	887b      	ldrh	r3, [r7, #2]
20003fbe:	80fb      	strh	r3, [r7, #6]
20003fc0:	89fb      	ldrh	r3, [r7, #14]
20003fc2:	807b      	strh	r3, [r7, #2]
  }
  if(y1>y2) {
20003fc4:	88ba      	ldrh	r2, [r7, #4]
20003fc6:	883b      	ldrh	r3, [r7, #0]
20003fc8:	429a      	cmp	r2, r3
20003fca:	d905      	bls.n	20003fd8 <TFTDisplay_ILI9341_FillRect+0x80>
	  SWAP(y1,y2);
20003fcc:	88bb      	ldrh	r3, [r7, #4]
20003fce:	81bb      	strh	r3, [r7, #12]
20003fd0:	883b      	ldrh	r3, [r7, #0]
20003fd2:	80bb      	strh	r3, [r7, #4]
20003fd4:	89bb      	ldrh	r3, [r7, #12]
20003fd6:	803b      	strh	r3, [r7, #0]
  }
  tftDisplay_ILI9341_SetAddrWindow(x1, y1, x2, y2);
20003fd8:	883b      	ldrh	r3, [r7, #0]
20003fda:	887a      	ldrh	r2, [r7, #2]
20003fdc:	88b9      	ldrh	r1, [r7, #4]
20003fde:	88f8      	ldrh	r0, [r7, #6]
20003fe0:	f000 fcd8 	bl	20004994 <tftDisplay_ILI9341_SetAddrWindow>
  n = (x2-x1+1)*(y2-y1+1)*2;
20003fe4:	887a      	ldrh	r2, [r7, #2]
20003fe6:	88fb      	ldrh	r3, [r7, #6]
20003fe8:	1ad3      	subs	r3, r2, r3
20003fea:	3301      	adds	r3, #1
20003fec:	8839      	ldrh	r1, [r7, #0]
20003fee:	88ba      	ldrh	r2, [r7, #4]
20003ff0:	1a8a      	subs	r2, r1, r2
20003ff2:	3201      	adds	r2, #1
20003ff4:	fb02 f303 	mul.w	r3, r2, r3
20003ff8:	005b      	lsls	r3, r3, #1
20003ffa:	613b      	str	r3, [r7, #16]
  if(n<=65535)
20003ffc:	693b      	ldr	r3, [r7, #16]
20003ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20004002:	d204      	bcs.n	2000400e <TFTDisplay_ILI9341_FillRect+0xb6>
  {
    cnt = 1;
20004004:	2301      	movs	r3, #1
20004006:	76fb      	strb	r3, [r7, #27]
    buf_size = n;
20004008:	693b      	ldr	r3, [r7, #16]
2000400a:	617b      	str	r3, [r7, #20]
2000400c:	e024      	b.n	20004058 <TFTDisplay_ILI9341_FillRect+0x100>
  }
  else
  {
    cnt = n/2;
2000400e:	693b      	ldr	r3, [r7, #16]
20004010:	085b      	lsrs	r3, r3, #1
20004012:	76fb      	strb	r3, [r7, #27]
    buf_size = 2;
20004014:	2302      	movs	r3, #2
20004016:	617b      	str	r3, [r7, #20]
    for(i = 3; i < n/3; i++)
20004018:	2303      	movs	r3, #3
2000401a:	61fb      	str	r3, [r7, #28]
2000401c:	e014      	b.n	20004048 <TFTDisplay_ILI9341_FillRect+0xf0>
    {
      if(n%i == 0)
2000401e:	693b      	ldr	r3, [r7, #16]
20004020:	69fa      	ldr	r2, [r7, #28]
20004022:	fbb3 f2f2 	udiv	r2, r3, r2
20004026:	69f9      	ldr	r1, [r7, #28]
20004028:	fb01 f202 	mul.w	r2, r1, r2
2000402c:	1a9b      	subs	r3, r3, r2
2000402e:	2b00      	cmp	r3, #0
20004030:	d107      	bne.n	20004042 <TFTDisplay_ILI9341_FillRect+0xea>
      {
        cnt = i;
20004032:	69fb      	ldr	r3, [r7, #28]
20004034:	76fb      	strb	r3, [r7, #27]
        buf_size = n/i;
20004036:	693a      	ldr	r2, [r7, #16]
20004038:	69fb      	ldr	r3, [r7, #28]
2000403a:	fbb2 f3f3 	udiv	r3, r2, r3
2000403e:	617b      	str	r3, [r7, #20]
        break;
20004040:	e00a      	b.n	20004058 <TFTDisplay_ILI9341_FillRect+0x100>
    for(i = 3; i < n/3; i++)
20004042:	69fb      	ldr	r3, [r7, #28]
20004044:	3301      	adds	r3, #1
20004046:	61fb      	str	r3, [r7, #28]
20004048:	693b      	ldr	r3, [r7, #16]
2000404a:	4a18      	ldr	r2, [pc, #96]	; (200040ac <TFTDisplay_ILI9341_FillRect+0x154>)
2000404c:	fba2 2303 	umull	r2, r3, r2, r3
20004050:	085b      	lsrs	r3, r3, #1
20004052:	69fa      	ldr	r2, [r7, #28]
20004054:	429a      	cmp	r2, r3
20004056:	d3e2      	bcc.n	2000401e <TFTDisplay_ILI9341_FillRect+0xc6>
      }
    }
  }
  for(i = 0; i < buf_size/2; i++)
20004058:	2300      	movs	r3, #0
2000405a:	61fb      	str	r3, [r7, #28]
2000405c:	e011      	b.n	20004082 <TFTDisplay_ILI9341_FillRect+0x12a>
  {
	  DataBuffer[i*2] = color >> 8;
2000405e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20004060:	0a1b      	lsrs	r3, r3, #8
20004062:	b29a      	uxth	r2, r3
20004064:	69fb      	ldr	r3, [r7, #28]
20004066:	005b      	lsls	r3, r3, #1
20004068:	b2d1      	uxtb	r1, r2
2000406a:	4a11      	ldr	r2, [pc, #68]	; (200040b0 <TFTDisplay_ILI9341_FillRect+0x158>)
2000406c:	54d1      	strb	r1, [r2, r3]
	  DataBuffer[i*2+1] = color & 0xFF;
2000406e:	69fb      	ldr	r3, [r7, #28]
20004070:	005b      	lsls	r3, r3, #1
20004072:	3301      	adds	r3, #1
20004074:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
20004076:	b2d1      	uxtb	r1, r2
20004078:	4a0d      	ldr	r2, [pc, #52]	; (200040b0 <TFTDisplay_ILI9341_FillRect+0x158>)
2000407a:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < buf_size/2; i++)
2000407c:	69fb      	ldr	r3, [r7, #28]
2000407e:	3301      	adds	r3, #1
20004080:	61fb      	str	r3, [r7, #28]
20004082:	697b      	ldr	r3, [r7, #20]
20004084:	085b      	lsrs	r3, r3, #1
20004086:	69fa      	ldr	r2, [r7, #28]
20004088:	429a      	cmp	r2, r3
2000408a:	d3e8      	bcc.n	2000405e <TFTDisplay_ILI9341_FillRect+0x106>
  }

  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], buf_size, cnt);
2000408c:	7efb      	ldrb	r3, [r7, #27]
2000408e:	461a      	mov	r2, r3
20004090:	6979      	ldr	r1, [r7, #20]
20004092:	4807      	ldr	r0, [pc, #28]	; (200040b0 <TFTDisplay_ILI9341_FillRect+0x158>)
20004094:	f000 fbde 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
20004098:	e000      	b.n	2000409c <TFTDisplay_ILI9341_FillRect+0x144>
	  return;
2000409a:	bf00      	nop
}
2000409c:	3724      	adds	r7, #36	; 0x24
2000409e:	46bd      	mov	sp, r7
200040a0:	bd90      	pop	{r4, r7, pc}
200040a2:	bf00      	nop
200040a4:	2000e8f0 	.word	0x2000e8f0
200040a8:	2000e8f2 	.word	0x2000e8f2
200040ac:	aaaaaaab 	.word	0xaaaaaaab
200040b0:	2000e8f4 	.word	0x2000e8f4

200040b4 <TFTDisplay_ILI9341_DrawPixel>:
{
	TFTDisplay_ILI9341_FillRect(0, 0, TFTDisplay_ILI9341_WIDTH-1, TFTDisplay_ILI9341_HEIGHT-1, color);
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawPixel(int x, int y, uint16_t color)
{
200040b4:	b580      	push	{r7, lr}
200040b6:	b084      	sub	sp, #16
200040b8:	af00      	add	r7, sp, #0
200040ba:	60f8      	str	r0, [r7, #12]
200040bc:	60b9      	str	r1, [r7, #8]
200040be:	4613      	mov	r3, r2
200040c0:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFTDisplay_ILI9341_WIDTH)||(y>=TFTDisplay_ILI9341_HEIGHT))
200040c2:	68fb      	ldr	r3, [r7, #12]
200040c4:	2b00      	cmp	r3, #0
200040c6:	db2b      	blt.n	20004120 <TFTDisplay_ILI9341_DrawPixel+0x6c>
200040c8:	68bb      	ldr	r3, [r7, #8]
200040ca:	2b00      	cmp	r3, #0
200040cc:	db28      	blt.n	20004120 <TFTDisplay_ILI9341_DrawPixel+0x6c>
200040ce:	4b16      	ldr	r3, [pc, #88]	; (20004128 <TFTDisplay_ILI9341_DrawPixel+0x74>)
200040d0:	881b      	ldrh	r3, [r3, #0]
200040d2:	461a      	mov	r2, r3
200040d4:	68fb      	ldr	r3, [r7, #12]
200040d6:	4293      	cmp	r3, r2
200040d8:	da22      	bge.n	20004120 <TFTDisplay_ILI9341_DrawPixel+0x6c>
200040da:	4b14      	ldr	r3, [pc, #80]	; (2000412c <TFTDisplay_ILI9341_DrawPixel+0x78>)
200040dc:	881b      	ldrh	r3, [r3, #0]
200040de:	461a      	mov	r2, r3
200040e0:	68bb      	ldr	r3, [r7, #8]
200040e2:	4293      	cmp	r3, r2
200040e4:	da1c      	bge.n	20004120 <TFTDisplay_ILI9341_DrawPixel+0x6c>
	{
		return;
	}

	tftDisplay_ILI9341_SetAddrWindow(x,y,x,y);
200040e6:	68fb      	ldr	r3, [r7, #12]
200040e8:	b298      	uxth	r0, r3
200040ea:	68bb      	ldr	r3, [r7, #8]
200040ec:	b299      	uxth	r1, r3
200040ee:	68fb      	ldr	r3, [r7, #12]
200040f0:	b29a      	uxth	r2, r3
200040f2:	68bb      	ldr	r3, [r7, #8]
200040f4:	b29b      	uxth	r3, r3
200040f6:	f000 fc4d 	bl	20004994 <tftDisplay_ILI9341_SetAddrWindow>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
200040fa:	202c      	movs	r0, #44	; 0x2c
200040fc:	f000 fade 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	DataBuffer[0] = color>>8;
20004100:	88fb      	ldrh	r3, [r7, #6]
20004102:	0a1b      	lsrs	r3, r3, #8
20004104:	b29b      	uxth	r3, r3
20004106:	b2da      	uxtb	r2, r3
20004108:	4b09      	ldr	r3, [pc, #36]	; (20004130 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
2000410a:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = color & 0xFF;
2000410c:	88fb      	ldrh	r3, [r7, #6]
2000410e:	b2da      	uxtb	r2, r3
20004110:	4b07      	ldr	r3, [pc, #28]	; (20004130 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004112:	705a      	strb	r2, [r3, #1]


	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004114:	2201      	movs	r2, #1
20004116:	2102      	movs	r1, #2
20004118:	4805      	ldr	r0, [pc, #20]	; (20004130 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
2000411a:	f000 fb9b 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
2000411e:	e000      	b.n	20004122 <TFTDisplay_ILI9341_DrawPixel+0x6e>
		return;
20004120:	bf00      	nop
}
20004122:	3710      	adds	r7, #16
20004124:	46bd      	mov	sp, r7
20004126:	bd80      	pop	{r7, pc}
20004128:	2000e8f0 	.word	0x2000e8f0
2000412c:	2000e8f2 	.word	0x2000e8f2
20004130:	2000e8f4 	.word	0x2000e8f4

20004134 <TFTDisplay_ILI9341_DrawLine>:
//------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawLine(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
20004134:	b590      	push	{r4, r7, lr}
20004136:	b08b      	sub	sp, #44	; 0x2c
20004138:	af00      	add	r7, sp, #0
2000413a:	4604      	mov	r4, r0
2000413c:	4608      	mov	r0, r1
2000413e:	4611      	mov	r1, r2
20004140:	461a      	mov	r2, r3
20004142:	4623      	mov	r3, r4
20004144:	80fb      	strh	r3, [r7, #6]
20004146:	4603      	mov	r3, r0
20004148:	80bb      	strh	r3, [r7, #4]
2000414a:	460b      	mov	r3, r1
2000414c:	807b      	strh	r3, [r7, #2]
2000414e:	4613      	mov	r3, r2
20004150:	803b      	strh	r3, [r7, #0]
    int steep = abs(y_end-y_start)>abs(x_end-x_start);
20004152:	883a      	ldrh	r2, [r7, #0]
20004154:	88bb      	ldrh	r3, [r7, #4]
20004156:	1ad3      	subs	r3, r2, r3
20004158:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
2000415c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20004160:	8879      	ldrh	r1, [r7, #2]
20004162:	88fb      	ldrh	r3, [r7, #6]
20004164:	1acb      	subs	r3, r1, r3
20004166:	2b00      	cmp	r3, #0
20004168:	bfb8      	it	lt
2000416a:	425b      	neglt	r3, r3
2000416c:	429a      	cmp	r2, r3
2000416e:	bfcc      	ite	gt
20004170:	2301      	movgt	r3, #1
20004172:	2300      	movle	r3, #0
20004174:	b2db      	uxtb	r3, r3
20004176:	61fb      	str	r3, [r7, #28]
    int dx=0;
20004178:	2300      	movs	r3, #0
2000417a:	61bb      	str	r3, [r7, #24]
    int dy=0;
2000417c:	2300      	movs	r3, #0
2000417e:	617b      	str	r3, [r7, #20]
    int err=0;
20004180:	2300      	movs	r3, #0
20004182:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep=0;
20004184:	2300      	movs	r3, #0
20004186:	623b      	str	r3, [r7, #32]

    if (steep)
20004188:	69fb      	ldr	r3, [r7, #28]
2000418a:	2b00      	cmp	r3, #0
2000418c:	d00b      	beq.n	200041a6 <TFTDisplay_ILI9341_DrawLine+0x72>
    {
    	SWAP(x_start,y_start);
2000418e:	88fb      	ldrh	r3, [r7, #6]
20004190:	827b      	strh	r3, [r7, #18]
20004192:	88bb      	ldrh	r3, [r7, #4]
20004194:	80fb      	strh	r3, [r7, #6]
20004196:	8a7b      	ldrh	r3, [r7, #18]
20004198:	80bb      	strh	r3, [r7, #4]
    	SWAP(x_end,y_end);
2000419a:	887b      	ldrh	r3, [r7, #2]
2000419c:	823b      	strh	r3, [r7, #16]
2000419e:	883b      	ldrh	r3, [r7, #0]
200041a0:	807b      	strh	r3, [r7, #2]
200041a2:	8a3b      	ldrh	r3, [r7, #16]
200041a4:	803b      	strh	r3, [r7, #0]
    }

    if(x_start>x_end)
200041a6:	88fa      	ldrh	r2, [r7, #6]
200041a8:	887b      	ldrh	r3, [r7, #2]
200041aa:	429a      	cmp	r2, r3
200041ac:	d90b      	bls.n	200041c6 <TFTDisplay_ILI9341_DrawLine+0x92>
    {
    	SWAP(x_start,x_end);
200041ae:	88fb      	ldrh	r3, [r7, #6]
200041b0:	81fb      	strh	r3, [r7, #14]
200041b2:	887b      	ldrh	r3, [r7, #2]
200041b4:	80fb      	strh	r3, [r7, #6]
200041b6:	89fb      	ldrh	r3, [r7, #14]
200041b8:	807b      	strh	r3, [r7, #2]
    	SWAP(y_start,y_end);
200041ba:	88bb      	ldrh	r3, [r7, #4]
200041bc:	81bb      	strh	r3, [r7, #12]
200041be:	883b      	ldrh	r3, [r7, #0]
200041c0:	80bb      	strh	r3, [r7, #4]
200041c2:	89bb      	ldrh	r3, [r7, #12]
200041c4:	803b      	strh	r3, [r7, #0]
    }

    dx=x_end-x_start;
200041c6:	887a      	ldrh	r2, [r7, #2]
200041c8:	88fb      	ldrh	r3, [r7, #6]
200041ca:	1ad3      	subs	r3, r2, r3
200041cc:	61bb      	str	r3, [r7, #24]
    dy=abs(y_end-y_start);
200041ce:	883a      	ldrh	r2, [r7, #0]
200041d0:	88bb      	ldrh	r3, [r7, #4]
200041d2:	1ad3      	subs	r3, r2, r3
200041d4:	2b00      	cmp	r3, #0
200041d6:	bfb8      	it	lt
200041d8:	425b      	neglt	r3, r3
200041da:	617b      	str	r3, [r7, #20]
    err=dx/2;
200041dc:	69bb      	ldr	r3, [r7, #24]
200041de:	0fda      	lsrs	r2, r3, #31
200041e0:	4413      	add	r3, r2
200041e2:	105b      	asrs	r3, r3, #1
200041e4:	627b      	str	r3, [r7, #36]	; 0x24

    if(y_start<y_end)
200041e6:	88ba      	ldrh	r2, [r7, #4]
200041e8:	883b      	ldrh	r3, [r7, #0]
200041ea:	429a      	cmp	r2, r3
200041ec:	d202      	bcs.n	200041f4 <TFTDisplay_ILI9341_DrawLine+0xc0>
    {
        ystep = 1;
200041ee:	2301      	movs	r3, #1
200041f0:	623b      	str	r3, [r7, #32]
200041f2:	e026      	b.n	20004242 <TFTDisplay_ILI9341_DrawLine+0x10e>
    }
    else
    {
        ystep = -1;
200041f4:	f04f 33ff 	mov.w	r3, #4294967295
200041f8:	623b      	str	r3, [r7, #32]
    }
    for (;x_start<=x_end;x_start++)
200041fa:	e022      	b.n	20004242 <TFTDisplay_ILI9341_DrawLine+0x10e>
    {
       if (steep)
200041fc:	69fb      	ldr	r3, [r7, #28]
200041fe:	2b00      	cmp	r3, #0
20004200:	d006      	beq.n	20004210 <TFTDisplay_ILI9341_DrawLine+0xdc>
       {
    	   TFTDisplay_ILI9341_DrawPixel(y_start,x_start,color);
20004202:	88bb      	ldrh	r3, [r7, #4]
20004204:	88f9      	ldrh	r1, [r7, #6]
20004206:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20004208:	4618      	mov	r0, r3
2000420a:	f7ff ff53 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
2000420e:	e005      	b.n	2000421c <TFTDisplay_ILI9341_DrawLine+0xe8>
       }
       else
       {
    	   TFTDisplay_ILI9341_DrawPixel(x_start,y_start,color);
20004210:	88fb      	ldrh	r3, [r7, #6]
20004212:	88b9      	ldrh	r1, [r7, #4]
20004214:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20004216:	4618      	mov	r0, r3
20004218:	f7ff ff4c 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
       }
       err-=dy;
2000421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000421e:	697b      	ldr	r3, [r7, #20]
20004220:	1ad3      	subs	r3, r2, r3
20004222:	627b      	str	r3, [r7, #36]	; 0x24
       if (err<0)
20004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004226:	2b00      	cmp	r3, #0
20004228:	da08      	bge.n	2000423c <TFTDisplay_ILI9341_DrawLine+0x108>
       {
        y_start += ystep;
2000422a:	6a3b      	ldr	r3, [r7, #32]
2000422c:	b29a      	uxth	r2, r3
2000422e:	88bb      	ldrh	r3, [r7, #4]
20004230:	4413      	add	r3, r2
20004232:	80bb      	strh	r3, [r7, #4]
        err+=dx;
20004234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004236:	69bb      	ldr	r3, [r7, #24]
20004238:	4413      	add	r3, r2
2000423a:	627b      	str	r3, [r7, #36]	; 0x24
    for (;x_start<=x_end;x_start++)
2000423c:	88fb      	ldrh	r3, [r7, #6]
2000423e:	3301      	adds	r3, #1
20004240:	80fb      	strh	r3, [r7, #6]
20004242:	88fa      	ldrh	r2, [r7, #6]
20004244:	887b      	ldrh	r3, [r7, #2]
20004246:	429a      	cmp	r2, r3
20004248:	d9d8      	bls.n	200041fc <TFTDisplay_ILI9341_DrawLine+0xc8>
       }
    }
}
2000424a:	bf00      	nop
2000424c:	bf00      	nop
2000424e:	372c      	adds	r7, #44	; 0x2c
20004250:	46bd      	mov	sp, r7
20004252:	bd90      	pop	{r4, r7, pc}

20004254 <TFTDisplay_ILI9341_DrawClearRect>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawClearRect(uint16_t start_x, uint16_t start_y,
        								uint16_t end_x, uint16_t end_y, uint16_t color)
{
20004254:	b590      	push	{r4, r7, lr}
20004256:	b085      	sub	sp, #20
20004258:	af02      	add	r7, sp, #8
2000425a:	4604      	mov	r4, r0
2000425c:	4608      	mov	r0, r1
2000425e:	4611      	mov	r1, r2
20004260:	461a      	mov	r2, r3
20004262:	4623      	mov	r3, r4
20004264:	80fb      	strh	r3, [r7, #6]
20004266:	4603      	mov	r3, r0
20004268:	80bb      	strh	r3, [r7, #4]
2000426a:	460b      	mov	r3, r1
2000426c:	807b      	strh	r3, [r7, #2]
2000426e:	4613      	mov	r3, r2
20004270:	803b      	strh	r3, [r7, #0]
	TFTDisplay_ILI9341_DrawLine(start_x,start_y,end_x,start_y,color);
20004272:	88bc      	ldrh	r4, [r7, #4]
20004274:	887a      	ldrh	r2, [r7, #2]
20004276:	88b9      	ldrh	r1, [r7, #4]
20004278:	88f8      	ldrh	r0, [r7, #6]
2000427a:	8b3b      	ldrh	r3, [r7, #24]
2000427c:	9300      	str	r3, [sp, #0]
2000427e:	4623      	mov	r3, r4
20004280:	f7ff ff58 	bl	20004134 <TFTDisplay_ILI9341_DrawLine>
    TFTDisplay_ILI9341_DrawLine(end_x, start_y, end_x, end_y, color);
20004284:	883c      	ldrh	r4, [r7, #0]
20004286:	887a      	ldrh	r2, [r7, #2]
20004288:	88b9      	ldrh	r1, [r7, #4]
2000428a:	8878      	ldrh	r0, [r7, #2]
2000428c:	8b3b      	ldrh	r3, [r7, #24]
2000428e:	9300      	str	r3, [sp, #0]
20004290:	4623      	mov	r3, r4
20004292:	f7ff ff4f 	bl	20004134 <TFTDisplay_ILI9341_DrawLine>
    TFTDisplay_ILI9341_DrawLine(start_x, start_y, start_x, end_y, color);
20004296:	883c      	ldrh	r4, [r7, #0]
20004298:	88fa      	ldrh	r2, [r7, #6]
2000429a:	88b9      	ldrh	r1, [r7, #4]
2000429c:	88f8      	ldrh	r0, [r7, #6]
2000429e:	8b3b      	ldrh	r3, [r7, #24]
200042a0:	9300      	str	r3, [sp, #0]
200042a2:	4623      	mov	r3, r4
200042a4:	f7ff ff46 	bl	20004134 <TFTDisplay_ILI9341_DrawLine>
    TFTDisplay_ILI9341_DrawLine(start_x, end_y, end_x, end_y, color);
200042a8:	883c      	ldrh	r4, [r7, #0]
200042aa:	887a      	ldrh	r2, [r7, #2]
200042ac:	8839      	ldrh	r1, [r7, #0]
200042ae:	88f8      	ldrh	r0, [r7, #6]
200042b0:	8b3b      	ldrh	r3, [r7, #24]
200042b2:	9300      	str	r3, [sp, #0]
200042b4:	4623      	mov	r3, r4
200042b6:	f7ff ff3d 	bl	20004134 <TFTDisplay_ILI9341_DrawLine>
}
200042ba:	bf00      	nop
200042bc:	370c      	adds	r7, #12
200042be:	46bd      	mov	sp, r7
200042c0:	bd90      	pop	{r4, r7, pc}

200042c2 <TFTDisplay_ILI9341_DrawCircle>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawCircle(uint16_t x_Position, uint16_t y_Position, int radius, uint16_t color)
{
200042c2:	b580      	push	{r7, lr}
200042c4:	b08a      	sub	sp, #40	; 0x28
200042c6:	af00      	add	r7, sp, #0
200042c8:	60ba      	str	r2, [r7, #8]
200042ca:	461a      	mov	r2, r3
200042cc:	4603      	mov	r3, r0
200042ce:	81fb      	strh	r3, [r7, #14]
200042d0:	460b      	mov	r3, r1
200042d2:	81bb      	strh	r3, [r7, #12]
200042d4:	4613      	mov	r3, r2
200042d6:	80fb      	strh	r3, [r7, #6]
	int f = 1-radius;
200042d8:	68bb      	ldr	r3, [r7, #8]
200042da:	f1c3 0301 	rsb	r3, r3, #1
200042de:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x=1;
200042e0:	2301      	movs	r3, #1
200042e2:	623b      	str	r3, [r7, #32]
	int ddF_y=-2*radius;
200042e4:	68ba      	ldr	r2, [r7, #8]
200042e6:	4613      	mov	r3, r2
200042e8:	07db      	lsls	r3, r3, #31
200042ea:	1a9b      	subs	r3, r3, r2
200042ec:	005b      	lsls	r3, r3, #1
200042ee:	61fb      	str	r3, [r7, #28]
	int x = 0;
200042f0:	2300      	movs	r3, #0
200042f2:	61bb      	str	r3, [r7, #24]
	int y = radius;
200042f4:	68bb      	ldr	r3, [r7, #8]
200042f6:	617b      	str	r3, [r7, #20]

	TFTDisplay_ILI9341_DrawPixel(x_Position,y_Position+radius,color);
200042f8:	89f8      	ldrh	r0, [r7, #14]
200042fa:	89ba      	ldrh	r2, [r7, #12]
200042fc:	68bb      	ldr	r3, [r7, #8]
200042fe:	4413      	add	r3, r2
20004300:	88fa      	ldrh	r2, [r7, #6]
20004302:	4619      	mov	r1, r3
20004304:	f7ff fed6 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position,y_Position-radius,color);
20004308:	89f8      	ldrh	r0, [r7, #14]
2000430a:	89ba      	ldrh	r2, [r7, #12]
2000430c:	68bb      	ldr	r3, [r7, #8]
2000430e:	1ad3      	subs	r3, r2, r3
20004310:	88fa      	ldrh	r2, [r7, #6]
20004312:	4619      	mov	r1, r3
20004314:	f7ff fece 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position+radius,y_Position,color);
20004318:	89fa      	ldrh	r2, [r7, #14]
2000431a:	68bb      	ldr	r3, [r7, #8]
2000431c:	4413      	add	r3, r2
2000431e:	89b9      	ldrh	r1, [r7, #12]
20004320:	88fa      	ldrh	r2, [r7, #6]
20004322:	4618      	mov	r0, r3
20004324:	f7ff fec6 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position-radius,y_Position,color);
20004328:	89fa      	ldrh	r2, [r7, #14]
2000432a:	68bb      	ldr	r3, [r7, #8]
2000432c:	1ad3      	subs	r3, r2, r3
2000432e:	89b9      	ldrh	r1, [r7, #12]
20004330:	88fa      	ldrh	r2, [r7, #6]
20004332:	4618      	mov	r0, r3
20004334:	f7ff febe 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	while (x<y)
20004338:	e066      	b.n	20004408 <TFTDisplay_ILI9341_DrawCircle+0x146>
	{
		if (f>=0)
2000433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000433c:	2b00      	cmp	r3, #0
2000433e:	db09      	blt.n	20004354 <TFTDisplay_ILI9341_DrawCircle+0x92>
		{
			y--;
20004340:	697b      	ldr	r3, [r7, #20]
20004342:	3b01      	subs	r3, #1
20004344:	617b      	str	r3, [r7, #20]
			ddF_y+=2;
20004346:	69fb      	ldr	r3, [r7, #28]
20004348:	3302      	adds	r3, #2
2000434a:	61fb      	str	r3, [r7, #28]
			f+=ddF_y;
2000434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000434e:	69fb      	ldr	r3, [r7, #28]
20004350:	4413      	add	r3, r2
20004352:	627b      	str	r3, [r7, #36]	; 0x24
	    }

		x++;
20004354:	69bb      	ldr	r3, [r7, #24]
20004356:	3301      	adds	r3, #1
20004358:	61bb      	str	r3, [r7, #24]
	    ddF_x+=2;
2000435a:	6a3b      	ldr	r3, [r7, #32]
2000435c:	3302      	adds	r3, #2
2000435e:	623b      	str	r3, [r7, #32]
	    f+=ddF_x;
20004360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004362:	6a3b      	ldr	r3, [r7, #32]
20004364:	4413      	add	r3, r2
20004366:	627b      	str	r3, [r7, #36]	; 0x24
	    TFTDisplay_ILI9341_DrawPixel(x_Position+x,y_Position+y,color);
20004368:	89fa      	ldrh	r2, [r7, #14]
2000436a:	69bb      	ldr	r3, [r7, #24]
2000436c:	18d0      	adds	r0, r2, r3
2000436e:	89ba      	ldrh	r2, [r7, #12]
20004370:	697b      	ldr	r3, [r7, #20]
20004372:	4413      	add	r3, r2
20004374:	88fa      	ldrh	r2, [r7, #6]
20004376:	4619      	mov	r1, r3
20004378:	f7ff fe9c 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-x,y_Position+y,color);
2000437c:	89fa      	ldrh	r2, [r7, #14]
2000437e:	69bb      	ldr	r3, [r7, #24]
20004380:	1ad0      	subs	r0, r2, r3
20004382:	89ba      	ldrh	r2, [r7, #12]
20004384:	697b      	ldr	r3, [r7, #20]
20004386:	4413      	add	r3, r2
20004388:	88fa      	ldrh	r2, [r7, #6]
2000438a:	4619      	mov	r1, r3
2000438c:	f7ff fe92 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+x,y_Position-y,color);
20004390:	89fa      	ldrh	r2, [r7, #14]
20004392:	69bb      	ldr	r3, [r7, #24]
20004394:	18d0      	adds	r0, r2, r3
20004396:	89ba      	ldrh	r2, [r7, #12]
20004398:	697b      	ldr	r3, [r7, #20]
2000439a:	1ad3      	subs	r3, r2, r3
2000439c:	88fa      	ldrh	r2, [r7, #6]
2000439e:	4619      	mov	r1, r3
200043a0:	f7ff fe88 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-x,y_Position-y,color);
200043a4:	89fa      	ldrh	r2, [r7, #14]
200043a6:	69bb      	ldr	r3, [r7, #24]
200043a8:	1ad0      	subs	r0, r2, r3
200043aa:	89ba      	ldrh	r2, [r7, #12]
200043ac:	697b      	ldr	r3, [r7, #20]
200043ae:	1ad3      	subs	r3, r2, r3
200043b0:	88fa      	ldrh	r2, [r7, #6]
200043b2:	4619      	mov	r1, r3
200043b4:	f7ff fe7e 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+y,y_Position+x,color);
200043b8:	89fa      	ldrh	r2, [r7, #14]
200043ba:	697b      	ldr	r3, [r7, #20]
200043bc:	18d0      	adds	r0, r2, r3
200043be:	89ba      	ldrh	r2, [r7, #12]
200043c0:	69bb      	ldr	r3, [r7, #24]
200043c2:	4413      	add	r3, r2
200043c4:	88fa      	ldrh	r2, [r7, #6]
200043c6:	4619      	mov	r1, r3
200043c8:	f7ff fe74 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-y,y_Position+x,color);
200043cc:	89fa      	ldrh	r2, [r7, #14]
200043ce:	697b      	ldr	r3, [r7, #20]
200043d0:	1ad0      	subs	r0, r2, r3
200043d2:	89ba      	ldrh	r2, [r7, #12]
200043d4:	69bb      	ldr	r3, [r7, #24]
200043d6:	4413      	add	r3, r2
200043d8:	88fa      	ldrh	r2, [r7, #6]
200043da:	4619      	mov	r1, r3
200043dc:	f7ff fe6a 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+y,y_Position-x,color);
200043e0:	89fa      	ldrh	r2, [r7, #14]
200043e2:	697b      	ldr	r3, [r7, #20]
200043e4:	18d0      	adds	r0, r2, r3
200043e6:	89ba      	ldrh	r2, [r7, #12]
200043e8:	69bb      	ldr	r3, [r7, #24]
200043ea:	1ad3      	subs	r3, r2, r3
200043ec:	88fa      	ldrh	r2, [r7, #6]
200043ee:	4619      	mov	r1, r3
200043f0:	f7ff fe60 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-y,y_Position-x,color);
200043f4:	89fa      	ldrh	r2, [r7, #14]
200043f6:	697b      	ldr	r3, [r7, #20]
200043f8:	1ad0      	subs	r0, r2, r3
200043fa:	89ba      	ldrh	r2, [r7, #12]
200043fc:	69bb      	ldr	r3, [r7, #24]
200043fe:	1ad3      	subs	r3, r2, r3
20004400:	88fa      	ldrh	r2, [r7, #6]
20004402:	4619      	mov	r1, r3
20004404:	f7ff fe56 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>
	while (x<y)
20004408:	69ba      	ldr	r2, [r7, #24]
2000440a:	697b      	ldr	r3, [r7, #20]
2000440c:	429a      	cmp	r2, r3
2000440e:	db94      	blt.n	2000433a <TFTDisplay_ILI9341_DrawCircle+0x78>
	}
}
20004410:	bf00      	nop
20004412:	bf00      	nop
20004414:	3728      	adds	r7, #40	; 0x28
20004416:	46bd      	mov	sp, r7
20004418:	bd80      	pop	{r7, pc}
	...

2000441c <TFTDisplay_ILI9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
2000441c:	b590      	push	{r4, r7, lr}
2000441e:	b08b      	sub	sp, #44	; 0x2c
20004420:	af00      	add	r7, sp, #0
20004422:	4603      	mov	r3, r0
20004424:	80fb      	strh	r3, [r7, #6]
20004426:	460b      	mov	r3, r1
20004428:	80bb      	strh	r3, [r7, #4]
2000442a:	4613      	mov	r3, r2
2000442c:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
2000442e:	2300      	movs	r3, #0
20004430:	627b      	str	r3, [r7, #36]	; 0x24
20004432:	2300      	movs	r3, #0
20004434:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint16_t y_cur = y;
20004436:	88bb      	ldrh	r3, [r7, #4]
20004438:	83fb      	strh	r3, [r7, #30]
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
2000443a:	2300      	movs	r3, #0
2000443c:	61bb      	str	r3, [r7, #24]
  height = lcdprop.pFont->Height;
2000443e:	4b70      	ldr	r3, [pc, #448]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004440:	685b      	ldr	r3, [r3, #4]
20004442:	88db      	ldrh	r3, [r3, #6]
20004444:	82fb      	strh	r3, [r7, #22]
  width  = lcdprop.pFont->Width;
20004446:	4b6e      	ldr	r3, [pc, #440]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004448:	685b      	ldr	r3, [r3, #4]
2000444a:	889b      	ldrh	r3, [r3, #4]
2000444c:	82bb      	strh	r3, [r7, #20]
  offset = 8 *((width + 7)/8) -  width ;
2000444e:	8abb      	ldrh	r3, [r7, #20]
20004450:	3307      	adds	r3, #7
20004452:	2b00      	cmp	r3, #0
20004454:	da00      	bge.n	20004458 <TFTDisplay_ILI9341_DrawChar+0x3c>
20004456:	3307      	adds	r3, #7
20004458:	10db      	asrs	r3, r3, #3
2000445a:	b2db      	uxtb	r3, r3
2000445c:	00db      	lsls	r3, r3, #3
2000445e:	b2da      	uxtb	r2, r3
20004460:	8abb      	ldrh	r3, [r7, #20]
20004462:	b2db      	uxtb	r3, r3
20004464:	1ad3      	subs	r3, r2, r3
20004466:	74fb      	strb	r3, [r7, #19]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
20004468:	4b65      	ldr	r3, [pc, #404]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000446a:	685b      	ldr	r3, [r3, #4]
2000446c:	681a      	ldr	r2, [r3, #0]
2000446e:	78fb      	ldrb	r3, [r7, #3]
20004470:	3b20      	subs	r3, #32
20004472:	4963      	ldr	r1, [pc, #396]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004474:	6849      	ldr	r1, [r1, #4]
20004476:	88c9      	ldrh	r1, [r1, #6]
20004478:	fb03 f101 	mul.w	r1, r3, r1
2000447c:	4b60      	ldr	r3, [pc, #384]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000447e:	685b      	ldr	r3, [r3, #4]
20004480:	889b      	ldrh	r3, [r3, #4]
20004482:	3307      	adds	r3, #7
20004484:	2b00      	cmp	r3, #0
20004486:	da00      	bge.n	2000448a <TFTDisplay_ILI9341_DrawChar+0x6e>
20004488:	3307      	adds	r3, #7
2000448a:	10db      	asrs	r3, r3, #3
2000448c:	fb01 f303 	mul.w	r3, r1, r3
20004490:	4413      	add	r3, r2
20004492:	60fb      	str	r3, [r7, #12]
  for(i = 0; i < height; i++)
20004494:	2300      	movs	r3, #0
20004496:	627b      	str	r3, [r7, #36]	; 0x24
20004498:	e087      	b.n	200045aa <TFTDisplay_ILI9341_DrawChar+0x18e>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
2000449a:	8abb      	ldrh	r3, [r7, #20]
2000449c:	3307      	adds	r3, #7
2000449e:	2b00      	cmp	r3, #0
200044a0:	da00      	bge.n	200044a4 <TFTDisplay_ILI9341_DrawChar+0x88>
200044a2:	3307      	adds	r3, #7
200044a4:	10db      	asrs	r3, r3, #3
200044a6:	461a      	mov	r2, r3
200044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200044aa:	fb02 f303 	mul.w	r3, r2, r3
200044ae:	68fa      	ldr	r2, [r7, #12]
200044b0:	4413      	add	r3, r2
200044b2:	60bb      	str	r3, [r7, #8]
    switch(((width + 7)/8))
200044b4:	8abb      	ldrh	r3, [r7, #20]
200044b6:	3307      	adds	r3, #7
200044b8:	2b00      	cmp	r3, #0
200044ba:	da00      	bge.n	200044be <TFTDisplay_ILI9341_DrawChar+0xa2>
200044bc:	3307      	adds	r3, #7
200044be:	10db      	asrs	r3, r3, #3
200044c0:	2b01      	cmp	r3, #1
200044c2:	d002      	beq.n	200044ca <TFTDisplay_ILI9341_DrawChar+0xae>
200044c4:	2b02      	cmp	r3, #2
200044c6:	d004      	beq.n	200044d2 <TFTDisplay_ILI9341_DrawChar+0xb6>
200044c8:	e00c      	b.n	200044e4 <TFTDisplay_ILI9341_DrawChar+0xc8>
    {
      case 1:
          line =  pchar[0];      
200044ca:	68bb      	ldr	r3, [r7, #8]
200044cc:	781b      	ldrb	r3, [r3, #0]
200044ce:	61bb      	str	r3, [r7, #24]
          break;
200044d0:	e016      	b.n	20004500 <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
200044d2:	68bb      	ldr	r3, [r7, #8]
200044d4:	781b      	ldrb	r3, [r3, #0]
200044d6:	021b      	lsls	r3, r3, #8
200044d8:	68ba      	ldr	r2, [r7, #8]
200044da:	3201      	adds	r2, #1
200044dc:	7812      	ldrb	r2, [r2, #0]
200044de:	4313      	orrs	r3, r2
200044e0:	61bb      	str	r3, [r7, #24]
          break;
200044e2:	e00d      	b.n	20004500 <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
200044e4:	68bb      	ldr	r3, [r7, #8]
200044e6:	781b      	ldrb	r3, [r3, #0]
200044e8:	041a      	lsls	r2, r3, #16
200044ea:	68bb      	ldr	r3, [r7, #8]
200044ec:	3301      	adds	r3, #1
200044ee:	781b      	ldrb	r3, [r3, #0]
200044f0:	021b      	lsls	r3, r3, #8
200044f2:	4313      	orrs	r3, r2
200044f4:	68ba      	ldr	r2, [r7, #8]
200044f6:	3202      	adds	r2, #2
200044f8:	7812      	ldrb	r2, [r2, #0]
200044fa:	4313      	orrs	r3, r2
200044fc:	61bb      	str	r3, [r7, #24]
        break;
200044fe:	bf00      	nop
    }
    for (j = 0; j < width; j++)
20004500:	2300      	movs	r3, #0
20004502:	623b      	str	r3, [r7, #32]
20004504:	e047      	b.n	20004596 <TFTDisplay_ILI9341_DrawChar+0x17a>
    {
      if(line & (1 << (width- j + offset- 1))) 
20004506:	8aba      	ldrh	r2, [r7, #20]
20004508:	6a3b      	ldr	r3, [r7, #32]
2000450a:	1ad2      	subs	r2, r2, r3
2000450c:	7cfb      	ldrb	r3, [r7, #19]
2000450e:	4413      	add	r3, r2
20004510:	3b01      	subs	r3, #1
20004512:	2201      	movs	r2, #1
20004514:	fa02 f303 	lsl.w	r3, r2, r3
20004518:	461a      	mov	r2, r3
2000451a:	69bb      	ldr	r3, [r7, #24]
2000451c:	4013      	ands	r3, r2
2000451e:	2b00      	cmp	r3, #0
20004520:	d01b      	beq.n	2000455a <TFTDisplay_ILI9341_DrawChar+0x13e>
      {
    	DataBuffer[(i*width + j) * 2] = lcdprop.TextColor >> 8;
20004522:	4b37      	ldr	r3, [pc, #220]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004524:	881b      	ldrh	r3, [r3, #0]
20004526:	0a1b      	lsrs	r3, r3, #8
20004528:	b299      	uxth	r1, r3
2000452a:	8abb      	ldrh	r3, [r7, #20]
2000452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000452e:	fb03 f202 	mul.w	r2, r3, r2
20004532:	6a3b      	ldr	r3, [r7, #32]
20004534:	4413      	add	r3, r2
20004536:	005b      	lsls	r3, r3, #1
20004538:	b2c9      	uxtb	r1, r1
2000453a:	4a32      	ldr	r2, [pc, #200]	; (20004604 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
2000453c:	54d1      	strb	r1, [r2, r3]
    	DataBuffer[(i*width + j)*2+1] = lcdprop.TextColor & 0xFF;
2000453e:	4b30      	ldr	r3, [pc, #192]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004540:	8819      	ldrh	r1, [r3, #0]
20004542:	8abb      	ldrh	r3, [r7, #20]
20004544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004546:	fb03 f202 	mul.w	r2, r3, r2
2000454a:	6a3b      	ldr	r3, [r7, #32]
2000454c:	4413      	add	r3, r2
2000454e:	005b      	lsls	r3, r3, #1
20004550:	3301      	adds	r3, #1
20004552:	b2c9      	uxtb	r1, r1
20004554:	4a2b      	ldr	r2, [pc, #172]	; (20004604 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20004556:	54d1      	strb	r1, [r2, r3]
20004558:	e01a      	b.n	20004590 <TFTDisplay_ILI9341_DrawChar+0x174>
      }
      else
      {
    	DataBuffer[(i*width + j)*2] = lcdprop.BackColor >> 8;
2000455a:	4b29      	ldr	r3, [pc, #164]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000455c:	885b      	ldrh	r3, [r3, #2]
2000455e:	0a1b      	lsrs	r3, r3, #8
20004560:	b299      	uxth	r1, r3
20004562:	8abb      	ldrh	r3, [r7, #20]
20004564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004566:	fb03 f202 	mul.w	r2, r3, r2
2000456a:	6a3b      	ldr	r3, [r7, #32]
2000456c:	4413      	add	r3, r2
2000456e:	005b      	lsls	r3, r3, #1
20004570:	b2c9      	uxtb	r1, r1
20004572:	4a24      	ldr	r2, [pc, #144]	; (20004604 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20004574:	54d1      	strb	r1, [r2, r3]
        DataBuffer[(i*width + j)*2+1] = lcdprop.BackColor & 0xFF;
20004576:	4b22      	ldr	r3, [pc, #136]	; (20004600 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004578:	8859      	ldrh	r1, [r3, #2]
2000457a:	8abb      	ldrh	r3, [r7, #20]
2000457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000457e:	fb03 f202 	mul.w	r2, r3, r2
20004582:	6a3b      	ldr	r3, [r7, #32]
20004584:	4413      	add	r3, r2
20004586:	005b      	lsls	r3, r3, #1
20004588:	3301      	adds	r3, #1
2000458a:	b2c9      	uxtb	r1, r1
2000458c:	4a1d      	ldr	r2, [pc, #116]	; (20004604 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
2000458e:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < width; j++)
20004590:	6a3b      	ldr	r3, [r7, #32]
20004592:	3301      	adds	r3, #1
20004594:	623b      	str	r3, [r7, #32]
20004596:	8abb      	ldrh	r3, [r7, #20]
20004598:	6a3a      	ldr	r2, [r7, #32]
2000459a:	429a      	cmp	r2, r3
2000459c:	d3b3      	bcc.n	20004506 <TFTDisplay_ILI9341_DrawChar+0xea>
      } 
    }
    y_cur++;
2000459e:	8bfb      	ldrh	r3, [r7, #30]
200045a0:	3301      	adds	r3, #1
200045a2:	83fb      	strh	r3, [r7, #30]
  for(i = 0; i < height; i++)
200045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200045a6:	3301      	adds	r3, #1
200045a8:	627b      	str	r3, [r7, #36]	; 0x24
200045aa:	8afb      	ldrh	r3, [r7, #22]
200045ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200045ae:	429a      	cmp	r2, r3
200045b0:	f4ff af73 	bcc.w	2000449a <TFTDisplay_ILI9341_DrawChar+0x7e>
  }

  DmaSpiCnt = 1;
200045b4:	4b14      	ldr	r3, [pc, #80]	; (20004608 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
200045b6:	2201      	movs	r2, #1
200045b8:	601a      	str	r2, [r3, #0]
  tftDisplay_ILI9341_SetAddrWindow(x, y, x+width-1, y+height-1);
200045ba:	88fa      	ldrh	r2, [r7, #6]
200045bc:	8abb      	ldrh	r3, [r7, #20]
200045be:	4413      	add	r3, r2
200045c0:	b29b      	uxth	r3, r3
200045c2:	3b01      	subs	r3, #1
200045c4:	b29c      	uxth	r4, r3
200045c6:	88ba      	ldrh	r2, [r7, #4]
200045c8:	8afb      	ldrh	r3, [r7, #22]
200045ca:	4413      	add	r3, r2
200045cc:	b29b      	uxth	r3, r3
200045ce:	3b01      	subs	r3, #1
200045d0:	b29b      	uxth	r3, r3
200045d2:	88b9      	ldrh	r1, [r7, #4]
200045d4:	88f8      	ldrh	r0, [r7, #6]
200045d6:	4622      	mov	r2, r4
200045d8:	f000 f9dc 	bl	20004994 <tftDisplay_ILI9341_SetAddrWindow>
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], width * height * 2, DmaSpiCnt);
200045dc:	8abb      	ldrh	r3, [r7, #20]
200045de:	8afa      	ldrh	r2, [r7, #22]
200045e0:	fb02 f303 	mul.w	r3, r2, r3
200045e4:	005b      	lsls	r3, r3, #1
200045e6:	4619      	mov	r1, r3
200045e8:	4b07      	ldr	r3, [pc, #28]	; (20004608 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
200045ea:	681b      	ldr	r3, [r3, #0]
200045ec:	b2db      	uxtb	r3, r3
200045ee:	461a      	mov	r2, r3
200045f0:	4804      	ldr	r0, [pc, #16]	; (20004604 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200045f2:	f000 f92f 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
200045f6:	bf00      	nop
200045f8:	372c      	adds	r7, #44	; 0x2c
200045fa:	46bd      	mov	sp, r7
200045fc:	bd90      	pop	{r4, r7, pc}
200045fe:	bf00      	nop
20004600:	2001e8f4 	.word	0x2001e8f4
20004604:	2000e8f4 	.word	0x2000e8f4
20004608:	20009e34 	.word	0x20009e34

2000460c <TFTDisplay_ILI9341_SetRotation>:
      (void)*str++;
  }
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_SetRotation(uint8_t RotationSelectVal)
{
2000460c:	b580      	push	{r7, lr}
2000460e:	b082      	sub	sp, #8
20004610:	af00      	add	r7, sp, #0
20004612:	4603      	mov	r3, r0
20004614:	71fb      	strb	r3, [r7, #7]
  tftDisplay_ILI9341_SendCommand(0x36);
20004616:	2036      	movs	r0, #54	; 0x36
20004618:	f000 f850 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
  switch(RotationSelectVal)
2000461c:	79fb      	ldrb	r3, [r7, #7]
2000461e:	2b03      	cmp	r3, #3
20004620:	d842      	bhi.n	200046a8 <TFTDisplay_ILI9341_SetRotation+0x9c>
20004622:	a201      	add	r2, pc, #4	; (adr r2, 20004628 <TFTDisplay_ILI9341_SetRotation+0x1c>)
20004624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20004628:	20004639 	.word	0x20004639
2000462c:	20004655 	.word	0x20004655
20004630:	20004671 	.word	0x20004671
20004634:	2000468d 	.word	0x2000468d
  {
    case 0:
      DataBuffer[0] = ORIENTATION_PORTRAIT;
20004638:	4b1d      	ldr	r3, [pc, #116]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000463a:	2248      	movs	r2, #72	; 0x48
2000463c:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000463e:	481c      	ldr	r0, [pc, #112]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004640:	f000 f8bc 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20004644:	4b1b      	ldr	r3, [pc, #108]	; (200046b4 <TFTDisplay_ILI9341_SetRotation+0xa8>)
20004646:	22f0      	movs	r2, #240	; 0xf0
20004648:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
2000464a:	4b1b      	ldr	r3, [pc, #108]	; (200046b8 <TFTDisplay_ILI9341_SetRotation+0xac>)
2000464c:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004650:	801a      	strh	r2, [r3, #0]
      break;
20004652:	e029      	b.n	200046a8 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 1:
      DataBuffer[0] = ORIENTATION_LANDSCAPE;
20004654:	4b16      	ldr	r3, [pc, #88]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004656:	2228      	movs	r2, #40	; 0x28
20004658:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000465a:	4815      	ldr	r0, [pc, #84]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000465c:	f000 f8ae 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20004660:	4b14      	ldr	r3, [pc, #80]	; (200046b4 <TFTDisplay_ILI9341_SetRotation+0xa8>)
20004662:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004666:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
20004668:	4b13      	ldr	r3, [pc, #76]	; (200046b8 <TFTDisplay_ILI9341_SetRotation+0xac>)
2000466a:	22f0      	movs	r2, #240	; 0xf0
2000466c:	801a      	strh	r2, [r3, #0]
      break;
2000466e:	e01b      	b.n	200046a8 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 2:
      DataBuffer[0] = ORIENTATION_PORTRAIT_MIRROR;
20004670:	4b0f      	ldr	r3, [pc, #60]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004672:	2288      	movs	r2, #136	; 0x88
20004674:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004676:	480e      	ldr	r0, [pc, #56]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004678:	f000 f8a0 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
2000467c:	4b0d      	ldr	r3, [pc, #52]	; (200046b4 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000467e:	22f0      	movs	r2, #240	; 0xf0
20004680:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
20004682:	4b0d      	ldr	r3, [pc, #52]	; (200046b8 <TFTDisplay_ILI9341_SetRotation+0xac>)
20004684:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004688:	801a      	strh	r2, [r3, #0]
      break;
2000468a:	e00d      	b.n	200046a8 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 3:
      DataBuffer[0] = ORIENTATION_LANDSCAPE_MIRROR;
2000468c:	4b08      	ldr	r3, [pc, #32]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000468e:	22e8      	movs	r2, #232	; 0xe8
20004690:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004692:	4807      	ldr	r0, [pc, #28]	; (200046b0 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004694:	f000 f892 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20004698:	4b06      	ldr	r3, [pc, #24]	; (200046b4 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000469a:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000469e:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
200046a0:	4b05      	ldr	r3, [pc, #20]	; (200046b8 <TFTDisplay_ILI9341_SetRotation+0xac>)
200046a2:	22f0      	movs	r2, #240	; 0xf0
200046a4:	801a      	strh	r2, [r3, #0]
      break;
200046a6:	bf00      	nop
  }
}
200046a8:	bf00      	nop
200046aa:	3708      	adds	r7, #8
200046ac:	46bd      	mov	sp, r7
200046ae:	bd80      	pop	{r7, pc}
200046b0:	2000e8f4 	.word	0x2000e8f4
200046b4:	2000e8f0 	.word	0x2000e8f0
200046b8:	2000e8f2 	.word	0x2000e8f2

200046bc <tftDisplay_ILI9341_SendCommand>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void tftDisplay_ILI9341_SendCommand(uint8_t command)
{
200046bc:	b5b0      	push	{r4, r5, r7, lr}
200046be:	b084      	sub	sp, #16
200046c0:	af02      	add	r7, sp, #8
200046c2:	4603      	mov	r3, r0
200046c4:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
200046c6:	2104      	movs	r1, #4
200046c8:	481d      	ldr	r0, [pc, #116]	; (20004740 <tftDisplay_ILI9341_SendCommand+0x84>)
200046ca:	f7ff fad5 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_COMMAND();
200046ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200046d2:	481c      	ldr	r0, [pc, #112]	; (20004744 <tftDisplay_ILI9341_SendCommand+0x88>)
200046d4:	f7ff fad0 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	DmaSpiCnt = 1;
200046d8:	4b1b      	ldr	r3, [pc, #108]	; (20004748 <tftDisplay_ILI9341_SendCommand+0x8c>)
200046da:	2201      	movs	r2, #1
200046dc:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200046de:	2104      	movs	r1, #4
200046e0:	481a      	ldr	r0, [pc, #104]	; (2000474c <tftDisplay_ILI9341_SendCommand+0x90>)
200046e2:	f7ff fb4b 	bl	20003d7c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
200046e6:	2201      	movs	r2, #1
200046e8:	2104      	movs	r1, #4
200046ea:	4818      	ldr	r0, [pc, #96]	; (2000474c <tftDisplay_ILI9341_SendCommand+0x90>)
200046ec:	f7ff fb7e 	bl	20003dec <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4, (uint32_t)&command,
200046f0:	1dfc      	adds	r4, r7, #7
200046f2:	4817      	ldr	r0, [pc, #92]	; (20004750 <tftDisplay_ILI9341_SendCommand+0x94>)
200046f4:	f7ff faf5 	bl	20003ce2 <LL_SPI_DMA_GetRegAddr>
200046f8:	4605      	mov	r5, r0
200046fa:	2104      	movs	r1, #4
200046fc:	4813      	ldr	r0, [pc, #76]	; (2000474c <tftDisplay_ILI9341_SendCommand+0x90>)
200046fe:	f7ff fb5d 	bl	20003dbc <LL_DMA_GetDataTransferDirection>
20004702:	4603      	mov	r3, r0
20004704:	9300      	str	r3, [sp, #0]
20004706:	462b      	mov	r3, r5
20004708:	4622      	mov	r2, r4
2000470a:	2104      	movs	r1, #4
2000470c:	480f      	ldr	r0, [pc, #60]	; (2000474c <tftDisplay_ILI9341_SendCommand+0x90>)
2000470e:	f7ff fb91 	bl	20003e34 <LL_DMA_ConfigAddresses>
			LL_SPI_DMA_GetRegAddr(SPI5), LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
20004712:	2104      	movs	r1, #4
20004714:	480d      	ldr	r0, [pc, #52]	; (2000474c <tftDisplay_ILI9341_SendCommand+0x90>)
20004716:	f7ff fb11 	bl	20003d3c <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
2000471a:	bf00      	nop
2000471c:	4b0d      	ldr	r3, [pc, #52]	; (20004754 <tftDisplay_ILI9341_SendCommand+0x98>)
2000471e:	681b      	ldr	r3, [r3, #0]
20004720:	f003 0301 	and.w	r3, r3, #1
20004724:	2b00      	cmp	r3, #0
20004726:	d1f9      	bne.n	2000471c <tftDisplay_ILI9341_SendCommand+0x60>
20004728:	4b08      	ldr	r3, [pc, #32]	; (2000474c <tftDisplay_ILI9341_SendCommand+0x90>)
2000472a:	685b      	ldr	r3, [r3, #4]
2000472c:	f003 0320 	and.w	r3, r3, #32
20004730:	2b00      	cmp	r3, #0
20004732:	d1f3      	bne.n	2000471c <tftDisplay_ILI9341_SendCommand+0x60>
}
20004734:	bf00      	nop
20004736:	bf00      	nop
20004738:	3708      	adds	r7, #8
2000473a:	46bd      	mov	sp, r7
2000473c:	bdb0      	pop	{r4, r5, r7, pc}
2000473e:	bf00      	nop
20004740:	40020800 	.word	0x40020800
20004744:	40020c00 	.word	0x40020c00
20004748:	20009e34 	.word	0x20009e34
2000474c:	40026400 	.word	0x40026400
20004750:	40015000 	.word	0x40015000
20004754:	40026470 	.word	0x40026470

20004758 <tftDisplay_ILI9341_SendData>:
static void tftDisplay_ILI9341_SendData(uint8_t data)
{
20004758:	b580      	push	{r7, lr}
2000475a:	b082      	sub	sp, #8
2000475c:	af00      	add	r7, sp, #0
2000475e:	4603      	mov	r3, r0
20004760:	71fb      	strb	r3, [r7, #7]
//	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
//
//	  while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
//	  //CS_DESELECT();

	CS_ACTIVE();
20004762:	2104      	movs	r1, #4
20004764:	4812      	ldr	r0, [pc, #72]	; (200047b0 <tftDisplay_ILI9341_SendData+0x58>)
20004766:	f7ff fa87 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
2000476a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000476e:	4811      	ldr	r0, [pc, #68]	; (200047b4 <tftDisplay_ILI9341_SendData+0x5c>)
20004770:	f7ff fa74 	bl	20003c5c <LL_GPIO_SetOutputPin>
    while(!LL_SPI_IsActiveFlag_TXE(SPI5)) {}
20004774:	bf00      	nop
20004776:	4810      	ldr	r0, [pc, #64]	; (200047b8 <tftDisplay_ILI9341_SendData+0x60>)
20004778:	f7ff faa0 	bl	20003cbc <LL_SPI_IsActiveFlag_TXE>
2000477c:	4603      	mov	r3, r0
2000477e:	2b00      	cmp	r3, #0
20004780:	d0f9      	beq.n	20004776 <tftDisplay_ILI9341_SendData+0x1e>
	LL_SPI_TransmitData8 (SPI5, data);
20004782:	79fb      	ldrb	r3, [r7, #7]
20004784:	4619      	mov	r1, r3
20004786:	480c      	ldr	r0, [pc, #48]	; (200047b8 <tftDisplay_ILI9341_SendData+0x60>)
20004788:	f7ff fac5 	bl	20003d16 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI5)) {}
2000478c:	bf00      	nop
2000478e:	480a      	ldr	r0, [pc, #40]	; (200047b8 <tftDisplay_ILI9341_SendData+0x60>)
20004790:	f7ff fa81 	bl	20003c96 <LL_SPI_IsActiveFlag_RXNE>
20004794:	4603      	mov	r3, r0
20004796:	2b00      	cmp	r3, #0
20004798:	d0f9      	beq.n	2000478e <tftDisplay_ILI9341_SendData+0x36>
	LL_SPI_ReceiveData8(SPI5);
2000479a:	4807      	ldr	r0, [pc, #28]	; (200047b8 <tftDisplay_ILI9341_SendData+0x60>)
2000479c:	f7ff faad 	bl	20003cfa <LL_SPI_ReceiveData8>
	CS_DESELECT();
200047a0:	2104      	movs	r1, #4
200047a2:	4803      	ldr	r0, [pc, #12]	; (200047b0 <tftDisplay_ILI9341_SendData+0x58>)
200047a4:	f7ff fa5a 	bl	20003c5c <LL_GPIO_SetOutputPin>
}
200047a8:	bf00      	nop
200047aa:	3708      	adds	r7, #8
200047ac:	46bd      	mov	sp, r7
200047ae:	bd80      	pop	{r7, pc}
200047b0:	40020800 	.word	0x40020800
200047b4:	40020c00 	.word	0x40020c00
200047b8:	40015000 	.word	0x40015000

200047bc <tftDisplay_ILI9341_SendSingleData>:

static void tftDisplay_ILI9341_SendSingleData(uint32_t* BufferPtr)
{
200047bc:	b5b0      	push	{r4, r5, r7, lr}
200047be:	b084      	sub	sp, #16
200047c0:	af02      	add	r7, sp, #8
200047c2:	6078      	str	r0, [r7, #4]
	CS_ACTIVE();
200047c4:	2104      	movs	r1, #4
200047c6:	481d      	ldr	r0, [pc, #116]	; (2000483c <tftDisplay_ILI9341_SendSingleData+0x80>)
200047c8:	f7ff fa56 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200047cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200047d0:	481b      	ldr	r0, [pc, #108]	; (20004840 <tftDisplay_ILI9341_SendSingleData+0x84>)
200047d2:	f7ff fa43 	bl	20003c5c <LL_GPIO_SetOutputPin>
	DmaSpiCnt = 1;
200047d6:	4b1b      	ldr	r3, [pc, #108]	; (20004844 <tftDisplay_ILI9341_SendSingleData+0x88>)
200047d8:	2201      	movs	r2, #1
200047da:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200047dc:	2104      	movs	r1, #4
200047de:	481a      	ldr	r0, [pc, #104]	; (20004848 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200047e0:	f7ff facc 	bl	20003d7c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
200047e4:	2201      	movs	r2, #1
200047e6:	2104      	movs	r1, #4
200047e8:	4817      	ldr	r0, [pc, #92]	; (20004848 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200047ea:	f7ff faff 	bl	20003dec <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
200047ee:	687c      	ldr	r4, [r7, #4]
200047f0:	4816      	ldr	r0, [pc, #88]	; (2000484c <tftDisplay_ILI9341_SendSingleData+0x90>)
200047f2:	f7ff fa76 	bl	20003ce2 <LL_SPI_DMA_GetRegAddr>
200047f6:	4605      	mov	r5, r0
200047f8:	2104      	movs	r1, #4
200047fa:	4813      	ldr	r0, [pc, #76]	; (20004848 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200047fc:	f7ff fade 	bl	20003dbc <LL_DMA_GetDataTransferDirection>
20004800:	4603      	mov	r3, r0
20004802:	9300      	str	r3, [sp, #0]
20004804:	462b      	mov	r3, r5
20004806:	4622      	mov	r2, r4
20004808:	2104      	movs	r1, #4
2000480a:	480f      	ldr	r0, [pc, #60]	; (20004848 <tftDisplay_ILI9341_SendSingleData+0x8c>)
2000480c:	f7ff fb12 	bl	20003e34 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
20004810:	2104      	movs	r1, #4
20004812:	480d      	ldr	r0, [pc, #52]	; (20004848 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004814:	f7ff fa92 	bl	20003d3c <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20004818:	bf00      	nop
2000481a:	4b0d      	ldr	r3, [pc, #52]	; (20004850 <tftDisplay_ILI9341_SendSingleData+0x94>)
2000481c:	681b      	ldr	r3, [r3, #0]
2000481e:	f003 0301 	and.w	r3, r3, #1
20004822:	2b00      	cmp	r3, #0
20004824:	d1f9      	bne.n	2000481a <tftDisplay_ILI9341_SendSingleData+0x5e>
20004826:	4b08      	ldr	r3, [pc, #32]	; (20004848 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004828:	685b      	ldr	r3, [r3, #4]
2000482a:	f003 0320 	and.w	r3, r3, #32
2000482e:	2b00      	cmp	r3, #0
20004830:	d1f3      	bne.n	2000481a <tftDisplay_ILI9341_SendSingleData+0x5e>
}
20004832:	bf00      	nop
20004834:	bf00      	nop
20004836:	3708      	adds	r7, #8
20004838:	46bd      	mov	sp, r7
2000483a:	bdb0      	pop	{r4, r5, r7, pc}
2000483c:	40020800 	.word	0x40020800
20004840:	40020c00 	.word	0x40020c00
20004844:	20009e34 	.word	0x20009e34
20004848:	40026400 	.word	0x40026400
2000484c:	40015000 	.word	0x40015000
20004850:	40026470 	.word	0x40026470

20004854 <tftDisplay_ILI9341_WriteMultipleData>:

static void tftDisplay_ILI9341_WriteMultipleData(uint32_t* BufferPtr, uint32_t BufferSize, uint8_t DmaCount)
{
20004854:	b5b0      	push	{r4, r5, r7, lr}
20004856:	b086      	sub	sp, #24
20004858:	af02      	add	r7, sp, #8
2000485a:	60f8      	str	r0, [r7, #12]
2000485c:	60b9      	str	r1, [r7, #8]
2000485e:	4613      	mov	r3, r2
20004860:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
20004862:	2104      	movs	r1, #4
20004864:	481d      	ldr	r0, [pc, #116]	; (200048dc <tftDisplay_ILI9341_WriteMultipleData+0x88>)
20004866:	f7ff fa07 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
2000486a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000486e:	481c      	ldr	r0, [pc, #112]	; (200048e0 <tftDisplay_ILI9341_WriteMultipleData+0x8c>)
20004870:	f7ff f9f4 	bl	20003c5c <LL_GPIO_SetOutputPin>
	DmaSpiCnt = DmaCount;
20004874:	79fb      	ldrb	r3, [r7, #7]
20004876:	4a1b      	ldr	r2, [pc, #108]	; (200048e4 <tftDisplay_ILI9341_WriteMultipleData+0x90>)
20004878:	6013      	str	r3, [r2, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
2000487a:	2104      	movs	r1, #4
2000487c:	481a      	ldr	r0, [pc, #104]	; (200048e8 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000487e:	f7ff fa7d 	bl	20003d7c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, BufferSize);
20004882:	68ba      	ldr	r2, [r7, #8]
20004884:	2104      	movs	r1, #4
20004886:	4818      	ldr	r0, [pc, #96]	; (200048e8 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20004888:	f7ff fab0 	bl	20003dec <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
2000488c:	68fc      	ldr	r4, [r7, #12]
2000488e:	4817      	ldr	r0, [pc, #92]	; (200048ec <tftDisplay_ILI9341_WriteMultipleData+0x98>)
20004890:	f7ff fa27 	bl	20003ce2 <LL_SPI_DMA_GetRegAddr>
20004894:	4605      	mov	r5, r0
20004896:	2104      	movs	r1, #4
20004898:	4813      	ldr	r0, [pc, #76]	; (200048e8 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000489a:	f7ff fa8f 	bl	20003dbc <LL_DMA_GetDataTransferDirection>
2000489e:	4603      	mov	r3, r0
200048a0:	9300      	str	r3, [sp, #0]
200048a2:	462b      	mov	r3, r5
200048a4:	4622      	mov	r2, r4
200048a6:	2104      	movs	r1, #4
200048a8:	480f      	ldr	r0, [pc, #60]	; (200048e8 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200048aa:	f7ff fac3 	bl	20003e34 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
200048ae:	2104      	movs	r1, #4
200048b0:	480d      	ldr	r0, [pc, #52]	; (200048e8 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200048b2:	f7ff fa43 	bl	20003d3c <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
200048b6:	bf00      	nop
200048b8:	4b0d      	ldr	r3, [pc, #52]	; (200048f0 <tftDisplay_ILI9341_WriteMultipleData+0x9c>)
200048ba:	681b      	ldr	r3, [r3, #0]
200048bc:	f003 0301 	and.w	r3, r3, #1
200048c0:	2b00      	cmp	r3, #0
200048c2:	d1f9      	bne.n	200048b8 <tftDisplay_ILI9341_WriteMultipleData+0x64>
200048c4:	4b08      	ldr	r3, [pc, #32]	; (200048e8 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200048c6:	685b      	ldr	r3, [r3, #4]
200048c8:	f003 0320 	and.w	r3, r3, #32
200048cc:	2b00      	cmp	r3, #0
200048ce:	d1f3      	bne.n	200048b8 <tftDisplay_ILI9341_WriteMultipleData+0x64>
}
200048d0:	bf00      	nop
200048d2:	bf00      	nop
200048d4:	3710      	adds	r7, #16
200048d6:	46bd      	mov	sp, r7
200048d8:	bdb0      	pop	{r4, r5, r7, pc}
200048da:	bf00      	nop
200048dc:	40020800 	.word	0x40020800
200048e0:	40020c00 	.word	0x40020c00
200048e4:	20009e34 	.word	0x20009e34
200048e8:	40026400 	.word	0x40026400
200048ec:	40015000 	.word	0x40015000
200048f0:	40026470 	.word	0x40026470

200048f4 <tftDisplay_ILI9341_Reset>:
static void tftDisplay_ILI9341_Reset(void)
{
200048f4:	b580      	push	{r7, lr}
200048f6:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
200048f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
200048fc:	4806      	ldr	r0, [pc, #24]	; (20004918 <tftDisplay_ILI9341_Reset+0x24>)
200048fe:	f7ff f9bb 	bl	20003c78 <LL_GPIO_ResetOutputPin>
	LL_mDelay(5);
20004902:	2005      	movs	r0, #5
20004904:	f7fb fe8a 	bl	2000061c <LL_mDelay>
	RESET_IDLE();
20004908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2000490c:	4802      	ldr	r0, [pc, #8]	; (20004918 <tftDisplay_ILI9341_Reset+0x24>)
2000490e:	f7ff f9a5 	bl	20003c5c <LL_GPIO_SetOutputPin>
}
20004912:	bf00      	nop
20004914:	bd80      	pop	{r7, pc}
20004916:	bf00      	nop
20004918:	40020c00 	.word	0x40020c00

2000491c <tftDisplay_ILI9341_FontsInitialization>:
static void tftDisplay_ILI9341_FontsInitialization(void)
{
2000491c:	b480      	push	{r7}
2000491e:	af00      	add	r7, sp, #0
  Font8.Height = 8;
20004920:	4b16      	ldr	r3, [pc, #88]	; (2000497c <tftDisplay_ILI9341_FontsInitialization+0x60>)
20004922:	2208      	movs	r2, #8
20004924:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
20004926:	4b15      	ldr	r3, [pc, #84]	; (2000497c <tftDisplay_ILI9341_FontsInitialization+0x60>)
20004928:	2205      	movs	r2, #5
2000492a:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
2000492c:	4b14      	ldr	r3, [pc, #80]	; (20004980 <tftDisplay_ILI9341_FontsInitialization+0x64>)
2000492e:	220c      	movs	r2, #12
20004930:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
20004932:	4b13      	ldr	r3, [pc, #76]	; (20004980 <tftDisplay_ILI9341_FontsInitialization+0x64>)
20004934:	2207      	movs	r2, #7
20004936:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
20004938:	4b12      	ldr	r3, [pc, #72]	; (20004984 <tftDisplay_ILI9341_FontsInitialization+0x68>)
2000493a:	2210      	movs	r2, #16
2000493c:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
2000493e:	4b11      	ldr	r3, [pc, #68]	; (20004984 <tftDisplay_ILI9341_FontsInitialization+0x68>)
20004940:	220b      	movs	r2, #11
20004942:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
20004944:	4b10      	ldr	r3, [pc, #64]	; (20004988 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
20004946:	2214      	movs	r2, #20
20004948:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
2000494a:	4b0f      	ldr	r3, [pc, #60]	; (20004988 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
2000494c:	220e      	movs	r2, #14
2000494e:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
20004950:	4b0e      	ldr	r3, [pc, #56]	; (2000498c <tftDisplay_ILI9341_FontsInitialization+0x70>)
20004952:	2218      	movs	r2, #24
20004954:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
20004956:	4b0d      	ldr	r3, [pc, #52]	; (2000498c <tftDisplay_ILI9341_FontsInitialization+0x70>)
20004958:	2211      	movs	r2, #17
2000495a:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT_COLOR_ILI9341_BLACK;
2000495c:	4b0c      	ldr	r3, [pc, #48]	; (20004990 <tftDisplay_ILI9341_FontsInitialization+0x74>)
2000495e:	2200      	movs	r2, #0
20004960:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT_COLOR_ILI9341_GREEN;
20004962:	4b0b      	ldr	r3, [pc, #44]	; (20004990 <tftDisplay_ILI9341_FontsInitialization+0x74>)
20004964:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
20004968:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
2000496a:	4b09      	ldr	r3, [pc, #36]	; (20004990 <tftDisplay_ILI9341_FontsInitialization+0x74>)
2000496c:	4a05      	ldr	r2, [pc, #20]	; (20004984 <tftDisplay_ILI9341_FontsInitialization+0x68>)
2000496e:	605a      	str	r2, [r3, #4]
}
20004970:	bf00      	nop
20004972:	46bd      	mov	sp, r7
20004974:	f85d 7b04 	ldr.w	r7, [sp], #4
20004978:	4770      	bx	lr
2000497a:	bf00      	nop
2000497c:	20009e2c 	.word	0x20009e2c
20004980:	20009e24 	.word	0x20009e24
20004984:	20009e1c 	.word	0x20009e1c
20004988:	20009e14 	.word	0x20009e14
2000498c:	20009e0c 	.word	0x20009e0c
20004990:	2001e8f4 	.word	0x2001e8f4

20004994 <tftDisplay_ILI9341_SetAddrWindow>:
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
20004994:	b590      	push	{r4, r7, lr}
20004996:	b083      	sub	sp, #12
20004998:	af00      	add	r7, sp, #0
2000499a:	4604      	mov	r4, r0
2000499c:	4608      	mov	r0, r1
2000499e:	4611      	mov	r1, r2
200049a0:	461a      	mov	r2, r3
200049a2:	4623      	mov	r3, r4
200049a4:	80fb      	strh	r3, [r7, #6]
200049a6:	4603      	mov	r3, r0
200049a8:	80bb      	strh	r3, [r7, #4]
200049aa:	460b      	mov	r3, r1
200049ac:	807b      	strh	r3, [r7, #2]
200049ae:	4613      	mov	r3, r2
200049b0:	803b      	strh	r3, [r7, #0]
  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_COLUMN_ADDR);
200049b2:	202a      	movs	r0, #42	; 0x2a
200049b4:	f7ff fe82 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (x0 >> 8) & 0xFF;
200049b8:	88fb      	ldrh	r3, [r7, #6]
200049ba:	0a1b      	lsrs	r3, r3, #8
200049bc:	b29b      	uxth	r3, r3
200049be:	b2da      	uxtb	r2, r3
200049c0:	4b1b      	ldr	r3, [pc, #108]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200049c2:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = x0 & 0xFF;
200049c4:	88fb      	ldrh	r3, [r7, #6]
200049c6:	b2da      	uxtb	r2, r3
200049c8:	4b19      	ldr	r3, [pc, #100]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200049ca:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (x1 >> 8) & 0xFF;
200049cc:	887b      	ldrh	r3, [r7, #2]
200049ce:	0a1b      	lsrs	r3, r3, #8
200049d0:	b29b      	uxth	r3, r3
200049d2:	b2da      	uxtb	r2, r3
200049d4:	4b16      	ldr	r3, [pc, #88]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200049d6:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = x1 & 0xFF;
200049d8:	887b      	ldrh	r3, [r7, #2]
200049da:	b2da      	uxtb	r2, r3
200049dc:	4b14      	ldr	r3, [pc, #80]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200049de:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
200049e0:	2201      	movs	r2, #1
200049e2:	2104      	movs	r1, #4
200049e4:	4812      	ldr	r0, [pc, #72]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200049e6:	f7ff ff35 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PAGE_ADDR);
200049ea:	202b      	movs	r0, #43	; 0x2b
200049ec:	f7ff fe66 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (y0 >> 8) & 0xFF;
200049f0:	88bb      	ldrh	r3, [r7, #4]
200049f2:	0a1b      	lsrs	r3, r3, #8
200049f4:	b29b      	uxth	r3, r3
200049f6:	b2da      	uxtb	r2, r3
200049f8:	4b0d      	ldr	r3, [pc, #52]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200049fa:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = y0 & 0xFF;
200049fc:	88bb      	ldrh	r3, [r7, #4]
200049fe:	b2da      	uxtb	r2, r3
20004a00:	4b0b      	ldr	r3, [pc, #44]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004a02:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (y1 >> 8) & 0xFF;
20004a04:	883b      	ldrh	r3, [r7, #0]
20004a06:	0a1b      	lsrs	r3, r3, #8
20004a08:	b29b      	uxth	r3, r3
20004a0a:	b2da      	uxtb	r2, r3
20004a0c:	4b08      	ldr	r3, [pc, #32]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004a0e:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = y1 & 0xFF;
20004a10:	883b      	ldrh	r3, [r7, #0]
20004a12:	b2da      	uxtb	r2, r3
20004a14:	4b06      	ldr	r3, [pc, #24]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004a16:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004a18:	2201      	movs	r2, #1
20004a1a:	2104      	movs	r1, #4
20004a1c:	4804      	ldr	r0, [pc, #16]	; (20004a30 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004a1e:	f7ff ff19 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
20004a22:	202c      	movs	r0, #44	; 0x2c
20004a24:	f7ff fe4a 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
}
20004a28:	bf00      	nop
20004a2a:	370c      	adds	r7, #12
20004a2c:	46bd      	mov	sp, r7
20004a2e:	bd90      	pop	{r4, r7, pc}
20004a30:	2000e8f4 	.word	0x2000e8f4

20004a34 <tftDisplay_ILI9341_Init_PowerControl_A>:
//------------------------------------------------------------------
/* Initialization static functions */
static void tftDisplay_ILI9341_Init_PowerControl_A()
{
20004a34:	b580      	push	{r7, lr}
20004a36:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x39;
20004a38:	4b0c      	ldr	r3, [pc, #48]	; (20004a6c <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004a3a:	2239      	movs	r2, #57	; 0x39
20004a3c:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x2C;
20004a3e:	4b0b      	ldr	r3, [pc, #44]	; (20004a6c <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004a40:	222c      	movs	r2, #44	; 0x2c
20004a42:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x00;
20004a44:	4b09      	ldr	r3, [pc, #36]	; (20004a6c <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004a46:	2200      	movs	r2, #0
20004a48:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x34;
20004a4a:	4b08      	ldr	r3, [pc, #32]	; (20004a6c <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004a4c:	2234      	movs	r2, #52	; 0x34
20004a4e:	70da      	strb	r2, [r3, #3]
	DataBuffer[4] = 0x02;
20004a50:	4b06      	ldr	r3, [pc, #24]	; (20004a6c <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004a52:	2202      	movs	r2, #2
20004a54:	711a      	strb	r2, [r3, #4]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERA);
20004a56:	20cb      	movs	r0, #203	; 0xcb
20004a58:	f7ff fe30 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 5, 1);
20004a5c:	2201      	movs	r2, #1
20004a5e:	2105      	movs	r1, #5
20004a60:	4802      	ldr	r0, [pc, #8]	; (20004a6c <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004a62:	f7ff fef7 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004a66:	bf00      	nop
20004a68:	bd80      	pop	{r7, pc}
20004a6a:	bf00      	nop
20004a6c:	2000e8f4 	.word	0x2000e8f4

20004a70 <tftDisplay_ILI9341_Init_PowerControl_B>:

static void tftDisplay_ILI9341_Init_PowerControl_B()
{
20004a70:	b580      	push	{r7, lr}
20004a72:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004a74:	4b09      	ldr	r3, [pc, #36]	; (20004a9c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004a76:	2200      	movs	r2, #0
20004a78:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0xC1;
20004a7a:	4b08      	ldr	r3, [pc, #32]	; (20004a9c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004a7c:	22c1      	movs	r2, #193	; 0xc1
20004a7e:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x30;
20004a80:	4b06      	ldr	r3, [pc, #24]	; (20004a9c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004a82:	2230      	movs	r2, #48	; 0x30
20004a84:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERB);
20004a86:	20cf      	movs	r0, #207	; 0xcf
20004a88:	f7ff fe18 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20004a8c:	2201      	movs	r2, #1
20004a8e:	2103      	movs	r1, #3
20004a90:	4802      	ldr	r0, [pc, #8]	; (20004a9c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004a92:	f7ff fedf 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004a96:	bf00      	nop
20004a98:	bd80      	pop	{r7, pc}
20004a9a:	bf00      	nop
20004a9c:	2000e8f4 	.word	0x2000e8f4

20004aa0 <tftDisplay_ILI9341_Init_DriverTimingControl_A>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_A()
{
20004aa0:	b580      	push	{r7, lr}
20004aa2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x85;
20004aa4:	4b09      	ldr	r3, [pc, #36]	; (20004acc <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004aa6:	2285      	movs	r2, #133	; 0x85
20004aa8:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
20004aaa:	4b08      	ldr	r3, [pc, #32]	; (20004acc <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004aac:	2200      	movs	r2, #0
20004aae:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x78;
20004ab0:	4b06      	ldr	r3, [pc, #24]	; (20004acc <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004ab2:	2278      	movs	r2, #120	; 0x78
20004ab4:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20004ab6:	20ea      	movs	r0, #234	; 0xea
20004ab8:	f7ff fe00 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20004abc:	2201      	movs	r2, #1
20004abe:	2103      	movs	r1, #3
20004ac0:	4802      	ldr	r0, [pc, #8]	; (20004acc <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004ac2:	f7ff fec7 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004ac6:	bf00      	nop
20004ac8:	bd80      	pop	{r7, pc}
20004aca:	bf00      	nop
20004acc:	2000e8f4 	.word	0x2000e8f4

20004ad0 <tftDisplay_ILI9341_Init_DriverTimingControl_B>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_B()
{
20004ad0:	b580      	push	{r7, lr}
20004ad2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004ad4:	4b07      	ldr	r3, [pc, #28]	; (20004af4 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004ad6:	2200      	movs	r2, #0
20004ad8:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
20004ada:	4b06      	ldr	r3, [pc, #24]	; (20004af4 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004adc:	2200      	movs	r2, #0
20004ade:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20004ae0:	20ea      	movs	r0, #234	; 0xea
20004ae2:	f7ff fdeb 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004ae6:	2201      	movs	r2, #1
20004ae8:	2102      	movs	r1, #2
20004aea:	4802      	ldr	r0, [pc, #8]	; (20004af4 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004aec:	f7ff feb2 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004af0:	bf00      	nop
20004af2:	bd80      	pop	{r7, pc}
20004af4:	2000e8f4 	.word	0x2000e8f4

20004af8 <tftDisplay_ILI9341_Init_PowerSequenceControl>:

static void tftDisplay_ILI9341_Init_PowerSequenceControl()
{
20004af8:	b580      	push	{r7, lr}
20004afa:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x64;
20004afc:	4b0a      	ldr	r3, [pc, #40]	; (20004b28 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004afe:	2264      	movs	r2, #100	; 0x64
20004b00:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x03;
20004b02:	4b09      	ldr	r3, [pc, #36]	; (20004b28 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004b04:	2203      	movs	r2, #3
20004b06:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x12;
20004b08:	4b07      	ldr	r3, [pc, #28]	; (20004b28 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004b0a:	2212      	movs	r2, #18
20004b0c:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x81;
20004b0e:	4b06      	ldr	r3, [pc, #24]	; (20004b28 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004b10:	2281      	movs	r2, #129	; 0x81
20004b12:	70da      	strb	r2, [r3, #3]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER_SEQ);
20004b14:	20ed      	movs	r0, #237	; 0xed
20004b16:	f7ff fdd1 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004b1a:	2201      	movs	r2, #1
20004b1c:	2104      	movs	r1, #4
20004b1e:	4802      	ldr	r0, [pc, #8]	; (20004b28 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004b20:	f7ff fe98 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004b24:	bf00      	nop
20004b26:	bd80      	pop	{r7, pc}
20004b28:	2000e8f4 	.word	0x2000e8f4

20004b2c <tftDisplay_ILI9341_Init_PumpRatioControl>:

static void tftDisplay_ILI9341_Init_PumpRatioControl()
{
20004b2c:	b580      	push	{r7, lr}
20004b2e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x20;
20004b30:	4b05      	ldr	r3, [pc, #20]	; (20004b48 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
20004b32:	2220      	movs	r2, #32
20004b34:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PRC);
20004b36:	20f7      	movs	r0, #247	; 0xf7
20004b38:	f7ff fdc0 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004b3c:	4802      	ldr	r0, [pc, #8]	; (20004b48 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
20004b3e:	f7ff fe3d 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004b42:	bf00      	nop
20004b44:	bd80      	pop	{r7, pc}
20004b46:	bf00      	nop
20004b48:	2000e8f4 	.word	0x2000e8f4

20004b4c <tftDisplay_ILI9341_Init_PowerControlVRH>:

static void tftDisplay_ILI9341_Init_PowerControlVRH()
{
20004b4c:	b580      	push	{r7, lr}
20004b4e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
20004b50:	4b05      	ldr	r3, [pc, #20]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
20004b52:	2210      	movs	r2, #16
20004b54:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER1);
20004b56:	20c0      	movs	r0, #192	; 0xc0
20004b58:	f7ff fdb0 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004b5c:	4802      	ldr	r0, [pc, #8]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
20004b5e:	f7ff fe2d 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004b62:	bf00      	nop
20004b64:	bd80      	pop	{r7, pc}
20004b66:	bf00      	nop
20004b68:	2000e8f4 	.word	0x2000e8f4

20004b6c <tftDisplay_ILI9341_Init_PowerControlSAP>:

static void tftDisplay_ILI9341_Init_PowerControlSAP()
{
20004b6c:	b580      	push	{r7, lr}
20004b6e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
20004b70:	4b05      	ldr	r3, [pc, #20]	; (20004b88 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
20004b72:	2210      	movs	r2, #16
20004b74:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER2);
20004b76:	20c1      	movs	r0, #193	; 0xc1
20004b78:	f7ff fda0 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004b7c:	4802      	ldr	r0, [pc, #8]	; (20004b88 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
20004b7e:	f7ff fe1d 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004b82:	bf00      	nop
20004b84:	bd80      	pop	{r7, pc}
20004b86:	bf00      	nop
20004b88:	2000e8f4 	.word	0x2000e8f4

20004b8c <tftDisplay_ILI9341_Init_VCOMControl_1>:

static void tftDisplay_ILI9341_Init_VCOMControl_1()
{
20004b8c:	b580      	push	{r7, lr}
20004b8e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x3E;
20004b90:	4b07      	ldr	r3, [pc, #28]	; (20004bb0 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004b92:	223e      	movs	r2, #62	; 0x3e
20004b94:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x28;
20004b96:	4b06      	ldr	r3, [pc, #24]	; (20004bb0 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004b98:	2228      	movs	r2, #40	; 0x28
20004b9a:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM1);
20004b9c:	20c5      	movs	r0, #197	; 0xc5
20004b9e:	f7ff fd8d 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004ba2:	2201      	movs	r2, #1
20004ba4:	2102      	movs	r1, #2
20004ba6:	4802      	ldr	r0, [pc, #8]	; (20004bb0 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004ba8:	f7ff fe54 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004bac:	bf00      	nop
20004bae:	bd80      	pop	{r7, pc}
20004bb0:	2000e8f4 	.word	0x2000e8f4

20004bb4 <tftDisplay_ILI9341_Init_VCOMControl_2>:

static void tftDisplay_ILI9341_Init_VCOMControl_2()
{
20004bb4:	b580      	push	{r7, lr}
20004bb6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x86;
20004bb8:	4b05      	ldr	r3, [pc, #20]	; (20004bd0 <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20004bba:	2286      	movs	r2, #134	; 0x86
20004bbc:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM2);
20004bbe:	20c7      	movs	r0, #199	; 0xc7
20004bc0:	f7ff fd7c 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004bc4:	4802      	ldr	r0, [pc, #8]	; (20004bd0 <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20004bc6:	f7ff fdf9 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004bca:	bf00      	nop
20004bcc:	bd80      	pop	{r7, pc}
20004bce:	bf00      	nop
20004bd0:	2000e8f4 	.word	0x2000e8f4

20004bd4 <tftDisplay_ILI9341_Init_MemmoryAccessControl>:

static void tftDisplay_ILI9341_Init_MemmoryAccessControl()
{
20004bd4:	b580      	push	{r7, lr}
20004bd6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x48;
20004bd8:	4b05      	ldr	r3, [pc, #20]	; (20004bf0 <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20004bda:	2248      	movs	r2, #72	; 0x48
20004bdc:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_MAC);
20004bde:	2036      	movs	r0, #54	; 0x36
20004be0:	f7ff fd6c 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004be4:	4802      	ldr	r0, [pc, #8]	; (20004bf0 <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20004be6:	f7ff fde9 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004bea:	bf00      	nop
20004bec:	bd80      	pop	{r7, pc}
20004bee:	bf00      	nop
20004bf0:	2000e8f4 	.word	0x2000e8f4

20004bf4 <tftDisplay_ILI9341_Init_PixelFormatSet>:

static void tftDisplay_ILI9341_Init_PixelFormatSet()
{
20004bf4:	b580      	push	{r7, lr}
20004bf6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x55;
20004bf8:	4b05      	ldr	r3, [pc, #20]	; (20004c10 <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20004bfa:	2255      	movs	r2, #85	; 0x55
20004bfc:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PIXEL_FORMAT);
20004bfe:	203a      	movs	r0, #58	; 0x3a
20004c00:	f7ff fd5c 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004c04:	4802      	ldr	r0, [pc, #8]	; (20004c10 <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20004c06:	f7ff fdd9 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004c0a:	bf00      	nop
20004c0c:	bd80      	pop	{r7, pc}
20004c0e:	bf00      	nop
20004c10:	2000e8f4 	.word	0x2000e8f4

20004c14 <tftDisplay_ILI9341_Init_FrameRationControl>:

static void tftDisplay_ILI9341_Init_FrameRationControl()
{
20004c14:	b580      	push	{r7, lr}
20004c16:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004c18:	4b07      	ldr	r3, [pc, #28]	; (20004c38 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004c1a:	2200      	movs	r2, #0
20004c1c:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x18;
20004c1e:	4b06      	ldr	r3, [pc, #24]	; (20004c38 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004c20:	2218      	movs	r2, #24
20004c22:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_FRMCTR1);
20004c24:	20b1      	movs	r0, #177	; 0xb1
20004c26:	f7ff fd49 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004c2a:	2201      	movs	r2, #1
20004c2c:	2102      	movs	r1, #2
20004c2e:	4802      	ldr	r0, [pc, #8]	; (20004c38 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004c30:	f7ff fe10 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004c34:	bf00      	nop
20004c36:	bd80      	pop	{r7, pc}
20004c38:	2000e8f4 	.word	0x2000e8f4

20004c3c <tftDisplay_ILI9341_Init_DisplayFunctionControl>:

static void tftDisplay_ILI9341_Init_DisplayFunctionControl()
{
20004c3c:	b580      	push	{r7, lr}
20004c3e:	af00      	add	r7, sp, #0
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DFC);
20004c40:	20b6      	movs	r0, #182	; 0xb6
20004c42:	f7ff fd3b 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(0x08);
20004c46:	2008      	movs	r0, #8
20004c48:	f7ff fd86 	bl	20004758 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x82);
20004c4c:	2082      	movs	r0, #130	; 0x82
20004c4e:	f7ff fd83 	bl	20004758 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x27);
20004c52:	2027      	movs	r0, #39	; 0x27
20004c54:	f7ff fd80 	bl	20004758 <tftDisplay_ILI9341_SendData>
}
20004c58:	bf00      	nop
20004c5a:	bd80      	pop	{r7, pc}

20004c5c <tftDisplay_ILI9341_Init_GammaSet>:

static void tftDisplay_ILI9341_Init_GammaSet()
{
20004c5c:	b580      	push	{r7, lr}
20004c5e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x01;
20004c60:	4b05      	ldr	r3, [pc, #20]	; (20004c78 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
20004c62:	2201      	movs	r2, #1
20004c64:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GAMMA);
20004c66:	2026      	movs	r0, #38	; 0x26
20004c68:	f7ff fd28 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004c6c:	4802      	ldr	r0, [pc, #8]	; (20004c78 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
20004c6e:	f7ff fda5 	bl	200047bc <tftDisplay_ILI9341_SendSingleData>
}
20004c72:	bf00      	nop
20004c74:	bd80      	pop	{r7, pc}
20004c76:	bf00      	nop
20004c78:	2000e8f4 	.word	0x2000e8f4

20004c7c <tftDisplay_ILI9341_Init_PositiveGammaCorection>:

static void tftDisplay_ILI9341_Init_PositiveGammaCorection()
{
20004c7c:	b580      	push	{r7, lr}
20004c7e:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x0F;
20004c80:	4b1b      	ldr	r3, [pc, #108]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004c82:	220f      	movs	r2, #15
20004c84:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x31;
20004c86:	4b1a      	ldr	r3, [pc, #104]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004c88:	2231      	movs	r2, #49	; 0x31
20004c8a:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x2B;
20004c8c:	4b18      	ldr	r3, [pc, #96]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004c8e:	222b      	movs	r2, #43	; 0x2b
20004c90:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x0C;
20004c92:	4b17      	ldr	r3, [pc, #92]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004c94:	220c      	movs	r2, #12
20004c96:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x0E;
20004c98:	4b15      	ldr	r3, [pc, #84]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004c9a:	220e      	movs	r2, #14
20004c9c:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x08;
20004c9e:	4b14      	ldr	r3, [pc, #80]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004ca0:	2208      	movs	r2, #8
20004ca2:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x4E;
20004ca4:	4b12      	ldr	r3, [pc, #72]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004ca6:	224e      	movs	r2, #78	; 0x4e
20004ca8:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xF1;
20004caa:	4b11      	ldr	r3, [pc, #68]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cac:	22f1      	movs	r2, #241	; 0xf1
20004cae:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x37;
20004cb0:	4b0f      	ldr	r3, [pc, #60]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cb2:	2237      	movs	r2, #55	; 0x37
20004cb4:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x07;
20004cb6:	4b0e      	ldr	r3, [pc, #56]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cb8:	2207      	movs	r2, #7
20004cba:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x10;
20004cbc:	4b0c      	ldr	r3, [pc, #48]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cbe:	2210      	movs	r2, #16
20004cc0:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x03;
20004cc2:	4b0b      	ldr	r3, [pc, #44]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cc4:	2203      	movs	r2, #3
20004cc6:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x0E;
20004cc8:	4b09      	ldr	r3, [pc, #36]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cca:	220e      	movs	r2, #14
20004ccc:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x09;
20004cce:	4b08      	ldr	r3, [pc, #32]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cd0:	2209      	movs	r2, #9
20004cd2:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x00;
20004cd4:	4b06      	ldr	r3, [pc, #24]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004cd6:	2200      	movs	r2, #0
20004cd8:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PGAMMA);
20004cda:	20e0      	movs	r0, #224	; 0xe0
20004cdc:	f7ff fcee 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20004ce0:	2201      	movs	r2, #1
20004ce2:	210f      	movs	r1, #15
20004ce4:	4802      	ldr	r0, [pc, #8]	; (20004cf0 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004ce6:	f7ff fdb5 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004cea:	bf00      	nop
20004cec:	bd80      	pop	{r7, pc}
20004cee:	bf00      	nop
20004cf0:	2000e8f4 	.word	0x2000e8f4

20004cf4 <tftDisplay_ILI9341_Init_NegativeGammaCorection>:

static void tftDisplay_ILI9341_Init_NegativeGammaCorection()
{
20004cf4:	b580      	push	{r7, lr}
20004cf6:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x00;
20004cf8:	4b1b      	ldr	r3, [pc, #108]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004cfa:	2200      	movs	r2, #0
20004cfc:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x0E;
20004cfe:	4b1a      	ldr	r3, [pc, #104]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d00:	220e      	movs	r2, #14
20004d02:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x14;
20004d04:	4b18      	ldr	r3, [pc, #96]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d06:	2214      	movs	r2, #20
20004d08:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x03;
20004d0a:	4b17      	ldr	r3, [pc, #92]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d0c:	2203      	movs	r2, #3
20004d0e:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x11;
20004d10:	4b15      	ldr	r3, [pc, #84]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d12:	2211      	movs	r2, #17
20004d14:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x07;
20004d16:	4b14      	ldr	r3, [pc, #80]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d18:	2207      	movs	r2, #7
20004d1a:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x31;
20004d1c:	4b12      	ldr	r3, [pc, #72]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d1e:	2231      	movs	r2, #49	; 0x31
20004d20:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xC1;
20004d22:	4b11      	ldr	r3, [pc, #68]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d24:	22c1      	movs	r2, #193	; 0xc1
20004d26:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x48;
20004d28:	4b0f      	ldr	r3, [pc, #60]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d2a:	2248      	movs	r2, #72	; 0x48
20004d2c:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x08;
20004d2e:	4b0e      	ldr	r3, [pc, #56]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d30:	2208      	movs	r2, #8
20004d32:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x0F;
20004d34:	4b0c      	ldr	r3, [pc, #48]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d36:	220f      	movs	r2, #15
20004d38:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x0C;
20004d3a:	4b0b      	ldr	r3, [pc, #44]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d3c:	220c      	movs	r2, #12
20004d3e:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x31;
20004d40:	4b09      	ldr	r3, [pc, #36]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d42:	2231      	movs	r2, #49	; 0x31
20004d44:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x36;
20004d46:	4b08      	ldr	r3, [pc, #32]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d48:	2236      	movs	r2, #54	; 0x36
20004d4a:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x0F;
20004d4c:	4b06      	ldr	r3, [pc, #24]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d4e:	220f      	movs	r2, #15
20004d50:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_NGAMMA);
20004d52:	20e1      	movs	r0, #225	; 0xe1
20004d54:	f7ff fcb2 	bl	200046bc <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20004d58:	2201      	movs	r2, #1
20004d5a:	210f      	movs	r1, #15
20004d5c:	4802      	ldr	r0, [pc, #8]	; (20004d68 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004d5e:	f7ff fd79 	bl	20004854 <tftDisplay_ILI9341_WriteMultipleData>
}
20004d62:	bf00      	nop
20004d64:	bd80      	pop	{r7, pc}
20004d66:	bf00      	nop
20004d68:	2000e8f4 	.word	0x2000e8f4

20004d6c <__NVIC_SetPriorityGrouping>:
{
20004d6c:	b480      	push	{r7}
20004d6e:	b085      	sub	sp, #20
20004d70:	af00      	add	r7, sp, #0
20004d72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20004d74:	687b      	ldr	r3, [r7, #4]
20004d76:	f003 0307 	and.w	r3, r3, #7
20004d7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20004d7c:	4b0c      	ldr	r3, [pc, #48]	; (20004db0 <__NVIC_SetPriorityGrouping+0x44>)
20004d7e:	68db      	ldr	r3, [r3, #12]
20004d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20004d82:	68ba      	ldr	r2, [r7, #8]
20004d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20004d88:	4013      	ands	r3, r2
20004d8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20004d8c:	68fb      	ldr	r3, [r7, #12]
20004d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20004d90:	68bb      	ldr	r3, [r7, #8]
20004d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20004d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20004d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20004d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20004d9e:	4a04      	ldr	r2, [pc, #16]	; (20004db0 <__NVIC_SetPriorityGrouping+0x44>)
20004da0:	68bb      	ldr	r3, [r7, #8]
20004da2:	60d3      	str	r3, [r2, #12]
}
20004da4:	bf00      	nop
20004da6:	3714      	adds	r7, #20
20004da8:	46bd      	mov	sp, r7
20004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dae:	4770      	bx	lr
20004db0:	e000ed00 	.word	0xe000ed00

20004db4 <__NVIC_GetPriorityGrouping>:
{
20004db4:	b480      	push	{r7}
20004db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20004db8:	4b04      	ldr	r3, [pc, #16]	; (20004dcc <__NVIC_GetPriorityGrouping+0x18>)
20004dba:	68db      	ldr	r3, [r3, #12]
20004dbc:	0a1b      	lsrs	r3, r3, #8
20004dbe:	f003 0307 	and.w	r3, r3, #7
}
20004dc2:	4618      	mov	r0, r3
20004dc4:	46bd      	mov	sp, r7
20004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dca:	4770      	bx	lr
20004dcc:	e000ed00 	.word	0xe000ed00

20004dd0 <__NVIC_EnableIRQ>:
{
20004dd0:	b480      	push	{r7}
20004dd2:	b083      	sub	sp, #12
20004dd4:	af00      	add	r7, sp, #0
20004dd6:	4603      	mov	r3, r0
20004dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004dde:	2b00      	cmp	r3, #0
20004de0:	db0b      	blt.n	20004dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20004de2:	79fb      	ldrb	r3, [r7, #7]
20004de4:	f003 021f 	and.w	r2, r3, #31
20004de8:	4907      	ldr	r1, [pc, #28]	; (20004e08 <__NVIC_EnableIRQ+0x38>)
20004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004dee:	095b      	lsrs	r3, r3, #5
20004df0:	2001      	movs	r0, #1
20004df2:	fa00 f202 	lsl.w	r2, r0, r2
20004df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
20004dfa:	bf00      	nop
20004dfc:	370c      	adds	r7, #12
20004dfe:	46bd      	mov	sp, r7
20004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e04:	4770      	bx	lr
20004e06:	bf00      	nop
20004e08:	e000e100 	.word	0xe000e100

20004e0c <__NVIC_SetPriority>:
{
20004e0c:	b480      	push	{r7}
20004e0e:	b083      	sub	sp, #12
20004e10:	af00      	add	r7, sp, #0
20004e12:	4603      	mov	r3, r0
20004e14:	6039      	str	r1, [r7, #0]
20004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004e1c:	2b00      	cmp	r3, #0
20004e1e:	db0a      	blt.n	20004e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004e20:	683b      	ldr	r3, [r7, #0]
20004e22:	b2da      	uxtb	r2, r3
20004e24:	490c      	ldr	r1, [pc, #48]	; (20004e58 <__NVIC_SetPriority+0x4c>)
20004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004e2a:	0112      	lsls	r2, r2, #4
20004e2c:	b2d2      	uxtb	r2, r2
20004e2e:	440b      	add	r3, r1
20004e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
20004e34:	e00a      	b.n	20004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004e36:	683b      	ldr	r3, [r7, #0]
20004e38:	b2da      	uxtb	r2, r3
20004e3a:	4908      	ldr	r1, [pc, #32]	; (20004e5c <__NVIC_SetPriority+0x50>)
20004e3c:	79fb      	ldrb	r3, [r7, #7]
20004e3e:	f003 030f 	and.w	r3, r3, #15
20004e42:	3b04      	subs	r3, #4
20004e44:	0112      	lsls	r2, r2, #4
20004e46:	b2d2      	uxtb	r2, r2
20004e48:	440b      	add	r3, r1
20004e4a:	761a      	strb	r2, [r3, #24]
}
20004e4c:	bf00      	nop
20004e4e:	370c      	adds	r7, #12
20004e50:	46bd      	mov	sp, r7
20004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e56:	4770      	bx	lr
20004e58:	e000e100 	.word	0xe000e100
20004e5c:	e000ed00 	.word	0xe000ed00

20004e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20004e60:	b480      	push	{r7}
20004e62:	b089      	sub	sp, #36	; 0x24
20004e64:	af00      	add	r7, sp, #0
20004e66:	60f8      	str	r0, [r7, #12]
20004e68:	60b9      	str	r1, [r7, #8]
20004e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20004e6c:	68fb      	ldr	r3, [r7, #12]
20004e6e:	f003 0307 	and.w	r3, r3, #7
20004e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20004e74:	69fb      	ldr	r3, [r7, #28]
20004e76:	f1c3 0307 	rsb	r3, r3, #7
20004e7a:	2b04      	cmp	r3, #4
20004e7c:	bf28      	it	cs
20004e7e:	2304      	movcs	r3, #4
20004e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20004e82:	69fb      	ldr	r3, [r7, #28]
20004e84:	3304      	adds	r3, #4
20004e86:	2b06      	cmp	r3, #6
20004e88:	d902      	bls.n	20004e90 <NVIC_EncodePriority+0x30>
20004e8a:	69fb      	ldr	r3, [r7, #28]
20004e8c:	3b03      	subs	r3, #3
20004e8e:	e000      	b.n	20004e92 <NVIC_EncodePriority+0x32>
20004e90:	2300      	movs	r3, #0
20004e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004e94:	f04f 32ff 	mov.w	r2, #4294967295
20004e98:	69bb      	ldr	r3, [r7, #24]
20004e9a:	fa02 f303 	lsl.w	r3, r2, r3
20004e9e:	43da      	mvns	r2, r3
20004ea0:	68bb      	ldr	r3, [r7, #8]
20004ea2:	401a      	ands	r2, r3
20004ea4:	697b      	ldr	r3, [r7, #20]
20004ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20004ea8:	f04f 31ff 	mov.w	r1, #4294967295
20004eac:	697b      	ldr	r3, [r7, #20]
20004eae:	fa01 f303 	lsl.w	r3, r1, r3
20004eb2:	43d9      	mvns	r1, r3
20004eb4:	687b      	ldr	r3, [r7, #4]
20004eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004eb8:	4313      	orrs	r3, r2
         );
}
20004eba:	4618      	mov	r0, r3
20004ebc:	3724      	adds	r7, #36	; 0x24
20004ebe:	46bd      	mov	sp, r7
20004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ec4:	4770      	bx	lr
	...

20004ec8 <LL_DMA_DisableStream>:
{
20004ec8:	b480      	push	{r7}
20004eca:	b083      	sub	sp, #12
20004ecc:	af00      	add	r7, sp, #0
20004ece:	6078      	str	r0, [r7, #4]
20004ed0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20004ed2:	4a0c      	ldr	r2, [pc, #48]	; (20004f04 <LL_DMA_DisableStream+0x3c>)
20004ed4:	683b      	ldr	r3, [r7, #0]
20004ed6:	4413      	add	r3, r2
20004ed8:	781b      	ldrb	r3, [r3, #0]
20004eda:	461a      	mov	r2, r3
20004edc:	687b      	ldr	r3, [r7, #4]
20004ede:	4413      	add	r3, r2
20004ee0:	681b      	ldr	r3, [r3, #0]
20004ee2:	4908      	ldr	r1, [pc, #32]	; (20004f04 <LL_DMA_DisableStream+0x3c>)
20004ee4:	683a      	ldr	r2, [r7, #0]
20004ee6:	440a      	add	r2, r1
20004ee8:	7812      	ldrb	r2, [r2, #0]
20004eea:	4611      	mov	r1, r2
20004eec:	687a      	ldr	r2, [r7, #4]
20004eee:	440a      	add	r2, r1
20004ef0:	f023 0301 	bic.w	r3, r3, #1
20004ef4:	6013      	str	r3, [r2, #0]
}
20004ef6:	bf00      	nop
20004ef8:	370c      	adds	r7, #12
20004efa:	46bd      	mov	sp, r7
20004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f00:	4770      	bx	lr
20004f02:	bf00      	nop
20004f04:	20009cf8 	.word	0x20009cf8

20004f08 <LL_DMA_SetDataTransferDirection>:
{
20004f08:	b480      	push	{r7}
20004f0a:	b085      	sub	sp, #20
20004f0c:	af00      	add	r7, sp, #0
20004f0e:	60f8      	str	r0, [r7, #12]
20004f10:	60b9      	str	r1, [r7, #8]
20004f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
20004f14:	4a0d      	ldr	r2, [pc, #52]	; (20004f4c <LL_DMA_SetDataTransferDirection+0x44>)
20004f16:	68bb      	ldr	r3, [r7, #8]
20004f18:	4413      	add	r3, r2
20004f1a:	781b      	ldrb	r3, [r3, #0]
20004f1c:	461a      	mov	r2, r3
20004f1e:	68fb      	ldr	r3, [r7, #12]
20004f20:	4413      	add	r3, r2
20004f22:	681b      	ldr	r3, [r3, #0]
20004f24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
20004f28:	4908      	ldr	r1, [pc, #32]	; (20004f4c <LL_DMA_SetDataTransferDirection+0x44>)
20004f2a:	68bb      	ldr	r3, [r7, #8]
20004f2c:	440b      	add	r3, r1
20004f2e:	781b      	ldrb	r3, [r3, #0]
20004f30:	4619      	mov	r1, r3
20004f32:	68fb      	ldr	r3, [r7, #12]
20004f34:	440b      	add	r3, r1
20004f36:	4619      	mov	r1, r3
20004f38:	687b      	ldr	r3, [r7, #4]
20004f3a:	4313      	orrs	r3, r2
20004f3c:	600b      	str	r3, [r1, #0]
}
20004f3e:	bf00      	nop
20004f40:	3714      	adds	r7, #20
20004f42:	46bd      	mov	sp, r7
20004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f48:	4770      	bx	lr
20004f4a:	bf00      	nop
20004f4c:	20009cf8 	.word	0x20009cf8

20004f50 <LL_DMA_SetMode>:
{
20004f50:	b480      	push	{r7}
20004f52:	b085      	sub	sp, #20
20004f54:	af00      	add	r7, sp, #0
20004f56:	60f8      	str	r0, [r7, #12]
20004f58:	60b9      	str	r1, [r7, #8]
20004f5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
20004f5c:	4a0d      	ldr	r2, [pc, #52]	; (20004f94 <LL_DMA_SetMode+0x44>)
20004f5e:	68bb      	ldr	r3, [r7, #8]
20004f60:	4413      	add	r3, r2
20004f62:	781b      	ldrb	r3, [r3, #0]
20004f64:	461a      	mov	r2, r3
20004f66:	68fb      	ldr	r3, [r7, #12]
20004f68:	4413      	add	r3, r2
20004f6a:	681b      	ldr	r3, [r3, #0]
20004f6c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
20004f70:	4908      	ldr	r1, [pc, #32]	; (20004f94 <LL_DMA_SetMode+0x44>)
20004f72:	68bb      	ldr	r3, [r7, #8]
20004f74:	440b      	add	r3, r1
20004f76:	781b      	ldrb	r3, [r3, #0]
20004f78:	4619      	mov	r1, r3
20004f7a:	68fb      	ldr	r3, [r7, #12]
20004f7c:	440b      	add	r3, r1
20004f7e:	4619      	mov	r1, r3
20004f80:	687b      	ldr	r3, [r7, #4]
20004f82:	4313      	orrs	r3, r2
20004f84:	600b      	str	r3, [r1, #0]
}
20004f86:	bf00      	nop
20004f88:	3714      	adds	r7, #20
20004f8a:	46bd      	mov	sp, r7
20004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f90:	4770      	bx	lr
20004f92:	bf00      	nop
20004f94:	20009cf8 	.word	0x20009cf8

20004f98 <LL_DMA_SetPeriphIncMode>:
{
20004f98:	b480      	push	{r7}
20004f9a:	b085      	sub	sp, #20
20004f9c:	af00      	add	r7, sp, #0
20004f9e:	60f8      	str	r0, [r7, #12]
20004fa0:	60b9      	str	r1, [r7, #8]
20004fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
20004fa4:	4a0d      	ldr	r2, [pc, #52]	; (20004fdc <LL_DMA_SetPeriphIncMode+0x44>)
20004fa6:	68bb      	ldr	r3, [r7, #8]
20004fa8:	4413      	add	r3, r2
20004faa:	781b      	ldrb	r3, [r3, #0]
20004fac:	461a      	mov	r2, r3
20004fae:	68fb      	ldr	r3, [r7, #12]
20004fb0:	4413      	add	r3, r2
20004fb2:	681b      	ldr	r3, [r3, #0]
20004fb4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
20004fb8:	4908      	ldr	r1, [pc, #32]	; (20004fdc <LL_DMA_SetPeriphIncMode+0x44>)
20004fba:	68bb      	ldr	r3, [r7, #8]
20004fbc:	440b      	add	r3, r1
20004fbe:	781b      	ldrb	r3, [r3, #0]
20004fc0:	4619      	mov	r1, r3
20004fc2:	68fb      	ldr	r3, [r7, #12]
20004fc4:	440b      	add	r3, r1
20004fc6:	4619      	mov	r1, r3
20004fc8:	687b      	ldr	r3, [r7, #4]
20004fca:	4313      	orrs	r3, r2
20004fcc:	600b      	str	r3, [r1, #0]
}
20004fce:	bf00      	nop
20004fd0:	3714      	adds	r7, #20
20004fd2:	46bd      	mov	sp, r7
20004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fd8:	4770      	bx	lr
20004fda:	bf00      	nop
20004fdc:	20009cf8 	.word	0x20009cf8

20004fe0 <LL_DMA_SetMemoryIncMode>:
{
20004fe0:	b480      	push	{r7}
20004fe2:	b085      	sub	sp, #20
20004fe4:	af00      	add	r7, sp, #0
20004fe6:	60f8      	str	r0, [r7, #12]
20004fe8:	60b9      	str	r1, [r7, #8]
20004fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
20004fec:	4a0d      	ldr	r2, [pc, #52]	; (20005024 <LL_DMA_SetMemoryIncMode+0x44>)
20004fee:	68bb      	ldr	r3, [r7, #8]
20004ff0:	4413      	add	r3, r2
20004ff2:	781b      	ldrb	r3, [r3, #0]
20004ff4:	461a      	mov	r2, r3
20004ff6:	68fb      	ldr	r3, [r7, #12]
20004ff8:	4413      	add	r3, r2
20004ffa:	681b      	ldr	r3, [r3, #0]
20004ffc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
20005000:	4908      	ldr	r1, [pc, #32]	; (20005024 <LL_DMA_SetMemoryIncMode+0x44>)
20005002:	68bb      	ldr	r3, [r7, #8]
20005004:	440b      	add	r3, r1
20005006:	781b      	ldrb	r3, [r3, #0]
20005008:	4619      	mov	r1, r3
2000500a:	68fb      	ldr	r3, [r7, #12]
2000500c:	440b      	add	r3, r1
2000500e:	4619      	mov	r1, r3
20005010:	687b      	ldr	r3, [r7, #4]
20005012:	4313      	orrs	r3, r2
20005014:	600b      	str	r3, [r1, #0]
}
20005016:	bf00      	nop
20005018:	3714      	adds	r7, #20
2000501a:	46bd      	mov	sp, r7
2000501c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005020:	4770      	bx	lr
20005022:	bf00      	nop
20005024:	20009cf8 	.word	0x20009cf8

20005028 <LL_DMA_SetPeriphSize>:
{
20005028:	b480      	push	{r7}
2000502a:	b085      	sub	sp, #20
2000502c:	af00      	add	r7, sp, #0
2000502e:	60f8      	str	r0, [r7, #12]
20005030:	60b9      	str	r1, [r7, #8]
20005032:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
20005034:	4a0d      	ldr	r2, [pc, #52]	; (2000506c <LL_DMA_SetPeriphSize+0x44>)
20005036:	68bb      	ldr	r3, [r7, #8]
20005038:	4413      	add	r3, r2
2000503a:	781b      	ldrb	r3, [r3, #0]
2000503c:	461a      	mov	r2, r3
2000503e:	68fb      	ldr	r3, [r7, #12]
20005040:	4413      	add	r3, r2
20005042:	681b      	ldr	r3, [r3, #0]
20005044:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
20005048:	4908      	ldr	r1, [pc, #32]	; (2000506c <LL_DMA_SetPeriphSize+0x44>)
2000504a:	68bb      	ldr	r3, [r7, #8]
2000504c:	440b      	add	r3, r1
2000504e:	781b      	ldrb	r3, [r3, #0]
20005050:	4619      	mov	r1, r3
20005052:	68fb      	ldr	r3, [r7, #12]
20005054:	440b      	add	r3, r1
20005056:	4619      	mov	r1, r3
20005058:	687b      	ldr	r3, [r7, #4]
2000505a:	4313      	orrs	r3, r2
2000505c:	600b      	str	r3, [r1, #0]
}
2000505e:	bf00      	nop
20005060:	3714      	adds	r7, #20
20005062:	46bd      	mov	sp, r7
20005064:	f85d 7b04 	ldr.w	r7, [sp], #4
20005068:	4770      	bx	lr
2000506a:	bf00      	nop
2000506c:	20009cf8 	.word	0x20009cf8

20005070 <LL_DMA_SetMemorySize>:
{
20005070:	b480      	push	{r7}
20005072:	b085      	sub	sp, #20
20005074:	af00      	add	r7, sp, #0
20005076:	60f8      	str	r0, [r7, #12]
20005078:	60b9      	str	r1, [r7, #8]
2000507a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
2000507c:	4a0d      	ldr	r2, [pc, #52]	; (200050b4 <LL_DMA_SetMemorySize+0x44>)
2000507e:	68bb      	ldr	r3, [r7, #8]
20005080:	4413      	add	r3, r2
20005082:	781b      	ldrb	r3, [r3, #0]
20005084:	461a      	mov	r2, r3
20005086:	68fb      	ldr	r3, [r7, #12]
20005088:	4413      	add	r3, r2
2000508a:	681b      	ldr	r3, [r3, #0]
2000508c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
20005090:	4908      	ldr	r1, [pc, #32]	; (200050b4 <LL_DMA_SetMemorySize+0x44>)
20005092:	68bb      	ldr	r3, [r7, #8]
20005094:	440b      	add	r3, r1
20005096:	781b      	ldrb	r3, [r3, #0]
20005098:	4619      	mov	r1, r3
2000509a:	68fb      	ldr	r3, [r7, #12]
2000509c:	440b      	add	r3, r1
2000509e:	4619      	mov	r1, r3
200050a0:	687b      	ldr	r3, [r7, #4]
200050a2:	4313      	orrs	r3, r2
200050a4:	600b      	str	r3, [r1, #0]
}
200050a6:	bf00      	nop
200050a8:	3714      	adds	r7, #20
200050aa:	46bd      	mov	sp, r7
200050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200050b0:	4770      	bx	lr
200050b2:	bf00      	nop
200050b4:	20009cf8 	.word	0x20009cf8

200050b8 <LL_DMA_SetStreamPriorityLevel>:
{
200050b8:	b480      	push	{r7}
200050ba:	b085      	sub	sp, #20
200050bc:	af00      	add	r7, sp, #0
200050be:	60f8      	str	r0, [r7, #12]
200050c0:	60b9      	str	r1, [r7, #8]
200050c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
200050c4:	4a0d      	ldr	r2, [pc, #52]	; (200050fc <LL_DMA_SetStreamPriorityLevel+0x44>)
200050c6:	68bb      	ldr	r3, [r7, #8]
200050c8:	4413      	add	r3, r2
200050ca:	781b      	ldrb	r3, [r3, #0]
200050cc:	461a      	mov	r2, r3
200050ce:	68fb      	ldr	r3, [r7, #12]
200050d0:	4413      	add	r3, r2
200050d2:	681b      	ldr	r3, [r3, #0]
200050d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
200050d8:	4908      	ldr	r1, [pc, #32]	; (200050fc <LL_DMA_SetStreamPriorityLevel+0x44>)
200050da:	68bb      	ldr	r3, [r7, #8]
200050dc:	440b      	add	r3, r1
200050de:	781b      	ldrb	r3, [r3, #0]
200050e0:	4619      	mov	r1, r3
200050e2:	68fb      	ldr	r3, [r7, #12]
200050e4:	440b      	add	r3, r1
200050e6:	4619      	mov	r1, r3
200050e8:	687b      	ldr	r3, [r7, #4]
200050ea:	4313      	orrs	r3, r2
200050ec:	600b      	str	r3, [r1, #0]
}
200050ee:	bf00      	nop
200050f0:	3714      	adds	r7, #20
200050f2:	46bd      	mov	sp, r7
200050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200050f8:	4770      	bx	lr
200050fa:	bf00      	nop
200050fc:	20009cf8 	.word	0x20009cf8

20005100 <LL_DMA_SetChannelSelection>:
{
20005100:	b480      	push	{r7}
20005102:	b085      	sub	sp, #20
20005104:	af00      	add	r7, sp, #0
20005106:	60f8      	str	r0, [r7, #12]
20005108:	60b9      	str	r1, [r7, #8]
2000510a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
2000510c:	4a0d      	ldr	r2, [pc, #52]	; (20005144 <LL_DMA_SetChannelSelection+0x44>)
2000510e:	68bb      	ldr	r3, [r7, #8]
20005110:	4413      	add	r3, r2
20005112:	781b      	ldrb	r3, [r3, #0]
20005114:	461a      	mov	r2, r3
20005116:	68fb      	ldr	r3, [r7, #12]
20005118:	4413      	add	r3, r2
2000511a:	681b      	ldr	r3, [r3, #0]
2000511c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
20005120:	4908      	ldr	r1, [pc, #32]	; (20005144 <LL_DMA_SetChannelSelection+0x44>)
20005122:	68bb      	ldr	r3, [r7, #8]
20005124:	440b      	add	r3, r1
20005126:	781b      	ldrb	r3, [r3, #0]
20005128:	4619      	mov	r1, r3
2000512a:	68fb      	ldr	r3, [r7, #12]
2000512c:	440b      	add	r3, r1
2000512e:	4619      	mov	r1, r3
20005130:	687b      	ldr	r3, [r7, #4]
20005132:	4313      	orrs	r3, r2
20005134:	600b      	str	r3, [r1, #0]
}
20005136:	bf00      	nop
20005138:	3714      	adds	r7, #20
2000513a:	46bd      	mov	sp, r7
2000513c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005140:	4770      	bx	lr
20005142:	bf00      	nop
20005144:	20009cf8 	.word	0x20009cf8

20005148 <LL_DMA_DisableFifoMode>:
{
20005148:	b480      	push	{r7}
2000514a:	b083      	sub	sp, #12
2000514c:	af00      	add	r7, sp, #0
2000514e:	6078      	str	r0, [r7, #4]
20005150:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
20005152:	4a0c      	ldr	r2, [pc, #48]	; (20005184 <LL_DMA_DisableFifoMode+0x3c>)
20005154:	683b      	ldr	r3, [r7, #0]
20005156:	4413      	add	r3, r2
20005158:	781b      	ldrb	r3, [r3, #0]
2000515a:	461a      	mov	r2, r3
2000515c:	687b      	ldr	r3, [r7, #4]
2000515e:	4413      	add	r3, r2
20005160:	695b      	ldr	r3, [r3, #20]
20005162:	4908      	ldr	r1, [pc, #32]	; (20005184 <LL_DMA_DisableFifoMode+0x3c>)
20005164:	683a      	ldr	r2, [r7, #0]
20005166:	440a      	add	r2, r1
20005168:	7812      	ldrb	r2, [r2, #0]
2000516a:	4611      	mov	r1, r2
2000516c:	687a      	ldr	r2, [r7, #4]
2000516e:	440a      	add	r2, r1
20005170:	f023 0304 	bic.w	r3, r3, #4
20005174:	6153      	str	r3, [r2, #20]
}
20005176:	bf00      	nop
20005178:	370c      	adds	r7, #12
2000517a:	46bd      	mov	sp, r7
2000517c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005180:	4770      	bx	lr
20005182:	bf00      	nop
20005184:	20009cf8 	.word	0x20009cf8

20005188 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
20005188:	b480      	push	{r7}
2000518a:	b083      	sub	sp, #12
2000518c:	af00      	add	r7, sp, #0
2000518e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
20005190:	687b      	ldr	r3, [r7, #4]
20005192:	2220      	movs	r2, #32
20005194:	60da      	str	r2, [r3, #12]
}
20005196:	bf00      	nop
20005198:	370c      	adds	r7, #12
2000519a:	46bd      	mov	sp, r7
2000519c:	f85d 7b04 	ldr.w	r7, [sp], #4
200051a0:	4770      	bx	lr

200051a2 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
200051a2:	b480      	push	{r7}
200051a4:	b083      	sub	sp, #12
200051a6:	af00      	add	r7, sp, #0
200051a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
200051aa:	687b      	ldr	r3, [r7, #4]
200051ac:	2208      	movs	r2, #8
200051ae:	60da      	str	r2, [r3, #12]
}
200051b0:	bf00      	nop
200051b2:	370c      	adds	r7, #12
200051b4:	46bd      	mov	sp, r7
200051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200051ba:	4770      	bx	lr

200051bc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
200051bc:	b480      	push	{r7}
200051be:	b083      	sub	sp, #12
200051c0:	af00      	add	r7, sp, #0
200051c2:	6078      	str	r0, [r7, #4]
200051c4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
200051c6:	4a0c      	ldr	r2, [pc, #48]	; (200051f8 <LL_DMA_EnableIT_TE+0x3c>)
200051c8:	683b      	ldr	r3, [r7, #0]
200051ca:	4413      	add	r3, r2
200051cc:	781b      	ldrb	r3, [r3, #0]
200051ce:	461a      	mov	r2, r3
200051d0:	687b      	ldr	r3, [r7, #4]
200051d2:	4413      	add	r3, r2
200051d4:	681b      	ldr	r3, [r3, #0]
200051d6:	4908      	ldr	r1, [pc, #32]	; (200051f8 <LL_DMA_EnableIT_TE+0x3c>)
200051d8:	683a      	ldr	r2, [r7, #0]
200051da:	440a      	add	r2, r1
200051dc:	7812      	ldrb	r2, [r2, #0]
200051de:	4611      	mov	r1, r2
200051e0:	687a      	ldr	r2, [r7, #4]
200051e2:	440a      	add	r2, r1
200051e4:	f043 0304 	orr.w	r3, r3, #4
200051e8:	6013      	str	r3, [r2, #0]
}
200051ea:	bf00      	nop
200051ec:	370c      	adds	r7, #12
200051ee:	46bd      	mov	sp, r7
200051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200051f4:	4770      	bx	lr
200051f6:	bf00      	nop
200051f8:	20009cf8 	.word	0x20009cf8

200051fc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
200051fc:	b480      	push	{r7}
200051fe:	b083      	sub	sp, #12
20005200:	af00      	add	r7, sp, #0
20005202:	6078      	str	r0, [r7, #4]
20005204:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
20005206:	4a0c      	ldr	r2, [pc, #48]	; (20005238 <LL_DMA_EnableIT_TC+0x3c>)
20005208:	683b      	ldr	r3, [r7, #0]
2000520a:	4413      	add	r3, r2
2000520c:	781b      	ldrb	r3, [r3, #0]
2000520e:	461a      	mov	r2, r3
20005210:	687b      	ldr	r3, [r7, #4]
20005212:	4413      	add	r3, r2
20005214:	681b      	ldr	r3, [r3, #0]
20005216:	4908      	ldr	r1, [pc, #32]	; (20005238 <LL_DMA_EnableIT_TC+0x3c>)
20005218:	683a      	ldr	r2, [r7, #0]
2000521a:	440a      	add	r2, r1
2000521c:	7812      	ldrb	r2, [r2, #0]
2000521e:	4611      	mov	r1, r2
20005220:	687a      	ldr	r2, [r7, #4]
20005222:	440a      	add	r2, r1
20005224:	f043 0310 	orr.w	r3, r3, #16
20005228:	6013      	str	r3, [r2, #0]
}
2000522a:	bf00      	nop
2000522c:	370c      	adds	r7, #12
2000522e:	46bd      	mov	sp, r7
20005230:	f85d 7b04 	ldr.w	r7, [sp], #4
20005234:	4770      	bx	lr
20005236:	bf00      	nop
20005238:	20009cf8 	.word	0x20009cf8

2000523c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
2000523c:	b480      	push	{r7}
2000523e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
20005240:	4b05      	ldr	r3, [pc, #20]	; (20005258 <LL_RCC_HSE_Enable+0x1c>)
20005242:	681b      	ldr	r3, [r3, #0]
20005244:	4a04      	ldr	r2, [pc, #16]	; (20005258 <LL_RCC_HSE_Enable+0x1c>)
20005246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000524a:	6013      	str	r3, [r2, #0]
}
2000524c:	bf00      	nop
2000524e:	46bd      	mov	sp, r7
20005250:	f85d 7b04 	ldr.w	r7, [sp], #4
20005254:	4770      	bx	lr
20005256:	bf00      	nop
20005258:	40023800 	.word	0x40023800

2000525c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
2000525c:	b480      	push	{r7}
2000525e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
20005260:	4b07      	ldr	r3, [pc, #28]	; (20005280 <LL_RCC_HSE_IsReady+0x24>)
20005262:	681b      	ldr	r3, [r3, #0]
20005264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2000526c:	bf0c      	ite	eq
2000526e:	2301      	moveq	r3, #1
20005270:	2300      	movne	r3, #0
20005272:	b2db      	uxtb	r3, r3
}
20005274:	4618      	mov	r0, r3
20005276:	46bd      	mov	sp, r7
20005278:	f85d 7b04 	ldr.w	r7, [sp], #4
2000527c:	4770      	bx	lr
2000527e:	bf00      	nop
20005280:	40023800 	.word	0x40023800

20005284 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
20005284:	b480      	push	{r7}
20005286:	b083      	sub	sp, #12
20005288:	af00      	add	r7, sp, #0
2000528a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
2000528c:	4b06      	ldr	r3, [pc, #24]	; (200052a8 <LL_RCC_SetSysClkSource+0x24>)
2000528e:	689b      	ldr	r3, [r3, #8]
20005290:	f023 0203 	bic.w	r2, r3, #3
20005294:	4904      	ldr	r1, [pc, #16]	; (200052a8 <LL_RCC_SetSysClkSource+0x24>)
20005296:	687b      	ldr	r3, [r7, #4]
20005298:	4313      	orrs	r3, r2
2000529a:	608b      	str	r3, [r1, #8]
}
2000529c:	bf00      	nop
2000529e:	370c      	adds	r7, #12
200052a0:	46bd      	mov	sp, r7
200052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200052a6:	4770      	bx	lr
200052a8:	40023800 	.word	0x40023800

200052ac <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
200052ac:	b480      	push	{r7}
200052ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
200052b0:	4b04      	ldr	r3, [pc, #16]	; (200052c4 <LL_RCC_GetSysClkSource+0x18>)
200052b2:	689b      	ldr	r3, [r3, #8]
200052b4:	f003 030c 	and.w	r3, r3, #12
}
200052b8:	4618      	mov	r0, r3
200052ba:	46bd      	mov	sp, r7
200052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200052c0:	4770      	bx	lr
200052c2:	bf00      	nop
200052c4:	40023800 	.word	0x40023800

200052c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
200052c8:	b480      	push	{r7}
200052ca:	b083      	sub	sp, #12
200052cc:	af00      	add	r7, sp, #0
200052ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
200052d0:	4b06      	ldr	r3, [pc, #24]	; (200052ec <LL_RCC_SetAHBPrescaler+0x24>)
200052d2:	689b      	ldr	r3, [r3, #8]
200052d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
200052d8:	4904      	ldr	r1, [pc, #16]	; (200052ec <LL_RCC_SetAHBPrescaler+0x24>)
200052da:	687b      	ldr	r3, [r7, #4]
200052dc:	4313      	orrs	r3, r2
200052de:	608b      	str	r3, [r1, #8]
}
200052e0:	bf00      	nop
200052e2:	370c      	adds	r7, #12
200052e4:	46bd      	mov	sp, r7
200052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200052ea:	4770      	bx	lr
200052ec:	40023800 	.word	0x40023800

200052f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
200052f0:	b480      	push	{r7}
200052f2:	b083      	sub	sp, #12
200052f4:	af00      	add	r7, sp, #0
200052f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
200052f8:	4b06      	ldr	r3, [pc, #24]	; (20005314 <LL_RCC_SetAPB1Prescaler+0x24>)
200052fa:	689b      	ldr	r3, [r3, #8]
200052fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20005300:	4904      	ldr	r1, [pc, #16]	; (20005314 <LL_RCC_SetAPB1Prescaler+0x24>)
20005302:	687b      	ldr	r3, [r7, #4]
20005304:	4313      	orrs	r3, r2
20005306:	608b      	str	r3, [r1, #8]
}
20005308:	bf00      	nop
2000530a:	370c      	adds	r7, #12
2000530c:	46bd      	mov	sp, r7
2000530e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005312:	4770      	bx	lr
20005314:	40023800 	.word	0x40023800

20005318 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
20005318:	b480      	push	{r7}
2000531a:	b083      	sub	sp, #12
2000531c:	af00      	add	r7, sp, #0
2000531e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
20005320:	4b06      	ldr	r3, [pc, #24]	; (2000533c <LL_RCC_SetAPB2Prescaler+0x24>)
20005322:	689b      	ldr	r3, [r3, #8]
20005324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20005328:	4904      	ldr	r1, [pc, #16]	; (2000533c <LL_RCC_SetAPB2Prescaler+0x24>)
2000532a:	687b      	ldr	r3, [r7, #4]
2000532c:	4313      	orrs	r3, r2
2000532e:	608b      	str	r3, [r1, #8]
}
20005330:	bf00      	nop
20005332:	370c      	adds	r7, #12
20005334:	46bd      	mov	sp, r7
20005336:	f85d 7b04 	ldr.w	r7, [sp], #4
2000533a:	4770      	bx	lr
2000533c:	40023800 	.word	0x40023800

20005340 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
20005340:	b480      	push	{r7}
20005342:	b083      	sub	sp, #12
20005344:	af00      	add	r7, sp, #0
20005346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
20005348:	4b07      	ldr	r3, [pc, #28]	; (20005368 <LL_RCC_SetTIMPrescaler+0x28>)
2000534a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000534e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
20005352:	4905      	ldr	r1, [pc, #20]	; (20005368 <LL_RCC_SetTIMPrescaler+0x28>)
20005354:	687b      	ldr	r3, [r7, #4]
20005356:	4313      	orrs	r3, r2
20005358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
2000535c:	bf00      	nop
2000535e:	370c      	adds	r7, #12
20005360:	46bd      	mov	sp, r7
20005362:	f85d 7b04 	ldr.w	r7, [sp], #4
20005366:	4770      	bx	lr
20005368:	40023800 	.word	0x40023800

2000536c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
2000536c:	b480      	push	{r7}
2000536e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
20005370:	4b05      	ldr	r3, [pc, #20]	; (20005388 <LL_RCC_PLL_Enable+0x1c>)
20005372:	681b      	ldr	r3, [r3, #0]
20005374:	4a04      	ldr	r2, [pc, #16]	; (20005388 <LL_RCC_PLL_Enable+0x1c>)
20005376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000537a:	6013      	str	r3, [r2, #0]
}
2000537c:	bf00      	nop
2000537e:	46bd      	mov	sp, r7
20005380:	f85d 7b04 	ldr.w	r7, [sp], #4
20005384:	4770      	bx	lr
20005386:	bf00      	nop
20005388:	40023800 	.word	0x40023800

2000538c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
2000538c:	b480      	push	{r7}
2000538e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
20005390:	4b07      	ldr	r3, [pc, #28]	; (200053b0 <LL_RCC_PLL_IsReady+0x24>)
20005392:	681b      	ldr	r3, [r3, #0]
20005394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
2000539c:	bf0c      	ite	eq
2000539e:	2301      	moveq	r3, #1
200053a0:	2300      	movne	r3, #0
200053a2:	b2db      	uxtb	r3, r3
}
200053a4:	4618      	mov	r0, r3
200053a6:	46bd      	mov	sp, r7
200053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200053ac:	4770      	bx	lr
200053ae:	bf00      	nop
200053b0:	40023800 	.word	0x40023800

200053b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
200053b4:	b480      	push	{r7}
200053b6:	b085      	sub	sp, #20
200053b8:	af00      	add	r7, sp, #0
200053ba:	60f8      	str	r0, [r7, #12]
200053bc:	60b9      	str	r1, [r7, #8]
200053be:	607a      	str	r2, [r7, #4]
200053c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
200053c2:	4b0d      	ldr	r3, [pc, #52]	; (200053f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200053c4:	685a      	ldr	r2, [r3, #4]
200053c6:	4b0d      	ldr	r3, [pc, #52]	; (200053fc <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
200053c8:	4013      	ands	r3, r2
200053ca:	68f9      	ldr	r1, [r7, #12]
200053cc:	68ba      	ldr	r2, [r7, #8]
200053ce:	4311      	orrs	r1, r2
200053d0:	687a      	ldr	r2, [r7, #4]
200053d2:	0192      	lsls	r2, r2, #6
200053d4:	430a      	orrs	r2, r1
200053d6:	4908      	ldr	r1, [pc, #32]	; (200053f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200053d8:	4313      	orrs	r3, r2
200053da:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
200053dc:	4b06      	ldr	r3, [pc, #24]	; (200053f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200053de:	685b      	ldr	r3, [r3, #4]
200053e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
200053e4:	4904      	ldr	r1, [pc, #16]	; (200053f8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200053e6:	683b      	ldr	r3, [r7, #0]
200053e8:	4313      	orrs	r3, r2
200053ea:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
200053ec:	bf00      	nop
200053ee:	3714      	adds	r7, #20
200053f0:	46bd      	mov	sp, r7
200053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200053f6:	4770      	bx	lr
200053f8:	40023800 	.word	0x40023800
200053fc:	ffbf8000 	.word	0xffbf8000

20005400 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
20005400:	b480      	push	{r7}
20005402:	b085      	sub	sp, #20
20005404:	af00      	add	r7, sp, #0
20005406:	60f8      	str	r0, [r7, #12]
20005408:	60b9      	str	r1, [r7, #8]
2000540a:	607a      	str	r2, [r7, #4]
2000540c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
2000540e:	4b0a      	ldr	r3, [pc, #40]	; (20005438 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005410:	685a      	ldr	r2, [r3, #4]
20005412:	4b0a      	ldr	r3, [pc, #40]	; (2000543c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
20005414:	4013      	ands	r3, r2
20005416:	68f9      	ldr	r1, [r7, #12]
20005418:	68ba      	ldr	r2, [r7, #8]
2000541a:	4311      	orrs	r1, r2
2000541c:	687a      	ldr	r2, [r7, #4]
2000541e:	0192      	lsls	r2, r2, #6
20005420:	4311      	orrs	r1, r2
20005422:	683a      	ldr	r2, [r7, #0]
20005424:	430a      	orrs	r2, r1
20005426:	4904      	ldr	r1, [pc, #16]	; (20005438 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005428:	4313      	orrs	r3, r2
2000542a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
2000542c:	bf00      	nop
2000542e:	3714      	adds	r7, #20
20005430:	46bd      	mov	sp, r7
20005432:	f85d 7b04 	ldr.w	r7, [sp], #4
20005436:	4770      	bx	lr
20005438:	40023800 	.word	0x40023800
2000543c:	f0bf8000 	.word	0xf0bf8000

20005440 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
20005440:	b480      	push	{r7}
20005442:	b085      	sub	sp, #20
20005444:	af00      	add	r7, sp, #0
20005446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
20005448:	4b08      	ldr	r3, [pc, #32]	; (2000546c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000544a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000544c:	4907      	ldr	r1, [pc, #28]	; (2000546c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000544e:	687b      	ldr	r3, [r7, #4]
20005450:	4313      	orrs	r3, r2
20005452:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20005454:	4b05      	ldr	r3, [pc, #20]	; (2000546c <LL_AHB1_GRP1_EnableClock+0x2c>)
20005456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005458:	687b      	ldr	r3, [r7, #4]
2000545a:	4013      	ands	r3, r2
2000545c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000545e:	68fb      	ldr	r3, [r7, #12]
}
20005460:	bf00      	nop
20005462:	3714      	adds	r7, #20
20005464:	46bd      	mov	sp, r7
20005466:	f85d 7b04 	ldr.w	r7, [sp], #4
2000546a:	4770      	bx	lr
2000546c:	40023800 	.word	0x40023800

20005470 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
20005470:	b480      	push	{r7}
20005472:	b085      	sub	sp, #20
20005474:	af00      	add	r7, sp, #0
20005476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
20005478:	4b08      	ldr	r3, [pc, #32]	; (2000549c <LL_AHB2_GRP1_EnableClock+0x2c>)
2000547a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2000547c:	4907      	ldr	r1, [pc, #28]	; (2000549c <LL_AHB2_GRP1_EnableClock+0x2c>)
2000547e:	687b      	ldr	r3, [r7, #4]
20005480:	4313      	orrs	r3, r2
20005482:	634b      	str	r3, [r1, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
20005484:	4b05      	ldr	r3, [pc, #20]	; (2000549c <LL_AHB2_GRP1_EnableClock+0x2c>)
20005486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20005488:	687b      	ldr	r3, [r7, #4]
2000548a:	4013      	ands	r3, r2
2000548c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000548e:	68fb      	ldr	r3, [r7, #12]
}
20005490:	bf00      	nop
20005492:	3714      	adds	r7, #20
20005494:	46bd      	mov	sp, r7
20005496:	f85d 7b04 	ldr.w	r7, [sp], #4
2000549a:	4770      	bx	lr
2000549c:	40023800 	.word	0x40023800

200054a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
200054a0:	b480      	push	{r7}
200054a2:	b085      	sub	sp, #20
200054a4:	af00      	add	r7, sp, #0
200054a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
200054a8:	4b08      	ldr	r3, [pc, #32]	; (200054cc <LL_APB1_GRP1_EnableClock+0x2c>)
200054aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200054ac:	4907      	ldr	r1, [pc, #28]	; (200054cc <LL_APB1_GRP1_EnableClock+0x2c>)
200054ae:	687b      	ldr	r3, [r7, #4]
200054b0:	4313      	orrs	r3, r2
200054b2:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
200054b4:	4b05      	ldr	r3, [pc, #20]	; (200054cc <LL_APB1_GRP1_EnableClock+0x2c>)
200054b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200054b8:	687b      	ldr	r3, [r7, #4]
200054ba:	4013      	ands	r3, r2
200054bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
200054be:	68fb      	ldr	r3, [r7, #12]
}
200054c0:	bf00      	nop
200054c2:	3714      	adds	r7, #20
200054c4:	46bd      	mov	sp, r7
200054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200054ca:	4770      	bx	lr
200054cc:	40023800 	.word	0x40023800

200054d0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
200054d0:	b480      	push	{r7}
200054d2:	b085      	sub	sp, #20
200054d4:	af00      	add	r7, sp, #0
200054d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
200054d8:	4b08      	ldr	r3, [pc, #32]	; (200054fc <LL_APB2_GRP1_EnableClock+0x2c>)
200054da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200054dc:	4907      	ldr	r1, [pc, #28]	; (200054fc <LL_APB2_GRP1_EnableClock+0x2c>)
200054de:	687b      	ldr	r3, [r7, #4]
200054e0:	4313      	orrs	r3, r2
200054e2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
200054e4:	4b05      	ldr	r3, [pc, #20]	; (200054fc <LL_APB2_GRP1_EnableClock+0x2c>)
200054e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200054e8:	687b      	ldr	r3, [r7, #4]
200054ea:	4013      	ands	r3, r2
200054ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
200054ee:	68fb      	ldr	r3, [r7, #12]
}
200054f0:	bf00      	nop
200054f2:	3714      	adds	r7, #20
200054f4:	46bd      	mov	sp, r7
200054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200054fa:	4770      	bx	lr
200054fc:	40023800 	.word	0x40023800

20005500 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
20005500:	b480      	push	{r7}
20005502:	b083      	sub	sp, #12
20005504:	af00      	add	r7, sp, #0
20005506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
20005508:	4b06      	ldr	r3, [pc, #24]	; (20005524 <LL_FLASH_SetLatency+0x24>)
2000550a:	681b      	ldr	r3, [r3, #0]
2000550c:	f023 020f 	bic.w	r2, r3, #15
20005510:	4904      	ldr	r1, [pc, #16]	; (20005524 <LL_FLASH_SetLatency+0x24>)
20005512:	687b      	ldr	r3, [r7, #4]
20005514:	4313      	orrs	r3, r2
20005516:	600b      	str	r3, [r1, #0]
}
20005518:	bf00      	nop
2000551a:	370c      	adds	r7, #12
2000551c:	46bd      	mov	sp, r7
2000551e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005522:	4770      	bx	lr
20005524:	40023c00 	.word	0x40023c00

20005528 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
20005528:	b480      	push	{r7}
2000552a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
2000552c:	4b04      	ldr	r3, [pc, #16]	; (20005540 <LL_FLASH_GetLatency+0x18>)
2000552e:	681b      	ldr	r3, [r3, #0]
20005530:	f003 030f 	and.w	r3, r3, #15
}
20005534:	4618      	mov	r0, r3
20005536:	46bd      	mov	sp, r7
20005538:	f85d 7b04 	ldr.w	r7, [sp], #4
2000553c:	4770      	bx	lr
2000553e:	bf00      	nop
20005540:	40023c00 	.word	0x40023c00

20005544 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
20005544:	b480      	push	{r7}
20005546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
20005548:	4b05      	ldr	r3, [pc, #20]	; (20005560 <LL_PWR_EnableOverDriveMode+0x1c>)
2000554a:	681b      	ldr	r3, [r3, #0]
2000554c:	4a04      	ldr	r2, [pc, #16]	; (20005560 <LL_PWR_EnableOverDriveMode+0x1c>)
2000554e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005552:	6013      	str	r3, [r2, #0]
}
20005554:	bf00      	nop
20005556:	46bd      	mov	sp, r7
20005558:	f85d 7b04 	ldr.w	r7, [sp], #4
2000555c:	4770      	bx	lr
2000555e:	bf00      	nop
20005560:	40007000 	.word	0x40007000

20005564 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
20005564:	b480      	push	{r7}
20005566:	b083      	sub	sp, #12
20005568:	af00      	add	r7, sp, #0
2000556a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
2000556c:	4b06      	ldr	r3, [pc, #24]	; (20005588 <LL_PWR_SetRegulVoltageScaling+0x24>)
2000556e:	681b      	ldr	r3, [r3, #0]
20005570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20005574:	4904      	ldr	r1, [pc, #16]	; (20005588 <LL_PWR_SetRegulVoltageScaling+0x24>)
20005576:	687b      	ldr	r3, [r7, #4]
20005578:	4313      	orrs	r3, r2
2000557a:	600b      	str	r3, [r1, #0]
}
2000557c:	bf00      	nop
2000557e:	370c      	adds	r7, #12
20005580:	46bd      	mov	sp, r7
20005582:	f85d 7b04 	ldr.w	r7, [sp], #4
20005586:	4770      	bx	lr
20005588:	40007000 	.word	0x40007000

2000558c <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
2000558c:	b480      	push	{r7}
2000558e:	b083      	sub	sp, #12
20005590:	af00      	add	r7, sp, #0
20005592:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
20005594:	687b      	ldr	r3, [r7, #4]
20005596:	681b      	ldr	r3, [r3, #0]
20005598:	f043 0204 	orr.w	r2, r3, #4
2000559c:	687b      	ldr	r3, [r7, #4]
2000559e:	601a      	str	r2, [r3, #0]
}
200055a0:	bf00      	nop
200055a2:	370c      	adds	r7, #12
200055a4:	46bd      	mov	sp, r7
200055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200055aa:	4770      	bx	lr

200055ac <LL_SPI_Enable>:
{
200055ac:	b480      	push	{r7}
200055ae:	b083      	sub	sp, #12
200055b0:	af00      	add	r7, sp, #0
200055b2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
200055b4:	687b      	ldr	r3, [r7, #4]
200055b6:	681b      	ldr	r3, [r3, #0]
200055b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200055bc:	687b      	ldr	r3, [r7, #4]
200055be:	601a      	str	r2, [r3, #0]
}
200055c0:	bf00      	nop
200055c2:	370c      	adds	r7, #12
200055c4:	46bd      	mov	sp, r7
200055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200055ca:	4770      	bx	lr

200055cc <LL_SPI_SetStandard>:
{
200055cc:	b480      	push	{r7}
200055ce:	b083      	sub	sp, #12
200055d0:	af00      	add	r7, sp, #0
200055d2:	6078      	str	r0, [r7, #4]
200055d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
200055d6:	687b      	ldr	r3, [r7, #4]
200055d8:	685b      	ldr	r3, [r3, #4]
200055da:	f023 0210 	bic.w	r2, r3, #16
200055de:	683b      	ldr	r3, [r7, #0]
200055e0:	431a      	orrs	r2, r3
200055e2:	687b      	ldr	r3, [r7, #4]
200055e4:	605a      	str	r2, [r3, #4]
}
200055e6:	bf00      	nop
200055e8:	370c      	adds	r7, #12
200055ea:	46bd      	mov	sp, r7
200055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200055f0:	4770      	bx	lr

200055f2 <LL_SPI_EnableDMAReq_TX>:
{
200055f2:	b480      	push	{r7}
200055f4:	b083      	sub	sp, #12
200055f6:	af00      	add	r7, sp, #0
200055f8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
200055fa:	687b      	ldr	r3, [r7, #4]
200055fc:	685b      	ldr	r3, [r3, #4]
200055fe:	f043 0202 	orr.w	r2, r3, #2
20005602:	687b      	ldr	r3, [r7, #4]
20005604:	605a      	str	r2, [r3, #4]
}
20005606:	bf00      	nop
20005608:	370c      	adds	r7, #12
2000560a:	46bd      	mov	sp, r7
2000560c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005610:	4770      	bx	lr

20005612 <LL_GPIO_SetOutputPin>:
{
20005612:	b480      	push	{r7}
20005614:	b083      	sub	sp, #12
20005616:	af00      	add	r7, sp, #0
20005618:	6078      	str	r0, [r7, #4]
2000561a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
2000561c:	687b      	ldr	r3, [r7, #4]
2000561e:	683a      	ldr	r2, [r7, #0]
20005620:	619a      	str	r2, [r3, #24]
}
20005622:	bf00      	nop
20005624:	370c      	adds	r7, #12
20005626:	46bd      	mov	sp, r7
20005628:	f85d 7b04 	ldr.w	r7, [sp], #4
2000562c:	4770      	bx	lr

2000562e <LL_GPIO_ResetOutputPin>:
{
2000562e:	b480      	push	{r7}
20005630:	b083      	sub	sp, #12
20005632:	af00      	add	r7, sp, #0
20005634:	6078      	str	r0, [r7, #4]
20005636:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
20005638:	683b      	ldr	r3, [r7, #0]
2000563a:	041a      	lsls	r2, r3, #16
2000563c:	687b      	ldr	r3, [r7, #4]
2000563e:	619a      	str	r2, [r3, #24]
}
20005640:	bf00      	nop
20005642:	370c      	adds	r7, #12
20005644:	46bd      	mov	sp, r7
20005646:	f85d 7b04 	ldr.w	r7, [sp], #4
2000564a:	4770      	bx	lr

2000564c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
2000564c:	b480      	push	{r7}
2000564e:	b085      	sub	sp, #20
20005650:	af00      	add	r7, sp, #0
20005652:	6078      	str	r0, [r7, #4]
20005654:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
20005656:	687b      	ldr	r3, [r7, #4]
20005658:	695b      	ldr	r3, [r3, #20]
2000565a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
2000565c:	68fa      	ldr	r2, [r7, #12]
2000565e:	683b      	ldr	r3, [r7, #0]
20005660:	4013      	ands	r3, r2
20005662:	041a      	lsls	r2, r3, #16
20005664:	68fb      	ldr	r3, [r7, #12]
20005666:	43d9      	mvns	r1, r3
20005668:	683b      	ldr	r3, [r7, #0]
2000566a:	400b      	ands	r3, r1
2000566c:	431a      	orrs	r2, r3
2000566e:	687b      	ldr	r3, [r7, #4]
20005670:	619a      	str	r2, [r3, #24]
}
20005672:	bf00      	nop
20005674:	3714      	adds	r7, #20
20005676:	46bd      	mov	sp, r7
20005678:	f85d 7b04 	ldr.w	r7, [sp], #4
2000567c:	4770      	bx	lr
	...

20005680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20005680:	b580      	push	{r7, lr}
20005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ptr = napis;
20005684:	4b3c      	ldr	r3, [pc, #240]	; (20005778 <main+0xf8>)
20005686:	4a3d      	ldr	r2, [pc, #244]	; (2000577c <main+0xfc>)
20005688:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
2000568a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2000568e:	f7ff ff1f 	bl	200054d0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
20005692:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
20005696:	f7ff ff03 	bl	200054a0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000569a:	2003      	movs	r0, #3
2000569c:	f7ff fb66 	bl	20004d6c <__NVIC_SetPriorityGrouping>

  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
200056a0:	f7ff fb88 	bl	20004db4 <__NVIC_GetPriorityGrouping>
200056a4:	4603      	mov	r3, r0
200056a6:	2200      	movs	r2, #0
200056a8:	210f      	movs	r1, #15
200056aa:	4618      	mov	r0, r3
200056ac:	f7ff fbd8 	bl	20004e60 <NVIC_EncodePriority>
200056b0:	4603      	mov	r3, r0
200056b2:	4619      	mov	r1, r3
200056b4:	f06f 0001 	mvn.w	r0, #1
200056b8:	f7ff fba8 	bl	20004e0c <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
200056bc:	f7ff fb7a 	bl	20004db4 <__NVIC_GetPriorityGrouping>
200056c0:	4603      	mov	r3, r0
200056c2:	2200      	movs	r2, #0
200056c4:	210f      	movs	r1, #15
200056c6:	4618      	mov	r0, r3
200056c8:	f7ff fbca 	bl	20004e60 <NVIC_EncodePriority>
200056cc:	4603      	mov	r3, r0
200056ce:	4619      	mov	r1, r3
200056d0:	f04f 30ff 	mov.w	r0, #4294967295
200056d4:	f7ff fb9a 	bl	20004e0c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
200056d8:	f000 f872 	bl	200057c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
200056dc:	f000 f96a 	bl	200059b4 <MX_GPIO_Init>
  MX_DMA_Init();
200056e0:	f000 f950 	bl	20005984 <MX_DMA_Init>
  MX_RNG_Init();
200056e4:	f000 f8be 	bl	20005864 <MX_RNG_Init>
  MX_SPI5_Init();
200056e8:	f000 f8c8 	bl	2000587c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200056ec:	2104      	movs	r1, #4
200056ee:	4824      	ldr	r0, [pc, #144]	; (20005780 <main+0x100>)
200056f0:	f7ff fbea 	bl	20004ec8 <LL_DMA_DisableStream>
  LL_DMA_ClearFlag_TC4(DMA2);
200056f4:	4822      	ldr	r0, [pc, #136]	; (20005780 <main+0x100>)
200056f6:	f7ff fd47 	bl	20005188 <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA2);
200056fa:	4821      	ldr	r0, [pc, #132]	; (20005780 <main+0x100>)
200056fc:	f7ff fd51 	bl	200051a2 <LL_DMA_ClearFlag_TE4>
  LL_SPI_EnableDMAReq_TX(SPI5);
20005700:	4820      	ldr	r0, [pc, #128]	; (20005784 <main+0x104>)
20005702:	f7ff ff76 	bl	200055f2 <LL_SPI_EnableDMAReq_TX>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_4);
20005706:	2104      	movs	r1, #4
20005708:	481d      	ldr	r0, [pc, #116]	; (20005780 <main+0x100>)
2000570a:	f7ff fd77 	bl	200051fc <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_4);
2000570e:	2104      	movs	r1, #4
20005710:	481b      	ldr	r0, [pc, #108]	; (20005780 <main+0x100>)
20005712:	f7ff fd53 	bl	200051bc <LL_DMA_EnableIT_TE>
  LL_SPI_Enable(SPI5);
20005716:	481b      	ldr	r0, [pc, #108]	; (20005784 <main+0x104>)
20005718:	f7ff ff48 	bl	200055ac <LL_SPI_Enable>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
2000571c:	f7fa ffe8 	bl	200006f0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
20005720:	4a19      	ldr	r2, [pc, #100]	; (20005788 <main+0x108>)
20005722:	2101      	movs	r1, #1
20005724:	2001      	movs	r0, #1
20005726:	f7fb f8da 	bl	200008de <osSemaphoreNew>
2000572a:	4603      	mov	r3, r0
2000572c:	4a17      	ldr	r2, [pc, #92]	; (2000578c <main+0x10c>)
2000572e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(StartLCDTask, NULL, &LCD_Task_attributes);
20005730:	4a17      	ldr	r2, [pc, #92]	; (20005790 <main+0x110>)
20005732:	2100      	movs	r1, #0
20005734:	4817      	ldr	r0, [pc, #92]	; (20005794 <main+0x114>)
20005736:	f7fb f825 	bl	20000784 <osThreadNew>
2000573a:	4603      	mov	r3, r0
2000573c:	4a16      	ldr	r2, [pc, #88]	; (20005798 <main+0x118>)
2000573e:	6013      	str	r3, [r2, #0]

  /* creation of LED1_task */
  LED1_taskHandle = osThreadNew(StartTaskLED1, NULL, &LED1_task_attributes);
20005740:	4a16      	ldr	r2, [pc, #88]	; (2000579c <main+0x11c>)
20005742:	2100      	movs	r1, #0
20005744:	4816      	ldr	r0, [pc, #88]	; (200057a0 <main+0x120>)
20005746:	f7fb f81d 	bl	20000784 <osThreadNew>
2000574a:	4603      	mov	r3, r0
2000574c:	4a15      	ldr	r2, [pc, #84]	; (200057a4 <main+0x124>)
2000574e:	6013      	str	r3, [r2, #0]

  /* creation of LED2_tack */
  LED2_tackHandle = osThreadNew(StartTaskLED2, NULL, &LED2_tack_attributes);
20005750:	4a15      	ldr	r2, [pc, #84]	; (200057a8 <main+0x128>)
20005752:	2100      	movs	r1, #0
20005754:	4815      	ldr	r0, [pc, #84]	; (200057ac <main+0x12c>)
20005756:	f7fb f815 	bl	20000784 <osThreadNew>
2000575a:	4603      	mov	r3, r0
2000575c:	4a14      	ldr	r2, [pc, #80]	; (200057b0 <main+0x130>)
2000575e:	6013      	str	r3, [r2, #0]

  /* creation of Reg_task */
  Reg_taskHandle = osThreadNew(Reg_task_init, NULL, &Reg_task_attributes);
20005760:	4a14      	ldr	r2, [pc, #80]	; (200057b4 <main+0x134>)
20005762:	2100      	movs	r1, #0
20005764:	4814      	ldr	r0, [pc, #80]	; (200057b8 <main+0x138>)
20005766:	f7fb f80d 	bl	20000784 <osThreadNew>
2000576a:	4603      	mov	r3, r0
2000576c:	4a13      	ldr	r2, [pc, #76]	; (200057bc <main+0x13c>)
2000576e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
20005770:	f7fa ffe2 	bl	20000738 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20005774:	e7fe      	b.n	20005774 <main+0xf4>
20005776:	bf00      	nop
20005778:	2001e910 	.word	0x2001e910
2000577c:	20009e38 	.word	0x20009e38
20005780:	40026400 	.word	0x40026400
20005784:	40015000 	.word	0x40015000
20005788:	20009d90 	.word	0x20009d90
2000578c:	2001e90c 	.word	0x2001e90c
20005790:	20009d00 	.word	0x20009d00
20005794:	20005add 	.word	0x20005add
20005798:	2001e8fc 	.word	0x2001e8fc
2000579c:	20009d24 	.word	0x20009d24
200057a0:	20005bdd 	.word	0x20005bdd
200057a4:	2001e900 	.word	0x2001e900
200057a8:	20009d48 	.word	0x20009d48
200057ac:	20005c0d 	.word	0x20005c0d
200057b0:	2001e904 	.word	0x2001e904
200057b4:	20009d6c 	.word	0x20009d6c
200057b8:	20005c3d 	.word	0x20005c3d
200057bc:	2001e908 	.word	0x2001e908

200057c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200057c0:	b580      	push	{r7, lr}
200057c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
200057c4:	2005      	movs	r0, #5
200057c6:	f7ff fe9b 	bl	20005500 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
200057ca:	bf00      	nop
200057cc:	f7ff feac 	bl	20005528 <LL_FLASH_GetLatency>
200057d0:	4603      	mov	r3, r0
200057d2:	2b05      	cmp	r3, #5
200057d4:	d1fa      	bne.n	200057cc <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
200057d6:	f44f 4040 	mov.w	r0, #49152	; 0xc000
200057da:	f7ff fec3 	bl	20005564 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
200057de:	f7ff feb1 	bl	20005544 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
200057e2:	f7ff fd2b 	bl	2000523c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
200057e6:	bf00      	nop
200057e8:	f7ff fd38 	bl	2000525c <LL_RCC_HSE_IsReady>
200057ec:	4603      	mov	r3, r0
200057ee:	2b01      	cmp	r3, #1
200057f0:	d1fa      	bne.n	200057e8 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
200057f2:	2300      	movs	r3, #0
200057f4:	22b4      	movs	r2, #180	; 0xb4
200057f6:	2104      	movs	r1, #4
200057f8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
200057fc:	f7ff fdda 	bl	200053b4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
20005800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20005804:	22b4      	movs	r2, #180	; 0xb4
20005806:	2104      	movs	r1, #4
20005808:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2000580c:	f7ff fdf8 	bl	20005400 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
20005810:	f7ff fdac 	bl	2000536c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
20005814:	bf00      	nop
20005816:	f7ff fdb9 	bl	2000538c <LL_RCC_PLL_IsReady>
2000581a:	4603      	mov	r3, r0
2000581c:	2b01      	cmp	r3, #1
2000581e:	d1fa      	bne.n	20005816 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
20005820:	2000      	movs	r0, #0
20005822:	f7ff fd51 	bl	200052c8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
20005826:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
2000582a:	f7ff fd61 	bl	200052f0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
2000582e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20005832:	f7ff fd71 	bl	20005318 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
20005836:	2002      	movs	r0, #2
20005838:	f7ff fd24 	bl	20005284 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
2000583c:	bf00      	nop
2000583e:	f7ff fd35 	bl	200052ac <LL_RCC_GetSysClkSource>
20005842:	4603      	mov	r3, r0
20005844:	2b08      	cmp	r3, #8
20005846:	d1fa      	bne.n	2000583e <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
20005848:	4805      	ldr	r0, [pc, #20]	; (20005860 <SystemClock_Config+0xa0>)
2000584a:	f7fa fed9 	bl	20000600 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
2000584e:	4804      	ldr	r0, [pc, #16]	; (20005860 <SystemClock_Config+0xa0>)
20005850:	f7fa ff0a 	bl	20000668 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
20005854:	2000      	movs	r0, #0
20005856:	f7ff fd73 	bl	20005340 <LL_RCC_SetTIMPrescaler>
}
2000585a:	bf00      	nop
2000585c:	bd80      	pop	{r7, pc}
2000585e:	bf00      	nop
20005860:	0aba9500 	.word	0x0aba9500

20005864 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
20005864:	b580      	push	{r7, lr}
20005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
20005868:	2040      	movs	r0, #64	; 0x40
2000586a:	f7ff fe01 	bl	20005470 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  LL_RNG_Enable(RNG);
2000586e:	4802      	ldr	r0, [pc, #8]	; (20005878 <MX_RNG_Init+0x14>)
20005870:	f7ff fe8c 	bl	2000558c <LL_RNG_Enable>
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
20005874:	bf00      	nop
20005876:	bd80      	pop	{r7, pc}
20005878:	50060800 	.word	0x50060800

2000587c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
2000587c:	b580      	push	{r7, lr}
2000587e:	b090      	sub	sp, #64	; 0x40
20005880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
20005882:	f107 0318 	add.w	r3, r7, #24
20005886:	2228      	movs	r2, #40	; 0x28
20005888:	2100      	movs	r1, #0
2000588a:	4618      	mov	r0, r3
2000588c:	f000 fac2 	bl	20005e14 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
20005890:	463b      	mov	r3, r7
20005892:	2200      	movs	r2, #0
20005894:	601a      	str	r2, [r3, #0]
20005896:	605a      	str	r2, [r3, #4]
20005898:	609a      	str	r2, [r3, #8]
2000589a:	60da      	str	r2, [r3, #12]
2000589c:	611a      	str	r2, [r3, #16]
2000589e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
200058a0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
200058a4:	f7ff fe14 	bl	200054d0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
200058a8:	2020      	movs	r0, #32
200058aa:	f7ff fdc9 	bl	20005440 <LL_AHB1_GRP1_EnableClock>
  /**SPI5 GPIO Configuration
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
200058ae:	f44f 7360 	mov.w	r3, #896	; 0x380
200058b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
200058b4:	2302      	movs	r3, #2
200058b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
200058b8:	2303      	movs	r3, #3
200058ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200058bc:	2300      	movs	r3, #0
200058be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200058c0:	2300      	movs	r3, #0
200058c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
200058c4:	2305      	movs	r3, #5
200058c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
200058c8:	463b      	mov	r3, r7
200058ca:	4619      	mov	r1, r3
200058cc:	482a      	ldr	r0, [pc, #168]	; (20005978 <MX_SPI5_Init+0xfc>)
200058ce:	f7fa fd94 	bl	200003fa <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
200058d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
200058d6:	2104      	movs	r1, #4
200058d8:	4828      	ldr	r0, [pc, #160]	; (2000597c <MX_SPI5_Init+0x100>)
200058da:	f7ff fc11 	bl	20005100 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
200058de:	2240      	movs	r2, #64	; 0x40
200058e0:	2104      	movs	r1, #4
200058e2:	4826      	ldr	r0, [pc, #152]	; (2000597c <MX_SPI5_Init+0x100>)
200058e4:	f7ff fb10 	bl	20004f08 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
200058e8:	2200      	movs	r2, #0
200058ea:	2104      	movs	r1, #4
200058ec:	4823      	ldr	r0, [pc, #140]	; (2000597c <MX_SPI5_Init+0x100>)
200058ee:	f7ff fbe3 	bl	200050b8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_CIRCULAR);
200058f2:	f44f 7280 	mov.w	r2, #256	; 0x100
200058f6:	2104      	movs	r1, #4
200058f8:	4820      	ldr	r0, [pc, #128]	; (2000597c <MX_SPI5_Init+0x100>)
200058fa:	f7ff fb29 	bl	20004f50 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
200058fe:	2200      	movs	r2, #0
20005900:	2104      	movs	r1, #4
20005902:	481e      	ldr	r0, [pc, #120]	; (2000597c <MX_SPI5_Init+0x100>)
20005904:	f7ff fb48 	bl	20004f98 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
20005908:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000590c:	2104      	movs	r1, #4
2000590e:	481b      	ldr	r0, [pc, #108]	; (2000597c <MX_SPI5_Init+0x100>)
20005910:	f7ff fb66 	bl	20004fe0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
20005914:	2200      	movs	r2, #0
20005916:	2104      	movs	r1, #4
20005918:	4818      	ldr	r0, [pc, #96]	; (2000597c <MX_SPI5_Init+0x100>)
2000591a:	f7ff fb85 	bl	20005028 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
2000591e:	2200      	movs	r2, #0
20005920:	2104      	movs	r1, #4
20005922:	4816      	ldr	r0, [pc, #88]	; (2000597c <MX_SPI5_Init+0x100>)
20005924:	f7ff fba4 	bl	20005070 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
20005928:	2104      	movs	r1, #4
2000592a:	4814      	ldr	r0, [pc, #80]	; (2000597c <MX_SPI5_Init+0x100>)
2000592c:	f7ff fc0c 	bl	20005148 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
20005930:	2300      	movs	r3, #0
20005932:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
20005934:	f44f 7382 	mov.w	r3, #260	; 0x104
20005938:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
2000593a:	2300      	movs	r3, #0
2000593c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
2000593e:	2300      	movs	r3, #0
20005940:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
20005942:	2300      	movs	r3, #0
20005944:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
20005946:	f44f 7300 	mov.w	r3, #512	; 0x200
2000594a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
2000594c:	2300      	movs	r3, #0
2000594e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
20005950:	2300      	movs	r3, #0
20005952:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
20005954:	2300      	movs	r3, #0
20005956:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
20005958:	230a      	movs	r3, #10
2000595a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
2000595c:	f107 0318 	add.w	r3, r7, #24
20005960:	4619      	mov	r1, r3
20005962:	4807      	ldr	r0, [pc, #28]	; (20005980 <MX_SPI5_Init+0x104>)
20005964:	f7fa fddf 	bl	20000526 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
20005968:	2100      	movs	r1, #0
2000596a:	4805      	ldr	r0, [pc, #20]	; (20005980 <MX_SPI5_Init+0x104>)
2000596c:	f7ff fe2e 	bl	200055cc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
20005970:	bf00      	nop
20005972:	3740      	adds	r7, #64	; 0x40
20005974:	46bd      	mov	sp, r7
20005976:	bd80      	pop	{r7, pc}
20005978:	40021400 	.word	0x40021400
2000597c:	40026400 	.word	0x40026400
20005980:	40015000 	.word	0x40015000

20005984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
20005984:	b580      	push	{r7, lr}
20005986:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
20005988:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2000598c:	f7ff fd58 	bl	20005440 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
20005990:	f7ff fa10 	bl	20004db4 <__NVIC_GetPriorityGrouping>
20005994:	4603      	mov	r3, r0
20005996:	2200      	movs	r2, #0
20005998:	2105      	movs	r1, #5
2000599a:	4618      	mov	r0, r3
2000599c:	f7ff fa60 	bl	20004e60 <NVIC_EncodePriority>
200059a0:	4603      	mov	r3, r0
200059a2:	4619      	mov	r1, r3
200059a4:	203c      	movs	r0, #60	; 0x3c
200059a6:	f7ff fa31 	bl	20004e0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
200059aa:	203c      	movs	r0, #60	; 0x3c
200059ac:	f7ff fa10 	bl	20004dd0 <__NVIC_EnableIRQ>

}
200059b0:	bf00      	nop
200059b2:	bd80      	pop	{r7, pc}

200059b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
200059b4:	b580      	push	{r7, lr}
200059b6:	b086      	sub	sp, #24
200059b8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
200059ba:	463b      	mov	r3, r7
200059bc:	2200      	movs	r2, #0
200059be:	601a      	str	r2, [r3, #0]
200059c0:	605a      	str	r2, [r3, #4]
200059c2:	609a      	str	r2, [r3, #8]
200059c4:	60da      	str	r2, [r3, #12]
200059c6:	611a      	str	r2, [r3, #16]
200059c8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
200059ca:	2020      	movs	r0, #32
200059cc:	f7ff fd38 	bl	20005440 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
200059d0:	2080      	movs	r0, #128	; 0x80
200059d2:	f7ff fd35 	bl	20005440 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
200059d6:	2004      	movs	r0, #4
200059d8:	f7ff fd32 	bl	20005440 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
200059dc:	2001      	movs	r0, #1
200059de:	f7ff fd2f 	bl	20005440 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
200059e2:	2008      	movs	r0, #8
200059e4:	f7ff fd2c 	bl	20005440 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
200059e8:	2040      	movs	r0, #64	; 0x40
200059ea:	f7ff fd29 	bl	20005440 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
200059ee:	2104      	movs	r1, #4
200059f0:	4825      	ldr	r0, [pc, #148]	; (20005a88 <MX_GPIO_Init+0xd4>)
200059f2:	f7ff fe1c 	bl	2000562e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13);
200059f6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
200059fa:	4824      	ldr	r0, [pc, #144]	; (20005a8c <MX_GPIO_Init+0xd8>)
200059fc:	f7ff fe17 	bl	2000562e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LL_GPIO_PIN_13|LL_GPIO_PIN_14);
20005a00:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
20005a04:	4822      	ldr	r0, [pc, #136]	; (20005a90 <MX_GPIO_Init+0xdc>)
20005a06:	f7ff fe12 	bl	2000562e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
20005a0a:	2304      	movs	r3, #4
20005a0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005a0e:	2301      	movs	r3, #1
20005a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20005a12:	2303      	movs	r3, #3
20005a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005a16:	2300      	movs	r3, #0
20005a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005a1a:	2300      	movs	r3, #0
20005a1c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20005a1e:	463b      	mov	r3, r7
20005a20:	4619      	mov	r1, r3
20005a22:	4819      	ldr	r0, [pc, #100]	; (20005a88 <MX_GPIO_Init+0xd4>)
20005a24:	f7fa fce9 	bl	200003fa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
20005a28:	2301      	movs	r3, #1
20005a2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
20005a2c:	2300      	movs	r3, #0
20005a2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005a30:	2300      	movs	r3, #0
20005a32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20005a34:	463b      	mov	r3, r7
20005a36:	4619      	mov	r1, r3
20005a38:	4816      	ldr	r0, [pc, #88]	; (20005a94 <MX_GPIO_Init+0xe0>)
20005a3a:	f7fa fcde 	bl	200003fa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
20005a3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
20005a42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005a44:	2301      	movs	r3, #1
20005a46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20005a48:	2303      	movs	r3, #3
20005a4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005a4c:	2300      	movs	r3, #0
20005a4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005a50:	2300      	movs	r3, #0
20005a52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20005a54:	463b      	mov	r3, r7
20005a56:	4619      	mov	r1, r3
20005a58:	480c      	ldr	r0, [pc, #48]	; (20005a8c <MX_GPIO_Init+0xd8>)
20005a5a:	f7fa fcce 	bl	200003fa <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
20005a5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
20005a62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005a64:	2301      	movs	r3, #1
20005a66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
20005a68:	2300      	movs	r3, #0
20005a6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005a6c:	2300      	movs	r3, #0
20005a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005a70:	2300      	movs	r3, #0
20005a72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20005a74:	463b      	mov	r3, r7
20005a76:	4619      	mov	r1, r3
20005a78:	4805      	ldr	r0, [pc, #20]	; (20005a90 <MX_GPIO_Init+0xdc>)
20005a7a:	f7fa fcbe 	bl	200003fa <LL_GPIO_Init>

}
20005a7e:	bf00      	nop
20005a80:	3718      	adds	r7, #24
20005a82:	46bd      	mov	sp, r7
20005a84:	bd80      	pop	{r7, pc}
20005a86:	bf00      	nop
20005a88:	40020800 	.word	0x40020800
20005a8c:	40020c00 	.word	0x40020c00
20005a90:	40021800 	.word	0x40021800
20005a94:	40020000 	.word	0x40020000

20005a98 <DMA1_Stream4_TransferComplete>:

/* USER CODE BEGIN 4 */
void DMA1_Stream4_TransferComplete(void)
{
20005a98:	b580      	push	{r7, lr}
20005a9a:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC4(DMA2);
20005a9c:	480c      	ldr	r0, [pc, #48]	; (20005ad0 <DMA1_Stream4_TransferComplete+0x38>)
20005a9e:	f7ff fb73 	bl	20005188 <LL_DMA_ClearFlag_TC4>
  DmaSpiCnt--;
20005aa2:	4b0c      	ldr	r3, [pc, #48]	; (20005ad4 <DMA1_Stream4_TransferComplete+0x3c>)
20005aa4:	781b      	ldrb	r3, [r3, #0]
20005aa6:	3b01      	subs	r3, #1
20005aa8:	b2da      	uxtb	r2, r3
20005aaa:	4b0a      	ldr	r3, [pc, #40]	; (20005ad4 <DMA1_Stream4_TransferComplete+0x3c>)
20005aac:	701a      	strb	r2, [r3, #0]

  if(DmaSpiCnt == 0)
20005aae:	4b09      	ldr	r3, [pc, #36]	; (20005ad4 <DMA1_Stream4_TransferComplete+0x3c>)
20005ab0:	781b      	ldrb	r3, [r3, #0]
20005ab2:	2b00      	cmp	r3, #0
20005ab4:	d10a      	bne.n	20005acc <DMA1_Stream4_TransferComplete+0x34>
  {
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005ab6:	2104      	movs	r1, #4
20005ab8:	4805      	ldr	r0, [pc, #20]	; (20005ad0 <DMA1_Stream4_TransferComplete+0x38>)
20005aba:	f7ff fa05 	bl	20004ec8 <LL_DMA_DisableStream>
    DmaSpiCnt=1;
20005abe:	4b05      	ldr	r3, [pc, #20]	; (20005ad4 <DMA1_Stream4_TransferComplete+0x3c>)
20005ac0:	2201      	movs	r2, #1
20005ac2:	701a      	strb	r2, [r3, #0]
    CS_DESELECT();
20005ac4:	2104      	movs	r1, #4
20005ac6:	4804      	ldr	r0, [pc, #16]	; (20005ad8 <DMA1_Stream4_TransferComplete+0x40>)
20005ac8:	f7ff fda3 	bl	20005612 <LL_GPIO_SetOutputPin>
  }
}
20005acc:	bf00      	nop
20005ace:	bd80      	pop	{r7, pc}
20005ad0:	40026400 	.word	0x40026400
20005ad4:	20009e34 	.word	0x20009e34
20005ad8:	40020800 	.word	0x40020800

20005adc <StartLCDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
20005adc:	b580      	push	{r7, lr}
20005ade:	b086      	sub	sp, #24
20005ae0:	af02      	add	r7, sp, #8
20005ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  TFTDisplay_ILI9341_Initialization(240, 320);
20005ae4:	f44f 71a0 	mov.w	r1, #320	; 0x140
20005ae8:	20f0      	movs	r0, #240	; 0xf0
20005aea:	f7fe f9df 	bl	20003eac <TFTDisplay_ILI9341_Initialization>
	  TFTDisplay_ILI9341_SetRotation(2);
20005aee:	2002      	movs	r0, #2
20005af0:	f7fe fd8c 	bl	2000460c <TFTDisplay_ILI9341_SetRotation>
//	  osDelay(500);
//	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_RED);
//	  osDelay(500);
//	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_BLUE);
//	  osDelay(1000);
	  TFTDisplay_ILI9341_FillRect(5,5,35,35,TFT_COLOR_ILI9341_YELLOW );
20005af4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
20005af8:	9300      	str	r3, [sp, #0]
20005afa:	2323      	movs	r3, #35	; 0x23
20005afc:	2223      	movs	r2, #35	; 0x23
20005afe:	2105      	movs	r1, #5
20005b00:	2005      	movs	r0, #5
20005b02:	f7fe fa29 	bl	20003f58 <TFTDisplay_ILI9341_FillRect>
	  TFTDisplay_ILI9341_DrawClearRect(40,40, 80, 80, TFT_COLOR_ILI9341_RED);
20005b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
20005b0a:	9300      	str	r3, [sp, #0]
20005b0c:	2350      	movs	r3, #80	; 0x50
20005b0e:	2250      	movs	r2, #80	; 0x50
20005b10:	2128      	movs	r1, #40	; 0x28
20005b12:	2028      	movs	r0, #40	; 0x28
20005b14:	f7fe fb9e 	bl	20004254 <TFTDisplay_ILI9341_DrawClearRect>
	  TFTDisplay_ILI9341_DrawCircle(140, 140, 50, TFT_COLOR_ILI9341_GREEN);
20005b18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
20005b1c:	2232      	movs	r2, #50	; 0x32
20005b1e:	218c      	movs	r1, #140	; 0x8c
20005b20:	208c      	movs	r0, #140	; 0x8c
20005b22:	f7fe fbce 	bl	200042c2 <TFTDisplay_ILI9341_DrawCircle>


	  for (int i=0; i < dl_n; i++){
20005b26:	2300      	movs	r3, #0
20005b28:	60fb      	str	r3, [r7, #12]
20005b2a:	e018      	b.n	20005b5e <StartLCDTask+0x82>
		  TFTDisplay_ILI9341_DrawChar (nx, ny, *ptr);
20005b2c:	4b26      	ldr	r3, [pc, #152]	; (20005bc8 <StartLCDTask+0xec>)
20005b2e:	681b      	ldr	r3, [r3, #0]
20005b30:	b298      	uxth	r0, r3
20005b32:	4b26      	ldr	r3, [pc, #152]	; (20005bcc <StartLCDTask+0xf0>)
20005b34:	681b      	ldr	r3, [r3, #0]
20005b36:	b299      	uxth	r1, r3
20005b38:	4b25      	ldr	r3, [pc, #148]	; (20005bd0 <StartLCDTask+0xf4>)
20005b3a:	681b      	ldr	r3, [r3, #0]
20005b3c:	781b      	ldrb	r3, [r3, #0]
20005b3e:	461a      	mov	r2, r3
20005b40:	f7fe fc6c 	bl	2000441c <TFTDisplay_ILI9341_DrawChar>
		  nx= nx +10;
20005b44:	4b20      	ldr	r3, [pc, #128]	; (20005bc8 <StartLCDTask+0xec>)
20005b46:	681b      	ldr	r3, [r3, #0]
20005b48:	330a      	adds	r3, #10
20005b4a:	4a1f      	ldr	r2, [pc, #124]	; (20005bc8 <StartLCDTask+0xec>)
20005b4c:	6013      	str	r3, [r2, #0]
		  ptr++;
20005b4e:	4b20      	ldr	r3, [pc, #128]	; (20005bd0 <StartLCDTask+0xf4>)
20005b50:	681b      	ldr	r3, [r3, #0]
20005b52:	3301      	adds	r3, #1
20005b54:	4a1e      	ldr	r2, [pc, #120]	; (20005bd0 <StartLCDTask+0xf4>)
20005b56:	6013      	str	r3, [r2, #0]
	  for (int i=0; i < dl_n; i++){
20005b58:	68fb      	ldr	r3, [r7, #12]
20005b5a:	3301      	adds	r3, #1
20005b5c:	60fb      	str	r3, [r7, #12]
20005b5e:	4b1d      	ldr	r3, [pc, #116]	; (20005bd4 <StartLCDTask+0xf8>)
20005b60:	681b      	ldr	r3, [r3, #0]
20005b62:	68fa      	ldr	r2, [r7, #12]
20005b64:	429a      	cmp	r2, r3
20005b66:	dbe1      	blt.n	20005b2c <StartLCDTask+0x50>

	  }


	  TFTDisplay_ILI9341_DrawLine(0, 0, 240, 240, TFT_COLOR_ILI9341_RED);
20005b68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
20005b6c:	9300      	str	r3, [sp, #0]
20005b6e:	23f0      	movs	r3, #240	; 0xf0
20005b70:	22f0      	movs	r2, #240	; 0xf0
20005b72:	2100      	movs	r1, #0
20005b74:	2000      	movs	r0, #0
20005b76:	f7fe fadd 	bl	20004134 <TFTDisplay_ILI9341_DrawLine>
	  TFTDisplay_ILI9341_DrawPixel(140, 140, TFT_COLOR_ILI9341_WHITE);
20005b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
20005b7e:	218c      	movs	r1, #140	; 0x8c
20005b80:	208c      	movs	r0, #140	; 0x8c
20005b82:	f7fe fa97 	bl	200040b4 <TFTDisplay_ILI9341_DrawPixel>


	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
20005b86:	e002      	b.n	20005b8e <StartLCDTask+0xb2>
		{
		osDelay(2);					//aby nie blokować innych tasków
20005b88:	2002      	movs	r0, #2
20005b8a:	f7fa fe8d 	bl	200008a8 <osDelay>
	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
20005b8e:	4b12      	ldr	r3, [pc, #72]	; (20005bd8 <StartLCDTask+0xfc>)
20005b90:	691b      	ldr	r3, [r3, #16]
20005b92:	f003 0301 	and.w	r3, r3, #1
20005b96:	2b00      	cmp	r3, #0
20005b98:	d0f6      	beq.n	20005b88 <StartLCDTask+0xac>
		}

  /* Infinite loop */
  for(;;)
  {
	  for(int i=0; i< 10; i++)
20005b9a:	2300      	movs	r3, #0
20005b9c:	60bb      	str	r3, [r7, #8]
20005b9e:	e00b      	b.n	20005bb8 <StartLCDTask+0xdc>
		  TFTDisplay_ILI9341_DrawChar(100, 100, 0x30 + i);
20005ba0:	68bb      	ldr	r3, [r7, #8]
20005ba2:	b2db      	uxtb	r3, r3
20005ba4:	3330      	adds	r3, #48	; 0x30
20005ba6:	b2db      	uxtb	r3, r3
20005ba8:	461a      	mov	r2, r3
20005baa:	2164      	movs	r1, #100	; 0x64
20005bac:	2064      	movs	r0, #100	; 0x64
20005bae:	f7fe fc35 	bl	2000441c <TFTDisplay_ILI9341_DrawChar>
	  for(int i=0; i< 10; i++)
20005bb2:	68bb      	ldr	r3, [r7, #8]
20005bb4:	3301      	adds	r3, #1
20005bb6:	60bb      	str	r3, [r7, #8]
20005bb8:	68bb      	ldr	r3, [r7, #8]
20005bba:	2b09      	cmp	r3, #9
20005bbc:	ddf0      	ble.n	20005ba0 <StartLCDTask+0xc4>
//	  	TFTDisplay_ILI9341_FillRect(x, y, x+30, y+30, TFT_COLOR_ILI9341_RED);
	  	osDelay(1000);
20005bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20005bc2:	f7fa fe71 	bl	200008a8 <osDelay>
	  for(int i=0; i< 10; i++)
20005bc6:	e7e8      	b.n	20005b9a <StartLCDTask+0xbe>
20005bc8:	2001e914 	.word	0x2001e914
20005bcc:	20009e58 	.word	0x20009e58
20005bd0:	2001e910 	.word	0x2001e910
20005bd4:	20009e54 	.word	0x20009e54
20005bd8:	40020000 	.word	0x40020000

20005bdc <StartTaskLED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED1 */
void StartTaskLED1(void *argument)
{
20005bdc:	b580      	push	{r7, lr}
20005bde:	b082      	sub	sp, #8
20005be0:	af00      	add	r7, sp, #0
20005be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED1 */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
20005be4:	4b07      	ldr	r3, [pc, #28]	; (20005c04 <StartTaskLED1+0x28>)
20005be6:	681b      	ldr	r3, [r3, #0]
20005be8:	f04f 31ff 	mov.w	r1, #4294967295
20005bec:	4618      	mov	r0, r3
20005bee:	f7fa feff 	bl	200009f0 <osSemaphoreAcquire>

	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_13);
20005bf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20005bf6:	4804      	ldr	r0, [pc, #16]	; (20005c08 <StartTaskLED1+0x2c>)
20005bf8:	f7ff fd28 	bl	2000564c <LL_GPIO_TogglePin>


	  osDelay(100);
20005bfc:	2064      	movs	r0, #100	; 0x64
20005bfe:	f7fa fe53 	bl	200008a8 <osDelay>
	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
20005c02:	e7ef      	b.n	20005be4 <StartTaskLED1+0x8>
20005c04:	2001e90c 	.word	0x2001e90c
20005c08:	40021800 	.word	0x40021800

20005c0c <StartTaskLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED2 */
void StartTaskLED2(void *argument)
{
20005c0c:	b580      	push	{r7, lr}
20005c0e:	b082      	sub	sp, #8
20005c10:	af00      	add	r7, sp, #0
20005c12:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20005c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
20005c18:	4806      	ldr	r0, [pc, #24]	; (20005c34 <StartTaskLED2+0x28>)
20005c1a:	f7ff fd17 	bl	2000564c <LL_GPIO_TogglePin>

	  osDelay(1000);
20005c1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20005c22:	f7fa fe41 	bl	200008a8 <osDelay>
	  osSemaphoreRelease(BinarySem01Handle);	//zwolnienie semafora i odblokowanie TaskLED1
20005c26:	4b04      	ldr	r3, [pc, #16]	; (20005c38 <StartTaskLED2+0x2c>)
20005c28:	681b      	ldr	r3, [r3, #0]
20005c2a:	4618      	mov	r0, r3
20005c2c:	f7fa ff32 	bl	20000a94 <osSemaphoreRelease>
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20005c30:	e7f0      	b.n	20005c14 <StartTaskLED2+0x8>
20005c32:	bf00      	nop
20005c34:	40021800 	.word	0x40021800
20005c38:	2001e90c 	.word	0x2001e90c

20005c3c <Reg_task_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Reg_task_init */
void Reg_task_init(void *argument)
{
20005c3c:	b580      	push	{r7, lr}
20005c3e:	b082      	sub	sp, #8
20005c40:	af00      	add	r7, sp, #0
20005c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Reg_task_init */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
20005c44:	2001      	movs	r0, #1
20005c46:	f7fa fe2f 	bl	200008a8 <osDelay>
20005c4a:	e7fb      	b.n	20005c44 <Reg_task_init+0x8>

20005c4c <LL_DMA_IsActiveFlag_TC4>:
{
20005c4c:	b480      	push	{r7}
20005c4e:	b083      	sub	sp, #12
20005c50:	af00      	add	r7, sp, #0
20005c52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
20005c54:	687b      	ldr	r3, [r7, #4]
20005c56:	685b      	ldr	r3, [r3, #4]
20005c58:	f003 0320 	and.w	r3, r3, #32
20005c5c:	2b20      	cmp	r3, #32
20005c5e:	bf0c      	ite	eq
20005c60:	2301      	moveq	r3, #1
20005c62:	2300      	movne	r3, #0
20005c64:	b2db      	uxtb	r3, r3
}
20005c66:	4618      	mov	r0, r3
20005c68:	370c      	adds	r7, #12
20005c6a:	46bd      	mov	sp, r7
20005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c70:	4770      	bx	lr

20005c72 <LL_DMA_IsActiveFlag_TE4>:
{
20005c72:	b480      	push	{r7}
20005c74:	b083      	sub	sp, #12
20005c76:	af00      	add	r7, sp, #0
20005c78:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
20005c7a:	687b      	ldr	r3, [r7, #4]
20005c7c:	685b      	ldr	r3, [r3, #4]
20005c7e:	f003 0308 	and.w	r3, r3, #8
20005c82:	2b08      	cmp	r3, #8
20005c84:	bf0c      	ite	eq
20005c86:	2301      	moveq	r3, #1
20005c88:	2300      	movne	r3, #0
20005c8a:	b2db      	uxtb	r3, r3
}
20005c8c:	4618      	mov	r0, r3
20005c8e:	370c      	adds	r7, #12
20005c90:	46bd      	mov	sp, r7
20005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c96:	4770      	bx	lr

20005c98 <LL_DMA_ClearFlag_TE4>:
{
20005c98:	b480      	push	{r7}
20005c9a:	b083      	sub	sp, #12
20005c9c:	af00      	add	r7, sp, #0
20005c9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
20005ca0:	687b      	ldr	r3, [r7, #4]
20005ca2:	2208      	movs	r2, #8
20005ca4:	60da      	str	r2, [r3, #12]
}
20005ca6:	bf00      	nop
20005ca8:	370c      	adds	r7, #12
20005caa:	46bd      	mov	sp, r7
20005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
20005cb0:	4770      	bx	lr

20005cb2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20005cb2:	b480      	push	{r7}
20005cb4:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
20005cb6:	bf00      	nop
20005cb8:	46bd      	mov	sp, r7
20005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
20005cbe:	4770      	bx	lr

20005cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20005cc0:	b480      	push	{r7}
20005cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20005cc4:	e7fe      	b.n	20005cc4 <HardFault_Handler+0x4>

20005cc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20005cc6:	b480      	push	{r7}
20005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20005cca:	e7fe      	b.n	20005cca <MemManage_Handler+0x4>

20005ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20005ccc:	b480      	push	{r7}
20005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20005cd0:	e7fe      	b.n	20005cd0 <BusFault_Handler+0x4>

20005cd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20005cd2:	b480      	push	{r7}
20005cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20005cd6:	e7fe      	b.n	20005cd6 <UsageFault_Handler+0x4>

20005cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20005cd8:	b480      	push	{r7}
20005cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20005cdc:	bf00      	nop
20005cde:	46bd      	mov	sp, r7
20005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ce4:	4770      	bx	lr

20005ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20005ce6:	b580      	push	{r7, lr}
20005ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
20005cea:	f7fc fe55 	bl	20002998 <xTaskGetSchedulerState>
20005cee:	4603      	mov	r3, r0
20005cf0:	2b01      	cmp	r3, #1
20005cf2:	d001      	beq.n	20005cf8 <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
20005cf4:	f7fd fd38 	bl	20003768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20005cf8:	bf00      	nop
20005cfa:	bd80      	pop	{r7, pc}

20005cfc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
20005cfc:	b580      	push	{r7, lr}
20005cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC4(DMA2) == 1)
20005d00:	4809      	ldr	r0, [pc, #36]	; (20005d28 <DMA2_Stream4_IRQHandler+0x2c>)
20005d02:	f7ff ffa3 	bl	20005c4c <LL_DMA_IsActiveFlag_TC4>
20005d06:	4603      	mov	r3, r0
20005d08:	2b01      	cmp	r3, #1
20005d0a:	d102      	bne.n	20005d12 <DMA2_Stream4_IRQHandler+0x16>
  {
    DMA1_Stream4_TransferComplete();
20005d0c:	f7ff fec4 	bl	20005a98 <DMA1_Stream4_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
  {
    LL_DMA_ClearFlag_TE4(DMA2);
  }
  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
20005d10:	e008      	b.n	20005d24 <DMA2_Stream4_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
20005d12:	4805      	ldr	r0, [pc, #20]	; (20005d28 <DMA2_Stream4_IRQHandler+0x2c>)
20005d14:	f7ff ffad 	bl	20005c72 <LL_DMA_IsActiveFlag_TE4>
20005d18:	4603      	mov	r3, r0
20005d1a:	2b01      	cmp	r3, #1
20005d1c:	d102      	bne.n	20005d24 <DMA2_Stream4_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE4(DMA2);
20005d1e:	4802      	ldr	r0, [pc, #8]	; (20005d28 <DMA2_Stream4_IRQHandler+0x2c>)
20005d20:	f7ff ffba 	bl	20005c98 <LL_DMA_ClearFlag_TE4>
}
20005d24:	bf00      	nop
20005d26:	bd80      	pop	{r7, pc}
20005d28:	40026400 	.word	0x40026400

20005d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20005d2c:	b480      	push	{r7}
20005d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20005d30:	4b08      	ldr	r3, [pc, #32]	; (20005d54 <SystemInit+0x28>)
20005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20005d36:	4a07      	ldr	r2, [pc, #28]	; (20005d54 <SystemInit+0x28>)
20005d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20005d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20005d40:	4b04      	ldr	r3, [pc, #16]	; (20005d54 <SystemInit+0x28>)
20005d42:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
20005d46:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
20005d48:	bf00      	nop
20005d4a:	46bd      	mov	sp, r7
20005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d50:	4770      	bx	lr
20005d52:	bf00      	nop
20005d54:	e000ed00 	.word	0xe000ed00

20005d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
20005d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 20005d90 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
20005d5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
20005d5e:	e003      	b.n	20005d68 <LoopCopyDataInit>

20005d60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
20005d60:	4b0c      	ldr	r3, [pc, #48]	; (20005d94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
20005d62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
20005d64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
20005d66:	3104      	adds	r1, #4

20005d68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
20005d68:	480b      	ldr	r0, [pc, #44]	; (20005d98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
20005d6a:	4b0c      	ldr	r3, [pc, #48]	; (20005d9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
20005d6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
20005d6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
20005d70:	d3f6      	bcc.n	20005d60 <CopyDataInit>
  ldr  r2, =_sbss
20005d72:	4a0b      	ldr	r2, [pc, #44]	; (20005da0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
20005d74:	e002      	b.n	20005d7c <LoopFillZerobss>

20005d76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
20005d76:	2300      	movs	r3, #0
  str  r3, [r2], #4
20005d78:	f842 3b04 	str.w	r3, [r2], #4

20005d7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
20005d7c:	4b09      	ldr	r3, [pc, #36]	; (20005da4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
20005d7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
20005d80:	d3f9      	bcc.n	20005d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
20005d82:	f7ff ffd3 	bl	20005d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20005d86:	f000 f811 	bl	20005dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20005d8a:	f7ff fc79 	bl	20005680 <main>
  bx  lr    
20005d8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
20005d90:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
20005d94:	20009e08 	.word	0x20009e08
  ldr  r0, =_sdata
20005d98:	20009e08 	.word	0x20009e08
  ldr  r3, =_edata
20005d9c:	20009ec4 	.word	0x20009ec4
  ldr  r2, =_sbss
20005da0:	20009ec4 	.word	0x20009ec4
  ldr  r3, = _ebss
20005da4:	2001e920 	.word	0x2001e920

20005da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20005da8:	e7fe      	b.n	20005da8 <ADC_IRQHandler>
	...

20005dac <__libc_init_array>:
20005dac:	b570      	push	{r4, r5, r6, lr}
20005dae:	4d0d      	ldr	r5, [pc, #52]	; (20005de4 <__libc_init_array+0x38>)
20005db0:	4c0d      	ldr	r4, [pc, #52]	; (20005de8 <__libc_init_array+0x3c>)
20005db2:	1b64      	subs	r4, r4, r5
20005db4:	10a4      	asrs	r4, r4, #2
20005db6:	2600      	movs	r6, #0
20005db8:	42a6      	cmp	r6, r4
20005dba:	d109      	bne.n	20005dd0 <__libc_init_array+0x24>
20005dbc:	4d0b      	ldr	r5, [pc, #44]	; (20005dec <__libc_init_array+0x40>)
20005dbe:	4c0c      	ldr	r4, [pc, #48]	; (20005df0 <__libc_init_array+0x44>)
20005dc0:	f000 f8f2 	bl	20005fa8 <_init>
20005dc4:	1b64      	subs	r4, r4, r5
20005dc6:	10a4      	asrs	r4, r4, #2
20005dc8:	2600      	movs	r6, #0
20005dca:	42a6      	cmp	r6, r4
20005dcc:	d105      	bne.n	20005dda <__libc_init_array+0x2e>
20005dce:	bd70      	pop	{r4, r5, r6, pc}
20005dd0:	f855 3b04 	ldr.w	r3, [r5], #4
20005dd4:	4798      	blx	r3
20005dd6:	3601      	adds	r6, #1
20005dd8:	e7ee      	b.n	20005db8 <__libc_init_array+0xc>
20005dda:	f855 3b04 	ldr.w	r3, [r5], #4
20005dde:	4798      	blx	r3
20005de0:	3601      	adds	r6, #1
20005de2:	e7f2      	b.n	20005dca <__libc_init_array+0x1e>
20005de4:	20009e00 	.word	0x20009e00
20005de8:	20009e00 	.word	0x20009e00
20005dec:	20009e00 	.word	0x20009e00
20005df0:	20009e04 	.word	0x20009e04

20005df4 <__retarget_lock_acquire_recursive>:
20005df4:	4770      	bx	lr

20005df6 <__retarget_lock_release_recursive>:
20005df6:	4770      	bx	lr

20005df8 <memcpy>:
20005df8:	440a      	add	r2, r1
20005dfa:	4291      	cmp	r1, r2
20005dfc:	f100 33ff 	add.w	r3, r0, #4294967295
20005e00:	d100      	bne.n	20005e04 <memcpy+0xc>
20005e02:	4770      	bx	lr
20005e04:	b510      	push	{r4, lr}
20005e06:	f811 4b01 	ldrb.w	r4, [r1], #1
20005e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
20005e0e:	4291      	cmp	r1, r2
20005e10:	d1f9      	bne.n	20005e06 <memcpy+0xe>
20005e12:	bd10      	pop	{r4, pc}

20005e14 <memset>:
20005e14:	4402      	add	r2, r0
20005e16:	4603      	mov	r3, r0
20005e18:	4293      	cmp	r3, r2
20005e1a:	d100      	bne.n	20005e1e <memset+0xa>
20005e1c:	4770      	bx	lr
20005e1e:	f803 1b01 	strb.w	r1, [r3], #1
20005e22:	e7f9      	b.n	20005e18 <memset+0x4>

20005e24 <cleanup_glue>:
20005e24:	b538      	push	{r3, r4, r5, lr}
20005e26:	460c      	mov	r4, r1
20005e28:	6809      	ldr	r1, [r1, #0]
20005e2a:	4605      	mov	r5, r0
20005e2c:	b109      	cbz	r1, 20005e32 <cleanup_glue+0xe>
20005e2e:	f7ff fff9 	bl	20005e24 <cleanup_glue>
20005e32:	4621      	mov	r1, r4
20005e34:	4628      	mov	r0, r5
20005e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20005e3a:	f000 b869 	b.w	20005f10 <_free_r>
	...

20005e40 <_reclaim_reent>:
20005e40:	4b2c      	ldr	r3, [pc, #176]	; (20005ef4 <_reclaim_reent+0xb4>)
20005e42:	681b      	ldr	r3, [r3, #0]
20005e44:	4283      	cmp	r3, r0
20005e46:	b570      	push	{r4, r5, r6, lr}
20005e48:	4604      	mov	r4, r0
20005e4a:	d051      	beq.n	20005ef0 <_reclaim_reent+0xb0>
20005e4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
20005e4e:	b143      	cbz	r3, 20005e62 <_reclaim_reent+0x22>
20005e50:	68db      	ldr	r3, [r3, #12]
20005e52:	2b00      	cmp	r3, #0
20005e54:	d14a      	bne.n	20005eec <_reclaim_reent+0xac>
20005e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
20005e58:	6819      	ldr	r1, [r3, #0]
20005e5a:	b111      	cbz	r1, 20005e62 <_reclaim_reent+0x22>
20005e5c:	4620      	mov	r0, r4
20005e5e:	f000 f857 	bl	20005f10 <_free_r>
20005e62:	6961      	ldr	r1, [r4, #20]
20005e64:	b111      	cbz	r1, 20005e6c <_reclaim_reent+0x2c>
20005e66:	4620      	mov	r0, r4
20005e68:	f000 f852 	bl	20005f10 <_free_r>
20005e6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
20005e6e:	b111      	cbz	r1, 20005e76 <_reclaim_reent+0x36>
20005e70:	4620      	mov	r0, r4
20005e72:	f000 f84d 	bl	20005f10 <_free_r>
20005e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
20005e78:	b111      	cbz	r1, 20005e80 <_reclaim_reent+0x40>
20005e7a:	4620      	mov	r0, r4
20005e7c:	f000 f848 	bl	20005f10 <_free_r>
20005e80:	6be1      	ldr	r1, [r4, #60]	; 0x3c
20005e82:	b111      	cbz	r1, 20005e8a <_reclaim_reent+0x4a>
20005e84:	4620      	mov	r0, r4
20005e86:	f000 f843 	bl	20005f10 <_free_r>
20005e8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
20005e8c:	b111      	cbz	r1, 20005e94 <_reclaim_reent+0x54>
20005e8e:	4620      	mov	r0, r4
20005e90:	f000 f83e 	bl	20005f10 <_free_r>
20005e94:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20005e96:	b111      	cbz	r1, 20005e9e <_reclaim_reent+0x5e>
20005e98:	4620      	mov	r0, r4
20005e9a:	f000 f839 	bl	20005f10 <_free_r>
20005e9e:	6da1      	ldr	r1, [r4, #88]	; 0x58
20005ea0:	b111      	cbz	r1, 20005ea8 <_reclaim_reent+0x68>
20005ea2:	4620      	mov	r0, r4
20005ea4:	f000 f834 	bl	20005f10 <_free_r>
20005ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
20005eaa:	b111      	cbz	r1, 20005eb2 <_reclaim_reent+0x72>
20005eac:	4620      	mov	r0, r4
20005eae:	f000 f82f 	bl	20005f10 <_free_r>
20005eb2:	69a3      	ldr	r3, [r4, #24]
20005eb4:	b1e3      	cbz	r3, 20005ef0 <_reclaim_reent+0xb0>
20005eb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20005eb8:	4620      	mov	r0, r4
20005eba:	4798      	blx	r3
20005ebc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
20005ebe:	b1b9      	cbz	r1, 20005ef0 <_reclaim_reent+0xb0>
20005ec0:	4620      	mov	r0, r4
20005ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20005ec6:	f7ff bfad 	b.w	20005e24 <cleanup_glue>
20005eca:	5949      	ldr	r1, [r1, r5]
20005ecc:	b941      	cbnz	r1, 20005ee0 <_reclaim_reent+0xa0>
20005ece:	3504      	adds	r5, #4
20005ed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
20005ed2:	2d80      	cmp	r5, #128	; 0x80
20005ed4:	68d9      	ldr	r1, [r3, #12]
20005ed6:	d1f8      	bne.n	20005eca <_reclaim_reent+0x8a>
20005ed8:	4620      	mov	r0, r4
20005eda:	f000 f819 	bl	20005f10 <_free_r>
20005ede:	e7ba      	b.n	20005e56 <_reclaim_reent+0x16>
20005ee0:	680e      	ldr	r6, [r1, #0]
20005ee2:	4620      	mov	r0, r4
20005ee4:	f000 f814 	bl	20005f10 <_free_r>
20005ee8:	4631      	mov	r1, r6
20005eea:	e7ef      	b.n	20005ecc <_reclaim_reent+0x8c>
20005eec:	2500      	movs	r5, #0
20005eee:	e7ef      	b.n	20005ed0 <_reclaim_reent+0x90>
20005ef0:	bd70      	pop	{r4, r5, r6, pc}
20005ef2:	bf00      	nop
20005ef4:	20009e60 	.word	0x20009e60

20005ef8 <__malloc_lock>:
20005ef8:	4801      	ldr	r0, [pc, #4]	; (20005f00 <__malloc_lock+0x8>)
20005efa:	f7ff bf7b 	b.w	20005df4 <__retarget_lock_acquire_recursive>
20005efe:	bf00      	nop
20005f00:	2001e918 	.word	0x2001e918

20005f04 <__malloc_unlock>:
20005f04:	4801      	ldr	r0, [pc, #4]	; (20005f0c <__malloc_unlock+0x8>)
20005f06:	f7ff bf76 	b.w	20005df6 <__retarget_lock_release_recursive>
20005f0a:	bf00      	nop
20005f0c:	2001e918 	.word	0x2001e918

20005f10 <_free_r>:
20005f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
20005f12:	2900      	cmp	r1, #0
20005f14:	d044      	beq.n	20005fa0 <_free_r+0x90>
20005f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
20005f1a:	9001      	str	r0, [sp, #4]
20005f1c:	2b00      	cmp	r3, #0
20005f1e:	f1a1 0404 	sub.w	r4, r1, #4
20005f22:	bfb8      	it	lt
20005f24:	18e4      	addlt	r4, r4, r3
20005f26:	f7ff ffe7 	bl	20005ef8 <__malloc_lock>
20005f2a:	4a1e      	ldr	r2, [pc, #120]	; (20005fa4 <_free_r+0x94>)
20005f2c:	9801      	ldr	r0, [sp, #4]
20005f2e:	6813      	ldr	r3, [r2, #0]
20005f30:	b933      	cbnz	r3, 20005f40 <_free_r+0x30>
20005f32:	6063      	str	r3, [r4, #4]
20005f34:	6014      	str	r4, [r2, #0]
20005f36:	b003      	add	sp, #12
20005f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
20005f3c:	f7ff bfe2 	b.w	20005f04 <__malloc_unlock>
20005f40:	42a3      	cmp	r3, r4
20005f42:	d908      	bls.n	20005f56 <_free_r+0x46>
20005f44:	6825      	ldr	r5, [r4, #0]
20005f46:	1961      	adds	r1, r4, r5
20005f48:	428b      	cmp	r3, r1
20005f4a:	bf01      	itttt	eq
20005f4c:	6819      	ldreq	r1, [r3, #0]
20005f4e:	685b      	ldreq	r3, [r3, #4]
20005f50:	1949      	addeq	r1, r1, r5
20005f52:	6021      	streq	r1, [r4, #0]
20005f54:	e7ed      	b.n	20005f32 <_free_r+0x22>
20005f56:	461a      	mov	r2, r3
20005f58:	685b      	ldr	r3, [r3, #4]
20005f5a:	b10b      	cbz	r3, 20005f60 <_free_r+0x50>
20005f5c:	42a3      	cmp	r3, r4
20005f5e:	d9fa      	bls.n	20005f56 <_free_r+0x46>
20005f60:	6811      	ldr	r1, [r2, #0]
20005f62:	1855      	adds	r5, r2, r1
20005f64:	42a5      	cmp	r5, r4
20005f66:	d10b      	bne.n	20005f80 <_free_r+0x70>
20005f68:	6824      	ldr	r4, [r4, #0]
20005f6a:	4421      	add	r1, r4
20005f6c:	1854      	adds	r4, r2, r1
20005f6e:	42a3      	cmp	r3, r4
20005f70:	6011      	str	r1, [r2, #0]
20005f72:	d1e0      	bne.n	20005f36 <_free_r+0x26>
20005f74:	681c      	ldr	r4, [r3, #0]
20005f76:	685b      	ldr	r3, [r3, #4]
20005f78:	6053      	str	r3, [r2, #4]
20005f7a:	4421      	add	r1, r4
20005f7c:	6011      	str	r1, [r2, #0]
20005f7e:	e7da      	b.n	20005f36 <_free_r+0x26>
20005f80:	d902      	bls.n	20005f88 <_free_r+0x78>
20005f82:	230c      	movs	r3, #12
20005f84:	6003      	str	r3, [r0, #0]
20005f86:	e7d6      	b.n	20005f36 <_free_r+0x26>
20005f88:	6825      	ldr	r5, [r4, #0]
20005f8a:	1961      	adds	r1, r4, r5
20005f8c:	428b      	cmp	r3, r1
20005f8e:	bf04      	itt	eq
20005f90:	6819      	ldreq	r1, [r3, #0]
20005f92:	685b      	ldreq	r3, [r3, #4]
20005f94:	6063      	str	r3, [r4, #4]
20005f96:	bf04      	itt	eq
20005f98:	1949      	addeq	r1, r1, r5
20005f9a:	6021      	streq	r1, [r4, #0]
20005f9c:	6054      	str	r4, [r2, #4]
20005f9e:	e7ca      	b.n	20005f36 <_free_r+0x26>
20005fa0:	b003      	add	sp, #12
20005fa2:	bd30      	pop	{r4, r5, pc}
20005fa4:	2001e91c 	.word	0x2001e91c

20005fa8 <_init>:
20005fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20005faa:	bf00      	nop
20005fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
20005fae:	bc08      	pop	{r3}
20005fb0:	469e      	mov	lr, r3
20005fb2:	4770      	bx	lr

20005fb4 <_fini>:
20005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20005fb6:	bf00      	nop
20005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
20005fba:	bc08      	pop	{r3}
20005fbc:	469e      	mov	lr, r3
20005fbe:	4770      	bx	lr
