
Bazowy_OSM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd8  200001b0  200001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ea0  20006d88  20006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000ac28  2000ac28  0001acd8  2**0
                  CONTENTS
  4 .ARM          00000000  2000ac28  2000ac28  0001acd8  2**0
                  CONTENTS
  5 .preinit_array 00000000  2000ac28  2000acd8  0001acd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000ac28  2000ac28  0001ac28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000ac2c  2000ac2c  0001ac2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  2000ac30  2000ac30  0001ac30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b00  2000acd8  2000acd8  0001acd8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f7d8  2001f7d8  0001acd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001acd8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d6a  00000000  00000000  0001ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e3a  00000000  00000000  00034a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000388b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  0003a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f1c  00000000  00000000  0003b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a77  00000000  00000000  000644e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3d8e  00000000  00000000  0007cf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  00170d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001b0 <__do_global_dtors_aux>:
200001b0:	b510      	push	{r4, lr}
200001b2:	4c05      	ldr	r4, [pc, #20]	; (200001c8 <__do_global_dtors_aux+0x18>)
200001b4:	7823      	ldrb	r3, [r4, #0]
200001b6:	b933      	cbnz	r3, 200001c6 <__do_global_dtors_aux+0x16>
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <__do_global_dtors_aux+0x1c>)
200001ba:	b113      	cbz	r3, 200001c2 <__do_global_dtors_aux+0x12>
200001bc:	4804      	ldr	r0, [pc, #16]	; (200001d0 <__do_global_dtors_aux+0x20>)
200001be:	f3af 8000 	nop.w
200001c2:	2301      	movs	r3, #1
200001c4:	7023      	strb	r3, [r4, #0]
200001c6:	bd10      	pop	{r4, pc}
200001c8:	2000acd8 	.word	0x2000acd8
200001cc:	00000000 	.word	0x00000000
200001d0:	20006d70 	.word	0x20006d70

200001d4 <frame_dummy>:
200001d4:	b508      	push	{r3, lr}
200001d6:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <frame_dummy+0x10>)
200001d8:	b11b      	cbz	r3, 200001e2 <frame_dummy+0xe>
200001da:	4903      	ldr	r1, [pc, #12]	; (200001e8 <frame_dummy+0x14>)
200001dc:	4803      	ldr	r0, [pc, #12]	; (200001ec <frame_dummy+0x18>)
200001de:	f3af 8000 	nop.w
200001e2:	bd08      	pop	{r3, pc}
200001e4:	00000000 	.word	0x00000000
200001e8:	2000acdc 	.word	0x2000acdc
200001ec:	20006d70 	.word	0x20006d70

200001f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
200001f0:	b580      	push	{r7, lr}
200001f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
200001f4:	4b0e      	ldr	r3, [pc, #56]	; (20000230 <HAL_Init+0x40>)
200001f6:	681b      	ldr	r3, [r3, #0]
200001f8:	4a0d      	ldr	r2, [pc, #52]	; (20000230 <HAL_Init+0x40>)
200001fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200001fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20000200:	4b0b      	ldr	r3, [pc, #44]	; (20000230 <HAL_Init+0x40>)
20000202:	681b      	ldr	r3, [r3, #0]
20000204:	4a0a      	ldr	r2, [pc, #40]	; (20000230 <HAL_Init+0x40>)
20000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000020a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000020c:	4b08      	ldr	r3, [pc, #32]	; (20000230 <HAL_Init+0x40>)
2000020e:	681b      	ldr	r3, [r3, #0]
20000210:	4a07      	ldr	r2, [pc, #28]	; (20000230 <HAL_Init+0x40>)
20000212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20000216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20000218:	2003      	movs	r0, #3
2000021a:	f000 f8cc 	bl	200003b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000021e:	200f      	movs	r0, #15
20000220:	f006 fb9e 	bl	20006960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20000224:	f006 fb70 	bl	20006908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20000228:	2300      	movs	r3, #0
}
2000022a:	4618      	mov	r0, r3
2000022c:	bd80      	pop	{r7, pc}
2000022e:	bf00      	nop
20000230:	40023c00 	.word	0x40023c00

20000234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20000234:	b480      	push	{r7}
20000236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20000238:	4b06      	ldr	r3, [pc, #24]	; (20000254 <HAL_IncTick+0x20>)
2000023a:	781b      	ldrb	r3, [r3, #0]
2000023c:	461a      	mov	r2, r3
2000023e:	4b06      	ldr	r3, [pc, #24]	; (20000258 <HAL_IncTick+0x24>)
20000240:	681b      	ldr	r3, [r3, #0]
20000242:	4413      	add	r3, r2
20000244:	4a04      	ldr	r2, [pc, #16]	; (20000258 <HAL_IncTick+0x24>)
20000246:	6013      	str	r3, [r2, #0]
}
20000248:	bf00      	nop
2000024a:	46bd      	mov	sp, r7
2000024c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000250:	4770      	bx	lr
20000252:	bf00      	nop
20000254:	2000ac30 	.word	0x2000ac30
20000258:	2000acf4 	.word	0x2000acf4

2000025c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000025c:	b480      	push	{r7}
2000025e:	b085      	sub	sp, #20
20000260:	af00      	add	r7, sp, #0
20000262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20000264:	687b      	ldr	r3, [r7, #4]
20000266:	f003 0307 	and.w	r3, r3, #7
2000026a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000026c:	4b0c      	ldr	r3, [pc, #48]	; (200002a0 <__NVIC_SetPriorityGrouping+0x44>)
2000026e:	68db      	ldr	r3, [r3, #12]
20000270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20000272:	68ba      	ldr	r2, [r7, #8]
20000274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20000278:	4013      	ands	r3, r2
2000027a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000027c:	68fb      	ldr	r3, [r7, #12]
2000027e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20000280:	68bb      	ldr	r3, [r7, #8]
20000282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20000284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20000288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000028c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000028e:	4a04      	ldr	r2, [pc, #16]	; (200002a0 <__NVIC_SetPriorityGrouping+0x44>)
20000290:	68bb      	ldr	r3, [r7, #8]
20000292:	60d3      	str	r3, [r2, #12]
}
20000294:	bf00      	nop
20000296:	3714      	adds	r7, #20
20000298:	46bd      	mov	sp, r7
2000029a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000029e:	4770      	bx	lr
200002a0:	e000ed00 	.word	0xe000ed00

200002a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200002a4:	b480      	push	{r7}
200002a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200002a8:	4b04      	ldr	r3, [pc, #16]	; (200002bc <__NVIC_GetPriorityGrouping+0x18>)
200002aa:	68db      	ldr	r3, [r3, #12]
200002ac:	0a1b      	lsrs	r3, r3, #8
200002ae:	f003 0307 	and.w	r3, r3, #7
}
200002b2:	4618      	mov	r0, r3
200002b4:	46bd      	mov	sp, r7
200002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200002ba:	4770      	bx	lr
200002bc:	e000ed00 	.word	0xe000ed00

200002c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
200002c0:	b480      	push	{r7}
200002c2:	b083      	sub	sp, #12
200002c4:	af00      	add	r7, sp, #0
200002c6:	4603      	mov	r3, r0
200002c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
200002ce:	2b00      	cmp	r3, #0
200002d0:	db0b      	blt.n	200002ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200002d2:	79fb      	ldrb	r3, [r7, #7]
200002d4:	f003 021f 	and.w	r2, r3, #31
200002d8:	4907      	ldr	r1, [pc, #28]	; (200002f8 <__NVIC_EnableIRQ+0x38>)
200002da:	f997 3007 	ldrsb.w	r3, [r7, #7]
200002de:	095b      	lsrs	r3, r3, #5
200002e0:	2001      	movs	r0, #1
200002e2:	fa00 f202 	lsl.w	r2, r0, r2
200002e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200002ea:	bf00      	nop
200002ec:	370c      	adds	r7, #12
200002ee:	46bd      	mov	sp, r7
200002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200002f4:	4770      	bx	lr
200002f6:	bf00      	nop
200002f8:	e000e100 	.word	0xe000e100

200002fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200002fc:	b480      	push	{r7}
200002fe:	b083      	sub	sp, #12
20000300:	af00      	add	r7, sp, #0
20000302:	4603      	mov	r3, r0
20000304:	6039      	str	r1, [r7, #0]
20000306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000308:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000030c:	2b00      	cmp	r3, #0
2000030e:	db0a      	blt.n	20000326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000310:	683b      	ldr	r3, [r7, #0]
20000312:	b2da      	uxtb	r2, r3
20000314:	490c      	ldr	r1, [pc, #48]	; (20000348 <__NVIC_SetPriority+0x4c>)
20000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000031a:	0112      	lsls	r2, r2, #4
2000031c:	b2d2      	uxtb	r2, r2
2000031e:	440b      	add	r3, r1
20000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000324:	e00a      	b.n	2000033c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000326:	683b      	ldr	r3, [r7, #0]
20000328:	b2da      	uxtb	r2, r3
2000032a:	4908      	ldr	r1, [pc, #32]	; (2000034c <__NVIC_SetPriority+0x50>)
2000032c:	79fb      	ldrb	r3, [r7, #7]
2000032e:	f003 030f 	and.w	r3, r3, #15
20000332:	3b04      	subs	r3, #4
20000334:	0112      	lsls	r2, r2, #4
20000336:	b2d2      	uxtb	r2, r2
20000338:	440b      	add	r3, r1
2000033a:	761a      	strb	r2, [r3, #24]
}
2000033c:	bf00      	nop
2000033e:	370c      	adds	r7, #12
20000340:	46bd      	mov	sp, r7
20000342:	f85d 7b04 	ldr.w	r7, [sp], #4
20000346:	4770      	bx	lr
20000348:	e000e100 	.word	0xe000e100
2000034c:	e000ed00 	.word	0xe000ed00

20000350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20000350:	b480      	push	{r7}
20000352:	b089      	sub	sp, #36	; 0x24
20000354:	af00      	add	r7, sp, #0
20000356:	60f8      	str	r0, [r7, #12]
20000358:	60b9      	str	r1, [r7, #8]
2000035a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000035c:	68fb      	ldr	r3, [r7, #12]
2000035e:	f003 0307 	and.w	r3, r3, #7
20000362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20000364:	69fb      	ldr	r3, [r7, #28]
20000366:	f1c3 0307 	rsb	r3, r3, #7
2000036a:	2b04      	cmp	r3, #4
2000036c:	bf28      	it	cs
2000036e:	2304      	movcs	r3, #4
20000370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20000372:	69fb      	ldr	r3, [r7, #28]
20000374:	3304      	adds	r3, #4
20000376:	2b06      	cmp	r3, #6
20000378:	d902      	bls.n	20000380 <NVIC_EncodePriority+0x30>
2000037a:	69fb      	ldr	r3, [r7, #28]
2000037c:	3b03      	subs	r3, #3
2000037e:	e000      	b.n	20000382 <NVIC_EncodePriority+0x32>
20000380:	2300      	movs	r3, #0
20000382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20000384:	f04f 32ff 	mov.w	r2, #4294967295
20000388:	69bb      	ldr	r3, [r7, #24]
2000038a:	fa02 f303 	lsl.w	r3, r2, r3
2000038e:	43da      	mvns	r2, r3
20000390:	68bb      	ldr	r3, [r7, #8]
20000392:	401a      	ands	r2, r3
20000394:	697b      	ldr	r3, [r7, #20]
20000396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20000398:	f04f 31ff 	mov.w	r1, #4294967295
2000039c:	697b      	ldr	r3, [r7, #20]
2000039e:	fa01 f303 	lsl.w	r3, r1, r3
200003a2:	43d9      	mvns	r1, r3
200003a4:	687b      	ldr	r3, [r7, #4]
200003a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200003a8:	4313      	orrs	r3, r2
         );
}
200003aa:	4618      	mov	r0, r3
200003ac:	3724      	adds	r7, #36	; 0x24
200003ae:	46bd      	mov	sp, r7
200003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200003b4:	4770      	bx	lr

200003b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200003b6:	b580      	push	{r7, lr}
200003b8:	b082      	sub	sp, #8
200003ba:	af00      	add	r7, sp, #0
200003bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200003be:	6878      	ldr	r0, [r7, #4]
200003c0:	f7ff ff4c 	bl	2000025c <__NVIC_SetPriorityGrouping>
}
200003c4:	bf00      	nop
200003c6:	3708      	adds	r7, #8
200003c8:	46bd      	mov	sp, r7
200003ca:	bd80      	pop	{r7, pc}

200003cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200003cc:	b580      	push	{r7, lr}
200003ce:	b086      	sub	sp, #24
200003d0:	af00      	add	r7, sp, #0
200003d2:	4603      	mov	r3, r0
200003d4:	60b9      	str	r1, [r7, #8]
200003d6:	607a      	str	r2, [r7, #4]
200003d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
200003da:	2300      	movs	r3, #0
200003dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200003de:	f7ff ff61 	bl	200002a4 <__NVIC_GetPriorityGrouping>
200003e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200003e4:	687a      	ldr	r2, [r7, #4]
200003e6:	68b9      	ldr	r1, [r7, #8]
200003e8:	6978      	ldr	r0, [r7, #20]
200003ea:	f7ff ffb1 	bl	20000350 <NVIC_EncodePriority>
200003ee:	4602      	mov	r2, r0
200003f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
200003f4:	4611      	mov	r1, r2
200003f6:	4618      	mov	r0, r3
200003f8:	f7ff ff80 	bl	200002fc <__NVIC_SetPriority>
}
200003fc:	bf00      	nop
200003fe:	3718      	adds	r7, #24
20000400:	46bd      	mov	sp, r7
20000402:	bd80      	pop	{r7, pc}

20000404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20000404:	b580      	push	{r7, lr}
20000406:	b082      	sub	sp, #8
20000408:	af00      	add	r7, sp, #0
2000040a:	4603      	mov	r3, r0
2000040c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
2000040e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000412:	4618      	mov	r0, r3
20000414:	f7ff ff54 	bl	200002c0 <__NVIC_EnableIRQ>
}
20000418:	bf00      	nop
2000041a:	3708      	adds	r7, #8
2000041c:	46bd      	mov	sp, r7
2000041e:	bd80      	pop	{r7, pc}

20000420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20000420:	b480      	push	{r7}
20000422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20000424:	4b03      	ldr	r3, [pc, #12]	; (20000434 <HAL_RCC_GetHCLKFreq+0x14>)
20000426:	681b      	ldr	r3, [r3, #0]
}
20000428:	4618      	mov	r0, r3
2000042a:	46bd      	mov	sp, r7
2000042c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000430:	4770      	bx	lr
20000432:	bf00      	nop
20000434:	2000ac70 	.word	0x2000ac70

20000438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20000438:	b580      	push	{r7, lr}
2000043a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
2000043c:	f7ff fff0 	bl	20000420 <HAL_RCC_GetHCLKFreq>
20000440:	4602      	mov	r2, r0
20000442:	4b05      	ldr	r3, [pc, #20]	; (20000458 <HAL_RCC_GetPCLK1Freq+0x20>)
20000444:	689b      	ldr	r3, [r3, #8]
20000446:	0a9b      	lsrs	r3, r3, #10
20000448:	f003 0307 	and.w	r3, r3, #7
2000044c:	4903      	ldr	r1, [pc, #12]	; (2000045c <HAL_RCC_GetPCLK1Freq+0x24>)
2000044e:	5ccb      	ldrb	r3, [r1, r3]
20000450:	fa22 f303 	lsr.w	r3, r2, r3
}
20000454:	4618      	mov	r0, r3
20000456:	bd80      	pop	{r7, pc}
20000458:	40023800 	.word	0x40023800
2000045c:	2000abc0 	.word	0x2000abc0

20000460 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
20000460:	b480      	push	{r7}
20000462:	b083      	sub	sp, #12
20000464:	af00      	add	r7, sp, #0
20000466:	6078      	str	r0, [r7, #4]
20000468:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	220f      	movs	r2, #15
2000046e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
20000470:	4b12      	ldr	r3, [pc, #72]	; (200004bc <HAL_RCC_GetClockConfig+0x5c>)
20000472:	689b      	ldr	r3, [r3, #8]
20000474:	f003 0203 	and.w	r2, r3, #3
20000478:	687b      	ldr	r3, [r7, #4]
2000047a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
2000047c:	4b0f      	ldr	r3, [pc, #60]	; (200004bc <HAL_RCC_GetClockConfig+0x5c>)
2000047e:	689b      	ldr	r3, [r3, #8]
20000480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
20000484:	687b      	ldr	r3, [r7, #4]
20000486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
20000488:	4b0c      	ldr	r3, [pc, #48]	; (200004bc <HAL_RCC_GetClockConfig+0x5c>)
2000048a:	689b      	ldr	r3, [r3, #8]
2000048c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
20000490:	687b      	ldr	r3, [r7, #4]
20000492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
20000494:	4b09      	ldr	r3, [pc, #36]	; (200004bc <HAL_RCC_GetClockConfig+0x5c>)
20000496:	689b      	ldr	r3, [r3, #8]
20000498:	08db      	lsrs	r3, r3, #3
2000049a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
2000049e:	687b      	ldr	r3, [r7, #4]
200004a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
200004a2:	4b07      	ldr	r3, [pc, #28]	; (200004c0 <HAL_RCC_GetClockConfig+0x60>)
200004a4:	681b      	ldr	r3, [r3, #0]
200004a6:	f003 020f 	and.w	r2, r3, #15
200004aa:	683b      	ldr	r3, [r7, #0]
200004ac:	601a      	str	r2, [r3, #0]
}
200004ae:	bf00      	nop
200004b0:	370c      	adds	r7, #12
200004b2:	46bd      	mov	sp, r7
200004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200004b8:	4770      	bx	lr
200004ba:	bf00      	nop
200004bc:	40023800 	.word	0x40023800
200004c0:	40023c00 	.word	0x40023c00

200004c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
200004c4:	b580      	push	{r7, lr}
200004c6:	b082      	sub	sp, #8
200004c8:	af00      	add	r7, sp, #0
200004ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
200004cc:	687b      	ldr	r3, [r7, #4]
200004ce:	2b00      	cmp	r3, #0
200004d0:	d101      	bne.n	200004d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
200004d2:	2301      	movs	r3, #1
200004d4:	e041      	b.n	2000055a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
200004d6:	687b      	ldr	r3, [r7, #4]
200004d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
200004dc:	b2db      	uxtb	r3, r3
200004de:	2b00      	cmp	r3, #0
200004e0:	d106      	bne.n	200004f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
200004e2:	687b      	ldr	r3, [r7, #4]
200004e4:	2200      	movs	r2, #0
200004e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
200004ea:	6878      	ldr	r0, [r7, #4]
200004ec:	f000 f839 	bl	20000562 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
200004f0:	687b      	ldr	r3, [r7, #4]
200004f2:	2202      	movs	r2, #2
200004f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
200004f8:	687b      	ldr	r3, [r7, #4]
200004fa:	681a      	ldr	r2, [r3, #0]
200004fc:	687b      	ldr	r3, [r7, #4]
200004fe:	3304      	adds	r3, #4
20000500:	4619      	mov	r1, r3
20000502:	4610      	mov	r0, r2
20000504:	f000 f9d8 	bl	200008b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
20000508:	687b      	ldr	r3, [r7, #4]
2000050a:	2201      	movs	r2, #1
2000050c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20000510:	687b      	ldr	r3, [r7, #4]
20000512:	2201      	movs	r2, #1
20000514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
20000518:	687b      	ldr	r3, [r7, #4]
2000051a:	2201      	movs	r2, #1
2000051c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
20000520:	687b      	ldr	r3, [r7, #4]
20000522:	2201      	movs	r2, #1
20000524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20000528:	687b      	ldr	r3, [r7, #4]
2000052a:	2201      	movs	r2, #1
2000052c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	2201      	movs	r2, #1
20000534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
20000538:	687b      	ldr	r3, [r7, #4]
2000053a:	2201      	movs	r2, #1
2000053c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20000540:	687b      	ldr	r3, [r7, #4]
20000542:	2201      	movs	r2, #1
20000544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20000548:	687b      	ldr	r3, [r7, #4]
2000054a:	2201      	movs	r2, #1
2000054c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
20000550:	687b      	ldr	r3, [r7, #4]
20000552:	2201      	movs	r2, #1
20000554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
20000558:	2300      	movs	r3, #0
}
2000055a:	4618      	mov	r0, r3
2000055c:	3708      	adds	r7, #8
2000055e:	46bd      	mov	sp, r7
20000560:	bd80      	pop	{r7, pc}

20000562 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
20000562:	b480      	push	{r7}
20000564:	b083      	sub	sp, #12
20000566:	af00      	add	r7, sp, #0
20000568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
2000056a:	bf00      	nop
2000056c:	370c      	adds	r7, #12
2000056e:	46bd      	mov	sp, r7
20000570:	f85d 7b04 	ldr.w	r7, [sp], #4
20000574:	4770      	bx	lr
	...

20000578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
20000578:	b480      	push	{r7}
2000057a:	b085      	sub	sp, #20
2000057c:	af00      	add	r7, sp, #0
2000057e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
20000586:	b2db      	uxtb	r3, r3
20000588:	2b01      	cmp	r3, #1
2000058a:	d001      	beq.n	20000590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
2000058c:	2301      	movs	r3, #1
2000058e:	e04e      	b.n	2000062e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20000590:	687b      	ldr	r3, [r7, #4]
20000592:	2202      	movs	r2, #2
20000594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
20000598:	687b      	ldr	r3, [r7, #4]
2000059a:	681b      	ldr	r3, [r3, #0]
2000059c:	68da      	ldr	r2, [r3, #12]
2000059e:	687b      	ldr	r3, [r7, #4]
200005a0:	681b      	ldr	r3, [r3, #0]
200005a2:	f042 0201 	orr.w	r2, r2, #1
200005a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
200005a8:	687b      	ldr	r3, [r7, #4]
200005aa:	681b      	ldr	r3, [r3, #0]
200005ac:	4a23      	ldr	r2, [pc, #140]	; (2000063c <HAL_TIM_Base_Start_IT+0xc4>)
200005ae:	4293      	cmp	r3, r2
200005b0:	d022      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005b2:	687b      	ldr	r3, [r7, #4]
200005b4:	681b      	ldr	r3, [r3, #0]
200005b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200005ba:	d01d      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005bc:	687b      	ldr	r3, [r7, #4]
200005be:	681b      	ldr	r3, [r3, #0]
200005c0:	4a1f      	ldr	r2, [pc, #124]	; (20000640 <HAL_TIM_Base_Start_IT+0xc8>)
200005c2:	4293      	cmp	r3, r2
200005c4:	d018      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	681b      	ldr	r3, [r3, #0]
200005ca:	4a1e      	ldr	r2, [pc, #120]	; (20000644 <HAL_TIM_Base_Start_IT+0xcc>)
200005cc:	4293      	cmp	r3, r2
200005ce:	d013      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005d0:	687b      	ldr	r3, [r7, #4]
200005d2:	681b      	ldr	r3, [r3, #0]
200005d4:	4a1c      	ldr	r2, [pc, #112]	; (20000648 <HAL_TIM_Base_Start_IT+0xd0>)
200005d6:	4293      	cmp	r3, r2
200005d8:	d00e      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005da:	687b      	ldr	r3, [r7, #4]
200005dc:	681b      	ldr	r3, [r3, #0]
200005de:	4a1b      	ldr	r2, [pc, #108]	; (2000064c <HAL_TIM_Base_Start_IT+0xd4>)
200005e0:	4293      	cmp	r3, r2
200005e2:	d009      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	681b      	ldr	r3, [r3, #0]
200005e8:	4a19      	ldr	r2, [pc, #100]	; (20000650 <HAL_TIM_Base_Start_IT+0xd8>)
200005ea:	4293      	cmp	r3, r2
200005ec:	d004      	beq.n	200005f8 <HAL_TIM_Base_Start_IT+0x80>
200005ee:	687b      	ldr	r3, [r7, #4]
200005f0:	681b      	ldr	r3, [r3, #0]
200005f2:	4a18      	ldr	r2, [pc, #96]	; (20000654 <HAL_TIM_Base_Start_IT+0xdc>)
200005f4:	4293      	cmp	r3, r2
200005f6:	d111      	bne.n	2000061c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
200005f8:	687b      	ldr	r3, [r7, #4]
200005fa:	681b      	ldr	r3, [r3, #0]
200005fc:	689b      	ldr	r3, [r3, #8]
200005fe:	f003 0307 	and.w	r3, r3, #7
20000602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20000604:	68fb      	ldr	r3, [r7, #12]
20000606:	2b06      	cmp	r3, #6
20000608:	d010      	beq.n	2000062c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
2000060a:	687b      	ldr	r3, [r7, #4]
2000060c:	681b      	ldr	r3, [r3, #0]
2000060e:	681a      	ldr	r2, [r3, #0]
20000610:	687b      	ldr	r3, [r7, #4]
20000612:	681b      	ldr	r3, [r3, #0]
20000614:	f042 0201 	orr.w	r2, r2, #1
20000618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
2000061a:	e007      	b.n	2000062c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	681b      	ldr	r3, [r3, #0]
20000620:	681a      	ldr	r2, [r3, #0]
20000622:	687b      	ldr	r3, [r7, #4]
20000624:	681b      	ldr	r3, [r3, #0]
20000626:	f042 0201 	orr.w	r2, r2, #1
2000062a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
2000062c:	2300      	movs	r3, #0
}
2000062e:	4618      	mov	r0, r3
20000630:	3714      	adds	r7, #20
20000632:	46bd      	mov	sp, r7
20000634:	f85d 7b04 	ldr.w	r7, [sp], #4
20000638:	4770      	bx	lr
2000063a:	bf00      	nop
2000063c:	40010000 	.word	0x40010000
20000640:	40000400 	.word	0x40000400
20000644:	40000800 	.word	0x40000800
20000648:	40000c00 	.word	0x40000c00
2000064c:	40010400 	.word	0x40010400
20000650:	40014000 	.word	0x40014000
20000654:	40001800 	.word	0x40001800

20000658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
20000658:	b580      	push	{r7, lr}
2000065a:	b082      	sub	sp, #8
2000065c:	af00      	add	r7, sp, #0
2000065e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	681b      	ldr	r3, [r3, #0]
20000664:	691b      	ldr	r3, [r3, #16]
20000666:	f003 0302 	and.w	r3, r3, #2
2000066a:	2b02      	cmp	r3, #2
2000066c:	d122      	bne.n	200006b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	681b      	ldr	r3, [r3, #0]
20000672:	68db      	ldr	r3, [r3, #12]
20000674:	f003 0302 	and.w	r3, r3, #2
20000678:	2b02      	cmp	r3, #2
2000067a:	d11b      	bne.n	200006b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	681b      	ldr	r3, [r3, #0]
20000680:	f06f 0202 	mvn.w	r2, #2
20000684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	2201      	movs	r2, #1
2000068a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	681b      	ldr	r3, [r3, #0]
20000690:	699b      	ldr	r3, [r3, #24]
20000692:	f003 0303 	and.w	r3, r3, #3
20000696:	2b00      	cmp	r3, #0
20000698:	d003      	beq.n	200006a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
2000069a:	6878      	ldr	r0, [r7, #4]
2000069c:	f000 f8ee 	bl	2000087c <HAL_TIM_IC_CaptureCallback>
200006a0:	e005      	b.n	200006ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
200006a2:	6878      	ldr	r0, [r7, #4]
200006a4:	f000 f8e0 	bl	20000868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
200006a8:	6878      	ldr	r0, [r7, #4]
200006aa:	f000 f8f1 	bl	20000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	2200      	movs	r2, #0
200006b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
200006b4:	687b      	ldr	r3, [r7, #4]
200006b6:	681b      	ldr	r3, [r3, #0]
200006b8:	691b      	ldr	r3, [r3, #16]
200006ba:	f003 0304 	and.w	r3, r3, #4
200006be:	2b04      	cmp	r3, #4
200006c0:	d122      	bne.n	20000708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	681b      	ldr	r3, [r3, #0]
200006c6:	68db      	ldr	r3, [r3, #12]
200006c8:	f003 0304 	and.w	r3, r3, #4
200006cc:	2b04      	cmp	r3, #4
200006ce:	d11b      	bne.n	20000708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
200006d0:	687b      	ldr	r3, [r7, #4]
200006d2:	681b      	ldr	r3, [r3, #0]
200006d4:	f06f 0204 	mvn.w	r2, #4
200006d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	2202      	movs	r2, #2
200006de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	681b      	ldr	r3, [r3, #0]
200006e4:	699b      	ldr	r3, [r3, #24]
200006e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
200006ea:	2b00      	cmp	r3, #0
200006ec:	d003      	beq.n	200006f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
200006ee:	6878      	ldr	r0, [r7, #4]
200006f0:	f000 f8c4 	bl	2000087c <HAL_TIM_IC_CaptureCallback>
200006f4:	e005      	b.n	20000702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
200006f6:	6878      	ldr	r0, [r7, #4]
200006f8:	f000 f8b6 	bl	20000868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
200006fc:	6878      	ldr	r0, [r7, #4]
200006fe:	f000 f8c7 	bl	20000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20000702:	687b      	ldr	r3, [r7, #4]
20000704:	2200      	movs	r2, #0
20000706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	681b      	ldr	r3, [r3, #0]
2000070c:	691b      	ldr	r3, [r3, #16]
2000070e:	f003 0308 	and.w	r3, r3, #8
20000712:	2b08      	cmp	r3, #8
20000714:	d122      	bne.n	2000075c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	681b      	ldr	r3, [r3, #0]
2000071a:	68db      	ldr	r3, [r3, #12]
2000071c:	f003 0308 	and.w	r3, r3, #8
20000720:	2b08      	cmp	r3, #8
20000722:	d11b      	bne.n	2000075c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	681b      	ldr	r3, [r3, #0]
20000728:	f06f 0208 	mvn.w	r2, #8
2000072c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	2204      	movs	r2, #4
20000732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
20000734:	687b      	ldr	r3, [r7, #4]
20000736:	681b      	ldr	r3, [r3, #0]
20000738:	69db      	ldr	r3, [r3, #28]
2000073a:	f003 0303 	and.w	r3, r3, #3
2000073e:	2b00      	cmp	r3, #0
20000740:	d003      	beq.n	2000074a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20000742:	6878      	ldr	r0, [r7, #4]
20000744:	f000 f89a 	bl	2000087c <HAL_TIM_IC_CaptureCallback>
20000748:	e005      	b.n	20000756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000074a:	6878      	ldr	r0, [r7, #4]
2000074c:	f000 f88c 	bl	20000868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20000750:	6878      	ldr	r0, [r7, #4]
20000752:	f000 f89d 	bl	20000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20000756:	687b      	ldr	r3, [r7, #4]
20000758:	2200      	movs	r2, #0
2000075a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
2000075c:	687b      	ldr	r3, [r7, #4]
2000075e:	681b      	ldr	r3, [r3, #0]
20000760:	691b      	ldr	r3, [r3, #16]
20000762:	f003 0310 	and.w	r3, r3, #16
20000766:	2b10      	cmp	r3, #16
20000768:	d122      	bne.n	200007b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	681b      	ldr	r3, [r3, #0]
2000076e:	68db      	ldr	r3, [r3, #12]
20000770:	f003 0310 	and.w	r3, r3, #16
20000774:	2b10      	cmp	r3, #16
20000776:	d11b      	bne.n	200007b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
20000778:	687b      	ldr	r3, [r7, #4]
2000077a:	681b      	ldr	r3, [r3, #0]
2000077c:	f06f 0210 	mvn.w	r2, #16
20000780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
20000782:	687b      	ldr	r3, [r7, #4]
20000784:	2208      	movs	r2, #8
20000786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
20000788:	687b      	ldr	r3, [r7, #4]
2000078a:	681b      	ldr	r3, [r3, #0]
2000078c:	69db      	ldr	r3, [r3, #28]
2000078e:	f403 7340 	and.w	r3, r3, #768	; 0x300
20000792:	2b00      	cmp	r3, #0
20000794:	d003      	beq.n	2000079e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20000796:	6878      	ldr	r0, [r7, #4]
20000798:	f000 f870 	bl	2000087c <HAL_TIM_IC_CaptureCallback>
2000079c:	e005      	b.n	200007aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
2000079e:	6878      	ldr	r0, [r7, #4]
200007a0:	f000 f862 	bl	20000868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
200007a4:	6878      	ldr	r0, [r7, #4]
200007a6:	f000 f873 	bl	20000890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
200007aa:	687b      	ldr	r3, [r7, #4]
200007ac:	2200      	movs	r2, #0
200007ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
200007b0:	687b      	ldr	r3, [r7, #4]
200007b2:	681b      	ldr	r3, [r3, #0]
200007b4:	691b      	ldr	r3, [r3, #16]
200007b6:	f003 0301 	and.w	r3, r3, #1
200007ba:	2b01      	cmp	r3, #1
200007bc:	d10e      	bne.n	200007dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	681b      	ldr	r3, [r3, #0]
200007c2:	68db      	ldr	r3, [r3, #12]
200007c4:	f003 0301 	and.w	r3, r3, #1
200007c8:	2b01      	cmp	r3, #1
200007ca:	d107      	bne.n	200007dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
200007cc:	687b      	ldr	r3, [r7, #4]
200007ce:	681b      	ldr	r3, [r3, #0]
200007d0:	f06f 0201 	mvn.w	r2, #1
200007d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
200007d6:	6878      	ldr	r0, [r7, #4]
200007d8:	f005 fc9a 	bl	20006110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
200007dc:	687b      	ldr	r3, [r7, #4]
200007de:	681b      	ldr	r3, [r3, #0]
200007e0:	691b      	ldr	r3, [r3, #16]
200007e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
200007e6:	2b80      	cmp	r3, #128	; 0x80
200007e8:	d10e      	bne.n	20000808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
200007ea:	687b      	ldr	r3, [r7, #4]
200007ec:	681b      	ldr	r3, [r3, #0]
200007ee:	68db      	ldr	r3, [r3, #12]
200007f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
200007f4:	2b80      	cmp	r3, #128	; 0x80
200007f6:	d107      	bne.n	20000808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
200007f8:	687b      	ldr	r3, [r7, #4]
200007fa:	681b      	ldr	r3, [r3, #0]
200007fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
20000800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
20000802:	6878      	ldr	r0, [r7, #4]
20000804:	f000 f902 	bl	20000a0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	681b      	ldr	r3, [r3, #0]
2000080c:	691b      	ldr	r3, [r3, #16]
2000080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000812:	2b40      	cmp	r3, #64	; 0x40
20000814:	d10e      	bne.n	20000834 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
20000816:	687b      	ldr	r3, [r7, #4]
20000818:	681b      	ldr	r3, [r3, #0]
2000081a:	68db      	ldr	r3, [r3, #12]
2000081c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000820:	2b40      	cmp	r3, #64	; 0x40
20000822:	d107      	bne.n	20000834 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
20000824:	687b      	ldr	r3, [r7, #4]
20000826:	681b      	ldr	r3, [r3, #0]
20000828:	f06f 0240 	mvn.w	r2, #64	; 0x40
2000082c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
2000082e:	6878      	ldr	r0, [r7, #4]
20000830:	f000 f838 	bl	200008a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	681b      	ldr	r3, [r3, #0]
20000838:	691b      	ldr	r3, [r3, #16]
2000083a:	f003 0320 	and.w	r3, r3, #32
2000083e:	2b20      	cmp	r3, #32
20000840:	d10e      	bne.n	20000860 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	681b      	ldr	r3, [r3, #0]
20000846:	68db      	ldr	r3, [r3, #12]
20000848:	f003 0320 	and.w	r3, r3, #32
2000084c:	2b20      	cmp	r3, #32
2000084e:	d107      	bne.n	20000860 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
20000850:	687b      	ldr	r3, [r7, #4]
20000852:	681b      	ldr	r3, [r3, #0]
20000854:	f06f 0220 	mvn.w	r2, #32
20000858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
2000085a:	6878      	ldr	r0, [r7, #4]
2000085c:	f000 f8cc 	bl	200009f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
20000860:	bf00      	nop
20000862:	3708      	adds	r7, #8
20000864:	46bd      	mov	sp, r7
20000866:	bd80      	pop	{r7, pc}

20000868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
20000868:	b480      	push	{r7}
2000086a:	b083      	sub	sp, #12
2000086c:	af00      	add	r7, sp, #0
2000086e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
20000870:	bf00      	nop
20000872:	370c      	adds	r7, #12
20000874:	46bd      	mov	sp, r7
20000876:	f85d 7b04 	ldr.w	r7, [sp], #4
2000087a:	4770      	bx	lr

2000087c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
2000087c:	b480      	push	{r7}
2000087e:	b083      	sub	sp, #12
20000880:	af00      	add	r7, sp, #0
20000882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
20000884:	bf00      	nop
20000886:	370c      	adds	r7, #12
20000888:	46bd      	mov	sp, r7
2000088a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000088e:	4770      	bx	lr

20000890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
20000890:	b480      	push	{r7}
20000892:	b083      	sub	sp, #12
20000894:	af00      	add	r7, sp, #0
20000896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
20000898:	bf00      	nop
2000089a:	370c      	adds	r7, #12
2000089c:	46bd      	mov	sp, r7
2000089e:	f85d 7b04 	ldr.w	r7, [sp], #4
200008a2:	4770      	bx	lr

200008a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
200008a4:	b480      	push	{r7}
200008a6:	b083      	sub	sp, #12
200008a8:	af00      	add	r7, sp, #0
200008aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
200008ac:	bf00      	nop
200008ae:	370c      	adds	r7, #12
200008b0:	46bd      	mov	sp, r7
200008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200008b6:	4770      	bx	lr

200008b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
200008b8:	b480      	push	{r7}
200008ba:	b085      	sub	sp, #20
200008bc:	af00      	add	r7, sp, #0
200008be:	6078      	str	r0, [r7, #4]
200008c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	681b      	ldr	r3, [r3, #0]
200008c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	4a40      	ldr	r2, [pc, #256]	; (200009cc <TIM_Base_SetConfig+0x114>)
200008cc:	4293      	cmp	r3, r2
200008ce:	d013      	beq.n	200008f8 <TIM_Base_SetConfig+0x40>
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200008d6:	d00f      	beq.n	200008f8 <TIM_Base_SetConfig+0x40>
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	4a3d      	ldr	r2, [pc, #244]	; (200009d0 <TIM_Base_SetConfig+0x118>)
200008dc:	4293      	cmp	r3, r2
200008de:	d00b      	beq.n	200008f8 <TIM_Base_SetConfig+0x40>
200008e0:	687b      	ldr	r3, [r7, #4]
200008e2:	4a3c      	ldr	r2, [pc, #240]	; (200009d4 <TIM_Base_SetConfig+0x11c>)
200008e4:	4293      	cmp	r3, r2
200008e6:	d007      	beq.n	200008f8 <TIM_Base_SetConfig+0x40>
200008e8:	687b      	ldr	r3, [r7, #4]
200008ea:	4a3b      	ldr	r2, [pc, #236]	; (200009d8 <TIM_Base_SetConfig+0x120>)
200008ec:	4293      	cmp	r3, r2
200008ee:	d003      	beq.n	200008f8 <TIM_Base_SetConfig+0x40>
200008f0:	687b      	ldr	r3, [r7, #4]
200008f2:	4a3a      	ldr	r2, [pc, #232]	; (200009dc <TIM_Base_SetConfig+0x124>)
200008f4:	4293      	cmp	r3, r2
200008f6:	d108      	bne.n	2000090a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
200008f8:	68fb      	ldr	r3, [r7, #12]
200008fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
200008fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
20000900:	683b      	ldr	r3, [r7, #0]
20000902:	685b      	ldr	r3, [r3, #4]
20000904:	68fa      	ldr	r2, [r7, #12]
20000906:	4313      	orrs	r3, r2
20000908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
2000090a:	687b      	ldr	r3, [r7, #4]
2000090c:	4a2f      	ldr	r2, [pc, #188]	; (200009cc <TIM_Base_SetConfig+0x114>)
2000090e:	4293      	cmp	r3, r2
20000910:	d02b      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
20000912:	687b      	ldr	r3, [r7, #4]
20000914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20000918:	d027      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	4a2c      	ldr	r2, [pc, #176]	; (200009d0 <TIM_Base_SetConfig+0x118>)
2000091e:	4293      	cmp	r3, r2
20000920:	d023      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
20000922:	687b      	ldr	r3, [r7, #4]
20000924:	4a2b      	ldr	r2, [pc, #172]	; (200009d4 <TIM_Base_SetConfig+0x11c>)
20000926:	4293      	cmp	r3, r2
20000928:	d01f      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
2000092a:	687b      	ldr	r3, [r7, #4]
2000092c:	4a2a      	ldr	r2, [pc, #168]	; (200009d8 <TIM_Base_SetConfig+0x120>)
2000092e:	4293      	cmp	r3, r2
20000930:	d01b      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
20000932:	687b      	ldr	r3, [r7, #4]
20000934:	4a29      	ldr	r2, [pc, #164]	; (200009dc <TIM_Base_SetConfig+0x124>)
20000936:	4293      	cmp	r3, r2
20000938:	d017      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
2000093a:	687b      	ldr	r3, [r7, #4]
2000093c:	4a28      	ldr	r2, [pc, #160]	; (200009e0 <TIM_Base_SetConfig+0x128>)
2000093e:	4293      	cmp	r3, r2
20000940:	d013      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
20000942:	687b      	ldr	r3, [r7, #4]
20000944:	4a27      	ldr	r2, [pc, #156]	; (200009e4 <TIM_Base_SetConfig+0x12c>)
20000946:	4293      	cmp	r3, r2
20000948:	d00f      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
2000094a:	687b      	ldr	r3, [r7, #4]
2000094c:	4a26      	ldr	r2, [pc, #152]	; (200009e8 <TIM_Base_SetConfig+0x130>)
2000094e:	4293      	cmp	r3, r2
20000950:	d00b      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
20000952:	687b      	ldr	r3, [r7, #4]
20000954:	4a25      	ldr	r2, [pc, #148]	; (200009ec <TIM_Base_SetConfig+0x134>)
20000956:	4293      	cmp	r3, r2
20000958:	d007      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
2000095a:	687b      	ldr	r3, [r7, #4]
2000095c:	4a24      	ldr	r2, [pc, #144]	; (200009f0 <TIM_Base_SetConfig+0x138>)
2000095e:	4293      	cmp	r3, r2
20000960:	d003      	beq.n	2000096a <TIM_Base_SetConfig+0xb2>
20000962:	687b      	ldr	r3, [r7, #4]
20000964:	4a23      	ldr	r2, [pc, #140]	; (200009f4 <TIM_Base_SetConfig+0x13c>)
20000966:	4293      	cmp	r3, r2
20000968:	d108      	bne.n	2000097c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
2000096a:	68fb      	ldr	r3, [r7, #12]
2000096c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20000970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20000972:	683b      	ldr	r3, [r7, #0]
20000974:	68db      	ldr	r3, [r3, #12]
20000976:	68fa      	ldr	r2, [r7, #12]
20000978:	4313      	orrs	r3, r2
2000097a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
2000097c:	68fb      	ldr	r3, [r7, #12]
2000097e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
20000982:	683b      	ldr	r3, [r7, #0]
20000984:	695b      	ldr	r3, [r3, #20]
20000986:	4313      	orrs	r3, r2
20000988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
2000098a:	687b      	ldr	r3, [r7, #4]
2000098c:	68fa      	ldr	r2, [r7, #12]
2000098e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
20000990:	683b      	ldr	r3, [r7, #0]
20000992:	689a      	ldr	r2, [r3, #8]
20000994:	687b      	ldr	r3, [r7, #4]
20000996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
20000998:	683b      	ldr	r3, [r7, #0]
2000099a:	681a      	ldr	r2, [r3, #0]
2000099c:	687b      	ldr	r3, [r7, #4]
2000099e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
200009a0:	687b      	ldr	r3, [r7, #4]
200009a2:	4a0a      	ldr	r2, [pc, #40]	; (200009cc <TIM_Base_SetConfig+0x114>)
200009a4:	4293      	cmp	r3, r2
200009a6:	d003      	beq.n	200009b0 <TIM_Base_SetConfig+0xf8>
200009a8:	687b      	ldr	r3, [r7, #4]
200009aa:	4a0c      	ldr	r2, [pc, #48]	; (200009dc <TIM_Base_SetConfig+0x124>)
200009ac:	4293      	cmp	r3, r2
200009ae:	d103      	bne.n	200009b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
200009b0:	683b      	ldr	r3, [r7, #0]
200009b2:	691a      	ldr	r2, [r3, #16]
200009b4:	687b      	ldr	r3, [r7, #4]
200009b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
200009b8:	687b      	ldr	r3, [r7, #4]
200009ba:	2201      	movs	r2, #1
200009bc:	615a      	str	r2, [r3, #20]
}
200009be:	bf00      	nop
200009c0:	3714      	adds	r7, #20
200009c2:	46bd      	mov	sp, r7
200009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200009c8:	4770      	bx	lr
200009ca:	bf00      	nop
200009cc:	40010000 	.word	0x40010000
200009d0:	40000400 	.word	0x40000400
200009d4:	40000800 	.word	0x40000800
200009d8:	40000c00 	.word	0x40000c00
200009dc:	40010400 	.word	0x40010400
200009e0:	40014000 	.word	0x40014000
200009e4:	40014400 	.word	0x40014400
200009e8:	40014800 	.word	0x40014800
200009ec:	40001800 	.word	0x40001800
200009f0:	40001c00 	.word	0x40001c00
200009f4:	40002000 	.word	0x40002000

200009f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
200009f8:	b480      	push	{r7}
200009fa:	b083      	sub	sp, #12
200009fc:	af00      	add	r7, sp, #0
200009fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
20000a00:	bf00      	nop
20000a02:	370c      	adds	r7, #12
20000a04:	46bd      	mov	sp, r7
20000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a0a:	4770      	bx	lr

20000a0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
20000a0c:	b480      	push	{r7}
20000a0e:	b083      	sub	sp, #12
20000a10:	af00      	add	r7, sp, #0
20000a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
20000a14:	bf00      	nop
20000a16:	370c      	adds	r7, #12
20000a18:	46bd      	mov	sp, r7
20000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a1e:	4770      	bx	lr

20000a20 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
20000a20:	b480      	push	{r7}
20000a22:	b089      	sub	sp, #36	; 0x24
20000a24:	af00      	add	r7, sp, #0
20000a26:	60f8      	str	r0, [r7, #12]
20000a28:	60b9      	str	r1, [r7, #8]
20000a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
20000a2c:	68fb      	ldr	r3, [r7, #12]
20000a2e:	681a      	ldr	r2, [r3, #0]
20000a30:	68bb      	ldr	r3, [r7, #8]
20000a32:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000a34:	697b      	ldr	r3, [r7, #20]
20000a36:	fa93 f3a3 	rbit	r3, r3
20000a3a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
20000a3c:	693b      	ldr	r3, [r7, #16]
20000a3e:	fab3 f383 	clz	r3, r3
20000a42:	b2db      	uxtb	r3, r3
20000a44:	005b      	lsls	r3, r3, #1
20000a46:	2103      	movs	r1, #3
20000a48:	fa01 f303 	lsl.w	r3, r1, r3
20000a4c:	43db      	mvns	r3, r3
20000a4e:	401a      	ands	r2, r3
20000a50:	68bb      	ldr	r3, [r7, #8]
20000a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000a54:	69fb      	ldr	r3, [r7, #28]
20000a56:	fa93 f3a3 	rbit	r3, r3
20000a5a:	61bb      	str	r3, [r7, #24]
  return result;
20000a5c:	69bb      	ldr	r3, [r7, #24]
20000a5e:	fab3 f383 	clz	r3, r3
20000a62:	b2db      	uxtb	r3, r3
20000a64:	005b      	lsls	r3, r3, #1
20000a66:	6879      	ldr	r1, [r7, #4]
20000a68:	fa01 f303 	lsl.w	r3, r1, r3
20000a6c:	431a      	orrs	r2, r3
20000a6e:	68fb      	ldr	r3, [r7, #12]
20000a70:	601a      	str	r2, [r3, #0]
}
20000a72:	bf00      	nop
20000a74:	3724      	adds	r7, #36	; 0x24
20000a76:	46bd      	mov	sp, r7
20000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a7c:	4770      	bx	lr

20000a7e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
20000a7e:	b480      	push	{r7}
20000a80:	b085      	sub	sp, #20
20000a82:	af00      	add	r7, sp, #0
20000a84:	60f8      	str	r0, [r7, #12]
20000a86:	60b9      	str	r1, [r7, #8]
20000a88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
20000a8a:	68fb      	ldr	r3, [r7, #12]
20000a8c:	685a      	ldr	r2, [r3, #4]
20000a8e:	68bb      	ldr	r3, [r7, #8]
20000a90:	43db      	mvns	r3, r3
20000a92:	401a      	ands	r2, r3
20000a94:	68bb      	ldr	r3, [r7, #8]
20000a96:	6879      	ldr	r1, [r7, #4]
20000a98:	fb01 f303 	mul.w	r3, r1, r3
20000a9c:	431a      	orrs	r2, r3
20000a9e:	68fb      	ldr	r3, [r7, #12]
20000aa0:	605a      	str	r2, [r3, #4]
}
20000aa2:	bf00      	nop
20000aa4:	3714      	adds	r7, #20
20000aa6:	46bd      	mov	sp, r7
20000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
20000aac:	4770      	bx	lr

20000aae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
20000aae:	b480      	push	{r7}
20000ab0:	b089      	sub	sp, #36	; 0x24
20000ab2:	af00      	add	r7, sp, #0
20000ab4:	60f8      	str	r0, [r7, #12]
20000ab6:	60b9      	str	r1, [r7, #8]
20000ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
20000aba:	68fb      	ldr	r3, [r7, #12]
20000abc:	689a      	ldr	r2, [r3, #8]
20000abe:	68bb      	ldr	r3, [r7, #8]
20000ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000ac2:	697b      	ldr	r3, [r7, #20]
20000ac4:	fa93 f3a3 	rbit	r3, r3
20000ac8:	613b      	str	r3, [r7, #16]
  return result;
20000aca:	693b      	ldr	r3, [r7, #16]
20000acc:	fab3 f383 	clz	r3, r3
20000ad0:	b2db      	uxtb	r3, r3
20000ad2:	005b      	lsls	r3, r3, #1
20000ad4:	2103      	movs	r1, #3
20000ad6:	fa01 f303 	lsl.w	r3, r1, r3
20000ada:	43db      	mvns	r3, r3
20000adc:	401a      	ands	r2, r3
20000ade:	68bb      	ldr	r3, [r7, #8]
20000ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000ae2:	69fb      	ldr	r3, [r7, #28]
20000ae4:	fa93 f3a3 	rbit	r3, r3
20000ae8:	61bb      	str	r3, [r7, #24]
  return result;
20000aea:	69bb      	ldr	r3, [r7, #24]
20000aec:	fab3 f383 	clz	r3, r3
20000af0:	b2db      	uxtb	r3, r3
20000af2:	005b      	lsls	r3, r3, #1
20000af4:	6879      	ldr	r1, [r7, #4]
20000af6:	fa01 f303 	lsl.w	r3, r1, r3
20000afa:	431a      	orrs	r2, r3
20000afc:	68fb      	ldr	r3, [r7, #12]
20000afe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
20000b00:	bf00      	nop
20000b02:	3724      	adds	r7, #36	; 0x24
20000b04:	46bd      	mov	sp, r7
20000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b0a:	4770      	bx	lr

20000b0c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
20000b0c:	b480      	push	{r7}
20000b0e:	b089      	sub	sp, #36	; 0x24
20000b10:	af00      	add	r7, sp, #0
20000b12:	60f8      	str	r0, [r7, #12]
20000b14:	60b9      	str	r1, [r7, #8]
20000b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
20000b18:	68fb      	ldr	r3, [r7, #12]
20000b1a:	68da      	ldr	r2, [r3, #12]
20000b1c:	68bb      	ldr	r3, [r7, #8]
20000b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000b20:	697b      	ldr	r3, [r7, #20]
20000b22:	fa93 f3a3 	rbit	r3, r3
20000b26:	613b      	str	r3, [r7, #16]
  return result;
20000b28:	693b      	ldr	r3, [r7, #16]
20000b2a:	fab3 f383 	clz	r3, r3
20000b2e:	b2db      	uxtb	r3, r3
20000b30:	005b      	lsls	r3, r3, #1
20000b32:	2103      	movs	r1, #3
20000b34:	fa01 f303 	lsl.w	r3, r1, r3
20000b38:	43db      	mvns	r3, r3
20000b3a:	401a      	ands	r2, r3
20000b3c:	68bb      	ldr	r3, [r7, #8]
20000b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000b40:	69fb      	ldr	r3, [r7, #28]
20000b42:	fa93 f3a3 	rbit	r3, r3
20000b46:	61bb      	str	r3, [r7, #24]
  return result;
20000b48:	69bb      	ldr	r3, [r7, #24]
20000b4a:	fab3 f383 	clz	r3, r3
20000b4e:	b2db      	uxtb	r3, r3
20000b50:	005b      	lsls	r3, r3, #1
20000b52:	6879      	ldr	r1, [r7, #4]
20000b54:	fa01 f303 	lsl.w	r3, r1, r3
20000b58:	431a      	orrs	r2, r3
20000b5a:	68fb      	ldr	r3, [r7, #12]
20000b5c:	60da      	str	r2, [r3, #12]
}
20000b5e:	bf00      	nop
20000b60:	3724      	adds	r7, #36	; 0x24
20000b62:	46bd      	mov	sp, r7
20000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b68:	4770      	bx	lr

20000b6a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000b6a:	b480      	push	{r7}
20000b6c:	b089      	sub	sp, #36	; 0x24
20000b6e:	af00      	add	r7, sp, #0
20000b70:	60f8      	str	r0, [r7, #12]
20000b72:	60b9      	str	r1, [r7, #8]
20000b74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
20000b76:	68fb      	ldr	r3, [r7, #12]
20000b78:	6a1a      	ldr	r2, [r3, #32]
20000b7a:	68bb      	ldr	r3, [r7, #8]
20000b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000b7e:	697b      	ldr	r3, [r7, #20]
20000b80:	fa93 f3a3 	rbit	r3, r3
20000b84:	613b      	str	r3, [r7, #16]
  return result;
20000b86:	693b      	ldr	r3, [r7, #16]
20000b88:	fab3 f383 	clz	r3, r3
20000b8c:	b2db      	uxtb	r3, r3
20000b8e:	009b      	lsls	r3, r3, #2
20000b90:	210f      	movs	r1, #15
20000b92:	fa01 f303 	lsl.w	r3, r1, r3
20000b96:	43db      	mvns	r3, r3
20000b98:	401a      	ands	r2, r3
20000b9a:	68bb      	ldr	r3, [r7, #8]
20000b9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000b9e:	69fb      	ldr	r3, [r7, #28]
20000ba0:	fa93 f3a3 	rbit	r3, r3
20000ba4:	61bb      	str	r3, [r7, #24]
  return result;
20000ba6:	69bb      	ldr	r3, [r7, #24]
20000ba8:	fab3 f383 	clz	r3, r3
20000bac:	b2db      	uxtb	r3, r3
20000bae:	009b      	lsls	r3, r3, #2
20000bb0:	6879      	ldr	r1, [r7, #4]
20000bb2:	fa01 f303 	lsl.w	r3, r1, r3
20000bb6:	431a      	orrs	r2, r3
20000bb8:	68fb      	ldr	r3, [r7, #12]
20000bba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
20000bbc:	bf00      	nop
20000bbe:	3724      	adds	r7, #36	; 0x24
20000bc0:	46bd      	mov	sp, r7
20000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
20000bc6:	4770      	bx	lr

20000bc8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000bc8:	b480      	push	{r7}
20000bca:	b089      	sub	sp, #36	; 0x24
20000bcc:	af00      	add	r7, sp, #0
20000bce:	60f8      	str	r0, [r7, #12]
20000bd0:	60b9      	str	r1, [r7, #8]
20000bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
20000bd4:	68fb      	ldr	r3, [r7, #12]
20000bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000bd8:	68bb      	ldr	r3, [r7, #8]
20000bda:	0a1b      	lsrs	r3, r3, #8
20000bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000bde:	697b      	ldr	r3, [r7, #20]
20000be0:	fa93 f3a3 	rbit	r3, r3
20000be4:	613b      	str	r3, [r7, #16]
  return result;
20000be6:	693b      	ldr	r3, [r7, #16]
20000be8:	fab3 f383 	clz	r3, r3
20000bec:	b2db      	uxtb	r3, r3
20000bee:	009b      	lsls	r3, r3, #2
20000bf0:	210f      	movs	r1, #15
20000bf2:	fa01 f303 	lsl.w	r3, r1, r3
20000bf6:	43db      	mvns	r3, r3
20000bf8:	401a      	ands	r2, r3
20000bfa:	68bb      	ldr	r3, [r7, #8]
20000bfc:	0a1b      	lsrs	r3, r3, #8
20000bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000c00:	69fb      	ldr	r3, [r7, #28]
20000c02:	fa93 f3a3 	rbit	r3, r3
20000c06:	61bb      	str	r3, [r7, #24]
  return result;
20000c08:	69bb      	ldr	r3, [r7, #24]
20000c0a:	fab3 f383 	clz	r3, r3
20000c0e:	b2db      	uxtb	r3, r3
20000c10:	009b      	lsls	r3, r3, #2
20000c12:	6879      	ldr	r1, [r7, #4]
20000c14:	fa01 f303 	lsl.w	r3, r1, r3
20000c18:	431a      	orrs	r2, r3
20000c1a:	68fb      	ldr	r3, [r7, #12]
20000c1c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
20000c1e:	bf00      	nop
20000c20:	3724      	adds	r7, #36	; 0x24
20000c22:	46bd      	mov	sp, r7
20000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c28:	4770      	bx	lr

20000c2a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
20000c2a:	b580      	push	{r7, lr}
20000c2c:	b088      	sub	sp, #32
20000c2e:	af00      	add	r7, sp, #0
20000c30:	6078      	str	r0, [r7, #4]
20000c32:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
20000c34:	2300      	movs	r3, #0
20000c36:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
20000c38:	2300      	movs	r3, #0
20000c3a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
20000c3c:	683b      	ldr	r3, [r7, #0]
20000c3e:	681b      	ldr	r3, [r3, #0]
20000c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000c42:	697b      	ldr	r3, [r7, #20]
20000c44:	fa93 f3a3 	rbit	r3, r3
20000c48:	613b      	str	r3, [r7, #16]
  return result;
20000c4a:	693b      	ldr	r3, [r7, #16]
20000c4c:	fab3 f383 	clz	r3, r3
20000c50:	b2db      	uxtb	r3, r3
20000c52:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
20000c54:	e050      	b.n	20000cf8 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
20000c56:	683b      	ldr	r3, [r7, #0]
20000c58:	681a      	ldr	r2, [r3, #0]
20000c5a:	2101      	movs	r1, #1
20000c5c:	69fb      	ldr	r3, [r7, #28]
20000c5e:	fa01 f303 	lsl.w	r3, r1, r3
20000c62:	4013      	ands	r3, r2
20000c64:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
20000c66:	69bb      	ldr	r3, [r7, #24]
20000c68:	2b00      	cmp	r3, #0
20000c6a:	d042      	beq.n	20000cf2 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
20000c6c:	683b      	ldr	r3, [r7, #0]
20000c6e:	685b      	ldr	r3, [r3, #4]
20000c70:	2b01      	cmp	r3, #1
20000c72:	d003      	beq.n	20000c7c <LL_GPIO_Init+0x52>
20000c74:	683b      	ldr	r3, [r7, #0]
20000c76:	685b      	ldr	r3, [r3, #4]
20000c78:	2b02      	cmp	r3, #2
20000c7a:	d10d      	bne.n	20000c98 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
20000c7c:	683b      	ldr	r3, [r7, #0]
20000c7e:	689b      	ldr	r3, [r3, #8]
20000c80:	461a      	mov	r2, r3
20000c82:	69b9      	ldr	r1, [r7, #24]
20000c84:	6878      	ldr	r0, [r7, #4]
20000c86:	f7ff ff12 	bl	20000aae <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
20000c8a:	683b      	ldr	r3, [r7, #0]
20000c8c:	68db      	ldr	r3, [r3, #12]
20000c8e:	461a      	mov	r2, r3
20000c90:	69b9      	ldr	r1, [r7, #24]
20000c92:	6878      	ldr	r0, [r7, #4]
20000c94:	f7ff fef3 	bl	20000a7e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
20000c98:	683b      	ldr	r3, [r7, #0]
20000c9a:	691b      	ldr	r3, [r3, #16]
20000c9c:	461a      	mov	r2, r3
20000c9e:	69b9      	ldr	r1, [r7, #24]
20000ca0:	6878      	ldr	r0, [r7, #4]
20000ca2:	f7ff ff33 	bl	20000b0c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
20000ca6:	683b      	ldr	r3, [r7, #0]
20000ca8:	685b      	ldr	r3, [r3, #4]
20000caa:	2b02      	cmp	r3, #2
20000cac:	d11a      	bne.n	20000ce4 <LL_GPIO_Init+0xba>
20000cae:	69bb      	ldr	r3, [r7, #24]
20000cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000cb2:	68fb      	ldr	r3, [r7, #12]
20000cb4:	fa93 f3a3 	rbit	r3, r3
20000cb8:	60bb      	str	r3, [r7, #8]
  return result;
20000cba:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
20000cbc:	fab3 f383 	clz	r3, r3
20000cc0:	b2db      	uxtb	r3, r3
20000cc2:	2b07      	cmp	r3, #7
20000cc4:	d807      	bhi.n	20000cd6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
20000cc6:	683b      	ldr	r3, [r7, #0]
20000cc8:	695b      	ldr	r3, [r3, #20]
20000cca:	461a      	mov	r2, r3
20000ccc:	69b9      	ldr	r1, [r7, #24]
20000cce:	6878      	ldr	r0, [r7, #4]
20000cd0:	f7ff ff4b 	bl	20000b6a <LL_GPIO_SetAFPin_0_7>
20000cd4:	e006      	b.n	20000ce4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
20000cd6:	683b      	ldr	r3, [r7, #0]
20000cd8:	695b      	ldr	r3, [r3, #20]
20000cda:	461a      	mov	r2, r3
20000cdc:	69b9      	ldr	r1, [r7, #24]
20000cde:	6878      	ldr	r0, [r7, #4]
20000ce0:	f7ff ff72 	bl	20000bc8 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
20000ce4:	683b      	ldr	r3, [r7, #0]
20000ce6:	685b      	ldr	r3, [r3, #4]
20000ce8:	461a      	mov	r2, r3
20000cea:	69b9      	ldr	r1, [r7, #24]
20000cec:	6878      	ldr	r0, [r7, #4]
20000cee:	f7ff fe97 	bl	20000a20 <LL_GPIO_SetPinMode>
    }
    pinpos++;
20000cf2:	69fb      	ldr	r3, [r7, #28]
20000cf4:	3301      	adds	r3, #1
20000cf6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
20000cf8:	683b      	ldr	r3, [r7, #0]
20000cfa:	681a      	ldr	r2, [r3, #0]
20000cfc:	69fb      	ldr	r3, [r7, #28]
20000cfe:	fa22 f303 	lsr.w	r3, r2, r3
20000d02:	2b00      	cmp	r3, #0
20000d04:	d1a7      	bne.n	20000c56 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
20000d06:	2300      	movs	r3, #0
}
20000d08:	4618      	mov	r0, r3
20000d0a:	3720      	adds	r7, #32
20000d0c:	46bd      	mov	sp, r7
20000d0e:	bd80      	pop	{r7, pc}

20000d10 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
20000d10:	b480      	push	{r7}
20000d12:	b083      	sub	sp, #12
20000d14:	af00      	add	r7, sp, #0
20000d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
20000d18:	687b      	ldr	r3, [r7, #4]
20000d1a:	681b      	ldr	r3, [r3, #0]
20000d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000d20:	2b40      	cmp	r3, #64	; 0x40
20000d22:	d101      	bne.n	20000d28 <LL_SPI_IsEnabled+0x18>
20000d24:	2301      	movs	r3, #1
20000d26:	e000      	b.n	20000d2a <LL_SPI_IsEnabled+0x1a>
20000d28:	2300      	movs	r3, #0
}
20000d2a:	4618      	mov	r0, r3
20000d2c:	370c      	adds	r7, #12
20000d2e:	46bd      	mov	sp, r7
20000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d34:	4770      	bx	lr

20000d36 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
20000d36:	b480      	push	{r7}
20000d38:	b083      	sub	sp, #12
20000d3a:	af00      	add	r7, sp, #0
20000d3c:	6078      	str	r0, [r7, #4]
20000d3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
20000d40:	683b      	ldr	r3, [r7, #0]
20000d42:	b29b      	uxth	r3, r3
20000d44:	461a      	mov	r2, r3
20000d46:	687b      	ldr	r3, [r7, #4]
20000d48:	611a      	str	r2, [r3, #16]
}
20000d4a:	bf00      	nop
20000d4c:	370c      	adds	r7, #12
20000d4e:	46bd      	mov	sp, r7
20000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
20000d54:	4770      	bx	lr

20000d56 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
20000d56:	b580      	push	{r7, lr}
20000d58:	b084      	sub	sp, #16
20000d5a:	af00      	add	r7, sp, #0
20000d5c:	6078      	str	r0, [r7, #4]
20000d5e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
20000d60:	2301      	movs	r3, #1
20000d62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
20000d64:	6878      	ldr	r0, [r7, #4]
20000d66:	f7ff ffd3 	bl	20000d10 <LL_SPI_IsEnabled>
20000d6a:	4603      	mov	r3, r0
20000d6c:	2b00      	cmp	r3, #0
20000d6e:	d139      	bne.n	20000de4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	681b      	ldr	r3, [r3, #0]
20000d74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
20000d78:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
20000d7c:	683a      	ldr	r2, [r7, #0]
20000d7e:	6811      	ldr	r1, [r2, #0]
20000d80:	683a      	ldr	r2, [r7, #0]
20000d82:	6852      	ldr	r2, [r2, #4]
20000d84:	4311      	orrs	r1, r2
20000d86:	683a      	ldr	r2, [r7, #0]
20000d88:	6892      	ldr	r2, [r2, #8]
20000d8a:	4311      	orrs	r1, r2
20000d8c:	683a      	ldr	r2, [r7, #0]
20000d8e:	68d2      	ldr	r2, [r2, #12]
20000d90:	4311      	orrs	r1, r2
20000d92:	683a      	ldr	r2, [r7, #0]
20000d94:	6912      	ldr	r2, [r2, #16]
20000d96:	4311      	orrs	r1, r2
20000d98:	683a      	ldr	r2, [r7, #0]
20000d9a:	6952      	ldr	r2, [r2, #20]
20000d9c:	4311      	orrs	r1, r2
20000d9e:	683a      	ldr	r2, [r7, #0]
20000da0:	6992      	ldr	r2, [r2, #24]
20000da2:	4311      	orrs	r1, r2
20000da4:	683a      	ldr	r2, [r7, #0]
20000da6:	69d2      	ldr	r2, [r2, #28]
20000da8:	4311      	orrs	r1, r2
20000daa:	683a      	ldr	r2, [r7, #0]
20000dac:	6a12      	ldr	r2, [r2, #32]
20000dae:	430a      	orrs	r2, r1
20000db0:	431a      	orrs	r2, r3
20000db2:	687b      	ldr	r3, [r7, #4]
20000db4:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
20000db6:	687b      	ldr	r3, [r7, #4]
20000db8:	685b      	ldr	r3, [r3, #4]
20000dba:	f023 0204 	bic.w	r2, r3, #4
20000dbe:	683b      	ldr	r3, [r7, #0]
20000dc0:	695b      	ldr	r3, [r3, #20]
20000dc2:	0c1b      	lsrs	r3, r3, #16
20000dc4:	431a      	orrs	r2, r3
20000dc6:	687b      	ldr	r3, [r7, #4]
20000dc8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
20000dca:	683b      	ldr	r3, [r7, #0]
20000dcc:	6a1b      	ldr	r3, [r3, #32]
20000dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20000dd2:	d105      	bne.n	20000de0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
20000dd4:	683b      	ldr	r3, [r7, #0]
20000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20000dd8:	4619      	mov	r1, r3
20000dda:	6878      	ldr	r0, [r7, #4]
20000ddc:	f7ff ffab 	bl	20000d36 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
20000de0:	2300      	movs	r3, #0
20000de2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	69db      	ldr	r3, [r3, #28]
20000de8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
20000dec:	687b      	ldr	r3, [r7, #4]
20000dee:	61da      	str	r2, [r3, #28]
  return status;
20000df0:	7bfb      	ldrb	r3, [r7, #15]
}
20000df2:	4618      	mov	r0, r3
20000df4:	3710      	adds	r7, #16
20000df6:	46bd      	mov	sp, r7
20000df8:	bd80      	pop	{r7, pc}
	...

20000dfc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
20000dfc:	b480      	push	{r7}
20000dfe:	b085      	sub	sp, #20
20000e00:	af00      	add	r7, sp, #0
20000e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
20000e04:	4b0f      	ldr	r3, [pc, #60]	; (20000e44 <LL_mDelay+0x48>)
20000e06:	681b      	ldr	r3, [r3, #0]
20000e08:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
20000e0a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
20000e0c:	687b      	ldr	r3, [r7, #4]
20000e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
20000e12:	d00c      	beq.n	20000e2e <LL_mDelay+0x32>
  {
    Delay++;
20000e14:	687b      	ldr	r3, [r7, #4]
20000e16:	3301      	adds	r3, #1
20000e18:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
20000e1a:	e008      	b.n	20000e2e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
20000e1c:	4b09      	ldr	r3, [pc, #36]	; (20000e44 <LL_mDelay+0x48>)
20000e1e:	681b      	ldr	r3, [r3, #0]
20000e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000e24:	2b00      	cmp	r3, #0
20000e26:	d002      	beq.n	20000e2e <LL_mDelay+0x32>
    {
      Delay--;
20000e28:	687b      	ldr	r3, [r7, #4]
20000e2a:	3b01      	subs	r3, #1
20000e2c:	607b      	str	r3, [r7, #4]
  while (Delay)
20000e2e:	687b      	ldr	r3, [r7, #4]
20000e30:	2b00      	cmp	r3, #0
20000e32:	d1f3      	bne.n	20000e1c <LL_mDelay+0x20>
    }
  }
}
20000e34:	bf00      	nop
20000e36:	bf00      	nop
20000e38:	3714      	adds	r7, #20
20000e3a:	46bd      	mov	sp, r7
20000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e40:	4770      	bx	lr
20000e42:	bf00      	nop
20000e44:	e000e010 	.word	0xe000e010

20000e48 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
20000e48:	b480      	push	{r7}
20000e4a:	b083      	sub	sp, #12
20000e4c:	af00      	add	r7, sp, #0
20000e4e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
20000e50:	4a04      	ldr	r2, [pc, #16]	; (20000e64 <LL_SetSystemCoreClock+0x1c>)
20000e52:	687b      	ldr	r3, [r7, #4]
20000e54:	6013      	str	r3, [r2, #0]
}
20000e56:	bf00      	nop
20000e58:	370c      	adds	r7, #12
20000e5a:	46bd      	mov	sp, r7
20000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e60:	4770      	bx	lr
20000e62:	bf00      	nop
20000e64:	2000ac70 	.word	0x2000ac70

20000e68 <__NVIC_SetPriority>:
{
20000e68:	b480      	push	{r7}
20000e6a:	b083      	sub	sp, #12
20000e6c:	af00      	add	r7, sp, #0
20000e6e:	4603      	mov	r3, r0
20000e70:	6039      	str	r1, [r7, #0]
20000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000e78:	2b00      	cmp	r3, #0
20000e7a:	db0a      	blt.n	20000e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000e7c:	683b      	ldr	r3, [r7, #0]
20000e7e:	b2da      	uxtb	r2, r3
20000e80:	490c      	ldr	r1, [pc, #48]	; (20000eb4 <__NVIC_SetPriority+0x4c>)
20000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000e86:	0112      	lsls	r2, r2, #4
20000e88:	b2d2      	uxtb	r2, r2
20000e8a:	440b      	add	r3, r1
20000e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
20000e90:	e00a      	b.n	20000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000e92:	683b      	ldr	r3, [r7, #0]
20000e94:	b2da      	uxtb	r2, r3
20000e96:	4908      	ldr	r1, [pc, #32]	; (20000eb8 <__NVIC_SetPriority+0x50>)
20000e98:	79fb      	ldrb	r3, [r7, #7]
20000e9a:	f003 030f 	and.w	r3, r3, #15
20000e9e:	3b04      	subs	r3, #4
20000ea0:	0112      	lsls	r2, r2, #4
20000ea2:	b2d2      	uxtb	r2, r2
20000ea4:	440b      	add	r3, r1
20000ea6:	761a      	strb	r2, [r3, #24]
}
20000ea8:	bf00      	nop
20000eaa:	370c      	adds	r7, #12
20000eac:	46bd      	mov	sp, r7
20000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
20000eb2:	4770      	bx	lr
20000eb4:	e000e100 	.word	0xe000e100
20000eb8:	e000ed00 	.word	0xe000ed00

20000ebc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
20000ebc:	b580      	push	{r7, lr}
20000ebe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
20000ec0:	4b05      	ldr	r3, [pc, #20]	; (20000ed8 <SysTick_Handler+0x1c>)
20000ec2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
20000ec4:	f002 f968 	bl	20003198 <xTaskGetSchedulerState>
20000ec8:	4603      	mov	r3, r0
20000eca:	2b01      	cmp	r3, #1
20000ecc:	d001      	beq.n	20000ed2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
20000ece:	f003 f84b 	bl	20003f68 <xPortSysTickHandler>
  }
}
20000ed2:	bf00      	nop
20000ed4:	bd80      	pop	{r7, pc}
20000ed6:	bf00      	nop
20000ed8:	e000e010 	.word	0xe000e010

20000edc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
20000edc:	b580      	push	{r7, lr}
20000ede:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
20000ee0:	2100      	movs	r1, #0
20000ee2:	f06f 0004 	mvn.w	r0, #4
20000ee6:	f7ff ffbf 	bl	20000e68 <__NVIC_SetPriority>
#endif
}
20000eea:	bf00      	nop
20000eec:	bd80      	pop	{r7, pc}
	...

20000ef0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
20000ef0:	b480      	push	{r7}
20000ef2:	b083      	sub	sp, #12
20000ef4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000ef6:	f3ef 8305 	mrs	r3, IPSR
20000efa:	603b      	str	r3, [r7, #0]
  return(result);
20000efc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000efe:	2b00      	cmp	r3, #0
20000f00:	d003      	beq.n	20000f0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
20000f02:	f06f 0305 	mvn.w	r3, #5
20000f06:	607b      	str	r3, [r7, #4]
20000f08:	e00c      	b.n	20000f24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
20000f0a:	4b0a      	ldr	r3, [pc, #40]	; (20000f34 <osKernelInitialize+0x44>)
20000f0c:	681b      	ldr	r3, [r3, #0]
20000f0e:	2b00      	cmp	r3, #0
20000f10:	d105      	bne.n	20000f1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
20000f12:	4b08      	ldr	r3, [pc, #32]	; (20000f34 <osKernelInitialize+0x44>)
20000f14:	2201      	movs	r2, #1
20000f16:	601a      	str	r2, [r3, #0]
      stat = osOK;
20000f18:	2300      	movs	r3, #0
20000f1a:	607b      	str	r3, [r7, #4]
20000f1c:	e002      	b.n	20000f24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
20000f1e:	f04f 33ff 	mov.w	r3, #4294967295
20000f22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000f24:	687b      	ldr	r3, [r7, #4]
}
20000f26:	4618      	mov	r0, r3
20000f28:	370c      	adds	r7, #12
20000f2a:	46bd      	mov	sp, r7
20000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f30:	4770      	bx	lr
20000f32:	bf00      	nop
20000f34:	2000acf8 	.word	0x2000acf8

20000f38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
20000f38:	b580      	push	{r7, lr}
20000f3a:	b082      	sub	sp, #8
20000f3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000f3e:	f3ef 8305 	mrs	r3, IPSR
20000f42:	603b      	str	r3, [r7, #0]
  return(result);
20000f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000f46:	2b00      	cmp	r3, #0
20000f48:	d003      	beq.n	20000f52 <osKernelStart+0x1a>
    stat = osErrorISR;
20000f4a:	f06f 0305 	mvn.w	r3, #5
20000f4e:	607b      	str	r3, [r7, #4]
20000f50:	e010      	b.n	20000f74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
20000f52:	4b0b      	ldr	r3, [pc, #44]	; (20000f80 <osKernelStart+0x48>)
20000f54:	681b      	ldr	r3, [r3, #0]
20000f56:	2b01      	cmp	r3, #1
20000f58:	d109      	bne.n	20000f6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
20000f5a:	f7ff ffbf 	bl	20000edc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
20000f5e:	4b08      	ldr	r3, [pc, #32]	; (20000f80 <osKernelStart+0x48>)
20000f60:	2202      	movs	r2, #2
20000f62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
20000f64:	f001 fcbc 	bl	200028e0 <vTaskStartScheduler>
      stat = osOK;
20000f68:	2300      	movs	r3, #0
20000f6a:	607b      	str	r3, [r7, #4]
20000f6c:	e002      	b.n	20000f74 <osKernelStart+0x3c>
    } else {
      stat = osError;
20000f6e:	f04f 33ff 	mov.w	r3, #4294967295
20000f72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000f74:	687b      	ldr	r3, [r7, #4]
}
20000f76:	4618      	mov	r0, r3
20000f78:	3708      	adds	r7, #8
20000f7a:	46bd      	mov	sp, r7
20000f7c:	bd80      	pop	{r7, pc}
20000f7e:	bf00      	nop
20000f80:	2000acf8 	.word	0x2000acf8

20000f84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
20000f84:	b580      	push	{r7, lr}
20000f86:	b08e      	sub	sp, #56	; 0x38
20000f88:	af04      	add	r7, sp, #16
20000f8a:	60f8      	str	r0, [r7, #12]
20000f8c:	60b9      	str	r1, [r7, #8]
20000f8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
20000f90:	2300      	movs	r3, #0
20000f92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000f94:	f3ef 8305 	mrs	r3, IPSR
20000f98:	617b      	str	r3, [r7, #20]
  return(result);
20000f9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
20000f9c:	2b00      	cmp	r3, #0
20000f9e:	d17e      	bne.n	2000109e <osThreadNew+0x11a>
20000fa0:	68fb      	ldr	r3, [r7, #12]
20000fa2:	2b00      	cmp	r3, #0
20000fa4:	d07b      	beq.n	2000109e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
20000fa6:	2380      	movs	r3, #128	; 0x80
20000fa8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
20000faa:	2318      	movs	r3, #24
20000fac:	61fb      	str	r3, [r7, #28]

    name = NULL;
20000fae:	2300      	movs	r3, #0
20000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
20000fb2:	f04f 33ff 	mov.w	r3, #4294967295
20000fb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	2b00      	cmp	r3, #0
20000fbc:	d045      	beq.n	2000104a <osThreadNew+0xc6>
      if (attr->name != NULL) {
20000fbe:	687b      	ldr	r3, [r7, #4]
20000fc0:	681b      	ldr	r3, [r3, #0]
20000fc2:	2b00      	cmp	r3, #0
20000fc4:	d002      	beq.n	20000fcc <osThreadNew+0x48>
        name = attr->name;
20000fc6:	687b      	ldr	r3, [r7, #4]
20000fc8:	681b      	ldr	r3, [r3, #0]
20000fca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
20000fcc:	687b      	ldr	r3, [r7, #4]
20000fce:	699b      	ldr	r3, [r3, #24]
20000fd0:	2b00      	cmp	r3, #0
20000fd2:	d002      	beq.n	20000fda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
20000fd4:	687b      	ldr	r3, [r7, #4]
20000fd6:	699b      	ldr	r3, [r3, #24]
20000fd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
20000fda:	69fb      	ldr	r3, [r7, #28]
20000fdc:	2b00      	cmp	r3, #0
20000fde:	d008      	beq.n	20000ff2 <osThreadNew+0x6e>
20000fe0:	69fb      	ldr	r3, [r7, #28]
20000fe2:	2b38      	cmp	r3, #56	; 0x38
20000fe4:	d805      	bhi.n	20000ff2 <osThreadNew+0x6e>
20000fe6:	687b      	ldr	r3, [r7, #4]
20000fe8:	685b      	ldr	r3, [r3, #4]
20000fea:	f003 0301 	and.w	r3, r3, #1
20000fee:	2b00      	cmp	r3, #0
20000ff0:	d001      	beq.n	20000ff6 <osThreadNew+0x72>
        return (NULL);
20000ff2:	2300      	movs	r3, #0
20000ff4:	e054      	b.n	200010a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
20000ff6:	687b      	ldr	r3, [r7, #4]
20000ff8:	695b      	ldr	r3, [r3, #20]
20000ffa:	2b00      	cmp	r3, #0
20000ffc:	d003      	beq.n	20001006 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
20000ffe:	687b      	ldr	r3, [r7, #4]
20001000:	695b      	ldr	r3, [r3, #20]
20001002:	089b      	lsrs	r3, r3, #2
20001004:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20001006:	687b      	ldr	r3, [r7, #4]
20001008:	689b      	ldr	r3, [r3, #8]
2000100a:	2b00      	cmp	r3, #0
2000100c:	d00e      	beq.n	2000102c <osThreadNew+0xa8>
2000100e:	687b      	ldr	r3, [r7, #4]
20001010:	68db      	ldr	r3, [r3, #12]
20001012:	2bbb      	cmp	r3, #187	; 0xbb
20001014:	d90a      	bls.n	2000102c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20001016:	687b      	ldr	r3, [r7, #4]
20001018:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
2000101a:	2b00      	cmp	r3, #0
2000101c:	d006      	beq.n	2000102c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
2000101e:	687b      	ldr	r3, [r7, #4]
20001020:	695b      	ldr	r3, [r3, #20]
20001022:	2b00      	cmp	r3, #0
20001024:	d002      	beq.n	2000102c <osThreadNew+0xa8>
        mem = 1;
20001026:	2301      	movs	r3, #1
20001028:	61bb      	str	r3, [r7, #24]
2000102a:	e010      	b.n	2000104e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
2000102c:	687b      	ldr	r3, [r7, #4]
2000102e:	689b      	ldr	r3, [r3, #8]
20001030:	2b00      	cmp	r3, #0
20001032:	d10c      	bne.n	2000104e <osThreadNew+0xca>
20001034:	687b      	ldr	r3, [r7, #4]
20001036:	68db      	ldr	r3, [r3, #12]
20001038:	2b00      	cmp	r3, #0
2000103a:	d108      	bne.n	2000104e <osThreadNew+0xca>
2000103c:	687b      	ldr	r3, [r7, #4]
2000103e:	691b      	ldr	r3, [r3, #16]
20001040:	2b00      	cmp	r3, #0
20001042:	d104      	bne.n	2000104e <osThreadNew+0xca>
          mem = 0;
20001044:	2300      	movs	r3, #0
20001046:	61bb      	str	r3, [r7, #24]
20001048:	e001      	b.n	2000104e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
2000104a:	2300      	movs	r3, #0
2000104c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
2000104e:	69bb      	ldr	r3, [r7, #24]
20001050:	2b01      	cmp	r3, #1
20001052:	d110      	bne.n	20001076 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20001054:	687b      	ldr	r3, [r7, #4]
20001056:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
20001058:	687a      	ldr	r2, [r7, #4]
2000105a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
2000105c:	9202      	str	r2, [sp, #8]
2000105e:	9301      	str	r3, [sp, #4]
20001060:	69fb      	ldr	r3, [r7, #28]
20001062:	9300      	str	r3, [sp, #0]
20001064:	68bb      	ldr	r3, [r7, #8]
20001066:	6a3a      	ldr	r2, [r7, #32]
20001068:	6a79      	ldr	r1, [r7, #36]	; 0x24
2000106a:	68f8      	ldr	r0, [r7, #12]
2000106c:	f001 fa4c 	bl	20002508 <xTaskCreateStatic>
20001070:	4603      	mov	r3, r0
20001072:	613b      	str	r3, [r7, #16]
20001074:	e013      	b.n	2000109e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
20001076:	69bb      	ldr	r3, [r7, #24]
20001078:	2b00      	cmp	r3, #0
2000107a:	d110      	bne.n	2000109e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
2000107c:	6a3b      	ldr	r3, [r7, #32]
2000107e:	b29a      	uxth	r2, r3
20001080:	f107 0310 	add.w	r3, r7, #16
20001084:	9301      	str	r3, [sp, #4]
20001086:	69fb      	ldr	r3, [r7, #28]
20001088:	9300      	str	r3, [sp, #0]
2000108a:	68bb      	ldr	r3, [r7, #8]
2000108c:	6a79      	ldr	r1, [r7, #36]	; 0x24
2000108e:	68f8      	ldr	r0, [r7, #12]
20001090:	f001 fa97 	bl	200025c2 <xTaskCreate>
20001094:	4603      	mov	r3, r0
20001096:	2b01      	cmp	r3, #1
20001098:	d001      	beq.n	2000109e <osThreadNew+0x11a>
            hTask = NULL;
2000109a:	2300      	movs	r3, #0
2000109c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
2000109e:	693b      	ldr	r3, [r7, #16]
}
200010a0:	4618      	mov	r0, r3
200010a2:	3728      	adds	r7, #40	; 0x28
200010a4:	46bd      	mov	sp, r7
200010a6:	bd80      	pop	{r7, pc}

200010a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
200010a8:	b580      	push	{r7, lr}
200010aa:	b084      	sub	sp, #16
200010ac:	af00      	add	r7, sp, #0
200010ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200010b0:	f3ef 8305 	mrs	r3, IPSR
200010b4:	60bb      	str	r3, [r7, #8]
  return(result);
200010b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
200010b8:	2b00      	cmp	r3, #0
200010ba:	d003      	beq.n	200010c4 <osDelay+0x1c>
    stat = osErrorISR;
200010bc:	f06f 0305 	mvn.w	r3, #5
200010c0:	60fb      	str	r3, [r7, #12]
200010c2:	e007      	b.n	200010d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
200010c4:	2300      	movs	r3, #0
200010c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
200010c8:	687b      	ldr	r3, [r7, #4]
200010ca:	2b00      	cmp	r3, #0
200010cc:	d002      	beq.n	200010d4 <osDelay+0x2c>
      vTaskDelay(ticks);
200010ce:	6878      	ldr	r0, [r7, #4]
200010d0:	f001 fbd2 	bl	20002878 <vTaskDelay>
    }
  }

  return (stat);
200010d4:	68fb      	ldr	r3, [r7, #12]
}
200010d6:	4618      	mov	r0, r3
200010d8:	3710      	adds	r7, #16
200010da:	46bd      	mov	sp, r7
200010dc:	bd80      	pop	{r7, pc}

200010de <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
200010de:	b580      	push	{r7, lr}
200010e0:	b08a      	sub	sp, #40	; 0x28
200010e2:	af02      	add	r7, sp, #8
200010e4:	60f8      	str	r0, [r7, #12]
200010e6:	60b9      	str	r1, [r7, #8]
200010e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
200010ea:	2300      	movs	r3, #0
200010ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200010ee:	f3ef 8305 	mrs	r3, IPSR
200010f2:	613b      	str	r3, [r7, #16]
  return(result);
200010f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
200010f6:	2b00      	cmp	r3, #0
200010f8:	d175      	bne.n	200011e6 <osSemaphoreNew+0x108>
200010fa:	68fb      	ldr	r3, [r7, #12]
200010fc:	2b00      	cmp	r3, #0
200010fe:	d072      	beq.n	200011e6 <osSemaphoreNew+0x108>
20001100:	68ba      	ldr	r2, [r7, #8]
20001102:	68fb      	ldr	r3, [r7, #12]
20001104:	429a      	cmp	r2, r3
20001106:	d86e      	bhi.n	200011e6 <osSemaphoreNew+0x108>
    mem = -1;
20001108:	f04f 33ff 	mov.w	r3, #4294967295
2000110c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	2b00      	cmp	r3, #0
20001112:	d015      	beq.n	20001140 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
20001114:	687b      	ldr	r3, [r7, #4]
20001116:	689b      	ldr	r3, [r3, #8]
20001118:	2b00      	cmp	r3, #0
2000111a:	d006      	beq.n	2000112a <osSemaphoreNew+0x4c>
2000111c:	687b      	ldr	r3, [r7, #4]
2000111e:	68db      	ldr	r3, [r3, #12]
20001120:	2b4f      	cmp	r3, #79	; 0x4f
20001122:	d902      	bls.n	2000112a <osSemaphoreNew+0x4c>
        mem = 1;
20001124:	2301      	movs	r3, #1
20001126:	61bb      	str	r3, [r7, #24]
20001128:	e00c      	b.n	20001144 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	689b      	ldr	r3, [r3, #8]
2000112e:	2b00      	cmp	r3, #0
20001130:	d108      	bne.n	20001144 <osSemaphoreNew+0x66>
20001132:	687b      	ldr	r3, [r7, #4]
20001134:	68db      	ldr	r3, [r3, #12]
20001136:	2b00      	cmp	r3, #0
20001138:	d104      	bne.n	20001144 <osSemaphoreNew+0x66>
          mem = 0;
2000113a:	2300      	movs	r3, #0
2000113c:	61bb      	str	r3, [r7, #24]
2000113e:	e001      	b.n	20001144 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
20001140:	2300      	movs	r3, #0
20001142:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
20001144:	69bb      	ldr	r3, [r7, #24]
20001146:	f1b3 3fff 	cmp.w	r3, #4294967295
2000114a:	d04c      	beq.n	200011e6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
2000114c:	68fb      	ldr	r3, [r7, #12]
2000114e:	2b01      	cmp	r3, #1
20001150:	d128      	bne.n	200011a4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
20001152:	69bb      	ldr	r3, [r7, #24]
20001154:	2b01      	cmp	r3, #1
20001156:	d10a      	bne.n	2000116e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
20001158:	687b      	ldr	r3, [r7, #4]
2000115a:	689b      	ldr	r3, [r3, #8]
2000115c:	2203      	movs	r2, #3
2000115e:	9200      	str	r2, [sp, #0]
20001160:	2200      	movs	r2, #0
20001162:	2100      	movs	r1, #0
20001164:	2001      	movs	r0, #1
20001166:	f000 fa29 	bl	200015bc <xQueueGenericCreateStatic>
2000116a:	61f8      	str	r0, [r7, #28]
2000116c:	e005      	b.n	2000117a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
2000116e:	2203      	movs	r2, #3
20001170:	2100      	movs	r1, #0
20001172:	2001      	movs	r0, #1
20001174:	f000 fa9a 	bl	200016ac <xQueueGenericCreate>
20001178:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
2000117a:	69fb      	ldr	r3, [r7, #28]
2000117c:	2b00      	cmp	r3, #0
2000117e:	d022      	beq.n	200011c6 <osSemaphoreNew+0xe8>
20001180:	68bb      	ldr	r3, [r7, #8]
20001182:	2b00      	cmp	r3, #0
20001184:	d01f      	beq.n	200011c6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
20001186:	2300      	movs	r3, #0
20001188:	2200      	movs	r2, #0
2000118a:	2100      	movs	r1, #0
2000118c:	69f8      	ldr	r0, [r7, #28]
2000118e:	f000 fb55 	bl	2000183c <xQueueGenericSend>
20001192:	4603      	mov	r3, r0
20001194:	2b01      	cmp	r3, #1
20001196:	d016      	beq.n	200011c6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
20001198:	69f8      	ldr	r0, [r7, #28]
2000119a:	f000 ffe1 	bl	20002160 <vQueueDelete>
            hSemaphore = NULL;
2000119e:	2300      	movs	r3, #0
200011a0:	61fb      	str	r3, [r7, #28]
200011a2:	e010      	b.n	200011c6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
200011a4:	69bb      	ldr	r3, [r7, #24]
200011a6:	2b01      	cmp	r3, #1
200011a8:	d108      	bne.n	200011bc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
200011aa:	687b      	ldr	r3, [r7, #4]
200011ac:	689b      	ldr	r3, [r3, #8]
200011ae:	461a      	mov	r2, r3
200011b0:	68b9      	ldr	r1, [r7, #8]
200011b2:	68f8      	ldr	r0, [r7, #12]
200011b4:	f000 fad7 	bl	20001766 <xQueueCreateCountingSemaphoreStatic>
200011b8:	61f8      	str	r0, [r7, #28]
200011ba:	e004      	b.n	200011c6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
200011bc:	68b9      	ldr	r1, [r7, #8]
200011be:	68f8      	ldr	r0, [r7, #12]
200011c0:	f000 fb08 	bl	200017d4 <xQueueCreateCountingSemaphore>
200011c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
200011c6:	69fb      	ldr	r3, [r7, #28]
200011c8:	2b00      	cmp	r3, #0
200011ca:	d00c      	beq.n	200011e6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
200011cc:	687b      	ldr	r3, [r7, #4]
200011ce:	2b00      	cmp	r3, #0
200011d0:	d003      	beq.n	200011da <osSemaphoreNew+0xfc>
          name = attr->name;
200011d2:	687b      	ldr	r3, [r7, #4]
200011d4:	681b      	ldr	r3, [r3, #0]
200011d6:	617b      	str	r3, [r7, #20]
200011d8:	e001      	b.n	200011de <osSemaphoreNew+0x100>
        } else {
          name = NULL;
200011da:	2300      	movs	r3, #0
200011dc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
200011de:	6979      	ldr	r1, [r7, #20]
200011e0:	69f8      	ldr	r0, [r7, #28]
200011e2:	f001 f909 	bl	200023f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
200011e6:	69fb      	ldr	r3, [r7, #28]
}
200011e8:	4618      	mov	r0, r3
200011ea:	3720      	adds	r7, #32
200011ec:	46bd      	mov	sp, r7
200011ee:	bd80      	pop	{r7, pc}

200011f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
200011f0:	b580      	push	{r7, lr}
200011f2:	b086      	sub	sp, #24
200011f4:	af00      	add	r7, sp, #0
200011f6:	6078      	str	r0, [r7, #4]
200011f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
200011fa:	687b      	ldr	r3, [r7, #4]
200011fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
200011fe:	2300      	movs	r3, #0
20001200:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
20001202:	693b      	ldr	r3, [r7, #16]
20001204:	2b00      	cmp	r3, #0
20001206:	d103      	bne.n	20001210 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
20001208:	f06f 0303 	mvn.w	r3, #3
2000120c:	617b      	str	r3, [r7, #20]
2000120e:	e039      	b.n	20001284 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20001210:	f3ef 8305 	mrs	r3, IPSR
20001214:	60fb      	str	r3, [r7, #12]
  return(result);
20001216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
20001218:	2b00      	cmp	r3, #0
2000121a:	d022      	beq.n	20001262 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
2000121c:	683b      	ldr	r3, [r7, #0]
2000121e:	2b00      	cmp	r3, #0
20001220:	d003      	beq.n	2000122a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
20001222:	f06f 0303 	mvn.w	r3, #3
20001226:	617b      	str	r3, [r7, #20]
20001228:	e02c      	b.n	20001284 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
2000122a:	2300      	movs	r3, #0
2000122c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
2000122e:	f107 0308 	add.w	r3, r7, #8
20001232:	461a      	mov	r2, r3
20001234:	2100      	movs	r1, #0
20001236:	6938      	ldr	r0, [r7, #16]
20001238:	f000 ff12 	bl	20002060 <xQueueReceiveFromISR>
2000123c:	4603      	mov	r3, r0
2000123e:	2b01      	cmp	r3, #1
20001240:	d003      	beq.n	2000124a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
20001242:	f06f 0302 	mvn.w	r3, #2
20001246:	617b      	str	r3, [r7, #20]
20001248:	e01c      	b.n	20001284 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
2000124a:	68bb      	ldr	r3, [r7, #8]
2000124c:	2b00      	cmp	r3, #0
2000124e:	d019      	beq.n	20001284 <osSemaphoreAcquire+0x94>
20001250:	4b0f      	ldr	r3, [pc, #60]	; (20001290 <osSemaphoreAcquire+0xa0>)
20001252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001256:	601a      	str	r2, [r3, #0]
20001258:	f3bf 8f4f 	dsb	sy
2000125c:	f3bf 8f6f 	isb	sy
20001260:	e010      	b.n	20001284 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
20001262:	6839      	ldr	r1, [r7, #0]
20001264:	6938      	ldr	r0, [r7, #16]
20001266:	f000 fdef 	bl	20001e48 <xQueueSemaphoreTake>
2000126a:	4603      	mov	r3, r0
2000126c:	2b01      	cmp	r3, #1
2000126e:	d009      	beq.n	20001284 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
20001270:	683b      	ldr	r3, [r7, #0]
20001272:	2b00      	cmp	r3, #0
20001274:	d003      	beq.n	2000127e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
20001276:	f06f 0301 	mvn.w	r3, #1
2000127a:	617b      	str	r3, [r7, #20]
2000127c:	e002      	b.n	20001284 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
2000127e:	f06f 0302 	mvn.w	r3, #2
20001282:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
20001284:	697b      	ldr	r3, [r7, #20]
}
20001286:	4618      	mov	r0, r3
20001288:	3718      	adds	r7, #24
2000128a:	46bd      	mov	sp, r7
2000128c:	bd80      	pop	{r7, pc}
2000128e:	bf00      	nop
20001290:	e000ed04 	.word	0xe000ed04

20001294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
20001294:	b580      	push	{r7, lr}
20001296:	b086      	sub	sp, #24
20001298:	af00      	add	r7, sp, #0
2000129a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
200012a0:	2300      	movs	r3, #0
200012a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
200012a4:	693b      	ldr	r3, [r7, #16]
200012a6:	2b00      	cmp	r3, #0
200012a8:	d103      	bne.n	200012b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
200012aa:	f06f 0303 	mvn.w	r3, #3
200012ae:	617b      	str	r3, [r7, #20]
200012b0:	e02c      	b.n	2000130c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200012b2:	f3ef 8305 	mrs	r3, IPSR
200012b6:	60fb      	str	r3, [r7, #12]
  return(result);
200012b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
200012ba:	2b00      	cmp	r3, #0
200012bc:	d01a      	beq.n	200012f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
200012be:	2300      	movs	r3, #0
200012c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
200012c2:	f107 0308 	add.w	r3, r7, #8
200012c6:	4619      	mov	r1, r3
200012c8:	6938      	ldr	r0, [r7, #16]
200012ca:	f000 fc50 	bl	20001b6e <xQueueGiveFromISR>
200012ce:	4603      	mov	r3, r0
200012d0:	2b01      	cmp	r3, #1
200012d2:	d003      	beq.n	200012dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
200012d4:	f06f 0302 	mvn.w	r3, #2
200012d8:	617b      	str	r3, [r7, #20]
200012da:	e017      	b.n	2000130c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
200012dc:	68bb      	ldr	r3, [r7, #8]
200012de:	2b00      	cmp	r3, #0
200012e0:	d014      	beq.n	2000130c <osSemaphoreRelease+0x78>
200012e2:	4b0d      	ldr	r3, [pc, #52]	; (20001318 <osSemaphoreRelease+0x84>)
200012e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200012e8:	601a      	str	r2, [r3, #0]
200012ea:	f3bf 8f4f 	dsb	sy
200012ee:	f3bf 8f6f 	isb	sy
200012f2:	e00b      	b.n	2000130c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
200012f4:	2300      	movs	r3, #0
200012f6:	2200      	movs	r2, #0
200012f8:	2100      	movs	r1, #0
200012fa:	6938      	ldr	r0, [r7, #16]
200012fc:	f000 fa9e 	bl	2000183c <xQueueGenericSend>
20001300:	4603      	mov	r3, r0
20001302:	2b01      	cmp	r3, #1
20001304:	d002      	beq.n	2000130c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
20001306:	f06f 0302 	mvn.w	r3, #2
2000130a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
2000130c:	697b      	ldr	r3, [r7, #20]
}
2000130e:	4618      	mov	r0, r3
20001310:	3718      	adds	r7, #24
20001312:	46bd      	mov	sp, r7
20001314:	bd80      	pop	{r7, pc}
20001316:	bf00      	nop
20001318:	e000ed04 	.word	0xe000ed04

2000131c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
2000131c:	b480      	push	{r7}
2000131e:	b085      	sub	sp, #20
20001320:	af00      	add	r7, sp, #0
20001322:	60f8      	str	r0, [r7, #12]
20001324:	60b9      	str	r1, [r7, #8]
20001326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
20001328:	68fb      	ldr	r3, [r7, #12]
2000132a:	4a07      	ldr	r2, [pc, #28]	; (20001348 <vApplicationGetIdleTaskMemory+0x2c>)
2000132c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
2000132e:	68bb      	ldr	r3, [r7, #8]
20001330:	4a06      	ldr	r2, [pc, #24]	; (2000134c <vApplicationGetIdleTaskMemory+0x30>)
20001332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	2280      	movs	r2, #128	; 0x80
20001338:	601a      	str	r2, [r3, #0]
}
2000133a:	bf00      	nop
2000133c:	3714      	adds	r7, #20
2000133e:	46bd      	mov	sp, r7
20001340:	f85d 7b04 	ldr.w	r7, [sp], #4
20001344:	4770      	bx	lr
20001346:	bf00      	nop
20001348:	2000acfc 	.word	0x2000acfc
2000134c:	2000adb8 	.word	0x2000adb8

20001350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
20001350:	b480      	push	{r7}
20001352:	b085      	sub	sp, #20
20001354:	af00      	add	r7, sp, #0
20001356:	60f8      	str	r0, [r7, #12]
20001358:	60b9      	str	r1, [r7, #8]
2000135a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
2000135c:	68fb      	ldr	r3, [r7, #12]
2000135e:	4a07      	ldr	r2, [pc, #28]	; (2000137c <vApplicationGetTimerTaskMemory+0x2c>)
20001360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
20001362:	68bb      	ldr	r3, [r7, #8]
20001364:	4a06      	ldr	r2, [pc, #24]	; (20001380 <vApplicationGetTimerTaskMemory+0x30>)
20001366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
20001368:	687b      	ldr	r3, [r7, #4]
2000136a:	f44f 7280 	mov.w	r2, #256	; 0x100
2000136e:	601a      	str	r2, [r3, #0]
}
20001370:	bf00      	nop
20001372:	3714      	adds	r7, #20
20001374:	46bd      	mov	sp, r7
20001376:	f85d 7b04 	ldr.w	r7, [sp], #4
2000137a:	4770      	bx	lr
2000137c:	2000afb8 	.word	0x2000afb8
20001380:	2000b074 	.word	0x2000b074

20001384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20001384:	b480      	push	{r7}
20001386:	b083      	sub	sp, #12
20001388:	af00      	add	r7, sp, #0
2000138a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000138c:	687b      	ldr	r3, [r7, #4]
2000138e:	f103 0208 	add.w	r2, r3, #8
20001392:	687b      	ldr	r3, [r7, #4]
20001394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20001396:	687b      	ldr	r3, [r7, #4]
20001398:	f04f 32ff 	mov.w	r2, #4294967295
2000139c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000139e:	687b      	ldr	r3, [r7, #4]
200013a0:	f103 0208 	add.w	r2, r3, #8
200013a4:	687b      	ldr	r3, [r7, #4]
200013a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
200013a8:	687b      	ldr	r3, [r7, #4]
200013aa:	f103 0208 	add.w	r2, r3, #8
200013ae:	687b      	ldr	r3, [r7, #4]
200013b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
200013b2:	687b      	ldr	r3, [r7, #4]
200013b4:	2200      	movs	r2, #0
200013b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
200013b8:	bf00      	nop
200013ba:	370c      	adds	r7, #12
200013bc:	46bd      	mov	sp, r7
200013be:	f85d 7b04 	ldr.w	r7, [sp], #4
200013c2:	4770      	bx	lr

200013c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
200013c4:	b480      	push	{r7}
200013c6:	b083      	sub	sp, #12
200013c8:	af00      	add	r7, sp, #0
200013ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
200013cc:	687b      	ldr	r3, [r7, #4]
200013ce:	2200      	movs	r2, #0
200013d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
200013d2:	bf00      	nop
200013d4:	370c      	adds	r7, #12
200013d6:	46bd      	mov	sp, r7
200013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200013dc:	4770      	bx	lr

200013de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
200013de:	b480      	push	{r7}
200013e0:	b085      	sub	sp, #20
200013e2:	af00      	add	r7, sp, #0
200013e4:	6078      	str	r0, [r7, #4]
200013e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
200013e8:	687b      	ldr	r3, [r7, #4]
200013ea:	685b      	ldr	r3, [r3, #4]
200013ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
200013ee:	683b      	ldr	r3, [r7, #0]
200013f0:	68fa      	ldr	r2, [r7, #12]
200013f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
200013f4:	68fb      	ldr	r3, [r7, #12]
200013f6:	689a      	ldr	r2, [r3, #8]
200013f8:	683b      	ldr	r3, [r7, #0]
200013fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
200013fc:	68fb      	ldr	r3, [r7, #12]
200013fe:	689b      	ldr	r3, [r3, #8]
20001400:	683a      	ldr	r2, [r7, #0]
20001402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
20001404:	68fb      	ldr	r3, [r7, #12]
20001406:	683a      	ldr	r2, [r7, #0]
20001408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
2000140a:	683b      	ldr	r3, [r7, #0]
2000140c:	687a      	ldr	r2, [r7, #4]
2000140e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20001410:	687b      	ldr	r3, [r7, #4]
20001412:	681b      	ldr	r3, [r3, #0]
20001414:	1c5a      	adds	r2, r3, #1
20001416:	687b      	ldr	r3, [r7, #4]
20001418:	601a      	str	r2, [r3, #0]
}
2000141a:	bf00      	nop
2000141c:	3714      	adds	r7, #20
2000141e:	46bd      	mov	sp, r7
20001420:	f85d 7b04 	ldr.w	r7, [sp], #4
20001424:	4770      	bx	lr

20001426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001426:	b480      	push	{r7}
20001428:	b085      	sub	sp, #20
2000142a:	af00      	add	r7, sp, #0
2000142c:	6078      	str	r0, [r7, #4]
2000142e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
20001430:	683b      	ldr	r3, [r7, #0]
20001432:	681b      	ldr	r3, [r3, #0]
20001434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20001436:	68bb      	ldr	r3, [r7, #8]
20001438:	f1b3 3fff 	cmp.w	r3, #4294967295
2000143c:	d103      	bne.n	20001446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
2000143e:	687b      	ldr	r3, [r7, #4]
20001440:	691b      	ldr	r3, [r3, #16]
20001442:	60fb      	str	r3, [r7, #12]
20001444:	e00c      	b.n	20001460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
20001446:	687b      	ldr	r3, [r7, #4]
20001448:	3308      	adds	r3, #8
2000144a:	60fb      	str	r3, [r7, #12]
2000144c:	e002      	b.n	20001454 <vListInsert+0x2e>
2000144e:	68fb      	ldr	r3, [r7, #12]
20001450:	685b      	ldr	r3, [r3, #4]
20001452:	60fb      	str	r3, [r7, #12]
20001454:	68fb      	ldr	r3, [r7, #12]
20001456:	685b      	ldr	r3, [r3, #4]
20001458:	681b      	ldr	r3, [r3, #0]
2000145a:	68ba      	ldr	r2, [r7, #8]
2000145c:	429a      	cmp	r2, r3
2000145e:	d2f6      	bcs.n	2000144e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
20001460:	68fb      	ldr	r3, [r7, #12]
20001462:	685a      	ldr	r2, [r3, #4]
20001464:	683b      	ldr	r3, [r7, #0]
20001466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001468:	683b      	ldr	r3, [r7, #0]
2000146a:	685b      	ldr	r3, [r3, #4]
2000146c:	683a      	ldr	r2, [r7, #0]
2000146e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
20001470:	683b      	ldr	r3, [r7, #0]
20001472:	68fa      	ldr	r2, [r7, #12]
20001474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001476:	68fb      	ldr	r3, [r7, #12]
20001478:	683a      	ldr	r2, [r7, #0]
2000147a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
2000147c:	683b      	ldr	r3, [r7, #0]
2000147e:	687a      	ldr	r2, [r7, #4]
20001480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20001482:	687b      	ldr	r3, [r7, #4]
20001484:	681b      	ldr	r3, [r3, #0]
20001486:	1c5a      	adds	r2, r3, #1
20001488:	687b      	ldr	r3, [r7, #4]
2000148a:	601a      	str	r2, [r3, #0]
}
2000148c:	bf00      	nop
2000148e:	3714      	adds	r7, #20
20001490:	46bd      	mov	sp, r7
20001492:	f85d 7b04 	ldr.w	r7, [sp], #4
20001496:	4770      	bx	lr

20001498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20001498:	b480      	push	{r7}
2000149a:	b085      	sub	sp, #20
2000149c:	af00      	add	r7, sp, #0
2000149e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
200014a0:	687b      	ldr	r3, [r7, #4]
200014a2:	691b      	ldr	r3, [r3, #16]
200014a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
200014a6:	687b      	ldr	r3, [r7, #4]
200014a8:	685b      	ldr	r3, [r3, #4]
200014aa:	687a      	ldr	r2, [r7, #4]
200014ac:	6892      	ldr	r2, [r2, #8]
200014ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
200014b0:	687b      	ldr	r3, [r7, #4]
200014b2:	689b      	ldr	r3, [r3, #8]
200014b4:	687a      	ldr	r2, [r7, #4]
200014b6:	6852      	ldr	r2, [r2, #4]
200014b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
200014ba:	68fb      	ldr	r3, [r7, #12]
200014bc:	685b      	ldr	r3, [r3, #4]
200014be:	687a      	ldr	r2, [r7, #4]
200014c0:	429a      	cmp	r2, r3
200014c2:	d103      	bne.n	200014cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
200014c4:	687b      	ldr	r3, [r7, #4]
200014c6:	689a      	ldr	r2, [r3, #8]
200014c8:	68fb      	ldr	r3, [r7, #12]
200014ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
200014cc:	687b      	ldr	r3, [r7, #4]
200014ce:	2200      	movs	r2, #0
200014d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
200014d2:	68fb      	ldr	r3, [r7, #12]
200014d4:	681b      	ldr	r3, [r3, #0]
200014d6:	1e5a      	subs	r2, r3, #1
200014d8:	68fb      	ldr	r3, [r7, #12]
200014da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200014dc:	68fb      	ldr	r3, [r7, #12]
200014de:	681b      	ldr	r3, [r3, #0]
}
200014e0:	4618      	mov	r0, r3
200014e2:	3714      	adds	r7, #20
200014e4:	46bd      	mov	sp, r7
200014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200014ea:	4770      	bx	lr

200014ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
200014ec:	b580      	push	{r7, lr}
200014ee:	b084      	sub	sp, #16
200014f0:	af00      	add	r7, sp, #0
200014f2:	6078      	str	r0, [r7, #4]
200014f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
200014f6:	687b      	ldr	r3, [r7, #4]
200014f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
200014fa:	68fb      	ldr	r3, [r7, #12]
200014fc:	2b00      	cmp	r3, #0
200014fe:	d10a      	bne.n	20001516 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20001500:	f04f 0350 	mov.w	r3, #80	; 0x50
20001504:	f383 8811 	msr	BASEPRI, r3
20001508:	f3bf 8f6f 	isb	sy
2000150c:	f3bf 8f4f 	dsb	sy
20001510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
20001512:	bf00      	nop
20001514:	e7fe      	b.n	20001514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
20001516:	f002 fc95 	bl	20003e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
2000151a:	68fb      	ldr	r3, [r7, #12]
2000151c:	681a      	ldr	r2, [r3, #0]
2000151e:	68fb      	ldr	r3, [r7, #12]
20001520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001522:	68f9      	ldr	r1, [r7, #12]
20001524:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001526:	fb01 f303 	mul.w	r3, r1, r3
2000152a:	441a      	add	r2, r3
2000152c:	68fb      	ldr	r3, [r7, #12]
2000152e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
20001530:	68fb      	ldr	r3, [r7, #12]
20001532:	2200      	movs	r2, #0
20001534:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001536:	68fb      	ldr	r3, [r7, #12]
20001538:	681a      	ldr	r2, [r3, #0]
2000153a:	68fb      	ldr	r3, [r7, #12]
2000153c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
2000153e:	68fb      	ldr	r3, [r7, #12]
20001540:	681a      	ldr	r2, [r3, #0]
20001542:	68fb      	ldr	r3, [r7, #12]
20001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001546:	3b01      	subs	r3, #1
20001548:	68f9      	ldr	r1, [r7, #12]
2000154a:	6c09      	ldr	r1, [r1, #64]	; 0x40
2000154c:	fb01 f303 	mul.w	r3, r1, r3
20001550:	441a      	add	r2, r3
20001552:	68fb      	ldr	r3, [r7, #12]
20001554:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20001556:	68fb      	ldr	r3, [r7, #12]
20001558:	22ff      	movs	r2, #255	; 0xff
2000155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
2000155e:	68fb      	ldr	r3, [r7, #12]
20001560:	22ff      	movs	r2, #255	; 0xff
20001562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
20001566:	683b      	ldr	r3, [r7, #0]
20001568:	2b00      	cmp	r3, #0
2000156a:	d114      	bne.n	20001596 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2000156c:	68fb      	ldr	r3, [r7, #12]
2000156e:	691b      	ldr	r3, [r3, #16]
20001570:	2b00      	cmp	r3, #0
20001572:	d01a      	beq.n	200015aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001574:	68fb      	ldr	r3, [r7, #12]
20001576:	3310      	adds	r3, #16
20001578:	4618      	mov	r0, r3
2000157a:	f001 fc4b 	bl	20002e14 <xTaskRemoveFromEventList>
2000157e:	4603      	mov	r3, r0
20001580:	2b00      	cmp	r3, #0
20001582:	d012      	beq.n	200015aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
20001584:	4b0c      	ldr	r3, [pc, #48]	; (200015b8 <xQueueGenericReset+0xcc>)
20001586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000158a:	601a      	str	r2, [r3, #0]
2000158c:	f3bf 8f4f 	dsb	sy
20001590:	f3bf 8f6f 	isb	sy
20001594:	e009      	b.n	200015aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001596:	68fb      	ldr	r3, [r7, #12]
20001598:	3310      	adds	r3, #16
2000159a:	4618      	mov	r0, r3
2000159c:	f7ff fef2 	bl	20001384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
200015a0:	68fb      	ldr	r3, [r7, #12]
200015a2:	3324      	adds	r3, #36	; 0x24
200015a4:	4618      	mov	r0, r3
200015a6:	f7ff feed 	bl	20001384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
200015aa:	f002 fc7b 	bl	20003ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
200015ae:	2301      	movs	r3, #1
}
200015b0:	4618      	mov	r0, r3
200015b2:	3710      	adds	r7, #16
200015b4:	46bd      	mov	sp, r7
200015b6:	bd80      	pop	{r7, pc}
200015b8:	e000ed04 	.word	0xe000ed04

200015bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
200015bc:	b580      	push	{r7, lr}
200015be:	b08e      	sub	sp, #56	; 0x38
200015c0:	af02      	add	r7, sp, #8
200015c2:	60f8      	str	r0, [r7, #12]
200015c4:	60b9      	str	r1, [r7, #8]
200015c6:	607a      	str	r2, [r7, #4]
200015c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200015ca:	68fb      	ldr	r3, [r7, #12]
200015cc:	2b00      	cmp	r3, #0
200015ce:	d10a      	bne.n	200015e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
200015d0:	f04f 0350 	mov.w	r3, #80	; 0x50
200015d4:	f383 8811 	msr	BASEPRI, r3
200015d8:	f3bf 8f6f 	isb	sy
200015dc:	f3bf 8f4f 	dsb	sy
200015e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
200015e2:	bf00      	nop
200015e4:	e7fe      	b.n	200015e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
200015e6:	683b      	ldr	r3, [r7, #0]
200015e8:	2b00      	cmp	r3, #0
200015ea:	d10a      	bne.n	20001602 <xQueueGenericCreateStatic+0x46>
	__asm volatile
200015ec:	f04f 0350 	mov.w	r3, #80	; 0x50
200015f0:	f383 8811 	msr	BASEPRI, r3
200015f4:	f3bf 8f6f 	isb	sy
200015f8:	f3bf 8f4f 	dsb	sy
200015fc:	627b      	str	r3, [r7, #36]	; 0x24
}
200015fe:	bf00      	nop
20001600:	e7fe      	b.n	20001600 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
20001602:	687b      	ldr	r3, [r7, #4]
20001604:	2b00      	cmp	r3, #0
20001606:	d002      	beq.n	2000160e <xQueueGenericCreateStatic+0x52>
20001608:	68bb      	ldr	r3, [r7, #8]
2000160a:	2b00      	cmp	r3, #0
2000160c:	d001      	beq.n	20001612 <xQueueGenericCreateStatic+0x56>
2000160e:	2301      	movs	r3, #1
20001610:	e000      	b.n	20001614 <xQueueGenericCreateStatic+0x58>
20001612:	2300      	movs	r3, #0
20001614:	2b00      	cmp	r3, #0
20001616:	d10a      	bne.n	2000162e <xQueueGenericCreateStatic+0x72>
	__asm volatile
20001618:	f04f 0350 	mov.w	r3, #80	; 0x50
2000161c:	f383 8811 	msr	BASEPRI, r3
20001620:	f3bf 8f6f 	isb	sy
20001624:	f3bf 8f4f 	dsb	sy
20001628:	623b      	str	r3, [r7, #32]
}
2000162a:	bf00      	nop
2000162c:	e7fe      	b.n	2000162c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
2000162e:	687b      	ldr	r3, [r7, #4]
20001630:	2b00      	cmp	r3, #0
20001632:	d102      	bne.n	2000163a <xQueueGenericCreateStatic+0x7e>
20001634:	68bb      	ldr	r3, [r7, #8]
20001636:	2b00      	cmp	r3, #0
20001638:	d101      	bne.n	2000163e <xQueueGenericCreateStatic+0x82>
2000163a:	2301      	movs	r3, #1
2000163c:	e000      	b.n	20001640 <xQueueGenericCreateStatic+0x84>
2000163e:	2300      	movs	r3, #0
20001640:	2b00      	cmp	r3, #0
20001642:	d10a      	bne.n	2000165a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
20001644:	f04f 0350 	mov.w	r3, #80	; 0x50
20001648:	f383 8811 	msr	BASEPRI, r3
2000164c:	f3bf 8f6f 	isb	sy
20001650:	f3bf 8f4f 	dsb	sy
20001654:	61fb      	str	r3, [r7, #28]
}
20001656:	bf00      	nop
20001658:	e7fe      	b.n	20001658 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
2000165a:	2350      	movs	r3, #80	; 0x50
2000165c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
2000165e:	697b      	ldr	r3, [r7, #20]
20001660:	2b50      	cmp	r3, #80	; 0x50
20001662:	d00a      	beq.n	2000167a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
20001664:	f04f 0350 	mov.w	r3, #80	; 0x50
20001668:	f383 8811 	msr	BASEPRI, r3
2000166c:	f3bf 8f6f 	isb	sy
20001670:	f3bf 8f4f 	dsb	sy
20001674:	61bb      	str	r3, [r7, #24]
}
20001676:	bf00      	nop
20001678:	e7fe      	b.n	20001678 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
2000167a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
2000167c:	683b      	ldr	r3, [r7, #0]
2000167e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
20001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001682:	2b00      	cmp	r3, #0
20001684:	d00d      	beq.n	200016a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
20001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001688:	2201      	movs	r2, #1
2000168a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
2000168e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
20001692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001694:	9300      	str	r3, [sp, #0]
20001696:	4613      	mov	r3, r2
20001698:	687a      	ldr	r2, [r7, #4]
2000169a:	68b9      	ldr	r1, [r7, #8]
2000169c:	68f8      	ldr	r0, [r7, #12]
2000169e:	f000 f83f 	bl	20001720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
200016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
200016a4:	4618      	mov	r0, r3
200016a6:	3730      	adds	r7, #48	; 0x30
200016a8:	46bd      	mov	sp, r7
200016aa:	bd80      	pop	{r7, pc}

200016ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
200016ac:	b580      	push	{r7, lr}
200016ae:	b08a      	sub	sp, #40	; 0x28
200016b0:	af02      	add	r7, sp, #8
200016b2:	60f8      	str	r0, [r7, #12]
200016b4:	60b9      	str	r1, [r7, #8]
200016b6:	4613      	mov	r3, r2
200016b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200016ba:	68fb      	ldr	r3, [r7, #12]
200016bc:	2b00      	cmp	r3, #0
200016be:	d10a      	bne.n	200016d6 <xQueueGenericCreate+0x2a>
	__asm volatile
200016c0:	f04f 0350 	mov.w	r3, #80	; 0x50
200016c4:	f383 8811 	msr	BASEPRI, r3
200016c8:	f3bf 8f6f 	isb	sy
200016cc:	f3bf 8f4f 	dsb	sy
200016d0:	613b      	str	r3, [r7, #16]
}
200016d2:	bf00      	nop
200016d4:	e7fe      	b.n	200016d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200016d6:	68fb      	ldr	r3, [r7, #12]
200016d8:	68ba      	ldr	r2, [r7, #8]
200016da:	fb02 f303 	mul.w	r3, r2, r3
200016de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
200016e0:	69fb      	ldr	r3, [r7, #28]
200016e2:	3350      	adds	r3, #80	; 0x50
200016e4:	4618      	mov	r0, r3
200016e6:	f002 fccf 	bl	20004088 <pvPortMalloc>
200016ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
200016ec:	69bb      	ldr	r3, [r7, #24]
200016ee:	2b00      	cmp	r3, #0
200016f0:	d011      	beq.n	20001716 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
200016f2:	69bb      	ldr	r3, [r7, #24]
200016f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
200016f6:	697b      	ldr	r3, [r7, #20]
200016f8:	3350      	adds	r3, #80	; 0x50
200016fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
200016fc:	69bb      	ldr	r3, [r7, #24]
200016fe:	2200      	movs	r2, #0
20001700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
20001704:	79fa      	ldrb	r2, [r7, #7]
20001706:	69bb      	ldr	r3, [r7, #24]
20001708:	9300      	str	r3, [sp, #0]
2000170a:	4613      	mov	r3, r2
2000170c:	697a      	ldr	r2, [r7, #20]
2000170e:	68b9      	ldr	r1, [r7, #8]
20001710:	68f8      	ldr	r0, [r7, #12]
20001712:	f000 f805 	bl	20001720 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
20001716:	69bb      	ldr	r3, [r7, #24]
	}
20001718:	4618      	mov	r0, r3
2000171a:	3720      	adds	r7, #32
2000171c:	46bd      	mov	sp, r7
2000171e:	bd80      	pop	{r7, pc}

20001720 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001720:	b580      	push	{r7, lr}
20001722:	b084      	sub	sp, #16
20001724:	af00      	add	r7, sp, #0
20001726:	60f8      	str	r0, [r7, #12]
20001728:	60b9      	str	r1, [r7, #8]
2000172a:	607a      	str	r2, [r7, #4]
2000172c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
2000172e:	68bb      	ldr	r3, [r7, #8]
20001730:	2b00      	cmp	r3, #0
20001732:	d103      	bne.n	2000173c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001734:	69bb      	ldr	r3, [r7, #24]
20001736:	69ba      	ldr	r2, [r7, #24]
20001738:	601a      	str	r2, [r3, #0]
2000173a:	e002      	b.n	20001742 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
2000173c:	69bb      	ldr	r3, [r7, #24]
2000173e:	687a      	ldr	r2, [r7, #4]
20001740:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001742:	69bb      	ldr	r3, [r7, #24]
20001744:	68fa      	ldr	r2, [r7, #12]
20001746:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20001748:	69bb      	ldr	r3, [r7, #24]
2000174a:	68ba      	ldr	r2, [r7, #8]
2000174c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
2000174e:	2101      	movs	r1, #1
20001750:	69b8      	ldr	r0, [r7, #24]
20001752:	f7ff fecb 	bl	200014ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
20001756:	69bb      	ldr	r3, [r7, #24]
20001758:	78fa      	ldrb	r2, [r7, #3]
2000175a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
2000175e:	bf00      	nop
20001760:	3710      	adds	r7, #16
20001762:	46bd      	mov	sp, r7
20001764:	bd80      	pop	{r7, pc}

20001766 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
20001766:	b580      	push	{r7, lr}
20001768:	b08a      	sub	sp, #40	; 0x28
2000176a:	af02      	add	r7, sp, #8
2000176c:	60f8      	str	r0, [r7, #12]
2000176e:	60b9      	str	r1, [r7, #8]
20001770:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
20001772:	68fb      	ldr	r3, [r7, #12]
20001774:	2b00      	cmp	r3, #0
20001776:	d10a      	bne.n	2000178e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
20001778:	f04f 0350 	mov.w	r3, #80	; 0x50
2000177c:	f383 8811 	msr	BASEPRI, r3
20001780:	f3bf 8f6f 	isb	sy
20001784:	f3bf 8f4f 	dsb	sy
20001788:	61bb      	str	r3, [r7, #24]
}
2000178a:	bf00      	nop
2000178c:	e7fe      	b.n	2000178c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
2000178e:	68ba      	ldr	r2, [r7, #8]
20001790:	68fb      	ldr	r3, [r7, #12]
20001792:	429a      	cmp	r2, r3
20001794:	d90a      	bls.n	200017ac <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
20001796:	f04f 0350 	mov.w	r3, #80	; 0x50
2000179a:	f383 8811 	msr	BASEPRI, r3
2000179e:	f3bf 8f6f 	isb	sy
200017a2:	f3bf 8f4f 	dsb	sy
200017a6:	617b      	str	r3, [r7, #20]
}
200017a8:	bf00      	nop
200017aa:	e7fe      	b.n	200017aa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
200017ac:	2302      	movs	r3, #2
200017ae:	9300      	str	r3, [sp, #0]
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	2200      	movs	r2, #0
200017b4:	2100      	movs	r1, #0
200017b6:	68f8      	ldr	r0, [r7, #12]
200017b8:	f7ff ff00 	bl	200015bc <xQueueGenericCreateStatic>
200017bc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
200017be:	69fb      	ldr	r3, [r7, #28]
200017c0:	2b00      	cmp	r3, #0
200017c2:	d002      	beq.n	200017ca <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
200017c4:	69fb      	ldr	r3, [r7, #28]
200017c6:	68ba      	ldr	r2, [r7, #8]
200017c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
200017ca:	69fb      	ldr	r3, [r7, #28]
	}
200017cc:	4618      	mov	r0, r3
200017ce:	3720      	adds	r7, #32
200017d0:	46bd      	mov	sp, r7
200017d2:	bd80      	pop	{r7, pc}

200017d4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
200017d4:	b580      	push	{r7, lr}
200017d6:	b086      	sub	sp, #24
200017d8:	af00      	add	r7, sp, #0
200017da:	6078      	str	r0, [r7, #4]
200017dc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
200017de:	687b      	ldr	r3, [r7, #4]
200017e0:	2b00      	cmp	r3, #0
200017e2:	d10a      	bne.n	200017fa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
200017e4:	f04f 0350 	mov.w	r3, #80	; 0x50
200017e8:	f383 8811 	msr	BASEPRI, r3
200017ec:	f3bf 8f6f 	isb	sy
200017f0:	f3bf 8f4f 	dsb	sy
200017f4:	613b      	str	r3, [r7, #16]
}
200017f6:	bf00      	nop
200017f8:	e7fe      	b.n	200017f8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
200017fa:	683a      	ldr	r2, [r7, #0]
200017fc:	687b      	ldr	r3, [r7, #4]
200017fe:	429a      	cmp	r2, r3
20001800:	d90a      	bls.n	20001818 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
20001802:	f04f 0350 	mov.w	r3, #80	; 0x50
20001806:	f383 8811 	msr	BASEPRI, r3
2000180a:	f3bf 8f6f 	isb	sy
2000180e:	f3bf 8f4f 	dsb	sy
20001812:	60fb      	str	r3, [r7, #12]
}
20001814:	bf00      	nop
20001816:	e7fe      	b.n	20001816 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001818:	2202      	movs	r2, #2
2000181a:	2100      	movs	r1, #0
2000181c:	6878      	ldr	r0, [r7, #4]
2000181e:	f7ff ff45 	bl	200016ac <xQueueGenericCreate>
20001822:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
20001824:	697b      	ldr	r3, [r7, #20]
20001826:	2b00      	cmp	r3, #0
20001828:	d002      	beq.n	20001830 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
2000182a:	697b      	ldr	r3, [r7, #20]
2000182c:	683a      	ldr	r2, [r7, #0]
2000182e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
20001830:	697b      	ldr	r3, [r7, #20]
	}
20001832:	4618      	mov	r0, r3
20001834:	3718      	adds	r7, #24
20001836:	46bd      	mov	sp, r7
20001838:	bd80      	pop	{r7, pc}
	...

2000183c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
2000183c:	b580      	push	{r7, lr}
2000183e:	b08e      	sub	sp, #56	; 0x38
20001840:	af00      	add	r7, sp, #0
20001842:	60f8      	str	r0, [r7, #12]
20001844:	60b9      	str	r1, [r7, #8]
20001846:	607a      	str	r2, [r7, #4]
20001848:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
2000184a:	2300      	movs	r3, #0
2000184c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
2000184e:	68fb      	ldr	r3, [r7, #12]
20001850:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
20001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001854:	2b00      	cmp	r3, #0
20001856:	d10a      	bne.n	2000186e <xQueueGenericSend+0x32>
	__asm volatile
20001858:	f04f 0350 	mov.w	r3, #80	; 0x50
2000185c:	f383 8811 	msr	BASEPRI, r3
20001860:	f3bf 8f6f 	isb	sy
20001864:	f3bf 8f4f 	dsb	sy
20001868:	62bb      	str	r3, [r7, #40]	; 0x28
}
2000186a:	bf00      	nop
2000186c:	e7fe      	b.n	2000186c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000186e:	68bb      	ldr	r3, [r7, #8]
20001870:	2b00      	cmp	r3, #0
20001872:	d103      	bne.n	2000187c <xQueueGenericSend+0x40>
20001874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001878:	2b00      	cmp	r3, #0
2000187a:	d101      	bne.n	20001880 <xQueueGenericSend+0x44>
2000187c:	2301      	movs	r3, #1
2000187e:	e000      	b.n	20001882 <xQueueGenericSend+0x46>
20001880:	2300      	movs	r3, #0
20001882:	2b00      	cmp	r3, #0
20001884:	d10a      	bne.n	2000189c <xQueueGenericSend+0x60>
	__asm volatile
20001886:	f04f 0350 	mov.w	r3, #80	; 0x50
2000188a:	f383 8811 	msr	BASEPRI, r3
2000188e:	f3bf 8f6f 	isb	sy
20001892:	f3bf 8f4f 	dsb	sy
20001896:	627b      	str	r3, [r7, #36]	; 0x24
}
20001898:	bf00      	nop
2000189a:	e7fe      	b.n	2000189a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
2000189c:	683b      	ldr	r3, [r7, #0]
2000189e:	2b02      	cmp	r3, #2
200018a0:	d103      	bne.n	200018aa <xQueueGenericSend+0x6e>
200018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200018a6:	2b01      	cmp	r3, #1
200018a8:	d101      	bne.n	200018ae <xQueueGenericSend+0x72>
200018aa:	2301      	movs	r3, #1
200018ac:	e000      	b.n	200018b0 <xQueueGenericSend+0x74>
200018ae:	2300      	movs	r3, #0
200018b0:	2b00      	cmp	r3, #0
200018b2:	d10a      	bne.n	200018ca <xQueueGenericSend+0x8e>
	__asm volatile
200018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
200018b8:	f383 8811 	msr	BASEPRI, r3
200018bc:	f3bf 8f6f 	isb	sy
200018c0:	f3bf 8f4f 	dsb	sy
200018c4:	623b      	str	r3, [r7, #32]
}
200018c6:	bf00      	nop
200018c8:	e7fe      	b.n	200018c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200018ca:	f001 fc65 	bl	20003198 <xTaskGetSchedulerState>
200018ce:	4603      	mov	r3, r0
200018d0:	2b00      	cmp	r3, #0
200018d2:	d102      	bne.n	200018da <xQueueGenericSend+0x9e>
200018d4:	687b      	ldr	r3, [r7, #4]
200018d6:	2b00      	cmp	r3, #0
200018d8:	d101      	bne.n	200018de <xQueueGenericSend+0xa2>
200018da:	2301      	movs	r3, #1
200018dc:	e000      	b.n	200018e0 <xQueueGenericSend+0xa4>
200018de:	2300      	movs	r3, #0
200018e0:	2b00      	cmp	r3, #0
200018e2:	d10a      	bne.n	200018fa <xQueueGenericSend+0xbe>
	__asm volatile
200018e4:	f04f 0350 	mov.w	r3, #80	; 0x50
200018e8:	f383 8811 	msr	BASEPRI, r3
200018ec:	f3bf 8f6f 	isb	sy
200018f0:	f3bf 8f4f 	dsb	sy
200018f4:	61fb      	str	r3, [r7, #28]
}
200018f6:	bf00      	nop
200018f8:	e7fe      	b.n	200018f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200018fa:	f002 faa3 	bl	20003e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200018fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001906:	429a      	cmp	r2, r3
20001908:	d302      	bcc.n	20001910 <xQueueGenericSend+0xd4>
2000190a:	683b      	ldr	r3, [r7, #0]
2000190c:	2b02      	cmp	r3, #2
2000190e:	d129      	bne.n	20001964 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001910:	683a      	ldr	r2, [r7, #0]
20001912:	68b9      	ldr	r1, [r7, #8]
20001914:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001916:	f000 fc5e 	bl	200021d6 <prvCopyDataToQueue>
2000191a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000191c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001920:	2b00      	cmp	r3, #0
20001922:	d010      	beq.n	20001946 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001926:	3324      	adds	r3, #36	; 0x24
20001928:	4618      	mov	r0, r3
2000192a:	f001 fa73 	bl	20002e14 <xTaskRemoveFromEventList>
2000192e:	4603      	mov	r3, r0
20001930:	2b00      	cmp	r3, #0
20001932:	d013      	beq.n	2000195c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001934:	4b3f      	ldr	r3, [pc, #252]	; (20001a34 <xQueueGenericSend+0x1f8>)
20001936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000193a:	601a      	str	r2, [r3, #0]
2000193c:	f3bf 8f4f 	dsb	sy
20001940:	f3bf 8f6f 	isb	sy
20001944:	e00a      	b.n	2000195c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001948:	2b00      	cmp	r3, #0
2000194a:	d007      	beq.n	2000195c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
2000194c:	4b39      	ldr	r3, [pc, #228]	; (20001a34 <xQueueGenericSend+0x1f8>)
2000194e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001952:	601a      	str	r2, [r3, #0]
20001954:	f3bf 8f4f 	dsb	sy
20001958:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
2000195c:	f002 faa2 	bl	20003ea4 <vPortExitCritical>
				return pdPASS;
20001960:	2301      	movs	r3, #1
20001962:	e063      	b.n	20001a2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001964:	687b      	ldr	r3, [r7, #4]
20001966:	2b00      	cmp	r3, #0
20001968:	d103      	bne.n	20001972 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
2000196a:	f002 fa9b 	bl	20003ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
2000196e:	2300      	movs	r3, #0
20001970:	e05c      	b.n	20001a2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
20001972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001974:	2b00      	cmp	r3, #0
20001976:	d106      	bne.n	20001986 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001978:	f107 0314 	add.w	r3, r7, #20
2000197c:	4618      	mov	r0, r3
2000197e:	f001 faad 	bl	20002edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001982:	2301      	movs	r3, #1
20001984:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001986:	f002 fa8d 	bl	20003ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
2000198a:	f001 f819 	bl	200029c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000198e:	f002 fa59 	bl	20003e44 <vPortEnterCritical>
20001992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001998:	b25b      	sxtb	r3, r3
2000199a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000199e:	d103      	bne.n	200019a8 <xQueueGenericSend+0x16c>
200019a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200019a2:	2200      	movs	r2, #0
200019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200019a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200019aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200019ae:	b25b      	sxtb	r3, r3
200019b0:	f1b3 3fff 	cmp.w	r3, #4294967295
200019b4:	d103      	bne.n	200019be <xQueueGenericSend+0x182>
200019b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200019b8:	2200      	movs	r2, #0
200019ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200019be:	f002 fa71 	bl	20003ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200019c2:	1d3a      	adds	r2, r7, #4
200019c4:	f107 0314 	add.w	r3, r7, #20
200019c8:	4611      	mov	r1, r2
200019ca:	4618      	mov	r0, r3
200019cc:	f001 fa9c 	bl	20002f08 <xTaskCheckForTimeOut>
200019d0:	4603      	mov	r3, r0
200019d2:	2b00      	cmp	r3, #0
200019d4:	d124      	bne.n	20001a20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200019d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
200019d8:	f000 fcf5 	bl	200023c6 <prvIsQueueFull>
200019dc:	4603      	mov	r3, r0
200019de:	2b00      	cmp	r3, #0
200019e0:	d018      	beq.n	20001a14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
200019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200019e4:	3310      	adds	r3, #16
200019e6:	687a      	ldr	r2, [r7, #4]
200019e8:	4611      	mov	r1, r2
200019ea:	4618      	mov	r0, r3
200019ec:	f001 f9c2 	bl	20002d74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
200019f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
200019f2:	f000 fc80 	bl	200022f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
200019f6:	f000 fff1 	bl	200029dc <xTaskResumeAll>
200019fa:	4603      	mov	r3, r0
200019fc:	2b00      	cmp	r3, #0
200019fe:	f47f af7c 	bne.w	200018fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
20001a02:	4b0c      	ldr	r3, [pc, #48]	; (20001a34 <xQueueGenericSend+0x1f8>)
20001a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001a08:	601a      	str	r2, [r3, #0]
20001a0a:	f3bf 8f4f 	dsb	sy
20001a0e:	f3bf 8f6f 	isb	sy
20001a12:	e772      	b.n	200018fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001a16:	f000 fc6e 	bl	200022f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001a1a:	f000 ffdf 	bl	200029dc <xTaskResumeAll>
20001a1e:	e76c      	b.n	200018fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
20001a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001a22:	f000 fc68 	bl	200022f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001a26:	f000 ffd9 	bl	200029dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001a2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
20001a2c:	4618      	mov	r0, r3
20001a2e:	3738      	adds	r7, #56	; 0x38
20001a30:	46bd      	mov	sp, r7
20001a32:	bd80      	pop	{r7, pc}
20001a34:	e000ed04 	.word	0xe000ed04

20001a38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001a38:	b580      	push	{r7, lr}
20001a3a:	b090      	sub	sp, #64	; 0x40
20001a3c:	af00      	add	r7, sp, #0
20001a3e:	60f8      	str	r0, [r7, #12]
20001a40:	60b9      	str	r1, [r7, #8]
20001a42:	607a      	str	r2, [r7, #4]
20001a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001a46:	68fb      	ldr	r3, [r7, #12]
20001a48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
20001a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001a4c:	2b00      	cmp	r3, #0
20001a4e:	d10a      	bne.n	20001a66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
20001a50:	f04f 0350 	mov.w	r3, #80	; 0x50
20001a54:	f383 8811 	msr	BASEPRI, r3
20001a58:	f3bf 8f6f 	isb	sy
20001a5c:	f3bf 8f4f 	dsb	sy
20001a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
20001a62:	bf00      	nop
20001a64:	e7fe      	b.n	20001a64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001a66:	68bb      	ldr	r3, [r7, #8]
20001a68:	2b00      	cmp	r3, #0
20001a6a:	d103      	bne.n	20001a74 <xQueueGenericSendFromISR+0x3c>
20001a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a70:	2b00      	cmp	r3, #0
20001a72:	d101      	bne.n	20001a78 <xQueueGenericSendFromISR+0x40>
20001a74:	2301      	movs	r3, #1
20001a76:	e000      	b.n	20001a7a <xQueueGenericSendFromISR+0x42>
20001a78:	2300      	movs	r3, #0
20001a7a:	2b00      	cmp	r3, #0
20001a7c:	d10a      	bne.n	20001a94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
20001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001a82:	f383 8811 	msr	BASEPRI, r3
20001a86:	f3bf 8f6f 	isb	sy
20001a8a:	f3bf 8f4f 	dsb	sy
20001a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
20001a90:	bf00      	nop
20001a92:	e7fe      	b.n	20001a92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001a94:	683b      	ldr	r3, [r7, #0]
20001a96:	2b02      	cmp	r3, #2
20001a98:	d103      	bne.n	20001aa2 <xQueueGenericSendFromISR+0x6a>
20001a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a9e:	2b01      	cmp	r3, #1
20001aa0:	d101      	bne.n	20001aa6 <xQueueGenericSendFromISR+0x6e>
20001aa2:	2301      	movs	r3, #1
20001aa4:	e000      	b.n	20001aa8 <xQueueGenericSendFromISR+0x70>
20001aa6:	2300      	movs	r3, #0
20001aa8:	2b00      	cmp	r3, #0
20001aaa:	d10a      	bne.n	20001ac2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
20001aac:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ab0:	f383 8811 	msr	BASEPRI, r3
20001ab4:	f3bf 8f6f 	isb	sy
20001ab8:	f3bf 8f4f 	dsb	sy
20001abc:	623b      	str	r3, [r7, #32]
}
20001abe:	bf00      	nop
20001ac0:	e7fe      	b.n	20001ac0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001ac2:	f002 faa1 	bl	20004008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001ac6:	f3ef 8211 	mrs	r2, BASEPRI
20001aca:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ace:	f383 8811 	msr	BASEPRI, r3
20001ad2:	f3bf 8f6f 	isb	sy
20001ad6:	f3bf 8f4f 	dsb	sy
20001ada:	61fa      	str	r2, [r7, #28]
20001adc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20001ade:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001ae0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001aea:	429a      	cmp	r2, r3
20001aec:	d302      	bcc.n	20001af4 <xQueueGenericSendFromISR+0xbc>
20001aee:	683b      	ldr	r3, [r7, #0]
20001af0:	2b02      	cmp	r3, #2
20001af2:	d12f      	bne.n	20001b54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
20001afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001b04:	683a      	ldr	r2, [r7, #0]
20001b06:	68b9      	ldr	r1, [r7, #8]
20001b08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001b0a:	f000 fb64 	bl	200021d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001b0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
20001b12:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b16:	d112      	bne.n	20001b3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001b1c:	2b00      	cmp	r3, #0
20001b1e:	d016      	beq.n	20001b4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001b22:	3324      	adds	r3, #36	; 0x24
20001b24:	4618      	mov	r0, r3
20001b26:	f001 f975 	bl	20002e14 <xTaskRemoveFromEventList>
20001b2a:	4603      	mov	r3, r0
20001b2c:	2b00      	cmp	r3, #0
20001b2e:	d00e      	beq.n	20001b4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001b30:	687b      	ldr	r3, [r7, #4]
20001b32:	2b00      	cmp	r3, #0
20001b34:	d00b      	beq.n	20001b4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001b36:	687b      	ldr	r3, [r7, #4]
20001b38:	2201      	movs	r2, #1
20001b3a:	601a      	str	r2, [r3, #0]
20001b3c:	e007      	b.n	20001b4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001b3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
20001b42:	3301      	adds	r3, #1
20001b44:	b2db      	uxtb	r3, r3
20001b46:	b25a      	sxtb	r2, r3
20001b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
20001b4e:	2301      	movs	r3, #1
20001b50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
20001b52:	e001      	b.n	20001b58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001b54:	2300      	movs	r3, #0
20001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
20001b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001b5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001b5c:	697b      	ldr	r3, [r7, #20]
20001b5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
20001b62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
20001b66:	4618      	mov	r0, r3
20001b68:	3740      	adds	r7, #64	; 0x40
20001b6a:	46bd      	mov	sp, r7
20001b6c:	bd80      	pop	{r7, pc}

20001b6e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
20001b6e:	b580      	push	{r7, lr}
20001b70:	b08e      	sub	sp, #56	; 0x38
20001b72:	af00      	add	r7, sp, #0
20001b74:	6078      	str	r0, [r7, #4]
20001b76:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001b78:	687b      	ldr	r3, [r7, #4]
20001b7a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
20001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001b7e:	2b00      	cmp	r3, #0
20001b80:	d10a      	bne.n	20001b98 <xQueueGiveFromISR+0x2a>
	__asm volatile
20001b82:	f04f 0350 	mov.w	r3, #80	; 0x50
20001b86:	f383 8811 	msr	BASEPRI, r3
20001b8a:	f3bf 8f6f 	isb	sy
20001b8e:	f3bf 8f4f 	dsb	sy
20001b92:	623b      	str	r3, [r7, #32]
}
20001b94:	bf00      	nop
20001b96:	e7fe      	b.n	20001b96 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
20001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001b9c:	2b00      	cmp	r3, #0
20001b9e:	d00a      	beq.n	20001bb6 <xQueueGiveFromISR+0x48>
	__asm volatile
20001ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ba4:	f383 8811 	msr	BASEPRI, r3
20001ba8:	f3bf 8f6f 	isb	sy
20001bac:	f3bf 8f4f 	dsb	sy
20001bb0:	61fb      	str	r3, [r7, #28]
}
20001bb2:	bf00      	nop
20001bb4:	e7fe      	b.n	20001bb4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
20001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001bb8:	681b      	ldr	r3, [r3, #0]
20001bba:	2b00      	cmp	r3, #0
20001bbc:	d103      	bne.n	20001bc6 <xQueueGiveFromISR+0x58>
20001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001bc0:	689b      	ldr	r3, [r3, #8]
20001bc2:	2b00      	cmp	r3, #0
20001bc4:	d101      	bne.n	20001bca <xQueueGiveFromISR+0x5c>
20001bc6:	2301      	movs	r3, #1
20001bc8:	e000      	b.n	20001bcc <xQueueGiveFromISR+0x5e>
20001bca:	2300      	movs	r3, #0
20001bcc:	2b00      	cmp	r3, #0
20001bce:	d10a      	bne.n	20001be6 <xQueueGiveFromISR+0x78>
	__asm volatile
20001bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
20001bd4:	f383 8811 	msr	BASEPRI, r3
20001bd8:	f3bf 8f6f 	isb	sy
20001bdc:	f3bf 8f4f 	dsb	sy
20001be0:	61bb      	str	r3, [r7, #24]
}
20001be2:	bf00      	nop
20001be4:	e7fe      	b.n	20001be4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001be6:	f002 fa0f 	bl	20004008 <vPortValidateInterruptPriority>
	__asm volatile
20001bea:	f3ef 8211 	mrs	r2, BASEPRI
20001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
20001bf2:	f383 8811 	msr	BASEPRI, r3
20001bf6:	f3bf 8f6f 	isb	sy
20001bfa:	f3bf 8f4f 	dsb	sy
20001bfe:	617a      	str	r2, [r7, #20]
20001c00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
20001c02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001c04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001c0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
20001c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001c12:	429a      	cmp	r2, r3
20001c14:	d22b      	bcs.n	20001c6e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001c22:	1c5a      	adds	r2, r3, #1
20001c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
20001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001c30:	d112      	bne.n	20001c58 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001c36:	2b00      	cmp	r3, #0
20001c38:	d016      	beq.n	20001c68 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c3c:	3324      	adds	r3, #36	; 0x24
20001c3e:	4618      	mov	r0, r3
20001c40:	f001 f8e8 	bl	20002e14 <xTaskRemoveFromEventList>
20001c44:	4603      	mov	r3, r0
20001c46:	2b00      	cmp	r3, #0
20001c48:	d00e      	beq.n	20001c68 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001c4a:	683b      	ldr	r3, [r7, #0]
20001c4c:	2b00      	cmp	r3, #0
20001c4e:	d00b      	beq.n	20001c68 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001c50:	683b      	ldr	r3, [r7, #0]
20001c52:	2201      	movs	r2, #1
20001c54:	601a      	str	r2, [r3, #0]
20001c56:	e007      	b.n	20001c68 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001c5c:	3301      	adds	r3, #1
20001c5e:	b2db      	uxtb	r3, r3
20001c60:	b25a      	sxtb	r2, r3
20001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
20001c68:	2301      	movs	r3, #1
20001c6a:	637b      	str	r3, [r7, #52]	; 0x34
20001c6c:	e001      	b.n	20001c72 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001c6e:	2300      	movs	r3, #0
20001c70:	637b      	str	r3, [r7, #52]	; 0x34
20001c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001c74:	60fb      	str	r3, [r7, #12]
	__asm volatile
20001c76:	68fb      	ldr	r3, [r7, #12]
20001c78:	f383 8811 	msr	BASEPRI, r3
}
20001c7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
20001c80:	4618      	mov	r0, r3
20001c82:	3738      	adds	r7, #56	; 0x38
20001c84:	46bd      	mov	sp, r7
20001c86:	bd80      	pop	{r7, pc}

20001c88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
20001c88:	b580      	push	{r7, lr}
20001c8a:	b08c      	sub	sp, #48	; 0x30
20001c8c:	af00      	add	r7, sp, #0
20001c8e:	60f8      	str	r0, [r7, #12]
20001c90:	60b9      	str	r1, [r7, #8]
20001c92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
20001c94:	2300      	movs	r3, #0
20001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001c98:	68fb      	ldr	r3, [r7, #12]
20001c9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
20001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001c9e:	2b00      	cmp	r3, #0
20001ca0:	d10a      	bne.n	20001cb8 <xQueueReceive+0x30>
	__asm volatile
20001ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ca6:	f383 8811 	msr	BASEPRI, r3
20001caa:	f3bf 8f6f 	isb	sy
20001cae:	f3bf 8f4f 	dsb	sy
20001cb2:	623b      	str	r3, [r7, #32]
}
20001cb4:	bf00      	nop
20001cb6:	e7fe      	b.n	20001cb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001cb8:	68bb      	ldr	r3, [r7, #8]
20001cba:	2b00      	cmp	r3, #0
20001cbc:	d103      	bne.n	20001cc6 <xQueueReceive+0x3e>
20001cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001cc2:	2b00      	cmp	r3, #0
20001cc4:	d101      	bne.n	20001cca <xQueueReceive+0x42>
20001cc6:	2301      	movs	r3, #1
20001cc8:	e000      	b.n	20001ccc <xQueueReceive+0x44>
20001cca:	2300      	movs	r3, #0
20001ccc:	2b00      	cmp	r3, #0
20001cce:	d10a      	bne.n	20001ce6 <xQueueReceive+0x5e>
	__asm volatile
20001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
20001cd4:	f383 8811 	msr	BASEPRI, r3
20001cd8:	f3bf 8f6f 	isb	sy
20001cdc:	f3bf 8f4f 	dsb	sy
20001ce0:	61fb      	str	r3, [r7, #28]
}
20001ce2:	bf00      	nop
20001ce4:	e7fe      	b.n	20001ce4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001ce6:	f001 fa57 	bl	20003198 <xTaskGetSchedulerState>
20001cea:	4603      	mov	r3, r0
20001cec:	2b00      	cmp	r3, #0
20001cee:	d102      	bne.n	20001cf6 <xQueueReceive+0x6e>
20001cf0:	687b      	ldr	r3, [r7, #4]
20001cf2:	2b00      	cmp	r3, #0
20001cf4:	d101      	bne.n	20001cfa <xQueueReceive+0x72>
20001cf6:	2301      	movs	r3, #1
20001cf8:	e000      	b.n	20001cfc <xQueueReceive+0x74>
20001cfa:	2300      	movs	r3, #0
20001cfc:	2b00      	cmp	r3, #0
20001cfe:	d10a      	bne.n	20001d16 <xQueueReceive+0x8e>
	__asm volatile
20001d00:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d04:	f383 8811 	msr	BASEPRI, r3
20001d08:	f3bf 8f6f 	isb	sy
20001d0c:	f3bf 8f4f 	dsb	sy
20001d10:	61bb      	str	r3, [r7, #24]
}
20001d12:	bf00      	nop
20001d14:	e7fe      	b.n	20001d14 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001d16:	f002 f895 	bl	20003e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001d1e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d22:	2b00      	cmp	r3, #0
20001d24:	d01f      	beq.n	20001d66 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001d26:	68b9      	ldr	r1, [r7, #8]
20001d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001d2a:	f000 fabe 	bl	200022aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
20001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001d30:	1e5a      	subs	r2, r3, #1
20001d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d34:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d38:	691b      	ldr	r3, [r3, #16]
20001d3a:	2b00      	cmp	r3, #0
20001d3c:	d00f      	beq.n	20001d5e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d40:	3310      	adds	r3, #16
20001d42:	4618      	mov	r0, r3
20001d44:	f001 f866 	bl	20002e14 <xTaskRemoveFromEventList>
20001d48:	4603      	mov	r3, r0
20001d4a:	2b00      	cmp	r3, #0
20001d4c:	d007      	beq.n	20001d5e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
20001d4e:	4b3d      	ldr	r3, [pc, #244]	; (20001e44 <xQueueReceive+0x1bc>)
20001d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001d54:	601a      	str	r2, [r3, #0]
20001d56:	f3bf 8f4f 	dsb	sy
20001d5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
20001d5e:	f002 f8a1 	bl	20003ea4 <vPortExitCritical>
				return pdPASS;
20001d62:	2301      	movs	r3, #1
20001d64:	e069      	b.n	20001e3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001d66:	687b      	ldr	r3, [r7, #4]
20001d68:	2b00      	cmp	r3, #0
20001d6a:	d103      	bne.n	20001d74 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001d6c:	f002 f89a 	bl	20003ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001d70:	2300      	movs	r3, #0
20001d72:	e062      	b.n	20001e3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
20001d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d76:	2b00      	cmp	r3, #0
20001d78:	d106      	bne.n	20001d88 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001d7a:	f107 0310 	add.w	r3, r7, #16
20001d7e:	4618      	mov	r0, r3
20001d80:	f001 f8ac 	bl	20002edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001d84:	2301      	movs	r3, #1
20001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001d88:	f002 f88c 	bl	20003ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001d8c:	f000 fe18 	bl	200029c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001d90:	f002 f858 	bl	20003e44 <vPortEnterCritical>
20001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001d9a:	b25b      	sxtb	r3, r3
20001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001da0:	d103      	bne.n	20001daa <xQueueReceive+0x122>
20001da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001da4:	2200      	movs	r2, #0
20001da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001db0:	b25b      	sxtb	r3, r3
20001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
20001db6:	d103      	bne.n	20001dc0 <xQueueReceive+0x138>
20001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001dba:	2200      	movs	r2, #0
20001dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001dc0:	f002 f870 	bl	20003ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001dc4:	1d3a      	adds	r2, r7, #4
20001dc6:	f107 0310 	add.w	r3, r7, #16
20001dca:	4611      	mov	r1, r2
20001dcc:	4618      	mov	r0, r3
20001dce:	f001 f89b 	bl	20002f08 <xTaskCheckForTimeOut>
20001dd2:	4603      	mov	r3, r0
20001dd4:	2b00      	cmp	r3, #0
20001dd6:	d123      	bne.n	20001e20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001dda:	f000 fade 	bl	2000239a <prvIsQueueEmpty>
20001dde:	4603      	mov	r3, r0
20001de0:	2b00      	cmp	r3, #0
20001de2:	d017      	beq.n	20001e14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001de6:	3324      	adds	r3, #36	; 0x24
20001de8:	687a      	ldr	r2, [r7, #4]
20001dea:	4611      	mov	r1, r2
20001dec:	4618      	mov	r0, r3
20001dee:	f000 ffc1 	bl	20002d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001df4:	f000 fa7f 	bl	200022f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001df8:	f000 fdf0 	bl	200029dc <xTaskResumeAll>
20001dfc:	4603      	mov	r3, r0
20001dfe:	2b00      	cmp	r3, #0
20001e00:	d189      	bne.n	20001d16 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
20001e02:	4b10      	ldr	r3, [pc, #64]	; (20001e44 <xQueueReceive+0x1bc>)
20001e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001e08:	601a      	str	r2, [r3, #0]
20001e0a:	f3bf 8f4f 	dsb	sy
20001e0e:	f3bf 8f6f 	isb	sy
20001e12:	e780      	b.n	20001d16 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
20001e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001e16:	f000 fa6e 	bl	200022f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001e1a:	f000 fddf 	bl	200029dc <xTaskResumeAll>
20001e1e:	e77a      	b.n	20001d16 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
20001e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001e22:	f000 fa68 	bl	200022f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001e26:	f000 fdd9 	bl	200029dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001e2c:	f000 fab5 	bl	2000239a <prvIsQueueEmpty>
20001e30:	4603      	mov	r3, r0
20001e32:	2b00      	cmp	r3, #0
20001e34:	f43f af6f 	beq.w	20001d16 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001e38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
20001e3a:	4618      	mov	r0, r3
20001e3c:	3730      	adds	r7, #48	; 0x30
20001e3e:	46bd      	mov	sp, r7
20001e40:	bd80      	pop	{r7, pc}
20001e42:	bf00      	nop
20001e44:	e000ed04 	.word	0xe000ed04

20001e48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
20001e48:	b580      	push	{r7, lr}
20001e4a:	b08e      	sub	sp, #56	; 0x38
20001e4c:	af00      	add	r7, sp, #0
20001e4e:	6078      	str	r0, [r7, #4]
20001e50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001e52:	2300      	movs	r3, #0
20001e54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001e56:	687b      	ldr	r3, [r7, #4]
20001e58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
20001e5a:	2300      	movs	r3, #0
20001e5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
20001e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001e60:	2b00      	cmp	r3, #0
20001e62:	d10a      	bne.n	20001e7a <xQueueSemaphoreTake+0x32>
	__asm volatile
20001e64:	f04f 0350 	mov.w	r3, #80	; 0x50
20001e68:	f383 8811 	msr	BASEPRI, r3
20001e6c:	f3bf 8f6f 	isb	sy
20001e70:	f3bf 8f4f 	dsb	sy
20001e74:	623b      	str	r3, [r7, #32]
}
20001e76:	bf00      	nop
20001e78:	e7fe      	b.n	20001e78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
20001e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e7e:	2b00      	cmp	r3, #0
20001e80:	d00a      	beq.n	20001e98 <xQueueSemaphoreTake+0x50>
	__asm volatile
20001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
20001e86:	f383 8811 	msr	BASEPRI, r3
20001e8a:	f3bf 8f6f 	isb	sy
20001e8e:	f3bf 8f4f 	dsb	sy
20001e92:	61fb      	str	r3, [r7, #28]
}
20001e94:	bf00      	nop
20001e96:	e7fe      	b.n	20001e96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001e98:	f001 f97e 	bl	20003198 <xTaskGetSchedulerState>
20001e9c:	4603      	mov	r3, r0
20001e9e:	2b00      	cmp	r3, #0
20001ea0:	d102      	bne.n	20001ea8 <xQueueSemaphoreTake+0x60>
20001ea2:	683b      	ldr	r3, [r7, #0]
20001ea4:	2b00      	cmp	r3, #0
20001ea6:	d101      	bne.n	20001eac <xQueueSemaphoreTake+0x64>
20001ea8:	2301      	movs	r3, #1
20001eaa:	e000      	b.n	20001eae <xQueueSemaphoreTake+0x66>
20001eac:	2300      	movs	r3, #0
20001eae:	2b00      	cmp	r3, #0
20001eb0:	d10a      	bne.n	20001ec8 <xQueueSemaphoreTake+0x80>
	__asm volatile
20001eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
20001eb6:	f383 8811 	msr	BASEPRI, r3
20001eba:	f3bf 8f6f 	isb	sy
20001ebe:	f3bf 8f4f 	dsb	sy
20001ec2:	61bb      	str	r3, [r7, #24]
}
20001ec4:	bf00      	nop
20001ec6:	e7fe      	b.n	20001ec6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001ec8:	f001 ffbc 	bl	20003e44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
20001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001ed0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
20001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001ed4:	2b00      	cmp	r3, #0
20001ed6:	d024      	beq.n	20001f22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
20001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001eda:	1e5a      	subs	r2, r3, #1
20001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ede:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ee2:	681b      	ldr	r3, [r3, #0]
20001ee4:	2b00      	cmp	r3, #0
20001ee6:	d104      	bne.n	20001ef2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
20001ee8:	f001 facc 	bl	20003484 <pvTaskIncrementMutexHeldCount>
20001eec:	4602      	mov	r2, r0
20001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ef0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ef4:	691b      	ldr	r3, [r3, #16]
20001ef6:	2b00      	cmp	r3, #0
20001ef8:	d00f      	beq.n	20001f1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001efc:	3310      	adds	r3, #16
20001efe:	4618      	mov	r0, r3
20001f00:	f000 ff88 	bl	20002e14 <xTaskRemoveFromEventList>
20001f04:	4603      	mov	r3, r0
20001f06:	2b00      	cmp	r3, #0
20001f08:	d007      	beq.n	20001f1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
20001f0a:	4b54      	ldr	r3, [pc, #336]	; (2000205c <xQueueSemaphoreTake+0x214>)
20001f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001f10:	601a      	str	r2, [r3, #0]
20001f12:	f3bf 8f4f 	dsb	sy
20001f16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
20001f1a:	f001 ffc3 	bl	20003ea4 <vPortExitCritical>
				return pdPASS;
20001f1e:	2301      	movs	r3, #1
20001f20:	e097      	b.n	20002052 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001f22:	683b      	ldr	r3, [r7, #0]
20001f24:	2b00      	cmp	r3, #0
20001f26:	d111      	bne.n	20001f4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
20001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001f2a:	2b00      	cmp	r3, #0
20001f2c:	d00a      	beq.n	20001f44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
20001f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001f32:	f383 8811 	msr	BASEPRI, r3
20001f36:	f3bf 8f6f 	isb	sy
20001f3a:	f3bf 8f4f 	dsb	sy
20001f3e:	617b      	str	r3, [r7, #20]
}
20001f40:	bf00      	nop
20001f42:	e7fe      	b.n	20001f42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
20001f44:	f001 ffae 	bl	20003ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001f48:	2300      	movs	r3, #0
20001f4a:	e082      	b.n	20002052 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
20001f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001f4e:	2b00      	cmp	r3, #0
20001f50:	d106      	bne.n	20001f60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001f52:	f107 030c 	add.w	r3, r7, #12
20001f56:	4618      	mov	r0, r3
20001f58:	f000 ffc0 	bl	20002edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001f5c:	2301      	movs	r3, #1
20001f5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001f60:	f001 ffa0 	bl	20003ea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
20001f64:	f000 fd2c 	bl	200029c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001f68:	f001 ff6c 	bl	20003e44 <vPortEnterCritical>
20001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001f72:	b25b      	sxtb	r3, r3
20001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f78:	d103      	bne.n	20001f82 <xQueueSemaphoreTake+0x13a>
20001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f7c:	2200      	movs	r2, #0
20001f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001f88:	b25b      	sxtb	r3, r3
20001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f8e:	d103      	bne.n	20001f98 <xQueueSemaphoreTake+0x150>
20001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f92:	2200      	movs	r2, #0
20001f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001f98:	f001 ff84 	bl	20003ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001f9c:	463a      	mov	r2, r7
20001f9e:	f107 030c 	add.w	r3, r7, #12
20001fa2:	4611      	mov	r1, r2
20001fa4:	4618      	mov	r0, r3
20001fa6:	f000 ffaf 	bl	20002f08 <xTaskCheckForTimeOut>
20001faa:	4603      	mov	r3, r0
20001fac:	2b00      	cmp	r3, #0
20001fae:	d132      	bne.n	20002016 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001fb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001fb2:	f000 f9f2 	bl	2000239a <prvIsQueueEmpty>
20001fb6:	4603      	mov	r3, r0
20001fb8:	2b00      	cmp	r3, #0
20001fba:	d026      	beq.n	2000200a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001fbe:	681b      	ldr	r3, [r3, #0]
20001fc0:	2b00      	cmp	r3, #0
20001fc2:	d109      	bne.n	20001fd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
20001fc4:	f001 ff3e 	bl	20003e44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
20001fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001fca:	689b      	ldr	r3, [r3, #8]
20001fcc:	4618      	mov	r0, r3
20001fce:	f001 f901 	bl	200031d4 <xTaskPriorityInherit>
20001fd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
20001fd4:	f001 ff66 	bl	20003ea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001fda:	3324      	adds	r3, #36	; 0x24
20001fdc:	683a      	ldr	r2, [r7, #0]
20001fde:	4611      	mov	r1, r2
20001fe0:	4618      	mov	r0, r3
20001fe2:	f000 fec7 	bl	20002d74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001fe8:	f000 f985 	bl	200022f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001fec:	f000 fcf6 	bl	200029dc <xTaskResumeAll>
20001ff0:	4603      	mov	r3, r0
20001ff2:	2b00      	cmp	r3, #0
20001ff4:	f47f af68 	bne.w	20001ec8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
20001ff8:	4b18      	ldr	r3, [pc, #96]	; (2000205c <xQueueSemaphoreTake+0x214>)
20001ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001ffe:	601a      	str	r2, [r3, #0]
20002000:	f3bf 8f4f 	dsb	sy
20002004:	f3bf 8f6f 	isb	sy
20002008:	e75e      	b.n	20001ec8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
2000200a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000200c:	f000 f973 	bl	200022f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20002010:	f000 fce4 	bl	200029dc <xTaskResumeAll>
20002014:	e758      	b.n	20001ec8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
20002016:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20002018:	f000 f96d 	bl	200022f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
2000201c:	f000 fcde 	bl	200029dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20002020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20002022:	f000 f9ba 	bl	2000239a <prvIsQueueEmpty>
20002026:	4603      	mov	r3, r0
20002028:	2b00      	cmp	r3, #0
2000202a:	f43f af4d 	beq.w	20001ec8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
2000202e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002030:	2b00      	cmp	r3, #0
20002032:	d00d      	beq.n	20002050 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
20002034:	f001 ff06 	bl	20003e44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
20002038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
2000203a:	f000 f8b4 	bl	200021a6 <prvGetDisinheritPriorityAfterTimeout>
2000203e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
20002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002042:	689b      	ldr	r3, [r3, #8]
20002044:	6a79      	ldr	r1, [r7, #36]	; 0x24
20002046:	4618      	mov	r0, r3
20002048:	f001 f99a 	bl	20003380 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
2000204c:	f001 ff2a 	bl	20003ea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20002050:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
20002052:	4618      	mov	r0, r3
20002054:	3738      	adds	r7, #56	; 0x38
20002056:	46bd      	mov	sp, r7
20002058:	bd80      	pop	{r7, pc}
2000205a:	bf00      	nop
2000205c:	e000ed04 	.word	0xe000ed04

20002060 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
20002060:	b580      	push	{r7, lr}
20002062:	b08e      	sub	sp, #56	; 0x38
20002064:	af00      	add	r7, sp, #0
20002066:	60f8      	str	r0, [r7, #12]
20002068:	60b9      	str	r1, [r7, #8]
2000206a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
2000206c:	68fb      	ldr	r3, [r7, #12]
2000206e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
20002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002072:	2b00      	cmp	r3, #0
20002074:	d10a      	bne.n	2000208c <xQueueReceiveFromISR+0x2c>
	__asm volatile
20002076:	f04f 0350 	mov.w	r3, #80	; 0x50
2000207a:	f383 8811 	msr	BASEPRI, r3
2000207e:	f3bf 8f6f 	isb	sy
20002082:	f3bf 8f4f 	dsb	sy
20002086:	623b      	str	r3, [r7, #32]
}
20002088:	bf00      	nop
2000208a:	e7fe      	b.n	2000208a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000208c:	68bb      	ldr	r3, [r7, #8]
2000208e:	2b00      	cmp	r3, #0
20002090:	d103      	bne.n	2000209a <xQueueReceiveFromISR+0x3a>
20002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002096:	2b00      	cmp	r3, #0
20002098:	d101      	bne.n	2000209e <xQueueReceiveFromISR+0x3e>
2000209a:	2301      	movs	r3, #1
2000209c:	e000      	b.n	200020a0 <xQueueReceiveFromISR+0x40>
2000209e:	2300      	movs	r3, #0
200020a0:	2b00      	cmp	r3, #0
200020a2:	d10a      	bne.n	200020ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
200020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
200020a8:	f383 8811 	msr	BASEPRI, r3
200020ac:	f3bf 8f6f 	isb	sy
200020b0:	f3bf 8f4f 	dsb	sy
200020b4:	61fb      	str	r3, [r7, #28]
}
200020b6:	bf00      	nop
200020b8:	e7fe      	b.n	200020b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200020ba:	f001 ffa5 	bl	20004008 <vPortValidateInterruptPriority>
	__asm volatile
200020be:	f3ef 8211 	mrs	r2, BASEPRI
200020c2:	f04f 0350 	mov.w	r3, #80	; 0x50
200020c6:	f383 8811 	msr	BASEPRI, r3
200020ca:	f3bf 8f6f 	isb	sy
200020ce:	f3bf 8f4f 	dsb	sy
200020d2:	61ba      	str	r2, [r7, #24]
200020d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
200020d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
200020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200020de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200020e2:	2b00      	cmp	r3, #0
200020e4:	d02f      	beq.n	20002146 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
200020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200020ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
200020f0:	68b9      	ldr	r1, [r7, #8]
200020f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
200020f4:	f000 f8d9 	bl	200022aa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
200020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200020fa:	1e5a      	subs	r2, r3, #1
200020fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200020fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
20002100:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
20002104:	f1b3 3fff 	cmp.w	r3, #4294967295
20002108:	d112      	bne.n	20002130 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2000210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000210c:	691b      	ldr	r3, [r3, #16]
2000210e:	2b00      	cmp	r3, #0
20002110:	d016      	beq.n	20002140 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002114:	3310      	adds	r3, #16
20002116:	4618      	mov	r0, r3
20002118:	f000 fe7c 	bl	20002e14 <xTaskRemoveFromEventList>
2000211c:	4603      	mov	r3, r0
2000211e:	2b00      	cmp	r3, #0
20002120:	d00e      	beq.n	20002140 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
20002122:	687b      	ldr	r3, [r7, #4]
20002124:	2b00      	cmp	r3, #0
20002126:	d00b      	beq.n	20002140 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
20002128:	687b      	ldr	r3, [r7, #4]
2000212a:	2201      	movs	r2, #1
2000212c:	601a      	str	r2, [r3, #0]
2000212e:	e007      	b.n	20002140 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
20002130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20002134:	3301      	adds	r3, #1
20002136:	b2db      	uxtb	r3, r3
20002138:	b25a      	sxtb	r2, r3
2000213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000213c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
20002140:	2301      	movs	r3, #1
20002142:	637b      	str	r3, [r7, #52]	; 0x34
20002144:	e001      	b.n	2000214a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
20002146:	2300      	movs	r3, #0
20002148:	637b      	str	r3, [r7, #52]	; 0x34
2000214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000214c:	613b      	str	r3, [r7, #16]
	__asm volatile
2000214e:	693b      	ldr	r3, [r7, #16]
20002150:	f383 8811 	msr	BASEPRI, r3
}
20002154:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20002156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
20002158:	4618      	mov	r0, r3
2000215a:	3738      	adds	r7, #56	; 0x38
2000215c:	46bd      	mov	sp, r7
2000215e:	bd80      	pop	{r7, pc}

20002160 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
20002160:	b580      	push	{r7, lr}
20002162:	b084      	sub	sp, #16
20002164:	af00      	add	r7, sp, #0
20002166:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
20002168:	687b      	ldr	r3, [r7, #4]
2000216a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
2000216c:	68fb      	ldr	r3, [r7, #12]
2000216e:	2b00      	cmp	r3, #0
20002170:	d10a      	bne.n	20002188 <vQueueDelete+0x28>
	__asm volatile
20002172:	f04f 0350 	mov.w	r3, #80	; 0x50
20002176:	f383 8811 	msr	BASEPRI, r3
2000217a:	f3bf 8f6f 	isb	sy
2000217e:	f3bf 8f4f 	dsb	sy
20002182:	60bb      	str	r3, [r7, #8]
}
20002184:	bf00      	nop
20002186:	e7fe      	b.n	20002186 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
20002188:	68f8      	ldr	r0, [r7, #12]
2000218a:	f000 f95f 	bl	2000244c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2000218e:	68fb      	ldr	r3, [r7, #12]
20002190:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
20002194:	2b00      	cmp	r3, #0
20002196:	d102      	bne.n	2000219e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
20002198:	68f8      	ldr	r0, [r7, #12]
2000219a:	f002 f841 	bl	20004220 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
2000219e:	bf00      	nop
200021a0:	3710      	adds	r7, #16
200021a2:	46bd      	mov	sp, r7
200021a4:	bd80      	pop	{r7, pc}

200021a6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
200021a6:	b480      	push	{r7}
200021a8:	b085      	sub	sp, #20
200021aa:	af00      	add	r7, sp, #0
200021ac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
200021ae:	687b      	ldr	r3, [r7, #4]
200021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200021b2:	2b00      	cmp	r3, #0
200021b4:	d006      	beq.n	200021c4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
200021b6:	687b      	ldr	r3, [r7, #4]
200021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200021ba:	681b      	ldr	r3, [r3, #0]
200021bc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
200021c0:	60fb      	str	r3, [r7, #12]
200021c2:	e001      	b.n	200021c8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
200021c4:	2300      	movs	r3, #0
200021c6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
200021c8:	68fb      	ldr	r3, [r7, #12]
	}
200021ca:	4618      	mov	r0, r3
200021cc:	3714      	adds	r7, #20
200021ce:	46bd      	mov	sp, r7
200021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200021d4:	4770      	bx	lr

200021d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
200021d6:	b580      	push	{r7, lr}
200021d8:	b086      	sub	sp, #24
200021da:	af00      	add	r7, sp, #0
200021dc:	60f8      	str	r0, [r7, #12]
200021de:	60b9      	str	r1, [r7, #8]
200021e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
200021e2:	2300      	movs	r3, #0
200021e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
200021e6:	68fb      	ldr	r3, [r7, #12]
200021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200021ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
200021ec:	68fb      	ldr	r3, [r7, #12]
200021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200021f0:	2b00      	cmp	r3, #0
200021f2:	d10d      	bne.n	20002210 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
200021f4:	68fb      	ldr	r3, [r7, #12]
200021f6:	681b      	ldr	r3, [r3, #0]
200021f8:	2b00      	cmp	r3, #0
200021fa:	d14d      	bne.n	20002298 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
200021fc:	68fb      	ldr	r3, [r7, #12]
200021fe:	689b      	ldr	r3, [r3, #8]
20002200:	4618      	mov	r0, r3
20002202:	f001 f84f 	bl	200032a4 <xTaskPriorityDisinherit>
20002206:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
20002208:	68fb      	ldr	r3, [r7, #12]
2000220a:	2200      	movs	r2, #0
2000220c:	609a      	str	r2, [r3, #8]
2000220e:	e043      	b.n	20002298 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20002210:	687b      	ldr	r3, [r7, #4]
20002212:	2b00      	cmp	r3, #0
20002214:	d119      	bne.n	2000224a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
20002216:	68fb      	ldr	r3, [r7, #12]
20002218:	6858      	ldr	r0, [r3, #4]
2000221a:	68fb      	ldr	r3, [r7, #12]
2000221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000221e:	461a      	mov	r2, r3
20002220:	68b9      	ldr	r1, [r7, #8]
20002222:	f004 fccd 	bl	20006bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20002226:	68fb      	ldr	r3, [r7, #12]
20002228:	685a      	ldr	r2, [r3, #4]
2000222a:	68fb      	ldr	r3, [r7, #12]
2000222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000222e:	441a      	add	r2, r3
20002230:	68fb      	ldr	r3, [r7, #12]
20002232:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20002234:	68fb      	ldr	r3, [r7, #12]
20002236:	685a      	ldr	r2, [r3, #4]
20002238:	68fb      	ldr	r3, [r7, #12]
2000223a:	689b      	ldr	r3, [r3, #8]
2000223c:	429a      	cmp	r2, r3
2000223e:	d32b      	bcc.n	20002298 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20002240:	68fb      	ldr	r3, [r7, #12]
20002242:	681a      	ldr	r2, [r3, #0]
20002244:	68fb      	ldr	r3, [r7, #12]
20002246:	605a      	str	r2, [r3, #4]
20002248:	e026      	b.n	20002298 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
2000224a:	68fb      	ldr	r3, [r7, #12]
2000224c:	68d8      	ldr	r0, [r3, #12]
2000224e:	68fb      	ldr	r3, [r7, #12]
20002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002252:	461a      	mov	r2, r3
20002254:	68b9      	ldr	r1, [r7, #8]
20002256:	f004 fcb3 	bl	20006bc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
2000225a:	68fb      	ldr	r3, [r7, #12]
2000225c:	68da      	ldr	r2, [r3, #12]
2000225e:	68fb      	ldr	r3, [r7, #12]
20002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002262:	425b      	negs	r3, r3
20002264:	441a      	add	r2, r3
20002266:	68fb      	ldr	r3, [r7, #12]
20002268:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
2000226a:	68fb      	ldr	r3, [r7, #12]
2000226c:	68da      	ldr	r2, [r3, #12]
2000226e:	68fb      	ldr	r3, [r7, #12]
20002270:	681b      	ldr	r3, [r3, #0]
20002272:	429a      	cmp	r2, r3
20002274:	d207      	bcs.n	20002286 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
20002276:	68fb      	ldr	r3, [r7, #12]
20002278:	689a      	ldr	r2, [r3, #8]
2000227a:	68fb      	ldr	r3, [r7, #12]
2000227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000227e:	425b      	negs	r3, r3
20002280:	441a      	add	r2, r3
20002282:	68fb      	ldr	r3, [r7, #12]
20002284:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20002286:	687b      	ldr	r3, [r7, #4]
20002288:	2b02      	cmp	r3, #2
2000228a:	d105      	bne.n	20002298 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2000228c:	693b      	ldr	r3, [r7, #16]
2000228e:	2b00      	cmp	r3, #0
20002290:	d002      	beq.n	20002298 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20002292:	693b      	ldr	r3, [r7, #16]
20002294:	3b01      	subs	r3, #1
20002296:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20002298:	693b      	ldr	r3, [r7, #16]
2000229a:	1c5a      	adds	r2, r3, #1
2000229c:	68fb      	ldr	r3, [r7, #12]
2000229e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
200022a0:	697b      	ldr	r3, [r7, #20]
}
200022a2:	4618      	mov	r0, r3
200022a4:	3718      	adds	r7, #24
200022a6:	46bd      	mov	sp, r7
200022a8:	bd80      	pop	{r7, pc}

200022aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
200022aa:	b580      	push	{r7, lr}
200022ac:	b082      	sub	sp, #8
200022ae:	af00      	add	r7, sp, #0
200022b0:	6078      	str	r0, [r7, #4]
200022b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
200022b4:	687b      	ldr	r3, [r7, #4]
200022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022b8:	2b00      	cmp	r3, #0
200022ba:	d018      	beq.n	200022ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
200022bc:	687b      	ldr	r3, [r7, #4]
200022be:	68da      	ldr	r2, [r3, #12]
200022c0:	687b      	ldr	r3, [r7, #4]
200022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022c4:	441a      	add	r2, r3
200022c6:	687b      	ldr	r3, [r7, #4]
200022c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
200022ca:	687b      	ldr	r3, [r7, #4]
200022cc:	68da      	ldr	r2, [r3, #12]
200022ce:	687b      	ldr	r3, [r7, #4]
200022d0:	689b      	ldr	r3, [r3, #8]
200022d2:	429a      	cmp	r2, r3
200022d4:	d303      	bcc.n	200022de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
200022d6:	687b      	ldr	r3, [r7, #4]
200022d8:	681a      	ldr	r2, [r3, #0]
200022da:	687b      	ldr	r3, [r7, #4]
200022dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
200022de:	687b      	ldr	r3, [r7, #4]
200022e0:	68d9      	ldr	r1, [r3, #12]
200022e2:	687b      	ldr	r3, [r7, #4]
200022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200022e6:	461a      	mov	r2, r3
200022e8:	6838      	ldr	r0, [r7, #0]
200022ea:	f004 fc69 	bl	20006bc0 <memcpy>
	}
}
200022ee:	bf00      	nop
200022f0:	3708      	adds	r7, #8
200022f2:	46bd      	mov	sp, r7
200022f4:	bd80      	pop	{r7, pc}

200022f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
200022f6:	b580      	push	{r7, lr}
200022f8:	b084      	sub	sp, #16
200022fa:	af00      	add	r7, sp, #0
200022fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
200022fe:	f001 fda1 	bl	20003e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20002302:	687b      	ldr	r3, [r7, #4]
20002304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20002308:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
2000230a:	e011      	b.n	20002330 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000230c:	687b      	ldr	r3, [r7, #4]
2000230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002310:	2b00      	cmp	r3, #0
20002312:	d012      	beq.n	2000233a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20002314:	687b      	ldr	r3, [r7, #4]
20002316:	3324      	adds	r3, #36	; 0x24
20002318:	4618      	mov	r0, r3
2000231a:	f000 fd7b 	bl	20002e14 <xTaskRemoveFromEventList>
2000231e:	4603      	mov	r3, r0
20002320:	2b00      	cmp	r3, #0
20002322:	d001      	beq.n	20002328 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20002324:	f000 fe52 	bl	20002fcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20002328:	7bfb      	ldrb	r3, [r7, #15]
2000232a:	3b01      	subs	r3, #1
2000232c:	b2db      	uxtb	r3, r3
2000232e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
20002330:	f997 300f 	ldrsb.w	r3, [r7, #15]
20002334:	2b00      	cmp	r3, #0
20002336:	dce9      	bgt.n	2000230c <prvUnlockQueue+0x16>
20002338:	e000      	b.n	2000233c <prvUnlockQueue+0x46>
					break;
2000233a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
2000233c:	687b      	ldr	r3, [r7, #4]
2000233e:	22ff      	movs	r2, #255	; 0xff
20002340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20002344:	f001 fdae 	bl	20003ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20002348:	f001 fd7c 	bl	20003e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
2000234c:	687b      	ldr	r3, [r7, #4]
2000234e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20002352:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20002354:	e011      	b.n	2000237a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20002356:	687b      	ldr	r3, [r7, #4]
20002358:	691b      	ldr	r3, [r3, #16]
2000235a:	2b00      	cmp	r3, #0
2000235c:	d012      	beq.n	20002384 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000235e:	687b      	ldr	r3, [r7, #4]
20002360:	3310      	adds	r3, #16
20002362:	4618      	mov	r0, r3
20002364:	f000 fd56 	bl	20002e14 <xTaskRemoveFromEventList>
20002368:	4603      	mov	r3, r0
2000236a:	2b00      	cmp	r3, #0
2000236c:	d001      	beq.n	20002372 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
2000236e:	f000 fe2d 	bl	20002fcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20002372:	7bbb      	ldrb	r3, [r7, #14]
20002374:	3b01      	subs	r3, #1
20002376:	b2db      	uxtb	r3, r3
20002378:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
2000237a:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000237e:	2b00      	cmp	r3, #0
20002380:	dce9      	bgt.n	20002356 <prvUnlockQueue+0x60>
20002382:	e000      	b.n	20002386 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
20002384:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20002386:	687b      	ldr	r3, [r7, #4]
20002388:	22ff      	movs	r2, #255	; 0xff
2000238a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
2000238e:	f001 fd89 	bl	20003ea4 <vPortExitCritical>
}
20002392:	bf00      	nop
20002394:	3710      	adds	r7, #16
20002396:	46bd      	mov	sp, r7
20002398:	bd80      	pop	{r7, pc}

2000239a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
2000239a:	b580      	push	{r7, lr}
2000239c:	b084      	sub	sp, #16
2000239e:	af00      	add	r7, sp, #0
200023a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
200023a2:	f001 fd4f 	bl	20003e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
200023a6:	687b      	ldr	r3, [r7, #4]
200023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200023aa:	2b00      	cmp	r3, #0
200023ac:	d102      	bne.n	200023b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
200023ae:	2301      	movs	r3, #1
200023b0:	60fb      	str	r3, [r7, #12]
200023b2:	e001      	b.n	200023b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
200023b4:	2300      	movs	r3, #0
200023b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
200023b8:	f001 fd74 	bl	20003ea4 <vPortExitCritical>

	return xReturn;
200023bc:	68fb      	ldr	r3, [r7, #12]
}
200023be:	4618      	mov	r0, r3
200023c0:	3710      	adds	r7, #16
200023c2:	46bd      	mov	sp, r7
200023c4:	bd80      	pop	{r7, pc}

200023c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
200023c6:	b580      	push	{r7, lr}
200023c8:	b084      	sub	sp, #16
200023ca:	af00      	add	r7, sp, #0
200023cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
200023ce:	f001 fd39 	bl	20003e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
200023d2:	687b      	ldr	r3, [r7, #4]
200023d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200023d6:	687b      	ldr	r3, [r7, #4]
200023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200023da:	429a      	cmp	r2, r3
200023dc:	d102      	bne.n	200023e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
200023de:	2301      	movs	r3, #1
200023e0:	60fb      	str	r3, [r7, #12]
200023e2:	e001      	b.n	200023e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
200023e4:	2300      	movs	r3, #0
200023e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
200023e8:	f001 fd5c 	bl	20003ea4 <vPortExitCritical>

	return xReturn;
200023ec:	68fb      	ldr	r3, [r7, #12]
}
200023ee:	4618      	mov	r0, r3
200023f0:	3710      	adds	r7, #16
200023f2:	46bd      	mov	sp, r7
200023f4:	bd80      	pop	{r7, pc}
	...

200023f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
200023f8:	b480      	push	{r7}
200023fa:	b085      	sub	sp, #20
200023fc:	af00      	add	r7, sp, #0
200023fe:	6078      	str	r0, [r7, #4]
20002400:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20002402:	2300      	movs	r3, #0
20002404:	60fb      	str	r3, [r7, #12]
20002406:	e014      	b.n	20002432 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
20002408:	4a0f      	ldr	r2, [pc, #60]	; (20002448 <vQueueAddToRegistry+0x50>)
2000240a:	68fb      	ldr	r3, [r7, #12]
2000240c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
20002410:	2b00      	cmp	r3, #0
20002412:	d10b      	bne.n	2000242c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
20002414:	490c      	ldr	r1, [pc, #48]	; (20002448 <vQueueAddToRegistry+0x50>)
20002416:	68fb      	ldr	r3, [r7, #12]
20002418:	683a      	ldr	r2, [r7, #0]
2000241a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
2000241e:	4a0a      	ldr	r2, [pc, #40]	; (20002448 <vQueueAddToRegistry+0x50>)
20002420:	68fb      	ldr	r3, [r7, #12]
20002422:	00db      	lsls	r3, r3, #3
20002424:	4413      	add	r3, r2
20002426:	687a      	ldr	r2, [r7, #4]
20002428:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
2000242a:	e006      	b.n	2000243a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2000242c:	68fb      	ldr	r3, [r7, #12]
2000242e:	3301      	adds	r3, #1
20002430:	60fb      	str	r3, [r7, #12]
20002432:	68fb      	ldr	r3, [r7, #12]
20002434:	2b07      	cmp	r3, #7
20002436:	d9e7      	bls.n	20002408 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20002438:	bf00      	nop
2000243a:	bf00      	nop
2000243c:	3714      	adds	r7, #20
2000243e:	46bd      	mov	sp, r7
20002440:	f85d 7b04 	ldr.w	r7, [sp], #4
20002444:	4770      	bx	lr
20002446:	bf00      	nop
20002448:	2000b474 	.word	0x2000b474

2000244c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
2000244c:	b480      	push	{r7}
2000244e:	b085      	sub	sp, #20
20002450:	af00      	add	r7, sp, #0
20002452:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20002454:	2300      	movs	r3, #0
20002456:	60fb      	str	r3, [r7, #12]
20002458:	e016      	b.n	20002488 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
2000245a:	4a10      	ldr	r2, [pc, #64]	; (2000249c <vQueueUnregisterQueue+0x50>)
2000245c:	68fb      	ldr	r3, [r7, #12]
2000245e:	00db      	lsls	r3, r3, #3
20002460:	4413      	add	r3, r2
20002462:	685b      	ldr	r3, [r3, #4]
20002464:	687a      	ldr	r2, [r7, #4]
20002466:	429a      	cmp	r2, r3
20002468:	d10b      	bne.n	20002482 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
2000246a:	4a0c      	ldr	r2, [pc, #48]	; (2000249c <vQueueUnregisterQueue+0x50>)
2000246c:	68fb      	ldr	r3, [r7, #12]
2000246e:	2100      	movs	r1, #0
20002470:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
20002474:	4a09      	ldr	r2, [pc, #36]	; (2000249c <vQueueUnregisterQueue+0x50>)
20002476:	68fb      	ldr	r3, [r7, #12]
20002478:	00db      	lsls	r3, r3, #3
2000247a:	4413      	add	r3, r2
2000247c:	2200      	movs	r2, #0
2000247e:	605a      	str	r2, [r3, #4]
				break;
20002480:	e006      	b.n	20002490 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20002482:	68fb      	ldr	r3, [r7, #12]
20002484:	3301      	adds	r3, #1
20002486:	60fb      	str	r3, [r7, #12]
20002488:	68fb      	ldr	r3, [r7, #12]
2000248a:	2b07      	cmp	r3, #7
2000248c:	d9e5      	bls.n	2000245a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2000248e:	bf00      	nop
20002490:	bf00      	nop
20002492:	3714      	adds	r7, #20
20002494:	46bd      	mov	sp, r7
20002496:	f85d 7b04 	ldr.w	r7, [sp], #4
2000249a:	4770      	bx	lr
2000249c:	2000b474 	.word	0x2000b474

200024a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
200024a0:	b580      	push	{r7, lr}
200024a2:	b086      	sub	sp, #24
200024a4:	af00      	add	r7, sp, #0
200024a6:	60f8      	str	r0, [r7, #12]
200024a8:	60b9      	str	r1, [r7, #8]
200024aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
200024ac:	68fb      	ldr	r3, [r7, #12]
200024ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
200024b0:	f001 fcc8 	bl	20003e44 <vPortEnterCritical>
200024b4:	697b      	ldr	r3, [r7, #20]
200024b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200024ba:	b25b      	sxtb	r3, r3
200024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
200024c0:	d103      	bne.n	200024ca <vQueueWaitForMessageRestricted+0x2a>
200024c2:	697b      	ldr	r3, [r7, #20]
200024c4:	2200      	movs	r2, #0
200024c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200024ca:	697b      	ldr	r3, [r7, #20]
200024cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200024d0:	b25b      	sxtb	r3, r3
200024d2:	f1b3 3fff 	cmp.w	r3, #4294967295
200024d6:	d103      	bne.n	200024e0 <vQueueWaitForMessageRestricted+0x40>
200024d8:	697b      	ldr	r3, [r7, #20]
200024da:	2200      	movs	r2, #0
200024dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200024e0:	f001 fce0 	bl	20003ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
200024e4:	697b      	ldr	r3, [r7, #20]
200024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200024e8:	2b00      	cmp	r3, #0
200024ea:	d106      	bne.n	200024fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
200024ec:	697b      	ldr	r3, [r7, #20]
200024ee:	3324      	adds	r3, #36	; 0x24
200024f0:	687a      	ldr	r2, [r7, #4]
200024f2:	68b9      	ldr	r1, [r7, #8]
200024f4:	4618      	mov	r0, r3
200024f6:	f000 fc61 	bl	20002dbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
200024fa:	6978      	ldr	r0, [r7, #20]
200024fc:	f7ff fefb 	bl	200022f6 <prvUnlockQueue>
	}
20002500:	bf00      	nop
20002502:	3718      	adds	r7, #24
20002504:	46bd      	mov	sp, r7
20002506:	bd80      	pop	{r7, pc}

20002508 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
20002508:	b580      	push	{r7, lr}
2000250a:	b08e      	sub	sp, #56	; 0x38
2000250c:	af04      	add	r7, sp, #16
2000250e:	60f8      	str	r0, [r7, #12]
20002510:	60b9      	str	r1, [r7, #8]
20002512:	607a      	str	r2, [r7, #4]
20002514:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
20002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002518:	2b00      	cmp	r3, #0
2000251a:	d10a      	bne.n	20002532 <xTaskCreateStatic+0x2a>
	__asm volatile
2000251c:	f04f 0350 	mov.w	r3, #80	; 0x50
20002520:	f383 8811 	msr	BASEPRI, r3
20002524:	f3bf 8f6f 	isb	sy
20002528:	f3bf 8f4f 	dsb	sy
2000252c:	623b      	str	r3, [r7, #32]
}
2000252e:	bf00      	nop
20002530:	e7fe      	b.n	20002530 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
20002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002534:	2b00      	cmp	r3, #0
20002536:	d10a      	bne.n	2000254e <xTaskCreateStatic+0x46>
	__asm volatile
20002538:	f04f 0350 	mov.w	r3, #80	; 0x50
2000253c:	f383 8811 	msr	BASEPRI, r3
20002540:	f3bf 8f6f 	isb	sy
20002544:	f3bf 8f4f 	dsb	sy
20002548:	61fb      	str	r3, [r7, #28]
}
2000254a:	bf00      	nop
2000254c:	e7fe      	b.n	2000254c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
2000254e:	23bc      	movs	r3, #188	; 0xbc
20002550:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
20002552:	693b      	ldr	r3, [r7, #16]
20002554:	2bbc      	cmp	r3, #188	; 0xbc
20002556:	d00a      	beq.n	2000256e <xTaskCreateStatic+0x66>
	__asm volatile
20002558:	f04f 0350 	mov.w	r3, #80	; 0x50
2000255c:	f383 8811 	msr	BASEPRI, r3
20002560:	f3bf 8f6f 	isb	sy
20002564:	f3bf 8f4f 	dsb	sy
20002568:	61bb      	str	r3, [r7, #24]
}
2000256a:	bf00      	nop
2000256c:	e7fe      	b.n	2000256c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
2000256e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
20002570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002572:	2b00      	cmp	r3, #0
20002574:	d01e      	beq.n	200025b4 <xTaskCreateStatic+0xac>
20002576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002578:	2b00      	cmp	r3, #0
2000257a:	d01b      	beq.n	200025b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
2000257c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000257e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
20002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20002584:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
20002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002588:	2202      	movs	r2, #2
2000258a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
2000258e:	2300      	movs	r3, #0
20002590:	9303      	str	r3, [sp, #12]
20002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002594:	9302      	str	r3, [sp, #8]
20002596:	f107 0314 	add.w	r3, r7, #20
2000259a:	9301      	str	r3, [sp, #4]
2000259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000259e:	9300      	str	r3, [sp, #0]
200025a0:	683b      	ldr	r3, [r7, #0]
200025a2:	687a      	ldr	r2, [r7, #4]
200025a4:	68b9      	ldr	r1, [r7, #8]
200025a6:	68f8      	ldr	r0, [r7, #12]
200025a8:	f000 f850 	bl	2000264c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
200025ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
200025ae:	f000 f8f3 	bl	20002798 <prvAddNewTaskToReadyList>
200025b2:	e001      	b.n	200025b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
200025b4:	2300      	movs	r3, #0
200025b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
200025b8:	697b      	ldr	r3, [r7, #20]
	}
200025ba:	4618      	mov	r0, r3
200025bc:	3728      	adds	r7, #40	; 0x28
200025be:	46bd      	mov	sp, r7
200025c0:	bd80      	pop	{r7, pc}

200025c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
200025c2:	b580      	push	{r7, lr}
200025c4:	b08c      	sub	sp, #48	; 0x30
200025c6:	af04      	add	r7, sp, #16
200025c8:	60f8      	str	r0, [r7, #12]
200025ca:	60b9      	str	r1, [r7, #8]
200025cc:	603b      	str	r3, [r7, #0]
200025ce:	4613      	mov	r3, r2
200025d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
200025d2:	88fb      	ldrh	r3, [r7, #6]
200025d4:	009b      	lsls	r3, r3, #2
200025d6:	4618      	mov	r0, r3
200025d8:	f001 fd56 	bl	20004088 <pvPortMalloc>
200025dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
200025de:	697b      	ldr	r3, [r7, #20]
200025e0:	2b00      	cmp	r3, #0
200025e2:	d00e      	beq.n	20002602 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
200025e4:	20bc      	movs	r0, #188	; 0xbc
200025e6:	f001 fd4f 	bl	20004088 <pvPortMalloc>
200025ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
200025ec:	69fb      	ldr	r3, [r7, #28]
200025ee:	2b00      	cmp	r3, #0
200025f0:	d003      	beq.n	200025fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
200025f2:	69fb      	ldr	r3, [r7, #28]
200025f4:	697a      	ldr	r2, [r7, #20]
200025f6:	631a      	str	r2, [r3, #48]	; 0x30
200025f8:	e005      	b.n	20002606 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
200025fa:	6978      	ldr	r0, [r7, #20]
200025fc:	f001 fe10 	bl	20004220 <vPortFree>
20002600:	e001      	b.n	20002606 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
20002602:	2300      	movs	r3, #0
20002604:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20002606:	69fb      	ldr	r3, [r7, #28]
20002608:	2b00      	cmp	r3, #0
2000260a:	d017      	beq.n	2000263c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
2000260c:	69fb      	ldr	r3, [r7, #28]
2000260e:	2200      	movs	r2, #0
20002610:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20002614:	88fa      	ldrh	r2, [r7, #6]
20002616:	2300      	movs	r3, #0
20002618:	9303      	str	r3, [sp, #12]
2000261a:	69fb      	ldr	r3, [r7, #28]
2000261c:	9302      	str	r3, [sp, #8]
2000261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002620:	9301      	str	r3, [sp, #4]
20002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002624:	9300      	str	r3, [sp, #0]
20002626:	683b      	ldr	r3, [r7, #0]
20002628:	68b9      	ldr	r1, [r7, #8]
2000262a:	68f8      	ldr	r0, [r7, #12]
2000262c:	f000 f80e 	bl	2000264c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20002630:	69f8      	ldr	r0, [r7, #28]
20002632:	f000 f8b1 	bl	20002798 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20002636:	2301      	movs	r3, #1
20002638:	61bb      	str	r3, [r7, #24]
2000263a:	e002      	b.n	20002642 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
2000263c:	f04f 33ff 	mov.w	r3, #4294967295
20002640:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20002642:	69bb      	ldr	r3, [r7, #24]
	}
20002644:	4618      	mov	r0, r3
20002646:	3720      	adds	r7, #32
20002648:	46bd      	mov	sp, r7
2000264a:	bd80      	pop	{r7, pc}

2000264c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
2000264c:	b580      	push	{r7, lr}
2000264e:	b088      	sub	sp, #32
20002650:	af00      	add	r7, sp, #0
20002652:	60f8      	str	r0, [r7, #12]
20002654:	60b9      	str	r1, [r7, #8]
20002656:	607a      	str	r2, [r7, #4]
20002658:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
2000265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000265c:	6b18      	ldr	r0, [r3, #48]	; 0x30
2000265e:	687b      	ldr	r3, [r7, #4]
20002660:	009b      	lsls	r3, r3, #2
20002662:	461a      	mov	r2, r3
20002664:	21a5      	movs	r1, #165	; 0xa5
20002666:	f004 fab9 	bl	20006bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
2000266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000266c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000266e:	687b      	ldr	r3, [r7, #4]
20002670:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
20002674:	3b01      	subs	r3, #1
20002676:	009b      	lsls	r3, r3, #2
20002678:	4413      	add	r3, r2
2000267a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
2000267c:	69bb      	ldr	r3, [r7, #24]
2000267e:	f023 0307 	bic.w	r3, r3, #7
20002682:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20002684:	69bb      	ldr	r3, [r7, #24]
20002686:	f003 0307 	and.w	r3, r3, #7
2000268a:	2b00      	cmp	r3, #0
2000268c:	d00a      	beq.n	200026a4 <prvInitialiseNewTask+0x58>
	__asm volatile
2000268e:	f04f 0350 	mov.w	r3, #80	; 0x50
20002692:	f383 8811 	msr	BASEPRI, r3
20002696:	f3bf 8f6f 	isb	sy
2000269a:	f3bf 8f4f 	dsb	sy
2000269e:	617b      	str	r3, [r7, #20]
}
200026a0:	bf00      	nop
200026a2:	e7fe      	b.n	200026a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
200026a4:	68bb      	ldr	r3, [r7, #8]
200026a6:	2b00      	cmp	r3, #0
200026a8:	d01f      	beq.n	200026ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
200026aa:	2300      	movs	r3, #0
200026ac:	61fb      	str	r3, [r7, #28]
200026ae:	e012      	b.n	200026d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
200026b0:	68ba      	ldr	r2, [r7, #8]
200026b2:	69fb      	ldr	r3, [r7, #28]
200026b4:	4413      	add	r3, r2
200026b6:	7819      	ldrb	r1, [r3, #0]
200026b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200026ba:	69fb      	ldr	r3, [r7, #28]
200026bc:	4413      	add	r3, r2
200026be:	3334      	adds	r3, #52	; 0x34
200026c0:	460a      	mov	r2, r1
200026c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
200026c4:	68ba      	ldr	r2, [r7, #8]
200026c6:	69fb      	ldr	r3, [r7, #28]
200026c8:	4413      	add	r3, r2
200026ca:	781b      	ldrb	r3, [r3, #0]
200026cc:	2b00      	cmp	r3, #0
200026ce:	d006      	beq.n	200026de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
200026d0:	69fb      	ldr	r3, [r7, #28]
200026d2:	3301      	adds	r3, #1
200026d4:	61fb      	str	r3, [r7, #28]
200026d6:	69fb      	ldr	r3, [r7, #28]
200026d8:	2b0f      	cmp	r3, #15
200026da:	d9e9      	bls.n	200026b0 <prvInitialiseNewTask+0x64>
200026dc:	e000      	b.n	200026e0 <prvInitialiseNewTask+0x94>
			{
				break;
200026de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
200026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200026e2:	2200      	movs	r2, #0
200026e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
200026e8:	e003      	b.n	200026f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
200026ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200026ec:	2200      	movs	r2, #0
200026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
200026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200026f4:	2b37      	cmp	r3, #55	; 0x37
200026f6:	d901      	bls.n	200026fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
200026f8:	2337      	movs	r3, #55	; 0x37
200026fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
200026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200026fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002700:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002704:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002706:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
20002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000270a:	2200      	movs	r2, #0
2000270c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
2000270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002710:	3304      	adds	r3, #4
20002712:	4618      	mov	r0, r3
20002714:	f7fe fe56 	bl	200013c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000271a:	3318      	adds	r3, #24
2000271c:	4618      	mov	r0, r3
2000271e:	f7fe fe51 	bl	200013c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002726:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002728:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000272a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
2000272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002730:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002736:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000273a:	2200      	movs	r2, #0
2000273c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002742:	2200      	movs	r2, #0
20002744:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
20002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000274a:	3354      	adds	r3, #84	; 0x54
2000274c:	2260      	movs	r2, #96	; 0x60
2000274e:	2100      	movs	r1, #0
20002750:	4618      	mov	r0, r3
20002752:	f004 fa43 	bl	20006bdc <memset>
20002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002758:	4a0c      	ldr	r2, [pc, #48]	; (2000278c <prvInitialiseNewTask+0x140>)
2000275a:	659a      	str	r2, [r3, #88]	; 0x58
2000275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000275e:	4a0c      	ldr	r2, [pc, #48]	; (20002790 <prvInitialiseNewTask+0x144>)
20002760:	65da      	str	r2, [r3, #92]	; 0x5c
20002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002764:	4a0b      	ldr	r2, [pc, #44]	; (20002794 <prvInitialiseNewTask+0x148>)
20002766:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20002768:	683a      	ldr	r2, [r7, #0]
2000276a:	68f9      	ldr	r1, [r7, #12]
2000276c:	69b8      	ldr	r0, [r7, #24]
2000276e:	f001 fa3f 	bl	20003bf0 <pxPortInitialiseStack>
20002772:	4602      	mov	r2, r0
20002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002776:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
20002778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000277a:	2b00      	cmp	r3, #0
2000277c:	d002      	beq.n	20002784 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
2000277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002782:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002784:	bf00      	nop
20002786:	3720      	adds	r7, #32
20002788:	46bd      	mov	sp, r7
2000278a:	bd80      	pop	{r7, pc}
2000278c:	2000abe8 	.word	0x2000abe8
20002790:	2000ac08 	.word	0x2000ac08
20002794:	2000abc8 	.word	0x2000abc8

20002798 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20002798:	b580      	push	{r7, lr}
2000279a:	b082      	sub	sp, #8
2000279c:	af00      	add	r7, sp, #0
2000279e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
200027a0:	f001 fb50 	bl	20003e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
200027a4:	4b2d      	ldr	r3, [pc, #180]	; (2000285c <prvAddNewTaskToReadyList+0xc4>)
200027a6:	681b      	ldr	r3, [r3, #0]
200027a8:	3301      	adds	r3, #1
200027aa:	4a2c      	ldr	r2, [pc, #176]	; (2000285c <prvAddNewTaskToReadyList+0xc4>)
200027ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
200027ae:	4b2c      	ldr	r3, [pc, #176]	; (20002860 <prvAddNewTaskToReadyList+0xc8>)
200027b0:	681b      	ldr	r3, [r3, #0]
200027b2:	2b00      	cmp	r3, #0
200027b4:	d109      	bne.n	200027ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
200027b6:	4a2a      	ldr	r2, [pc, #168]	; (20002860 <prvAddNewTaskToReadyList+0xc8>)
200027b8:	687b      	ldr	r3, [r7, #4]
200027ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
200027bc:	4b27      	ldr	r3, [pc, #156]	; (2000285c <prvAddNewTaskToReadyList+0xc4>)
200027be:	681b      	ldr	r3, [r3, #0]
200027c0:	2b01      	cmp	r3, #1
200027c2:	d110      	bne.n	200027e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
200027c4:	f000 fc26 	bl	20003014 <prvInitialiseTaskLists>
200027c8:	e00d      	b.n	200027e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
200027ca:	4b26      	ldr	r3, [pc, #152]	; (20002864 <prvAddNewTaskToReadyList+0xcc>)
200027cc:	681b      	ldr	r3, [r3, #0]
200027ce:	2b00      	cmp	r3, #0
200027d0:	d109      	bne.n	200027e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
200027d2:	4b23      	ldr	r3, [pc, #140]	; (20002860 <prvAddNewTaskToReadyList+0xc8>)
200027d4:	681b      	ldr	r3, [r3, #0]
200027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200027d8:	687b      	ldr	r3, [r7, #4]
200027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200027dc:	429a      	cmp	r2, r3
200027de:	d802      	bhi.n	200027e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
200027e0:	4a1f      	ldr	r2, [pc, #124]	; (20002860 <prvAddNewTaskToReadyList+0xc8>)
200027e2:	687b      	ldr	r3, [r7, #4]
200027e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
200027e6:	4b20      	ldr	r3, [pc, #128]	; (20002868 <prvAddNewTaskToReadyList+0xd0>)
200027e8:	681b      	ldr	r3, [r3, #0]
200027ea:	3301      	adds	r3, #1
200027ec:	4a1e      	ldr	r2, [pc, #120]	; (20002868 <prvAddNewTaskToReadyList+0xd0>)
200027ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
200027f0:	4b1d      	ldr	r3, [pc, #116]	; (20002868 <prvAddNewTaskToReadyList+0xd0>)
200027f2:	681a      	ldr	r2, [r3, #0]
200027f4:	687b      	ldr	r3, [r7, #4]
200027f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
200027f8:	687b      	ldr	r3, [r7, #4]
200027fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200027fc:	4b1b      	ldr	r3, [pc, #108]	; (2000286c <prvAddNewTaskToReadyList+0xd4>)
200027fe:	681b      	ldr	r3, [r3, #0]
20002800:	429a      	cmp	r2, r3
20002802:	d903      	bls.n	2000280c <prvAddNewTaskToReadyList+0x74>
20002804:	687b      	ldr	r3, [r7, #4]
20002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002808:	4a18      	ldr	r2, [pc, #96]	; (2000286c <prvAddNewTaskToReadyList+0xd4>)
2000280a:	6013      	str	r3, [r2, #0]
2000280c:	687b      	ldr	r3, [r7, #4]
2000280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002810:	4613      	mov	r3, r2
20002812:	009b      	lsls	r3, r3, #2
20002814:	4413      	add	r3, r2
20002816:	009b      	lsls	r3, r3, #2
20002818:	4a15      	ldr	r2, [pc, #84]	; (20002870 <prvAddNewTaskToReadyList+0xd8>)
2000281a:	441a      	add	r2, r3
2000281c:	687b      	ldr	r3, [r7, #4]
2000281e:	3304      	adds	r3, #4
20002820:	4619      	mov	r1, r3
20002822:	4610      	mov	r0, r2
20002824:	f7fe fddb 	bl	200013de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20002828:	f001 fb3c 	bl	20003ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
2000282c:	4b0d      	ldr	r3, [pc, #52]	; (20002864 <prvAddNewTaskToReadyList+0xcc>)
2000282e:	681b      	ldr	r3, [r3, #0]
20002830:	2b00      	cmp	r3, #0
20002832:	d00e      	beq.n	20002852 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20002834:	4b0a      	ldr	r3, [pc, #40]	; (20002860 <prvAddNewTaskToReadyList+0xc8>)
20002836:	681b      	ldr	r3, [r3, #0]
20002838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000283a:	687b      	ldr	r3, [r7, #4]
2000283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000283e:	429a      	cmp	r2, r3
20002840:	d207      	bcs.n	20002852 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
20002842:	4b0c      	ldr	r3, [pc, #48]	; (20002874 <prvAddNewTaskToReadyList+0xdc>)
20002844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002848:	601a      	str	r2, [r3, #0]
2000284a:	f3bf 8f4f 	dsb	sy
2000284e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002852:	bf00      	nop
20002854:	3708      	adds	r7, #8
20002856:	46bd      	mov	sp, r7
20002858:	bd80      	pop	{r7, pc}
2000285a:	bf00      	nop
2000285c:	2000b988 	.word	0x2000b988
20002860:	2000b4b4 	.word	0x2000b4b4
20002864:	2000b994 	.word	0x2000b994
20002868:	2000b9a4 	.word	0x2000b9a4
2000286c:	2000b990 	.word	0x2000b990
20002870:	2000b4b8 	.word	0x2000b4b8
20002874:	e000ed04 	.word	0xe000ed04

20002878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20002878:	b580      	push	{r7, lr}
2000287a:	b084      	sub	sp, #16
2000287c:	af00      	add	r7, sp, #0
2000287e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
20002880:	2300      	movs	r3, #0
20002882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
20002884:	687b      	ldr	r3, [r7, #4]
20002886:	2b00      	cmp	r3, #0
20002888:	d017      	beq.n	200028ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
2000288a:	4b13      	ldr	r3, [pc, #76]	; (200028d8 <vTaskDelay+0x60>)
2000288c:	681b      	ldr	r3, [r3, #0]
2000288e:	2b00      	cmp	r3, #0
20002890:	d00a      	beq.n	200028a8 <vTaskDelay+0x30>
	__asm volatile
20002892:	f04f 0350 	mov.w	r3, #80	; 0x50
20002896:	f383 8811 	msr	BASEPRI, r3
2000289a:	f3bf 8f6f 	isb	sy
2000289e:	f3bf 8f4f 	dsb	sy
200028a2:	60bb      	str	r3, [r7, #8]
}
200028a4:	bf00      	nop
200028a6:	e7fe      	b.n	200028a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
200028a8:	f000 f88a 	bl	200029c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
200028ac:	2100      	movs	r1, #0
200028ae:	6878      	ldr	r0, [r7, #4]
200028b0:	f000 fdfc 	bl	200034ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
200028b4:	f000 f892 	bl	200029dc <xTaskResumeAll>
200028b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
200028ba:	68fb      	ldr	r3, [r7, #12]
200028bc:	2b00      	cmp	r3, #0
200028be:	d107      	bne.n	200028d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
200028c0:	4b06      	ldr	r3, [pc, #24]	; (200028dc <vTaskDelay+0x64>)
200028c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200028c6:	601a      	str	r2, [r3, #0]
200028c8:	f3bf 8f4f 	dsb	sy
200028cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
200028d0:	bf00      	nop
200028d2:	3710      	adds	r7, #16
200028d4:	46bd      	mov	sp, r7
200028d6:	bd80      	pop	{r7, pc}
200028d8:	2000b9b0 	.word	0x2000b9b0
200028dc:	e000ed04 	.word	0xe000ed04

200028e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
200028e0:	b580      	push	{r7, lr}
200028e2:	b08a      	sub	sp, #40	; 0x28
200028e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
200028e6:	2300      	movs	r3, #0
200028e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
200028ea:	2300      	movs	r3, #0
200028ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
200028ee:	463a      	mov	r2, r7
200028f0:	1d39      	adds	r1, r7, #4
200028f2:	f107 0308 	add.w	r3, r7, #8
200028f6:	4618      	mov	r0, r3
200028f8:	f7fe fd10 	bl	2000131c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
200028fc:	6839      	ldr	r1, [r7, #0]
200028fe:	687b      	ldr	r3, [r7, #4]
20002900:	68ba      	ldr	r2, [r7, #8]
20002902:	9202      	str	r2, [sp, #8]
20002904:	9301      	str	r3, [sp, #4]
20002906:	2300      	movs	r3, #0
20002908:	9300      	str	r3, [sp, #0]
2000290a:	2300      	movs	r3, #0
2000290c:	460a      	mov	r2, r1
2000290e:	4924      	ldr	r1, [pc, #144]	; (200029a0 <vTaskStartScheduler+0xc0>)
20002910:	4824      	ldr	r0, [pc, #144]	; (200029a4 <vTaskStartScheduler+0xc4>)
20002912:	f7ff fdf9 	bl	20002508 <xTaskCreateStatic>
20002916:	4603      	mov	r3, r0
20002918:	4a23      	ldr	r2, [pc, #140]	; (200029a8 <vTaskStartScheduler+0xc8>)
2000291a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
2000291c:	4b22      	ldr	r3, [pc, #136]	; (200029a8 <vTaskStartScheduler+0xc8>)
2000291e:	681b      	ldr	r3, [r3, #0]
20002920:	2b00      	cmp	r3, #0
20002922:	d002      	beq.n	2000292a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
20002924:	2301      	movs	r3, #1
20002926:	617b      	str	r3, [r7, #20]
20002928:	e001      	b.n	2000292e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
2000292a:	2300      	movs	r3, #0
2000292c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
2000292e:	697b      	ldr	r3, [r7, #20]
20002930:	2b01      	cmp	r3, #1
20002932:	d102      	bne.n	2000293a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
20002934:	f000 fe0e 	bl	20003554 <xTimerCreateTimerTask>
20002938:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
2000293a:	697b      	ldr	r3, [r7, #20]
2000293c:	2b01      	cmp	r3, #1
2000293e:	d11b      	bne.n	20002978 <vTaskStartScheduler+0x98>
	__asm volatile
20002940:	f04f 0350 	mov.w	r3, #80	; 0x50
20002944:	f383 8811 	msr	BASEPRI, r3
20002948:	f3bf 8f6f 	isb	sy
2000294c:	f3bf 8f4f 	dsb	sy
20002950:	613b      	str	r3, [r7, #16]
}
20002952:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
20002954:	4b15      	ldr	r3, [pc, #84]	; (200029ac <vTaskStartScheduler+0xcc>)
20002956:	681b      	ldr	r3, [r3, #0]
20002958:	3354      	adds	r3, #84	; 0x54
2000295a:	4a15      	ldr	r2, [pc, #84]	; (200029b0 <vTaskStartScheduler+0xd0>)
2000295c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
2000295e:	4b15      	ldr	r3, [pc, #84]	; (200029b4 <vTaskStartScheduler+0xd4>)
20002960:	f04f 32ff 	mov.w	r2, #4294967295
20002964:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20002966:	4b14      	ldr	r3, [pc, #80]	; (200029b8 <vTaskStartScheduler+0xd8>)
20002968:	2201      	movs	r2, #1
2000296a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2000296c:	4b13      	ldr	r3, [pc, #76]	; (200029bc <vTaskStartScheduler+0xdc>)
2000296e:	2200      	movs	r2, #0
20002970:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20002972:	f001 f9c5 	bl	20003d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20002976:	e00e      	b.n	20002996 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002978:	697b      	ldr	r3, [r7, #20]
2000297a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000297e:	d10a      	bne.n	20002996 <vTaskStartScheduler+0xb6>
	__asm volatile
20002980:	f04f 0350 	mov.w	r3, #80	; 0x50
20002984:	f383 8811 	msr	BASEPRI, r3
20002988:	f3bf 8f6f 	isb	sy
2000298c:	f3bf 8f4f 	dsb	sy
20002990:	60fb      	str	r3, [r7, #12]
}
20002992:	bf00      	nop
20002994:	e7fe      	b.n	20002994 <vTaskStartScheduler+0xb4>
}
20002996:	bf00      	nop
20002998:	3718      	adds	r7, #24
2000299a:	46bd      	mov	sp, r7
2000299c:	bd80      	pop	{r7, pc}
2000299e:	bf00      	nop
200029a0:	20006d88 	.word	0x20006d88
200029a4:	20002fe5 	.word	0x20002fe5
200029a8:	2000b9ac 	.word	0x2000b9ac
200029ac:	2000b4b4 	.word	0x2000b4b4
200029b0:	2000ac74 	.word	0x2000ac74
200029b4:	2000b9a8 	.word	0x2000b9a8
200029b8:	2000b994 	.word	0x2000b994
200029bc:	2000b98c 	.word	0x2000b98c

200029c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
200029c0:	b480      	push	{r7}
200029c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
200029c4:	4b04      	ldr	r3, [pc, #16]	; (200029d8 <vTaskSuspendAll+0x18>)
200029c6:	681b      	ldr	r3, [r3, #0]
200029c8:	3301      	adds	r3, #1
200029ca:	4a03      	ldr	r2, [pc, #12]	; (200029d8 <vTaskSuspendAll+0x18>)
200029cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
200029ce:	bf00      	nop
200029d0:	46bd      	mov	sp, r7
200029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200029d6:	4770      	bx	lr
200029d8:	2000b9b0 	.word	0x2000b9b0

200029dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
200029dc:	b580      	push	{r7, lr}
200029de:	b084      	sub	sp, #16
200029e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
200029e2:	2300      	movs	r3, #0
200029e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
200029e6:	2300      	movs	r3, #0
200029e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
200029ea:	4b42      	ldr	r3, [pc, #264]	; (20002af4 <xTaskResumeAll+0x118>)
200029ec:	681b      	ldr	r3, [r3, #0]
200029ee:	2b00      	cmp	r3, #0
200029f0:	d10a      	bne.n	20002a08 <xTaskResumeAll+0x2c>
	__asm volatile
200029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
200029f6:	f383 8811 	msr	BASEPRI, r3
200029fa:	f3bf 8f6f 	isb	sy
200029fe:	f3bf 8f4f 	dsb	sy
20002a02:	603b      	str	r3, [r7, #0]
}
20002a04:	bf00      	nop
20002a06:	e7fe      	b.n	20002a06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002a08:	f001 fa1c 	bl	20003e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20002a0c:	4b39      	ldr	r3, [pc, #228]	; (20002af4 <xTaskResumeAll+0x118>)
20002a0e:	681b      	ldr	r3, [r3, #0]
20002a10:	3b01      	subs	r3, #1
20002a12:	4a38      	ldr	r2, [pc, #224]	; (20002af4 <xTaskResumeAll+0x118>)
20002a14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002a16:	4b37      	ldr	r3, [pc, #220]	; (20002af4 <xTaskResumeAll+0x118>)
20002a18:	681b      	ldr	r3, [r3, #0]
20002a1a:	2b00      	cmp	r3, #0
20002a1c:	d162      	bne.n	20002ae4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002a1e:	4b36      	ldr	r3, [pc, #216]	; (20002af8 <xTaskResumeAll+0x11c>)
20002a20:	681b      	ldr	r3, [r3, #0]
20002a22:	2b00      	cmp	r3, #0
20002a24:	d05e      	beq.n	20002ae4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002a26:	e02f      	b.n	20002a88 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002a28:	4b34      	ldr	r3, [pc, #208]	; (20002afc <xTaskResumeAll+0x120>)
20002a2a:	68db      	ldr	r3, [r3, #12]
20002a2c:	68db      	ldr	r3, [r3, #12]
20002a2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002a30:	68fb      	ldr	r3, [r7, #12]
20002a32:	3318      	adds	r3, #24
20002a34:	4618      	mov	r0, r3
20002a36:	f7fe fd2f 	bl	20001498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002a3a:	68fb      	ldr	r3, [r7, #12]
20002a3c:	3304      	adds	r3, #4
20002a3e:	4618      	mov	r0, r3
20002a40:	f7fe fd2a 	bl	20001498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
20002a44:	68fb      	ldr	r3, [r7, #12]
20002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a48:	4b2d      	ldr	r3, [pc, #180]	; (20002b00 <xTaskResumeAll+0x124>)
20002a4a:	681b      	ldr	r3, [r3, #0]
20002a4c:	429a      	cmp	r2, r3
20002a4e:	d903      	bls.n	20002a58 <xTaskResumeAll+0x7c>
20002a50:	68fb      	ldr	r3, [r7, #12]
20002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a54:	4a2a      	ldr	r2, [pc, #168]	; (20002b00 <xTaskResumeAll+0x124>)
20002a56:	6013      	str	r3, [r2, #0]
20002a58:	68fb      	ldr	r3, [r7, #12]
20002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a5c:	4613      	mov	r3, r2
20002a5e:	009b      	lsls	r3, r3, #2
20002a60:	4413      	add	r3, r2
20002a62:	009b      	lsls	r3, r3, #2
20002a64:	4a27      	ldr	r2, [pc, #156]	; (20002b04 <xTaskResumeAll+0x128>)
20002a66:	441a      	add	r2, r3
20002a68:	68fb      	ldr	r3, [r7, #12]
20002a6a:	3304      	adds	r3, #4
20002a6c:	4619      	mov	r1, r3
20002a6e:	4610      	mov	r0, r2
20002a70:	f7fe fcb5 	bl	200013de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002a74:	68fb      	ldr	r3, [r7, #12]
20002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a78:	4b23      	ldr	r3, [pc, #140]	; (20002b08 <xTaskResumeAll+0x12c>)
20002a7a:	681b      	ldr	r3, [r3, #0]
20002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a7e:	429a      	cmp	r2, r3
20002a80:	d302      	bcc.n	20002a88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
20002a82:	4b22      	ldr	r3, [pc, #136]	; (20002b0c <xTaskResumeAll+0x130>)
20002a84:	2201      	movs	r2, #1
20002a86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002a88:	4b1c      	ldr	r3, [pc, #112]	; (20002afc <xTaskResumeAll+0x120>)
20002a8a:	681b      	ldr	r3, [r3, #0]
20002a8c:	2b00      	cmp	r3, #0
20002a8e:	d1cb      	bne.n	20002a28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
20002a90:	68fb      	ldr	r3, [r7, #12]
20002a92:	2b00      	cmp	r3, #0
20002a94:	d001      	beq.n	20002a9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002a96:	f000 fb5f 	bl	20003158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
20002a9a:	4b1d      	ldr	r3, [pc, #116]	; (20002b10 <xTaskResumeAll+0x134>)
20002a9c:	681b      	ldr	r3, [r3, #0]
20002a9e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
20002aa0:	687b      	ldr	r3, [r7, #4]
20002aa2:	2b00      	cmp	r3, #0
20002aa4:	d010      	beq.n	20002ac8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
20002aa6:	f000 f847 	bl	20002b38 <xTaskIncrementTick>
20002aaa:	4603      	mov	r3, r0
20002aac:	2b00      	cmp	r3, #0
20002aae:	d002      	beq.n	20002ab6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
20002ab0:	4b16      	ldr	r3, [pc, #88]	; (20002b0c <xTaskResumeAll+0x130>)
20002ab2:	2201      	movs	r2, #1
20002ab4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
20002ab6:	687b      	ldr	r3, [r7, #4]
20002ab8:	3b01      	subs	r3, #1
20002aba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
20002abc:	687b      	ldr	r3, [r7, #4]
20002abe:	2b00      	cmp	r3, #0
20002ac0:	d1f1      	bne.n	20002aa6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
20002ac2:	4b13      	ldr	r3, [pc, #76]	; (20002b10 <xTaskResumeAll+0x134>)
20002ac4:	2200      	movs	r2, #0
20002ac6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
20002ac8:	4b10      	ldr	r3, [pc, #64]	; (20002b0c <xTaskResumeAll+0x130>)
20002aca:	681b      	ldr	r3, [r3, #0]
20002acc:	2b00      	cmp	r3, #0
20002ace:	d009      	beq.n	20002ae4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
20002ad0:	2301      	movs	r3, #1
20002ad2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
20002ad4:	4b0f      	ldr	r3, [pc, #60]	; (20002b14 <xTaskResumeAll+0x138>)
20002ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002ada:	601a      	str	r2, [r3, #0]
20002adc:	f3bf 8f4f 	dsb	sy
20002ae0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002ae4:	f001 f9de 	bl	20003ea4 <vPortExitCritical>

	return xAlreadyYielded;
20002ae8:	68bb      	ldr	r3, [r7, #8]
}
20002aea:	4618      	mov	r0, r3
20002aec:	3710      	adds	r7, #16
20002aee:	46bd      	mov	sp, r7
20002af0:	bd80      	pop	{r7, pc}
20002af2:	bf00      	nop
20002af4:	2000b9b0 	.word	0x2000b9b0
20002af8:	2000b988 	.word	0x2000b988
20002afc:	2000b948 	.word	0x2000b948
20002b00:	2000b990 	.word	0x2000b990
20002b04:	2000b4b8 	.word	0x2000b4b8
20002b08:	2000b4b4 	.word	0x2000b4b4
20002b0c:	2000b99c 	.word	0x2000b99c
20002b10:	2000b998 	.word	0x2000b998
20002b14:	e000ed04 	.word	0xe000ed04

20002b18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002b18:	b480      	push	{r7}
20002b1a:	b083      	sub	sp, #12
20002b1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
20002b1e:	4b05      	ldr	r3, [pc, #20]	; (20002b34 <xTaskGetTickCount+0x1c>)
20002b20:	681b      	ldr	r3, [r3, #0]
20002b22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
20002b24:	687b      	ldr	r3, [r7, #4]
}
20002b26:	4618      	mov	r0, r3
20002b28:	370c      	adds	r7, #12
20002b2a:	46bd      	mov	sp, r7
20002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b30:	4770      	bx	lr
20002b32:	bf00      	nop
20002b34:	2000b98c 	.word	0x2000b98c

20002b38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002b38:	b580      	push	{r7, lr}
20002b3a:	b086      	sub	sp, #24
20002b3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
20002b3e:	2300      	movs	r3, #0
20002b40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002b42:	4b4f      	ldr	r3, [pc, #316]	; (20002c80 <xTaskIncrementTick+0x148>)
20002b44:	681b      	ldr	r3, [r3, #0]
20002b46:	2b00      	cmp	r3, #0
20002b48:	f040 808f 	bne.w	20002c6a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
20002b4c:	4b4d      	ldr	r3, [pc, #308]	; (20002c84 <xTaskIncrementTick+0x14c>)
20002b4e:	681b      	ldr	r3, [r3, #0]
20002b50:	3301      	adds	r3, #1
20002b52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
20002b54:	4a4b      	ldr	r2, [pc, #300]	; (20002c84 <xTaskIncrementTick+0x14c>)
20002b56:	693b      	ldr	r3, [r7, #16]
20002b58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
20002b5a:	693b      	ldr	r3, [r7, #16]
20002b5c:	2b00      	cmp	r3, #0
20002b5e:	d120      	bne.n	20002ba2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
20002b60:	4b49      	ldr	r3, [pc, #292]	; (20002c88 <xTaskIncrementTick+0x150>)
20002b62:	681b      	ldr	r3, [r3, #0]
20002b64:	681b      	ldr	r3, [r3, #0]
20002b66:	2b00      	cmp	r3, #0
20002b68:	d00a      	beq.n	20002b80 <xTaskIncrementTick+0x48>
	__asm volatile
20002b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
20002b6e:	f383 8811 	msr	BASEPRI, r3
20002b72:	f3bf 8f6f 	isb	sy
20002b76:	f3bf 8f4f 	dsb	sy
20002b7a:	603b      	str	r3, [r7, #0]
}
20002b7c:	bf00      	nop
20002b7e:	e7fe      	b.n	20002b7e <xTaskIncrementTick+0x46>
20002b80:	4b41      	ldr	r3, [pc, #260]	; (20002c88 <xTaskIncrementTick+0x150>)
20002b82:	681b      	ldr	r3, [r3, #0]
20002b84:	60fb      	str	r3, [r7, #12]
20002b86:	4b41      	ldr	r3, [pc, #260]	; (20002c8c <xTaskIncrementTick+0x154>)
20002b88:	681b      	ldr	r3, [r3, #0]
20002b8a:	4a3f      	ldr	r2, [pc, #252]	; (20002c88 <xTaskIncrementTick+0x150>)
20002b8c:	6013      	str	r3, [r2, #0]
20002b8e:	4a3f      	ldr	r2, [pc, #252]	; (20002c8c <xTaskIncrementTick+0x154>)
20002b90:	68fb      	ldr	r3, [r7, #12]
20002b92:	6013      	str	r3, [r2, #0]
20002b94:	4b3e      	ldr	r3, [pc, #248]	; (20002c90 <xTaskIncrementTick+0x158>)
20002b96:	681b      	ldr	r3, [r3, #0]
20002b98:	3301      	adds	r3, #1
20002b9a:	4a3d      	ldr	r2, [pc, #244]	; (20002c90 <xTaskIncrementTick+0x158>)
20002b9c:	6013      	str	r3, [r2, #0]
20002b9e:	f000 fadb 	bl	20003158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
20002ba2:	4b3c      	ldr	r3, [pc, #240]	; (20002c94 <xTaskIncrementTick+0x15c>)
20002ba4:	681b      	ldr	r3, [r3, #0]
20002ba6:	693a      	ldr	r2, [r7, #16]
20002ba8:	429a      	cmp	r2, r3
20002baa:	d349      	bcc.n	20002c40 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002bac:	4b36      	ldr	r3, [pc, #216]	; (20002c88 <xTaskIncrementTick+0x150>)
20002bae:	681b      	ldr	r3, [r3, #0]
20002bb0:	681b      	ldr	r3, [r3, #0]
20002bb2:	2b00      	cmp	r3, #0
20002bb4:	d104      	bne.n	20002bc0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002bb6:	4b37      	ldr	r3, [pc, #220]	; (20002c94 <xTaskIncrementTick+0x15c>)
20002bb8:	f04f 32ff 	mov.w	r2, #4294967295
20002bbc:	601a      	str	r2, [r3, #0]
					break;
20002bbe:	e03f      	b.n	20002c40 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002bc0:	4b31      	ldr	r3, [pc, #196]	; (20002c88 <xTaskIncrementTick+0x150>)
20002bc2:	681b      	ldr	r3, [r3, #0]
20002bc4:	68db      	ldr	r3, [r3, #12]
20002bc6:	68db      	ldr	r3, [r3, #12]
20002bc8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20002bca:	68bb      	ldr	r3, [r7, #8]
20002bcc:	685b      	ldr	r3, [r3, #4]
20002bce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
20002bd0:	693a      	ldr	r2, [r7, #16]
20002bd2:	687b      	ldr	r3, [r7, #4]
20002bd4:	429a      	cmp	r2, r3
20002bd6:	d203      	bcs.n	20002be0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
20002bd8:	4a2e      	ldr	r2, [pc, #184]	; (20002c94 <xTaskIncrementTick+0x15c>)
20002bda:	687b      	ldr	r3, [r7, #4]
20002bdc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
20002bde:	e02f      	b.n	20002c40 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002be0:	68bb      	ldr	r3, [r7, #8]
20002be2:	3304      	adds	r3, #4
20002be4:	4618      	mov	r0, r3
20002be6:	f7fe fc57 	bl	20001498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002bea:	68bb      	ldr	r3, [r7, #8]
20002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002bee:	2b00      	cmp	r3, #0
20002bf0:	d004      	beq.n	20002bfc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002bf2:	68bb      	ldr	r3, [r7, #8]
20002bf4:	3318      	adds	r3, #24
20002bf6:	4618      	mov	r0, r3
20002bf8:	f7fe fc4e 	bl	20001498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002bfc:	68bb      	ldr	r3, [r7, #8]
20002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c00:	4b25      	ldr	r3, [pc, #148]	; (20002c98 <xTaskIncrementTick+0x160>)
20002c02:	681b      	ldr	r3, [r3, #0]
20002c04:	429a      	cmp	r2, r3
20002c06:	d903      	bls.n	20002c10 <xTaskIncrementTick+0xd8>
20002c08:	68bb      	ldr	r3, [r7, #8]
20002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c0c:	4a22      	ldr	r2, [pc, #136]	; (20002c98 <xTaskIncrementTick+0x160>)
20002c0e:	6013      	str	r3, [r2, #0]
20002c10:	68bb      	ldr	r3, [r7, #8]
20002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c14:	4613      	mov	r3, r2
20002c16:	009b      	lsls	r3, r3, #2
20002c18:	4413      	add	r3, r2
20002c1a:	009b      	lsls	r3, r3, #2
20002c1c:	4a1f      	ldr	r2, [pc, #124]	; (20002c9c <xTaskIncrementTick+0x164>)
20002c1e:	441a      	add	r2, r3
20002c20:	68bb      	ldr	r3, [r7, #8]
20002c22:	3304      	adds	r3, #4
20002c24:	4619      	mov	r1, r3
20002c26:	4610      	mov	r0, r2
20002c28:	f7fe fbd9 	bl	200013de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002c2c:	68bb      	ldr	r3, [r7, #8]
20002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c30:	4b1b      	ldr	r3, [pc, #108]	; (20002ca0 <xTaskIncrementTick+0x168>)
20002c32:	681b      	ldr	r3, [r3, #0]
20002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002c36:	429a      	cmp	r2, r3
20002c38:	d3b8      	bcc.n	20002bac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
20002c3a:	2301      	movs	r3, #1
20002c3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002c3e:	e7b5      	b.n	20002bac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002c40:	4b17      	ldr	r3, [pc, #92]	; (20002ca0 <xTaskIncrementTick+0x168>)
20002c42:	681b      	ldr	r3, [r3, #0]
20002c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002c46:	4915      	ldr	r1, [pc, #84]	; (20002c9c <xTaskIncrementTick+0x164>)
20002c48:	4613      	mov	r3, r2
20002c4a:	009b      	lsls	r3, r3, #2
20002c4c:	4413      	add	r3, r2
20002c4e:	009b      	lsls	r3, r3, #2
20002c50:	440b      	add	r3, r1
20002c52:	681b      	ldr	r3, [r3, #0]
20002c54:	2b01      	cmp	r3, #1
20002c56:	d901      	bls.n	20002c5c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
20002c58:	2301      	movs	r3, #1
20002c5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
20002c5c:	4b11      	ldr	r3, [pc, #68]	; (20002ca4 <xTaskIncrementTick+0x16c>)
20002c5e:	681b      	ldr	r3, [r3, #0]
20002c60:	2b00      	cmp	r3, #0
20002c62:	d007      	beq.n	20002c74 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
20002c64:	2301      	movs	r3, #1
20002c66:	617b      	str	r3, [r7, #20]
20002c68:	e004      	b.n	20002c74 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
20002c6a:	4b0f      	ldr	r3, [pc, #60]	; (20002ca8 <xTaskIncrementTick+0x170>)
20002c6c:	681b      	ldr	r3, [r3, #0]
20002c6e:	3301      	adds	r3, #1
20002c70:	4a0d      	ldr	r2, [pc, #52]	; (20002ca8 <xTaskIncrementTick+0x170>)
20002c72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
20002c74:	697b      	ldr	r3, [r7, #20]
}
20002c76:	4618      	mov	r0, r3
20002c78:	3718      	adds	r7, #24
20002c7a:	46bd      	mov	sp, r7
20002c7c:	bd80      	pop	{r7, pc}
20002c7e:	bf00      	nop
20002c80:	2000b9b0 	.word	0x2000b9b0
20002c84:	2000b98c 	.word	0x2000b98c
20002c88:	2000b940 	.word	0x2000b940
20002c8c:	2000b944 	.word	0x2000b944
20002c90:	2000b9a0 	.word	0x2000b9a0
20002c94:	2000b9a8 	.word	0x2000b9a8
20002c98:	2000b990 	.word	0x2000b990
20002c9c:	2000b4b8 	.word	0x2000b4b8
20002ca0:	2000b4b4 	.word	0x2000b4b4
20002ca4:	2000b99c 	.word	0x2000b99c
20002ca8:	2000b998 	.word	0x2000b998

20002cac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002cac:	b480      	push	{r7}
20002cae:	b085      	sub	sp, #20
20002cb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002cb2:	4b2a      	ldr	r3, [pc, #168]	; (20002d5c <vTaskSwitchContext+0xb0>)
20002cb4:	681b      	ldr	r3, [r3, #0]
20002cb6:	2b00      	cmp	r3, #0
20002cb8:	d003      	beq.n	20002cc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002cba:	4b29      	ldr	r3, [pc, #164]	; (20002d60 <vTaskSwitchContext+0xb4>)
20002cbc:	2201      	movs	r2, #1
20002cbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002cc0:	e046      	b.n	20002d50 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
20002cc2:	4b27      	ldr	r3, [pc, #156]	; (20002d60 <vTaskSwitchContext+0xb4>)
20002cc4:	2200      	movs	r2, #0
20002cc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002cc8:	4b26      	ldr	r3, [pc, #152]	; (20002d64 <vTaskSwitchContext+0xb8>)
20002cca:	681b      	ldr	r3, [r3, #0]
20002ccc:	60fb      	str	r3, [r7, #12]
20002cce:	e010      	b.n	20002cf2 <vTaskSwitchContext+0x46>
20002cd0:	68fb      	ldr	r3, [r7, #12]
20002cd2:	2b00      	cmp	r3, #0
20002cd4:	d10a      	bne.n	20002cec <vTaskSwitchContext+0x40>
	__asm volatile
20002cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
20002cda:	f383 8811 	msr	BASEPRI, r3
20002cde:	f3bf 8f6f 	isb	sy
20002ce2:	f3bf 8f4f 	dsb	sy
20002ce6:	607b      	str	r3, [r7, #4]
}
20002ce8:	bf00      	nop
20002cea:	e7fe      	b.n	20002cea <vTaskSwitchContext+0x3e>
20002cec:	68fb      	ldr	r3, [r7, #12]
20002cee:	3b01      	subs	r3, #1
20002cf0:	60fb      	str	r3, [r7, #12]
20002cf2:	491d      	ldr	r1, [pc, #116]	; (20002d68 <vTaskSwitchContext+0xbc>)
20002cf4:	68fa      	ldr	r2, [r7, #12]
20002cf6:	4613      	mov	r3, r2
20002cf8:	009b      	lsls	r3, r3, #2
20002cfa:	4413      	add	r3, r2
20002cfc:	009b      	lsls	r3, r3, #2
20002cfe:	440b      	add	r3, r1
20002d00:	681b      	ldr	r3, [r3, #0]
20002d02:	2b00      	cmp	r3, #0
20002d04:	d0e4      	beq.n	20002cd0 <vTaskSwitchContext+0x24>
20002d06:	68fa      	ldr	r2, [r7, #12]
20002d08:	4613      	mov	r3, r2
20002d0a:	009b      	lsls	r3, r3, #2
20002d0c:	4413      	add	r3, r2
20002d0e:	009b      	lsls	r3, r3, #2
20002d10:	4a15      	ldr	r2, [pc, #84]	; (20002d68 <vTaskSwitchContext+0xbc>)
20002d12:	4413      	add	r3, r2
20002d14:	60bb      	str	r3, [r7, #8]
20002d16:	68bb      	ldr	r3, [r7, #8]
20002d18:	685b      	ldr	r3, [r3, #4]
20002d1a:	685a      	ldr	r2, [r3, #4]
20002d1c:	68bb      	ldr	r3, [r7, #8]
20002d1e:	605a      	str	r2, [r3, #4]
20002d20:	68bb      	ldr	r3, [r7, #8]
20002d22:	685a      	ldr	r2, [r3, #4]
20002d24:	68bb      	ldr	r3, [r7, #8]
20002d26:	3308      	adds	r3, #8
20002d28:	429a      	cmp	r2, r3
20002d2a:	d104      	bne.n	20002d36 <vTaskSwitchContext+0x8a>
20002d2c:	68bb      	ldr	r3, [r7, #8]
20002d2e:	685b      	ldr	r3, [r3, #4]
20002d30:	685a      	ldr	r2, [r3, #4]
20002d32:	68bb      	ldr	r3, [r7, #8]
20002d34:	605a      	str	r2, [r3, #4]
20002d36:	68bb      	ldr	r3, [r7, #8]
20002d38:	685b      	ldr	r3, [r3, #4]
20002d3a:	68db      	ldr	r3, [r3, #12]
20002d3c:	4a0b      	ldr	r2, [pc, #44]	; (20002d6c <vTaskSwitchContext+0xc0>)
20002d3e:	6013      	str	r3, [r2, #0]
20002d40:	4a08      	ldr	r2, [pc, #32]	; (20002d64 <vTaskSwitchContext+0xb8>)
20002d42:	68fb      	ldr	r3, [r7, #12]
20002d44:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
20002d46:	4b09      	ldr	r3, [pc, #36]	; (20002d6c <vTaskSwitchContext+0xc0>)
20002d48:	681b      	ldr	r3, [r3, #0]
20002d4a:	3354      	adds	r3, #84	; 0x54
20002d4c:	4a08      	ldr	r2, [pc, #32]	; (20002d70 <vTaskSwitchContext+0xc4>)
20002d4e:	6013      	str	r3, [r2, #0]
}
20002d50:	bf00      	nop
20002d52:	3714      	adds	r7, #20
20002d54:	46bd      	mov	sp, r7
20002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
20002d5a:	4770      	bx	lr
20002d5c:	2000b9b0 	.word	0x2000b9b0
20002d60:	2000b99c 	.word	0x2000b99c
20002d64:	2000b990 	.word	0x2000b990
20002d68:	2000b4b8 	.word	0x2000b4b8
20002d6c:	2000b4b4 	.word	0x2000b4b4
20002d70:	2000ac74 	.word	0x2000ac74

20002d74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002d74:	b580      	push	{r7, lr}
20002d76:	b084      	sub	sp, #16
20002d78:	af00      	add	r7, sp, #0
20002d7a:	6078      	str	r0, [r7, #4]
20002d7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002d7e:	687b      	ldr	r3, [r7, #4]
20002d80:	2b00      	cmp	r3, #0
20002d82:	d10a      	bne.n	20002d9a <vTaskPlaceOnEventList+0x26>
	__asm volatile
20002d84:	f04f 0350 	mov.w	r3, #80	; 0x50
20002d88:	f383 8811 	msr	BASEPRI, r3
20002d8c:	f3bf 8f6f 	isb	sy
20002d90:	f3bf 8f4f 	dsb	sy
20002d94:	60fb      	str	r3, [r7, #12]
}
20002d96:	bf00      	nop
20002d98:	e7fe      	b.n	20002d98 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002d9a:	4b07      	ldr	r3, [pc, #28]	; (20002db8 <vTaskPlaceOnEventList+0x44>)
20002d9c:	681b      	ldr	r3, [r3, #0]
20002d9e:	3318      	adds	r3, #24
20002da0:	4619      	mov	r1, r3
20002da2:	6878      	ldr	r0, [r7, #4]
20002da4:	f7fe fb3f 	bl	20001426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002da8:	2101      	movs	r1, #1
20002daa:	6838      	ldr	r0, [r7, #0]
20002dac:	f000 fb7e 	bl	200034ac <prvAddCurrentTaskToDelayedList>
}
20002db0:	bf00      	nop
20002db2:	3710      	adds	r7, #16
20002db4:	46bd      	mov	sp, r7
20002db6:	bd80      	pop	{r7, pc}
20002db8:	2000b4b4 	.word	0x2000b4b4

20002dbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002dbc:	b580      	push	{r7, lr}
20002dbe:	b086      	sub	sp, #24
20002dc0:	af00      	add	r7, sp, #0
20002dc2:	60f8      	str	r0, [r7, #12]
20002dc4:	60b9      	str	r1, [r7, #8]
20002dc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002dc8:	68fb      	ldr	r3, [r7, #12]
20002dca:	2b00      	cmp	r3, #0
20002dcc:	d10a      	bne.n	20002de4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
20002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
20002dd2:	f383 8811 	msr	BASEPRI, r3
20002dd6:	f3bf 8f6f 	isb	sy
20002dda:	f3bf 8f4f 	dsb	sy
20002dde:	617b      	str	r3, [r7, #20]
}
20002de0:	bf00      	nop
20002de2:	e7fe      	b.n	20002de2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002de4:	4b0a      	ldr	r3, [pc, #40]	; (20002e10 <vTaskPlaceOnEventListRestricted+0x54>)
20002de6:	681b      	ldr	r3, [r3, #0]
20002de8:	3318      	adds	r3, #24
20002dea:	4619      	mov	r1, r3
20002dec:	68f8      	ldr	r0, [r7, #12]
20002dee:	f7fe faf6 	bl	200013de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002df2:	687b      	ldr	r3, [r7, #4]
20002df4:	2b00      	cmp	r3, #0
20002df6:	d002      	beq.n	20002dfe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
20002df8:	f04f 33ff 	mov.w	r3, #4294967295
20002dfc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002dfe:	6879      	ldr	r1, [r7, #4]
20002e00:	68b8      	ldr	r0, [r7, #8]
20002e02:	f000 fb53 	bl	200034ac <prvAddCurrentTaskToDelayedList>
	}
20002e06:	bf00      	nop
20002e08:	3718      	adds	r7, #24
20002e0a:	46bd      	mov	sp, r7
20002e0c:	bd80      	pop	{r7, pc}
20002e0e:	bf00      	nop
20002e10:	2000b4b4 	.word	0x2000b4b4

20002e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002e14:	b580      	push	{r7, lr}
20002e16:	b086      	sub	sp, #24
20002e18:	af00      	add	r7, sp, #0
20002e1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002e1c:	687b      	ldr	r3, [r7, #4]
20002e1e:	68db      	ldr	r3, [r3, #12]
20002e20:	68db      	ldr	r3, [r3, #12]
20002e22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
20002e24:	693b      	ldr	r3, [r7, #16]
20002e26:	2b00      	cmp	r3, #0
20002e28:	d10a      	bne.n	20002e40 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
20002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
20002e2e:	f383 8811 	msr	BASEPRI, r3
20002e32:	f3bf 8f6f 	isb	sy
20002e36:	f3bf 8f4f 	dsb	sy
20002e3a:	60fb      	str	r3, [r7, #12]
}
20002e3c:	bf00      	nop
20002e3e:	e7fe      	b.n	20002e3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002e40:	693b      	ldr	r3, [r7, #16]
20002e42:	3318      	adds	r3, #24
20002e44:	4618      	mov	r0, r3
20002e46:	f7fe fb27 	bl	20001498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002e4a:	4b1e      	ldr	r3, [pc, #120]	; (20002ec4 <xTaskRemoveFromEventList+0xb0>)
20002e4c:	681b      	ldr	r3, [r3, #0]
20002e4e:	2b00      	cmp	r3, #0
20002e50:	d11d      	bne.n	20002e8e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002e52:	693b      	ldr	r3, [r7, #16]
20002e54:	3304      	adds	r3, #4
20002e56:	4618      	mov	r0, r3
20002e58:	f7fe fb1e 	bl	20001498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002e5c:	693b      	ldr	r3, [r7, #16]
20002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e60:	4b19      	ldr	r3, [pc, #100]	; (20002ec8 <xTaskRemoveFromEventList+0xb4>)
20002e62:	681b      	ldr	r3, [r3, #0]
20002e64:	429a      	cmp	r2, r3
20002e66:	d903      	bls.n	20002e70 <xTaskRemoveFromEventList+0x5c>
20002e68:	693b      	ldr	r3, [r7, #16]
20002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e6c:	4a16      	ldr	r2, [pc, #88]	; (20002ec8 <xTaskRemoveFromEventList+0xb4>)
20002e6e:	6013      	str	r3, [r2, #0]
20002e70:	693b      	ldr	r3, [r7, #16]
20002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e74:	4613      	mov	r3, r2
20002e76:	009b      	lsls	r3, r3, #2
20002e78:	4413      	add	r3, r2
20002e7a:	009b      	lsls	r3, r3, #2
20002e7c:	4a13      	ldr	r2, [pc, #76]	; (20002ecc <xTaskRemoveFromEventList+0xb8>)
20002e7e:	441a      	add	r2, r3
20002e80:	693b      	ldr	r3, [r7, #16]
20002e82:	3304      	adds	r3, #4
20002e84:	4619      	mov	r1, r3
20002e86:	4610      	mov	r0, r2
20002e88:	f7fe faa9 	bl	200013de <vListInsertEnd>
20002e8c:	e005      	b.n	20002e9a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002e8e:	693b      	ldr	r3, [r7, #16]
20002e90:	3318      	adds	r3, #24
20002e92:	4619      	mov	r1, r3
20002e94:	480e      	ldr	r0, [pc, #56]	; (20002ed0 <xTaskRemoveFromEventList+0xbc>)
20002e96:	f7fe faa2 	bl	200013de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002e9a:	693b      	ldr	r3, [r7, #16]
20002e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e9e:	4b0d      	ldr	r3, [pc, #52]	; (20002ed4 <xTaskRemoveFromEventList+0xc0>)
20002ea0:	681b      	ldr	r3, [r3, #0]
20002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002ea4:	429a      	cmp	r2, r3
20002ea6:	d905      	bls.n	20002eb4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002ea8:	2301      	movs	r3, #1
20002eaa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002eac:	4b0a      	ldr	r3, [pc, #40]	; (20002ed8 <xTaskRemoveFromEventList+0xc4>)
20002eae:	2201      	movs	r2, #1
20002eb0:	601a      	str	r2, [r3, #0]
20002eb2:	e001      	b.n	20002eb8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
20002eb4:	2300      	movs	r3, #0
20002eb6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
20002eb8:	697b      	ldr	r3, [r7, #20]
}
20002eba:	4618      	mov	r0, r3
20002ebc:	3718      	adds	r7, #24
20002ebe:	46bd      	mov	sp, r7
20002ec0:	bd80      	pop	{r7, pc}
20002ec2:	bf00      	nop
20002ec4:	2000b9b0 	.word	0x2000b9b0
20002ec8:	2000b990 	.word	0x2000b990
20002ecc:	2000b4b8 	.word	0x2000b4b8
20002ed0:	2000b948 	.word	0x2000b948
20002ed4:	2000b4b4 	.word	0x2000b4b4
20002ed8:	2000b99c 	.word	0x2000b99c

20002edc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002edc:	b480      	push	{r7}
20002ede:	b083      	sub	sp, #12
20002ee0:	af00      	add	r7, sp, #0
20002ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002ee4:	4b06      	ldr	r3, [pc, #24]	; (20002f00 <vTaskInternalSetTimeOutState+0x24>)
20002ee6:	681a      	ldr	r2, [r3, #0]
20002ee8:	687b      	ldr	r3, [r7, #4]
20002eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002eec:	4b05      	ldr	r3, [pc, #20]	; (20002f04 <vTaskInternalSetTimeOutState+0x28>)
20002eee:	681a      	ldr	r2, [r3, #0]
20002ef0:	687b      	ldr	r3, [r7, #4]
20002ef2:	605a      	str	r2, [r3, #4]
}
20002ef4:	bf00      	nop
20002ef6:	370c      	adds	r7, #12
20002ef8:	46bd      	mov	sp, r7
20002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
20002efe:	4770      	bx	lr
20002f00:	2000b9a0 	.word	0x2000b9a0
20002f04:	2000b98c 	.word	0x2000b98c

20002f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002f08:	b580      	push	{r7, lr}
20002f0a:	b088      	sub	sp, #32
20002f0c:	af00      	add	r7, sp, #0
20002f0e:	6078      	str	r0, [r7, #4]
20002f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002f12:	687b      	ldr	r3, [r7, #4]
20002f14:	2b00      	cmp	r3, #0
20002f16:	d10a      	bne.n	20002f2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
20002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
20002f1c:	f383 8811 	msr	BASEPRI, r3
20002f20:	f3bf 8f6f 	isb	sy
20002f24:	f3bf 8f4f 	dsb	sy
20002f28:	613b      	str	r3, [r7, #16]
}
20002f2a:	bf00      	nop
20002f2c:	e7fe      	b.n	20002f2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
20002f2e:	683b      	ldr	r3, [r7, #0]
20002f30:	2b00      	cmp	r3, #0
20002f32:	d10a      	bne.n	20002f4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
20002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
20002f38:	f383 8811 	msr	BASEPRI, r3
20002f3c:	f3bf 8f6f 	isb	sy
20002f40:	f3bf 8f4f 	dsb	sy
20002f44:	60fb      	str	r3, [r7, #12]
}
20002f46:	bf00      	nop
20002f48:	e7fe      	b.n	20002f48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
20002f4a:	f000 ff7b 	bl	20003e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002f4e:	4b1d      	ldr	r3, [pc, #116]	; (20002fc4 <xTaskCheckForTimeOut+0xbc>)
20002f50:	681b      	ldr	r3, [r3, #0]
20002f52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
20002f54:	687b      	ldr	r3, [r7, #4]
20002f56:	685b      	ldr	r3, [r3, #4]
20002f58:	69ba      	ldr	r2, [r7, #24]
20002f5a:	1ad3      	subs	r3, r2, r3
20002f5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002f5e:	683b      	ldr	r3, [r7, #0]
20002f60:	681b      	ldr	r3, [r3, #0]
20002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
20002f66:	d102      	bne.n	20002f6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002f68:	2300      	movs	r3, #0
20002f6a:	61fb      	str	r3, [r7, #28]
20002f6c:	e023      	b.n	20002fb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002f6e:	687b      	ldr	r3, [r7, #4]
20002f70:	681a      	ldr	r2, [r3, #0]
20002f72:	4b15      	ldr	r3, [pc, #84]	; (20002fc8 <xTaskCheckForTimeOut+0xc0>)
20002f74:	681b      	ldr	r3, [r3, #0]
20002f76:	429a      	cmp	r2, r3
20002f78:	d007      	beq.n	20002f8a <xTaskCheckForTimeOut+0x82>
20002f7a:	687b      	ldr	r3, [r7, #4]
20002f7c:	685b      	ldr	r3, [r3, #4]
20002f7e:	69ba      	ldr	r2, [r7, #24]
20002f80:	429a      	cmp	r2, r3
20002f82:	d302      	bcc.n	20002f8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002f84:	2301      	movs	r3, #1
20002f86:	61fb      	str	r3, [r7, #28]
20002f88:	e015      	b.n	20002fb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002f8a:	683b      	ldr	r3, [r7, #0]
20002f8c:	681b      	ldr	r3, [r3, #0]
20002f8e:	697a      	ldr	r2, [r7, #20]
20002f90:	429a      	cmp	r2, r3
20002f92:	d20b      	bcs.n	20002fac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
20002f94:	683b      	ldr	r3, [r7, #0]
20002f96:	681a      	ldr	r2, [r3, #0]
20002f98:	697b      	ldr	r3, [r7, #20]
20002f9a:	1ad2      	subs	r2, r2, r3
20002f9c:	683b      	ldr	r3, [r7, #0]
20002f9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
20002fa0:	6878      	ldr	r0, [r7, #4]
20002fa2:	f7ff ff9b 	bl	20002edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
20002fa6:	2300      	movs	r3, #0
20002fa8:	61fb      	str	r3, [r7, #28]
20002faa:	e004      	b.n	20002fb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
20002fac:	683b      	ldr	r3, [r7, #0]
20002fae:	2200      	movs	r2, #0
20002fb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
20002fb2:	2301      	movs	r3, #1
20002fb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
20002fb6:	f000 ff75 	bl	20003ea4 <vPortExitCritical>

	return xReturn;
20002fba:	69fb      	ldr	r3, [r7, #28]
}
20002fbc:	4618      	mov	r0, r3
20002fbe:	3720      	adds	r7, #32
20002fc0:	46bd      	mov	sp, r7
20002fc2:	bd80      	pop	{r7, pc}
20002fc4:	2000b98c 	.word	0x2000b98c
20002fc8:	2000b9a0 	.word	0x2000b9a0

20002fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002fcc:	b480      	push	{r7}
20002fce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002fd0:	4b03      	ldr	r3, [pc, #12]	; (20002fe0 <vTaskMissedYield+0x14>)
20002fd2:	2201      	movs	r2, #1
20002fd4:	601a      	str	r2, [r3, #0]
}
20002fd6:	bf00      	nop
20002fd8:	46bd      	mov	sp, r7
20002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
20002fde:	4770      	bx	lr
20002fe0:	2000b99c 	.word	0x2000b99c

20002fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002fe4:	b580      	push	{r7, lr}
20002fe6:	b082      	sub	sp, #8
20002fe8:	af00      	add	r7, sp, #0
20002fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002fec:	f000 f852 	bl	20003094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002ff0:	4b06      	ldr	r3, [pc, #24]	; (2000300c <prvIdleTask+0x28>)
20002ff2:	681b      	ldr	r3, [r3, #0]
20002ff4:	2b01      	cmp	r3, #1
20002ff6:	d9f9      	bls.n	20002fec <prvIdleTask+0x8>
			{
				taskYIELD();
20002ff8:	4b05      	ldr	r3, [pc, #20]	; (20003010 <prvIdleTask+0x2c>)
20002ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002ffe:	601a      	str	r2, [r3, #0]
20003000:	f3bf 8f4f 	dsb	sy
20003004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
20003008:	e7f0      	b.n	20002fec <prvIdleTask+0x8>
2000300a:	bf00      	nop
2000300c:	2000b4b8 	.word	0x2000b4b8
20003010:	e000ed04 	.word	0xe000ed04

20003014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20003014:	b580      	push	{r7, lr}
20003016:	b082      	sub	sp, #8
20003018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
2000301a:	2300      	movs	r3, #0
2000301c:	607b      	str	r3, [r7, #4]
2000301e:	e00c      	b.n	2000303a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20003020:	687a      	ldr	r2, [r7, #4]
20003022:	4613      	mov	r3, r2
20003024:	009b      	lsls	r3, r3, #2
20003026:	4413      	add	r3, r2
20003028:	009b      	lsls	r3, r3, #2
2000302a:	4a12      	ldr	r2, [pc, #72]	; (20003074 <prvInitialiseTaskLists+0x60>)
2000302c:	4413      	add	r3, r2
2000302e:	4618      	mov	r0, r3
20003030:	f7fe f9a8 	bl	20001384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20003034:	687b      	ldr	r3, [r7, #4]
20003036:	3301      	adds	r3, #1
20003038:	607b      	str	r3, [r7, #4]
2000303a:	687b      	ldr	r3, [r7, #4]
2000303c:	2b37      	cmp	r3, #55	; 0x37
2000303e:	d9ef      	bls.n	20003020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
20003040:	480d      	ldr	r0, [pc, #52]	; (20003078 <prvInitialiseTaskLists+0x64>)
20003042:	f7fe f99f 	bl	20001384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20003046:	480d      	ldr	r0, [pc, #52]	; (2000307c <prvInitialiseTaskLists+0x68>)
20003048:	f7fe f99c 	bl	20001384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
2000304c:	480c      	ldr	r0, [pc, #48]	; (20003080 <prvInitialiseTaskLists+0x6c>)
2000304e:	f7fe f999 	bl	20001384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20003052:	480c      	ldr	r0, [pc, #48]	; (20003084 <prvInitialiseTaskLists+0x70>)
20003054:	f7fe f996 	bl	20001384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20003058:	480b      	ldr	r0, [pc, #44]	; (20003088 <prvInitialiseTaskLists+0x74>)
2000305a:	f7fe f993 	bl	20001384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
2000305e:	4b0b      	ldr	r3, [pc, #44]	; (2000308c <prvInitialiseTaskLists+0x78>)
20003060:	4a05      	ldr	r2, [pc, #20]	; (20003078 <prvInitialiseTaskLists+0x64>)
20003062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20003064:	4b0a      	ldr	r3, [pc, #40]	; (20003090 <prvInitialiseTaskLists+0x7c>)
20003066:	4a05      	ldr	r2, [pc, #20]	; (2000307c <prvInitialiseTaskLists+0x68>)
20003068:	601a      	str	r2, [r3, #0]
}
2000306a:	bf00      	nop
2000306c:	3708      	adds	r7, #8
2000306e:	46bd      	mov	sp, r7
20003070:	bd80      	pop	{r7, pc}
20003072:	bf00      	nop
20003074:	2000b4b8 	.word	0x2000b4b8
20003078:	2000b918 	.word	0x2000b918
2000307c:	2000b92c 	.word	0x2000b92c
20003080:	2000b948 	.word	0x2000b948
20003084:	2000b95c 	.word	0x2000b95c
20003088:	2000b974 	.word	0x2000b974
2000308c:	2000b940 	.word	0x2000b940
20003090:	2000b944 	.word	0x2000b944

20003094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20003094:	b580      	push	{r7, lr}
20003096:	b082      	sub	sp, #8
20003098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
2000309a:	e019      	b.n	200030d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
2000309c:	f000 fed2 	bl	20003e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200030a0:	4b10      	ldr	r3, [pc, #64]	; (200030e4 <prvCheckTasksWaitingTermination+0x50>)
200030a2:	68db      	ldr	r3, [r3, #12]
200030a4:	68db      	ldr	r3, [r3, #12]
200030a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200030a8:	687b      	ldr	r3, [r7, #4]
200030aa:	3304      	adds	r3, #4
200030ac:	4618      	mov	r0, r3
200030ae:	f7fe f9f3 	bl	20001498 <uxListRemove>
				--uxCurrentNumberOfTasks;
200030b2:	4b0d      	ldr	r3, [pc, #52]	; (200030e8 <prvCheckTasksWaitingTermination+0x54>)
200030b4:	681b      	ldr	r3, [r3, #0]
200030b6:	3b01      	subs	r3, #1
200030b8:	4a0b      	ldr	r2, [pc, #44]	; (200030e8 <prvCheckTasksWaitingTermination+0x54>)
200030ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
200030bc:	4b0b      	ldr	r3, [pc, #44]	; (200030ec <prvCheckTasksWaitingTermination+0x58>)
200030be:	681b      	ldr	r3, [r3, #0]
200030c0:	3b01      	subs	r3, #1
200030c2:	4a0a      	ldr	r2, [pc, #40]	; (200030ec <prvCheckTasksWaitingTermination+0x58>)
200030c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
200030c6:	f000 feed 	bl	20003ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
200030ca:	6878      	ldr	r0, [r7, #4]
200030cc:	f000 f810 	bl	200030f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
200030d0:	4b06      	ldr	r3, [pc, #24]	; (200030ec <prvCheckTasksWaitingTermination+0x58>)
200030d2:	681b      	ldr	r3, [r3, #0]
200030d4:	2b00      	cmp	r3, #0
200030d6:	d1e1      	bne.n	2000309c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
200030d8:	bf00      	nop
200030da:	bf00      	nop
200030dc:	3708      	adds	r7, #8
200030de:	46bd      	mov	sp, r7
200030e0:	bd80      	pop	{r7, pc}
200030e2:	bf00      	nop
200030e4:	2000b95c 	.word	0x2000b95c
200030e8:	2000b988 	.word	0x2000b988
200030ec:	2000b970 	.word	0x2000b970

200030f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
200030f0:	b580      	push	{r7, lr}
200030f2:	b084      	sub	sp, #16
200030f4:	af00      	add	r7, sp, #0
200030f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
200030f8:	687b      	ldr	r3, [r7, #4]
200030fa:	3354      	adds	r3, #84	; 0x54
200030fc:	4618      	mov	r0, r3
200030fe:	f003 fd83 	bl	20006c08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
20003102:	687b      	ldr	r3, [r7, #4]
20003104:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20003108:	2b00      	cmp	r3, #0
2000310a:	d108      	bne.n	2000311e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
2000310c:	687b      	ldr	r3, [r7, #4]
2000310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20003110:	4618      	mov	r0, r3
20003112:	f001 f885 	bl	20004220 <vPortFree>
				vPortFree( pxTCB );
20003116:	6878      	ldr	r0, [r7, #4]
20003118:	f001 f882 	bl	20004220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
2000311c:	e018      	b.n	20003150 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
2000311e:	687b      	ldr	r3, [r7, #4]
20003120:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20003124:	2b01      	cmp	r3, #1
20003126:	d103      	bne.n	20003130 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
20003128:	6878      	ldr	r0, [r7, #4]
2000312a:	f001 f879 	bl	20004220 <vPortFree>
	}
2000312e:	e00f      	b.n	20003150 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
20003130:	687b      	ldr	r3, [r7, #4]
20003132:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20003136:	2b02      	cmp	r3, #2
20003138:	d00a      	beq.n	20003150 <prvDeleteTCB+0x60>
	__asm volatile
2000313a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000313e:	f383 8811 	msr	BASEPRI, r3
20003142:	f3bf 8f6f 	isb	sy
20003146:	f3bf 8f4f 	dsb	sy
2000314a:	60fb      	str	r3, [r7, #12]
}
2000314c:	bf00      	nop
2000314e:	e7fe      	b.n	2000314e <prvDeleteTCB+0x5e>
	}
20003150:	bf00      	nop
20003152:	3710      	adds	r7, #16
20003154:	46bd      	mov	sp, r7
20003156:	bd80      	pop	{r7, pc}

20003158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20003158:	b480      	push	{r7}
2000315a:	b083      	sub	sp, #12
2000315c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2000315e:	4b0c      	ldr	r3, [pc, #48]	; (20003190 <prvResetNextTaskUnblockTime+0x38>)
20003160:	681b      	ldr	r3, [r3, #0]
20003162:	681b      	ldr	r3, [r3, #0]
20003164:	2b00      	cmp	r3, #0
20003166:	d104      	bne.n	20003172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20003168:	4b0a      	ldr	r3, [pc, #40]	; (20003194 <prvResetNextTaskUnblockTime+0x3c>)
2000316a:	f04f 32ff 	mov.w	r2, #4294967295
2000316e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
20003170:	e008      	b.n	20003184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20003172:	4b07      	ldr	r3, [pc, #28]	; (20003190 <prvResetNextTaskUnblockTime+0x38>)
20003174:	681b      	ldr	r3, [r3, #0]
20003176:	68db      	ldr	r3, [r3, #12]
20003178:	68db      	ldr	r3, [r3, #12]
2000317a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
2000317c:	687b      	ldr	r3, [r7, #4]
2000317e:	685b      	ldr	r3, [r3, #4]
20003180:	4a04      	ldr	r2, [pc, #16]	; (20003194 <prvResetNextTaskUnblockTime+0x3c>)
20003182:	6013      	str	r3, [r2, #0]
}
20003184:	bf00      	nop
20003186:	370c      	adds	r7, #12
20003188:	46bd      	mov	sp, r7
2000318a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000318e:	4770      	bx	lr
20003190:	2000b940 	.word	0x2000b940
20003194:	2000b9a8 	.word	0x2000b9a8

20003198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20003198:	b480      	push	{r7}
2000319a:	b083      	sub	sp, #12
2000319c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
2000319e:	4b0b      	ldr	r3, [pc, #44]	; (200031cc <xTaskGetSchedulerState+0x34>)
200031a0:	681b      	ldr	r3, [r3, #0]
200031a2:	2b00      	cmp	r3, #0
200031a4:	d102      	bne.n	200031ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
200031a6:	2301      	movs	r3, #1
200031a8:	607b      	str	r3, [r7, #4]
200031aa:	e008      	b.n	200031be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200031ac:	4b08      	ldr	r3, [pc, #32]	; (200031d0 <xTaskGetSchedulerState+0x38>)
200031ae:	681b      	ldr	r3, [r3, #0]
200031b0:	2b00      	cmp	r3, #0
200031b2:	d102      	bne.n	200031ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
200031b4:	2302      	movs	r3, #2
200031b6:	607b      	str	r3, [r7, #4]
200031b8:	e001      	b.n	200031be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
200031ba:	2300      	movs	r3, #0
200031bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
200031be:	687b      	ldr	r3, [r7, #4]
	}
200031c0:	4618      	mov	r0, r3
200031c2:	370c      	adds	r7, #12
200031c4:	46bd      	mov	sp, r7
200031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200031ca:	4770      	bx	lr
200031cc:	2000b994 	.word	0x2000b994
200031d0:	2000b9b0 	.word	0x2000b9b0

200031d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
200031d4:	b580      	push	{r7, lr}
200031d6:	b084      	sub	sp, #16
200031d8:	af00      	add	r7, sp, #0
200031da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
200031dc:	687b      	ldr	r3, [r7, #4]
200031de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
200031e0:	2300      	movs	r3, #0
200031e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
200031e4:	687b      	ldr	r3, [r7, #4]
200031e6:	2b00      	cmp	r3, #0
200031e8:	d051      	beq.n	2000328e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
200031ea:	68bb      	ldr	r3, [r7, #8]
200031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200031ee:	4b2a      	ldr	r3, [pc, #168]	; (20003298 <xTaskPriorityInherit+0xc4>)
200031f0:	681b      	ldr	r3, [r3, #0]
200031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200031f4:	429a      	cmp	r2, r3
200031f6:	d241      	bcs.n	2000327c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
200031f8:	68bb      	ldr	r3, [r7, #8]
200031fa:	699b      	ldr	r3, [r3, #24]
200031fc:	2b00      	cmp	r3, #0
200031fe:	db06      	blt.n	2000320e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003200:	4b25      	ldr	r3, [pc, #148]	; (20003298 <xTaskPriorityInherit+0xc4>)
20003202:	681b      	ldr	r3, [r3, #0]
20003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
2000320a:	68bb      	ldr	r3, [r7, #8]
2000320c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
2000320e:	68bb      	ldr	r3, [r7, #8]
20003210:	6959      	ldr	r1, [r3, #20]
20003212:	68bb      	ldr	r3, [r7, #8]
20003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003216:	4613      	mov	r3, r2
20003218:	009b      	lsls	r3, r3, #2
2000321a:	4413      	add	r3, r2
2000321c:	009b      	lsls	r3, r3, #2
2000321e:	4a1f      	ldr	r2, [pc, #124]	; (2000329c <xTaskPriorityInherit+0xc8>)
20003220:	4413      	add	r3, r2
20003222:	4299      	cmp	r1, r3
20003224:	d122      	bne.n	2000326c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003226:	68bb      	ldr	r3, [r7, #8]
20003228:	3304      	adds	r3, #4
2000322a:	4618      	mov	r0, r3
2000322c:	f7fe f934 	bl	20001498 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
20003230:	4b19      	ldr	r3, [pc, #100]	; (20003298 <xTaskPriorityInherit+0xc4>)
20003232:	681b      	ldr	r3, [r3, #0]
20003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003236:	68bb      	ldr	r3, [r7, #8]
20003238:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
2000323a:	68bb      	ldr	r3, [r7, #8]
2000323c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000323e:	4b18      	ldr	r3, [pc, #96]	; (200032a0 <xTaskPriorityInherit+0xcc>)
20003240:	681b      	ldr	r3, [r3, #0]
20003242:	429a      	cmp	r2, r3
20003244:	d903      	bls.n	2000324e <xTaskPriorityInherit+0x7a>
20003246:	68bb      	ldr	r3, [r7, #8]
20003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000324a:	4a15      	ldr	r2, [pc, #84]	; (200032a0 <xTaskPriorityInherit+0xcc>)
2000324c:	6013      	str	r3, [r2, #0]
2000324e:	68bb      	ldr	r3, [r7, #8]
20003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003252:	4613      	mov	r3, r2
20003254:	009b      	lsls	r3, r3, #2
20003256:	4413      	add	r3, r2
20003258:	009b      	lsls	r3, r3, #2
2000325a:	4a10      	ldr	r2, [pc, #64]	; (2000329c <xTaskPriorityInherit+0xc8>)
2000325c:	441a      	add	r2, r3
2000325e:	68bb      	ldr	r3, [r7, #8]
20003260:	3304      	adds	r3, #4
20003262:	4619      	mov	r1, r3
20003264:	4610      	mov	r0, r2
20003266:	f7fe f8ba 	bl	200013de <vListInsertEnd>
2000326a:	e004      	b.n	20003276 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
2000326c:	4b0a      	ldr	r3, [pc, #40]	; (20003298 <xTaskPriorityInherit+0xc4>)
2000326e:	681b      	ldr	r3, [r3, #0]
20003270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003272:	68bb      	ldr	r3, [r7, #8]
20003274:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
20003276:	2301      	movs	r3, #1
20003278:	60fb      	str	r3, [r7, #12]
2000327a:	e008      	b.n	2000328e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
2000327c:	68bb      	ldr	r3, [r7, #8]
2000327e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20003280:	4b05      	ldr	r3, [pc, #20]	; (20003298 <xTaskPriorityInherit+0xc4>)
20003282:	681b      	ldr	r3, [r3, #0]
20003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003286:	429a      	cmp	r2, r3
20003288:	d201      	bcs.n	2000328e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
2000328a:	2301      	movs	r3, #1
2000328c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
2000328e:	68fb      	ldr	r3, [r7, #12]
	}
20003290:	4618      	mov	r0, r3
20003292:	3710      	adds	r7, #16
20003294:	46bd      	mov	sp, r7
20003296:	bd80      	pop	{r7, pc}
20003298:	2000b4b4 	.word	0x2000b4b4
2000329c:	2000b4b8 	.word	0x2000b4b8
200032a0:	2000b990 	.word	0x2000b990

200032a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
200032a4:	b580      	push	{r7, lr}
200032a6:	b086      	sub	sp, #24
200032a8:	af00      	add	r7, sp, #0
200032aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
200032ac:	687b      	ldr	r3, [r7, #4]
200032ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
200032b0:	2300      	movs	r3, #0
200032b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
200032b4:	687b      	ldr	r3, [r7, #4]
200032b6:	2b00      	cmp	r3, #0
200032b8:	d056      	beq.n	20003368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
200032ba:	4b2e      	ldr	r3, [pc, #184]	; (20003374 <xTaskPriorityDisinherit+0xd0>)
200032bc:	681b      	ldr	r3, [r3, #0]
200032be:	693a      	ldr	r2, [r7, #16]
200032c0:	429a      	cmp	r2, r3
200032c2:	d00a      	beq.n	200032da <xTaskPriorityDisinherit+0x36>
	__asm volatile
200032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
200032c8:	f383 8811 	msr	BASEPRI, r3
200032cc:	f3bf 8f6f 	isb	sy
200032d0:	f3bf 8f4f 	dsb	sy
200032d4:	60fb      	str	r3, [r7, #12]
}
200032d6:	bf00      	nop
200032d8:	e7fe      	b.n	200032d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
200032da:	693b      	ldr	r3, [r7, #16]
200032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200032de:	2b00      	cmp	r3, #0
200032e0:	d10a      	bne.n	200032f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
200032e2:	f04f 0350 	mov.w	r3, #80	; 0x50
200032e6:	f383 8811 	msr	BASEPRI, r3
200032ea:	f3bf 8f6f 	isb	sy
200032ee:	f3bf 8f4f 	dsb	sy
200032f2:	60bb      	str	r3, [r7, #8]
}
200032f4:	bf00      	nop
200032f6:	e7fe      	b.n	200032f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
200032f8:	693b      	ldr	r3, [r7, #16]
200032fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200032fc:	1e5a      	subs	r2, r3, #1
200032fe:	693b      	ldr	r3, [r7, #16]
20003300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20003302:	693b      	ldr	r3, [r7, #16]
20003304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003306:	693b      	ldr	r3, [r7, #16]
20003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000330a:	429a      	cmp	r2, r3
2000330c:	d02c      	beq.n	20003368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
2000330e:	693b      	ldr	r3, [r7, #16]
20003310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20003312:	2b00      	cmp	r3, #0
20003314:	d128      	bne.n	20003368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003316:	693b      	ldr	r3, [r7, #16]
20003318:	3304      	adds	r3, #4
2000331a:	4618      	mov	r0, r3
2000331c:	f7fe f8bc 	bl	20001498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20003320:	693b      	ldr	r3, [r7, #16]
20003322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20003324:	693b      	ldr	r3, [r7, #16]
20003326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003328:	693b      	ldr	r3, [r7, #16]
2000332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000332c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20003330:	693b      	ldr	r3, [r7, #16]
20003332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20003334:	693b      	ldr	r3, [r7, #16]
20003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003338:	4b0f      	ldr	r3, [pc, #60]	; (20003378 <xTaskPriorityDisinherit+0xd4>)
2000333a:	681b      	ldr	r3, [r3, #0]
2000333c:	429a      	cmp	r2, r3
2000333e:	d903      	bls.n	20003348 <xTaskPriorityDisinherit+0xa4>
20003340:	693b      	ldr	r3, [r7, #16]
20003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003344:	4a0c      	ldr	r2, [pc, #48]	; (20003378 <xTaskPriorityDisinherit+0xd4>)
20003346:	6013      	str	r3, [r2, #0]
20003348:	693b      	ldr	r3, [r7, #16]
2000334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000334c:	4613      	mov	r3, r2
2000334e:	009b      	lsls	r3, r3, #2
20003350:	4413      	add	r3, r2
20003352:	009b      	lsls	r3, r3, #2
20003354:	4a09      	ldr	r2, [pc, #36]	; (2000337c <xTaskPriorityDisinherit+0xd8>)
20003356:	441a      	add	r2, r3
20003358:	693b      	ldr	r3, [r7, #16]
2000335a:	3304      	adds	r3, #4
2000335c:	4619      	mov	r1, r3
2000335e:	4610      	mov	r0, r2
20003360:	f7fe f83d 	bl	200013de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20003364:	2301      	movs	r3, #1
20003366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20003368:	697b      	ldr	r3, [r7, #20]
	}
2000336a:	4618      	mov	r0, r3
2000336c:	3718      	adds	r7, #24
2000336e:	46bd      	mov	sp, r7
20003370:	bd80      	pop	{r7, pc}
20003372:	bf00      	nop
20003374:	2000b4b4 	.word	0x2000b4b4
20003378:	2000b990 	.word	0x2000b990
2000337c:	2000b4b8 	.word	0x2000b4b8

20003380 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
20003380:	b580      	push	{r7, lr}
20003382:	b088      	sub	sp, #32
20003384:	af00      	add	r7, sp, #0
20003386:	6078      	str	r0, [r7, #4]
20003388:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
2000338a:	687b      	ldr	r3, [r7, #4]
2000338c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
2000338e:	2301      	movs	r3, #1
20003390:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20003392:	687b      	ldr	r3, [r7, #4]
20003394:	2b00      	cmp	r3, #0
20003396:	d06a      	beq.n	2000346e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
20003398:	69bb      	ldr	r3, [r7, #24]
2000339a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000339c:	2b00      	cmp	r3, #0
2000339e:	d10a      	bne.n	200033b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
200033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
200033a4:	f383 8811 	msr	BASEPRI, r3
200033a8:	f3bf 8f6f 	isb	sy
200033ac:	f3bf 8f4f 	dsb	sy
200033b0:	60fb      	str	r3, [r7, #12]
}
200033b2:	bf00      	nop
200033b4:	e7fe      	b.n	200033b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
200033b6:	69bb      	ldr	r3, [r7, #24]
200033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200033ba:	683a      	ldr	r2, [r7, #0]
200033bc:	429a      	cmp	r2, r3
200033be:	d902      	bls.n	200033c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
200033c0:	683b      	ldr	r3, [r7, #0]
200033c2:	61fb      	str	r3, [r7, #28]
200033c4:	e002      	b.n	200033cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
200033c6:	69bb      	ldr	r3, [r7, #24]
200033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200033ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
200033cc:	69bb      	ldr	r3, [r7, #24]
200033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200033d0:	69fa      	ldr	r2, [r7, #28]
200033d2:	429a      	cmp	r2, r3
200033d4:	d04b      	beq.n	2000346e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
200033d6:	69bb      	ldr	r3, [r7, #24]
200033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200033da:	697a      	ldr	r2, [r7, #20]
200033dc:	429a      	cmp	r2, r3
200033de:	d146      	bne.n	2000346e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
200033e0:	4b25      	ldr	r3, [pc, #148]	; (20003478 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
200033e2:	681b      	ldr	r3, [r3, #0]
200033e4:	69ba      	ldr	r2, [r7, #24]
200033e6:	429a      	cmp	r2, r3
200033e8:	d10a      	bne.n	20003400 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
200033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
200033ee:	f383 8811 	msr	BASEPRI, r3
200033f2:	f3bf 8f6f 	isb	sy
200033f6:	f3bf 8f4f 	dsb	sy
200033fa:	60bb      	str	r3, [r7, #8]
}
200033fc:	bf00      	nop
200033fe:	e7fe      	b.n	200033fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
20003400:	69bb      	ldr	r3, [r7, #24]
20003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003404:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
20003406:	69bb      	ldr	r3, [r7, #24]
20003408:	69fa      	ldr	r2, [r7, #28]
2000340a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
2000340c:	69bb      	ldr	r3, [r7, #24]
2000340e:	699b      	ldr	r3, [r3, #24]
20003410:	2b00      	cmp	r3, #0
20003412:	db04      	blt.n	2000341e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003414:	69fb      	ldr	r3, [r7, #28]
20003416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
2000341a:	69bb      	ldr	r3, [r7, #24]
2000341c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
2000341e:	69bb      	ldr	r3, [r7, #24]
20003420:	6959      	ldr	r1, [r3, #20]
20003422:	693a      	ldr	r2, [r7, #16]
20003424:	4613      	mov	r3, r2
20003426:	009b      	lsls	r3, r3, #2
20003428:	4413      	add	r3, r2
2000342a:	009b      	lsls	r3, r3, #2
2000342c:	4a13      	ldr	r2, [pc, #76]	; (2000347c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
2000342e:	4413      	add	r3, r2
20003430:	4299      	cmp	r1, r3
20003432:	d11c      	bne.n	2000346e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20003434:	69bb      	ldr	r3, [r7, #24]
20003436:	3304      	adds	r3, #4
20003438:	4618      	mov	r0, r3
2000343a:	f7fe f82d 	bl	20001498 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
2000343e:	69bb      	ldr	r3, [r7, #24]
20003440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003442:	4b0f      	ldr	r3, [pc, #60]	; (20003480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
20003444:	681b      	ldr	r3, [r3, #0]
20003446:	429a      	cmp	r2, r3
20003448:	d903      	bls.n	20003452 <vTaskPriorityDisinheritAfterTimeout+0xd2>
2000344a:	69bb      	ldr	r3, [r7, #24]
2000344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000344e:	4a0c      	ldr	r2, [pc, #48]	; (20003480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
20003450:	6013      	str	r3, [r2, #0]
20003452:	69bb      	ldr	r3, [r7, #24]
20003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003456:	4613      	mov	r3, r2
20003458:	009b      	lsls	r3, r3, #2
2000345a:	4413      	add	r3, r2
2000345c:	009b      	lsls	r3, r3, #2
2000345e:	4a07      	ldr	r2, [pc, #28]	; (2000347c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
20003460:	441a      	add	r2, r3
20003462:	69bb      	ldr	r3, [r7, #24]
20003464:	3304      	adds	r3, #4
20003466:	4619      	mov	r1, r3
20003468:	4610      	mov	r0, r2
2000346a:	f7fd ffb8 	bl	200013de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
2000346e:	bf00      	nop
20003470:	3720      	adds	r7, #32
20003472:	46bd      	mov	sp, r7
20003474:	bd80      	pop	{r7, pc}
20003476:	bf00      	nop
20003478:	2000b4b4 	.word	0x2000b4b4
2000347c:	2000b4b8 	.word	0x2000b4b8
20003480:	2000b990 	.word	0x2000b990

20003484 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
20003484:	b480      	push	{r7}
20003486:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
20003488:	4b07      	ldr	r3, [pc, #28]	; (200034a8 <pvTaskIncrementMutexHeldCount+0x24>)
2000348a:	681b      	ldr	r3, [r3, #0]
2000348c:	2b00      	cmp	r3, #0
2000348e:	d004      	beq.n	2000349a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
20003490:	4b05      	ldr	r3, [pc, #20]	; (200034a8 <pvTaskIncrementMutexHeldCount+0x24>)
20003492:	681b      	ldr	r3, [r3, #0]
20003494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
20003496:	3201      	adds	r2, #1
20003498:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
2000349a:	4b03      	ldr	r3, [pc, #12]	; (200034a8 <pvTaskIncrementMutexHeldCount+0x24>)
2000349c:	681b      	ldr	r3, [r3, #0]
	}
2000349e:	4618      	mov	r0, r3
200034a0:	46bd      	mov	sp, r7
200034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200034a6:	4770      	bx	lr
200034a8:	2000b4b4 	.word	0x2000b4b4

200034ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
200034ac:	b580      	push	{r7, lr}
200034ae:	b084      	sub	sp, #16
200034b0:	af00      	add	r7, sp, #0
200034b2:	6078      	str	r0, [r7, #4]
200034b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
200034b6:	4b21      	ldr	r3, [pc, #132]	; (2000353c <prvAddCurrentTaskToDelayedList+0x90>)
200034b8:	681b      	ldr	r3, [r3, #0]
200034ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200034bc:	4b20      	ldr	r3, [pc, #128]	; (20003540 <prvAddCurrentTaskToDelayedList+0x94>)
200034be:	681b      	ldr	r3, [r3, #0]
200034c0:	3304      	adds	r3, #4
200034c2:	4618      	mov	r0, r3
200034c4:	f7fd ffe8 	bl	20001498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
200034c8:	687b      	ldr	r3, [r7, #4]
200034ca:	f1b3 3fff 	cmp.w	r3, #4294967295
200034ce:	d10a      	bne.n	200034e6 <prvAddCurrentTaskToDelayedList+0x3a>
200034d0:	683b      	ldr	r3, [r7, #0]
200034d2:	2b00      	cmp	r3, #0
200034d4:	d007      	beq.n	200034e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
200034d6:	4b1a      	ldr	r3, [pc, #104]	; (20003540 <prvAddCurrentTaskToDelayedList+0x94>)
200034d8:	681b      	ldr	r3, [r3, #0]
200034da:	3304      	adds	r3, #4
200034dc:	4619      	mov	r1, r3
200034de:	4819      	ldr	r0, [pc, #100]	; (20003544 <prvAddCurrentTaskToDelayedList+0x98>)
200034e0:	f7fd ff7d 	bl	200013de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
200034e4:	e026      	b.n	20003534 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
200034e6:	68fa      	ldr	r2, [r7, #12]
200034e8:	687b      	ldr	r3, [r7, #4]
200034ea:	4413      	add	r3, r2
200034ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
200034ee:	4b14      	ldr	r3, [pc, #80]	; (20003540 <prvAddCurrentTaskToDelayedList+0x94>)
200034f0:	681b      	ldr	r3, [r3, #0]
200034f2:	68ba      	ldr	r2, [r7, #8]
200034f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
200034f6:	68ba      	ldr	r2, [r7, #8]
200034f8:	68fb      	ldr	r3, [r7, #12]
200034fa:	429a      	cmp	r2, r3
200034fc:	d209      	bcs.n	20003512 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200034fe:	4b12      	ldr	r3, [pc, #72]	; (20003548 <prvAddCurrentTaskToDelayedList+0x9c>)
20003500:	681a      	ldr	r2, [r3, #0]
20003502:	4b0f      	ldr	r3, [pc, #60]	; (20003540 <prvAddCurrentTaskToDelayedList+0x94>)
20003504:	681b      	ldr	r3, [r3, #0]
20003506:	3304      	adds	r3, #4
20003508:	4619      	mov	r1, r3
2000350a:	4610      	mov	r0, r2
2000350c:	f7fd ff8b 	bl	20001426 <vListInsert>
}
20003510:	e010      	b.n	20003534 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003512:	4b0e      	ldr	r3, [pc, #56]	; (2000354c <prvAddCurrentTaskToDelayedList+0xa0>)
20003514:	681a      	ldr	r2, [r3, #0]
20003516:	4b0a      	ldr	r3, [pc, #40]	; (20003540 <prvAddCurrentTaskToDelayedList+0x94>)
20003518:	681b      	ldr	r3, [r3, #0]
2000351a:	3304      	adds	r3, #4
2000351c:	4619      	mov	r1, r3
2000351e:	4610      	mov	r0, r2
20003520:	f7fd ff81 	bl	20001426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
20003524:	4b0a      	ldr	r3, [pc, #40]	; (20003550 <prvAddCurrentTaskToDelayedList+0xa4>)
20003526:	681b      	ldr	r3, [r3, #0]
20003528:	68ba      	ldr	r2, [r7, #8]
2000352a:	429a      	cmp	r2, r3
2000352c:	d202      	bcs.n	20003534 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
2000352e:	4a08      	ldr	r2, [pc, #32]	; (20003550 <prvAddCurrentTaskToDelayedList+0xa4>)
20003530:	68bb      	ldr	r3, [r7, #8]
20003532:	6013      	str	r3, [r2, #0]
}
20003534:	bf00      	nop
20003536:	3710      	adds	r7, #16
20003538:	46bd      	mov	sp, r7
2000353a:	bd80      	pop	{r7, pc}
2000353c:	2000b98c 	.word	0x2000b98c
20003540:	2000b4b4 	.word	0x2000b4b4
20003544:	2000b974 	.word	0x2000b974
20003548:	2000b944 	.word	0x2000b944
2000354c:	2000b940 	.word	0x2000b940
20003550:	2000b9a8 	.word	0x2000b9a8

20003554 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
20003554:	b580      	push	{r7, lr}
20003556:	b08a      	sub	sp, #40	; 0x28
20003558:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
2000355a:	2300      	movs	r3, #0
2000355c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
2000355e:	f000 fb07 	bl	20003b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
20003562:	4b1c      	ldr	r3, [pc, #112]	; (200035d4 <xTimerCreateTimerTask+0x80>)
20003564:	681b      	ldr	r3, [r3, #0]
20003566:	2b00      	cmp	r3, #0
20003568:	d021      	beq.n	200035ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
2000356a:	2300      	movs	r3, #0
2000356c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
2000356e:	2300      	movs	r3, #0
20003570:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
20003572:	1d3a      	adds	r2, r7, #4
20003574:	f107 0108 	add.w	r1, r7, #8
20003578:	f107 030c 	add.w	r3, r7, #12
2000357c:	4618      	mov	r0, r3
2000357e:	f7fd fee7 	bl	20001350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
20003582:	6879      	ldr	r1, [r7, #4]
20003584:	68bb      	ldr	r3, [r7, #8]
20003586:	68fa      	ldr	r2, [r7, #12]
20003588:	9202      	str	r2, [sp, #8]
2000358a:	9301      	str	r3, [sp, #4]
2000358c:	2302      	movs	r3, #2
2000358e:	9300      	str	r3, [sp, #0]
20003590:	2300      	movs	r3, #0
20003592:	460a      	mov	r2, r1
20003594:	4910      	ldr	r1, [pc, #64]	; (200035d8 <xTimerCreateTimerTask+0x84>)
20003596:	4811      	ldr	r0, [pc, #68]	; (200035dc <xTimerCreateTimerTask+0x88>)
20003598:	f7fe ffb6 	bl	20002508 <xTaskCreateStatic>
2000359c:	4603      	mov	r3, r0
2000359e:	4a10      	ldr	r2, [pc, #64]	; (200035e0 <xTimerCreateTimerTask+0x8c>)
200035a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
200035a2:	4b0f      	ldr	r3, [pc, #60]	; (200035e0 <xTimerCreateTimerTask+0x8c>)
200035a4:	681b      	ldr	r3, [r3, #0]
200035a6:	2b00      	cmp	r3, #0
200035a8:	d001      	beq.n	200035ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
200035aa:	2301      	movs	r3, #1
200035ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
200035ae:	697b      	ldr	r3, [r7, #20]
200035b0:	2b00      	cmp	r3, #0
200035b2:	d10a      	bne.n	200035ca <xTimerCreateTimerTask+0x76>
	__asm volatile
200035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
200035b8:	f383 8811 	msr	BASEPRI, r3
200035bc:	f3bf 8f6f 	isb	sy
200035c0:	f3bf 8f4f 	dsb	sy
200035c4:	613b      	str	r3, [r7, #16]
}
200035c6:	bf00      	nop
200035c8:	e7fe      	b.n	200035c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
200035ca:	697b      	ldr	r3, [r7, #20]
}
200035cc:	4618      	mov	r0, r3
200035ce:	3718      	adds	r7, #24
200035d0:	46bd      	mov	sp, r7
200035d2:	bd80      	pop	{r7, pc}
200035d4:	2000b9e4 	.word	0x2000b9e4
200035d8:	20006d90 	.word	0x20006d90
200035dc:	20003719 	.word	0x20003719
200035e0:	2000b9e8 	.word	0x2000b9e8

200035e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
200035e4:	b580      	push	{r7, lr}
200035e6:	b08a      	sub	sp, #40	; 0x28
200035e8:	af00      	add	r7, sp, #0
200035ea:	60f8      	str	r0, [r7, #12]
200035ec:	60b9      	str	r1, [r7, #8]
200035ee:	607a      	str	r2, [r7, #4]
200035f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
200035f2:	2300      	movs	r3, #0
200035f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
200035f6:	68fb      	ldr	r3, [r7, #12]
200035f8:	2b00      	cmp	r3, #0
200035fa:	d10a      	bne.n	20003612 <xTimerGenericCommand+0x2e>
	__asm volatile
200035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
20003600:	f383 8811 	msr	BASEPRI, r3
20003604:	f3bf 8f6f 	isb	sy
20003608:	f3bf 8f4f 	dsb	sy
2000360c:	623b      	str	r3, [r7, #32]
}
2000360e:	bf00      	nop
20003610:	e7fe      	b.n	20003610 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
20003612:	4b1a      	ldr	r3, [pc, #104]	; (2000367c <xTimerGenericCommand+0x98>)
20003614:	681b      	ldr	r3, [r3, #0]
20003616:	2b00      	cmp	r3, #0
20003618:	d02a      	beq.n	20003670 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
2000361a:	68bb      	ldr	r3, [r7, #8]
2000361c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
2000361e:	687b      	ldr	r3, [r7, #4]
20003620:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
20003622:	68fb      	ldr	r3, [r7, #12]
20003624:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20003626:	68bb      	ldr	r3, [r7, #8]
20003628:	2b05      	cmp	r3, #5
2000362a:	dc18      	bgt.n	2000365e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
2000362c:	f7ff fdb4 	bl	20003198 <xTaskGetSchedulerState>
20003630:	4603      	mov	r3, r0
20003632:	2b02      	cmp	r3, #2
20003634:	d109      	bne.n	2000364a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20003636:	4b11      	ldr	r3, [pc, #68]	; (2000367c <xTimerGenericCommand+0x98>)
20003638:	6818      	ldr	r0, [r3, #0]
2000363a:	f107 0110 	add.w	r1, r7, #16
2000363e:	2300      	movs	r3, #0
20003640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20003642:	f7fe f8fb 	bl	2000183c <xQueueGenericSend>
20003646:	6278      	str	r0, [r7, #36]	; 0x24
20003648:	e012      	b.n	20003670 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
2000364a:	4b0c      	ldr	r3, [pc, #48]	; (2000367c <xTimerGenericCommand+0x98>)
2000364c:	6818      	ldr	r0, [r3, #0]
2000364e:	f107 0110 	add.w	r1, r7, #16
20003652:	2300      	movs	r3, #0
20003654:	2200      	movs	r2, #0
20003656:	f7fe f8f1 	bl	2000183c <xQueueGenericSend>
2000365a:	6278      	str	r0, [r7, #36]	; 0x24
2000365c:	e008      	b.n	20003670 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
2000365e:	4b07      	ldr	r3, [pc, #28]	; (2000367c <xTimerGenericCommand+0x98>)
20003660:	6818      	ldr	r0, [r3, #0]
20003662:	f107 0110 	add.w	r1, r7, #16
20003666:	2300      	movs	r3, #0
20003668:	683a      	ldr	r2, [r7, #0]
2000366a:	f7fe f9e5 	bl	20001a38 <xQueueGenericSendFromISR>
2000366e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
20003672:	4618      	mov	r0, r3
20003674:	3728      	adds	r7, #40	; 0x28
20003676:	46bd      	mov	sp, r7
20003678:	bd80      	pop	{r7, pc}
2000367a:	bf00      	nop
2000367c:	2000b9e4 	.word	0x2000b9e4

20003680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20003680:	b580      	push	{r7, lr}
20003682:	b088      	sub	sp, #32
20003684:	af02      	add	r7, sp, #8
20003686:	6078      	str	r0, [r7, #4]
20003688:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
2000368a:	4b22      	ldr	r3, [pc, #136]	; (20003714 <prvProcessExpiredTimer+0x94>)
2000368c:	681b      	ldr	r3, [r3, #0]
2000368e:	68db      	ldr	r3, [r3, #12]
20003690:	68db      	ldr	r3, [r3, #12]
20003692:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003694:	697b      	ldr	r3, [r7, #20]
20003696:	3304      	adds	r3, #4
20003698:	4618      	mov	r0, r3
2000369a:	f7fd fefd 	bl	20001498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
2000369e:	697b      	ldr	r3, [r7, #20]
200036a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200036a4:	f003 0304 	and.w	r3, r3, #4
200036a8:	2b00      	cmp	r3, #0
200036aa:	d022      	beq.n	200036f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
200036ac:	697b      	ldr	r3, [r7, #20]
200036ae:	699a      	ldr	r2, [r3, #24]
200036b0:	687b      	ldr	r3, [r7, #4]
200036b2:	18d1      	adds	r1, r2, r3
200036b4:	687b      	ldr	r3, [r7, #4]
200036b6:	683a      	ldr	r2, [r7, #0]
200036b8:	6978      	ldr	r0, [r7, #20]
200036ba:	f000 f8d1 	bl	20003860 <prvInsertTimerInActiveList>
200036be:	4603      	mov	r3, r0
200036c0:	2b00      	cmp	r3, #0
200036c2:	d01f      	beq.n	20003704 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
200036c4:	2300      	movs	r3, #0
200036c6:	9300      	str	r3, [sp, #0]
200036c8:	2300      	movs	r3, #0
200036ca:	687a      	ldr	r2, [r7, #4]
200036cc:	2100      	movs	r1, #0
200036ce:	6978      	ldr	r0, [r7, #20]
200036d0:	f7ff ff88 	bl	200035e4 <xTimerGenericCommand>
200036d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
200036d6:	693b      	ldr	r3, [r7, #16]
200036d8:	2b00      	cmp	r3, #0
200036da:	d113      	bne.n	20003704 <prvProcessExpiredTimer+0x84>
	__asm volatile
200036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
200036e0:	f383 8811 	msr	BASEPRI, r3
200036e4:	f3bf 8f6f 	isb	sy
200036e8:	f3bf 8f4f 	dsb	sy
200036ec:	60fb      	str	r3, [r7, #12]
}
200036ee:	bf00      	nop
200036f0:	e7fe      	b.n	200036f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
200036f2:	697b      	ldr	r3, [r7, #20]
200036f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200036f8:	f023 0301 	bic.w	r3, r3, #1
200036fc:	b2da      	uxtb	r2, r3
200036fe:	697b      	ldr	r3, [r7, #20]
20003700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003704:	697b      	ldr	r3, [r7, #20]
20003706:	6a1b      	ldr	r3, [r3, #32]
20003708:	6978      	ldr	r0, [r7, #20]
2000370a:	4798      	blx	r3
}
2000370c:	bf00      	nop
2000370e:	3718      	adds	r7, #24
20003710:	46bd      	mov	sp, r7
20003712:	bd80      	pop	{r7, pc}
20003714:	2000b9dc 	.word	0x2000b9dc

20003718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
20003718:	b580      	push	{r7, lr}
2000371a:	b084      	sub	sp, #16
2000371c:	af00      	add	r7, sp, #0
2000371e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003720:	f107 0308 	add.w	r3, r7, #8
20003724:	4618      	mov	r0, r3
20003726:	f000 f857 	bl	200037d8 <prvGetNextExpireTime>
2000372a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
2000372c:	68bb      	ldr	r3, [r7, #8]
2000372e:	4619      	mov	r1, r3
20003730:	68f8      	ldr	r0, [r7, #12]
20003732:	f000 f803 	bl	2000373c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20003736:	f000 f8d5 	bl	200038e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
2000373a:	e7f1      	b.n	20003720 <prvTimerTask+0x8>

2000373c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
2000373c:	b580      	push	{r7, lr}
2000373e:	b084      	sub	sp, #16
20003740:	af00      	add	r7, sp, #0
20003742:	6078      	str	r0, [r7, #4]
20003744:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
20003746:	f7ff f93b 	bl	200029c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
2000374a:	f107 0308 	add.w	r3, r7, #8
2000374e:	4618      	mov	r0, r3
20003750:	f000 f866 	bl	20003820 <prvSampleTimeNow>
20003754:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
20003756:	68bb      	ldr	r3, [r7, #8]
20003758:	2b00      	cmp	r3, #0
2000375a:	d130      	bne.n	200037be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
2000375c:	683b      	ldr	r3, [r7, #0]
2000375e:	2b00      	cmp	r3, #0
20003760:	d10a      	bne.n	20003778 <prvProcessTimerOrBlockTask+0x3c>
20003762:	687a      	ldr	r2, [r7, #4]
20003764:	68fb      	ldr	r3, [r7, #12]
20003766:	429a      	cmp	r2, r3
20003768:	d806      	bhi.n	20003778 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
2000376a:	f7ff f937 	bl	200029dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
2000376e:	68f9      	ldr	r1, [r7, #12]
20003770:	6878      	ldr	r0, [r7, #4]
20003772:	f7ff ff85 	bl	20003680 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20003776:	e024      	b.n	200037c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
20003778:	683b      	ldr	r3, [r7, #0]
2000377a:	2b00      	cmp	r3, #0
2000377c:	d008      	beq.n	20003790 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
2000377e:	4b13      	ldr	r3, [pc, #76]	; (200037cc <prvProcessTimerOrBlockTask+0x90>)
20003780:	681b      	ldr	r3, [r3, #0]
20003782:	681b      	ldr	r3, [r3, #0]
20003784:	2b00      	cmp	r3, #0
20003786:	d101      	bne.n	2000378c <prvProcessTimerOrBlockTask+0x50>
20003788:	2301      	movs	r3, #1
2000378a:	e000      	b.n	2000378e <prvProcessTimerOrBlockTask+0x52>
2000378c:	2300      	movs	r3, #0
2000378e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20003790:	4b0f      	ldr	r3, [pc, #60]	; (200037d0 <prvProcessTimerOrBlockTask+0x94>)
20003792:	6818      	ldr	r0, [r3, #0]
20003794:	687a      	ldr	r2, [r7, #4]
20003796:	68fb      	ldr	r3, [r7, #12]
20003798:	1ad3      	subs	r3, r2, r3
2000379a:	683a      	ldr	r2, [r7, #0]
2000379c:	4619      	mov	r1, r3
2000379e:	f7fe fe7f 	bl	200024a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
200037a2:	f7ff f91b 	bl	200029dc <xTaskResumeAll>
200037a6:	4603      	mov	r3, r0
200037a8:	2b00      	cmp	r3, #0
200037aa:	d10a      	bne.n	200037c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
200037ac:	4b09      	ldr	r3, [pc, #36]	; (200037d4 <prvProcessTimerOrBlockTask+0x98>)
200037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200037b2:	601a      	str	r2, [r3, #0]
200037b4:	f3bf 8f4f 	dsb	sy
200037b8:	f3bf 8f6f 	isb	sy
}
200037bc:	e001      	b.n	200037c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
200037be:	f7ff f90d 	bl	200029dc <xTaskResumeAll>
}
200037c2:	bf00      	nop
200037c4:	3710      	adds	r7, #16
200037c6:	46bd      	mov	sp, r7
200037c8:	bd80      	pop	{r7, pc}
200037ca:	bf00      	nop
200037cc:	2000b9e0 	.word	0x2000b9e0
200037d0:	2000b9e4 	.word	0x2000b9e4
200037d4:	e000ed04 	.word	0xe000ed04

200037d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
200037d8:	b480      	push	{r7}
200037da:	b085      	sub	sp, #20
200037dc:	af00      	add	r7, sp, #0
200037de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
200037e0:	4b0e      	ldr	r3, [pc, #56]	; (2000381c <prvGetNextExpireTime+0x44>)
200037e2:	681b      	ldr	r3, [r3, #0]
200037e4:	681b      	ldr	r3, [r3, #0]
200037e6:	2b00      	cmp	r3, #0
200037e8:	d101      	bne.n	200037ee <prvGetNextExpireTime+0x16>
200037ea:	2201      	movs	r2, #1
200037ec:	e000      	b.n	200037f0 <prvGetNextExpireTime+0x18>
200037ee:	2200      	movs	r2, #0
200037f0:	687b      	ldr	r3, [r7, #4]
200037f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
200037f4:	687b      	ldr	r3, [r7, #4]
200037f6:	681b      	ldr	r3, [r3, #0]
200037f8:	2b00      	cmp	r3, #0
200037fa:	d105      	bne.n	20003808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
200037fc:	4b07      	ldr	r3, [pc, #28]	; (2000381c <prvGetNextExpireTime+0x44>)
200037fe:	681b      	ldr	r3, [r3, #0]
20003800:	68db      	ldr	r3, [r3, #12]
20003802:	681b      	ldr	r3, [r3, #0]
20003804:	60fb      	str	r3, [r7, #12]
20003806:	e001      	b.n	2000380c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003808:	2300      	movs	r3, #0
2000380a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
2000380c:	68fb      	ldr	r3, [r7, #12]
}
2000380e:	4618      	mov	r0, r3
20003810:	3714      	adds	r7, #20
20003812:	46bd      	mov	sp, r7
20003814:	f85d 7b04 	ldr.w	r7, [sp], #4
20003818:	4770      	bx	lr
2000381a:	bf00      	nop
2000381c:	2000b9dc 	.word	0x2000b9dc

20003820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003820:	b580      	push	{r7, lr}
20003822:	b084      	sub	sp, #16
20003824:	af00      	add	r7, sp, #0
20003826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003828:	f7ff f976 	bl	20002b18 <xTaskGetTickCount>
2000382c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
2000382e:	4b0b      	ldr	r3, [pc, #44]	; (2000385c <prvSampleTimeNow+0x3c>)
20003830:	681b      	ldr	r3, [r3, #0]
20003832:	68fa      	ldr	r2, [r7, #12]
20003834:	429a      	cmp	r2, r3
20003836:	d205      	bcs.n	20003844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
20003838:	f000 f936 	bl	20003aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
2000383c:	687b      	ldr	r3, [r7, #4]
2000383e:	2201      	movs	r2, #1
20003840:	601a      	str	r2, [r3, #0]
20003842:	e002      	b.n	2000384a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20003844:	687b      	ldr	r3, [r7, #4]
20003846:	2200      	movs	r2, #0
20003848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
2000384a:	4a04      	ldr	r2, [pc, #16]	; (2000385c <prvSampleTimeNow+0x3c>)
2000384c:	68fb      	ldr	r3, [r7, #12]
2000384e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
20003850:	68fb      	ldr	r3, [r7, #12]
}
20003852:	4618      	mov	r0, r3
20003854:	3710      	adds	r7, #16
20003856:	46bd      	mov	sp, r7
20003858:	bd80      	pop	{r7, pc}
2000385a:	bf00      	nop
2000385c:	2000b9ec 	.word	0x2000b9ec

20003860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003860:	b580      	push	{r7, lr}
20003862:	b086      	sub	sp, #24
20003864:	af00      	add	r7, sp, #0
20003866:	60f8      	str	r0, [r7, #12]
20003868:	60b9      	str	r1, [r7, #8]
2000386a:	607a      	str	r2, [r7, #4]
2000386c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
2000386e:	2300      	movs	r3, #0
20003870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003872:	68fb      	ldr	r3, [r7, #12]
20003874:	68ba      	ldr	r2, [r7, #8]
20003876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003878:	68fb      	ldr	r3, [r7, #12]
2000387a:	68fa      	ldr	r2, [r7, #12]
2000387c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
2000387e:	68ba      	ldr	r2, [r7, #8]
20003880:	687b      	ldr	r3, [r7, #4]
20003882:	429a      	cmp	r2, r3
20003884:	d812      	bhi.n	200038ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003886:	687a      	ldr	r2, [r7, #4]
20003888:	683b      	ldr	r3, [r7, #0]
2000388a:	1ad2      	subs	r2, r2, r3
2000388c:	68fb      	ldr	r3, [r7, #12]
2000388e:	699b      	ldr	r3, [r3, #24]
20003890:	429a      	cmp	r2, r3
20003892:	d302      	bcc.n	2000389a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003894:	2301      	movs	r3, #1
20003896:	617b      	str	r3, [r7, #20]
20003898:	e01b      	b.n	200038d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
2000389a:	4b10      	ldr	r3, [pc, #64]	; (200038dc <prvInsertTimerInActiveList+0x7c>)
2000389c:	681a      	ldr	r2, [r3, #0]
2000389e:	68fb      	ldr	r3, [r7, #12]
200038a0:	3304      	adds	r3, #4
200038a2:	4619      	mov	r1, r3
200038a4:	4610      	mov	r0, r2
200038a6:	f7fd fdbe 	bl	20001426 <vListInsert>
200038aa:	e012      	b.n	200038d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
200038ac:	687a      	ldr	r2, [r7, #4]
200038ae:	683b      	ldr	r3, [r7, #0]
200038b0:	429a      	cmp	r2, r3
200038b2:	d206      	bcs.n	200038c2 <prvInsertTimerInActiveList+0x62>
200038b4:	68ba      	ldr	r2, [r7, #8]
200038b6:	683b      	ldr	r3, [r7, #0]
200038b8:	429a      	cmp	r2, r3
200038ba:	d302      	bcc.n	200038c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
200038bc:	2301      	movs	r3, #1
200038be:	617b      	str	r3, [r7, #20]
200038c0:	e007      	b.n	200038d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
200038c2:	4b07      	ldr	r3, [pc, #28]	; (200038e0 <prvInsertTimerInActiveList+0x80>)
200038c4:	681a      	ldr	r2, [r3, #0]
200038c6:	68fb      	ldr	r3, [r7, #12]
200038c8:	3304      	adds	r3, #4
200038ca:	4619      	mov	r1, r3
200038cc:	4610      	mov	r0, r2
200038ce:	f7fd fdaa 	bl	20001426 <vListInsert>
		}
	}

	return xProcessTimerNow;
200038d2:	697b      	ldr	r3, [r7, #20]
}
200038d4:	4618      	mov	r0, r3
200038d6:	3718      	adds	r7, #24
200038d8:	46bd      	mov	sp, r7
200038da:	bd80      	pop	{r7, pc}
200038dc:	2000b9e0 	.word	0x2000b9e0
200038e0:	2000b9dc 	.word	0x2000b9dc

200038e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
200038e4:	b580      	push	{r7, lr}
200038e6:	b08e      	sub	sp, #56	; 0x38
200038e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
200038ea:	e0ca      	b.n	20003a82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
200038ec:	687b      	ldr	r3, [r7, #4]
200038ee:	2b00      	cmp	r3, #0
200038f0:	da18      	bge.n	20003924 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
200038f2:	1d3b      	adds	r3, r7, #4
200038f4:	3304      	adds	r3, #4
200038f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
200038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200038fa:	2b00      	cmp	r3, #0
200038fc:	d10a      	bne.n	20003914 <prvProcessReceivedCommands+0x30>
	__asm volatile
200038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
20003902:	f383 8811 	msr	BASEPRI, r3
20003906:	f3bf 8f6f 	isb	sy
2000390a:	f3bf 8f4f 	dsb	sy
2000390e:	61fb      	str	r3, [r7, #28]
}
20003910:	bf00      	nop
20003912:	e7fe      	b.n	20003912 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20003916:	681b      	ldr	r3, [r3, #0]
20003918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000391a:	6850      	ldr	r0, [r2, #4]
2000391c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
2000391e:	6892      	ldr	r2, [r2, #8]
20003920:	4611      	mov	r1, r2
20003922:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20003924:	687b      	ldr	r3, [r7, #4]
20003926:	2b00      	cmp	r3, #0
20003928:	f2c0 80aa 	blt.w	20003a80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
2000392c:	68fb      	ldr	r3, [r7, #12]
2000392e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
20003930:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003932:	695b      	ldr	r3, [r3, #20]
20003934:	2b00      	cmp	r3, #0
20003936:	d004      	beq.n	20003942 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000393a:	3304      	adds	r3, #4
2000393c:	4618      	mov	r0, r3
2000393e:	f7fd fdab 	bl	20001498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003942:	463b      	mov	r3, r7
20003944:	4618      	mov	r0, r3
20003946:	f7ff ff6b 	bl	20003820 <prvSampleTimeNow>
2000394a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
2000394c:	687b      	ldr	r3, [r7, #4]
2000394e:	2b09      	cmp	r3, #9
20003950:	f200 8097 	bhi.w	20003a82 <prvProcessReceivedCommands+0x19e>
20003954:	a201      	add	r2, pc, #4	; (adr r2, 2000395c <prvProcessReceivedCommands+0x78>)
20003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000395a:	bf00      	nop
2000395c:	20003985 	.word	0x20003985
20003960:	20003985 	.word	0x20003985
20003964:	20003985 	.word	0x20003985
20003968:	200039f9 	.word	0x200039f9
2000396c:	20003a0d 	.word	0x20003a0d
20003970:	20003a57 	.word	0x20003a57
20003974:	20003985 	.word	0x20003985
20003978:	20003985 	.word	0x20003985
2000397c:	200039f9 	.word	0x200039f9
20003980:	20003a0d 	.word	0x20003a0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000398a:	f043 0301 	orr.w	r3, r3, #1
2000398e:	b2da      	uxtb	r2, r3
20003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003996:	68ba      	ldr	r2, [r7, #8]
20003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000399a:	699b      	ldr	r3, [r3, #24]
2000399c:	18d1      	adds	r1, r2, r3
2000399e:	68bb      	ldr	r3, [r7, #8]
200039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200039a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200039a4:	f7ff ff5c 	bl	20003860 <prvInsertTimerInActiveList>
200039a8:	4603      	mov	r3, r0
200039aa:	2b00      	cmp	r3, #0
200039ac:	d069      	beq.n	20003a82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
200039b0:	6a1b      	ldr	r3, [r3, #32]
200039b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200039b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
200039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200039b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200039bc:	f003 0304 	and.w	r3, r3, #4
200039c0:	2b00      	cmp	r3, #0
200039c2:	d05e      	beq.n	20003a82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
200039c4:	68ba      	ldr	r2, [r7, #8]
200039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200039c8:	699b      	ldr	r3, [r3, #24]
200039ca:	441a      	add	r2, r3
200039cc:	2300      	movs	r3, #0
200039ce:	9300      	str	r3, [sp, #0]
200039d0:	2300      	movs	r3, #0
200039d2:	2100      	movs	r1, #0
200039d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200039d6:	f7ff fe05 	bl	200035e4 <xTimerGenericCommand>
200039da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
200039dc:	6a3b      	ldr	r3, [r7, #32]
200039de:	2b00      	cmp	r3, #0
200039e0:	d14f      	bne.n	20003a82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
200039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
200039e6:	f383 8811 	msr	BASEPRI, r3
200039ea:	f3bf 8f6f 	isb	sy
200039ee:	f3bf 8f4f 	dsb	sy
200039f2:	61bb      	str	r3, [r7, #24]
}
200039f4:	bf00      	nop
200039f6:	e7fe      	b.n	200039f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
200039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200039fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200039fe:	f023 0301 	bic.w	r3, r3, #1
20003a02:	b2da      	uxtb	r2, r3
20003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
20003a0a:	e03a      	b.n	20003a82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003a12:	f043 0301 	orr.w	r3, r3, #1
20003a16:	b2da      	uxtb	r2, r3
20003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003a1e:	68ba      	ldr	r2, [r7, #8]
20003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a26:	699b      	ldr	r3, [r3, #24]
20003a28:	2b00      	cmp	r3, #0
20003a2a:	d10a      	bne.n	20003a42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
20003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003a30:	f383 8811 	msr	BASEPRI, r3
20003a34:	f3bf 8f6f 	isb	sy
20003a38:	f3bf 8f4f 	dsb	sy
20003a3c:	617b      	str	r3, [r7, #20]
}
20003a3e:	bf00      	nop
20003a40:	e7fe      	b.n	20003a40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a44:	699a      	ldr	r2, [r3, #24]
20003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003a48:	18d1      	adds	r1, r2, r3
20003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003a50:	f7ff ff06 	bl	20003860 <prvInsertTimerInActiveList>
					break;
20003a54:	e015      	b.n	20003a82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
20003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003a5c:	f003 0302 	and.w	r3, r3, #2
20003a60:	2b00      	cmp	r3, #0
20003a62:	d103      	bne.n	20003a6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
20003a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003a66:	f000 fbdb 	bl	20004220 <vPortFree>
20003a6a:	e00a      	b.n	20003a82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003a72:	f023 0301 	bic.w	r3, r3, #1
20003a76:	b2da      	uxtb	r2, r3
20003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
20003a7e:	e000      	b.n	20003a82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
20003a80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003a82:	4b08      	ldr	r3, [pc, #32]	; (20003aa4 <prvProcessReceivedCommands+0x1c0>)
20003a84:	681b      	ldr	r3, [r3, #0]
20003a86:	1d39      	adds	r1, r7, #4
20003a88:	2200      	movs	r2, #0
20003a8a:	4618      	mov	r0, r3
20003a8c:	f7fe f8fc 	bl	20001c88 <xQueueReceive>
20003a90:	4603      	mov	r3, r0
20003a92:	2b00      	cmp	r3, #0
20003a94:	f47f af2a 	bne.w	200038ec <prvProcessReceivedCommands+0x8>
	}
}
20003a98:	bf00      	nop
20003a9a:	bf00      	nop
20003a9c:	3730      	adds	r7, #48	; 0x30
20003a9e:	46bd      	mov	sp, r7
20003aa0:	bd80      	pop	{r7, pc}
20003aa2:	bf00      	nop
20003aa4:	2000b9e4 	.word	0x2000b9e4

20003aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003aa8:	b580      	push	{r7, lr}
20003aaa:	b088      	sub	sp, #32
20003aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003aae:	e048      	b.n	20003b42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003ab0:	4b2d      	ldr	r3, [pc, #180]	; (20003b68 <prvSwitchTimerLists+0xc0>)
20003ab2:	681b      	ldr	r3, [r3, #0]
20003ab4:	68db      	ldr	r3, [r3, #12]
20003ab6:	681b      	ldr	r3, [r3, #0]
20003ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20003aba:	4b2b      	ldr	r3, [pc, #172]	; (20003b68 <prvSwitchTimerLists+0xc0>)
20003abc:	681b      	ldr	r3, [r3, #0]
20003abe:	68db      	ldr	r3, [r3, #12]
20003ac0:	68db      	ldr	r3, [r3, #12]
20003ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003ac4:	68fb      	ldr	r3, [r7, #12]
20003ac6:	3304      	adds	r3, #4
20003ac8:	4618      	mov	r0, r3
20003aca:	f7fd fce5 	bl	20001498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003ace:	68fb      	ldr	r3, [r7, #12]
20003ad0:	6a1b      	ldr	r3, [r3, #32]
20003ad2:	68f8      	ldr	r0, [r7, #12]
20003ad4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20003ad6:	68fb      	ldr	r3, [r7, #12]
20003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003adc:	f003 0304 	and.w	r3, r3, #4
20003ae0:	2b00      	cmp	r3, #0
20003ae2:	d02e      	beq.n	20003b42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003ae4:	68fb      	ldr	r3, [r7, #12]
20003ae6:	699b      	ldr	r3, [r3, #24]
20003ae8:	693a      	ldr	r2, [r7, #16]
20003aea:	4413      	add	r3, r2
20003aec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
20003aee:	68ba      	ldr	r2, [r7, #8]
20003af0:	693b      	ldr	r3, [r7, #16]
20003af2:	429a      	cmp	r2, r3
20003af4:	d90e      	bls.n	20003b14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003af6:	68fb      	ldr	r3, [r7, #12]
20003af8:	68ba      	ldr	r2, [r7, #8]
20003afa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003afc:	68fb      	ldr	r3, [r7, #12]
20003afe:	68fa      	ldr	r2, [r7, #12]
20003b00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003b02:	4b19      	ldr	r3, [pc, #100]	; (20003b68 <prvSwitchTimerLists+0xc0>)
20003b04:	681a      	ldr	r2, [r3, #0]
20003b06:	68fb      	ldr	r3, [r7, #12]
20003b08:	3304      	adds	r3, #4
20003b0a:	4619      	mov	r1, r3
20003b0c:	4610      	mov	r0, r2
20003b0e:	f7fd fc8a 	bl	20001426 <vListInsert>
20003b12:	e016      	b.n	20003b42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003b14:	2300      	movs	r3, #0
20003b16:	9300      	str	r3, [sp, #0]
20003b18:	2300      	movs	r3, #0
20003b1a:	693a      	ldr	r2, [r7, #16]
20003b1c:	2100      	movs	r1, #0
20003b1e:	68f8      	ldr	r0, [r7, #12]
20003b20:	f7ff fd60 	bl	200035e4 <xTimerGenericCommand>
20003b24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
20003b26:	687b      	ldr	r3, [r7, #4]
20003b28:	2b00      	cmp	r3, #0
20003b2a:	d10a      	bne.n	20003b42 <prvSwitchTimerLists+0x9a>
	__asm volatile
20003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003b30:	f383 8811 	msr	BASEPRI, r3
20003b34:	f3bf 8f6f 	isb	sy
20003b38:	f3bf 8f4f 	dsb	sy
20003b3c:	603b      	str	r3, [r7, #0]
}
20003b3e:	bf00      	nop
20003b40:	e7fe      	b.n	20003b40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20003b42:	4b09      	ldr	r3, [pc, #36]	; (20003b68 <prvSwitchTimerLists+0xc0>)
20003b44:	681b      	ldr	r3, [r3, #0]
20003b46:	681b      	ldr	r3, [r3, #0]
20003b48:	2b00      	cmp	r3, #0
20003b4a:	d1b1      	bne.n	20003ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003b4c:	4b06      	ldr	r3, [pc, #24]	; (20003b68 <prvSwitchTimerLists+0xc0>)
20003b4e:	681b      	ldr	r3, [r3, #0]
20003b50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
20003b52:	4b06      	ldr	r3, [pc, #24]	; (20003b6c <prvSwitchTimerLists+0xc4>)
20003b54:	681b      	ldr	r3, [r3, #0]
20003b56:	4a04      	ldr	r2, [pc, #16]	; (20003b68 <prvSwitchTimerLists+0xc0>)
20003b58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
20003b5a:	4a04      	ldr	r2, [pc, #16]	; (20003b6c <prvSwitchTimerLists+0xc4>)
20003b5c:	697b      	ldr	r3, [r7, #20]
20003b5e:	6013      	str	r3, [r2, #0]
}
20003b60:	bf00      	nop
20003b62:	3718      	adds	r7, #24
20003b64:	46bd      	mov	sp, r7
20003b66:	bd80      	pop	{r7, pc}
20003b68:	2000b9dc 	.word	0x2000b9dc
20003b6c:	2000b9e0 	.word	0x2000b9e0

20003b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003b70:	b580      	push	{r7, lr}
20003b72:	b082      	sub	sp, #8
20003b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003b76:	f000 f965 	bl	20003e44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003b7a:	4b15      	ldr	r3, [pc, #84]	; (20003bd0 <prvCheckForValidListAndQueue+0x60>)
20003b7c:	681b      	ldr	r3, [r3, #0]
20003b7e:	2b00      	cmp	r3, #0
20003b80:	d120      	bne.n	20003bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
20003b82:	4814      	ldr	r0, [pc, #80]	; (20003bd4 <prvCheckForValidListAndQueue+0x64>)
20003b84:	f7fd fbfe 	bl	20001384 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003b88:	4813      	ldr	r0, [pc, #76]	; (20003bd8 <prvCheckForValidListAndQueue+0x68>)
20003b8a:	f7fd fbfb 	bl	20001384 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
20003b8e:	4b13      	ldr	r3, [pc, #76]	; (20003bdc <prvCheckForValidListAndQueue+0x6c>)
20003b90:	4a10      	ldr	r2, [pc, #64]	; (20003bd4 <prvCheckForValidListAndQueue+0x64>)
20003b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003b94:	4b12      	ldr	r3, [pc, #72]	; (20003be0 <prvCheckForValidListAndQueue+0x70>)
20003b96:	4a10      	ldr	r2, [pc, #64]	; (20003bd8 <prvCheckForValidListAndQueue+0x68>)
20003b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
20003b9a:	2300      	movs	r3, #0
20003b9c:	9300      	str	r3, [sp, #0]
20003b9e:	4b11      	ldr	r3, [pc, #68]	; (20003be4 <prvCheckForValidListAndQueue+0x74>)
20003ba0:	4a11      	ldr	r2, [pc, #68]	; (20003be8 <prvCheckForValidListAndQueue+0x78>)
20003ba2:	2110      	movs	r1, #16
20003ba4:	200a      	movs	r0, #10
20003ba6:	f7fd fd09 	bl	200015bc <xQueueGenericCreateStatic>
20003baa:	4603      	mov	r3, r0
20003bac:	4a08      	ldr	r2, [pc, #32]	; (20003bd0 <prvCheckForValidListAndQueue+0x60>)
20003bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
20003bb0:	4b07      	ldr	r3, [pc, #28]	; (20003bd0 <prvCheckForValidListAndQueue+0x60>)
20003bb2:	681b      	ldr	r3, [r3, #0]
20003bb4:	2b00      	cmp	r3, #0
20003bb6:	d005      	beq.n	20003bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
20003bb8:	4b05      	ldr	r3, [pc, #20]	; (20003bd0 <prvCheckForValidListAndQueue+0x60>)
20003bba:	681b      	ldr	r3, [r3, #0]
20003bbc:	490b      	ldr	r1, [pc, #44]	; (20003bec <prvCheckForValidListAndQueue+0x7c>)
20003bbe:	4618      	mov	r0, r3
20003bc0:	f7fe fc1a 	bl	200023f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003bc4:	f000 f96e 	bl	20003ea4 <vPortExitCritical>
}
20003bc8:	bf00      	nop
20003bca:	46bd      	mov	sp, r7
20003bcc:	bd80      	pop	{r7, pc}
20003bce:	bf00      	nop
20003bd0:	2000b9e4 	.word	0x2000b9e4
20003bd4:	2000b9b4 	.word	0x2000b9b4
20003bd8:	2000b9c8 	.word	0x2000b9c8
20003bdc:	2000b9dc 	.word	0x2000b9dc
20003be0:	2000b9e0 	.word	0x2000b9e0
20003be4:	2000ba90 	.word	0x2000ba90
20003be8:	2000b9f0 	.word	0x2000b9f0
20003bec:	20006d98 	.word	0x20006d98

20003bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20003bf0:	b480      	push	{r7}
20003bf2:	b085      	sub	sp, #20
20003bf4:	af00      	add	r7, sp, #0
20003bf6:	60f8      	str	r0, [r7, #12]
20003bf8:	60b9      	str	r1, [r7, #8]
20003bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
20003bfc:	68fb      	ldr	r3, [r7, #12]
20003bfe:	3b04      	subs	r3, #4
20003c00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003c02:	68fb      	ldr	r3, [r7, #12]
20003c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003c0a:	68fb      	ldr	r3, [r7, #12]
20003c0c:	3b04      	subs	r3, #4
20003c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20003c10:	68bb      	ldr	r3, [r7, #8]
20003c12:	f023 0201 	bic.w	r2, r3, #1
20003c16:	68fb      	ldr	r3, [r7, #12]
20003c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003c1a:	68fb      	ldr	r3, [r7, #12]
20003c1c:	3b04      	subs	r3, #4
20003c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20003c20:	4a0c      	ldr	r2, [pc, #48]	; (20003c54 <pxPortInitialiseStack+0x64>)
20003c22:	68fb      	ldr	r3, [r7, #12]
20003c24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
20003c26:	68fb      	ldr	r3, [r7, #12]
20003c28:	3b14      	subs	r3, #20
20003c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
20003c2c:	687a      	ldr	r2, [r7, #4]
20003c2e:	68fb      	ldr	r3, [r7, #12]
20003c30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
20003c32:	68fb      	ldr	r3, [r7, #12]
20003c34:	3b04      	subs	r3, #4
20003c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
20003c38:	68fb      	ldr	r3, [r7, #12]
20003c3a:	f06f 0202 	mvn.w	r2, #2
20003c3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20003c40:	68fb      	ldr	r3, [r7, #12]
20003c42:	3b20      	subs	r3, #32
20003c44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
20003c46:	68fb      	ldr	r3, [r7, #12]
}
20003c48:	4618      	mov	r0, r3
20003c4a:	3714      	adds	r7, #20
20003c4c:	46bd      	mov	sp, r7
20003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c52:	4770      	bx	lr
20003c54:	20003c59 	.word	0x20003c59

20003c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20003c58:	b480      	push	{r7}
20003c5a:	b085      	sub	sp, #20
20003c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
20003c5e:	2300      	movs	r3, #0
20003c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
20003c62:	4b12      	ldr	r3, [pc, #72]	; (20003cac <prvTaskExitError+0x54>)
20003c64:	681b      	ldr	r3, [r3, #0]
20003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
20003c6a:	d00a      	beq.n	20003c82 <prvTaskExitError+0x2a>
	__asm volatile
20003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003c70:	f383 8811 	msr	BASEPRI, r3
20003c74:	f3bf 8f6f 	isb	sy
20003c78:	f3bf 8f4f 	dsb	sy
20003c7c:	60fb      	str	r3, [r7, #12]
}
20003c7e:	bf00      	nop
20003c80:	e7fe      	b.n	20003c80 <prvTaskExitError+0x28>
	__asm volatile
20003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
20003c86:	f383 8811 	msr	BASEPRI, r3
20003c8a:	f3bf 8f6f 	isb	sy
20003c8e:	f3bf 8f4f 	dsb	sy
20003c92:	60bb      	str	r3, [r7, #8]
}
20003c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
20003c96:	bf00      	nop
20003c98:	687b      	ldr	r3, [r7, #4]
20003c9a:	2b00      	cmp	r3, #0
20003c9c:	d0fc      	beq.n	20003c98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
20003c9e:	bf00      	nop
20003ca0:	bf00      	nop
20003ca2:	3714      	adds	r7, #20
20003ca4:	46bd      	mov	sp, r7
20003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
20003caa:	4770      	bx	lr
20003cac:	2000ac34 	.word	0x2000ac34

20003cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20003cb0:	4b07      	ldr	r3, [pc, #28]	; (20003cd0 <pxCurrentTCBConst2>)
20003cb2:	6819      	ldr	r1, [r3, #0]
20003cb4:	6808      	ldr	r0, [r1, #0]
20003cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003cba:	f380 8809 	msr	PSP, r0
20003cbe:	f3bf 8f6f 	isb	sy
20003cc2:	f04f 0000 	mov.w	r0, #0
20003cc6:	f380 8811 	msr	BASEPRI, r0
20003cca:	4770      	bx	lr
20003ccc:	f3af 8000 	nop.w

20003cd0 <pxCurrentTCBConst2>:
20003cd0:	2000b4b4 	.word	0x2000b4b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
20003cd4:	bf00      	nop
20003cd6:	bf00      	nop

20003cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
20003cd8:	4808      	ldr	r0, [pc, #32]	; (20003cfc <prvPortStartFirstTask+0x24>)
20003cda:	6800      	ldr	r0, [r0, #0]
20003cdc:	6800      	ldr	r0, [r0, #0]
20003cde:	f380 8808 	msr	MSP, r0
20003ce2:	f04f 0000 	mov.w	r0, #0
20003ce6:	f380 8814 	msr	CONTROL, r0
20003cea:	b662      	cpsie	i
20003cec:	b661      	cpsie	f
20003cee:	f3bf 8f4f 	dsb	sy
20003cf2:	f3bf 8f6f 	isb	sy
20003cf6:	df00      	svc	0
20003cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
20003cfa:	bf00      	nop
20003cfc:	e000ed08 	.word	0xe000ed08

20003d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003d00:	b580      	push	{r7, lr}
20003d02:	b086      	sub	sp, #24
20003d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
20003d06:	4b46      	ldr	r3, [pc, #280]	; (20003e20 <xPortStartScheduler+0x120>)
20003d08:	681b      	ldr	r3, [r3, #0]
20003d0a:	4a46      	ldr	r2, [pc, #280]	; (20003e24 <xPortStartScheduler+0x124>)
20003d0c:	4293      	cmp	r3, r2
20003d0e:	d10a      	bne.n	20003d26 <xPortStartScheduler+0x26>
	__asm volatile
20003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
20003d14:	f383 8811 	msr	BASEPRI, r3
20003d18:	f3bf 8f6f 	isb	sy
20003d1c:	f3bf 8f4f 	dsb	sy
20003d20:	613b      	str	r3, [r7, #16]
}
20003d22:	bf00      	nop
20003d24:	e7fe      	b.n	20003d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
20003d26:	4b3e      	ldr	r3, [pc, #248]	; (20003e20 <xPortStartScheduler+0x120>)
20003d28:	681b      	ldr	r3, [r3, #0]
20003d2a:	4a3f      	ldr	r2, [pc, #252]	; (20003e28 <xPortStartScheduler+0x128>)
20003d2c:	4293      	cmp	r3, r2
20003d2e:	d10a      	bne.n	20003d46 <xPortStartScheduler+0x46>
	__asm volatile
20003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
20003d34:	f383 8811 	msr	BASEPRI, r3
20003d38:	f3bf 8f6f 	isb	sy
20003d3c:	f3bf 8f4f 	dsb	sy
20003d40:	60fb      	str	r3, [r7, #12]
}
20003d42:	bf00      	nop
20003d44:	e7fe      	b.n	20003d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20003d46:	4b39      	ldr	r3, [pc, #228]	; (20003e2c <xPortStartScheduler+0x12c>)
20003d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
20003d4a:	697b      	ldr	r3, [r7, #20]
20003d4c:	781b      	ldrb	r3, [r3, #0]
20003d4e:	b2db      	uxtb	r3, r3
20003d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20003d52:	697b      	ldr	r3, [r7, #20]
20003d54:	22ff      	movs	r2, #255	; 0xff
20003d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20003d58:	697b      	ldr	r3, [r7, #20]
20003d5a:	781b      	ldrb	r3, [r3, #0]
20003d5c:	b2db      	uxtb	r3, r3
20003d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20003d60:	78fb      	ldrb	r3, [r7, #3]
20003d62:	b2db      	uxtb	r3, r3
20003d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
20003d68:	b2da      	uxtb	r2, r3
20003d6a:	4b31      	ldr	r3, [pc, #196]	; (20003e30 <xPortStartScheduler+0x130>)
20003d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
20003d6e:	4b31      	ldr	r3, [pc, #196]	; (20003e34 <xPortStartScheduler+0x134>)
20003d70:	2207      	movs	r2, #7
20003d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003d74:	e009      	b.n	20003d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
20003d76:	4b2f      	ldr	r3, [pc, #188]	; (20003e34 <xPortStartScheduler+0x134>)
20003d78:	681b      	ldr	r3, [r3, #0]
20003d7a:	3b01      	subs	r3, #1
20003d7c:	4a2d      	ldr	r2, [pc, #180]	; (20003e34 <xPortStartScheduler+0x134>)
20003d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20003d80:	78fb      	ldrb	r3, [r7, #3]
20003d82:	b2db      	uxtb	r3, r3
20003d84:	005b      	lsls	r3, r3, #1
20003d86:	b2db      	uxtb	r3, r3
20003d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003d8a:	78fb      	ldrb	r3, [r7, #3]
20003d8c:	b2db      	uxtb	r3, r3
20003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003d92:	2b80      	cmp	r3, #128	; 0x80
20003d94:	d0ef      	beq.n	20003d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
20003d96:	4b27      	ldr	r3, [pc, #156]	; (20003e34 <xPortStartScheduler+0x134>)
20003d98:	681b      	ldr	r3, [r3, #0]
20003d9a:	f1c3 0307 	rsb	r3, r3, #7
20003d9e:	2b04      	cmp	r3, #4
20003da0:	d00a      	beq.n	20003db8 <xPortStartScheduler+0xb8>
	__asm volatile
20003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
20003da6:	f383 8811 	msr	BASEPRI, r3
20003daa:	f3bf 8f6f 	isb	sy
20003dae:	f3bf 8f4f 	dsb	sy
20003db2:	60bb      	str	r3, [r7, #8]
}
20003db4:	bf00      	nop
20003db6:	e7fe      	b.n	20003db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
20003db8:	4b1e      	ldr	r3, [pc, #120]	; (20003e34 <xPortStartScheduler+0x134>)
20003dba:	681b      	ldr	r3, [r3, #0]
20003dbc:	021b      	lsls	r3, r3, #8
20003dbe:	4a1d      	ldr	r2, [pc, #116]	; (20003e34 <xPortStartScheduler+0x134>)
20003dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20003dc2:	4b1c      	ldr	r3, [pc, #112]	; (20003e34 <xPortStartScheduler+0x134>)
20003dc4:	681b      	ldr	r3, [r3, #0]
20003dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
20003dca:	4a1a      	ldr	r2, [pc, #104]	; (20003e34 <xPortStartScheduler+0x134>)
20003dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
20003dce:	687b      	ldr	r3, [r7, #4]
20003dd0:	b2da      	uxtb	r2, r3
20003dd2:	697b      	ldr	r3, [r7, #20]
20003dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20003dd6:	4b18      	ldr	r3, [pc, #96]	; (20003e38 <xPortStartScheduler+0x138>)
20003dd8:	681b      	ldr	r3, [r3, #0]
20003dda:	4a17      	ldr	r2, [pc, #92]	; (20003e38 <xPortStartScheduler+0x138>)
20003ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20003de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
20003de2:	4b15      	ldr	r3, [pc, #84]	; (20003e38 <xPortStartScheduler+0x138>)
20003de4:	681b      	ldr	r3, [r3, #0]
20003de6:	4a14      	ldr	r2, [pc, #80]	; (20003e38 <xPortStartScheduler+0x138>)
20003de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
20003dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20003dee:	f000 f8dd 	bl	20003fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20003df2:	4b12      	ldr	r3, [pc, #72]	; (20003e3c <xPortStartScheduler+0x13c>)
20003df4:	2200      	movs	r2, #0
20003df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
20003df8:	f000 f8fc 	bl	20003ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
20003dfc:	4b10      	ldr	r3, [pc, #64]	; (20003e40 <xPortStartScheduler+0x140>)
20003dfe:	681b      	ldr	r3, [r3, #0]
20003e00:	4a0f      	ldr	r2, [pc, #60]	; (20003e40 <xPortStartScheduler+0x140>)
20003e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
20003e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003e08:	f7ff ff66 	bl	20003cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
20003e0c:	f7fe ff4e 	bl	20002cac <vTaskSwitchContext>
	prvTaskExitError();
20003e10:	f7ff ff22 	bl	20003c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
20003e14:	2300      	movs	r3, #0
}
20003e16:	4618      	mov	r0, r3
20003e18:	3718      	adds	r7, #24
20003e1a:	46bd      	mov	sp, r7
20003e1c:	bd80      	pop	{r7, pc}
20003e1e:	bf00      	nop
20003e20:	e000ed00 	.word	0xe000ed00
20003e24:	410fc271 	.word	0x410fc271
20003e28:	410fc270 	.word	0x410fc270
20003e2c:	e000e400 	.word	0xe000e400
20003e30:	2000bae0 	.word	0x2000bae0
20003e34:	2000bae4 	.word	0x2000bae4
20003e38:	e000ed20 	.word	0xe000ed20
20003e3c:	2000ac34 	.word	0x2000ac34
20003e40:	e000ef34 	.word	0xe000ef34

20003e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
20003e44:	b480      	push	{r7}
20003e46:	b083      	sub	sp, #12
20003e48:	af00      	add	r7, sp, #0
	__asm volatile
20003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
20003e4e:	f383 8811 	msr	BASEPRI, r3
20003e52:	f3bf 8f6f 	isb	sy
20003e56:	f3bf 8f4f 	dsb	sy
20003e5a:	607b      	str	r3, [r7, #4]
}
20003e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20003e5e:	4b0f      	ldr	r3, [pc, #60]	; (20003e9c <vPortEnterCritical+0x58>)
20003e60:	681b      	ldr	r3, [r3, #0]
20003e62:	3301      	adds	r3, #1
20003e64:	4a0d      	ldr	r2, [pc, #52]	; (20003e9c <vPortEnterCritical+0x58>)
20003e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
20003e68:	4b0c      	ldr	r3, [pc, #48]	; (20003e9c <vPortEnterCritical+0x58>)
20003e6a:	681b      	ldr	r3, [r3, #0]
20003e6c:	2b01      	cmp	r3, #1
20003e6e:	d10f      	bne.n	20003e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003e70:	4b0b      	ldr	r3, [pc, #44]	; (20003ea0 <vPortEnterCritical+0x5c>)
20003e72:	681b      	ldr	r3, [r3, #0]
20003e74:	b2db      	uxtb	r3, r3
20003e76:	2b00      	cmp	r3, #0
20003e78:	d00a      	beq.n	20003e90 <vPortEnterCritical+0x4c>
	__asm volatile
20003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
20003e7e:	f383 8811 	msr	BASEPRI, r3
20003e82:	f3bf 8f6f 	isb	sy
20003e86:	f3bf 8f4f 	dsb	sy
20003e8a:	603b      	str	r3, [r7, #0]
}
20003e8c:	bf00      	nop
20003e8e:	e7fe      	b.n	20003e8e <vPortEnterCritical+0x4a>
	}
}
20003e90:	bf00      	nop
20003e92:	370c      	adds	r7, #12
20003e94:	46bd      	mov	sp, r7
20003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
20003e9a:	4770      	bx	lr
20003e9c:	2000ac34 	.word	0x2000ac34
20003ea0:	e000ed04 	.word	0xe000ed04

20003ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
20003ea4:	b480      	push	{r7}
20003ea6:	b083      	sub	sp, #12
20003ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20003eaa:	4b12      	ldr	r3, [pc, #72]	; (20003ef4 <vPortExitCritical+0x50>)
20003eac:	681b      	ldr	r3, [r3, #0]
20003eae:	2b00      	cmp	r3, #0
20003eb0:	d10a      	bne.n	20003ec8 <vPortExitCritical+0x24>
	__asm volatile
20003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
20003eb6:	f383 8811 	msr	BASEPRI, r3
20003eba:	f3bf 8f6f 	isb	sy
20003ebe:	f3bf 8f4f 	dsb	sy
20003ec2:	607b      	str	r3, [r7, #4]
}
20003ec4:	bf00      	nop
20003ec6:	e7fe      	b.n	20003ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
20003ec8:	4b0a      	ldr	r3, [pc, #40]	; (20003ef4 <vPortExitCritical+0x50>)
20003eca:	681b      	ldr	r3, [r3, #0]
20003ecc:	3b01      	subs	r3, #1
20003ece:	4a09      	ldr	r2, [pc, #36]	; (20003ef4 <vPortExitCritical+0x50>)
20003ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
20003ed2:	4b08      	ldr	r3, [pc, #32]	; (20003ef4 <vPortExitCritical+0x50>)
20003ed4:	681b      	ldr	r3, [r3, #0]
20003ed6:	2b00      	cmp	r3, #0
20003ed8:	d105      	bne.n	20003ee6 <vPortExitCritical+0x42>
20003eda:	2300      	movs	r3, #0
20003edc:	603b      	str	r3, [r7, #0]
	__asm volatile
20003ede:	683b      	ldr	r3, [r7, #0]
20003ee0:	f383 8811 	msr	BASEPRI, r3
}
20003ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
20003ee6:	bf00      	nop
20003ee8:	370c      	adds	r7, #12
20003eea:	46bd      	mov	sp, r7
20003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
20003ef0:	4770      	bx	lr
20003ef2:	bf00      	nop
20003ef4:	2000ac34 	.word	0x2000ac34
	...

20003f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003f00:	f3ef 8009 	mrs	r0, PSP
20003f04:	f3bf 8f6f 	isb	sy
20003f08:	4b15      	ldr	r3, [pc, #84]	; (20003f60 <pxCurrentTCBConst>)
20003f0a:	681a      	ldr	r2, [r3, #0]
20003f0c:	f01e 0f10 	tst.w	lr, #16
20003f10:	bf08      	it	eq
20003f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
20003f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003f1a:	6010      	str	r0, [r2, #0]
20003f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
20003f20:	f04f 0050 	mov.w	r0, #80	; 0x50
20003f24:	f380 8811 	msr	BASEPRI, r0
20003f28:	f3bf 8f4f 	dsb	sy
20003f2c:	f3bf 8f6f 	isb	sy
20003f30:	f7fe febc 	bl	20002cac <vTaskSwitchContext>
20003f34:	f04f 0000 	mov.w	r0, #0
20003f38:	f380 8811 	msr	BASEPRI, r0
20003f3c:	bc09      	pop	{r0, r3}
20003f3e:	6819      	ldr	r1, [r3, #0]
20003f40:	6808      	ldr	r0, [r1, #0]
20003f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003f46:	f01e 0f10 	tst.w	lr, #16
20003f4a:	bf08      	it	eq
20003f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
20003f50:	f380 8809 	msr	PSP, r0
20003f54:	f3bf 8f6f 	isb	sy
20003f58:	4770      	bx	lr
20003f5a:	bf00      	nop
20003f5c:	f3af 8000 	nop.w

20003f60 <pxCurrentTCBConst>:
20003f60:	2000b4b4 	.word	0x2000b4b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
20003f64:	bf00      	nop
20003f66:	bf00      	nop

20003f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20003f68:	b580      	push	{r7, lr}
20003f6a:	b082      	sub	sp, #8
20003f6c:	af00      	add	r7, sp, #0
	__asm volatile
20003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003f72:	f383 8811 	msr	BASEPRI, r3
20003f76:	f3bf 8f6f 	isb	sy
20003f7a:	f3bf 8f4f 	dsb	sy
20003f7e:	607b      	str	r3, [r7, #4]
}
20003f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20003f82:	f7fe fdd9 	bl	20002b38 <xTaskIncrementTick>
20003f86:	4603      	mov	r3, r0
20003f88:	2b00      	cmp	r3, #0
20003f8a:	d003      	beq.n	20003f94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20003f8c:	4b06      	ldr	r3, [pc, #24]	; (20003fa8 <xPortSysTickHandler+0x40>)
20003f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003f92:	601a      	str	r2, [r3, #0]
20003f94:	2300      	movs	r3, #0
20003f96:	603b      	str	r3, [r7, #0]
	__asm volatile
20003f98:	683b      	ldr	r3, [r7, #0]
20003f9a:	f383 8811 	msr	BASEPRI, r3
}
20003f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
20003fa0:	bf00      	nop
20003fa2:	3708      	adds	r7, #8
20003fa4:	46bd      	mov	sp, r7
20003fa6:	bd80      	pop	{r7, pc}
20003fa8:	e000ed04 	.word	0xe000ed04

20003fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20003fac:	b480      	push	{r7}
20003fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
20003fb0:	4b0b      	ldr	r3, [pc, #44]	; (20003fe0 <vPortSetupTimerInterrupt+0x34>)
20003fb2:	2200      	movs	r2, #0
20003fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
20003fb6:	4b0b      	ldr	r3, [pc, #44]	; (20003fe4 <vPortSetupTimerInterrupt+0x38>)
20003fb8:	2200      	movs	r2, #0
20003fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20003fbc:	4b0a      	ldr	r3, [pc, #40]	; (20003fe8 <vPortSetupTimerInterrupt+0x3c>)
20003fbe:	681b      	ldr	r3, [r3, #0]
20003fc0:	4a0a      	ldr	r2, [pc, #40]	; (20003fec <vPortSetupTimerInterrupt+0x40>)
20003fc2:	fba2 2303 	umull	r2, r3, r2, r3
20003fc6:	099b      	lsrs	r3, r3, #6
20003fc8:	4a09      	ldr	r2, [pc, #36]	; (20003ff0 <vPortSetupTimerInterrupt+0x44>)
20003fca:	3b01      	subs	r3, #1
20003fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20003fce:	4b04      	ldr	r3, [pc, #16]	; (20003fe0 <vPortSetupTimerInterrupt+0x34>)
20003fd0:	2207      	movs	r2, #7
20003fd2:	601a      	str	r2, [r3, #0]
}
20003fd4:	bf00      	nop
20003fd6:	46bd      	mov	sp, r7
20003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003fdc:	4770      	bx	lr
20003fde:	bf00      	nop
20003fe0:	e000e010 	.word	0xe000e010
20003fe4:	e000e018 	.word	0xe000e018
20003fe8:	2000ac70 	.word	0x2000ac70
20003fec:	10624dd3 	.word	0x10624dd3
20003ff0:	e000e014 	.word	0xe000e014

20003ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
20003ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 20004004 <vPortEnableVFP+0x10>
20003ff8:	6801      	ldr	r1, [r0, #0]
20003ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003ffe:	6001      	str	r1, [r0, #0]
20004000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
20004002:	bf00      	nop
20004004:	e000ed88 	.word	0xe000ed88

20004008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20004008:	b480      	push	{r7}
2000400a:	b085      	sub	sp, #20
2000400c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
2000400e:	f3ef 8305 	mrs	r3, IPSR
20004012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20004014:	68fb      	ldr	r3, [r7, #12]
20004016:	2b0f      	cmp	r3, #15
20004018:	d914      	bls.n	20004044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
2000401a:	4a17      	ldr	r2, [pc, #92]	; (20004078 <vPortValidateInterruptPriority+0x70>)
2000401c:	68fb      	ldr	r3, [r7, #12]
2000401e:	4413      	add	r3, r2
20004020:	781b      	ldrb	r3, [r3, #0]
20004022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20004024:	4b15      	ldr	r3, [pc, #84]	; (2000407c <vPortValidateInterruptPriority+0x74>)
20004026:	781b      	ldrb	r3, [r3, #0]
20004028:	7afa      	ldrb	r2, [r7, #11]
2000402a:	429a      	cmp	r2, r3
2000402c:	d20a      	bcs.n	20004044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
2000402e:	f04f 0350 	mov.w	r3, #80	; 0x50
20004032:	f383 8811 	msr	BASEPRI, r3
20004036:	f3bf 8f6f 	isb	sy
2000403a:	f3bf 8f4f 	dsb	sy
2000403e:	607b      	str	r3, [r7, #4]
}
20004040:	bf00      	nop
20004042:	e7fe      	b.n	20004042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
20004044:	4b0e      	ldr	r3, [pc, #56]	; (20004080 <vPortValidateInterruptPriority+0x78>)
20004046:	681b      	ldr	r3, [r3, #0]
20004048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
2000404c:	4b0d      	ldr	r3, [pc, #52]	; (20004084 <vPortValidateInterruptPriority+0x7c>)
2000404e:	681b      	ldr	r3, [r3, #0]
20004050:	429a      	cmp	r2, r3
20004052:	d90a      	bls.n	2000406a <vPortValidateInterruptPriority+0x62>
	__asm volatile
20004054:	f04f 0350 	mov.w	r3, #80	; 0x50
20004058:	f383 8811 	msr	BASEPRI, r3
2000405c:	f3bf 8f6f 	isb	sy
20004060:	f3bf 8f4f 	dsb	sy
20004064:	603b      	str	r3, [r7, #0]
}
20004066:	bf00      	nop
20004068:	e7fe      	b.n	20004068 <vPortValidateInterruptPriority+0x60>
	}
2000406a:	bf00      	nop
2000406c:	3714      	adds	r7, #20
2000406e:	46bd      	mov	sp, r7
20004070:	f85d 7b04 	ldr.w	r7, [sp], #4
20004074:	4770      	bx	lr
20004076:	bf00      	nop
20004078:	e000e3f0 	.word	0xe000e3f0
2000407c:	2000bae0 	.word	0x2000bae0
20004080:	e000ed0c 	.word	0xe000ed0c
20004084:	2000bae4 	.word	0x2000bae4

20004088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20004088:	b580      	push	{r7, lr}
2000408a:	b08a      	sub	sp, #40	; 0x28
2000408c:	af00      	add	r7, sp, #0
2000408e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20004090:	2300      	movs	r3, #0
20004092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
20004094:	f7fe fc94 	bl	200029c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20004098:	4b5b      	ldr	r3, [pc, #364]	; (20004208 <pvPortMalloc+0x180>)
2000409a:	681b      	ldr	r3, [r3, #0]
2000409c:	2b00      	cmp	r3, #0
2000409e:	d101      	bne.n	200040a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
200040a0:	f000 f920 	bl	200042e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
200040a4:	4b59      	ldr	r3, [pc, #356]	; (2000420c <pvPortMalloc+0x184>)
200040a6:	681a      	ldr	r2, [r3, #0]
200040a8:	687b      	ldr	r3, [r7, #4]
200040aa:	4013      	ands	r3, r2
200040ac:	2b00      	cmp	r3, #0
200040ae:	f040 8093 	bne.w	200041d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
200040b2:	687b      	ldr	r3, [r7, #4]
200040b4:	2b00      	cmp	r3, #0
200040b6:	d01d      	beq.n	200040f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
200040b8:	2208      	movs	r2, #8
200040ba:	687b      	ldr	r3, [r7, #4]
200040bc:	4413      	add	r3, r2
200040be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
200040c0:	687b      	ldr	r3, [r7, #4]
200040c2:	f003 0307 	and.w	r3, r3, #7
200040c6:	2b00      	cmp	r3, #0
200040c8:	d014      	beq.n	200040f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
200040ca:	687b      	ldr	r3, [r7, #4]
200040cc:	f023 0307 	bic.w	r3, r3, #7
200040d0:	3308      	adds	r3, #8
200040d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
200040d4:	687b      	ldr	r3, [r7, #4]
200040d6:	f003 0307 	and.w	r3, r3, #7
200040da:	2b00      	cmp	r3, #0
200040dc:	d00a      	beq.n	200040f4 <pvPortMalloc+0x6c>
	__asm volatile
200040de:	f04f 0350 	mov.w	r3, #80	; 0x50
200040e2:	f383 8811 	msr	BASEPRI, r3
200040e6:	f3bf 8f6f 	isb	sy
200040ea:	f3bf 8f4f 	dsb	sy
200040ee:	617b      	str	r3, [r7, #20]
}
200040f0:	bf00      	nop
200040f2:	e7fe      	b.n	200040f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
200040f4:	687b      	ldr	r3, [r7, #4]
200040f6:	2b00      	cmp	r3, #0
200040f8:	d06e      	beq.n	200041d8 <pvPortMalloc+0x150>
200040fa:	4b45      	ldr	r3, [pc, #276]	; (20004210 <pvPortMalloc+0x188>)
200040fc:	681b      	ldr	r3, [r3, #0]
200040fe:	687a      	ldr	r2, [r7, #4]
20004100:	429a      	cmp	r2, r3
20004102:	d869      	bhi.n	200041d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20004104:	4b43      	ldr	r3, [pc, #268]	; (20004214 <pvPortMalloc+0x18c>)
20004106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
20004108:	4b42      	ldr	r3, [pc, #264]	; (20004214 <pvPortMalloc+0x18c>)
2000410a:	681b      	ldr	r3, [r3, #0]
2000410c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000410e:	e004      	b.n	2000411a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
20004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
20004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004116:	681b      	ldr	r3, [r3, #0]
20004118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000411c:	685b      	ldr	r3, [r3, #4]
2000411e:	687a      	ldr	r2, [r7, #4]
20004120:	429a      	cmp	r2, r3
20004122:	d903      	bls.n	2000412c <pvPortMalloc+0xa4>
20004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004126:	681b      	ldr	r3, [r3, #0]
20004128:	2b00      	cmp	r3, #0
2000412a:	d1f1      	bne.n	20004110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
2000412c:	4b36      	ldr	r3, [pc, #216]	; (20004208 <pvPortMalloc+0x180>)
2000412e:	681b      	ldr	r3, [r3, #0]
20004130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004132:	429a      	cmp	r2, r3
20004134:	d050      	beq.n	200041d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20004136:	6a3b      	ldr	r3, [r7, #32]
20004138:	681b      	ldr	r3, [r3, #0]
2000413a:	2208      	movs	r2, #8
2000413c:	4413      	add	r3, r2
2000413e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004142:	681a      	ldr	r2, [r3, #0]
20004144:	6a3b      	ldr	r3, [r7, #32]
20004146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000414a:	685a      	ldr	r2, [r3, #4]
2000414c:	687b      	ldr	r3, [r7, #4]
2000414e:	1ad2      	subs	r2, r2, r3
20004150:	2308      	movs	r3, #8
20004152:	005b      	lsls	r3, r3, #1
20004154:	429a      	cmp	r2, r3
20004156:	d91f      	bls.n	20004198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20004158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000415a:	687b      	ldr	r3, [r7, #4]
2000415c:	4413      	add	r3, r2
2000415e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20004160:	69bb      	ldr	r3, [r7, #24]
20004162:	f003 0307 	and.w	r3, r3, #7
20004166:	2b00      	cmp	r3, #0
20004168:	d00a      	beq.n	20004180 <pvPortMalloc+0xf8>
	__asm volatile
2000416a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000416e:	f383 8811 	msr	BASEPRI, r3
20004172:	f3bf 8f6f 	isb	sy
20004176:	f3bf 8f4f 	dsb	sy
2000417a:	613b      	str	r3, [r7, #16]
}
2000417c:	bf00      	nop
2000417e:	e7fe      	b.n	2000417e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004182:	685a      	ldr	r2, [r3, #4]
20004184:	687b      	ldr	r3, [r7, #4]
20004186:	1ad2      	subs	r2, r2, r3
20004188:	69bb      	ldr	r3, [r7, #24]
2000418a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
2000418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000418e:	687a      	ldr	r2, [r7, #4]
20004190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20004192:	69b8      	ldr	r0, [r7, #24]
20004194:	f000 f908 	bl	200043a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20004198:	4b1d      	ldr	r3, [pc, #116]	; (20004210 <pvPortMalloc+0x188>)
2000419a:	681a      	ldr	r2, [r3, #0]
2000419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000419e:	685b      	ldr	r3, [r3, #4]
200041a0:	1ad3      	subs	r3, r2, r3
200041a2:	4a1b      	ldr	r2, [pc, #108]	; (20004210 <pvPortMalloc+0x188>)
200041a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
200041a6:	4b1a      	ldr	r3, [pc, #104]	; (20004210 <pvPortMalloc+0x188>)
200041a8:	681a      	ldr	r2, [r3, #0]
200041aa:	4b1b      	ldr	r3, [pc, #108]	; (20004218 <pvPortMalloc+0x190>)
200041ac:	681b      	ldr	r3, [r3, #0]
200041ae:	429a      	cmp	r2, r3
200041b0:	d203      	bcs.n	200041ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
200041b2:	4b17      	ldr	r3, [pc, #92]	; (20004210 <pvPortMalloc+0x188>)
200041b4:	681b      	ldr	r3, [r3, #0]
200041b6:	4a18      	ldr	r2, [pc, #96]	; (20004218 <pvPortMalloc+0x190>)
200041b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
200041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200041bc:	685a      	ldr	r2, [r3, #4]
200041be:	4b13      	ldr	r3, [pc, #76]	; (2000420c <pvPortMalloc+0x184>)
200041c0:	681b      	ldr	r3, [r3, #0]
200041c2:	431a      	orrs	r2, r3
200041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200041c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
200041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200041ca:	2200      	movs	r2, #0
200041cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
200041ce:	4b13      	ldr	r3, [pc, #76]	; (2000421c <pvPortMalloc+0x194>)
200041d0:	681b      	ldr	r3, [r3, #0]
200041d2:	3301      	adds	r3, #1
200041d4:	4a11      	ldr	r2, [pc, #68]	; (2000421c <pvPortMalloc+0x194>)
200041d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
200041d8:	f7fe fc00 	bl	200029dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
200041dc:	69fb      	ldr	r3, [r7, #28]
200041de:	f003 0307 	and.w	r3, r3, #7
200041e2:	2b00      	cmp	r3, #0
200041e4:	d00a      	beq.n	200041fc <pvPortMalloc+0x174>
	__asm volatile
200041e6:	f04f 0350 	mov.w	r3, #80	; 0x50
200041ea:	f383 8811 	msr	BASEPRI, r3
200041ee:	f3bf 8f6f 	isb	sy
200041f2:	f3bf 8f4f 	dsb	sy
200041f6:	60fb      	str	r3, [r7, #12]
}
200041f8:	bf00      	nop
200041fa:	e7fe      	b.n	200041fa <pvPortMalloc+0x172>
	return pvReturn;
200041fc:	69fb      	ldr	r3, [r7, #28]
}
200041fe:	4618      	mov	r0, r3
20004200:	3728      	adds	r7, #40	; 0x28
20004202:	46bd      	mov	sp, r7
20004204:	bd80      	pop	{r7, pc}
20004206:	bf00      	nop
20004208:	2000f6f0 	.word	0x2000f6f0
2000420c:	2000f704 	.word	0x2000f704
20004210:	2000f6f4 	.word	0x2000f6f4
20004214:	2000f6e8 	.word	0x2000f6e8
20004218:	2000f6f8 	.word	0x2000f6f8
2000421c:	2000f6fc 	.word	0x2000f6fc

20004220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20004220:	b580      	push	{r7, lr}
20004222:	b086      	sub	sp, #24
20004224:	af00      	add	r7, sp, #0
20004226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20004228:	687b      	ldr	r3, [r7, #4]
2000422a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
2000422c:	687b      	ldr	r3, [r7, #4]
2000422e:	2b00      	cmp	r3, #0
20004230:	d04d      	beq.n	200042ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20004232:	2308      	movs	r3, #8
20004234:	425b      	negs	r3, r3
20004236:	697a      	ldr	r2, [r7, #20]
20004238:	4413      	add	r3, r2
2000423a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
2000423c:	697b      	ldr	r3, [r7, #20]
2000423e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20004240:	693b      	ldr	r3, [r7, #16]
20004242:	685a      	ldr	r2, [r3, #4]
20004244:	4b24      	ldr	r3, [pc, #144]	; (200042d8 <vPortFree+0xb8>)
20004246:	681b      	ldr	r3, [r3, #0]
20004248:	4013      	ands	r3, r2
2000424a:	2b00      	cmp	r3, #0
2000424c:	d10a      	bne.n	20004264 <vPortFree+0x44>
	__asm volatile
2000424e:	f04f 0350 	mov.w	r3, #80	; 0x50
20004252:	f383 8811 	msr	BASEPRI, r3
20004256:	f3bf 8f6f 	isb	sy
2000425a:	f3bf 8f4f 	dsb	sy
2000425e:	60fb      	str	r3, [r7, #12]
}
20004260:	bf00      	nop
20004262:	e7fe      	b.n	20004262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20004264:	693b      	ldr	r3, [r7, #16]
20004266:	681b      	ldr	r3, [r3, #0]
20004268:	2b00      	cmp	r3, #0
2000426a:	d00a      	beq.n	20004282 <vPortFree+0x62>
	__asm volatile
2000426c:	f04f 0350 	mov.w	r3, #80	; 0x50
20004270:	f383 8811 	msr	BASEPRI, r3
20004274:	f3bf 8f6f 	isb	sy
20004278:	f3bf 8f4f 	dsb	sy
2000427c:	60bb      	str	r3, [r7, #8]
}
2000427e:	bf00      	nop
20004280:	e7fe      	b.n	20004280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20004282:	693b      	ldr	r3, [r7, #16]
20004284:	685a      	ldr	r2, [r3, #4]
20004286:	4b14      	ldr	r3, [pc, #80]	; (200042d8 <vPortFree+0xb8>)
20004288:	681b      	ldr	r3, [r3, #0]
2000428a:	4013      	ands	r3, r2
2000428c:	2b00      	cmp	r3, #0
2000428e:	d01e      	beq.n	200042ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20004290:	693b      	ldr	r3, [r7, #16]
20004292:	681b      	ldr	r3, [r3, #0]
20004294:	2b00      	cmp	r3, #0
20004296:	d11a      	bne.n	200042ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20004298:	693b      	ldr	r3, [r7, #16]
2000429a:	685a      	ldr	r2, [r3, #4]
2000429c:	4b0e      	ldr	r3, [pc, #56]	; (200042d8 <vPortFree+0xb8>)
2000429e:	681b      	ldr	r3, [r3, #0]
200042a0:	43db      	mvns	r3, r3
200042a2:	401a      	ands	r2, r3
200042a4:	693b      	ldr	r3, [r7, #16]
200042a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
200042a8:	f7fe fb8a 	bl	200029c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
200042ac:	693b      	ldr	r3, [r7, #16]
200042ae:	685a      	ldr	r2, [r3, #4]
200042b0:	4b0a      	ldr	r3, [pc, #40]	; (200042dc <vPortFree+0xbc>)
200042b2:	681b      	ldr	r3, [r3, #0]
200042b4:	4413      	add	r3, r2
200042b6:	4a09      	ldr	r2, [pc, #36]	; (200042dc <vPortFree+0xbc>)
200042b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
200042ba:	6938      	ldr	r0, [r7, #16]
200042bc:	f000 f874 	bl	200043a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
200042c0:	4b07      	ldr	r3, [pc, #28]	; (200042e0 <vPortFree+0xc0>)
200042c2:	681b      	ldr	r3, [r3, #0]
200042c4:	3301      	adds	r3, #1
200042c6:	4a06      	ldr	r2, [pc, #24]	; (200042e0 <vPortFree+0xc0>)
200042c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
200042ca:	f7fe fb87 	bl	200029dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
200042ce:	bf00      	nop
200042d0:	3718      	adds	r7, #24
200042d2:	46bd      	mov	sp, r7
200042d4:	bd80      	pop	{r7, pc}
200042d6:	bf00      	nop
200042d8:	2000f704 	.word	0x2000f704
200042dc:	2000f6f4 	.word	0x2000f6f4
200042e0:	2000f700 	.word	0x2000f700

200042e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
200042e4:	b480      	push	{r7}
200042e6:	b085      	sub	sp, #20
200042e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
200042ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
200042ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
200042f0:	4b27      	ldr	r3, [pc, #156]	; (20004390 <prvHeapInit+0xac>)
200042f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
200042f4:	68fb      	ldr	r3, [r7, #12]
200042f6:	f003 0307 	and.w	r3, r3, #7
200042fa:	2b00      	cmp	r3, #0
200042fc:	d00c      	beq.n	20004318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
200042fe:	68fb      	ldr	r3, [r7, #12]
20004300:	3307      	adds	r3, #7
20004302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004304:	68fb      	ldr	r3, [r7, #12]
20004306:	f023 0307 	bic.w	r3, r3, #7
2000430a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
2000430c:	68ba      	ldr	r2, [r7, #8]
2000430e:	68fb      	ldr	r3, [r7, #12]
20004310:	1ad3      	subs	r3, r2, r3
20004312:	4a1f      	ldr	r2, [pc, #124]	; (20004390 <prvHeapInit+0xac>)
20004314:	4413      	add	r3, r2
20004316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20004318:	68fb      	ldr	r3, [r7, #12]
2000431a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
2000431c:	4a1d      	ldr	r2, [pc, #116]	; (20004394 <prvHeapInit+0xb0>)
2000431e:	687b      	ldr	r3, [r7, #4]
20004320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
20004322:	4b1c      	ldr	r3, [pc, #112]	; (20004394 <prvHeapInit+0xb0>)
20004324:	2200      	movs	r2, #0
20004326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20004328:	687b      	ldr	r3, [r7, #4]
2000432a:	68ba      	ldr	r2, [r7, #8]
2000432c:	4413      	add	r3, r2
2000432e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
20004330:	2208      	movs	r2, #8
20004332:	68fb      	ldr	r3, [r7, #12]
20004334:	1a9b      	subs	r3, r3, r2
20004336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20004338:	68fb      	ldr	r3, [r7, #12]
2000433a:	f023 0307 	bic.w	r3, r3, #7
2000433e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
20004340:	68fb      	ldr	r3, [r7, #12]
20004342:	4a15      	ldr	r2, [pc, #84]	; (20004398 <prvHeapInit+0xb4>)
20004344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
20004346:	4b14      	ldr	r3, [pc, #80]	; (20004398 <prvHeapInit+0xb4>)
20004348:	681b      	ldr	r3, [r3, #0]
2000434a:	2200      	movs	r2, #0
2000434c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
2000434e:	4b12      	ldr	r3, [pc, #72]	; (20004398 <prvHeapInit+0xb4>)
20004350:	681b      	ldr	r3, [r3, #0]
20004352:	2200      	movs	r2, #0
20004354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20004356:	687b      	ldr	r3, [r7, #4]
20004358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
2000435a:	683b      	ldr	r3, [r7, #0]
2000435c:	68fa      	ldr	r2, [r7, #12]
2000435e:	1ad2      	subs	r2, r2, r3
20004360:	683b      	ldr	r3, [r7, #0]
20004362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20004364:	4b0c      	ldr	r3, [pc, #48]	; (20004398 <prvHeapInit+0xb4>)
20004366:	681a      	ldr	r2, [r3, #0]
20004368:	683b      	ldr	r3, [r7, #0]
2000436a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
2000436c:	683b      	ldr	r3, [r7, #0]
2000436e:	685b      	ldr	r3, [r3, #4]
20004370:	4a0a      	ldr	r2, [pc, #40]	; (2000439c <prvHeapInit+0xb8>)
20004372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20004374:	683b      	ldr	r3, [r7, #0]
20004376:	685b      	ldr	r3, [r3, #4]
20004378:	4a09      	ldr	r2, [pc, #36]	; (200043a0 <prvHeapInit+0xbc>)
2000437a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
2000437c:	4b09      	ldr	r3, [pc, #36]	; (200043a4 <prvHeapInit+0xc0>)
2000437e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20004382:	601a      	str	r2, [r3, #0]
}
20004384:	bf00      	nop
20004386:	3714      	adds	r7, #20
20004388:	46bd      	mov	sp, r7
2000438a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000438e:	4770      	bx	lr
20004390:	2000bae8 	.word	0x2000bae8
20004394:	2000f6e8 	.word	0x2000f6e8
20004398:	2000f6f0 	.word	0x2000f6f0
2000439c:	2000f6f8 	.word	0x2000f6f8
200043a0:	2000f6f4 	.word	0x2000f6f4
200043a4:	2000f704 	.word	0x2000f704

200043a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
200043a8:	b480      	push	{r7}
200043aa:	b085      	sub	sp, #20
200043ac:	af00      	add	r7, sp, #0
200043ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
200043b0:	4b28      	ldr	r3, [pc, #160]	; (20004454 <prvInsertBlockIntoFreeList+0xac>)
200043b2:	60fb      	str	r3, [r7, #12]
200043b4:	e002      	b.n	200043bc <prvInsertBlockIntoFreeList+0x14>
200043b6:	68fb      	ldr	r3, [r7, #12]
200043b8:	681b      	ldr	r3, [r3, #0]
200043ba:	60fb      	str	r3, [r7, #12]
200043bc:	68fb      	ldr	r3, [r7, #12]
200043be:	681b      	ldr	r3, [r3, #0]
200043c0:	687a      	ldr	r2, [r7, #4]
200043c2:	429a      	cmp	r2, r3
200043c4:	d8f7      	bhi.n	200043b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
200043c6:	68fb      	ldr	r3, [r7, #12]
200043c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
200043ca:	68fb      	ldr	r3, [r7, #12]
200043cc:	685b      	ldr	r3, [r3, #4]
200043ce:	68ba      	ldr	r2, [r7, #8]
200043d0:	4413      	add	r3, r2
200043d2:	687a      	ldr	r2, [r7, #4]
200043d4:	429a      	cmp	r2, r3
200043d6:	d108      	bne.n	200043ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
200043d8:	68fb      	ldr	r3, [r7, #12]
200043da:	685a      	ldr	r2, [r3, #4]
200043dc:	687b      	ldr	r3, [r7, #4]
200043de:	685b      	ldr	r3, [r3, #4]
200043e0:	441a      	add	r2, r3
200043e2:	68fb      	ldr	r3, [r7, #12]
200043e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
200043e6:	68fb      	ldr	r3, [r7, #12]
200043e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
200043ea:	687b      	ldr	r3, [r7, #4]
200043ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
200043ee:	687b      	ldr	r3, [r7, #4]
200043f0:	685b      	ldr	r3, [r3, #4]
200043f2:	68ba      	ldr	r2, [r7, #8]
200043f4:	441a      	add	r2, r3
200043f6:	68fb      	ldr	r3, [r7, #12]
200043f8:	681b      	ldr	r3, [r3, #0]
200043fa:	429a      	cmp	r2, r3
200043fc:	d118      	bne.n	20004430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
200043fe:	68fb      	ldr	r3, [r7, #12]
20004400:	681a      	ldr	r2, [r3, #0]
20004402:	4b15      	ldr	r3, [pc, #84]	; (20004458 <prvInsertBlockIntoFreeList+0xb0>)
20004404:	681b      	ldr	r3, [r3, #0]
20004406:	429a      	cmp	r2, r3
20004408:	d00d      	beq.n	20004426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
2000440a:	687b      	ldr	r3, [r7, #4]
2000440c:	685a      	ldr	r2, [r3, #4]
2000440e:	68fb      	ldr	r3, [r7, #12]
20004410:	681b      	ldr	r3, [r3, #0]
20004412:	685b      	ldr	r3, [r3, #4]
20004414:	441a      	add	r2, r3
20004416:	687b      	ldr	r3, [r7, #4]
20004418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
2000441a:	68fb      	ldr	r3, [r7, #12]
2000441c:	681b      	ldr	r3, [r3, #0]
2000441e:	681a      	ldr	r2, [r3, #0]
20004420:	687b      	ldr	r3, [r7, #4]
20004422:	601a      	str	r2, [r3, #0]
20004424:	e008      	b.n	20004438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20004426:	4b0c      	ldr	r3, [pc, #48]	; (20004458 <prvInsertBlockIntoFreeList+0xb0>)
20004428:	681a      	ldr	r2, [r3, #0]
2000442a:	687b      	ldr	r3, [r7, #4]
2000442c:	601a      	str	r2, [r3, #0]
2000442e:	e003      	b.n	20004438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
20004430:	68fb      	ldr	r3, [r7, #12]
20004432:	681a      	ldr	r2, [r3, #0]
20004434:	687b      	ldr	r3, [r7, #4]
20004436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
20004438:	68fa      	ldr	r2, [r7, #12]
2000443a:	687b      	ldr	r3, [r7, #4]
2000443c:	429a      	cmp	r2, r3
2000443e:	d002      	beq.n	20004446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20004440:	68fb      	ldr	r3, [r7, #12]
20004442:	687a      	ldr	r2, [r7, #4]
20004444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20004446:	bf00      	nop
20004448:	3714      	adds	r7, #20
2000444a:	46bd      	mov	sp, r7
2000444c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004450:	4770      	bx	lr
20004452:	bf00      	nop
20004454:	2000f6e8 	.word	0x2000f6e8
20004458:	2000f6f0 	.word	0x2000f6f0

2000445c <__NVIC_GetPriorityGrouping>:
{
2000445c:	b480      	push	{r7}
2000445e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20004460:	4b04      	ldr	r3, [pc, #16]	; (20004474 <__NVIC_GetPriorityGrouping+0x18>)
20004462:	68db      	ldr	r3, [r3, #12]
20004464:	0a1b      	lsrs	r3, r3, #8
20004466:	f003 0307 	and.w	r3, r3, #7
}
2000446a:	4618      	mov	r0, r3
2000446c:	46bd      	mov	sp, r7
2000446e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004472:	4770      	bx	lr
20004474:	e000ed00 	.word	0xe000ed00

20004478 <__NVIC_EnableIRQ>:
{
20004478:	b480      	push	{r7}
2000447a:	b083      	sub	sp, #12
2000447c:	af00      	add	r7, sp, #0
2000447e:	4603      	mov	r3, r0
20004480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004482:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004486:	2b00      	cmp	r3, #0
20004488:	db0b      	blt.n	200044a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000448a:	79fb      	ldrb	r3, [r7, #7]
2000448c:	f003 021f 	and.w	r2, r3, #31
20004490:	4907      	ldr	r1, [pc, #28]	; (200044b0 <__NVIC_EnableIRQ+0x38>)
20004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004496:	095b      	lsrs	r3, r3, #5
20004498:	2001      	movs	r0, #1
2000449a:	fa00 f202 	lsl.w	r2, r0, r2
2000449e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
200044a2:	bf00      	nop
200044a4:	370c      	adds	r7, #12
200044a6:	46bd      	mov	sp, r7
200044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200044ac:	4770      	bx	lr
200044ae:	bf00      	nop
200044b0:	e000e100 	.word	0xe000e100

200044b4 <__NVIC_SetPriority>:
{
200044b4:	b480      	push	{r7}
200044b6:	b083      	sub	sp, #12
200044b8:	af00      	add	r7, sp, #0
200044ba:	4603      	mov	r3, r0
200044bc:	6039      	str	r1, [r7, #0]
200044be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
200044c4:	2b00      	cmp	r3, #0
200044c6:	db0a      	blt.n	200044de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200044c8:	683b      	ldr	r3, [r7, #0]
200044ca:	b2da      	uxtb	r2, r3
200044cc:	490c      	ldr	r1, [pc, #48]	; (20004500 <__NVIC_SetPriority+0x4c>)
200044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
200044d2:	0112      	lsls	r2, r2, #4
200044d4:	b2d2      	uxtb	r2, r2
200044d6:	440b      	add	r3, r1
200044d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200044dc:	e00a      	b.n	200044f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200044de:	683b      	ldr	r3, [r7, #0]
200044e0:	b2da      	uxtb	r2, r3
200044e2:	4908      	ldr	r1, [pc, #32]	; (20004504 <__NVIC_SetPriority+0x50>)
200044e4:	79fb      	ldrb	r3, [r7, #7]
200044e6:	f003 030f 	and.w	r3, r3, #15
200044ea:	3b04      	subs	r3, #4
200044ec:	0112      	lsls	r2, r2, #4
200044ee:	b2d2      	uxtb	r2, r2
200044f0:	440b      	add	r3, r1
200044f2:	761a      	strb	r2, [r3, #24]
}
200044f4:	bf00      	nop
200044f6:	370c      	adds	r7, #12
200044f8:	46bd      	mov	sp, r7
200044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
200044fe:	4770      	bx	lr
20004500:	e000e100 	.word	0xe000e100
20004504:	e000ed00 	.word	0xe000ed00

20004508 <NVIC_EncodePriority>:
{
20004508:	b480      	push	{r7}
2000450a:	b089      	sub	sp, #36	; 0x24
2000450c:	af00      	add	r7, sp, #0
2000450e:	60f8      	str	r0, [r7, #12]
20004510:	60b9      	str	r1, [r7, #8]
20004512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20004514:	68fb      	ldr	r3, [r7, #12]
20004516:	f003 0307 	and.w	r3, r3, #7
2000451a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000451c:	69fb      	ldr	r3, [r7, #28]
2000451e:	f1c3 0307 	rsb	r3, r3, #7
20004522:	2b04      	cmp	r3, #4
20004524:	bf28      	it	cs
20004526:	2304      	movcs	r3, #4
20004528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000452a:	69fb      	ldr	r3, [r7, #28]
2000452c:	3304      	adds	r3, #4
2000452e:	2b06      	cmp	r3, #6
20004530:	d902      	bls.n	20004538 <NVIC_EncodePriority+0x30>
20004532:	69fb      	ldr	r3, [r7, #28]
20004534:	3b03      	subs	r3, #3
20004536:	e000      	b.n	2000453a <NVIC_EncodePriority+0x32>
20004538:	2300      	movs	r3, #0
2000453a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000453c:	f04f 32ff 	mov.w	r2, #4294967295
20004540:	69bb      	ldr	r3, [r7, #24]
20004542:	fa02 f303 	lsl.w	r3, r2, r3
20004546:	43da      	mvns	r2, r3
20004548:	68bb      	ldr	r3, [r7, #8]
2000454a:	401a      	ands	r2, r3
2000454c:	697b      	ldr	r3, [r7, #20]
2000454e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20004550:	f04f 31ff 	mov.w	r1, #4294967295
20004554:	697b      	ldr	r3, [r7, #20]
20004556:	fa01 f303 	lsl.w	r3, r1, r3
2000455a:	43d9      	mvns	r1, r3
2000455c:	687b      	ldr	r3, [r7, #4]
2000455e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004560:	4313      	orrs	r3, r2
}
20004562:	4618      	mov	r0, r3
20004564:	3724      	adds	r7, #36	; 0x24
20004566:	46bd      	mov	sp, r7
20004568:	f85d 7b04 	ldr.w	r7, [sp], #4
2000456c:	4770      	bx	lr
	...

20004570 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
20004570:	b480      	push	{r7}
20004572:	b085      	sub	sp, #20
20004574:	af00      	add	r7, sp, #0
20004576:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
20004578:	4b08      	ldr	r3, [pc, #32]	; (2000459c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000457a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000457c:	4907      	ldr	r1, [pc, #28]	; (2000459c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000457e:	687b      	ldr	r3, [r7, #4]
20004580:	4313      	orrs	r3, r2
20004582:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20004584:	4b05      	ldr	r3, [pc, #20]	; (2000459c <LL_AHB1_GRP1_EnableClock+0x2c>)
20004586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20004588:	687b      	ldr	r3, [r7, #4]
2000458a:	4013      	ands	r3, r2
2000458c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000458e:	68fb      	ldr	r3, [r7, #12]
}
20004590:	bf00      	nop
20004592:	3714      	adds	r7, #20
20004594:	46bd      	mov	sp, r7
20004596:	f85d 7b04 	ldr.w	r7, [sp], #4
2000459a:	4770      	bx	lr
2000459c:	40023800 	.word	0x40023800

200045a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
200045a0:	b580      	push	{r7, lr}
200045a2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
200045a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
200045a8:	f7ff ffe2 	bl	20004570 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
200045ac:	f7ff ff56 	bl	2000445c <__NVIC_GetPriorityGrouping>
200045b0:	4603      	mov	r3, r0
200045b2:	2200      	movs	r2, #0
200045b4:	2105      	movs	r1, #5
200045b6:	4618      	mov	r0, r3
200045b8:	f7ff ffa6 	bl	20004508 <NVIC_EncodePriority>
200045bc:	4603      	mov	r3, r0
200045be:	4619      	mov	r1, r3
200045c0:	203c      	movs	r0, #60	; 0x3c
200045c2:	f7ff ff77 	bl	200044b4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
200045c6:	203c      	movs	r0, #60	; 0x3c
200045c8:	f7ff ff56 	bl	20004478 <__NVIC_EnableIRQ>

}
200045cc:	bf00      	nop
200045ce:	bd80      	pop	{r7, pc}

200045d0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
200045d0:	b480      	push	{r7}
200045d2:	b085      	sub	sp, #20
200045d4:	af00      	add	r7, sp, #0
200045d6:	6078      	str	r0, [r7, #4]
200045d8:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
200045da:	687b      	ldr	r3, [r7, #4]
200045dc:	695b      	ldr	r3, [r3, #20]
200045de:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
200045e0:	68fa      	ldr	r2, [r7, #12]
200045e2:	683b      	ldr	r3, [r7, #0]
200045e4:	4013      	ands	r3, r2
200045e6:	041a      	lsls	r2, r3, #16
200045e8:	68fb      	ldr	r3, [r7, #12]
200045ea:	43d9      	mvns	r1, r3
200045ec:	683b      	ldr	r3, [r7, #0]
200045ee:	400b      	ands	r3, r1
200045f0:	431a      	orrs	r2, r3
200045f2:	687b      	ldr	r3, [r7, #4]
200045f4:	619a      	str	r2, [r3, #24]
}
200045f6:	bf00      	nop
200045f8:	3714      	adds	r7, #20
200045fa:	46bd      	mov	sp, r7
200045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004600:	4770      	bx	lr
	...

20004604 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
20004604:	b580      	push	{r7, lr}
20004606:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
20004608:	4a18      	ldr	r2, [pc, #96]	; (2000466c <MX_FREERTOS_Init+0x68>)
2000460a:	2101      	movs	r1, #1
2000460c:	2001      	movs	r0, #1
2000460e:	f7fc fd66 	bl	200010de <osSemaphoreNew>
20004612:	4603      	mov	r3, r0
20004614:	4a16      	ldr	r2, [pc, #88]	; (20004670 <MX_FREERTOS_Init+0x6c>)
20004616:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(StartLCDTask, NULL, &LCD_Task_attributes);
20004618:	4a16      	ldr	r2, [pc, #88]	; (20004674 <MX_FREERTOS_Init+0x70>)
2000461a:	2100      	movs	r1, #0
2000461c:	4816      	ldr	r0, [pc, #88]	; (20004678 <MX_FREERTOS_Init+0x74>)
2000461e:	f7fc fcb1 	bl	20000f84 <osThreadNew>
20004622:	4603      	mov	r3, r0
20004624:	4a15      	ldr	r2, [pc, #84]	; (2000467c <MX_FREERTOS_Init+0x78>)
20004626:	6013      	str	r3, [r2, #0]

  /* creation of LED1_task */
  LED1_taskHandle = osThreadNew(StartTaskLED1, NULL, &LED1_task_attributes);
20004628:	4a15      	ldr	r2, [pc, #84]	; (20004680 <MX_FREERTOS_Init+0x7c>)
2000462a:	2100      	movs	r1, #0
2000462c:	4815      	ldr	r0, [pc, #84]	; (20004684 <MX_FREERTOS_Init+0x80>)
2000462e:	f7fc fca9 	bl	20000f84 <osThreadNew>
20004632:	4603      	mov	r3, r0
20004634:	4a14      	ldr	r2, [pc, #80]	; (20004688 <MX_FREERTOS_Init+0x84>)
20004636:	6013      	str	r3, [r2, #0]

  /* creation of LED2_tack */
  LED2_tackHandle = osThreadNew(StartTaskLED2, NULL, &LED2_tack_attributes);
20004638:	4a14      	ldr	r2, [pc, #80]	; (2000468c <MX_FREERTOS_Init+0x88>)
2000463a:	2100      	movs	r1, #0
2000463c:	4814      	ldr	r0, [pc, #80]	; (20004690 <MX_FREERTOS_Init+0x8c>)
2000463e:	f7fc fca1 	bl	20000f84 <osThreadNew>
20004642:	4603      	mov	r3, r0
20004644:	4a13      	ldr	r2, [pc, #76]	; (20004694 <MX_FREERTOS_Init+0x90>)
20004646:	6013      	str	r3, [r2, #0]

  /* creation of Reg_task */
  Reg_taskHandle = osThreadNew(Reg_task_init, NULL, &Reg_task_attributes);
20004648:	4a13      	ldr	r2, [pc, #76]	; (20004698 <MX_FREERTOS_Init+0x94>)
2000464a:	2100      	movs	r1, #0
2000464c:	4813      	ldr	r0, [pc, #76]	; (2000469c <MX_FREERTOS_Init+0x98>)
2000464e:	f7fc fc99 	bl	20000f84 <osThreadNew>
20004652:	4603      	mov	r3, r0
20004654:	4a12      	ldr	r2, [pc, #72]	; (200046a0 <MX_FREERTOS_Init+0x9c>)
20004656:	6013      	str	r3, [r2, #0]

  /* creation of Read_Peripheral */
  Read_PeripheralHandle = osThreadNew(StartRead_Peripheral, NULL, &Read_Peripheral_attributes);
20004658:	4a12      	ldr	r2, [pc, #72]	; (200046a4 <MX_FREERTOS_Init+0xa0>)
2000465a:	2100      	movs	r1, #0
2000465c:	4812      	ldr	r0, [pc, #72]	; (200046a8 <MX_FREERTOS_Init+0xa4>)
2000465e:	f7fc fc91 	bl	20000f84 <osThreadNew>
20004662:	4603      	mov	r3, r0
20004664:	4a11      	ldr	r2, [pc, #68]	; (200046ac <MX_FREERTOS_Init+0xa8>)
20004666:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
20004668:	bf00      	nop
2000466a:	bd80      	pop	{r7, pc}
2000466c:	20006ebc 	.word	0x20006ebc
20004670:	2000f770 	.word	0x2000f770
20004674:	20006e08 	.word	0x20006e08
20004678:	200046b1 	.word	0x200046b1
2000467c:	2000f75c 	.word	0x2000f75c
20004680:	20006e2c 	.word	0x20006e2c
20004684:	200047c5 	.word	0x200047c5
20004688:	2000f760 	.word	0x2000f760
2000468c:	20006e50 	.word	0x20006e50
20004690:	200047f5 	.word	0x200047f5
20004694:	2000f764 	.word	0x2000f764
20004698:	20006e74 	.word	0x20006e74
2000469c:	20004825 	.word	0x20004825
200046a0:	2000f768 	.word	0x2000f768
200046a4:	20006e98 	.word	0x20006e98
200046a8:	200048f5 	.word	0x200048f5
200046ac:	2000f76c 	.word	0x2000f76c

200046b0 <StartLCDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
200046b0:	b580      	push	{r7, lr}
200046b2:	b086      	sub	sp, #24
200046b4:	af02      	add	r7, sp, #8
200046b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	TFTDisplay_ILI9341_Initialization(240, 320);
200046b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
200046bc:	20f0      	movs	r0, #240	; 0xf0
200046be:	f000 fb11 	bl	20004ce4 <TFTDisplay_ILI9341_Initialization>
	  TFTDisplay_ILI9341_SetRotation(2);
200046c2:	2002      	movs	r0, #2
200046c4:	f000 feda 	bl	2000547c <TFTDisplay_ILI9341_SetRotation>
//	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_GREEN);
//	  osDelay(500);
//	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_RED);
//	  osDelay(500);
	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_BLUE);
200046c8:	201f      	movs	r0, #31
200046ca:	f000 fc0f 	bl	20004eec <TFTDisplay_ILI9341_FillScreen>
	  osDelay(100);
200046ce:	2064      	movs	r0, #100	; 0x64
200046d0:	f7fc fcea 	bl	200010a8 <osDelay>

	  TFTDisplay_ILI9341_FillRect(5,5,35,35,TFT_COLOR_ILI9341_YELLOW );
200046d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
200046d8:	9300      	str	r3, [sp, #0]
200046da:	2323      	movs	r3, #35	; 0x23
200046dc:	2223      	movs	r2, #35	; 0x23
200046de:	2105      	movs	r1, #5
200046e0:	2005      	movs	r0, #5
200046e2:	f000 fb55 	bl	20004d90 <TFTDisplay_ILI9341_FillRect>
	  TFTDisplay_ILI9341_DrawClearRect(40,40, 80, 80, TFT_COLOR_ILI9341_RED);
200046e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
200046ea:	9300      	str	r3, [sp, #0]
200046ec:	2350      	movs	r3, #80	; 0x50
200046ee:	2250      	movs	r2, #80	; 0x50
200046f0:	2128      	movs	r1, #40	; 0x28
200046f2:	2028      	movs	r0, #40	; 0x28
200046f4:	f000 fce6 	bl	200050c4 <TFTDisplay_ILI9341_DrawClearRect>
	  TFTDisplay_ILI9341_DrawCircle(140, 140, 50, TFT_COLOR_ILI9341_GREEN);
200046f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
200046fc:	2232      	movs	r2, #50	; 0x32
200046fe:	218c      	movs	r1, #140	; 0x8c
20004700:	208c      	movs	r0, #140	; 0x8c
20004702:	f000 fd16 	bl	20005132 <TFTDisplay_ILI9341_DrawCircle>


	  for (int i=0; i < dl_n; i++){
20004706:	2300      	movs	r3, #0
20004708:	60fb      	str	r3, [r7, #12]
2000470a:	e018      	b.n	2000473e <StartLCDTask+0x8e>
		  TFTDisplay_ILI9341_DrawChar (nx, ny, *ptr);
2000470c:	4b28      	ldr	r3, [pc, #160]	; (200047b0 <StartLCDTask+0x100>)
2000470e:	681b      	ldr	r3, [r3, #0]
20004710:	b298      	uxth	r0, r3
20004712:	4b28      	ldr	r3, [pc, #160]	; (200047b4 <StartLCDTask+0x104>)
20004714:	681b      	ldr	r3, [r3, #0]
20004716:	b299      	uxth	r1, r3
20004718:	4b27      	ldr	r3, [pc, #156]	; (200047b8 <StartLCDTask+0x108>)
2000471a:	681b      	ldr	r3, [r3, #0]
2000471c:	781b      	ldrb	r3, [r3, #0]
2000471e:	461a      	mov	r2, r3
20004720:	f000 fdb4 	bl	2000528c <TFTDisplay_ILI9341_DrawChar>
		  nx= nx +10;
20004724:	4b22      	ldr	r3, [pc, #136]	; (200047b0 <StartLCDTask+0x100>)
20004726:	681b      	ldr	r3, [r3, #0]
20004728:	330a      	adds	r3, #10
2000472a:	4a21      	ldr	r2, [pc, #132]	; (200047b0 <StartLCDTask+0x100>)
2000472c:	6013      	str	r3, [r2, #0]
		  ptr++;
2000472e:	4b22      	ldr	r3, [pc, #136]	; (200047b8 <StartLCDTask+0x108>)
20004730:	681b      	ldr	r3, [r3, #0]
20004732:	3301      	adds	r3, #1
20004734:	4a20      	ldr	r2, [pc, #128]	; (200047b8 <StartLCDTask+0x108>)
20004736:	6013      	str	r3, [r2, #0]
	  for (int i=0; i < dl_n; i++){
20004738:	68fb      	ldr	r3, [r7, #12]
2000473a:	3301      	adds	r3, #1
2000473c:	60fb      	str	r3, [r7, #12]
2000473e:	4b1f      	ldr	r3, [pc, #124]	; (200047bc <StartLCDTask+0x10c>)
20004740:	681b      	ldr	r3, [r3, #0]
20004742:	68fa      	ldr	r2, [r7, #12]
20004744:	429a      	cmp	r2, r3
20004746:	dbe1      	blt.n	2000470c <StartLCDTask+0x5c>

	  }


	  TFTDisplay_ILI9341_DrawLine(0, 0, 240, 240, TFT_COLOR_ILI9341_RED);
20004748:	f44f 4378 	mov.w	r3, #63488	; 0xf800
2000474c:	9300      	str	r3, [sp, #0]
2000474e:	23f0      	movs	r3, #240	; 0xf0
20004750:	22f0      	movs	r2, #240	; 0xf0
20004752:	2100      	movs	r1, #0
20004754:	2000      	movs	r0, #0
20004756:	f000 fc25 	bl	20004fa4 <TFTDisplay_ILI9341_DrawLine>
	  TFTDisplay_ILI9341_DrawPixel(140, 140, TFT_COLOR_ILI9341_WHITE);
2000475a:	f64f 72ff 	movw	r2, #65535	; 0xffff
2000475e:	218c      	movs	r1, #140	; 0x8c
20004760:	208c      	movs	r0, #140	; 0x8c
20004762:	f000 fbdf 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>


	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
20004766:	e002      	b.n	2000476e <StartLCDTask+0xbe>
		{
		osDelay(2);					//aby nie blokować innych tasków
20004768:	2002      	movs	r0, #2
2000476a:	f7fc fc9d 	bl	200010a8 <osDelay>
	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
2000476e:	4b14      	ldr	r3, [pc, #80]	; (200047c0 <StartLCDTask+0x110>)
20004770:	691b      	ldr	r3, [r3, #16]
20004772:	f003 0301 	and.w	r3, r3, #1
20004776:	2b00      	cmp	r3, #0
20004778:	d0f6      	beq.n	20004768 <StartLCDTask+0xb8>
		}

  /* Infinite loop */
  for(;;)
  {
	  for(int i=0; i< 10; i++)
2000477a:	2300      	movs	r3, #0
2000477c:	60bb      	str	r3, [r7, #8]
2000477e:	e00f      	b.n	200047a0 <StartLCDTask+0xf0>
	  {
		  TFTDisplay_ILI9341_DrawChar(100, 100, 0x30 + i);
20004780:	68bb      	ldr	r3, [r7, #8]
20004782:	b2db      	uxtb	r3, r3
20004784:	3330      	adds	r3, #48	; 0x30
20004786:	b2db      	uxtb	r3, r3
20004788:	461a      	mov	r2, r3
2000478a:	2164      	movs	r1, #100	; 0x64
2000478c:	2064      	movs	r0, #100	; 0x64
2000478e:	f000 fd7d 	bl	2000528c <TFTDisplay_ILI9341_DrawChar>
		  osDelay(1000);
20004792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20004796:	f7fc fc87 	bl	200010a8 <osDelay>
	  for(int i=0; i< 10; i++)
2000479a:	68bb      	ldr	r3, [r7, #8]
2000479c:	3301      	adds	r3, #1
2000479e:	60bb      	str	r3, [r7, #8]
200047a0:	68bb      	ldr	r3, [r7, #8]
200047a2:	2b09      	cmp	r3, #9
200047a4:	ddec      	ble.n	20004780 <StartLCDTask+0xd0>
	  }
	  osDelay(1);
200047a6:	2001      	movs	r0, #1
200047a8:	f7fc fc7e 	bl	200010a8 <osDelay>
	  for(int i=0; i< 10; i++)
200047ac:	e7e5      	b.n	2000477a <StartLCDTask+0xca>
200047ae:	bf00      	nop
200047b0:	2000f778 	.word	0x2000f778
200047b4:	2000ac44 	.word	0x2000ac44
200047b8:	2000f774 	.word	0x2000f774
200047bc:	2000ac40 	.word	0x2000ac40
200047c0:	40020000 	.word	0x40020000

200047c4 <StartTaskLED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED1 */
void StartTaskLED1(void *argument)
{
200047c4:	b580      	push	{r7, lr}
200047c6:	b082      	sub	sp, #8
200047c8:	af00      	add	r7, sp, #0
200047ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED1 */
  /* Infinite loop */
	for(;;)
	{

	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
200047cc:	4b07      	ldr	r3, [pc, #28]	; (200047ec <StartTaskLED1+0x28>)
200047ce:	681b      	ldr	r3, [r3, #0]
200047d0:	f04f 31ff 	mov.w	r1, #4294967295
200047d4:	4618      	mov	r0, r3
200047d6:	f7fc fd0b 	bl	200011f0 <osSemaphoreAcquire>

	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_13);
200047da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200047de:	4804      	ldr	r0, [pc, #16]	; (200047f0 <StartTaskLED1+0x2c>)
200047e0:	f7ff fef6 	bl	200045d0 <LL_GPIO_TogglePin>


	  osDelay(100);
200047e4:	2064      	movs	r0, #100	; 0x64
200047e6:	f7fc fc5f 	bl	200010a8 <osDelay>
	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
200047ea:	e7ef      	b.n	200047cc <StartTaskLED1+0x8>
200047ec:	2000f770 	.word	0x2000f770
200047f0:	40021800 	.word	0x40021800

200047f4 <StartTaskLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED2 */
void StartTaskLED2(void *argument)
{
200047f4:	b580      	push	{r7, lr}
200047f6:	b082      	sub	sp, #8
200047f8:	af00      	add	r7, sp, #0
200047fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED2 */
  /* Infinite loop */
	for(;;)
	{
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
200047fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
20004800:	4806      	ldr	r0, [pc, #24]	; (2000481c <StartTaskLED2+0x28>)
20004802:	f7ff fee5 	bl	200045d0 <LL_GPIO_TogglePin>

	  osDelay(1000);
20004806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2000480a:	f7fc fc4d 	bl	200010a8 <osDelay>
	  osSemaphoreRelease(BinarySem01Handle);	//zwolnienie semafora i odblokowanie TaskLED1
2000480e:	4b04      	ldr	r3, [pc, #16]	; (20004820 <StartTaskLED2+0x2c>)
20004810:	681b      	ldr	r3, [r3, #0]
20004812:	4618      	mov	r0, r3
20004814:	f7fc fd3e 	bl	20001294 <osSemaphoreRelease>
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20004818:	e7f0      	b.n	200047fc <StartTaskLED2+0x8>
2000481a:	bf00      	nop
2000481c:	40021800 	.word	0x40021800
20004820:	2000f770 	.word	0x2000f770

20004824 <Reg_task_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Reg_task_init */
void Reg_task_init(void *argument)
{
20004824:	b580      	push	{r7, lr}
20004826:	b084      	sub	sp, #16
20004828:	af00      	add	r7, sp, #0
2000482a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Reg_task_init */
	PID_s_init(&pid, 10, 3, 0.9, tp);
2000482c:	4b2c      	ldr	r3, [pc, #176]	; (200048e0 <Reg_task_init+0xbc>)
2000482e:	edd3 7a00 	vldr	s15, [r3]
20004832:	eef0 1a67 	vmov.f32	s3, s15
20004836:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 200048e4 <Reg_task_init+0xc0>
2000483a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
2000483e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
20004842:	4829      	ldr	r0, [pc, #164]	; (200048e8 <Reg_task_init+0xc4>)
20004844:	f001 fd32 	bl	200062ac <PID_s_init>
	Inercja_s_init(&in3, 1, tp, 5);
20004848:	4b25      	ldr	r3, [pc, #148]	; (200048e0 <Reg_task_init+0xbc>)
2000484a:	edd3 7a00 	vldr	s15, [r3]
2000484e:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
20004852:	eef0 0a67 	vmov.f32	s1, s15
20004856:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
2000485a:	4824      	ldr	r0, [pc, #144]	; (200048ec <Reg_task_init+0xc8>)
2000485c:	f001 fdba 	bl	200063d4 <Inercja_s_init>
	Inercja_s_init(&in4, 2, tp, 3);
20004860:	4b1f      	ldr	r3, [pc, #124]	; (200048e0 <Reg_task_init+0xbc>)
20004862:	edd3 7a00 	vldr	s15, [r3]
20004866:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
2000486a:	eef0 0a67 	vmov.f32	s1, s15
2000486e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
20004872:	481f      	ldr	r0, [pc, #124]	; (200048f0 <Reg_task_init+0xcc>)
20004874:	f001 fdae 	bl	200063d4 <Inercja_s_init>
	float expected = 0;
20004878:	f04f 0300 	mov.w	r3, #0
2000487c:	60bb      	str	r3, [r7, #8]
	float output = 0;
2000487e:	f04f 0300 	mov.w	r3, #0
20004882:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	pid.expected = expected;
20004884:	4a18      	ldr	r2, [pc, #96]	; (200048e8 <Reg_task_init+0xc4>)
20004886:	68bb      	ldr	r3, [r7, #8]
20004888:	61d3      	str	r3, [r2, #28]
	pid.input = output;
2000488a:	4a17      	ldr	r2, [pc, #92]	; (200048e8 <Reg_task_init+0xc4>)
2000488c:	68fb      	ldr	r3, [r7, #12]
2000488e:	6193      	str	r3, [r2, #24]
	Reg_s_step(&pid);
20004890:	4815      	ldr	r0, [pc, #84]	; (200048e8 <Reg_task_init+0xc4>)
20004892:	f001 fd31 	bl	200062f8 <Reg_s_step>
	//output = pid.output;
	in3.input = pid.output;
20004896:	4b14      	ldr	r3, [pc, #80]	; (200048e8 <Reg_task_init+0xc4>)
20004898:	6a1b      	ldr	r3, [r3, #32]
2000489a:	4a14      	ldr	r2, [pc, #80]	; (200048ec <Reg_task_init+0xc8>)
2000489c:	6153      	str	r3, [r2, #20]
	Inercja_s_step(&in3);
2000489e:	4813      	ldr	r0, [pc, #76]	; (200048ec <Reg_task_init+0xc8>)
200048a0:	f001 fdb5 	bl	2000640e <Inercja_s_step>
	in4.input = in3.output;
200048a4:	4b11      	ldr	r3, [pc, #68]	; (200048ec <Reg_task_init+0xc8>)
200048a6:	691b      	ldr	r3, [r3, #16]
200048a8:	4a11      	ldr	r2, [pc, #68]	; (200048f0 <Reg_task_init+0xcc>)
200048aa:	6153      	str	r3, [r2, #20]
	Inercja_s_step(&in4);
200048ac:	4810      	ldr	r0, [pc, #64]	; (200048f0 <Reg_task_init+0xcc>)
200048ae:	f001 fdae 	bl	2000640e <Inercja_s_step>
	output =  in4.output;
200048b2:	4b0f      	ldr	r3, [pc, #60]	; (200048f0 <Reg_task_init+0xcc>)
200048b4:	691b      	ldr	r3, [r3, #16]
200048b6:	60fb      	str	r3, [r7, #12]
	Draw_info((int)output, (int) expected, false);
200048b8:	edd7 7a03 	vldr	s15, [r7, #12]
200048bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
200048c0:	edd7 7a02 	vldr	s15, [r7, #8]
200048c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
200048c8:	2200      	movs	r2, #0
200048ca:	ee17 1a90 	vmov	r1, s15
200048ce:	ee17 0a10 	vmov	r0, s14
200048d2:	f001 fc37 	bl	20006144 <Draw_info>
    osDelay(10);
200048d6:	200a      	movs	r0, #10
200048d8:	f7fc fbe6 	bl	200010a8 <osDelay>
  {
200048dc:	e7d2      	b.n	20004884 <Reg_task_init+0x60>
200048de:	bf00      	nop
200048e0:	2000ac38 	.word	0x2000ac38
200048e4:	3f666666 	.word	0x3f666666
200048e8:	2000f708 	.word	0x2000f708
200048ec:	2000f72c 	.word	0x2000f72c
200048f0:	2000f744 	.word	0x2000f744

200048f4 <StartRead_Peripheral>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_Peripheral */
void StartRead_Peripheral(void *argument)
{
200048f4:	b580      	push	{r7, lr}
200048f6:	b082      	sub	sp, #8
200048f8:	af00      	add	r7, sp, #0
200048fa:	6078      	str	r0, [r7, #4]
//	  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0){
//		  osDelay(1);
//	  }
//	  adc_data_pot4 = LL_ADC_REG_ReadConversionData12(ADC1);
//
    osDelay(100);
200048fc:	2064      	movs	r0, #100	; 0x64
200048fe:	f7fc fbd3 	bl	200010a8 <osDelay>
20004902:	e7fb      	b.n	200048fc <StartRead_Peripheral+0x8>

20004904 <LL_AHB1_GRP1_EnableClock>:
{
20004904:	b480      	push	{r7}
20004906:	b085      	sub	sp, #20
20004908:	af00      	add	r7, sp, #0
2000490a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
2000490c:	4b08      	ldr	r3, [pc, #32]	; (20004930 <LL_AHB1_GRP1_EnableClock+0x2c>)
2000490e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20004910:	4907      	ldr	r1, [pc, #28]	; (20004930 <LL_AHB1_GRP1_EnableClock+0x2c>)
20004912:	687b      	ldr	r3, [r7, #4]
20004914:	4313      	orrs	r3, r2
20004916:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20004918:	4b05      	ldr	r3, [pc, #20]	; (20004930 <LL_AHB1_GRP1_EnableClock+0x2c>)
2000491a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000491c:	687b      	ldr	r3, [r7, #4]
2000491e:	4013      	ands	r3, r2
20004920:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20004922:	68fb      	ldr	r3, [r7, #12]
}
20004924:	bf00      	nop
20004926:	3714      	adds	r7, #20
20004928:	46bd      	mov	sp, r7
2000492a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000492e:	4770      	bx	lr
20004930:	40023800 	.word	0x40023800

20004934 <LL_GPIO_ResetOutputPin>:
{
20004934:	b480      	push	{r7}
20004936:	b083      	sub	sp, #12
20004938:	af00      	add	r7, sp, #0
2000493a:	6078      	str	r0, [r7, #4]
2000493c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
2000493e:	683b      	ldr	r3, [r7, #0]
20004940:	041a      	lsls	r2, r3, #16
20004942:	687b      	ldr	r3, [r7, #4]
20004944:	619a      	str	r2, [r3, #24]
}
20004946:	bf00      	nop
20004948:	370c      	adds	r7, #12
2000494a:	46bd      	mov	sp, r7
2000494c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004950:	4770      	bx	lr
	...

20004954 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20004954:	b580      	push	{r7, lr}
20004956:	b086      	sub	sp, #24
20004958:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
2000495a:	463b      	mov	r3, r7
2000495c:	2200      	movs	r2, #0
2000495e:	601a      	str	r2, [r3, #0]
20004960:	605a      	str	r2, [r3, #4]
20004962:	609a      	str	r2, [r3, #8]
20004964:	60da      	str	r2, [r3, #12]
20004966:	611a      	str	r2, [r3, #16]
20004968:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
2000496a:	2004      	movs	r0, #4
2000496c:	f7ff ffca 	bl	20004904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
20004970:	2020      	movs	r0, #32
20004972:	f7ff ffc7 	bl	20004904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
20004976:	2080      	movs	r0, #128	; 0x80
20004978:	f7ff ffc4 	bl	20004904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
2000497c:	2001      	movs	r0, #1
2000497e:	f7ff ffc1 	bl	20004904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
20004982:	2008      	movs	r0, #8
20004984:	f7ff ffbe 	bl	20004904 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
20004988:	2040      	movs	r0, #64	; 0x40
2000498a:	f7ff ffbb 	bl	20004904 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
2000498e:	2104      	movs	r1, #4
20004990:	483b      	ldr	r0, [pc, #236]	; (20004a80 <MX_GPIO_Init+0x12c>)
20004992:	f7ff ffcf 	bl	20004934 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13);
20004996:	f44f 5140 	mov.w	r1, #12288	; 0x3000
2000499a:	483a      	ldr	r0, [pc, #232]	; (20004a84 <MX_GPIO_Init+0x130>)
2000499c:	f7ff ffca 	bl	20004934 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LL_GPIO_PIN_13|LL_GPIO_PIN_14);
200049a0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
200049a4:	4838      	ldr	r0, [pc, #224]	; (20004a88 <MX_GPIO_Init+0x134>)
200049a6:	f7ff ffc5 	bl	20004934 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BUTTON_mode_Pin|BUTTON_9_Pin|BUTTON_10_Pin;
200049aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
200049ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
200049b0:	2300      	movs	r3, #0
200049b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200049b4:	2300      	movs	r3, #0
200049b6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200049b8:	463b      	mov	r3, r7
200049ba:	4619      	mov	r1, r3
200049bc:	4830      	ldr	r0, [pc, #192]	; (20004a80 <MX_GPIO_Init+0x12c>)
200049be:	f7fc f934 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_JOYSTICK2_Pin;
200049c2:	2340      	movs	r3, #64	; 0x40
200049c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
200049c6:	2303      	movs	r3, #3
200049c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200049ca:	2300      	movs	r3, #0
200049cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LEFT_JOYSTICK2_GPIO_Port, &GPIO_InitStruct);
200049ce:	463b      	mov	r3, r7
200049d0:	4619      	mov	r1, r3
200049d2:	482e      	ldr	r0, [pc, #184]	; (20004a8c <MX_GPIO_Init+0x138>)
200049d4:	f7fc f929 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
200049d8:	2304      	movs	r3, #4
200049da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
200049dc:	2301      	movs	r3, #1
200049de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
200049e0:	2303      	movs	r3, #3
200049e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200049e4:	2300      	movs	r3, #0
200049e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200049e8:	2300      	movs	r3, #0
200049ea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200049ec:	463b      	mov	r3, r7
200049ee:	4619      	mov	r1, r3
200049f0:	4823      	ldr	r0, [pc, #140]	; (20004a80 <MX_GPIO_Init+0x12c>)
200049f2:	f7fc f91a 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_JOYSTICK1_Pin;
200049f6:	2308      	movs	r3, #8
200049f8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
200049fa:	2303      	movs	r3, #3
200049fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200049fe:	2300      	movs	r3, #0
20004a00:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LEFT_JOYSTICK1_GPIO_Port, &GPIO_InitStruct);
20004a02:	463b      	mov	r3, r7
20004a04:	4619      	mov	r1, r3
20004a06:	481e      	ldr	r0, [pc, #120]	; (20004a80 <MX_GPIO_Init+0x12c>)
20004a08:	f7fc f90f 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
20004a0c:	2301      	movs	r3, #1
20004a0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
20004a10:	2300      	movs	r3, #0
20004a12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004a14:	2300      	movs	r3, #0
20004a16:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20004a18:	463b      	mov	r3, r7
20004a1a:	4619      	mov	r1, r3
20004a1c:	481c      	ldr	r0, [pc, #112]	; (20004a90 <MX_GPIO_Init+0x13c>)
20004a1e:	f7fc f904 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RIGHT_JOYSTICK1_Pin|RIGHT_JOYSTICK2_Pin;
20004a22:	23a0      	movs	r3, #160	; 0xa0
20004a24:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
20004a26:	2303      	movs	r3, #3
20004a28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004a2a:	2300      	movs	r3, #0
20004a2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20004a2e:	463b      	mov	r3, r7
20004a30:	4619      	mov	r1, r3
20004a32:	4817      	ldr	r0, [pc, #92]	; (20004a90 <MX_GPIO_Init+0x13c>)
20004a34:	f7fc f8f9 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
20004a38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
20004a3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20004a3e:	2301      	movs	r3, #1
20004a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20004a42:	2303      	movs	r3, #3
20004a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20004a46:	2300      	movs	r3, #0
20004a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004a4a:	2300      	movs	r3, #0
20004a4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20004a4e:	463b      	mov	r3, r7
20004a50:	4619      	mov	r1, r3
20004a52:	480c      	ldr	r0, [pc, #48]	; (20004a84 <MX_GPIO_Init+0x130>)
20004a54:	f7fc f8e9 	bl	20000c2a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
20004a58:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
20004a5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20004a5e:	2301      	movs	r3, #1
20004a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
20004a62:	2300      	movs	r3, #0
20004a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20004a66:	2300      	movs	r3, #0
20004a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004a6a:	2300      	movs	r3, #0
20004a6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20004a6e:	463b      	mov	r3, r7
20004a70:	4619      	mov	r1, r3
20004a72:	4805      	ldr	r0, [pc, #20]	; (20004a88 <MX_GPIO_Init+0x134>)
20004a74:	f7fc f8d9 	bl	20000c2a <LL_GPIO_Init>

}
20004a78:	bf00      	nop
20004a7a:	3718      	adds	r7, #24
20004a7c:	46bd      	mov	sp, r7
20004a7e:	bd80      	pop	{r7, pc}
20004a80:	40020800 	.word	0x40020800
20004a84:	40020c00 	.word	0x40020c00
20004a88:	40021800 	.word	0x40021800
20004a8c:	40021400 	.word	0x40021400
20004a90:	40020000 	.word	0x40020000

20004a94 <LL_GPIO_SetOutputPin>:
{
20004a94:	b480      	push	{r7}
20004a96:	b083      	sub	sp, #12
20004a98:	af00      	add	r7, sp, #0
20004a9a:	6078      	str	r0, [r7, #4]
20004a9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20004a9e:	687b      	ldr	r3, [r7, #4]
20004aa0:	683a      	ldr	r2, [r7, #0]
20004aa2:	619a      	str	r2, [r3, #24]
}
20004aa4:	bf00      	nop
20004aa6:	370c      	adds	r7, #12
20004aa8:	46bd      	mov	sp, r7
20004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004aae:	4770      	bx	lr

20004ab0 <LL_GPIO_ResetOutputPin>:
{
20004ab0:	b480      	push	{r7}
20004ab2:	b083      	sub	sp, #12
20004ab4:	af00      	add	r7, sp, #0
20004ab6:	6078      	str	r0, [r7, #4]
20004ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
20004aba:	683b      	ldr	r3, [r7, #0]
20004abc:	041a      	lsls	r2, r3, #16
20004abe:	687b      	ldr	r3, [r7, #4]
20004ac0:	619a      	str	r2, [r3, #24]
}
20004ac2:	bf00      	nop
20004ac4:	370c      	adds	r7, #12
20004ac6:	46bd      	mov	sp, r7
20004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004acc:	4770      	bx	lr

20004ace <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
20004ace:	b480      	push	{r7}
20004ad0:	b083      	sub	sp, #12
20004ad2:	af00      	add	r7, sp, #0
20004ad4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
20004ad6:	687b      	ldr	r3, [r7, #4]
20004ad8:	689b      	ldr	r3, [r3, #8]
20004ada:	f003 0301 	and.w	r3, r3, #1
20004ade:	2b01      	cmp	r3, #1
20004ae0:	d101      	bne.n	20004ae6 <LL_SPI_IsActiveFlag_RXNE+0x18>
20004ae2:	2301      	movs	r3, #1
20004ae4:	e000      	b.n	20004ae8 <LL_SPI_IsActiveFlag_RXNE+0x1a>
20004ae6:	2300      	movs	r3, #0
}
20004ae8:	4618      	mov	r0, r3
20004aea:	370c      	adds	r7, #12
20004aec:	46bd      	mov	sp, r7
20004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
20004af2:	4770      	bx	lr

20004af4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
20004af4:	b480      	push	{r7}
20004af6:	b083      	sub	sp, #12
20004af8:	af00      	add	r7, sp, #0
20004afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
20004afc:	687b      	ldr	r3, [r7, #4]
20004afe:	689b      	ldr	r3, [r3, #8]
20004b00:	f003 0302 	and.w	r3, r3, #2
20004b04:	2b02      	cmp	r3, #2
20004b06:	d101      	bne.n	20004b0c <LL_SPI_IsActiveFlag_TXE+0x18>
20004b08:	2301      	movs	r3, #1
20004b0a:	e000      	b.n	20004b0e <LL_SPI_IsActiveFlag_TXE+0x1a>
20004b0c:	2300      	movs	r3, #0
}
20004b0e:	4618      	mov	r0, r3
20004b10:	370c      	adds	r7, #12
20004b12:	46bd      	mov	sp, r7
20004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b18:	4770      	bx	lr

20004b1a <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
20004b1a:	b480      	push	{r7}
20004b1c:	b083      	sub	sp, #12
20004b1e:	af00      	add	r7, sp, #0
20004b20:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
20004b22:	687b      	ldr	r3, [r7, #4]
20004b24:	330c      	adds	r3, #12
}
20004b26:	4618      	mov	r0, r3
20004b28:	370c      	adds	r7, #12
20004b2a:	46bd      	mov	sp, r7
20004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b30:	4770      	bx	lr

20004b32 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
20004b32:	b480      	push	{r7}
20004b34:	b083      	sub	sp, #12
20004b36:	af00      	add	r7, sp, #0
20004b38:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
20004b3a:	687b      	ldr	r3, [r7, #4]
20004b3c:	330c      	adds	r3, #12
20004b3e:	781b      	ldrb	r3, [r3, #0]
20004b40:	b2db      	uxtb	r3, r3
}
20004b42:	4618      	mov	r0, r3
20004b44:	370c      	adds	r7, #12
20004b46:	46bd      	mov	sp, r7
20004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b4c:	4770      	bx	lr

20004b4e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
20004b4e:	b480      	push	{r7}
20004b50:	b085      	sub	sp, #20
20004b52:	af00      	add	r7, sp, #0
20004b54:	6078      	str	r0, [r7, #4]
20004b56:	460b      	mov	r3, r1
20004b58:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
20004b5a:	687b      	ldr	r3, [r7, #4]
20004b5c:	330c      	adds	r3, #12
20004b5e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
20004b60:	68fb      	ldr	r3, [r7, #12]
20004b62:	78fa      	ldrb	r2, [r7, #3]
20004b64:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
20004b66:	bf00      	nop
20004b68:	3714      	adds	r7, #20
20004b6a:	46bd      	mov	sp, r7
20004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b70:	4770      	bx	lr
	...

20004b74 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
20004b74:	b480      	push	{r7}
20004b76:	b083      	sub	sp, #12
20004b78:	af00      	add	r7, sp, #0
20004b7a:	6078      	str	r0, [r7, #4]
20004b7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20004b7e:	4a0c      	ldr	r2, [pc, #48]	; (20004bb0 <LL_DMA_EnableStream+0x3c>)
20004b80:	683b      	ldr	r3, [r7, #0]
20004b82:	4413      	add	r3, r2
20004b84:	781b      	ldrb	r3, [r3, #0]
20004b86:	461a      	mov	r2, r3
20004b88:	687b      	ldr	r3, [r7, #4]
20004b8a:	4413      	add	r3, r2
20004b8c:	681b      	ldr	r3, [r3, #0]
20004b8e:	4908      	ldr	r1, [pc, #32]	; (20004bb0 <LL_DMA_EnableStream+0x3c>)
20004b90:	683a      	ldr	r2, [r7, #0]
20004b92:	440a      	add	r2, r1
20004b94:	7812      	ldrb	r2, [r2, #0]
20004b96:	4611      	mov	r1, r2
20004b98:	687a      	ldr	r2, [r7, #4]
20004b9a:	440a      	add	r2, r1
20004b9c:	f043 0301 	orr.w	r3, r3, #1
20004ba0:	6013      	str	r3, [r2, #0]
}
20004ba2:	bf00      	nop
20004ba4:	370c      	adds	r7, #12
20004ba6:	46bd      	mov	sp, r7
20004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bac:	4770      	bx	lr
20004bae:	bf00      	nop
20004bb0:	20006ecc 	.word	0x20006ecc

20004bb4 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
20004bb4:	b480      	push	{r7}
20004bb6:	b083      	sub	sp, #12
20004bb8:	af00      	add	r7, sp, #0
20004bba:	6078      	str	r0, [r7, #4]
20004bbc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20004bbe:	4a0c      	ldr	r2, [pc, #48]	; (20004bf0 <LL_DMA_DisableStream+0x3c>)
20004bc0:	683b      	ldr	r3, [r7, #0]
20004bc2:	4413      	add	r3, r2
20004bc4:	781b      	ldrb	r3, [r3, #0]
20004bc6:	461a      	mov	r2, r3
20004bc8:	687b      	ldr	r3, [r7, #4]
20004bca:	4413      	add	r3, r2
20004bcc:	681b      	ldr	r3, [r3, #0]
20004bce:	4908      	ldr	r1, [pc, #32]	; (20004bf0 <LL_DMA_DisableStream+0x3c>)
20004bd0:	683a      	ldr	r2, [r7, #0]
20004bd2:	440a      	add	r2, r1
20004bd4:	7812      	ldrb	r2, [r2, #0]
20004bd6:	4611      	mov	r1, r2
20004bd8:	687a      	ldr	r2, [r7, #4]
20004bda:	440a      	add	r2, r1
20004bdc:	f023 0301 	bic.w	r3, r3, #1
20004be0:	6013      	str	r3, [r2, #0]
}
20004be2:	bf00      	nop
20004be4:	370c      	adds	r7, #12
20004be6:	46bd      	mov	sp, r7
20004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bec:	4770      	bx	lr
20004bee:	bf00      	nop
20004bf0:	20006ecc 	.word	0x20006ecc

20004bf4 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
20004bf4:	b480      	push	{r7}
20004bf6:	b083      	sub	sp, #12
20004bf8:	af00      	add	r7, sp, #0
20004bfa:	6078      	str	r0, [r7, #4]
20004bfc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
20004bfe:	4a08      	ldr	r2, [pc, #32]	; (20004c20 <LL_DMA_GetDataTransferDirection+0x2c>)
20004c00:	683b      	ldr	r3, [r7, #0]
20004c02:	4413      	add	r3, r2
20004c04:	781b      	ldrb	r3, [r3, #0]
20004c06:	461a      	mov	r2, r3
20004c08:	687b      	ldr	r3, [r7, #4]
20004c0a:	4413      	add	r3, r2
20004c0c:	681b      	ldr	r3, [r3, #0]
20004c0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
20004c12:	4618      	mov	r0, r3
20004c14:	370c      	adds	r7, #12
20004c16:	46bd      	mov	sp, r7
20004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c1c:	4770      	bx	lr
20004c1e:	bf00      	nop
20004c20:	20006ecc 	.word	0x20006ecc

20004c24 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
20004c24:	b480      	push	{r7}
20004c26:	b085      	sub	sp, #20
20004c28:	af00      	add	r7, sp, #0
20004c2a:	60f8      	str	r0, [r7, #12]
20004c2c:	60b9      	str	r1, [r7, #8]
20004c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
20004c30:	4a0d      	ldr	r2, [pc, #52]	; (20004c68 <LL_DMA_SetDataLength+0x44>)
20004c32:	68bb      	ldr	r3, [r7, #8]
20004c34:	4413      	add	r3, r2
20004c36:	781b      	ldrb	r3, [r3, #0]
20004c38:	461a      	mov	r2, r3
20004c3a:	68fb      	ldr	r3, [r7, #12]
20004c3c:	4413      	add	r3, r2
20004c3e:	685b      	ldr	r3, [r3, #4]
20004c40:	0c1b      	lsrs	r3, r3, #16
20004c42:	041b      	lsls	r3, r3, #16
20004c44:	4908      	ldr	r1, [pc, #32]	; (20004c68 <LL_DMA_SetDataLength+0x44>)
20004c46:	68ba      	ldr	r2, [r7, #8]
20004c48:	440a      	add	r2, r1
20004c4a:	7812      	ldrb	r2, [r2, #0]
20004c4c:	4611      	mov	r1, r2
20004c4e:	68fa      	ldr	r2, [r7, #12]
20004c50:	440a      	add	r2, r1
20004c52:	4611      	mov	r1, r2
20004c54:	687a      	ldr	r2, [r7, #4]
20004c56:	4313      	orrs	r3, r2
20004c58:	604b      	str	r3, [r1, #4]
}
20004c5a:	bf00      	nop
20004c5c:	3714      	adds	r7, #20
20004c5e:	46bd      	mov	sp, r7
20004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c64:	4770      	bx	lr
20004c66:	bf00      	nop
20004c68:	20006ecc 	.word	0x20006ecc

20004c6c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
20004c6c:	b480      	push	{r7}
20004c6e:	b085      	sub	sp, #20
20004c70:	af00      	add	r7, sp, #0
20004c72:	60f8      	str	r0, [r7, #12]
20004c74:	60b9      	str	r1, [r7, #8]
20004c76:	607a      	str	r2, [r7, #4]
20004c78:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
20004c7a:	69bb      	ldr	r3, [r7, #24]
20004c7c:	2b40      	cmp	r3, #64	; 0x40
20004c7e:	d114      	bne.n	20004caa <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
20004c80:	4a17      	ldr	r2, [pc, #92]	; (20004ce0 <LL_DMA_ConfigAddresses+0x74>)
20004c82:	68bb      	ldr	r3, [r7, #8]
20004c84:	4413      	add	r3, r2
20004c86:	781b      	ldrb	r3, [r3, #0]
20004c88:	461a      	mov	r2, r3
20004c8a:	68fb      	ldr	r3, [r7, #12]
20004c8c:	4413      	add	r3, r2
20004c8e:	461a      	mov	r2, r3
20004c90:	687b      	ldr	r3, [r7, #4]
20004c92:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
20004c94:	4a12      	ldr	r2, [pc, #72]	; (20004ce0 <LL_DMA_ConfigAddresses+0x74>)
20004c96:	68bb      	ldr	r3, [r7, #8]
20004c98:	4413      	add	r3, r2
20004c9a:	781b      	ldrb	r3, [r3, #0]
20004c9c:	461a      	mov	r2, r3
20004c9e:	68fb      	ldr	r3, [r7, #12]
20004ca0:	4413      	add	r3, r2
20004ca2:	461a      	mov	r2, r3
20004ca4:	683b      	ldr	r3, [r7, #0]
20004ca6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
20004ca8:	e013      	b.n	20004cd2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
20004caa:	4a0d      	ldr	r2, [pc, #52]	; (20004ce0 <LL_DMA_ConfigAddresses+0x74>)
20004cac:	68bb      	ldr	r3, [r7, #8]
20004cae:	4413      	add	r3, r2
20004cb0:	781b      	ldrb	r3, [r3, #0]
20004cb2:	461a      	mov	r2, r3
20004cb4:	68fb      	ldr	r3, [r7, #12]
20004cb6:	4413      	add	r3, r2
20004cb8:	461a      	mov	r2, r3
20004cba:	687b      	ldr	r3, [r7, #4]
20004cbc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
20004cbe:	4a08      	ldr	r2, [pc, #32]	; (20004ce0 <LL_DMA_ConfigAddresses+0x74>)
20004cc0:	68bb      	ldr	r3, [r7, #8]
20004cc2:	4413      	add	r3, r2
20004cc4:	781b      	ldrb	r3, [r3, #0]
20004cc6:	461a      	mov	r2, r3
20004cc8:	68fb      	ldr	r3, [r7, #12]
20004cca:	4413      	add	r3, r2
20004ccc:	461a      	mov	r2, r3
20004cce:	683b      	ldr	r3, [r7, #0]
20004cd0:	60d3      	str	r3, [r2, #12]
}
20004cd2:	bf00      	nop
20004cd4:	3714      	adds	r7, #20
20004cd6:	46bd      	mov	sp, r7
20004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cdc:	4770      	bx	lr
20004cde:	bf00      	nop
20004ce0:	20006ecc 	.word	0x20006ecc

20004ce4 <TFTDisplay_ILI9341_Initialization>:
static void tftDisplay_ILI9341_Reset(void);
static void tftDisplay_ILI9341_FontsInitialization(void);
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_Initialization(uint16_t screenWidth, uint16_t screeHeight)
{
20004ce4:	b580      	push	{r7, lr}
20004ce6:	b082      	sub	sp, #8
20004ce8:	af00      	add	r7, sp, #0
20004cea:	4603      	mov	r3, r0
20004cec:	460a      	mov	r2, r1
20004cee:	80fb      	strh	r3, [r7, #6]
20004cf0:	4613      	mov	r3, r2
20004cf2:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE();
20004cf4:	2104      	movs	r1, #4
20004cf6:	4823      	ldr	r0, [pc, #140]	; (20004d84 <TFTDisplay_ILI9341_Initialization+0xa0>)
20004cf8:	f7ff feda 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	tftDisplay_ILI9341_Reset();
20004cfc:	f000 fd32 	bl	20005764 <tftDisplay_ILI9341_Reset>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SWRESET);
20004d00:	2001      	movs	r0, #1
20004d02:	f000 fc13 	bl	2000552c <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(1000);
20004d06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20004d0a:	f7fc f877 	bl	20000dfc <LL_mDelay>

	tftDisplay_ILI9341_Init_PowerControl_A();
20004d0e:	f000 fdc9 	bl	200058a4 <tftDisplay_ILI9341_Init_PowerControl_A>
	tftDisplay_ILI9341_Init_PowerControl_B();
20004d12:	f000 fde5 	bl	200058e0 <tftDisplay_ILI9341_Init_PowerControl_B>
	tftDisplay_ILI9341_Init_DriverTimingControl_A();
20004d16:	f000 fdfb 	bl	20005910 <tftDisplay_ILI9341_Init_DriverTimingControl_A>
	tftDisplay_ILI9341_Init_DriverTimingControl_B();
20004d1a:	f000 fe11 	bl	20005940 <tftDisplay_ILI9341_Init_DriverTimingControl_B>
	tftDisplay_ILI9341_Init_PowerSequenceControl();
20004d1e:	f000 fe23 	bl	20005968 <tftDisplay_ILI9341_Init_PowerSequenceControl>
	tftDisplay_ILI9341_Init_PumpRatioControl();
20004d22:	f000 fe3b 	bl	2000599c <tftDisplay_ILI9341_Init_PumpRatioControl>
	tftDisplay_ILI9341_Init_PowerControlVRH();
20004d26:	f000 fe49 	bl	200059bc <tftDisplay_ILI9341_Init_PowerControlVRH>
	tftDisplay_ILI9341_Init_PowerControlSAP();
20004d2a:	f000 fe57 	bl	200059dc <tftDisplay_ILI9341_Init_PowerControlSAP>
	tftDisplay_ILI9341_Init_VCOMControl_1();
20004d2e:	f000 fe65 	bl	200059fc <tftDisplay_ILI9341_Init_VCOMControl_1>
	tftDisplay_ILI9341_Init_VCOMControl_2();
20004d32:	f000 fe77 	bl	20005a24 <tftDisplay_ILI9341_Init_VCOMControl_2>
	tftDisplay_ILI9341_Init_MemmoryAccessControl();
20004d36:	f000 fe85 	bl	20005a44 <tftDisplay_ILI9341_Init_MemmoryAccessControl>
	tftDisplay_ILI9341_Init_PixelFormatSet();
20004d3a:	f000 fe93 	bl	20005a64 <tftDisplay_ILI9341_Init_PixelFormatSet>
	tftDisplay_ILI9341_Init_FrameRationControl();
20004d3e:	f000 fea1 	bl	20005a84 <tftDisplay_ILI9341_Init_FrameRationControl>
	tftDisplay_ILI9341_Init_DisplayFunctionControl();
20004d42:	f000 feb3 	bl	20005aac <tftDisplay_ILI9341_Init_DisplayFunctionControl>
	tftDisplay_ILI9341_Init_GammaSet();
20004d46:	f000 fec1 	bl	20005acc <tftDisplay_ILI9341_Init_GammaSet>
	tftDisplay_ILI9341_Init_PositiveGammaCorection();
20004d4a:	f000 fecf 	bl	20005aec <tftDisplay_ILI9341_Init_PositiveGammaCorection>
	tftDisplay_ILI9341_Init_NegativeGammaCorection();
20004d4e:	f000 ff09 	bl	20005b64 <tftDisplay_ILI9341_Init_NegativeGammaCorection>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SLEEP_OUT);
20004d52:	2011      	movs	r0, #17
20004d54:	f000 fbea 	bl	2000552c <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(120);
20004d58:	2078      	movs	r0, #120	; 0x78
20004d5a:	f7fc f84f 	bl	20000dfc <LL_mDelay>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DISPLAY_ON);
20004d5e:	2029      	movs	r0, #41	; 0x29
20004d60:	f000 fbe4 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(TFT_ILI9341_ROTATION);
20004d64:	2048      	movs	r0, #72	; 0x48
20004d66:	f000 fc2f 	bl	200055c8 <tftDisplay_ILI9341_SendData>
	TFTDisplay_ILI9341_WIDTH = screenWidth;
20004d6a:	4a07      	ldr	r2, [pc, #28]	; (20004d88 <TFTDisplay_ILI9341_Initialization+0xa4>)
20004d6c:	88fb      	ldrh	r3, [r7, #6]
20004d6e:	8013      	strh	r3, [r2, #0]
	TFTDisplay_ILI9341_HEIGHT = screeHeight;
20004d70:	4a06      	ldr	r2, [pc, #24]	; (20004d8c <TFTDisplay_ILI9341_Initialization+0xa8>)
20004d72:	88bb      	ldrh	r3, [r7, #4]
20004d74:	8013      	strh	r3, [r2, #0]
	tftDisplay_ILI9341_FontsInitialization();
20004d76:	f000 fd09 	bl	2000578c <tftDisplay_ILI9341_FontsInitialization>
}
20004d7a:	bf00      	nop
20004d7c:	3708      	adds	r7, #8
20004d7e:	46bd      	mov	sp, r7
20004d80:	bd80      	pop	{r7, pc}
20004d82:	bf00      	nop
20004d84:	40020800 	.word	0x40020800
20004d88:	2000f77c 	.word	0x2000f77c
20004d8c:	2000f77e 	.word	0x2000f77e

20004d90 <TFTDisplay_ILI9341_FillRect>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
20004d90:	b590      	push	{r4, r7, lr}
20004d92:	b089      	sub	sp, #36	; 0x24
20004d94:	af00      	add	r7, sp, #0
20004d96:	4604      	mov	r4, r0
20004d98:	4608      	mov	r0, r1
20004d9a:	4611      	mov	r1, r2
20004d9c:	461a      	mov	r2, r3
20004d9e:	4623      	mov	r3, r4
20004da0:	80fb      	strh	r3, [r7, #6]
20004da2:	4603      	mov	r3, r0
20004da4:	80bb      	strh	r3, [r7, #4]
20004da6:	460b      	mov	r3, r1
20004da8:	807b      	strh	r3, [r7, #2]
20004daa:	4613      	mov	r3, r2
20004dac:	803b      	strh	r3, [r7, #0]
  uint32_t i = 0;
20004dae:	2300      	movs	r3, #0
20004db0:	61fb      	str	r3, [r7, #28]
  uint32_t n = 0;
20004db2:	2300      	movs	r3, #0
20004db4:	613b      	str	r3, [r7, #16]
  uint8_t cnt = 0;
20004db6:	2300      	movs	r3, #0
20004db8:	76fb      	strb	r3, [r7, #27]
  uint32_t buf_size = 0;
20004dba:	2300      	movs	r3, #0
20004dbc:	617b      	str	r3, [r7, #20]

  if((x1 >= TFTDisplay_ILI9341_WIDTH) || (y1 >= TFTDisplay_ILI9341_HEIGHT) ||
20004dbe:	4b47      	ldr	r3, [pc, #284]	; (20004edc <TFTDisplay_ILI9341_FillRect+0x14c>)
20004dc0:	881b      	ldrh	r3, [r3, #0]
20004dc2:	88fa      	ldrh	r2, [r7, #6]
20004dc4:	429a      	cmp	r2, r3
20004dc6:	f080 8084 	bcs.w	20004ed2 <TFTDisplay_ILI9341_FillRect+0x142>
20004dca:	4b45      	ldr	r3, [pc, #276]	; (20004ee0 <TFTDisplay_ILI9341_FillRect+0x150>)
20004dcc:	881b      	ldrh	r3, [r3, #0]
20004dce:	88ba      	ldrh	r2, [r7, #4]
20004dd0:	429a      	cmp	r2, r3
20004dd2:	d27e      	bcs.n	20004ed2 <TFTDisplay_ILI9341_FillRect+0x142>
     (x2 >= TFTDisplay_ILI9341_WIDTH) || (y2 >= TFTDisplay_ILI9341_HEIGHT)) {
20004dd4:	4b41      	ldr	r3, [pc, #260]	; (20004edc <TFTDisplay_ILI9341_FillRect+0x14c>)
20004dd6:	881b      	ldrh	r3, [r3, #0]
  if((x1 >= TFTDisplay_ILI9341_WIDTH) || (y1 >= TFTDisplay_ILI9341_HEIGHT) ||
20004dd8:	887a      	ldrh	r2, [r7, #2]
20004dda:	429a      	cmp	r2, r3
20004ddc:	d279      	bcs.n	20004ed2 <TFTDisplay_ILI9341_FillRect+0x142>
     (x2 >= TFTDisplay_ILI9341_WIDTH) || (y2 >= TFTDisplay_ILI9341_HEIGHT)) {
20004dde:	4b40      	ldr	r3, [pc, #256]	; (20004ee0 <TFTDisplay_ILI9341_FillRect+0x150>)
20004de0:	881b      	ldrh	r3, [r3, #0]
20004de2:	883a      	ldrh	r2, [r7, #0]
20004de4:	429a      	cmp	r2, r3
20004de6:	d274      	bcs.n	20004ed2 <TFTDisplay_ILI9341_FillRect+0x142>
	  return;
  }
  if(x1>x2) {
20004de8:	88fa      	ldrh	r2, [r7, #6]
20004dea:	887b      	ldrh	r3, [r7, #2]
20004dec:	429a      	cmp	r2, r3
20004dee:	d905      	bls.n	20004dfc <TFTDisplay_ILI9341_FillRect+0x6c>
	  SWAP(x1,x2);
20004df0:	88fb      	ldrh	r3, [r7, #6]
20004df2:	81fb      	strh	r3, [r7, #14]
20004df4:	887b      	ldrh	r3, [r7, #2]
20004df6:	80fb      	strh	r3, [r7, #6]
20004df8:	89fb      	ldrh	r3, [r7, #14]
20004dfa:	807b      	strh	r3, [r7, #2]
  }
  if(y1>y2) {
20004dfc:	88ba      	ldrh	r2, [r7, #4]
20004dfe:	883b      	ldrh	r3, [r7, #0]
20004e00:	429a      	cmp	r2, r3
20004e02:	d905      	bls.n	20004e10 <TFTDisplay_ILI9341_FillRect+0x80>
	  SWAP(y1,y2);
20004e04:	88bb      	ldrh	r3, [r7, #4]
20004e06:	81bb      	strh	r3, [r7, #12]
20004e08:	883b      	ldrh	r3, [r7, #0]
20004e0a:	80bb      	strh	r3, [r7, #4]
20004e0c:	89bb      	ldrh	r3, [r7, #12]
20004e0e:	803b      	strh	r3, [r7, #0]
  }
  tftDisplay_ILI9341_SetAddrWindow(x1, y1, x2, y2);
20004e10:	883b      	ldrh	r3, [r7, #0]
20004e12:	887a      	ldrh	r2, [r7, #2]
20004e14:	88b9      	ldrh	r1, [r7, #4]
20004e16:	88f8      	ldrh	r0, [r7, #6]
20004e18:	f000 fcf4 	bl	20005804 <tftDisplay_ILI9341_SetAddrWindow>
  n = (x2-x1+1)*(y2-y1+1)*2;
20004e1c:	887a      	ldrh	r2, [r7, #2]
20004e1e:	88fb      	ldrh	r3, [r7, #6]
20004e20:	1ad3      	subs	r3, r2, r3
20004e22:	3301      	adds	r3, #1
20004e24:	8839      	ldrh	r1, [r7, #0]
20004e26:	88ba      	ldrh	r2, [r7, #4]
20004e28:	1a8a      	subs	r2, r1, r2
20004e2a:	3201      	adds	r2, #1
20004e2c:	fb02 f303 	mul.w	r3, r2, r3
20004e30:	005b      	lsls	r3, r3, #1
20004e32:	613b      	str	r3, [r7, #16]
  if(n<=65535)
20004e34:	693b      	ldr	r3, [r7, #16]
20004e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20004e3a:	d204      	bcs.n	20004e46 <TFTDisplay_ILI9341_FillRect+0xb6>
  {
    cnt = 1;
20004e3c:	2301      	movs	r3, #1
20004e3e:	76fb      	strb	r3, [r7, #27]
    buf_size = n;
20004e40:	693b      	ldr	r3, [r7, #16]
20004e42:	617b      	str	r3, [r7, #20]
20004e44:	e024      	b.n	20004e90 <TFTDisplay_ILI9341_FillRect+0x100>
  }
  else
  {
    cnt = n/2;
20004e46:	693b      	ldr	r3, [r7, #16]
20004e48:	085b      	lsrs	r3, r3, #1
20004e4a:	76fb      	strb	r3, [r7, #27]
    buf_size = 2;
20004e4c:	2302      	movs	r3, #2
20004e4e:	617b      	str	r3, [r7, #20]
    for(i = 3; i < n/3; i++)
20004e50:	2303      	movs	r3, #3
20004e52:	61fb      	str	r3, [r7, #28]
20004e54:	e014      	b.n	20004e80 <TFTDisplay_ILI9341_FillRect+0xf0>
    {
      if(n%i == 0)
20004e56:	693b      	ldr	r3, [r7, #16]
20004e58:	69fa      	ldr	r2, [r7, #28]
20004e5a:	fbb3 f2f2 	udiv	r2, r3, r2
20004e5e:	69f9      	ldr	r1, [r7, #28]
20004e60:	fb01 f202 	mul.w	r2, r1, r2
20004e64:	1a9b      	subs	r3, r3, r2
20004e66:	2b00      	cmp	r3, #0
20004e68:	d107      	bne.n	20004e7a <TFTDisplay_ILI9341_FillRect+0xea>
      {
        cnt = i;
20004e6a:	69fb      	ldr	r3, [r7, #28]
20004e6c:	76fb      	strb	r3, [r7, #27]
        buf_size = n/i;
20004e6e:	693a      	ldr	r2, [r7, #16]
20004e70:	69fb      	ldr	r3, [r7, #28]
20004e72:	fbb2 f3f3 	udiv	r3, r2, r3
20004e76:	617b      	str	r3, [r7, #20]
        break;
20004e78:	e00a      	b.n	20004e90 <TFTDisplay_ILI9341_FillRect+0x100>
    for(i = 3; i < n/3; i++)
20004e7a:	69fb      	ldr	r3, [r7, #28]
20004e7c:	3301      	adds	r3, #1
20004e7e:	61fb      	str	r3, [r7, #28]
20004e80:	693b      	ldr	r3, [r7, #16]
20004e82:	4a18      	ldr	r2, [pc, #96]	; (20004ee4 <TFTDisplay_ILI9341_FillRect+0x154>)
20004e84:	fba2 2303 	umull	r2, r3, r2, r3
20004e88:	085b      	lsrs	r3, r3, #1
20004e8a:	69fa      	ldr	r2, [r7, #28]
20004e8c:	429a      	cmp	r2, r3
20004e8e:	d3e2      	bcc.n	20004e56 <TFTDisplay_ILI9341_FillRect+0xc6>
      }
    }
  }
  for(i = 0; i < buf_size/2; i++)
20004e90:	2300      	movs	r3, #0
20004e92:	61fb      	str	r3, [r7, #28]
20004e94:	e011      	b.n	20004eba <TFTDisplay_ILI9341_FillRect+0x12a>
  {
	  DataBuffer[i*2] = color >> 8;
20004e96:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20004e98:	0a1b      	lsrs	r3, r3, #8
20004e9a:	b29a      	uxth	r2, r3
20004e9c:	69fb      	ldr	r3, [r7, #28]
20004e9e:	005b      	lsls	r3, r3, #1
20004ea0:	b2d1      	uxtb	r1, r2
20004ea2:	4a11      	ldr	r2, [pc, #68]	; (20004ee8 <TFTDisplay_ILI9341_FillRect+0x158>)
20004ea4:	54d1      	strb	r1, [r2, r3]
	  DataBuffer[i*2+1] = color & 0xFF;
20004ea6:	69fb      	ldr	r3, [r7, #28]
20004ea8:	005b      	lsls	r3, r3, #1
20004eaa:	3301      	adds	r3, #1
20004eac:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
20004eae:	b2d1      	uxtb	r1, r2
20004eb0:	4a0d      	ldr	r2, [pc, #52]	; (20004ee8 <TFTDisplay_ILI9341_FillRect+0x158>)
20004eb2:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < buf_size/2; i++)
20004eb4:	69fb      	ldr	r3, [r7, #28]
20004eb6:	3301      	adds	r3, #1
20004eb8:	61fb      	str	r3, [r7, #28]
20004eba:	697b      	ldr	r3, [r7, #20]
20004ebc:	085b      	lsrs	r3, r3, #1
20004ebe:	69fa      	ldr	r2, [r7, #28]
20004ec0:	429a      	cmp	r2, r3
20004ec2:	d3e8      	bcc.n	20004e96 <TFTDisplay_ILI9341_FillRect+0x106>
  }

  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], buf_size, cnt);
20004ec4:	7efb      	ldrb	r3, [r7, #27]
20004ec6:	461a      	mov	r2, r3
20004ec8:	6979      	ldr	r1, [r7, #20]
20004eca:	4807      	ldr	r0, [pc, #28]	; (20004ee8 <TFTDisplay_ILI9341_FillRect+0x158>)
20004ecc:	f000 fbfa 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
20004ed0:	e000      	b.n	20004ed4 <TFTDisplay_ILI9341_FillRect+0x144>
	  return;
20004ed2:	bf00      	nop
}
20004ed4:	3724      	adds	r7, #36	; 0x24
20004ed6:	46bd      	mov	sp, r7
20004ed8:	bd90      	pop	{r4, r7, pc}
20004eda:	bf00      	nop
20004edc:	2000f77c 	.word	0x2000f77c
20004ee0:	2000f77e 	.word	0x2000f77e
20004ee4:	aaaaaaab 	.word	0xaaaaaaab
20004ee8:	2000f780 	.word	0x2000f780

20004eec <TFTDisplay_ILI9341_FillScreen>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_FillScreen(uint16_t color)
{
20004eec:	b580      	push	{r7, lr}
20004eee:	b084      	sub	sp, #16
20004ef0:	af02      	add	r7, sp, #8
20004ef2:	4603      	mov	r3, r0
20004ef4:	80fb      	strh	r3, [r7, #6]
	TFTDisplay_ILI9341_FillRect(0, 0, TFTDisplay_ILI9341_WIDTH-1, TFTDisplay_ILI9341_HEIGHT-1, color);
20004ef6:	4b09      	ldr	r3, [pc, #36]	; (20004f1c <TFTDisplay_ILI9341_FillScreen+0x30>)
20004ef8:	881b      	ldrh	r3, [r3, #0]
20004efa:	3b01      	subs	r3, #1
20004efc:	b29a      	uxth	r2, r3
20004efe:	4b08      	ldr	r3, [pc, #32]	; (20004f20 <TFTDisplay_ILI9341_FillScreen+0x34>)
20004f00:	881b      	ldrh	r3, [r3, #0]
20004f02:	3b01      	subs	r3, #1
20004f04:	b299      	uxth	r1, r3
20004f06:	88fb      	ldrh	r3, [r7, #6]
20004f08:	9300      	str	r3, [sp, #0]
20004f0a:	460b      	mov	r3, r1
20004f0c:	2100      	movs	r1, #0
20004f0e:	2000      	movs	r0, #0
20004f10:	f7ff ff3e 	bl	20004d90 <TFTDisplay_ILI9341_FillRect>
}
20004f14:	bf00      	nop
20004f16:	3708      	adds	r7, #8
20004f18:	46bd      	mov	sp, r7
20004f1a:	bd80      	pop	{r7, pc}
20004f1c:	2000f77c 	.word	0x2000f77c
20004f20:	2000f77e 	.word	0x2000f77e

20004f24 <TFTDisplay_ILI9341_DrawPixel>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawPixel(int x, int y, uint16_t color)
{
20004f24:	b580      	push	{r7, lr}
20004f26:	b084      	sub	sp, #16
20004f28:	af00      	add	r7, sp, #0
20004f2a:	60f8      	str	r0, [r7, #12]
20004f2c:	60b9      	str	r1, [r7, #8]
20004f2e:	4613      	mov	r3, r2
20004f30:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFTDisplay_ILI9341_WIDTH)||(y>=TFTDisplay_ILI9341_HEIGHT))
20004f32:	68fb      	ldr	r3, [r7, #12]
20004f34:	2b00      	cmp	r3, #0
20004f36:	db2b      	blt.n	20004f90 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004f38:	68bb      	ldr	r3, [r7, #8]
20004f3a:	2b00      	cmp	r3, #0
20004f3c:	db28      	blt.n	20004f90 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004f3e:	4b16      	ldr	r3, [pc, #88]	; (20004f98 <TFTDisplay_ILI9341_DrawPixel+0x74>)
20004f40:	881b      	ldrh	r3, [r3, #0]
20004f42:	461a      	mov	r2, r3
20004f44:	68fb      	ldr	r3, [r7, #12]
20004f46:	4293      	cmp	r3, r2
20004f48:	da22      	bge.n	20004f90 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004f4a:	4b14      	ldr	r3, [pc, #80]	; (20004f9c <TFTDisplay_ILI9341_DrawPixel+0x78>)
20004f4c:	881b      	ldrh	r3, [r3, #0]
20004f4e:	461a      	mov	r2, r3
20004f50:	68bb      	ldr	r3, [r7, #8]
20004f52:	4293      	cmp	r3, r2
20004f54:	da1c      	bge.n	20004f90 <TFTDisplay_ILI9341_DrawPixel+0x6c>
	{
		return;
	}

	tftDisplay_ILI9341_SetAddrWindow(x,y,x,y);
20004f56:	68fb      	ldr	r3, [r7, #12]
20004f58:	b298      	uxth	r0, r3
20004f5a:	68bb      	ldr	r3, [r7, #8]
20004f5c:	b299      	uxth	r1, r3
20004f5e:	68fb      	ldr	r3, [r7, #12]
20004f60:	b29a      	uxth	r2, r3
20004f62:	68bb      	ldr	r3, [r7, #8]
20004f64:	b29b      	uxth	r3, r3
20004f66:	f000 fc4d 	bl	20005804 <tftDisplay_ILI9341_SetAddrWindow>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
20004f6a:	202c      	movs	r0, #44	; 0x2c
20004f6c:	f000 fade 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	DataBuffer[0] = color>>8;
20004f70:	88fb      	ldrh	r3, [r7, #6]
20004f72:	0a1b      	lsrs	r3, r3, #8
20004f74:	b29b      	uxth	r3, r3
20004f76:	b2da      	uxtb	r2, r3
20004f78:	4b09      	ldr	r3, [pc, #36]	; (20004fa0 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004f7a:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = color & 0xFF;
20004f7c:	88fb      	ldrh	r3, [r7, #6]
20004f7e:	b2da      	uxtb	r2, r3
20004f80:	4b07      	ldr	r3, [pc, #28]	; (20004fa0 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004f82:	705a      	strb	r2, [r3, #1]


	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004f84:	2201      	movs	r2, #1
20004f86:	2102      	movs	r1, #2
20004f88:	4805      	ldr	r0, [pc, #20]	; (20004fa0 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004f8a:	f000 fb9b 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
20004f8e:	e000      	b.n	20004f92 <TFTDisplay_ILI9341_DrawPixel+0x6e>
		return;
20004f90:	bf00      	nop
}
20004f92:	3710      	adds	r7, #16
20004f94:	46bd      	mov	sp, r7
20004f96:	bd80      	pop	{r7, pc}
20004f98:	2000f77c 	.word	0x2000f77c
20004f9c:	2000f77e 	.word	0x2000f77e
20004fa0:	2000f780 	.word	0x2000f780

20004fa4 <TFTDisplay_ILI9341_DrawLine>:
//------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawLine(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
20004fa4:	b590      	push	{r4, r7, lr}
20004fa6:	b08b      	sub	sp, #44	; 0x2c
20004fa8:	af00      	add	r7, sp, #0
20004faa:	4604      	mov	r4, r0
20004fac:	4608      	mov	r0, r1
20004fae:	4611      	mov	r1, r2
20004fb0:	461a      	mov	r2, r3
20004fb2:	4623      	mov	r3, r4
20004fb4:	80fb      	strh	r3, [r7, #6]
20004fb6:	4603      	mov	r3, r0
20004fb8:	80bb      	strh	r3, [r7, #4]
20004fba:	460b      	mov	r3, r1
20004fbc:	807b      	strh	r3, [r7, #2]
20004fbe:	4613      	mov	r3, r2
20004fc0:	803b      	strh	r3, [r7, #0]
    int steep = abs(y_end-y_start)>abs(x_end-x_start);
20004fc2:	883a      	ldrh	r2, [r7, #0]
20004fc4:	88bb      	ldrh	r3, [r7, #4]
20004fc6:	1ad3      	subs	r3, r2, r3
20004fc8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20004fcc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20004fd0:	8879      	ldrh	r1, [r7, #2]
20004fd2:	88fb      	ldrh	r3, [r7, #6]
20004fd4:	1acb      	subs	r3, r1, r3
20004fd6:	2b00      	cmp	r3, #0
20004fd8:	bfb8      	it	lt
20004fda:	425b      	neglt	r3, r3
20004fdc:	429a      	cmp	r2, r3
20004fde:	bfcc      	ite	gt
20004fe0:	2301      	movgt	r3, #1
20004fe2:	2300      	movle	r3, #0
20004fe4:	b2db      	uxtb	r3, r3
20004fe6:	61fb      	str	r3, [r7, #28]
    int dx=0;
20004fe8:	2300      	movs	r3, #0
20004fea:	61bb      	str	r3, [r7, #24]
    int dy=0;
20004fec:	2300      	movs	r3, #0
20004fee:	617b      	str	r3, [r7, #20]
    int err=0;
20004ff0:	2300      	movs	r3, #0
20004ff2:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep=0;
20004ff4:	2300      	movs	r3, #0
20004ff6:	623b      	str	r3, [r7, #32]

    if (steep)
20004ff8:	69fb      	ldr	r3, [r7, #28]
20004ffa:	2b00      	cmp	r3, #0
20004ffc:	d00b      	beq.n	20005016 <TFTDisplay_ILI9341_DrawLine+0x72>
    {
    	SWAP(x_start,y_start);
20004ffe:	88fb      	ldrh	r3, [r7, #6]
20005000:	827b      	strh	r3, [r7, #18]
20005002:	88bb      	ldrh	r3, [r7, #4]
20005004:	80fb      	strh	r3, [r7, #6]
20005006:	8a7b      	ldrh	r3, [r7, #18]
20005008:	80bb      	strh	r3, [r7, #4]
    	SWAP(x_end,y_end);
2000500a:	887b      	ldrh	r3, [r7, #2]
2000500c:	823b      	strh	r3, [r7, #16]
2000500e:	883b      	ldrh	r3, [r7, #0]
20005010:	807b      	strh	r3, [r7, #2]
20005012:	8a3b      	ldrh	r3, [r7, #16]
20005014:	803b      	strh	r3, [r7, #0]
    }

    if(x_start>x_end)
20005016:	88fa      	ldrh	r2, [r7, #6]
20005018:	887b      	ldrh	r3, [r7, #2]
2000501a:	429a      	cmp	r2, r3
2000501c:	d90b      	bls.n	20005036 <TFTDisplay_ILI9341_DrawLine+0x92>
    {
    	SWAP(x_start,x_end);
2000501e:	88fb      	ldrh	r3, [r7, #6]
20005020:	81fb      	strh	r3, [r7, #14]
20005022:	887b      	ldrh	r3, [r7, #2]
20005024:	80fb      	strh	r3, [r7, #6]
20005026:	89fb      	ldrh	r3, [r7, #14]
20005028:	807b      	strh	r3, [r7, #2]
    	SWAP(y_start,y_end);
2000502a:	88bb      	ldrh	r3, [r7, #4]
2000502c:	81bb      	strh	r3, [r7, #12]
2000502e:	883b      	ldrh	r3, [r7, #0]
20005030:	80bb      	strh	r3, [r7, #4]
20005032:	89bb      	ldrh	r3, [r7, #12]
20005034:	803b      	strh	r3, [r7, #0]
    }

    dx=x_end-x_start;
20005036:	887a      	ldrh	r2, [r7, #2]
20005038:	88fb      	ldrh	r3, [r7, #6]
2000503a:	1ad3      	subs	r3, r2, r3
2000503c:	61bb      	str	r3, [r7, #24]
    dy=abs(y_end-y_start);
2000503e:	883a      	ldrh	r2, [r7, #0]
20005040:	88bb      	ldrh	r3, [r7, #4]
20005042:	1ad3      	subs	r3, r2, r3
20005044:	2b00      	cmp	r3, #0
20005046:	bfb8      	it	lt
20005048:	425b      	neglt	r3, r3
2000504a:	617b      	str	r3, [r7, #20]
    err=dx/2;
2000504c:	69bb      	ldr	r3, [r7, #24]
2000504e:	0fda      	lsrs	r2, r3, #31
20005050:	4413      	add	r3, r2
20005052:	105b      	asrs	r3, r3, #1
20005054:	627b      	str	r3, [r7, #36]	; 0x24

    if(y_start<y_end)
20005056:	88ba      	ldrh	r2, [r7, #4]
20005058:	883b      	ldrh	r3, [r7, #0]
2000505a:	429a      	cmp	r2, r3
2000505c:	d202      	bcs.n	20005064 <TFTDisplay_ILI9341_DrawLine+0xc0>
    {
        ystep = 1;
2000505e:	2301      	movs	r3, #1
20005060:	623b      	str	r3, [r7, #32]
20005062:	e026      	b.n	200050b2 <TFTDisplay_ILI9341_DrawLine+0x10e>
    }
    else
    {
        ystep = -1;
20005064:	f04f 33ff 	mov.w	r3, #4294967295
20005068:	623b      	str	r3, [r7, #32]
    }
    for (;x_start<=x_end;x_start++)
2000506a:	e022      	b.n	200050b2 <TFTDisplay_ILI9341_DrawLine+0x10e>
    {
       if (steep)
2000506c:	69fb      	ldr	r3, [r7, #28]
2000506e:	2b00      	cmp	r3, #0
20005070:	d006      	beq.n	20005080 <TFTDisplay_ILI9341_DrawLine+0xdc>
       {
    	   TFTDisplay_ILI9341_DrawPixel(y_start,x_start,color);
20005072:	88bb      	ldrh	r3, [r7, #4]
20005074:	88f9      	ldrh	r1, [r7, #6]
20005076:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20005078:	4618      	mov	r0, r3
2000507a:	f7ff ff53 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
2000507e:	e005      	b.n	2000508c <TFTDisplay_ILI9341_DrawLine+0xe8>
       }
       else
       {
    	   TFTDisplay_ILI9341_DrawPixel(x_start,y_start,color);
20005080:	88fb      	ldrh	r3, [r7, #6]
20005082:	88b9      	ldrh	r1, [r7, #4]
20005084:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20005086:	4618      	mov	r0, r3
20005088:	f7ff ff4c 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
       }
       err-=dy;
2000508c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000508e:	697b      	ldr	r3, [r7, #20]
20005090:	1ad3      	subs	r3, r2, r3
20005092:	627b      	str	r3, [r7, #36]	; 0x24
       if (err<0)
20005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20005096:	2b00      	cmp	r3, #0
20005098:	da08      	bge.n	200050ac <TFTDisplay_ILI9341_DrawLine+0x108>
       {
        y_start += ystep;
2000509a:	6a3b      	ldr	r3, [r7, #32]
2000509c:	b29a      	uxth	r2, r3
2000509e:	88bb      	ldrh	r3, [r7, #4]
200050a0:	4413      	add	r3, r2
200050a2:	80bb      	strh	r3, [r7, #4]
        err+=dx;
200050a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200050a6:	69bb      	ldr	r3, [r7, #24]
200050a8:	4413      	add	r3, r2
200050aa:	627b      	str	r3, [r7, #36]	; 0x24
    for (;x_start<=x_end;x_start++)
200050ac:	88fb      	ldrh	r3, [r7, #6]
200050ae:	3301      	adds	r3, #1
200050b0:	80fb      	strh	r3, [r7, #6]
200050b2:	88fa      	ldrh	r2, [r7, #6]
200050b4:	887b      	ldrh	r3, [r7, #2]
200050b6:	429a      	cmp	r2, r3
200050b8:	d9d8      	bls.n	2000506c <TFTDisplay_ILI9341_DrawLine+0xc8>
       }
    }
}
200050ba:	bf00      	nop
200050bc:	bf00      	nop
200050be:	372c      	adds	r7, #44	; 0x2c
200050c0:	46bd      	mov	sp, r7
200050c2:	bd90      	pop	{r4, r7, pc}

200050c4 <TFTDisplay_ILI9341_DrawClearRect>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawClearRect(uint16_t start_x, uint16_t start_y,
        								uint16_t end_x, uint16_t end_y, uint16_t color)
{
200050c4:	b590      	push	{r4, r7, lr}
200050c6:	b085      	sub	sp, #20
200050c8:	af02      	add	r7, sp, #8
200050ca:	4604      	mov	r4, r0
200050cc:	4608      	mov	r0, r1
200050ce:	4611      	mov	r1, r2
200050d0:	461a      	mov	r2, r3
200050d2:	4623      	mov	r3, r4
200050d4:	80fb      	strh	r3, [r7, #6]
200050d6:	4603      	mov	r3, r0
200050d8:	80bb      	strh	r3, [r7, #4]
200050da:	460b      	mov	r3, r1
200050dc:	807b      	strh	r3, [r7, #2]
200050de:	4613      	mov	r3, r2
200050e0:	803b      	strh	r3, [r7, #0]
	TFTDisplay_ILI9341_DrawLine(start_x,start_y,end_x,start_y,color);
200050e2:	88bc      	ldrh	r4, [r7, #4]
200050e4:	887a      	ldrh	r2, [r7, #2]
200050e6:	88b9      	ldrh	r1, [r7, #4]
200050e8:	88f8      	ldrh	r0, [r7, #6]
200050ea:	8b3b      	ldrh	r3, [r7, #24]
200050ec:	9300      	str	r3, [sp, #0]
200050ee:	4623      	mov	r3, r4
200050f0:	f7ff ff58 	bl	20004fa4 <TFTDisplay_ILI9341_DrawLine>
    TFTDisplay_ILI9341_DrawLine(end_x, start_y, end_x, end_y, color);
200050f4:	883c      	ldrh	r4, [r7, #0]
200050f6:	887a      	ldrh	r2, [r7, #2]
200050f8:	88b9      	ldrh	r1, [r7, #4]
200050fa:	8878      	ldrh	r0, [r7, #2]
200050fc:	8b3b      	ldrh	r3, [r7, #24]
200050fe:	9300      	str	r3, [sp, #0]
20005100:	4623      	mov	r3, r4
20005102:	f7ff ff4f 	bl	20004fa4 <TFTDisplay_ILI9341_DrawLine>
    TFTDisplay_ILI9341_DrawLine(start_x, start_y, start_x, end_y, color);
20005106:	883c      	ldrh	r4, [r7, #0]
20005108:	88fa      	ldrh	r2, [r7, #6]
2000510a:	88b9      	ldrh	r1, [r7, #4]
2000510c:	88f8      	ldrh	r0, [r7, #6]
2000510e:	8b3b      	ldrh	r3, [r7, #24]
20005110:	9300      	str	r3, [sp, #0]
20005112:	4623      	mov	r3, r4
20005114:	f7ff ff46 	bl	20004fa4 <TFTDisplay_ILI9341_DrawLine>
    TFTDisplay_ILI9341_DrawLine(start_x, end_y, end_x, end_y, color);
20005118:	883c      	ldrh	r4, [r7, #0]
2000511a:	887a      	ldrh	r2, [r7, #2]
2000511c:	8839      	ldrh	r1, [r7, #0]
2000511e:	88f8      	ldrh	r0, [r7, #6]
20005120:	8b3b      	ldrh	r3, [r7, #24]
20005122:	9300      	str	r3, [sp, #0]
20005124:	4623      	mov	r3, r4
20005126:	f7ff ff3d 	bl	20004fa4 <TFTDisplay_ILI9341_DrawLine>
}
2000512a:	bf00      	nop
2000512c:	370c      	adds	r7, #12
2000512e:	46bd      	mov	sp, r7
20005130:	bd90      	pop	{r4, r7, pc}

20005132 <TFTDisplay_ILI9341_DrawCircle>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawCircle(uint16_t x_Position, uint16_t y_Position, int radius, uint16_t color)
{
20005132:	b580      	push	{r7, lr}
20005134:	b08a      	sub	sp, #40	; 0x28
20005136:	af00      	add	r7, sp, #0
20005138:	60ba      	str	r2, [r7, #8]
2000513a:	461a      	mov	r2, r3
2000513c:	4603      	mov	r3, r0
2000513e:	81fb      	strh	r3, [r7, #14]
20005140:	460b      	mov	r3, r1
20005142:	81bb      	strh	r3, [r7, #12]
20005144:	4613      	mov	r3, r2
20005146:	80fb      	strh	r3, [r7, #6]
	int f = 1-radius;
20005148:	68bb      	ldr	r3, [r7, #8]
2000514a:	f1c3 0301 	rsb	r3, r3, #1
2000514e:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x=1;
20005150:	2301      	movs	r3, #1
20005152:	623b      	str	r3, [r7, #32]
	int ddF_y=-2*radius;
20005154:	68ba      	ldr	r2, [r7, #8]
20005156:	4613      	mov	r3, r2
20005158:	07db      	lsls	r3, r3, #31
2000515a:	1a9b      	subs	r3, r3, r2
2000515c:	005b      	lsls	r3, r3, #1
2000515e:	61fb      	str	r3, [r7, #28]
	int x = 0;
20005160:	2300      	movs	r3, #0
20005162:	61bb      	str	r3, [r7, #24]
	int y = radius;
20005164:	68bb      	ldr	r3, [r7, #8]
20005166:	617b      	str	r3, [r7, #20]

	TFTDisplay_ILI9341_DrawPixel(x_Position,y_Position+radius,color);
20005168:	89f8      	ldrh	r0, [r7, #14]
2000516a:	89ba      	ldrh	r2, [r7, #12]
2000516c:	68bb      	ldr	r3, [r7, #8]
2000516e:	4413      	add	r3, r2
20005170:	88fa      	ldrh	r2, [r7, #6]
20005172:	4619      	mov	r1, r3
20005174:	f7ff fed6 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position,y_Position-radius,color);
20005178:	89f8      	ldrh	r0, [r7, #14]
2000517a:	89ba      	ldrh	r2, [r7, #12]
2000517c:	68bb      	ldr	r3, [r7, #8]
2000517e:	1ad3      	subs	r3, r2, r3
20005180:	88fa      	ldrh	r2, [r7, #6]
20005182:	4619      	mov	r1, r3
20005184:	f7ff fece 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position+radius,y_Position,color);
20005188:	89fa      	ldrh	r2, [r7, #14]
2000518a:	68bb      	ldr	r3, [r7, #8]
2000518c:	4413      	add	r3, r2
2000518e:	89b9      	ldrh	r1, [r7, #12]
20005190:	88fa      	ldrh	r2, [r7, #6]
20005192:	4618      	mov	r0, r3
20005194:	f7ff fec6 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position-radius,y_Position,color);
20005198:	89fa      	ldrh	r2, [r7, #14]
2000519a:	68bb      	ldr	r3, [r7, #8]
2000519c:	1ad3      	subs	r3, r2, r3
2000519e:	89b9      	ldrh	r1, [r7, #12]
200051a0:	88fa      	ldrh	r2, [r7, #6]
200051a2:	4618      	mov	r0, r3
200051a4:	f7ff febe 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	while (x<y)
200051a8:	e066      	b.n	20005278 <TFTDisplay_ILI9341_DrawCircle+0x146>
	{
		if (f>=0)
200051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200051ac:	2b00      	cmp	r3, #0
200051ae:	db09      	blt.n	200051c4 <TFTDisplay_ILI9341_DrawCircle+0x92>
		{
			y--;
200051b0:	697b      	ldr	r3, [r7, #20]
200051b2:	3b01      	subs	r3, #1
200051b4:	617b      	str	r3, [r7, #20]
			ddF_y+=2;
200051b6:	69fb      	ldr	r3, [r7, #28]
200051b8:	3302      	adds	r3, #2
200051ba:	61fb      	str	r3, [r7, #28]
			f+=ddF_y;
200051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200051be:	69fb      	ldr	r3, [r7, #28]
200051c0:	4413      	add	r3, r2
200051c2:	627b      	str	r3, [r7, #36]	; 0x24
	    }

		x++;
200051c4:	69bb      	ldr	r3, [r7, #24]
200051c6:	3301      	adds	r3, #1
200051c8:	61bb      	str	r3, [r7, #24]
	    ddF_x+=2;
200051ca:	6a3b      	ldr	r3, [r7, #32]
200051cc:	3302      	adds	r3, #2
200051ce:	623b      	str	r3, [r7, #32]
	    f+=ddF_x;
200051d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200051d2:	6a3b      	ldr	r3, [r7, #32]
200051d4:	4413      	add	r3, r2
200051d6:	627b      	str	r3, [r7, #36]	; 0x24
	    TFTDisplay_ILI9341_DrawPixel(x_Position+x,y_Position+y,color);
200051d8:	89fa      	ldrh	r2, [r7, #14]
200051da:	69bb      	ldr	r3, [r7, #24]
200051dc:	18d0      	adds	r0, r2, r3
200051de:	89ba      	ldrh	r2, [r7, #12]
200051e0:	697b      	ldr	r3, [r7, #20]
200051e2:	4413      	add	r3, r2
200051e4:	88fa      	ldrh	r2, [r7, #6]
200051e6:	4619      	mov	r1, r3
200051e8:	f7ff fe9c 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-x,y_Position+y,color);
200051ec:	89fa      	ldrh	r2, [r7, #14]
200051ee:	69bb      	ldr	r3, [r7, #24]
200051f0:	1ad0      	subs	r0, r2, r3
200051f2:	89ba      	ldrh	r2, [r7, #12]
200051f4:	697b      	ldr	r3, [r7, #20]
200051f6:	4413      	add	r3, r2
200051f8:	88fa      	ldrh	r2, [r7, #6]
200051fa:	4619      	mov	r1, r3
200051fc:	f7ff fe92 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+x,y_Position-y,color);
20005200:	89fa      	ldrh	r2, [r7, #14]
20005202:	69bb      	ldr	r3, [r7, #24]
20005204:	18d0      	adds	r0, r2, r3
20005206:	89ba      	ldrh	r2, [r7, #12]
20005208:	697b      	ldr	r3, [r7, #20]
2000520a:	1ad3      	subs	r3, r2, r3
2000520c:	88fa      	ldrh	r2, [r7, #6]
2000520e:	4619      	mov	r1, r3
20005210:	f7ff fe88 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-x,y_Position-y,color);
20005214:	89fa      	ldrh	r2, [r7, #14]
20005216:	69bb      	ldr	r3, [r7, #24]
20005218:	1ad0      	subs	r0, r2, r3
2000521a:	89ba      	ldrh	r2, [r7, #12]
2000521c:	697b      	ldr	r3, [r7, #20]
2000521e:	1ad3      	subs	r3, r2, r3
20005220:	88fa      	ldrh	r2, [r7, #6]
20005222:	4619      	mov	r1, r3
20005224:	f7ff fe7e 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+y,y_Position+x,color);
20005228:	89fa      	ldrh	r2, [r7, #14]
2000522a:	697b      	ldr	r3, [r7, #20]
2000522c:	18d0      	adds	r0, r2, r3
2000522e:	89ba      	ldrh	r2, [r7, #12]
20005230:	69bb      	ldr	r3, [r7, #24]
20005232:	4413      	add	r3, r2
20005234:	88fa      	ldrh	r2, [r7, #6]
20005236:	4619      	mov	r1, r3
20005238:	f7ff fe74 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-y,y_Position+x,color);
2000523c:	89fa      	ldrh	r2, [r7, #14]
2000523e:	697b      	ldr	r3, [r7, #20]
20005240:	1ad0      	subs	r0, r2, r3
20005242:	89ba      	ldrh	r2, [r7, #12]
20005244:	69bb      	ldr	r3, [r7, #24]
20005246:	4413      	add	r3, r2
20005248:	88fa      	ldrh	r2, [r7, #6]
2000524a:	4619      	mov	r1, r3
2000524c:	f7ff fe6a 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+y,y_Position-x,color);
20005250:	89fa      	ldrh	r2, [r7, #14]
20005252:	697b      	ldr	r3, [r7, #20]
20005254:	18d0      	adds	r0, r2, r3
20005256:	89ba      	ldrh	r2, [r7, #12]
20005258:	69bb      	ldr	r3, [r7, #24]
2000525a:	1ad3      	subs	r3, r2, r3
2000525c:	88fa      	ldrh	r2, [r7, #6]
2000525e:	4619      	mov	r1, r3
20005260:	f7ff fe60 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-y,y_Position-x,color);
20005264:	89fa      	ldrh	r2, [r7, #14]
20005266:	697b      	ldr	r3, [r7, #20]
20005268:	1ad0      	subs	r0, r2, r3
2000526a:	89ba      	ldrh	r2, [r7, #12]
2000526c:	69bb      	ldr	r3, [r7, #24]
2000526e:	1ad3      	subs	r3, r2, r3
20005270:	88fa      	ldrh	r2, [r7, #6]
20005272:	4619      	mov	r1, r3
20005274:	f7ff fe56 	bl	20004f24 <TFTDisplay_ILI9341_DrawPixel>
	while (x<y)
20005278:	69ba      	ldr	r2, [r7, #24]
2000527a:	697b      	ldr	r3, [r7, #20]
2000527c:	429a      	cmp	r2, r3
2000527e:	db94      	blt.n	200051aa <TFTDisplay_ILI9341_DrawCircle+0x78>
	}
}
20005280:	bf00      	nop
20005282:	bf00      	nop
20005284:	3728      	adds	r7, #40	; 0x28
20005286:	46bd      	mov	sp, r7
20005288:	bd80      	pop	{r7, pc}
	...

2000528c <TFTDisplay_ILI9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
2000528c:	b590      	push	{r4, r7, lr}
2000528e:	b08b      	sub	sp, #44	; 0x2c
20005290:	af00      	add	r7, sp, #0
20005292:	4603      	mov	r3, r0
20005294:	80fb      	strh	r3, [r7, #6]
20005296:	460b      	mov	r3, r1
20005298:	80bb      	strh	r3, [r7, #4]
2000529a:	4613      	mov	r3, r2
2000529c:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
2000529e:	2300      	movs	r3, #0
200052a0:	627b      	str	r3, [r7, #36]	; 0x24
200052a2:	2300      	movs	r3, #0
200052a4:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint16_t y_cur = y;
200052a6:	88bb      	ldrh	r3, [r7, #4]
200052a8:	83fb      	strh	r3, [r7, #30]
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
200052aa:	2300      	movs	r3, #0
200052ac:	61bb      	str	r3, [r7, #24]
  height = lcdprop.pFont->Height;
200052ae:	4b70      	ldr	r3, [pc, #448]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200052b0:	685b      	ldr	r3, [r3, #4]
200052b2:	88db      	ldrh	r3, [r3, #6]
200052b4:	82fb      	strh	r3, [r7, #22]
  width  = lcdprop.pFont->Width;
200052b6:	4b6e      	ldr	r3, [pc, #440]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200052b8:	685b      	ldr	r3, [r3, #4]
200052ba:	889b      	ldrh	r3, [r3, #4]
200052bc:	82bb      	strh	r3, [r7, #20]
  offset = 8 *((width + 7)/8) -  width ;
200052be:	8abb      	ldrh	r3, [r7, #20]
200052c0:	3307      	adds	r3, #7
200052c2:	2b00      	cmp	r3, #0
200052c4:	da00      	bge.n	200052c8 <TFTDisplay_ILI9341_DrawChar+0x3c>
200052c6:	3307      	adds	r3, #7
200052c8:	10db      	asrs	r3, r3, #3
200052ca:	b2db      	uxtb	r3, r3
200052cc:	00db      	lsls	r3, r3, #3
200052ce:	b2da      	uxtb	r2, r3
200052d0:	8abb      	ldrh	r3, [r7, #20]
200052d2:	b2db      	uxtb	r3, r3
200052d4:	1ad3      	subs	r3, r2, r3
200052d6:	74fb      	strb	r3, [r7, #19]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
200052d8:	4b65      	ldr	r3, [pc, #404]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200052da:	685b      	ldr	r3, [r3, #4]
200052dc:	681a      	ldr	r2, [r3, #0]
200052de:	78fb      	ldrb	r3, [r7, #3]
200052e0:	3b20      	subs	r3, #32
200052e2:	4963      	ldr	r1, [pc, #396]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200052e4:	6849      	ldr	r1, [r1, #4]
200052e6:	88c9      	ldrh	r1, [r1, #6]
200052e8:	fb03 f101 	mul.w	r1, r3, r1
200052ec:	4b60      	ldr	r3, [pc, #384]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200052ee:	685b      	ldr	r3, [r3, #4]
200052f0:	889b      	ldrh	r3, [r3, #4]
200052f2:	3307      	adds	r3, #7
200052f4:	2b00      	cmp	r3, #0
200052f6:	da00      	bge.n	200052fa <TFTDisplay_ILI9341_DrawChar+0x6e>
200052f8:	3307      	adds	r3, #7
200052fa:	10db      	asrs	r3, r3, #3
200052fc:	fb01 f303 	mul.w	r3, r1, r3
20005300:	4413      	add	r3, r2
20005302:	60fb      	str	r3, [r7, #12]
  for(i = 0; i < height; i++)
20005304:	2300      	movs	r3, #0
20005306:	627b      	str	r3, [r7, #36]	; 0x24
20005308:	e087      	b.n	2000541a <TFTDisplay_ILI9341_DrawChar+0x18e>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
2000530a:	8abb      	ldrh	r3, [r7, #20]
2000530c:	3307      	adds	r3, #7
2000530e:	2b00      	cmp	r3, #0
20005310:	da00      	bge.n	20005314 <TFTDisplay_ILI9341_DrawChar+0x88>
20005312:	3307      	adds	r3, #7
20005314:	10db      	asrs	r3, r3, #3
20005316:	461a      	mov	r2, r3
20005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000531a:	fb02 f303 	mul.w	r3, r2, r3
2000531e:	68fa      	ldr	r2, [r7, #12]
20005320:	4413      	add	r3, r2
20005322:	60bb      	str	r3, [r7, #8]
    switch(((width + 7)/8))
20005324:	8abb      	ldrh	r3, [r7, #20]
20005326:	3307      	adds	r3, #7
20005328:	2b00      	cmp	r3, #0
2000532a:	da00      	bge.n	2000532e <TFTDisplay_ILI9341_DrawChar+0xa2>
2000532c:	3307      	adds	r3, #7
2000532e:	10db      	asrs	r3, r3, #3
20005330:	2b01      	cmp	r3, #1
20005332:	d002      	beq.n	2000533a <TFTDisplay_ILI9341_DrawChar+0xae>
20005334:	2b02      	cmp	r3, #2
20005336:	d004      	beq.n	20005342 <TFTDisplay_ILI9341_DrawChar+0xb6>
20005338:	e00c      	b.n	20005354 <TFTDisplay_ILI9341_DrawChar+0xc8>
    {
      case 1:
          line =  pchar[0];      
2000533a:	68bb      	ldr	r3, [r7, #8]
2000533c:	781b      	ldrb	r3, [r3, #0]
2000533e:	61bb      	str	r3, [r7, #24]
          break;
20005340:	e016      	b.n	20005370 <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
20005342:	68bb      	ldr	r3, [r7, #8]
20005344:	781b      	ldrb	r3, [r3, #0]
20005346:	021b      	lsls	r3, r3, #8
20005348:	68ba      	ldr	r2, [r7, #8]
2000534a:	3201      	adds	r2, #1
2000534c:	7812      	ldrb	r2, [r2, #0]
2000534e:	4313      	orrs	r3, r2
20005350:	61bb      	str	r3, [r7, #24]
          break;
20005352:	e00d      	b.n	20005370 <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
20005354:	68bb      	ldr	r3, [r7, #8]
20005356:	781b      	ldrb	r3, [r3, #0]
20005358:	041a      	lsls	r2, r3, #16
2000535a:	68bb      	ldr	r3, [r7, #8]
2000535c:	3301      	adds	r3, #1
2000535e:	781b      	ldrb	r3, [r3, #0]
20005360:	021b      	lsls	r3, r3, #8
20005362:	4313      	orrs	r3, r2
20005364:	68ba      	ldr	r2, [r7, #8]
20005366:	3202      	adds	r2, #2
20005368:	7812      	ldrb	r2, [r2, #0]
2000536a:	4313      	orrs	r3, r2
2000536c:	61bb      	str	r3, [r7, #24]
        break;
2000536e:	bf00      	nop
    }
    for (j = 0; j < width; j++)
20005370:	2300      	movs	r3, #0
20005372:	623b      	str	r3, [r7, #32]
20005374:	e047      	b.n	20005406 <TFTDisplay_ILI9341_DrawChar+0x17a>
    {
      if(line & (1 << (width- j + offset- 1))) 
20005376:	8aba      	ldrh	r2, [r7, #20]
20005378:	6a3b      	ldr	r3, [r7, #32]
2000537a:	1ad2      	subs	r2, r2, r3
2000537c:	7cfb      	ldrb	r3, [r7, #19]
2000537e:	4413      	add	r3, r2
20005380:	3b01      	subs	r3, #1
20005382:	2201      	movs	r2, #1
20005384:	fa02 f303 	lsl.w	r3, r2, r3
20005388:	461a      	mov	r2, r3
2000538a:	69bb      	ldr	r3, [r7, #24]
2000538c:	4013      	ands	r3, r2
2000538e:	2b00      	cmp	r3, #0
20005390:	d01b      	beq.n	200053ca <TFTDisplay_ILI9341_DrawChar+0x13e>
      {
    	DataBuffer[(i*width + j) * 2] = lcdprop.TextColor >> 8;
20005392:	4b37      	ldr	r3, [pc, #220]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20005394:	881b      	ldrh	r3, [r3, #0]
20005396:	0a1b      	lsrs	r3, r3, #8
20005398:	b299      	uxth	r1, r3
2000539a:	8abb      	ldrh	r3, [r7, #20]
2000539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000539e:	fb03 f202 	mul.w	r2, r3, r2
200053a2:	6a3b      	ldr	r3, [r7, #32]
200053a4:	4413      	add	r3, r2
200053a6:	005b      	lsls	r3, r3, #1
200053a8:	b2c9      	uxtb	r1, r1
200053aa:	4a32      	ldr	r2, [pc, #200]	; (20005474 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200053ac:	54d1      	strb	r1, [r2, r3]
    	DataBuffer[(i*width + j)*2+1] = lcdprop.TextColor & 0xFF;
200053ae:	4b30      	ldr	r3, [pc, #192]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200053b0:	8819      	ldrh	r1, [r3, #0]
200053b2:	8abb      	ldrh	r3, [r7, #20]
200053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200053b6:	fb03 f202 	mul.w	r2, r3, r2
200053ba:	6a3b      	ldr	r3, [r7, #32]
200053bc:	4413      	add	r3, r2
200053be:	005b      	lsls	r3, r3, #1
200053c0:	3301      	adds	r3, #1
200053c2:	b2c9      	uxtb	r1, r1
200053c4:	4a2b      	ldr	r2, [pc, #172]	; (20005474 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200053c6:	54d1      	strb	r1, [r2, r3]
200053c8:	e01a      	b.n	20005400 <TFTDisplay_ILI9341_DrawChar+0x174>
      }
      else
      {
    	DataBuffer[(i*width + j)*2] = lcdprop.BackColor >> 8;
200053ca:	4b29      	ldr	r3, [pc, #164]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200053cc:	885b      	ldrh	r3, [r3, #2]
200053ce:	0a1b      	lsrs	r3, r3, #8
200053d0:	b299      	uxth	r1, r3
200053d2:	8abb      	ldrh	r3, [r7, #20]
200053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200053d6:	fb03 f202 	mul.w	r2, r3, r2
200053da:	6a3b      	ldr	r3, [r7, #32]
200053dc:	4413      	add	r3, r2
200053de:	005b      	lsls	r3, r3, #1
200053e0:	b2c9      	uxtb	r1, r1
200053e2:	4a24      	ldr	r2, [pc, #144]	; (20005474 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200053e4:	54d1      	strb	r1, [r2, r3]
        DataBuffer[(i*width + j)*2+1] = lcdprop.BackColor & 0xFF;
200053e6:	4b22      	ldr	r3, [pc, #136]	; (20005470 <TFTDisplay_ILI9341_DrawChar+0x1e4>)
200053e8:	8859      	ldrh	r1, [r3, #2]
200053ea:	8abb      	ldrh	r3, [r7, #20]
200053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200053ee:	fb03 f202 	mul.w	r2, r3, r2
200053f2:	6a3b      	ldr	r3, [r7, #32]
200053f4:	4413      	add	r3, r2
200053f6:	005b      	lsls	r3, r3, #1
200053f8:	3301      	adds	r3, #1
200053fa:	b2c9      	uxtb	r1, r1
200053fc:	4a1d      	ldr	r2, [pc, #116]	; (20005474 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200053fe:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < width; j++)
20005400:	6a3b      	ldr	r3, [r7, #32]
20005402:	3301      	adds	r3, #1
20005404:	623b      	str	r3, [r7, #32]
20005406:	8abb      	ldrh	r3, [r7, #20]
20005408:	6a3a      	ldr	r2, [r7, #32]
2000540a:	429a      	cmp	r2, r3
2000540c:	d3b3      	bcc.n	20005376 <TFTDisplay_ILI9341_DrawChar+0xea>
      } 
    }
    y_cur++;
2000540e:	8bfb      	ldrh	r3, [r7, #30]
20005410:	3301      	adds	r3, #1
20005412:	83fb      	strh	r3, [r7, #30]
  for(i = 0; i < height; i++)
20005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20005416:	3301      	adds	r3, #1
20005418:	627b      	str	r3, [r7, #36]	; 0x24
2000541a:	8afb      	ldrh	r3, [r7, #22]
2000541c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000541e:	429a      	cmp	r2, r3
20005420:	f4ff af73 	bcc.w	2000530a <TFTDisplay_ILI9341_DrawChar+0x7e>
  }

  DmaSpiCnt = 1;
20005424:	4b14      	ldr	r3, [pc, #80]	; (20005478 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
20005426:	2201      	movs	r2, #1
20005428:	601a      	str	r2, [r3, #0]
  tftDisplay_ILI9341_SetAddrWindow(x, y, x+width-1, y+height-1);
2000542a:	88fa      	ldrh	r2, [r7, #6]
2000542c:	8abb      	ldrh	r3, [r7, #20]
2000542e:	4413      	add	r3, r2
20005430:	b29b      	uxth	r3, r3
20005432:	3b01      	subs	r3, #1
20005434:	b29c      	uxth	r4, r3
20005436:	88ba      	ldrh	r2, [r7, #4]
20005438:	8afb      	ldrh	r3, [r7, #22]
2000543a:	4413      	add	r3, r2
2000543c:	b29b      	uxth	r3, r3
2000543e:	3b01      	subs	r3, #1
20005440:	b29b      	uxth	r3, r3
20005442:	88b9      	ldrh	r1, [r7, #4]
20005444:	88f8      	ldrh	r0, [r7, #6]
20005446:	4622      	mov	r2, r4
20005448:	f000 f9dc 	bl	20005804 <tftDisplay_ILI9341_SetAddrWindow>
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], width * height * 2, DmaSpiCnt);
2000544c:	8abb      	ldrh	r3, [r7, #20]
2000544e:	8afa      	ldrh	r2, [r7, #22]
20005450:	fb02 f303 	mul.w	r3, r2, r3
20005454:	005b      	lsls	r3, r3, #1
20005456:	4619      	mov	r1, r3
20005458:	4b07      	ldr	r3, [pc, #28]	; (20005478 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
2000545a:	681b      	ldr	r3, [r3, #0]
2000545c:	b2db      	uxtb	r3, r3
2000545e:	461a      	mov	r2, r3
20005460:	4804      	ldr	r0, [pc, #16]	; (20005474 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20005462:	f000 f92f 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005466:	bf00      	nop
20005468:	372c      	adds	r7, #44	; 0x2c
2000546a:	46bd      	mov	sp, r7
2000546c:	bd90      	pop	{r4, r7, pc}
2000546e:	bf00      	nop
20005470:	2001f780 	.word	0x2001f780
20005474:	2000f780 	.word	0x2000f780
20005478:	2000ac3c 	.word	0x2000ac3c

2000547c <TFTDisplay_ILI9341_SetRotation>:
      (void)*str++;
  }
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_SetRotation(uint8_t RotationSelectVal)
{
2000547c:	b580      	push	{r7, lr}
2000547e:	b082      	sub	sp, #8
20005480:	af00      	add	r7, sp, #0
20005482:	4603      	mov	r3, r0
20005484:	71fb      	strb	r3, [r7, #7]
  tftDisplay_ILI9341_SendCommand(0x36);
20005486:	2036      	movs	r0, #54	; 0x36
20005488:	f000 f850 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
  switch(RotationSelectVal)
2000548c:	79fb      	ldrb	r3, [r7, #7]
2000548e:	2b03      	cmp	r3, #3
20005490:	d842      	bhi.n	20005518 <TFTDisplay_ILI9341_SetRotation+0x9c>
20005492:	a201      	add	r2, pc, #4	; (adr r2, 20005498 <TFTDisplay_ILI9341_SetRotation+0x1c>)
20005494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005498:	200054a9 	.word	0x200054a9
2000549c:	200054c5 	.word	0x200054c5
200054a0:	200054e1 	.word	0x200054e1
200054a4:	200054fd 	.word	0x200054fd
  {
    case 0:
      DataBuffer[0] = ORIENTATION_PORTRAIT;
200054a8:	4b1d      	ldr	r3, [pc, #116]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054aa:	2248      	movs	r2, #72	; 0x48
200054ac:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200054ae:	481c      	ldr	r0, [pc, #112]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054b0:	f000 f8bc 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
200054b4:	4b1b      	ldr	r3, [pc, #108]	; (20005524 <TFTDisplay_ILI9341_SetRotation+0xa8>)
200054b6:	22f0      	movs	r2, #240	; 0xf0
200054b8:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
200054ba:	4b1b      	ldr	r3, [pc, #108]	; (20005528 <TFTDisplay_ILI9341_SetRotation+0xac>)
200054bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
200054c0:	801a      	strh	r2, [r3, #0]
      break;
200054c2:	e029      	b.n	20005518 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 1:
      DataBuffer[0] = ORIENTATION_LANDSCAPE;
200054c4:	4b16      	ldr	r3, [pc, #88]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054c6:	2228      	movs	r2, #40	; 0x28
200054c8:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200054ca:	4815      	ldr	r0, [pc, #84]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054cc:	f000 f8ae 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
200054d0:	4b14      	ldr	r3, [pc, #80]	; (20005524 <TFTDisplay_ILI9341_SetRotation+0xa8>)
200054d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
200054d6:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
200054d8:	4b13      	ldr	r3, [pc, #76]	; (20005528 <TFTDisplay_ILI9341_SetRotation+0xac>)
200054da:	22f0      	movs	r2, #240	; 0xf0
200054dc:	801a      	strh	r2, [r3, #0]
      break;
200054de:	e01b      	b.n	20005518 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 2:
      DataBuffer[0] = ORIENTATION_PORTRAIT_MIRROR;
200054e0:	4b0f      	ldr	r3, [pc, #60]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054e2:	2288      	movs	r2, #136	; 0x88
200054e4:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200054e6:	480e      	ldr	r0, [pc, #56]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054e8:	f000 f8a0 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
200054ec:	4b0d      	ldr	r3, [pc, #52]	; (20005524 <TFTDisplay_ILI9341_SetRotation+0xa8>)
200054ee:	22f0      	movs	r2, #240	; 0xf0
200054f0:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
200054f2:	4b0d      	ldr	r3, [pc, #52]	; (20005528 <TFTDisplay_ILI9341_SetRotation+0xac>)
200054f4:	f44f 72a0 	mov.w	r2, #320	; 0x140
200054f8:	801a      	strh	r2, [r3, #0]
      break;
200054fa:	e00d      	b.n	20005518 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 3:
      DataBuffer[0] = ORIENTATION_LANDSCAPE_MIRROR;
200054fc:	4b08      	ldr	r3, [pc, #32]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
200054fe:	22e8      	movs	r2, #232	; 0xe8
20005500:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005502:	4807      	ldr	r0, [pc, #28]	; (20005520 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20005504:	f000 f892 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20005508:	4b06      	ldr	r3, [pc, #24]	; (20005524 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000550a:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000550e:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
20005510:	4b05      	ldr	r3, [pc, #20]	; (20005528 <TFTDisplay_ILI9341_SetRotation+0xac>)
20005512:	22f0      	movs	r2, #240	; 0xf0
20005514:	801a      	strh	r2, [r3, #0]
      break;
20005516:	bf00      	nop
  }
}
20005518:	bf00      	nop
2000551a:	3708      	adds	r7, #8
2000551c:	46bd      	mov	sp, r7
2000551e:	bd80      	pop	{r7, pc}
20005520:	2000f780 	.word	0x2000f780
20005524:	2000f77c 	.word	0x2000f77c
20005528:	2000f77e 	.word	0x2000f77e

2000552c <tftDisplay_ILI9341_SendCommand>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void tftDisplay_ILI9341_SendCommand(uint8_t command)
{
2000552c:	b5b0      	push	{r4, r5, r7, lr}
2000552e:	b084      	sub	sp, #16
20005530:	af02      	add	r7, sp, #8
20005532:	4603      	mov	r3, r0
20005534:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
20005536:	2104      	movs	r1, #4
20005538:	481d      	ldr	r0, [pc, #116]	; (200055b0 <tftDisplay_ILI9341_SendCommand+0x84>)
2000553a:	f7ff fab9 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_COMMAND();
2000553e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20005542:	481c      	ldr	r0, [pc, #112]	; (200055b4 <tftDisplay_ILI9341_SendCommand+0x88>)
20005544:	f7ff fab4 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	DmaSpiCnt = 1;
20005548:	4b1b      	ldr	r3, [pc, #108]	; (200055b8 <tftDisplay_ILI9341_SendCommand+0x8c>)
2000554a:	2201      	movs	r2, #1
2000554c:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
2000554e:	2104      	movs	r1, #4
20005550:	481a      	ldr	r0, [pc, #104]	; (200055bc <tftDisplay_ILI9341_SendCommand+0x90>)
20005552:	f7ff fb2f 	bl	20004bb4 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
20005556:	2201      	movs	r2, #1
20005558:	2104      	movs	r1, #4
2000555a:	4818      	ldr	r0, [pc, #96]	; (200055bc <tftDisplay_ILI9341_SendCommand+0x90>)
2000555c:	f7ff fb62 	bl	20004c24 <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4, (uint32_t)&command,
20005560:	1dfc      	adds	r4, r7, #7
20005562:	4817      	ldr	r0, [pc, #92]	; (200055c0 <tftDisplay_ILI9341_SendCommand+0x94>)
20005564:	f7ff fad9 	bl	20004b1a <LL_SPI_DMA_GetRegAddr>
20005568:	4605      	mov	r5, r0
2000556a:	2104      	movs	r1, #4
2000556c:	4813      	ldr	r0, [pc, #76]	; (200055bc <tftDisplay_ILI9341_SendCommand+0x90>)
2000556e:	f7ff fb41 	bl	20004bf4 <LL_DMA_GetDataTransferDirection>
20005572:	4603      	mov	r3, r0
20005574:	9300      	str	r3, [sp, #0]
20005576:	462b      	mov	r3, r5
20005578:	4622      	mov	r2, r4
2000557a:	2104      	movs	r1, #4
2000557c:	480f      	ldr	r0, [pc, #60]	; (200055bc <tftDisplay_ILI9341_SendCommand+0x90>)
2000557e:	f7ff fb75 	bl	20004c6c <LL_DMA_ConfigAddresses>
			LL_SPI_DMA_GetRegAddr(SPI5), LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
20005582:	2104      	movs	r1, #4
20005584:	480d      	ldr	r0, [pc, #52]	; (200055bc <tftDisplay_ILI9341_SendCommand+0x90>)
20005586:	f7ff faf5 	bl	20004b74 <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
2000558a:	bf00      	nop
2000558c:	4b0d      	ldr	r3, [pc, #52]	; (200055c4 <tftDisplay_ILI9341_SendCommand+0x98>)
2000558e:	681b      	ldr	r3, [r3, #0]
20005590:	f003 0301 	and.w	r3, r3, #1
20005594:	2b00      	cmp	r3, #0
20005596:	d1f9      	bne.n	2000558c <tftDisplay_ILI9341_SendCommand+0x60>
20005598:	4b08      	ldr	r3, [pc, #32]	; (200055bc <tftDisplay_ILI9341_SendCommand+0x90>)
2000559a:	685b      	ldr	r3, [r3, #4]
2000559c:	f003 0320 	and.w	r3, r3, #32
200055a0:	2b00      	cmp	r3, #0
200055a2:	d1f3      	bne.n	2000558c <tftDisplay_ILI9341_SendCommand+0x60>
}
200055a4:	bf00      	nop
200055a6:	bf00      	nop
200055a8:	3708      	adds	r7, #8
200055aa:	46bd      	mov	sp, r7
200055ac:	bdb0      	pop	{r4, r5, r7, pc}
200055ae:	bf00      	nop
200055b0:	40020800 	.word	0x40020800
200055b4:	40020c00 	.word	0x40020c00
200055b8:	2000ac3c 	.word	0x2000ac3c
200055bc:	40026400 	.word	0x40026400
200055c0:	40015000 	.word	0x40015000
200055c4:	40026470 	.word	0x40026470

200055c8 <tftDisplay_ILI9341_SendData>:
static void tftDisplay_ILI9341_SendData(uint8_t data)
{
200055c8:	b580      	push	{r7, lr}
200055ca:	b082      	sub	sp, #8
200055cc:	af00      	add	r7, sp, #0
200055ce:	4603      	mov	r3, r0
200055d0:	71fb      	strb	r3, [r7, #7]
//	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
//
//	  while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
//	  //CS_DESELECT();

	CS_ACTIVE();
200055d2:	2104      	movs	r1, #4
200055d4:	4812      	ldr	r0, [pc, #72]	; (20005620 <tftDisplay_ILI9341_SendData+0x58>)
200055d6:	f7ff fa6b 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200055da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200055de:	4811      	ldr	r0, [pc, #68]	; (20005624 <tftDisplay_ILI9341_SendData+0x5c>)
200055e0:	f7ff fa58 	bl	20004a94 <LL_GPIO_SetOutputPin>
    while(!LL_SPI_IsActiveFlag_TXE(SPI5)) {}
200055e4:	bf00      	nop
200055e6:	4810      	ldr	r0, [pc, #64]	; (20005628 <tftDisplay_ILI9341_SendData+0x60>)
200055e8:	f7ff fa84 	bl	20004af4 <LL_SPI_IsActiveFlag_TXE>
200055ec:	4603      	mov	r3, r0
200055ee:	2b00      	cmp	r3, #0
200055f0:	d0f9      	beq.n	200055e6 <tftDisplay_ILI9341_SendData+0x1e>
	LL_SPI_TransmitData8 (SPI5, data);
200055f2:	79fb      	ldrb	r3, [r7, #7]
200055f4:	4619      	mov	r1, r3
200055f6:	480c      	ldr	r0, [pc, #48]	; (20005628 <tftDisplay_ILI9341_SendData+0x60>)
200055f8:	f7ff faa9 	bl	20004b4e <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI5)) {}
200055fc:	bf00      	nop
200055fe:	480a      	ldr	r0, [pc, #40]	; (20005628 <tftDisplay_ILI9341_SendData+0x60>)
20005600:	f7ff fa65 	bl	20004ace <LL_SPI_IsActiveFlag_RXNE>
20005604:	4603      	mov	r3, r0
20005606:	2b00      	cmp	r3, #0
20005608:	d0f9      	beq.n	200055fe <tftDisplay_ILI9341_SendData+0x36>
	LL_SPI_ReceiveData8(SPI5);
2000560a:	4807      	ldr	r0, [pc, #28]	; (20005628 <tftDisplay_ILI9341_SendData+0x60>)
2000560c:	f7ff fa91 	bl	20004b32 <LL_SPI_ReceiveData8>
	CS_DESELECT();
20005610:	2104      	movs	r1, #4
20005612:	4803      	ldr	r0, [pc, #12]	; (20005620 <tftDisplay_ILI9341_SendData+0x58>)
20005614:	f7ff fa3e 	bl	20004a94 <LL_GPIO_SetOutputPin>
}
20005618:	bf00      	nop
2000561a:	3708      	adds	r7, #8
2000561c:	46bd      	mov	sp, r7
2000561e:	bd80      	pop	{r7, pc}
20005620:	40020800 	.word	0x40020800
20005624:	40020c00 	.word	0x40020c00
20005628:	40015000 	.word	0x40015000

2000562c <tftDisplay_ILI9341_SendSingleData>:

static void tftDisplay_ILI9341_SendSingleData(uint32_t* BufferPtr)
{
2000562c:	b5b0      	push	{r4, r5, r7, lr}
2000562e:	b084      	sub	sp, #16
20005630:	af02      	add	r7, sp, #8
20005632:	6078      	str	r0, [r7, #4]
	CS_ACTIVE();
20005634:	2104      	movs	r1, #4
20005636:	481d      	ldr	r0, [pc, #116]	; (200056ac <tftDisplay_ILI9341_SendSingleData+0x80>)
20005638:	f7ff fa3a 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
2000563c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20005640:	481b      	ldr	r0, [pc, #108]	; (200056b0 <tftDisplay_ILI9341_SendSingleData+0x84>)
20005642:	f7ff fa27 	bl	20004a94 <LL_GPIO_SetOutputPin>
	DmaSpiCnt = 1;
20005646:	4b1b      	ldr	r3, [pc, #108]	; (200056b4 <tftDisplay_ILI9341_SendSingleData+0x88>)
20005648:	2201      	movs	r2, #1
2000564a:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
2000564c:	2104      	movs	r1, #4
2000564e:	481a      	ldr	r0, [pc, #104]	; (200056b8 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20005650:	f7ff fab0 	bl	20004bb4 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
20005654:	2201      	movs	r2, #1
20005656:	2104      	movs	r1, #4
20005658:	4817      	ldr	r0, [pc, #92]	; (200056b8 <tftDisplay_ILI9341_SendSingleData+0x8c>)
2000565a:	f7ff fae3 	bl	20004c24 <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
2000565e:	687c      	ldr	r4, [r7, #4]
20005660:	4816      	ldr	r0, [pc, #88]	; (200056bc <tftDisplay_ILI9341_SendSingleData+0x90>)
20005662:	f7ff fa5a 	bl	20004b1a <LL_SPI_DMA_GetRegAddr>
20005666:	4605      	mov	r5, r0
20005668:	2104      	movs	r1, #4
2000566a:	4813      	ldr	r0, [pc, #76]	; (200056b8 <tftDisplay_ILI9341_SendSingleData+0x8c>)
2000566c:	f7ff fac2 	bl	20004bf4 <LL_DMA_GetDataTransferDirection>
20005670:	4603      	mov	r3, r0
20005672:	9300      	str	r3, [sp, #0]
20005674:	462b      	mov	r3, r5
20005676:	4622      	mov	r2, r4
20005678:	2104      	movs	r1, #4
2000567a:	480f      	ldr	r0, [pc, #60]	; (200056b8 <tftDisplay_ILI9341_SendSingleData+0x8c>)
2000567c:	f7ff faf6 	bl	20004c6c <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
20005680:	2104      	movs	r1, #4
20005682:	480d      	ldr	r0, [pc, #52]	; (200056b8 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20005684:	f7ff fa76 	bl	20004b74 <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20005688:	bf00      	nop
2000568a:	4b0d      	ldr	r3, [pc, #52]	; (200056c0 <tftDisplay_ILI9341_SendSingleData+0x94>)
2000568c:	681b      	ldr	r3, [r3, #0]
2000568e:	f003 0301 	and.w	r3, r3, #1
20005692:	2b00      	cmp	r3, #0
20005694:	d1f9      	bne.n	2000568a <tftDisplay_ILI9341_SendSingleData+0x5e>
20005696:	4b08      	ldr	r3, [pc, #32]	; (200056b8 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20005698:	685b      	ldr	r3, [r3, #4]
2000569a:	f003 0320 	and.w	r3, r3, #32
2000569e:	2b00      	cmp	r3, #0
200056a0:	d1f3      	bne.n	2000568a <tftDisplay_ILI9341_SendSingleData+0x5e>
}
200056a2:	bf00      	nop
200056a4:	bf00      	nop
200056a6:	3708      	adds	r7, #8
200056a8:	46bd      	mov	sp, r7
200056aa:	bdb0      	pop	{r4, r5, r7, pc}
200056ac:	40020800 	.word	0x40020800
200056b0:	40020c00 	.word	0x40020c00
200056b4:	2000ac3c 	.word	0x2000ac3c
200056b8:	40026400 	.word	0x40026400
200056bc:	40015000 	.word	0x40015000
200056c0:	40026470 	.word	0x40026470

200056c4 <tftDisplay_ILI9341_WriteMultipleData>:

static void tftDisplay_ILI9341_WriteMultipleData(uint32_t* BufferPtr, uint32_t BufferSize, uint8_t DmaCount)
{
200056c4:	b5b0      	push	{r4, r5, r7, lr}
200056c6:	b086      	sub	sp, #24
200056c8:	af02      	add	r7, sp, #8
200056ca:	60f8      	str	r0, [r7, #12]
200056cc:	60b9      	str	r1, [r7, #8]
200056ce:	4613      	mov	r3, r2
200056d0:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
200056d2:	2104      	movs	r1, #4
200056d4:	481d      	ldr	r0, [pc, #116]	; (2000574c <tftDisplay_ILI9341_WriteMultipleData+0x88>)
200056d6:	f7ff f9eb 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200056da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200056de:	481c      	ldr	r0, [pc, #112]	; (20005750 <tftDisplay_ILI9341_WriteMultipleData+0x8c>)
200056e0:	f7ff f9d8 	bl	20004a94 <LL_GPIO_SetOutputPin>
	DmaSpiCnt = DmaCount;
200056e4:	79fb      	ldrb	r3, [r7, #7]
200056e6:	4a1b      	ldr	r2, [pc, #108]	; (20005754 <tftDisplay_ILI9341_WriteMultipleData+0x90>)
200056e8:	6013      	str	r3, [r2, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200056ea:	2104      	movs	r1, #4
200056ec:	481a      	ldr	r0, [pc, #104]	; (20005758 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200056ee:	f7ff fa61 	bl	20004bb4 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, BufferSize);
200056f2:	68ba      	ldr	r2, [r7, #8]
200056f4:	2104      	movs	r1, #4
200056f6:	4818      	ldr	r0, [pc, #96]	; (20005758 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200056f8:	f7ff fa94 	bl	20004c24 <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
200056fc:	68fc      	ldr	r4, [r7, #12]
200056fe:	4817      	ldr	r0, [pc, #92]	; (2000575c <tftDisplay_ILI9341_WriteMultipleData+0x98>)
20005700:	f7ff fa0b 	bl	20004b1a <LL_SPI_DMA_GetRegAddr>
20005704:	4605      	mov	r5, r0
20005706:	2104      	movs	r1, #4
20005708:	4813      	ldr	r0, [pc, #76]	; (20005758 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000570a:	f7ff fa73 	bl	20004bf4 <LL_DMA_GetDataTransferDirection>
2000570e:	4603      	mov	r3, r0
20005710:	9300      	str	r3, [sp, #0]
20005712:	462b      	mov	r3, r5
20005714:	4622      	mov	r2, r4
20005716:	2104      	movs	r1, #4
20005718:	480f      	ldr	r0, [pc, #60]	; (20005758 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000571a:	f7ff faa7 	bl	20004c6c <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
2000571e:	2104      	movs	r1, #4
20005720:	480d      	ldr	r0, [pc, #52]	; (20005758 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20005722:	f7ff fa27 	bl	20004b74 <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20005726:	bf00      	nop
20005728:	4b0d      	ldr	r3, [pc, #52]	; (20005760 <tftDisplay_ILI9341_WriteMultipleData+0x9c>)
2000572a:	681b      	ldr	r3, [r3, #0]
2000572c:	f003 0301 	and.w	r3, r3, #1
20005730:	2b00      	cmp	r3, #0
20005732:	d1f9      	bne.n	20005728 <tftDisplay_ILI9341_WriteMultipleData+0x64>
20005734:	4b08      	ldr	r3, [pc, #32]	; (20005758 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20005736:	685b      	ldr	r3, [r3, #4]
20005738:	f003 0320 	and.w	r3, r3, #32
2000573c:	2b00      	cmp	r3, #0
2000573e:	d1f3      	bne.n	20005728 <tftDisplay_ILI9341_WriteMultipleData+0x64>
}
20005740:	bf00      	nop
20005742:	bf00      	nop
20005744:	3710      	adds	r7, #16
20005746:	46bd      	mov	sp, r7
20005748:	bdb0      	pop	{r4, r5, r7, pc}
2000574a:	bf00      	nop
2000574c:	40020800 	.word	0x40020800
20005750:	40020c00 	.word	0x40020c00
20005754:	2000ac3c 	.word	0x2000ac3c
20005758:	40026400 	.word	0x40026400
2000575c:	40015000 	.word	0x40015000
20005760:	40026470 	.word	0x40026470

20005764 <tftDisplay_ILI9341_Reset>:
static void tftDisplay_ILI9341_Reset(void)
{
20005764:	b580      	push	{r7, lr}
20005766:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
20005768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2000576c:	4806      	ldr	r0, [pc, #24]	; (20005788 <tftDisplay_ILI9341_Reset+0x24>)
2000576e:	f7ff f99f 	bl	20004ab0 <LL_GPIO_ResetOutputPin>
	LL_mDelay(5);
20005772:	2005      	movs	r0, #5
20005774:	f7fb fb42 	bl	20000dfc <LL_mDelay>
	RESET_IDLE();
20005778:	f44f 5180 	mov.w	r1, #4096	; 0x1000
2000577c:	4802      	ldr	r0, [pc, #8]	; (20005788 <tftDisplay_ILI9341_Reset+0x24>)
2000577e:	f7ff f989 	bl	20004a94 <LL_GPIO_SetOutputPin>
}
20005782:	bf00      	nop
20005784:	bd80      	pop	{r7, pc}
20005786:	bf00      	nop
20005788:	40020c00 	.word	0x40020c00

2000578c <tftDisplay_ILI9341_FontsInitialization>:
static void tftDisplay_ILI9341_FontsInitialization(void)
{
2000578c:	b480      	push	{r7}
2000578e:	af00      	add	r7, sp, #0
  Font8.Height = 8;
20005790:	4b16      	ldr	r3, [pc, #88]	; (200057ec <tftDisplay_ILI9341_FontsInitialization+0x60>)
20005792:	2208      	movs	r2, #8
20005794:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
20005796:	4b15      	ldr	r3, [pc, #84]	; (200057ec <tftDisplay_ILI9341_FontsInitialization+0x60>)
20005798:	2205      	movs	r2, #5
2000579a:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
2000579c:	4b14      	ldr	r3, [pc, #80]	; (200057f0 <tftDisplay_ILI9341_FontsInitialization+0x64>)
2000579e:	220c      	movs	r2, #12
200057a0:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
200057a2:	4b13      	ldr	r3, [pc, #76]	; (200057f0 <tftDisplay_ILI9341_FontsInitialization+0x64>)
200057a4:	2207      	movs	r2, #7
200057a6:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
200057a8:	4b12      	ldr	r3, [pc, #72]	; (200057f4 <tftDisplay_ILI9341_FontsInitialization+0x68>)
200057aa:	2210      	movs	r2, #16
200057ac:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
200057ae:	4b11      	ldr	r3, [pc, #68]	; (200057f4 <tftDisplay_ILI9341_FontsInitialization+0x68>)
200057b0:	220b      	movs	r2, #11
200057b2:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
200057b4:	4b10      	ldr	r3, [pc, #64]	; (200057f8 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
200057b6:	2214      	movs	r2, #20
200057b8:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
200057ba:	4b0f      	ldr	r3, [pc, #60]	; (200057f8 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
200057bc:	220e      	movs	r2, #14
200057be:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
200057c0:	4b0e      	ldr	r3, [pc, #56]	; (200057fc <tftDisplay_ILI9341_FontsInitialization+0x70>)
200057c2:	2218      	movs	r2, #24
200057c4:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
200057c6:	4b0d      	ldr	r3, [pc, #52]	; (200057fc <tftDisplay_ILI9341_FontsInitialization+0x70>)
200057c8:	2211      	movs	r2, #17
200057ca:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT_COLOR_ILI9341_BLACK;
200057cc:	4b0c      	ldr	r3, [pc, #48]	; (20005800 <tftDisplay_ILI9341_FontsInitialization+0x74>)
200057ce:	2200      	movs	r2, #0
200057d0:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT_COLOR_ILI9341_GREEN;
200057d2:	4b0b      	ldr	r3, [pc, #44]	; (20005800 <tftDisplay_ILI9341_FontsInitialization+0x74>)
200057d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
200057d8:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
200057da:	4b09      	ldr	r3, [pc, #36]	; (20005800 <tftDisplay_ILI9341_FontsInitialization+0x74>)
200057dc:	4a05      	ldr	r2, [pc, #20]	; (200057f4 <tftDisplay_ILI9341_FontsInitialization+0x68>)
200057de:	605a      	str	r2, [r3, #4]
}
200057e0:	bf00      	nop
200057e2:	46bd      	mov	sp, r7
200057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200057e8:	4770      	bx	lr
200057ea:	bf00      	nop
200057ec:	2000ac68 	.word	0x2000ac68
200057f0:	2000ac60 	.word	0x2000ac60
200057f4:	2000ac58 	.word	0x2000ac58
200057f8:	2000ac50 	.word	0x2000ac50
200057fc:	2000ac48 	.word	0x2000ac48
20005800:	2001f780 	.word	0x2001f780

20005804 <tftDisplay_ILI9341_SetAddrWindow>:
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
20005804:	b590      	push	{r4, r7, lr}
20005806:	b083      	sub	sp, #12
20005808:	af00      	add	r7, sp, #0
2000580a:	4604      	mov	r4, r0
2000580c:	4608      	mov	r0, r1
2000580e:	4611      	mov	r1, r2
20005810:	461a      	mov	r2, r3
20005812:	4623      	mov	r3, r4
20005814:	80fb      	strh	r3, [r7, #6]
20005816:	4603      	mov	r3, r0
20005818:	80bb      	strh	r3, [r7, #4]
2000581a:	460b      	mov	r3, r1
2000581c:	807b      	strh	r3, [r7, #2]
2000581e:	4613      	mov	r3, r2
20005820:	803b      	strh	r3, [r7, #0]
  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_COLUMN_ADDR);
20005822:	202a      	movs	r0, #42	; 0x2a
20005824:	f7ff fe82 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (x0 >> 8) & 0xFF;
20005828:	88fb      	ldrh	r3, [r7, #6]
2000582a:	0a1b      	lsrs	r3, r3, #8
2000582c:	b29b      	uxth	r3, r3
2000582e:	b2da      	uxtb	r2, r3
20005830:	4b1b      	ldr	r3, [pc, #108]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20005832:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = x0 & 0xFF;
20005834:	88fb      	ldrh	r3, [r7, #6]
20005836:	b2da      	uxtb	r2, r3
20005838:	4b19      	ldr	r3, [pc, #100]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000583a:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (x1 >> 8) & 0xFF;
2000583c:	887b      	ldrh	r3, [r7, #2]
2000583e:	0a1b      	lsrs	r3, r3, #8
20005840:	b29b      	uxth	r3, r3
20005842:	b2da      	uxtb	r2, r3
20005844:	4b16      	ldr	r3, [pc, #88]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20005846:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = x1 & 0xFF;
20005848:	887b      	ldrh	r3, [r7, #2]
2000584a:	b2da      	uxtb	r2, r3
2000584c:	4b14      	ldr	r3, [pc, #80]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000584e:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20005850:	2201      	movs	r2, #1
20005852:	2104      	movs	r1, #4
20005854:	4812      	ldr	r0, [pc, #72]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20005856:	f7ff ff35 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PAGE_ADDR);
2000585a:	202b      	movs	r0, #43	; 0x2b
2000585c:	f7ff fe66 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (y0 >> 8) & 0xFF;
20005860:	88bb      	ldrh	r3, [r7, #4]
20005862:	0a1b      	lsrs	r3, r3, #8
20005864:	b29b      	uxth	r3, r3
20005866:	b2da      	uxtb	r2, r3
20005868:	4b0d      	ldr	r3, [pc, #52]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000586a:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = y0 & 0xFF;
2000586c:	88bb      	ldrh	r3, [r7, #4]
2000586e:	b2da      	uxtb	r2, r3
20005870:	4b0b      	ldr	r3, [pc, #44]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20005872:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (y1 >> 8) & 0xFF;
20005874:	883b      	ldrh	r3, [r7, #0]
20005876:	0a1b      	lsrs	r3, r3, #8
20005878:	b29b      	uxth	r3, r3
2000587a:	b2da      	uxtb	r2, r3
2000587c:	4b08      	ldr	r3, [pc, #32]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000587e:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = y1 & 0xFF;
20005880:	883b      	ldrh	r3, [r7, #0]
20005882:	b2da      	uxtb	r2, r3
20005884:	4b06      	ldr	r3, [pc, #24]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20005886:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20005888:	2201      	movs	r2, #1
2000588a:	2104      	movs	r1, #4
2000588c:	4804      	ldr	r0, [pc, #16]	; (200058a0 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000588e:	f7ff ff19 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
20005892:	202c      	movs	r0, #44	; 0x2c
20005894:	f7ff fe4a 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
}
20005898:	bf00      	nop
2000589a:	370c      	adds	r7, #12
2000589c:	46bd      	mov	sp, r7
2000589e:	bd90      	pop	{r4, r7, pc}
200058a0:	2000f780 	.word	0x2000f780

200058a4 <tftDisplay_ILI9341_Init_PowerControl_A>:
//------------------------------------------------------------------
/* Initialization static functions */
static void tftDisplay_ILI9341_Init_PowerControl_A()
{
200058a4:	b580      	push	{r7, lr}
200058a6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x39;
200058a8:	4b0c      	ldr	r3, [pc, #48]	; (200058dc <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200058aa:	2239      	movs	r2, #57	; 0x39
200058ac:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x2C;
200058ae:	4b0b      	ldr	r3, [pc, #44]	; (200058dc <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200058b0:	222c      	movs	r2, #44	; 0x2c
200058b2:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x00;
200058b4:	4b09      	ldr	r3, [pc, #36]	; (200058dc <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200058b6:	2200      	movs	r2, #0
200058b8:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x34;
200058ba:	4b08      	ldr	r3, [pc, #32]	; (200058dc <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200058bc:	2234      	movs	r2, #52	; 0x34
200058be:	70da      	strb	r2, [r3, #3]
	DataBuffer[4] = 0x02;
200058c0:	4b06      	ldr	r3, [pc, #24]	; (200058dc <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200058c2:	2202      	movs	r2, #2
200058c4:	711a      	strb	r2, [r3, #4]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERA);
200058c6:	20cb      	movs	r0, #203	; 0xcb
200058c8:	f7ff fe30 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 5, 1);
200058cc:	2201      	movs	r2, #1
200058ce:	2105      	movs	r1, #5
200058d0:	4802      	ldr	r0, [pc, #8]	; (200058dc <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200058d2:	f7ff fef7 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
200058d6:	bf00      	nop
200058d8:	bd80      	pop	{r7, pc}
200058da:	bf00      	nop
200058dc:	2000f780 	.word	0x2000f780

200058e0 <tftDisplay_ILI9341_Init_PowerControl_B>:

static void tftDisplay_ILI9341_Init_PowerControl_B()
{
200058e0:	b580      	push	{r7, lr}
200058e2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
200058e4:	4b09      	ldr	r3, [pc, #36]	; (2000590c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
200058e6:	2200      	movs	r2, #0
200058e8:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0xC1;
200058ea:	4b08      	ldr	r3, [pc, #32]	; (2000590c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
200058ec:	22c1      	movs	r2, #193	; 0xc1
200058ee:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x30;
200058f0:	4b06      	ldr	r3, [pc, #24]	; (2000590c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
200058f2:	2230      	movs	r2, #48	; 0x30
200058f4:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERB);
200058f6:	20cf      	movs	r0, #207	; 0xcf
200058f8:	f7ff fe18 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
200058fc:	2201      	movs	r2, #1
200058fe:	2103      	movs	r1, #3
20005900:	4802      	ldr	r0, [pc, #8]	; (2000590c <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20005902:	f7ff fedf 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005906:	bf00      	nop
20005908:	bd80      	pop	{r7, pc}
2000590a:	bf00      	nop
2000590c:	2000f780 	.word	0x2000f780

20005910 <tftDisplay_ILI9341_Init_DriverTimingControl_A>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_A()
{
20005910:	b580      	push	{r7, lr}
20005912:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x85;
20005914:	4b09      	ldr	r3, [pc, #36]	; (2000593c <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20005916:	2285      	movs	r2, #133	; 0x85
20005918:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
2000591a:	4b08      	ldr	r3, [pc, #32]	; (2000593c <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
2000591c:	2200      	movs	r2, #0
2000591e:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x78;
20005920:	4b06      	ldr	r3, [pc, #24]	; (2000593c <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20005922:	2278      	movs	r2, #120	; 0x78
20005924:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20005926:	20ea      	movs	r0, #234	; 0xea
20005928:	f7ff fe00 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
2000592c:	2201      	movs	r2, #1
2000592e:	2103      	movs	r1, #3
20005930:	4802      	ldr	r0, [pc, #8]	; (2000593c <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20005932:	f7ff fec7 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005936:	bf00      	nop
20005938:	bd80      	pop	{r7, pc}
2000593a:	bf00      	nop
2000593c:	2000f780 	.word	0x2000f780

20005940 <tftDisplay_ILI9341_Init_DriverTimingControl_B>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_B()
{
20005940:	b580      	push	{r7, lr}
20005942:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20005944:	4b07      	ldr	r3, [pc, #28]	; (20005964 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20005946:	2200      	movs	r2, #0
20005948:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
2000594a:	4b06      	ldr	r3, [pc, #24]	; (20005964 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
2000594c:	2200      	movs	r2, #0
2000594e:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20005950:	20ea      	movs	r0, #234	; 0xea
20005952:	f7ff fdeb 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20005956:	2201      	movs	r2, #1
20005958:	2102      	movs	r1, #2
2000595a:	4802      	ldr	r0, [pc, #8]	; (20005964 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
2000595c:	f7ff feb2 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005960:	bf00      	nop
20005962:	bd80      	pop	{r7, pc}
20005964:	2000f780 	.word	0x2000f780

20005968 <tftDisplay_ILI9341_Init_PowerSequenceControl>:

static void tftDisplay_ILI9341_Init_PowerSequenceControl()
{
20005968:	b580      	push	{r7, lr}
2000596a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x64;
2000596c:	4b0a      	ldr	r3, [pc, #40]	; (20005998 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
2000596e:	2264      	movs	r2, #100	; 0x64
20005970:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x03;
20005972:	4b09      	ldr	r3, [pc, #36]	; (20005998 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20005974:	2203      	movs	r2, #3
20005976:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x12;
20005978:	4b07      	ldr	r3, [pc, #28]	; (20005998 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
2000597a:	2212      	movs	r2, #18
2000597c:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x81;
2000597e:	4b06      	ldr	r3, [pc, #24]	; (20005998 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20005980:	2281      	movs	r2, #129	; 0x81
20005982:	70da      	strb	r2, [r3, #3]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER_SEQ);
20005984:	20ed      	movs	r0, #237	; 0xed
20005986:	f7ff fdd1 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
2000598a:	2201      	movs	r2, #1
2000598c:	2104      	movs	r1, #4
2000598e:	4802      	ldr	r0, [pc, #8]	; (20005998 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20005990:	f7ff fe98 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005994:	bf00      	nop
20005996:	bd80      	pop	{r7, pc}
20005998:	2000f780 	.word	0x2000f780

2000599c <tftDisplay_ILI9341_Init_PumpRatioControl>:

static void tftDisplay_ILI9341_Init_PumpRatioControl()
{
2000599c:	b580      	push	{r7, lr}
2000599e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x20;
200059a0:	4b05      	ldr	r3, [pc, #20]	; (200059b8 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
200059a2:	2220      	movs	r2, #32
200059a4:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PRC);
200059a6:	20f7      	movs	r0, #247	; 0xf7
200059a8:	f7ff fdc0 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200059ac:	4802      	ldr	r0, [pc, #8]	; (200059b8 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
200059ae:	f7ff fe3d 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
200059b2:	bf00      	nop
200059b4:	bd80      	pop	{r7, pc}
200059b6:	bf00      	nop
200059b8:	2000f780 	.word	0x2000f780

200059bc <tftDisplay_ILI9341_Init_PowerControlVRH>:

static void tftDisplay_ILI9341_Init_PowerControlVRH()
{
200059bc:	b580      	push	{r7, lr}
200059be:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
200059c0:	4b05      	ldr	r3, [pc, #20]	; (200059d8 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
200059c2:	2210      	movs	r2, #16
200059c4:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER1);
200059c6:	20c0      	movs	r0, #192	; 0xc0
200059c8:	f7ff fdb0 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200059cc:	4802      	ldr	r0, [pc, #8]	; (200059d8 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
200059ce:	f7ff fe2d 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
200059d2:	bf00      	nop
200059d4:	bd80      	pop	{r7, pc}
200059d6:	bf00      	nop
200059d8:	2000f780 	.word	0x2000f780

200059dc <tftDisplay_ILI9341_Init_PowerControlSAP>:

static void tftDisplay_ILI9341_Init_PowerControlSAP()
{
200059dc:	b580      	push	{r7, lr}
200059de:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
200059e0:	4b05      	ldr	r3, [pc, #20]	; (200059f8 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
200059e2:	2210      	movs	r2, #16
200059e4:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER2);
200059e6:	20c1      	movs	r0, #193	; 0xc1
200059e8:	f7ff fda0 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200059ec:	4802      	ldr	r0, [pc, #8]	; (200059f8 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
200059ee:	f7ff fe1d 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
200059f2:	bf00      	nop
200059f4:	bd80      	pop	{r7, pc}
200059f6:	bf00      	nop
200059f8:	2000f780 	.word	0x2000f780

200059fc <tftDisplay_ILI9341_Init_VCOMControl_1>:

static void tftDisplay_ILI9341_Init_VCOMControl_1()
{
200059fc:	b580      	push	{r7, lr}
200059fe:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x3E;
20005a00:	4b07      	ldr	r3, [pc, #28]	; (20005a20 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20005a02:	223e      	movs	r2, #62	; 0x3e
20005a04:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x28;
20005a06:	4b06      	ldr	r3, [pc, #24]	; (20005a20 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20005a08:	2228      	movs	r2, #40	; 0x28
20005a0a:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM1);
20005a0c:	20c5      	movs	r0, #197	; 0xc5
20005a0e:	f7ff fd8d 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20005a12:	2201      	movs	r2, #1
20005a14:	2102      	movs	r1, #2
20005a16:	4802      	ldr	r0, [pc, #8]	; (20005a20 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20005a18:	f7ff fe54 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005a1c:	bf00      	nop
20005a1e:	bd80      	pop	{r7, pc}
20005a20:	2000f780 	.word	0x2000f780

20005a24 <tftDisplay_ILI9341_Init_VCOMControl_2>:

static void tftDisplay_ILI9341_Init_VCOMControl_2()
{
20005a24:	b580      	push	{r7, lr}
20005a26:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x86;
20005a28:	4b05      	ldr	r3, [pc, #20]	; (20005a40 <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20005a2a:	2286      	movs	r2, #134	; 0x86
20005a2c:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM2);
20005a2e:	20c7      	movs	r0, #199	; 0xc7
20005a30:	f7ff fd7c 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005a34:	4802      	ldr	r0, [pc, #8]	; (20005a40 <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20005a36:	f7ff fdf9 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
20005a3a:	bf00      	nop
20005a3c:	bd80      	pop	{r7, pc}
20005a3e:	bf00      	nop
20005a40:	2000f780 	.word	0x2000f780

20005a44 <tftDisplay_ILI9341_Init_MemmoryAccessControl>:

static void tftDisplay_ILI9341_Init_MemmoryAccessControl()
{
20005a44:	b580      	push	{r7, lr}
20005a46:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x48;
20005a48:	4b05      	ldr	r3, [pc, #20]	; (20005a60 <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20005a4a:	2248      	movs	r2, #72	; 0x48
20005a4c:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_MAC);
20005a4e:	2036      	movs	r0, #54	; 0x36
20005a50:	f7ff fd6c 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005a54:	4802      	ldr	r0, [pc, #8]	; (20005a60 <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20005a56:	f7ff fde9 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
20005a5a:	bf00      	nop
20005a5c:	bd80      	pop	{r7, pc}
20005a5e:	bf00      	nop
20005a60:	2000f780 	.word	0x2000f780

20005a64 <tftDisplay_ILI9341_Init_PixelFormatSet>:

static void tftDisplay_ILI9341_Init_PixelFormatSet()
{
20005a64:	b580      	push	{r7, lr}
20005a66:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x55;
20005a68:	4b05      	ldr	r3, [pc, #20]	; (20005a80 <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20005a6a:	2255      	movs	r2, #85	; 0x55
20005a6c:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PIXEL_FORMAT);
20005a6e:	203a      	movs	r0, #58	; 0x3a
20005a70:	f7ff fd5c 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005a74:	4802      	ldr	r0, [pc, #8]	; (20005a80 <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20005a76:	f7ff fdd9 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
20005a7a:	bf00      	nop
20005a7c:	bd80      	pop	{r7, pc}
20005a7e:	bf00      	nop
20005a80:	2000f780 	.word	0x2000f780

20005a84 <tftDisplay_ILI9341_Init_FrameRationControl>:

static void tftDisplay_ILI9341_Init_FrameRationControl()
{
20005a84:	b580      	push	{r7, lr}
20005a86:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20005a88:	4b07      	ldr	r3, [pc, #28]	; (20005aa8 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20005a8a:	2200      	movs	r2, #0
20005a8c:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x18;
20005a8e:	4b06      	ldr	r3, [pc, #24]	; (20005aa8 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20005a90:	2218      	movs	r2, #24
20005a92:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_FRMCTR1);
20005a94:	20b1      	movs	r0, #177	; 0xb1
20005a96:	f7ff fd49 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20005a9a:	2201      	movs	r2, #1
20005a9c:	2102      	movs	r1, #2
20005a9e:	4802      	ldr	r0, [pc, #8]	; (20005aa8 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20005aa0:	f7ff fe10 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005aa4:	bf00      	nop
20005aa6:	bd80      	pop	{r7, pc}
20005aa8:	2000f780 	.word	0x2000f780

20005aac <tftDisplay_ILI9341_Init_DisplayFunctionControl>:

static void tftDisplay_ILI9341_Init_DisplayFunctionControl()
{
20005aac:	b580      	push	{r7, lr}
20005aae:	af00      	add	r7, sp, #0
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DFC);
20005ab0:	20b6      	movs	r0, #182	; 0xb6
20005ab2:	f7ff fd3b 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(0x08);
20005ab6:	2008      	movs	r0, #8
20005ab8:	f7ff fd86 	bl	200055c8 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x82);
20005abc:	2082      	movs	r0, #130	; 0x82
20005abe:	f7ff fd83 	bl	200055c8 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x27);
20005ac2:	2027      	movs	r0, #39	; 0x27
20005ac4:	f7ff fd80 	bl	200055c8 <tftDisplay_ILI9341_SendData>
}
20005ac8:	bf00      	nop
20005aca:	bd80      	pop	{r7, pc}

20005acc <tftDisplay_ILI9341_Init_GammaSet>:

static void tftDisplay_ILI9341_Init_GammaSet()
{
20005acc:	b580      	push	{r7, lr}
20005ace:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x01;
20005ad0:	4b05      	ldr	r3, [pc, #20]	; (20005ae8 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
20005ad2:	2201      	movs	r2, #1
20005ad4:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GAMMA);
20005ad6:	2026      	movs	r0, #38	; 0x26
20005ad8:	f7ff fd28 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005adc:	4802      	ldr	r0, [pc, #8]	; (20005ae8 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
20005ade:	f7ff fda5 	bl	2000562c <tftDisplay_ILI9341_SendSingleData>
}
20005ae2:	bf00      	nop
20005ae4:	bd80      	pop	{r7, pc}
20005ae6:	bf00      	nop
20005ae8:	2000f780 	.word	0x2000f780

20005aec <tftDisplay_ILI9341_Init_PositiveGammaCorection>:

static void tftDisplay_ILI9341_Init_PositiveGammaCorection()
{
20005aec:	b580      	push	{r7, lr}
20005aee:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x0F;
20005af0:	4b1b      	ldr	r3, [pc, #108]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005af2:	220f      	movs	r2, #15
20005af4:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x31;
20005af6:	4b1a      	ldr	r3, [pc, #104]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005af8:	2231      	movs	r2, #49	; 0x31
20005afa:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x2B;
20005afc:	4b18      	ldr	r3, [pc, #96]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005afe:	222b      	movs	r2, #43	; 0x2b
20005b00:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x0C;
20005b02:	4b17      	ldr	r3, [pc, #92]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b04:	220c      	movs	r2, #12
20005b06:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x0E;
20005b08:	4b15      	ldr	r3, [pc, #84]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b0a:	220e      	movs	r2, #14
20005b0c:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x08;
20005b0e:	4b14      	ldr	r3, [pc, #80]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b10:	2208      	movs	r2, #8
20005b12:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x4E;
20005b14:	4b12      	ldr	r3, [pc, #72]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b16:	224e      	movs	r2, #78	; 0x4e
20005b18:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xF1;
20005b1a:	4b11      	ldr	r3, [pc, #68]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b1c:	22f1      	movs	r2, #241	; 0xf1
20005b1e:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x37;
20005b20:	4b0f      	ldr	r3, [pc, #60]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b22:	2237      	movs	r2, #55	; 0x37
20005b24:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x07;
20005b26:	4b0e      	ldr	r3, [pc, #56]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b28:	2207      	movs	r2, #7
20005b2a:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x10;
20005b2c:	4b0c      	ldr	r3, [pc, #48]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b2e:	2210      	movs	r2, #16
20005b30:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x03;
20005b32:	4b0b      	ldr	r3, [pc, #44]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b34:	2203      	movs	r2, #3
20005b36:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x0E;
20005b38:	4b09      	ldr	r3, [pc, #36]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b3a:	220e      	movs	r2, #14
20005b3c:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x09;
20005b3e:	4b08      	ldr	r3, [pc, #32]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b40:	2209      	movs	r2, #9
20005b42:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x00;
20005b44:	4b06      	ldr	r3, [pc, #24]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b46:	2200      	movs	r2, #0
20005b48:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PGAMMA);
20005b4a:	20e0      	movs	r0, #224	; 0xe0
20005b4c:	f7ff fcee 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20005b50:	2201      	movs	r2, #1
20005b52:	210f      	movs	r1, #15
20005b54:	4802      	ldr	r0, [pc, #8]	; (20005b60 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005b56:	f7ff fdb5 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005b5a:	bf00      	nop
20005b5c:	bd80      	pop	{r7, pc}
20005b5e:	bf00      	nop
20005b60:	2000f780 	.word	0x2000f780

20005b64 <tftDisplay_ILI9341_Init_NegativeGammaCorection>:

static void tftDisplay_ILI9341_Init_NegativeGammaCorection()
{
20005b64:	b580      	push	{r7, lr}
20005b66:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x00;
20005b68:	4b1b      	ldr	r3, [pc, #108]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b6a:	2200      	movs	r2, #0
20005b6c:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x0E;
20005b6e:	4b1a      	ldr	r3, [pc, #104]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b70:	220e      	movs	r2, #14
20005b72:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x14;
20005b74:	4b18      	ldr	r3, [pc, #96]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b76:	2214      	movs	r2, #20
20005b78:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x03;
20005b7a:	4b17      	ldr	r3, [pc, #92]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b7c:	2203      	movs	r2, #3
20005b7e:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x11;
20005b80:	4b15      	ldr	r3, [pc, #84]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b82:	2211      	movs	r2, #17
20005b84:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x07;
20005b86:	4b14      	ldr	r3, [pc, #80]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b88:	2207      	movs	r2, #7
20005b8a:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x31;
20005b8c:	4b12      	ldr	r3, [pc, #72]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b8e:	2231      	movs	r2, #49	; 0x31
20005b90:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xC1;
20005b92:	4b11      	ldr	r3, [pc, #68]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b94:	22c1      	movs	r2, #193	; 0xc1
20005b96:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x48;
20005b98:	4b0f      	ldr	r3, [pc, #60]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005b9a:	2248      	movs	r2, #72	; 0x48
20005b9c:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x08;
20005b9e:	4b0e      	ldr	r3, [pc, #56]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005ba0:	2208      	movs	r2, #8
20005ba2:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x0F;
20005ba4:	4b0c      	ldr	r3, [pc, #48]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005ba6:	220f      	movs	r2, #15
20005ba8:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x0C;
20005baa:	4b0b      	ldr	r3, [pc, #44]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005bac:	220c      	movs	r2, #12
20005bae:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x31;
20005bb0:	4b09      	ldr	r3, [pc, #36]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005bb2:	2231      	movs	r2, #49	; 0x31
20005bb4:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x36;
20005bb6:	4b08      	ldr	r3, [pc, #32]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005bb8:	2236      	movs	r2, #54	; 0x36
20005bba:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x0F;
20005bbc:	4b06      	ldr	r3, [pc, #24]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005bbe:	220f      	movs	r2, #15
20005bc0:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_NGAMMA);
20005bc2:	20e1      	movs	r0, #225	; 0xe1
20005bc4:	f7ff fcb2 	bl	2000552c <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20005bc8:	2201      	movs	r2, #1
20005bca:	210f      	movs	r1, #15
20005bcc:	4802      	ldr	r0, [pc, #8]	; (20005bd8 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005bce:	f7ff fd79 	bl	200056c4 <tftDisplay_ILI9341_WriteMultipleData>
}
20005bd2:	bf00      	nop
20005bd4:	bd80      	pop	{r7, pc}
20005bd6:	bf00      	nop
20005bd8:	2000f780 	.word	0x2000f780

20005bdc <LL_DMA_DisableStream>:
{
20005bdc:	b480      	push	{r7}
20005bde:	b083      	sub	sp, #12
20005be0:	af00      	add	r7, sp, #0
20005be2:	6078      	str	r0, [r7, #4]
20005be4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20005be6:	4a0c      	ldr	r2, [pc, #48]	; (20005c18 <LL_DMA_DisableStream+0x3c>)
20005be8:	683b      	ldr	r3, [r7, #0]
20005bea:	4413      	add	r3, r2
20005bec:	781b      	ldrb	r3, [r3, #0]
20005bee:	461a      	mov	r2, r3
20005bf0:	687b      	ldr	r3, [r7, #4]
20005bf2:	4413      	add	r3, r2
20005bf4:	681b      	ldr	r3, [r3, #0]
20005bf6:	4908      	ldr	r1, [pc, #32]	; (20005c18 <LL_DMA_DisableStream+0x3c>)
20005bf8:	683a      	ldr	r2, [r7, #0]
20005bfa:	440a      	add	r2, r1
20005bfc:	7812      	ldrb	r2, [r2, #0]
20005bfe:	4611      	mov	r1, r2
20005c00:	687a      	ldr	r2, [r7, #4]
20005c02:	440a      	add	r2, r1
20005c04:	f023 0301 	bic.w	r3, r3, #1
20005c08:	6013      	str	r3, [r2, #0]
}
20005c0a:	bf00      	nop
20005c0c:	370c      	adds	r7, #12
20005c0e:	46bd      	mov	sp, r7
20005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c14:	4770      	bx	lr
20005c16:	bf00      	nop
20005c18:	2000abb0 	.word	0x2000abb0

20005c1c <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
20005c1c:	b480      	push	{r7}
20005c1e:	b083      	sub	sp, #12
20005c20:	af00      	add	r7, sp, #0
20005c22:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
20005c24:	687b      	ldr	r3, [r7, #4]
20005c26:	2220      	movs	r2, #32
20005c28:	60da      	str	r2, [r3, #12]
}
20005c2a:	bf00      	nop
20005c2c:	370c      	adds	r7, #12
20005c2e:	46bd      	mov	sp, r7
20005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c34:	4770      	bx	lr

20005c36 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
20005c36:	b480      	push	{r7}
20005c38:	b083      	sub	sp, #12
20005c3a:	af00      	add	r7, sp, #0
20005c3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
20005c3e:	687b      	ldr	r3, [r7, #4]
20005c40:	2208      	movs	r2, #8
20005c42:	60da      	str	r2, [r3, #12]
}
20005c44:	bf00      	nop
20005c46:	370c      	adds	r7, #12
20005c48:	46bd      	mov	sp, r7
20005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c4e:	4770      	bx	lr

20005c50 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
20005c50:	b480      	push	{r7}
20005c52:	b083      	sub	sp, #12
20005c54:	af00      	add	r7, sp, #0
20005c56:	6078      	str	r0, [r7, #4]
20005c58:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
20005c5a:	4a0c      	ldr	r2, [pc, #48]	; (20005c8c <LL_DMA_EnableIT_TE+0x3c>)
20005c5c:	683b      	ldr	r3, [r7, #0]
20005c5e:	4413      	add	r3, r2
20005c60:	781b      	ldrb	r3, [r3, #0]
20005c62:	461a      	mov	r2, r3
20005c64:	687b      	ldr	r3, [r7, #4]
20005c66:	4413      	add	r3, r2
20005c68:	681b      	ldr	r3, [r3, #0]
20005c6a:	4908      	ldr	r1, [pc, #32]	; (20005c8c <LL_DMA_EnableIT_TE+0x3c>)
20005c6c:	683a      	ldr	r2, [r7, #0]
20005c6e:	440a      	add	r2, r1
20005c70:	7812      	ldrb	r2, [r2, #0]
20005c72:	4611      	mov	r1, r2
20005c74:	687a      	ldr	r2, [r7, #4]
20005c76:	440a      	add	r2, r1
20005c78:	f043 0304 	orr.w	r3, r3, #4
20005c7c:	6013      	str	r3, [r2, #0]
}
20005c7e:	bf00      	nop
20005c80:	370c      	adds	r7, #12
20005c82:	46bd      	mov	sp, r7
20005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c88:	4770      	bx	lr
20005c8a:	bf00      	nop
20005c8c:	2000abb0 	.word	0x2000abb0

20005c90 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
20005c90:	b480      	push	{r7}
20005c92:	b083      	sub	sp, #12
20005c94:	af00      	add	r7, sp, #0
20005c96:	6078      	str	r0, [r7, #4]
20005c98:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
20005c9a:	4a0c      	ldr	r2, [pc, #48]	; (20005ccc <LL_DMA_EnableIT_TC+0x3c>)
20005c9c:	683b      	ldr	r3, [r7, #0]
20005c9e:	4413      	add	r3, r2
20005ca0:	781b      	ldrb	r3, [r3, #0]
20005ca2:	461a      	mov	r2, r3
20005ca4:	687b      	ldr	r3, [r7, #4]
20005ca6:	4413      	add	r3, r2
20005ca8:	681b      	ldr	r3, [r3, #0]
20005caa:	4908      	ldr	r1, [pc, #32]	; (20005ccc <LL_DMA_EnableIT_TC+0x3c>)
20005cac:	683a      	ldr	r2, [r7, #0]
20005cae:	440a      	add	r2, r1
20005cb0:	7812      	ldrb	r2, [r2, #0]
20005cb2:	4611      	mov	r1, r2
20005cb4:	687a      	ldr	r2, [r7, #4]
20005cb6:	440a      	add	r2, r1
20005cb8:	f043 0310 	orr.w	r3, r3, #16
20005cbc:	6013      	str	r3, [r2, #0]
}
20005cbe:	bf00      	nop
20005cc0:	370c      	adds	r7, #12
20005cc2:	46bd      	mov	sp, r7
20005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005cc8:	4770      	bx	lr
20005cca:	bf00      	nop
20005ccc:	2000abb0 	.word	0x2000abb0

20005cd0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
20005cd0:	b480      	push	{r7}
20005cd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
20005cd4:	4b05      	ldr	r3, [pc, #20]	; (20005cec <LL_RCC_HSE_Enable+0x1c>)
20005cd6:	681b      	ldr	r3, [r3, #0]
20005cd8:	4a04      	ldr	r2, [pc, #16]	; (20005cec <LL_RCC_HSE_Enable+0x1c>)
20005cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005cde:	6013      	str	r3, [r2, #0]
}
20005ce0:	bf00      	nop
20005ce2:	46bd      	mov	sp, r7
20005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ce8:	4770      	bx	lr
20005cea:	bf00      	nop
20005cec:	40023800 	.word	0x40023800

20005cf0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
20005cf0:	b480      	push	{r7}
20005cf2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
20005cf4:	4b07      	ldr	r3, [pc, #28]	; (20005d14 <LL_RCC_HSE_IsReady+0x24>)
20005cf6:	681b      	ldr	r3, [r3, #0]
20005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005cfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20005d00:	bf0c      	ite	eq
20005d02:	2301      	moveq	r3, #1
20005d04:	2300      	movne	r3, #0
20005d06:	b2db      	uxtb	r3, r3
}
20005d08:	4618      	mov	r0, r3
20005d0a:	46bd      	mov	sp, r7
20005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d10:	4770      	bx	lr
20005d12:	bf00      	nop
20005d14:	40023800 	.word	0x40023800

20005d18 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
20005d18:	b480      	push	{r7}
20005d1a:	b083      	sub	sp, #12
20005d1c:	af00      	add	r7, sp, #0
20005d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
20005d20:	4b06      	ldr	r3, [pc, #24]	; (20005d3c <LL_RCC_SetSysClkSource+0x24>)
20005d22:	689b      	ldr	r3, [r3, #8]
20005d24:	f023 0203 	bic.w	r2, r3, #3
20005d28:	4904      	ldr	r1, [pc, #16]	; (20005d3c <LL_RCC_SetSysClkSource+0x24>)
20005d2a:	687b      	ldr	r3, [r7, #4]
20005d2c:	4313      	orrs	r3, r2
20005d2e:	608b      	str	r3, [r1, #8]
}
20005d30:	bf00      	nop
20005d32:	370c      	adds	r7, #12
20005d34:	46bd      	mov	sp, r7
20005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d3a:	4770      	bx	lr
20005d3c:	40023800 	.word	0x40023800

20005d40 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
20005d40:	b480      	push	{r7}
20005d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
20005d44:	4b04      	ldr	r3, [pc, #16]	; (20005d58 <LL_RCC_GetSysClkSource+0x18>)
20005d46:	689b      	ldr	r3, [r3, #8]
20005d48:	f003 030c 	and.w	r3, r3, #12
}
20005d4c:	4618      	mov	r0, r3
20005d4e:	46bd      	mov	sp, r7
20005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d54:	4770      	bx	lr
20005d56:	bf00      	nop
20005d58:	40023800 	.word	0x40023800

20005d5c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
20005d5c:	b480      	push	{r7}
20005d5e:	b083      	sub	sp, #12
20005d60:	af00      	add	r7, sp, #0
20005d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
20005d64:	4b06      	ldr	r3, [pc, #24]	; (20005d80 <LL_RCC_SetAHBPrescaler+0x24>)
20005d66:	689b      	ldr	r3, [r3, #8]
20005d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20005d6c:	4904      	ldr	r1, [pc, #16]	; (20005d80 <LL_RCC_SetAHBPrescaler+0x24>)
20005d6e:	687b      	ldr	r3, [r7, #4]
20005d70:	4313      	orrs	r3, r2
20005d72:	608b      	str	r3, [r1, #8]
}
20005d74:	bf00      	nop
20005d76:	370c      	adds	r7, #12
20005d78:	46bd      	mov	sp, r7
20005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d7e:	4770      	bx	lr
20005d80:	40023800 	.word	0x40023800

20005d84 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
20005d84:	b480      	push	{r7}
20005d86:	b083      	sub	sp, #12
20005d88:	af00      	add	r7, sp, #0
20005d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
20005d8c:	4b06      	ldr	r3, [pc, #24]	; (20005da8 <LL_RCC_SetAPB1Prescaler+0x24>)
20005d8e:	689b      	ldr	r3, [r3, #8]
20005d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20005d94:	4904      	ldr	r1, [pc, #16]	; (20005da8 <LL_RCC_SetAPB1Prescaler+0x24>)
20005d96:	687b      	ldr	r3, [r7, #4]
20005d98:	4313      	orrs	r3, r2
20005d9a:	608b      	str	r3, [r1, #8]
}
20005d9c:	bf00      	nop
20005d9e:	370c      	adds	r7, #12
20005da0:	46bd      	mov	sp, r7
20005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
20005da6:	4770      	bx	lr
20005da8:	40023800 	.word	0x40023800

20005dac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
20005dac:	b480      	push	{r7}
20005dae:	b083      	sub	sp, #12
20005db0:	af00      	add	r7, sp, #0
20005db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
20005db4:	4b06      	ldr	r3, [pc, #24]	; (20005dd0 <LL_RCC_SetAPB2Prescaler+0x24>)
20005db6:	689b      	ldr	r3, [r3, #8]
20005db8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20005dbc:	4904      	ldr	r1, [pc, #16]	; (20005dd0 <LL_RCC_SetAPB2Prescaler+0x24>)
20005dbe:	687b      	ldr	r3, [r7, #4]
20005dc0:	4313      	orrs	r3, r2
20005dc2:	608b      	str	r3, [r1, #8]
}
20005dc4:	bf00      	nop
20005dc6:	370c      	adds	r7, #12
20005dc8:	46bd      	mov	sp, r7
20005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dce:	4770      	bx	lr
20005dd0:	40023800 	.word	0x40023800

20005dd4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
20005dd4:	b480      	push	{r7}
20005dd6:	b083      	sub	sp, #12
20005dd8:	af00      	add	r7, sp, #0
20005dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
20005ddc:	4b07      	ldr	r3, [pc, #28]	; (20005dfc <LL_RCC_SetTIMPrescaler+0x28>)
20005dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20005de2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
20005de6:	4905      	ldr	r1, [pc, #20]	; (20005dfc <LL_RCC_SetTIMPrescaler+0x28>)
20005de8:	687b      	ldr	r3, [r7, #4]
20005dea:	4313      	orrs	r3, r2
20005dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
20005df0:	bf00      	nop
20005df2:	370c      	adds	r7, #12
20005df4:	46bd      	mov	sp, r7
20005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dfa:	4770      	bx	lr
20005dfc:	40023800 	.word	0x40023800

20005e00 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
20005e00:	b480      	push	{r7}
20005e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
20005e04:	4b05      	ldr	r3, [pc, #20]	; (20005e1c <LL_RCC_PLL_Enable+0x1c>)
20005e06:	681b      	ldr	r3, [r3, #0]
20005e08:	4a04      	ldr	r2, [pc, #16]	; (20005e1c <LL_RCC_PLL_Enable+0x1c>)
20005e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20005e0e:	6013      	str	r3, [r2, #0]
}
20005e10:	bf00      	nop
20005e12:	46bd      	mov	sp, r7
20005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e18:	4770      	bx	lr
20005e1a:	bf00      	nop
20005e1c:	40023800 	.word	0x40023800

20005e20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
20005e20:	b480      	push	{r7}
20005e22:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
20005e24:	4b07      	ldr	r3, [pc, #28]	; (20005e44 <LL_RCC_PLL_IsReady+0x24>)
20005e26:	681b      	ldr	r3, [r3, #0]
20005e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20005e30:	bf0c      	ite	eq
20005e32:	2301      	moveq	r3, #1
20005e34:	2300      	movne	r3, #0
20005e36:	b2db      	uxtb	r3, r3
}
20005e38:	4618      	mov	r0, r3
20005e3a:	46bd      	mov	sp, r7
20005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e40:	4770      	bx	lr
20005e42:	bf00      	nop
20005e44:	40023800 	.word	0x40023800

20005e48 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
20005e48:	b480      	push	{r7}
20005e4a:	b085      	sub	sp, #20
20005e4c:	af00      	add	r7, sp, #0
20005e4e:	60f8      	str	r0, [r7, #12]
20005e50:	60b9      	str	r1, [r7, #8]
20005e52:	607a      	str	r2, [r7, #4]
20005e54:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
20005e56:	4b0d      	ldr	r3, [pc, #52]	; (20005e8c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005e58:	685a      	ldr	r2, [r3, #4]
20005e5a:	4b0d      	ldr	r3, [pc, #52]	; (20005e90 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
20005e5c:	4013      	ands	r3, r2
20005e5e:	68f9      	ldr	r1, [r7, #12]
20005e60:	68ba      	ldr	r2, [r7, #8]
20005e62:	4311      	orrs	r1, r2
20005e64:	687a      	ldr	r2, [r7, #4]
20005e66:	0192      	lsls	r2, r2, #6
20005e68:	430a      	orrs	r2, r1
20005e6a:	4908      	ldr	r1, [pc, #32]	; (20005e8c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005e6c:	4313      	orrs	r3, r2
20005e6e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
20005e70:	4b06      	ldr	r3, [pc, #24]	; (20005e8c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005e72:	685b      	ldr	r3, [r3, #4]
20005e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
20005e78:	4904      	ldr	r1, [pc, #16]	; (20005e8c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005e7a:	683b      	ldr	r3, [r7, #0]
20005e7c:	4313      	orrs	r3, r2
20005e7e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
20005e80:	bf00      	nop
20005e82:	3714      	adds	r7, #20
20005e84:	46bd      	mov	sp, r7
20005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e8a:	4770      	bx	lr
20005e8c:	40023800 	.word	0x40023800
20005e90:	ffbf8000 	.word	0xffbf8000

20005e94 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
20005e94:	b480      	push	{r7}
20005e96:	b085      	sub	sp, #20
20005e98:	af00      	add	r7, sp, #0
20005e9a:	60f8      	str	r0, [r7, #12]
20005e9c:	60b9      	str	r1, [r7, #8]
20005e9e:	607a      	str	r2, [r7, #4]
20005ea0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
20005ea2:	4b0a      	ldr	r3, [pc, #40]	; (20005ecc <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005ea4:	685a      	ldr	r2, [r3, #4]
20005ea6:	4b0a      	ldr	r3, [pc, #40]	; (20005ed0 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
20005ea8:	4013      	ands	r3, r2
20005eaa:	68f9      	ldr	r1, [r7, #12]
20005eac:	68ba      	ldr	r2, [r7, #8]
20005eae:	4311      	orrs	r1, r2
20005eb0:	687a      	ldr	r2, [r7, #4]
20005eb2:	0192      	lsls	r2, r2, #6
20005eb4:	4311      	orrs	r1, r2
20005eb6:	683a      	ldr	r2, [r7, #0]
20005eb8:	430a      	orrs	r2, r1
20005eba:	4904      	ldr	r1, [pc, #16]	; (20005ecc <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005ebc:	4313      	orrs	r3, r2
20005ebe:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
20005ec0:	bf00      	nop
20005ec2:	3714      	adds	r7, #20
20005ec4:	46bd      	mov	sp, r7
20005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005eca:	4770      	bx	lr
20005ecc:	40023800 	.word	0x40023800
20005ed0:	f0bf8000 	.word	0xf0bf8000

20005ed4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
20005ed4:	b480      	push	{r7}
20005ed6:	b083      	sub	sp, #12
20005ed8:	af00      	add	r7, sp, #0
20005eda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
20005edc:	4b06      	ldr	r3, [pc, #24]	; (20005ef8 <LL_FLASH_SetLatency+0x24>)
20005ede:	681b      	ldr	r3, [r3, #0]
20005ee0:	f023 020f 	bic.w	r2, r3, #15
20005ee4:	4904      	ldr	r1, [pc, #16]	; (20005ef8 <LL_FLASH_SetLatency+0x24>)
20005ee6:	687b      	ldr	r3, [r7, #4]
20005ee8:	4313      	orrs	r3, r2
20005eea:	600b      	str	r3, [r1, #0]
}
20005eec:	bf00      	nop
20005eee:	370c      	adds	r7, #12
20005ef0:	46bd      	mov	sp, r7
20005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ef6:	4770      	bx	lr
20005ef8:	40023c00 	.word	0x40023c00

20005efc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
20005efc:	b480      	push	{r7}
20005efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
20005f00:	4b04      	ldr	r3, [pc, #16]	; (20005f14 <LL_FLASH_GetLatency+0x18>)
20005f02:	681b      	ldr	r3, [r3, #0]
20005f04:	f003 030f 	and.w	r3, r3, #15
}
20005f08:	4618      	mov	r0, r3
20005f0a:	46bd      	mov	sp, r7
20005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f10:	4770      	bx	lr
20005f12:	bf00      	nop
20005f14:	40023c00 	.word	0x40023c00

20005f18 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
20005f18:	b480      	push	{r7}
20005f1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
20005f1c:	4b05      	ldr	r3, [pc, #20]	; (20005f34 <LL_PWR_EnableOverDriveMode+0x1c>)
20005f1e:	681b      	ldr	r3, [r3, #0]
20005f20:	4a04      	ldr	r2, [pc, #16]	; (20005f34 <LL_PWR_EnableOverDriveMode+0x1c>)
20005f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f26:	6013      	str	r3, [r2, #0]
}
20005f28:	bf00      	nop
20005f2a:	46bd      	mov	sp, r7
20005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f30:	4770      	bx	lr
20005f32:	bf00      	nop
20005f34:	40007000 	.word	0x40007000

20005f38 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
20005f38:	b480      	push	{r7}
20005f3a:	b083      	sub	sp, #12
20005f3c:	af00      	add	r7, sp, #0
20005f3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
20005f40:	4b06      	ldr	r3, [pc, #24]	; (20005f5c <LL_PWR_SetRegulVoltageScaling+0x24>)
20005f42:	681b      	ldr	r3, [r3, #0]
20005f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20005f48:	4904      	ldr	r1, [pc, #16]	; (20005f5c <LL_PWR_SetRegulVoltageScaling+0x24>)
20005f4a:	687b      	ldr	r3, [r7, #4]
20005f4c:	4313      	orrs	r3, r2
20005f4e:	600b      	str	r3, [r1, #0]
}
20005f50:	bf00      	nop
20005f52:	370c      	adds	r7, #12
20005f54:	46bd      	mov	sp, r7
20005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f5a:	4770      	bx	lr
20005f5c:	40007000 	.word	0x40007000

20005f60 <LL_SPI_Enable>:
{
20005f60:	b480      	push	{r7}
20005f62:	b083      	sub	sp, #12
20005f64:	af00      	add	r7, sp, #0
20005f66:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
20005f68:	687b      	ldr	r3, [r7, #4]
20005f6a:	681b      	ldr	r3, [r3, #0]
20005f6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20005f70:	687b      	ldr	r3, [r7, #4]
20005f72:	601a      	str	r2, [r3, #0]
}
20005f74:	bf00      	nop
20005f76:	370c      	adds	r7, #12
20005f78:	46bd      	mov	sp, r7
20005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f7e:	4770      	bx	lr

20005f80 <LL_SPI_EnableDMAReq_TX>:
{
20005f80:	b480      	push	{r7}
20005f82:	b083      	sub	sp, #12
20005f84:	af00      	add	r7, sp, #0
20005f86:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
20005f88:	687b      	ldr	r3, [r7, #4]
20005f8a:	685b      	ldr	r3, [r3, #4]
20005f8c:	f043 0202 	orr.w	r2, r3, #2
20005f90:	687b      	ldr	r3, [r7, #4]
20005f92:	605a      	str	r2, [r3, #4]
}
20005f94:	bf00      	nop
20005f96:	370c      	adds	r7, #12
20005f98:	46bd      	mov	sp, r7
20005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f9e:	4770      	bx	lr

20005fa0 <LL_GPIO_SetOutputPin>:
{
20005fa0:	b480      	push	{r7}
20005fa2:	b083      	sub	sp, #12
20005fa4:	af00      	add	r7, sp, #0
20005fa6:	6078      	str	r0, [r7, #4]
20005fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20005faa:	687b      	ldr	r3, [r7, #4]
20005fac:	683a      	ldr	r2, [r7, #0]
20005fae:	619a      	str	r2, [r3, #24]
}
20005fb0:	bf00      	nop
20005fb2:	370c      	adds	r7, #12
20005fb4:	46bd      	mov	sp, r7
20005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005fba:	4770      	bx	lr

20005fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20005fbc:	b580      	push	{r7, lr}
20005fbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20005fc0:	f7fa f916 	bl	200001f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20005fc4:	f000 f82c 	bl	20006020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20005fc8:	f7fe fcc4 	bl	20004954 <MX_GPIO_Init>
  MX_DMA_Init();
20005fcc:	f7fe fae8 	bl	200045a0 <MX_DMA_Init>
  MX_RNG_Init();
20005fd0:	f000 fa86 	bl	200064e0 <MX_RNG_Init>
  MX_SPI5_Init();
20005fd4:	f000 fc14 	bl	20006800 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005fd8:	2104      	movs	r1, #4
20005fda:	480f      	ldr	r0, [pc, #60]	; (20006018 <main+0x5c>)
20005fdc:	f7ff fdfe 	bl	20005bdc <LL_DMA_DisableStream>
  LL_DMA_ClearFlag_TC4(DMA2);
20005fe0:	480d      	ldr	r0, [pc, #52]	; (20006018 <main+0x5c>)
20005fe2:	f7ff fe1b 	bl	20005c1c <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA2);
20005fe6:	480c      	ldr	r0, [pc, #48]	; (20006018 <main+0x5c>)
20005fe8:	f7ff fe25 	bl	20005c36 <LL_DMA_ClearFlag_TE4>
  LL_SPI_EnableDMAReq_TX(SPI5);
20005fec:	480b      	ldr	r0, [pc, #44]	; (2000601c <main+0x60>)
20005fee:	f7ff ffc7 	bl	20005f80 <LL_SPI_EnableDMAReq_TX>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_4);
20005ff2:	2104      	movs	r1, #4
20005ff4:	4808      	ldr	r0, [pc, #32]	; (20006018 <main+0x5c>)
20005ff6:	f7ff fe4b 	bl	20005c90 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_4);
20005ffa:	2104      	movs	r1, #4
20005ffc:	4806      	ldr	r0, [pc, #24]	; (20006018 <main+0x5c>)
20005ffe:	f7ff fe27 	bl	20005c50 <LL_DMA_EnableIT_TE>
  LL_SPI_Enable(SPI5);
20006002:	4806      	ldr	r0, [pc, #24]	; (2000601c <main+0x60>)
20006004:	f7ff ffac 	bl	20005f60 <LL_SPI_Enable>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
20006008:	f7fa ff72 	bl	20000ef0 <osKernelInitialize>
  MX_FREERTOS_Init();
2000600c:	f7fe fafa 	bl	20004604 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
20006010:	f7fa ff92 	bl	20000f38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20006014:	e7fe      	b.n	20006014 <main+0x58>
20006016:	bf00      	nop
20006018:	40026400 	.word	0x40026400
2000601c:	40015000 	.word	0x40015000

20006020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20006020:	b580      	push	{r7, lr}
20006022:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
20006024:	2005      	movs	r0, #5
20006026:	f7ff ff55 	bl	20005ed4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
2000602a:	bf00      	nop
2000602c:	f7ff ff66 	bl	20005efc <LL_FLASH_GetLatency>
20006030:	4603      	mov	r3, r0
20006032:	2b05      	cmp	r3, #5
20006034:	d1fa      	bne.n	2000602c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
20006036:	f44f 4040 	mov.w	r0, #49152	; 0xc000
2000603a:	f7ff ff7d 	bl	20005f38 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
2000603e:	f7ff ff6b 	bl	20005f18 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
20006042:	f7ff fe45 	bl	20005cd0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
20006046:	bf00      	nop
20006048:	f7ff fe52 	bl	20005cf0 <LL_RCC_HSE_IsReady>
2000604c:	4603      	mov	r3, r0
2000604e:	2b01      	cmp	r3, #1
20006050:	d1fa      	bne.n	20006048 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
20006052:	2300      	movs	r3, #0
20006054:	22b4      	movs	r2, #180	; 0xb4
20006056:	2104      	movs	r1, #4
20006058:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2000605c:	f7ff fef4 	bl	20005e48 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
20006060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20006064:	22b4      	movs	r2, #180	; 0xb4
20006066:	2104      	movs	r1, #4
20006068:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
2000606c:	f7ff ff12 	bl	20005e94 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
20006070:	f7ff fec6 	bl	20005e00 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
20006074:	bf00      	nop
20006076:	f7ff fed3 	bl	20005e20 <LL_RCC_PLL_IsReady>
2000607a:	4603      	mov	r3, r0
2000607c:	2b01      	cmp	r3, #1
2000607e:	d1fa      	bne.n	20006076 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
20006080:	2000      	movs	r0, #0
20006082:	f7ff fe6b 	bl	20005d5c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
20006086:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
2000608a:	f7ff fe7b 	bl	20005d84 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
2000608e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20006092:	f7ff fe8b 	bl	20005dac <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
20006096:	2002      	movs	r0, #2
20006098:	f7ff fe3e 	bl	20005d18 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
2000609c:	bf00      	nop
2000609e:	f7ff fe4f 	bl	20005d40 <LL_RCC_GetSysClkSource>
200060a2:	4603      	mov	r3, r0
200060a4:	2b08      	cmp	r3, #8
200060a6:	d1fa      	bne.n	2000609e <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(180000000);
200060a8:	4807      	ldr	r0, [pc, #28]	; (200060c8 <SystemClock_Config+0xa8>)
200060aa:	f7fa fecd 	bl	20000e48 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
200060ae:	200f      	movs	r0, #15
200060b0:	f000 fc56 	bl	20006960 <HAL_InitTick>
200060b4:	4603      	mov	r3, r0
200060b6:	2b00      	cmp	r3, #0
200060b8:	d001      	beq.n	200060be <SystemClock_Config+0x9e>
  {
    Error_Handler();
200060ba:	f000 f83b 	bl	20006134 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
200060be:	2000      	movs	r0, #0
200060c0:	f7ff fe88 	bl	20005dd4 <LL_RCC_SetTIMPrescaler>
}
200060c4:	bf00      	nop
200060c6:	bd80      	pop	{r7, pc}
200060c8:	0aba9500 	.word	0x0aba9500

200060cc <DMA1_Stream4_TransferComplete>:

/* USER CODE BEGIN 4 */
void DMA1_Stream4_TransferComplete(void)
{
200060cc:	b580      	push	{r7, lr}
200060ce:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC4(DMA2);
200060d0:	480c      	ldr	r0, [pc, #48]	; (20006104 <DMA1_Stream4_TransferComplete+0x38>)
200060d2:	f7ff fda3 	bl	20005c1c <LL_DMA_ClearFlag_TC4>
  DmaSpiCnt--;
200060d6:	4b0c      	ldr	r3, [pc, #48]	; (20006108 <DMA1_Stream4_TransferComplete+0x3c>)
200060d8:	781b      	ldrb	r3, [r3, #0]
200060da:	3b01      	subs	r3, #1
200060dc:	b2da      	uxtb	r2, r3
200060de:	4b0a      	ldr	r3, [pc, #40]	; (20006108 <DMA1_Stream4_TransferComplete+0x3c>)
200060e0:	701a      	strb	r2, [r3, #0]

  if(DmaSpiCnt == 0)
200060e2:	4b09      	ldr	r3, [pc, #36]	; (20006108 <DMA1_Stream4_TransferComplete+0x3c>)
200060e4:	781b      	ldrb	r3, [r3, #0]
200060e6:	2b00      	cmp	r3, #0
200060e8:	d10a      	bne.n	20006100 <DMA1_Stream4_TransferComplete+0x34>
  {
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200060ea:	2104      	movs	r1, #4
200060ec:	4805      	ldr	r0, [pc, #20]	; (20006104 <DMA1_Stream4_TransferComplete+0x38>)
200060ee:	f7ff fd75 	bl	20005bdc <LL_DMA_DisableStream>
    DmaSpiCnt=1;
200060f2:	4b05      	ldr	r3, [pc, #20]	; (20006108 <DMA1_Stream4_TransferComplete+0x3c>)
200060f4:	2201      	movs	r2, #1
200060f6:	701a      	strb	r2, [r3, #0]
    CS_DESELECT();
200060f8:	2104      	movs	r1, #4
200060fa:	4804      	ldr	r0, [pc, #16]	; (2000610c <DMA1_Stream4_TransferComplete+0x40>)
200060fc:	f7ff ff50 	bl	20005fa0 <LL_GPIO_SetOutputPin>
  }
}
20006100:	bf00      	nop
20006102:	bd80      	pop	{r7, pc}
20006104:	40026400 	.word	0x40026400
20006108:	2000ac3c 	.word	0x2000ac3c
2000610c:	40020800 	.word	0x40020800

20006110 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
20006110:	b580      	push	{r7, lr}
20006112:	b082      	sub	sp, #8
20006114:	af00      	add	r7, sp, #0
20006116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
20006118:	687b      	ldr	r3, [r7, #4]
2000611a:	681b      	ldr	r3, [r3, #0]
2000611c:	4a04      	ldr	r2, [pc, #16]	; (20006130 <HAL_TIM_PeriodElapsedCallback+0x20>)
2000611e:	4293      	cmp	r3, r2
20006120:	d101      	bne.n	20006126 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
20006122:	f7fa f887 	bl	20000234 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
20006126:	bf00      	nop
20006128:	3708      	adds	r7, #8
2000612a:	46bd      	mov	sp, r7
2000612c:	bd80      	pop	{r7, pc}
2000612e:	bf00      	nop
20006130:	40001000 	.word	0x40001000

20006134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20006134:	b480      	push	{r7}
20006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
20006138:	bf00      	nop
2000613a:	46bd      	mov	sp, r7
2000613c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006140:	4770      	bx	lr
	...

20006144 <Draw_info>:
#include "myfunctions.h"

void Draw_info(int real_temp, int exp_temp, bool window){
20006144:	b5b0      	push	{r4, r5, r7, lr}
20006146:	b08c      	sub	sp, #48	; 0x30
20006148:	af00      	add	r7, sp, #0
2000614a:	60f8      	str	r0, [r7, #12]
2000614c:	60b9      	str	r1, [r7, #8]
2000614e:	4613      	mov	r3, r2
20006150:	71fb      	strb	r3, [r7, #7]
    unsigned char data[]= "Temp:  .  Set:  .  Okno: ";
20006152:	4b53      	ldr	r3, [pc, #332]	; (200062a0 <Draw_info+0x15c>)
20006154:	f107 0410 	add.w	r4, r7, #16
20006158:	461d      	mov	r5, r3
2000615a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
2000615c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
2000615e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
20006162:	c403      	stmia	r4!, {r0, r1}
20006164:	8022      	strh	r2, [r4, #0]
    if(real_temp > 500) real_temp = 500;
20006166:	68fb      	ldr	r3, [r7, #12]
20006168:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
2000616c:	dd02      	ble.n	20006174 <Draw_info+0x30>
2000616e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
20006172:	60fb      	str	r3, [r7, #12]
    data[5] = real_temp / 100 + '0';
20006174:	68fb      	ldr	r3, [r7, #12]
20006176:	4a4b      	ldr	r2, [pc, #300]	; (200062a4 <Draw_info+0x160>)
20006178:	fb82 1203 	smull	r1, r2, r2, r3
2000617c:	1152      	asrs	r2, r2, #5
2000617e:	17db      	asrs	r3, r3, #31
20006180:	1ad3      	subs	r3, r2, r3
20006182:	b2db      	uxtb	r3, r3
20006184:	3330      	adds	r3, #48	; 0x30
20006186:	b2db      	uxtb	r3, r3
20006188:	757b      	strb	r3, [r7, #21]
    data[6] = ((real_temp / 10) - (real_temp / 100 * 10)) + '0';
2000618a:	68fb      	ldr	r3, [r7, #12]
2000618c:	4a46      	ldr	r2, [pc, #280]	; (200062a8 <Draw_info+0x164>)
2000618e:	fb82 1203 	smull	r1, r2, r2, r3
20006192:	1092      	asrs	r2, r2, #2
20006194:	17db      	asrs	r3, r3, #31
20006196:	1ad3      	subs	r3, r2, r3
20006198:	b2da      	uxtb	r2, r3
2000619a:	68fb      	ldr	r3, [r7, #12]
2000619c:	4941      	ldr	r1, [pc, #260]	; (200062a4 <Draw_info+0x160>)
2000619e:	fb81 0103 	smull	r0, r1, r1, r3
200061a2:	1149      	asrs	r1, r1, #5
200061a4:	17db      	asrs	r3, r3, #31
200061a6:	1a5b      	subs	r3, r3, r1
200061a8:	b2db      	uxtb	r3, r3
200061aa:	4619      	mov	r1, r3
200061ac:	0089      	lsls	r1, r1, #2
200061ae:	440b      	add	r3, r1
200061b0:	005b      	lsls	r3, r3, #1
200061b2:	b2db      	uxtb	r3, r3
200061b4:	4413      	add	r3, r2
200061b6:	b2db      	uxtb	r3, r3
200061b8:	3330      	adds	r3, #48	; 0x30
200061ba:	b2db      	uxtb	r3, r3
200061bc:	75bb      	strb	r3, [r7, #22]
    data[8] = real_temp % 10 + '0';
200061be:	68fa      	ldr	r2, [r7, #12]
200061c0:	4b39      	ldr	r3, [pc, #228]	; (200062a8 <Draw_info+0x164>)
200061c2:	fb83 1302 	smull	r1, r3, r3, r2
200061c6:	1099      	asrs	r1, r3, #2
200061c8:	17d3      	asrs	r3, r2, #31
200061ca:	1ac9      	subs	r1, r1, r3
200061cc:	460b      	mov	r3, r1
200061ce:	009b      	lsls	r3, r3, #2
200061d0:	440b      	add	r3, r1
200061d2:	005b      	lsls	r3, r3, #1
200061d4:	1ad1      	subs	r1, r2, r3
200061d6:	b2cb      	uxtb	r3, r1
200061d8:	3330      	adds	r3, #48	; 0x30
200061da:	b2db      	uxtb	r3, r3
200061dc:	763b      	strb	r3, [r7, #24]
    data[14] = exp_temp / 100 + '0';
200061de:	68bb      	ldr	r3, [r7, #8]
200061e0:	4a30      	ldr	r2, [pc, #192]	; (200062a4 <Draw_info+0x160>)
200061e2:	fb82 1203 	smull	r1, r2, r2, r3
200061e6:	1152      	asrs	r2, r2, #5
200061e8:	17db      	asrs	r3, r3, #31
200061ea:	1ad3      	subs	r3, r2, r3
200061ec:	b2db      	uxtb	r3, r3
200061ee:	3330      	adds	r3, #48	; 0x30
200061f0:	b2db      	uxtb	r3, r3
200061f2:	77bb      	strb	r3, [r7, #30]
    data[15] = ((exp_temp / 10) - (exp_temp / 100 * 10)) + '0';
200061f4:	68bb      	ldr	r3, [r7, #8]
200061f6:	4a2c      	ldr	r2, [pc, #176]	; (200062a8 <Draw_info+0x164>)
200061f8:	fb82 1203 	smull	r1, r2, r2, r3
200061fc:	1092      	asrs	r2, r2, #2
200061fe:	17db      	asrs	r3, r3, #31
20006200:	1ad3      	subs	r3, r2, r3
20006202:	b2da      	uxtb	r2, r3
20006204:	68bb      	ldr	r3, [r7, #8]
20006206:	4927      	ldr	r1, [pc, #156]	; (200062a4 <Draw_info+0x160>)
20006208:	fb81 0103 	smull	r0, r1, r1, r3
2000620c:	1149      	asrs	r1, r1, #5
2000620e:	17db      	asrs	r3, r3, #31
20006210:	1a5b      	subs	r3, r3, r1
20006212:	b2db      	uxtb	r3, r3
20006214:	4619      	mov	r1, r3
20006216:	0089      	lsls	r1, r1, #2
20006218:	440b      	add	r3, r1
2000621a:	005b      	lsls	r3, r3, #1
2000621c:	b2db      	uxtb	r3, r3
2000621e:	4413      	add	r3, r2
20006220:	b2db      	uxtb	r3, r3
20006222:	3330      	adds	r3, #48	; 0x30
20006224:	b2db      	uxtb	r3, r3
20006226:	77fb      	strb	r3, [r7, #31]
    data[17] = exp_temp % 10 + '0';
20006228:	68ba      	ldr	r2, [r7, #8]
2000622a:	4b1f      	ldr	r3, [pc, #124]	; (200062a8 <Draw_info+0x164>)
2000622c:	fb83 1302 	smull	r1, r3, r3, r2
20006230:	1099      	asrs	r1, r3, #2
20006232:	17d3      	asrs	r3, r2, #31
20006234:	1ac9      	subs	r1, r1, r3
20006236:	460b      	mov	r3, r1
20006238:	009b      	lsls	r3, r3, #2
2000623a:	440b      	add	r3, r1
2000623c:	005b      	lsls	r3, r3, #1
2000623e:	1ad1      	subs	r1, r2, r3
20006240:	b2cb      	uxtb	r3, r1
20006242:	3330      	adds	r3, #48	; 0x30
20006244:	b2db      	uxtb	r3, r3
20006246:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    if(window){
2000624a:	79fb      	ldrb	r3, [r7, #7]
2000624c:	2b00      	cmp	r3, #0
2000624e:	d003      	beq.n	20006258 <Draw_info+0x114>
        data[24] = '1';
20006250:	2331      	movs	r3, #49	; 0x31
20006252:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
20006256:	e002      	b.n	2000625e <Draw_info+0x11a>
    }else{
        data[24] = '0';
20006258:	2330      	movs	r3, #48	; 0x30
2000625a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    }
    for(int i = 0; i < 25; i++){
2000625e:	2300      	movs	r3, #0
20006260:	62fb      	str	r3, [r7, #44]	; 0x2c
20006262:	e014      	b.n	2000628e <Draw_info+0x14a>
    	TFTDisplay_ILI9341_DrawChar(i * 6 + 5, 5, data[i]);
20006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20006266:	b29b      	uxth	r3, r3
20006268:	461a      	mov	r2, r3
2000626a:	0052      	lsls	r2, r2, #1
2000626c:	4413      	add	r3, r2
2000626e:	005b      	lsls	r3, r3, #1
20006270:	b29b      	uxth	r3, r3
20006272:	3305      	adds	r3, #5
20006274:	b298      	uxth	r0, r3
20006276:	f107 0210 	add.w	r2, r7, #16
2000627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000627c:	4413      	add	r3, r2
2000627e:	781b      	ldrb	r3, [r3, #0]
20006280:	461a      	mov	r2, r3
20006282:	2105      	movs	r1, #5
20006284:	f7ff f802 	bl	2000528c <TFTDisplay_ILI9341_DrawChar>
    for(int i = 0; i < 25; i++){
20006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000628a:	3301      	adds	r3, #1
2000628c:	62fb      	str	r3, [r7, #44]	; 0x2c
2000628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20006290:	2b18      	cmp	r3, #24
20006292:	dde7      	ble.n	20006264 <Draw_info+0x120>
    }

}
20006294:	bf00      	nop
20006296:	bf00      	nop
20006298:	3730      	adds	r7, #48	; 0x30
2000629a:	46bd      	mov	sp, r7
2000629c:	bdb0      	pop	{r4, r5, r7, pc}
2000629e:	bf00      	nop
200062a0:	20006dec 	.word	0x20006dec
200062a4:	51eb851f 	.word	0x51eb851f
200062a8:	66666667 	.word	0x66666667

200062ac <PID_s_init>:
#include "reg2.h"

void PID_s_init(PID_s* reg, float kp, float ti, float td, float t){
200062ac:	b480      	push	{r7}
200062ae:	b087      	sub	sp, #28
200062b0:	af00      	add	r7, sp, #0
200062b2:	6178      	str	r0, [r7, #20]
200062b4:	ed87 0a04 	vstr	s0, [r7, #16]
200062b8:	edc7 0a03 	vstr	s1, [r7, #12]
200062bc:	ed87 1a02 	vstr	s2, [r7, #8]
200062c0:	edc7 1a01 	vstr	s3, [r7, #4]
    reg->Kp = kp;
200062c4:	697b      	ldr	r3, [r7, #20]
200062c6:	693a      	ldr	r2, [r7, #16]
200062c8:	601a      	str	r2, [r3, #0]
    reg->Ti = ti;
200062ca:	697b      	ldr	r3, [r7, #20]
200062cc:	68fa      	ldr	r2, [r7, #12]
200062ce:	605a      	str	r2, [r3, #4]
    reg->Td = td;
200062d0:	697b      	ldr	r3, [r7, #20]
200062d2:	68ba      	ldr	r2, [r7, #8]
200062d4:	609a      	str	r2, [r3, #8]
    reg->Ts = t;
200062d6:	697b      	ldr	r3, [r7, #20]
200062d8:	687a      	ldr	r2, [r7, #4]
200062da:	60da      	str	r2, [r3, #12]
    reg->last_i = 0;
200062dc:	697b      	ldr	r3, [r7, #20]
200062de:	f04f 0200 	mov.w	r2, #0
200062e2:	611a      	str	r2, [r3, #16]
    reg->last_input = 0;
200062e4:	697b      	ldr	r3, [r7, #20]
200062e6:	f04f 0200 	mov.w	r2, #0
200062ea:	615a      	str	r2, [r3, #20]
}
200062ec:	bf00      	nop
200062ee:	371c      	adds	r7, #28
200062f0:	46bd      	mov	sp, r7
200062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200062f6:	4770      	bx	lr

200062f8 <Reg_s_step>:

void Reg_s_step(PID_s* reg){
200062f8:	b480      	push	{r7}
200062fa:	b087      	sub	sp, #28
200062fc:	af00      	add	r7, sp, #0
200062fe:	6078      	str	r0, [r7, #4]
    //printf("(input: %f, expected: %f)",input, expected);
    float P = reg->Kp * (reg->expected - reg->input);
20006300:	687b      	ldr	r3, [r7, #4]
20006302:	ed93 7a00 	vldr	s14, [r3]
20006306:	687b      	ldr	r3, [r7, #4]
20006308:	edd3 6a07 	vldr	s13, [r3, #28]
2000630c:	687b      	ldr	r3, [r7, #4]
2000630e:	edd3 7a06 	vldr	s15, [r3, #24]
20006312:	ee76 7ae7 	vsub.f32	s15, s13, s15
20006316:	ee67 7a27 	vmul.f32	s15, s14, s15
2000631a:	edc7 7a05 	vstr	s15, [r7, #20]
    float I = (reg->Kp /reg->Ti * reg->Ts * (reg->expected - reg->input)) + reg->last_i;        
2000631e:	687b      	ldr	r3, [r7, #4]
20006320:	edd3 6a00 	vldr	s13, [r3]
20006324:	687b      	ldr	r3, [r7, #4]
20006326:	edd3 7a01 	vldr	s15, [r3, #4]
2000632a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2000632e:	687b      	ldr	r3, [r7, #4]
20006330:	edd3 7a03 	vldr	s15, [r3, #12]
20006334:	ee27 7a27 	vmul.f32	s14, s14, s15
20006338:	687b      	ldr	r3, [r7, #4]
2000633a:	edd3 6a07 	vldr	s13, [r3, #28]
2000633e:	687b      	ldr	r3, [r7, #4]
20006340:	edd3 7a06 	vldr	s15, [r3, #24]
20006344:	ee76 7ae7 	vsub.f32	s15, s13, s15
20006348:	ee27 7a27 	vmul.f32	s14, s14, s15
2000634c:	687b      	ldr	r3, [r7, #4]
2000634e:	edd3 7a04 	vldr	s15, [r3, #16]
20006352:	ee77 7a27 	vadd.f32	s15, s14, s15
20006356:	edc7 7a04 	vstr	s15, [r7, #16]
    float D = reg->Kp * ((reg->expected - reg->input) - (reg->expected - reg->last_input))/reg->Ts * reg->Td;
2000635a:	687b      	ldr	r3, [r7, #4]
2000635c:	ed93 7a00 	vldr	s14, [r3]
20006360:	687b      	ldr	r3, [r7, #4]
20006362:	edd3 6a07 	vldr	s13, [r3, #28]
20006366:	687b      	ldr	r3, [r7, #4]
20006368:	edd3 7a06 	vldr	s15, [r3, #24]
2000636c:	ee76 6ae7 	vsub.f32	s13, s13, s15
20006370:	687b      	ldr	r3, [r7, #4]
20006372:	ed93 6a07 	vldr	s12, [r3, #28]
20006376:	687b      	ldr	r3, [r7, #4]
20006378:	edd3 7a05 	vldr	s15, [r3, #20]
2000637c:	ee76 7a67 	vsub.f32	s15, s12, s15
20006380:	ee76 7ae7 	vsub.f32	s15, s13, s15
20006384:	ee67 6a27 	vmul.f32	s13, s14, s15
20006388:	687b      	ldr	r3, [r7, #4]
2000638a:	edd3 7a03 	vldr	s15, [r3, #12]
2000638e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20006392:	687b      	ldr	r3, [r7, #4]
20006394:	edd3 7a02 	vldr	s15, [r3, #8]
20006398:	ee67 7a27 	vmul.f32	s15, s14, s15
2000639c:	edc7 7a03 	vstr	s15, [r7, #12]
    //printf("P: %.2f \t", P);
    reg->last_i = I;
200063a0:	687b      	ldr	r3, [r7, #4]
200063a2:	693a      	ldr	r2, [r7, #16]
200063a4:	611a      	str	r2, [r3, #16]
    reg->last_input = reg->input;
200063a6:	687b      	ldr	r3, [r7, #4]
200063a8:	699a      	ldr	r2, [r3, #24]
200063aa:	687b      	ldr	r3, [r7, #4]
200063ac:	615a      	str	r2, [r3, #20]
    reg->output = P + I + D;
200063ae:	ed97 7a05 	vldr	s14, [r7, #20]
200063b2:	edd7 7a04 	vldr	s15, [r7, #16]
200063b6:	ee37 7a27 	vadd.f32	s14, s14, s15
200063ba:	edd7 7a03 	vldr	s15, [r7, #12]
200063be:	ee77 7a27 	vadd.f32	s15, s14, s15
200063c2:	687b      	ldr	r3, [r7, #4]
200063c4:	edc3 7a08 	vstr	s15, [r3, #32]
}
200063c8:	bf00      	nop
200063ca:	371c      	adds	r7, #28
200063cc:	46bd      	mov	sp, r7
200063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200063d2:	4770      	bx	lr

200063d4 <Inercja_s_init>:

void Inercja_s_init(Inercja_s* in,float  k, float t, float ti){
200063d4:	b480      	push	{r7}
200063d6:	b085      	sub	sp, #20
200063d8:	af00      	add	r7, sp, #0
200063da:	60f8      	str	r0, [r7, #12]
200063dc:	ed87 0a02 	vstr	s0, [r7, #8]
200063e0:	edc7 0a01 	vstr	s1, [r7, #4]
200063e4:	ed87 1a00 	vstr	s2, [r7]
    in->last_input = 0;
200063e8:	68fb      	ldr	r3, [r7, #12]
200063ea:	f04f 0200 	mov.w	r2, #0
200063ee:	601a      	str	r2, [r3, #0]
    in->kp = k;
200063f0:	68fb      	ldr	r3, [r7, #12]
200063f2:	68ba      	ldr	r2, [r7, #8]
200063f4:	605a      	str	r2, [r3, #4]
    in->ts = t;
200063f6:	68fb      	ldr	r3, [r7, #12]
200063f8:	687a      	ldr	r2, [r7, #4]
200063fa:	60da      	str	r2, [r3, #12]
    in->tin = ti;
200063fc:	68fb      	ldr	r3, [r7, #12]
200063fe:	683a      	ldr	r2, [r7, #0]
20006400:	609a      	str	r2, [r3, #8]
}
20006402:	bf00      	nop
20006404:	3714      	adds	r7, #20
20006406:	46bd      	mov	sp, r7
20006408:	f85d 7b04 	ldr.w	r7, [sp], #4
2000640c:	4770      	bx	lr

2000640e <Inercja_s_step>:

void Inercja_s_step(Inercja_s* in){
2000640e:	b480      	push	{r7}
20006410:	b083      	sub	sp, #12
20006412:	af00      	add	r7, sp, #0
20006414:	6078      	str	r0, [r7, #4]
    //local out =  (Tp / (5 + Tp)) * enter + (5 / (5 + Tp)) * last           -- 1/(5s+1)
    //local out = ((Tp / (3 + Tp)) * enter + (3 / (3 + Tp)) * last/2)*2     -- 2/(3s+1)
    in->output = ((in->ts / (in->tin + in->ts)) * in->input + (in->tin / (in->tin + in->ts)) * in->last_input/in->kp)*in->kp;
20006416:	687b      	ldr	r3, [r7, #4]
20006418:	edd3 6a03 	vldr	s13, [r3, #12]
2000641c:	687b      	ldr	r3, [r7, #4]
2000641e:	ed93 7a02 	vldr	s14, [r3, #8]
20006422:	687b      	ldr	r3, [r7, #4]
20006424:	edd3 7a03 	vldr	s15, [r3, #12]
20006428:	ee77 7a27 	vadd.f32	s15, s14, s15
2000642c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20006430:	687b      	ldr	r3, [r7, #4]
20006432:	edd3 7a05 	vldr	s15, [r3, #20]
20006436:	ee27 7a27 	vmul.f32	s14, s14, s15
2000643a:	687b      	ldr	r3, [r7, #4]
2000643c:	ed93 6a02 	vldr	s12, [r3, #8]
20006440:	687b      	ldr	r3, [r7, #4]
20006442:	edd3 6a02 	vldr	s13, [r3, #8]
20006446:	687b      	ldr	r3, [r7, #4]
20006448:	edd3 7a03 	vldr	s15, [r3, #12]
2000644c:	ee76 7aa7 	vadd.f32	s15, s13, s15
20006450:	eec6 6a27 	vdiv.f32	s13, s12, s15
20006454:	687b      	ldr	r3, [r7, #4]
20006456:	edd3 7a00 	vldr	s15, [r3]
2000645a:	ee26 6aa7 	vmul.f32	s12, s13, s15
2000645e:	687b      	ldr	r3, [r7, #4]
20006460:	edd3 6a01 	vldr	s13, [r3, #4]
20006464:	eec6 7a26 	vdiv.f32	s15, s12, s13
20006468:	ee37 7a27 	vadd.f32	s14, s14, s15
2000646c:	687b      	ldr	r3, [r7, #4]
2000646e:	edd3 7a01 	vldr	s15, [r3, #4]
20006472:	ee67 7a27 	vmul.f32	s15, s14, s15
20006476:	687b      	ldr	r3, [r7, #4]
20006478:	edc3 7a04 	vstr	s15, [r3, #16]
    in->last_input = in->input;
2000647c:	687b      	ldr	r3, [r7, #4]
2000647e:	695a      	ldr	r2, [r3, #20]
20006480:	687b      	ldr	r3, [r7, #4]
20006482:	601a      	str	r2, [r3, #0]
20006484:	bf00      	nop
20006486:	370c      	adds	r7, #12
20006488:	46bd      	mov	sp, r7
2000648a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000648e:	4770      	bx	lr

20006490 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
20006490:	b480      	push	{r7}
20006492:	b085      	sub	sp, #20
20006494:	af00      	add	r7, sp, #0
20006496:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
20006498:	4b08      	ldr	r3, [pc, #32]	; (200064bc <LL_AHB2_GRP1_EnableClock+0x2c>)
2000649a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
2000649c:	4907      	ldr	r1, [pc, #28]	; (200064bc <LL_AHB2_GRP1_EnableClock+0x2c>)
2000649e:	687b      	ldr	r3, [r7, #4]
200064a0:	4313      	orrs	r3, r2
200064a2:	634b      	str	r3, [r1, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
200064a4:	4b05      	ldr	r3, [pc, #20]	; (200064bc <LL_AHB2_GRP1_EnableClock+0x2c>)
200064a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
200064a8:	687b      	ldr	r3, [r7, #4]
200064aa:	4013      	ands	r3, r2
200064ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
200064ae:	68fb      	ldr	r3, [r7, #12]
}
200064b0:	bf00      	nop
200064b2:	3714      	adds	r7, #20
200064b4:	46bd      	mov	sp, r7
200064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200064ba:	4770      	bx	lr
200064bc:	40023800 	.word	0x40023800

200064c0 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
200064c0:	b480      	push	{r7}
200064c2:	b083      	sub	sp, #12
200064c4:	af00      	add	r7, sp, #0
200064c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
200064c8:	687b      	ldr	r3, [r7, #4]
200064ca:	681b      	ldr	r3, [r3, #0]
200064cc:	f043 0204 	orr.w	r2, r3, #4
200064d0:	687b      	ldr	r3, [r7, #4]
200064d2:	601a      	str	r2, [r3, #0]
}
200064d4:	bf00      	nop
200064d6:	370c      	adds	r7, #12
200064d8:	46bd      	mov	sp, r7
200064da:	f85d 7b04 	ldr.w	r7, [sp], #4
200064de:	4770      	bx	lr

200064e0 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
200064e0:	b580      	push	{r7, lr}
200064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
200064e4:	2040      	movs	r0, #64	; 0x40
200064e6:	f7ff ffd3 	bl	20006490 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  LL_RNG_Enable(RNG);
200064ea:	4802      	ldr	r0, [pc, #8]	; (200064f4 <MX_RNG_Init+0x14>)
200064ec:	f7ff ffe8 	bl	200064c0 <LL_RNG_Enable>
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
200064f0:	bf00      	nop
200064f2:	bd80      	pop	{r7, pc}
200064f4:	50060800 	.word	0x50060800

200064f8 <LL_DMA_SetDataTransferDirection>:
{
200064f8:	b480      	push	{r7}
200064fa:	b085      	sub	sp, #20
200064fc:	af00      	add	r7, sp, #0
200064fe:	60f8      	str	r0, [r7, #12]
20006500:	60b9      	str	r1, [r7, #8]
20006502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
20006504:	4a0d      	ldr	r2, [pc, #52]	; (2000653c <LL_DMA_SetDataTransferDirection+0x44>)
20006506:	68bb      	ldr	r3, [r7, #8]
20006508:	4413      	add	r3, r2
2000650a:	781b      	ldrb	r3, [r3, #0]
2000650c:	461a      	mov	r2, r3
2000650e:	68fb      	ldr	r3, [r7, #12]
20006510:	4413      	add	r3, r2
20006512:	681b      	ldr	r3, [r3, #0]
20006514:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
20006518:	4908      	ldr	r1, [pc, #32]	; (2000653c <LL_DMA_SetDataTransferDirection+0x44>)
2000651a:	68bb      	ldr	r3, [r7, #8]
2000651c:	440b      	add	r3, r1
2000651e:	781b      	ldrb	r3, [r3, #0]
20006520:	4619      	mov	r1, r3
20006522:	68fb      	ldr	r3, [r7, #12]
20006524:	440b      	add	r3, r1
20006526:	4619      	mov	r1, r3
20006528:	687b      	ldr	r3, [r7, #4]
2000652a:	4313      	orrs	r3, r2
2000652c:	600b      	str	r3, [r1, #0]
}
2000652e:	bf00      	nop
20006530:	3714      	adds	r7, #20
20006532:	46bd      	mov	sp, r7
20006534:	f85d 7b04 	ldr.w	r7, [sp], #4
20006538:	4770      	bx	lr
2000653a:	bf00      	nop
2000653c:	2000abb8 	.word	0x2000abb8

20006540 <LL_DMA_SetMode>:
{
20006540:	b480      	push	{r7}
20006542:	b085      	sub	sp, #20
20006544:	af00      	add	r7, sp, #0
20006546:	60f8      	str	r0, [r7, #12]
20006548:	60b9      	str	r1, [r7, #8]
2000654a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
2000654c:	4a0d      	ldr	r2, [pc, #52]	; (20006584 <LL_DMA_SetMode+0x44>)
2000654e:	68bb      	ldr	r3, [r7, #8]
20006550:	4413      	add	r3, r2
20006552:	781b      	ldrb	r3, [r3, #0]
20006554:	461a      	mov	r2, r3
20006556:	68fb      	ldr	r3, [r7, #12]
20006558:	4413      	add	r3, r2
2000655a:	681b      	ldr	r3, [r3, #0]
2000655c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
20006560:	4908      	ldr	r1, [pc, #32]	; (20006584 <LL_DMA_SetMode+0x44>)
20006562:	68bb      	ldr	r3, [r7, #8]
20006564:	440b      	add	r3, r1
20006566:	781b      	ldrb	r3, [r3, #0]
20006568:	4619      	mov	r1, r3
2000656a:	68fb      	ldr	r3, [r7, #12]
2000656c:	440b      	add	r3, r1
2000656e:	4619      	mov	r1, r3
20006570:	687b      	ldr	r3, [r7, #4]
20006572:	4313      	orrs	r3, r2
20006574:	600b      	str	r3, [r1, #0]
}
20006576:	bf00      	nop
20006578:	3714      	adds	r7, #20
2000657a:	46bd      	mov	sp, r7
2000657c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006580:	4770      	bx	lr
20006582:	bf00      	nop
20006584:	2000abb8 	.word	0x2000abb8

20006588 <LL_DMA_SetPeriphIncMode>:
{
20006588:	b480      	push	{r7}
2000658a:	b085      	sub	sp, #20
2000658c:	af00      	add	r7, sp, #0
2000658e:	60f8      	str	r0, [r7, #12]
20006590:	60b9      	str	r1, [r7, #8]
20006592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
20006594:	4a0d      	ldr	r2, [pc, #52]	; (200065cc <LL_DMA_SetPeriphIncMode+0x44>)
20006596:	68bb      	ldr	r3, [r7, #8]
20006598:	4413      	add	r3, r2
2000659a:	781b      	ldrb	r3, [r3, #0]
2000659c:	461a      	mov	r2, r3
2000659e:	68fb      	ldr	r3, [r7, #12]
200065a0:	4413      	add	r3, r2
200065a2:	681b      	ldr	r3, [r3, #0]
200065a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
200065a8:	4908      	ldr	r1, [pc, #32]	; (200065cc <LL_DMA_SetPeriphIncMode+0x44>)
200065aa:	68bb      	ldr	r3, [r7, #8]
200065ac:	440b      	add	r3, r1
200065ae:	781b      	ldrb	r3, [r3, #0]
200065b0:	4619      	mov	r1, r3
200065b2:	68fb      	ldr	r3, [r7, #12]
200065b4:	440b      	add	r3, r1
200065b6:	4619      	mov	r1, r3
200065b8:	687b      	ldr	r3, [r7, #4]
200065ba:	4313      	orrs	r3, r2
200065bc:	600b      	str	r3, [r1, #0]
}
200065be:	bf00      	nop
200065c0:	3714      	adds	r7, #20
200065c2:	46bd      	mov	sp, r7
200065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200065c8:	4770      	bx	lr
200065ca:	bf00      	nop
200065cc:	2000abb8 	.word	0x2000abb8

200065d0 <LL_DMA_SetMemoryIncMode>:
{
200065d0:	b480      	push	{r7}
200065d2:	b085      	sub	sp, #20
200065d4:	af00      	add	r7, sp, #0
200065d6:	60f8      	str	r0, [r7, #12]
200065d8:	60b9      	str	r1, [r7, #8]
200065da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
200065dc:	4a0d      	ldr	r2, [pc, #52]	; (20006614 <LL_DMA_SetMemoryIncMode+0x44>)
200065de:	68bb      	ldr	r3, [r7, #8]
200065e0:	4413      	add	r3, r2
200065e2:	781b      	ldrb	r3, [r3, #0]
200065e4:	461a      	mov	r2, r3
200065e6:	68fb      	ldr	r3, [r7, #12]
200065e8:	4413      	add	r3, r2
200065ea:	681b      	ldr	r3, [r3, #0]
200065ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
200065f0:	4908      	ldr	r1, [pc, #32]	; (20006614 <LL_DMA_SetMemoryIncMode+0x44>)
200065f2:	68bb      	ldr	r3, [r7, #8]
200065f4:	440b      	add	r3, r1
200065f6:	781b      	ldrb	r3, [r3, #0]
200065f8:	4619      	mov	r1, r3
200065fa:	68fb      	ldr	r3, [r7, #12]
200065fc:	440b      	add	r3, r1
200065fe:	4619      	mov	r1, r3
20006600:	687b      	ldr	r3, [r7, #4]
20006602:	4313      	orrs	r3, r2
20006604:	600b      	str	r3, [r1, #0]
}
20006606:	bf00      	nop
20006608:	3714      	adds	r7, #20
2000660a:	46bd      	mov	sp, r7
2000660c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006610:	4770      	bx	lr
20006612:	bf00      	nop
20006614:	2000abb8 	.word	0x2000abb8

20006618 <LL_DMA_SetPeriphSize>:
{
20006618:	b480      	push	{r7}
2000661a:	b085      	sub	sp, #20
2000661c:	af00      	add	r7, sp, #0
2000661e:	60f8      	str	r0, [r7, #12]
20006620:	60b9      	str	r1, [r7, #8]
20006622:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
20006624:	4a0d      	ldr	r2, [pc, #52]	; (2000665c <LL_DMA_SetPeriphSize+0x44>)
20006626:	68bb      	ldr	r3, [r7, #8]
20006628:	4413      	add	r3, r2
2000662a:	781b      	ldrb	r3, [r3, #0]
2000662c:	461a      	mov	r2, r3
2000662e:	68fb      	ldr	r3, [r7, #12]
20006630:	4413      	add	r3, r2
20006632:	681b      	ldr	r3, [r3, #0]
20006634:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
20006638:	4908      	ldr	r1, [pc, #32]	; (2000665c <LL_DMA_SetPeriphSize+0x44>)
2000663a:	68bb      	ldr	r3, [r7, #8]
2000663c:	440b      	add	r3, r1
2000663e:	781b      	ldrb	r3, [r3, #0]
20006640:	4619      	mov	r1, r3
20006642:	68fb      	ldr	r3, [r7, #12]
20006644:	440b      	add	r3, r1
20006646:	4619      	mov	r1, r3
20006648:	687b      	ldr	r3, [r7, #4]
2000664a:	4313      	orrs	r3, r2
2000664c:	600b      	str	r3, [r1, #0]
}
2000664e:	bf00      	nop
20006650:	3714      	adds	r7, #20
20006652:	46bd      	mov	sp, r7
20006654:	f85d 7b04 	ldr.w	r7, [sp], #4
20006658:	4770      	bx	lr
2000665a:	bf00      	nop
2000665c:	2000abb8 	.word	0x2000abb8

20006660 <LL_DMA_SetMemorySize>:
{
20006660:	b480      	push	{r7}
20006662:	b085      	sub	sp, #20
20006664:	af00      	add	r7, sp, #0
20006666:	60f8      	str	r0, [r7, #12]
20006668:	60b9      	str	r1, [r7, #8]
2000666a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
2000666c:	4a0d      	ldr	r2, [pc, #52]	; (200066a4 <LL_DMA_SetMemorySize+0x44>)
2000666e:	68bb      	ldr	r3, [r7, #8]
20006670:	4413      	add	r3, r2
20006672:	781b      	ldrb	r3, [r3, #0]
20006674:	461a      	mov	r2, r3
20006676:	68fb      	ldr	r3, [r7, #12]
20006678:	4413      	add	r3, r2
2000667a:	681b      	ldr	r3, [r3, #0]
2000667c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
20006680:	4908      	ldr	r1, [pc, #32]	; (200066a4 <LL_DMA_SetMemorySize+0x44>)
20006682:	68bb      	ldr	r3, [r7, #8]
20006684:	440b      	add	r3, r1
20006686:	781b      	ldrb	r3, [r3, #0]
20006688:	4619      	mov	r1, r3
2000668a:	68fb      	ldr	r3, [r7, #12]
2000668c:	440b      	add	r3, r1
2000668e:	4619      	mov	r1, r3
20006690:	687b      	ldr	r3, [r7, #4]
20006692:	4313      	orrs	r3, r2
20006694:	600b      	str	r3, [r1, #0]
}
20006696:	bf00      	nop
20006698:	3714      	adds	r7, #20
2000669a:	46bd      	mov	sp, r7
2000669c:	f85d 7b04 	ldr.w	r7, [sp], #4
200066a0:	4770      	bx	lr
200066a2:	bf00      	nop
200066a4:	2000abb8 	.word	0x2000abb8

200066a8 <LL_DMA_SetStreamPriorityLevel>:
{
200066a8:	b480      	push	{r7}
200066aa:	b085      	sub	sp, #20
200066ac:	af00      	add	r7, sp, #0
200066ae:	60f8      	str	r0, [r7, #12]
200066b0:	60b9      	str	r1, [r7, #8]
200066b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
200066b4:	4a0d      	ldr	r2, [pc, #52]	; (200066ec <LL_DMA_SetStreamPriorityLevel+0x44>)
200066b6:	68bb      	ldr	r3, [r7, #8]
200066b8:	4413      	add	r3, r2
200066ba:	781b      	ldrb	r3, [r3, #0]
200066bc:	461a      	mov	r2, r3
200066be:	68fb      	ldr	r3, [r7, #12]
200066c0:	4413      	add	r3, r2
200066c2:	681b      	ldr	r3, [r3, #0]
200066c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
200066c8:	4908      	ldr	r1, [pc, #32]	; (200066ec <LL_DMA_SetStreamPriorityLevel+0x44>)
200066ca:	68bb      	ldr	r3, [r7, #8]
200066cc:	440b      	add	r3, r1
200066ce:	781b      	ldrb	r3, [r3, #0]
200066d0:	4619      	mov	r1, r3
200066d2:	68fb      	ldr	r3, [r7, #12]
200066d4:	440b      	add	r3, r1
200066d6:	4619      	mov	r1, r3
200066d8:	687b      	ldr	r3, [r7, #4]
200066da:	4313      	orrs	r3, r2
200066dc:	600b      	str	r3, [r1, #0]
}
200066de:	bf00      	nop
200066e0:	3714      	adds	r7, #20
200066e2:	46bd      	mov	sp, r7
200066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200066e8:	4770      	bx	lr
200066ea:	bf00      	nop
200066ec:	2000abb8 	.word	0x2000abb8

200066f0 <LL_DMA_SetChannelSelection>:
{
200066f0:	b480      	push	{r7}
200066f2:	b085      	sub	sp, #20
200066f4:	af00      	add	r7, sp, #0
200066f6:	60f8      	str	r0, [r7, #12]
200066f8:	60b9      	str	r1, [r7, #8]
200066fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
200066fc:	4a0d      	ldr	r2, [pc, #52]	; (20006734 <LL_DMA_SetChannelSelection+0x44>)
200066fe:	68bb      	ldr	r3, [r7, #8]
20006700:	4413      	add	r3, r2
20006702:	781b      	ldrb	r3, [r3, #0]
20006704:	461a      	mov	r2, r3
20006706:	68fb      	ldr	r3, [r7, #12]
20006708:	4413      	add	r3, r2
2000670a:	681b      	ldr	r3, [r3, #0]
2000670c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
20006710:	4908      	ldr	r1, [pc, #32]	; (20006734 <LL_DMA_SetChannelSelection+0x44>)
20006712:	68bb      	ldr	r3, [r7, #8]
20006714:	440b      	add	r3, r1
20006716:	781b      	ldrb	r3, [r3, #0]
20006718:	4619      	mov	r1, r3
2000671a:	68fb      	ldr	r3, [r7, #12]
2000671c:	440b      	add	r3, r1
2000671e:	4619      	mov	r1, r3
20006720:	687b      	ldr	r3, [r7, #4]
20006722:	4313      	orrs	r3, r2
20006724:	600b      	str	r3, [r1, #0]
}
20006726:	bf00      	nop
20006728:	3714      	adds	r7, #20
2000672a:	46bd      	mov	sp, r7
2000672c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006730:	4770      	bx	lr
20006732:	bf00      	nop
20006734:	2000abb8 	.word	0x2000abb8

20006738 <LL_DMA_DisableFifoMode>:
{
20006738:	b480      	push	{r7}
2000673a:	b083      	sub	sp, #12
2000673c:	af00      	add	r7, sp, #0
2000673e:	6078      	str	r0, [r7, #4]
20006740:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
20006742:	4a0c      	ldr	r2, [pc, #48]	; (20006774 <LL_DMA_DisableFifoMode+0x3c>)
20006744:	683b      	ldr	r3, [r7, #0]
20006746:	4413      	add	r3, r2
20006748:	781b      	ldrb	r3, [r3, #0]
2000674a:	461a      	mov	r2, r3
2000674c:	687b      	ldr	r3, [r7, #4]
2000674e:	4413      	add	r3, r2
20006750:	695b      	ldr	r3, [r3, #20]
20006752:	4908      	ldr	r1, [pc, #32]	; (20006774 <LL_DMA_DisableFifoMode+0x3c>)
20006754:	683a      	ldr	r2, [r7, #0]
20006756:	440a      	add	r2, r1
20006758:	7812      	ldrb	r2, [r2, #0]
2000675a:	4611      	mov	r1, r2
2000675c:	687a      	ldr	r2, [r7, #4]
2000675e:	440a      	add	r2, r1
20006760:	f023 0304 	bic.w	r3, r3, #4
20006764:	6153      	str	r3, [r2, #20]
}
20006766:	bf00      	nop
20006768:	370c      	adds	r7, #12
2000676a:	46bd      	mov	sp, r7
2000676c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006770:	4770      	bx	lr
20006772:	bf00      	nop
20006774:	2000abb8 	.word	0x2000abb8

20006778 <LL_AHB1_GRP1_EnableClock>:
{
20006778:	b480      	push	{r7}
2000677a:	b085      	sub	sp, #20
2000677c:	af00      	add	r7, sp, #0
2000677e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
20006780:	4b08      	ldr	r3, [pc, #32]	; (200067a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
20006782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006784:	4907      	ldr	r1, [pc, #28]	; (200067a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
20006786:	687b      	ldr	r3, [r7, #4]
20006788:	4313      	orrs	r3, r2
2000678a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
2000678c:	4b05      	ldr	r3, [pc, #20]	; (200067a4 <LL_AHB1_GRP1_EnableClock+0x2c>)
2000678e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006790:	687b      	ldr	r3, [r7, #4]
20006792:	4013      	ands	r3, r2
20006794:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20006796:	68fb      	ldr	r3, [r7, #12]
}
20006798:	bf00      	nop
2000679a:	3714      	adds	r7, #20
2000679c:	46bd      	mov	sp, r7
2000679e:	f85d 7b04 	ldr.w	r7, [sp], #4
200067a2:	4770      	bx	lr
200067a4:	40023800 	.word	0x40023800

200067a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
200067a8:	b480      	push	{r7}
200067aa:	b085      	sub	sp, #20
200067ac:	af00      	add	r7, sp, #0
200067ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
200067b0:	4b08      	ldr	r3, [pc, #32]	; (200067d4 <LL_APB2_GRP1_EnableClock+0x2c>)
200067b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200067b4:	4907      	ldr	r1, [pc, #28]	; (200067d4 <LL_APB2_GRP1_EnableClock+0x2c>)
200067b6:	687b      	ldr	r3, [r7, #4]
200067b8:	4313      	orrs	r3, r2
200067ba:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
200067bc:	4b05      	ldr	r3, [pc, #20]	; (200067d4 <LL_APB2_GRP1_EnableClock+0x2c>)
200067be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200067c0:	687b      	ldr	r3, [r7, #4]
200067c2:	4013      	ands	r3, r2
200067c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
200067c6:	68fb      	ldr	r3, [r7, #12]
}
200067c8:	bf00      	nop
200067ca:	3714      	adds	r7, #20
200067cc:	46bd      	mov	sp, r7
200067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200067d2:	4770      	bx	lr
200067d4:	40023800 	.word	0x40023800

200067d8 <LL_SPI_SetStandard>:
{
200067d8:	b480      	push	{r7}
200067da:	b083      	sub	sp, #12
200067dc:	af00      	add	r7, sp, #0
200067de:	6078      	str	r0, [r7, #4]
200067e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
200067e2:	687b      	ldr	r3, [r7, #4]
200067e4:	685b      	ldr	r3, [r3, #4]
200067e6:	f023 0210 	bic.w	r2, r3, #16
200067ea:	683b      	ldr	r3, [r7, #0]
200067ec:	431a      	orrs	r2, r3
200067ee:	687b      	ldr	r3, [r7, #4]
200067f0:	605a      	str	r2, [r3, #4]
}
200067f2:	bf00      	nop
200067f4:	370c      	adds	r7, #12
200067f6:	46bd      	mov	sp, r7
200067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200067fc:	4770      	bx	lr
	...

20006800 <MX_SPI5_Init>:

/* USER CODE END 0 */

/* SPI5 init function */
void MX_SPI5_Init(void)
{
20006800:	b580      	push	{r7, lr}
20006802:	b090      	sub	sp, #64	; 0x40
20006804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
20006806:	f107 0318 	add.w	r3, r7, #24
2000680a:	2228      	movs	r2, #40	; 0x28
2000680c:	2100      	movs	r1, #0
2000680e:	4618      	mov	r0, r3
20006810:	f000 f9e4 	bl	20006bdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
20006814:	463b      	mov	r3, r7
20006816:	2200      	movs	r2, #0
20006818:	601a      	str	r2, [r3, #0]
2000681a:	605a      	str	r2, [r3, #4]
2000681c:	609a      	str	r2, [r3, #8]
2000681e:	60da      	str	r2, [r3, #12]
20006820:	611a      	str	r2, [r3, #16]
20006822:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
20006824:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
20006828:	f7ff ffbe 	bl	200067a8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
2000682c:	2020      	movs	r0, #32
2000682e:	f7ff ffa3 	bl	20006778 <LL_AHB1_GRP1_EnableClock>
  /**SPI5 GPIO Configuration
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
20006832:	f44f 7360 	mov.w	r3, #896	; 0x380
20006836:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
20006838:	2302      	movs	r3, #2
2000683a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
2000683c:	2303      	movs	r3, #3
2000683e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20006840:	2300      	movs	r3, #0
20006842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20006844:	2300      	movs	r3, #0
20006846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
20006848:	2305      	movs	r3, #5
2000684a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
2000684c:	463b      	mov	r3, r7
2000684e:	4619      	mov	r1, r3
20006850:	482a      	ldr	r0, [pc, #168]	; (200068fc <MX_SPI5_Init+0xfc>)
20006852:	f7fa f9ea 	bl	20000c2a <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
20006856:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
2000685a:	2104      	movs	r1, #4
2000685c:	4828      	ldr	r0, [pc, #160]	; (20006900 <MX_SPI5_Init+0x100>)
2000685e:	f7ff ff47 	bl	200066f0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
20006862:	2240      	movs	r2, #64	; 0x40
20006864:	2104      	movs	r1, #4
20006866:	4826      	ldr	r0, [pc, #152]	; (20006900 <MX_SPI5_Init+0x100>)
20006868:	f7ff fe46 	bl	200064f8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
2000686c:	2200      	movs	r2, #0
2000686e:	2104      	movs	r1, #4
20006870:	4823      	ldr	r0, [pc, #140]	; (20006900 <MX_SPI5_Init+0x100>)
20006872:	f7ff ff19 	bl	200066a8 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_CIRCULAR);
20006876:	f44f 7280 	mov.w	r2, #256	; 0x100
2000687a:	2104      	movs	r1, #4
2000687c:	4820      	ldr	r0, [pc, #128]	; (20006900 <MX_SPI5_Init+0x100>)
2000687e:	f7ff fe5f 	bl	20006540 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
20006882:	2200      	movs	r2, #0
20006884:	2104      	movs	r1, #4
20006886:	481e      	ldr	r0, [pc, #120]	; (20006900 <MX_SPI5_Init+0x100>)
20006888:	f7ff fe7e 	bl	20006588 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
2000688c:	f44f 6280 	mov.w	r2, #1024	; 0x400
20006890:	2104      	movs	r1, #4
20006892:	481b      	ldr	r0, [pc, #108]	; (20006900 <MX_SPI5_Init+0x100>)
20006894:	f7ff fe9c 	bl	200065d0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
20006898:	2200      	movs	r2, #0
2000689a:	2104      	movs	r1, #4
2000689c:	4818      	ldr	r0, [pc, #96]	; (20006900 <MX_SPI5_Init+0x100>)
2000689e:	f7ff febb 	bl	20006618 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
200068a2:	2200      	movs	r2, #0
200068a4:	2104      	movs	r1, #4
200068a6:	4816      	ldr	r0, [pc, #88]	; (20006900 <MX_SPI5_Init+0x100>)
200068a8:	f7ff feda 	bl	20006660 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
200068ac:	2104      	movs	r1, #4
200068ae:	4814      	ldr	r0, [pc, #80]	; (20006900 <MX_SPI5_Init+0x100>)
200068b0:	f7ff ff42 	bl	20006738 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
200068b4:	2300      	movs	r3, #0
200068b6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
200068b8:	f44f 7382 	mov.w	r3, #260	; 0x104
200068bc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
200068be:	2300      	movs	r3, #0
200068c0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
200068c2:	2300      	movs	r3, #0
200068c4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
200068c6:	2300      	movs	r3, #0
200068c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
200068ca:	f44f 7300 	mov.w	r3, #512	; 0x200
200068ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
200068d0:	2300      	movs	r3, #0
200068d2:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
200068d4:	2300      	movs	r3, #0
200068d6:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
200068d8:	2300      	movs	r3, #0
200068da:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
200068dc:	230a      	movs	r3, #10
200068de:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
200068e0:	f107 0318 	add.w	r3, r7, #24
200068e4:	4619      	mov	r1, r3
200068e6:	4807      	ldr	r0, [pc, #28]	; (20006904 <MX_SPI5_Init+0x104>)
200068e8:	f7fa fa35 	bl	20000d56 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
200068ec:	2100      	movs	r1, #0
200068ee:	4805      	ldr	r0, [pc, #20]	; (20006904 <MX_SPI5_Init+0x104>)
200068f0:	f7ff ff72 	bl	200067d8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
200068f4:	bf00      	nop
200068f6:	3740      	adds	r7, #64	; 0x40
200068f8:	46bd      	mov	sp, r7
200068fa:	bd80      	pop	{r7, pc}
200068fc:	40021400 	.word	0x40021400
20006900:	40026400 	.word	0x40026400
20006904:	40015000 	.word	0x40015000

20006908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20006908:	b580      	push	{r7, lr}
2000690a:	b082      	sub	sp, #8
2000690c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000690e:	2300      	movs	r3, #0
20006910:	607b      	str	r3, [r7, #4]
20006912:	4b12      	ldr	r3, [pc, #72]	; (2000695c <HAL_MspInit+0x54>)
20006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006916:	4a11      	ldr	r2, [pc, #68]	; (2000695c <HAL_MspInit+0x54>)
20006918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000691c:	6453      	str	r3, [r2, #68]	; 0x44
2000691e:	4b0f      	ldr	r3, [pc, #60]	; (2000695c <HAL_MspInit+0x54>)
20006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20006922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20006926:	607b      	str	r3, [r7, #4]
20006928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000692a:	2300      	movs	r3, #0
2000692c:	603b      	str	r3, [r7, #0]
2000692e:	4b0b      	ldr	r3, [pc, #44]	; (2000695c <HAL_MspInit+0x54>)
20006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006932:	4a0a      	ldr	r2, [pc, #40]	; (2000695c <HAL_MspInit+0x54>)
20006934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20006938:	6413      	str	r3, [r2, #64]	; 0x40
2000693a:	4b08      	ldr	r3, [pc, #32]	; (2000695c <HAL_MspInit+0x54>)
2000693c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20006942:	603b      	str	r3, [r7, #0]
20006944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
20006946:	2200      	movs	r2, #0
20006948:	210f      	movs	r1, #15
2000694a:	f06f 0001 	mvn.w	r0, #1
2000694e:	f7f9 fd3d 	bl	200003cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20006952:	bf00      	nop
20006954:	3708      	adds	r7, #8
20006956:	46bd      	mov	sp, r7
20006958:	bd80      	pop	{r7, pc}
2000695a:	bf00      	nop
2000695c:	40023800 	.word	0x40023800

20006960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20006960:	b580      	push	{r7, lr}
20006962:	b08c      	sub	sp, #48	; 0x30
20006964:	af00      	add	r7, sp, #0
20006966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
20006968:	2300      	movs	r3, #0
2000696a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
2000696c:	2300      	movs	r3, #0
2000696e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
20006970:	2200      	movs	r2, #0
20006972:	6879      	ldr	r1, [r7, #4]
20006974:	2036      	movs	r0, #54	; 0x36
20006976:	f7f9 fd29 	bl	200003cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
2000697a:	2036      	movs	r0, #54	; 0x36
2000697c:	f7f9 fd42 	bl	20000404 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
20006980:	2300      	movs	r3, #0
20006982:	60fb      	str	r3, [r7, #12]
20006984:	4b1f      	ldr	r3, [pc, #124]	; (20006a04 <HAL_InitTick+0xa4>)
20006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006988:	4a1e      	ldr	r2, [pc, #120]	; (20006a04 <HAL_InitTick+0xa4>)
2000698a:	f043 0310 	orr.w	r3, r3, #16
2000698e:	6413      	str	r3, [r2, #64]	; 0x40
20006990:	4b1c      	ldr	r3, [pc, #112]	; (20006a04 <HAL_InitTick+0xa4>)
20006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006994:	f003 0310 	and.w	r3, r3, #16
20006998:	60fb      	str	r3, [r7, #12]
2000699a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
2000699c:	f107 0210 	add.w	r2, r7, #16
200069a0:	f107 0314 	add.w	r3, r7, #20
200069a4:	4611      	mov	r1, r2
200069a6:	4618      	mov	r0, r3
200069a8:	f7f9 fd5a 	bl	20000460 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
200069ac:	f7f9 fd44 	bl	20000438 <HAL_RCC_GetPCLK1Freq>
200069b0:	4603      	mov	r3, r0
200069b2:	005b      	lsls	r3, r3, #1
200069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
200069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200069b8:	4a13      	ldr	r2, [pc, #76]	; (20006a08 <HAL_InitTick+0xa8>)
200069ba:	fba2 2303 	umull	r2, r3, r2, r3
200069be:	0c9b      	lsrs	r3, r3, #18
200069c0:	3b01      	subs	r3, #1
200069c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
200069c4:	4b11      	ldr	r3, [pc, #68]	; (20006a0c <HAL_InitTick+0xac>)
200069c6:	4a12      	ldr	r2, [pc, #72]	; (20006a10 <HAL_InitTick+0xb0>)
200069c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
200069ca:	4b10      	ldr	r3, [pc, #64]	; (20006a0c <HAL_InitTick+0xac>)
200069cc:	f240 32e7 	movw	r2, #999	; 0x3e7
200069d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
200069d2:	4a0e      	ldr	r2, [pc, #56]	; (20006a0c <HAL_InitTick+0xac>)
200069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
200069d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
200069d8:	4b0c      	ldr	r3, [pc, #48]	; (20006a0c <HAL_InitTick+0xac>)
200069da:	2200      	movs	r2, #0
200069dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
200069de:	4b0b      	ldr	r3, [pc, #44]	; (20006a0c <HAL_InitTick+0xac>)
200069e0:	2200      	movs	r2, #0
200069e2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
200069e4:	4809      	ldr	r0, [pc, #36]	; (20006a0c <HAL_InitTick+0xac>)
200069e6:	f7f9 fd6d 	bl	200004c4 <HAL_TIM_Base_Init>
200069ea:	4603      	mov	r3, r0
200069ec:	2b00      	cmp	r3, #0
200069ee:	d104      	bne.n	200069fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
200069f0:	4806      	ldr	r0, [pc, #24]	; (20006a0c <HAL_InitTick+0xac>)
200069f2:	f7f9 fdc1 	bl	20000578 <HAL_TIM_Base_Start_IT>
200069f6:	4603      	mov	r3, r0
200069f8:	e000      	b.n	200069fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
200069fa:	2301      	movs	r3, #1
}
200069fc:	4618      	mov	r0, r3
200069fe:	3730      	adds	r7, #48	; 0x30
20006a00:	46bd      	mov	sp, r7
20006a02:	bd80      	pop	{r7, pc}
20006a04:	40023800 	.word	0x40023800
20006a08:	431bde83 	.word	0x431bde83
20006a0c:	2001f788 	.word	0x2001f788
20006a10:	40001000 	.word	0x40001000

20006a14 <LL_DMA_IsActiveFlag_TC4>:
{
20006a14:	b480      	push	{r7}
20006a16:	b083      	sub	sp, #12
20006a18:	af00      	add	r7, sp, #0
20006a1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
20006a1c:	687b      	ldr	r3, [r7, #4]
20006a1e:	685b      	ldr	r3, [r3, #4]
20006a20:	f003 0320 	and.w	r3, r3, #32
20006a24:	2b20      	cmp	r3, #32
20006a26:	bf0c      	ite	eq
20006a28:	2301      	moveq	r3, #1
20006a2a:	2300      	movne	r3, #0
20006a2c:	b2db      	uxtb	r3, r3
}
20006a2e:	4618      	mov	r0, r3
20006a30:	370c      	adds	r7, #12
20006a32:	46bd      	mov	sp, r7
20006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
20006a38:	4770      	bx	lr

20006a3a <LL_DMA_IsActiveFlag_TE4>:
{
20006a3a:	b480      	push	{r7}
20006a3c:	b083      	sub	sp, #12
20006a3e:	af00      	add	r7, sp, #0
20006a40:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
20006a42:	687b      	ldr	r3, [r7, #4]
20006a44:	685b      	ldr	r3, [r3, #4]
20006a46:	f003 0308 	and.w	r3, r3, #8
20006a4a:	2b08      	cmp	r3, #8
20006a4c:	bf0c      	ite	eq
20006a4e:	2301      	moveq	r3, #1
20006a50:	2300      	movne	r3, #0
20006a52:	b2db      	uxtb	r3, r3
}
20006a54:	4618      	mov	r0, r3
20006a56:	370c      	adds	r7, #12
20006a58:	46bd      	mov	sp, r7
20006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
20006a5e:	4770      	bx	lr

20006a60 <LL_DMA_ClearFlag_TE4>:
{
20006a60:	b480      	push	{r7}
20006a62:	b083      	sub	sp, #12
20006a64:	af00      	add	r7, sp, #0
20006a66:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
20006a68:	687b      	ldr	r3, [r7, #4]
20006a6a:	2208      	movs	r2, #8
20006a6c:	60da      	str	r2, [r3, #12]
}
20006a6e:	bf00      	nop
20006a70:	370c      	adds	r7, #12
20006a72:	46bd      	mov	sp, r7
20006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
20006a78:	4770      	bx	lr

20006a7a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20006a7a:	b480      	push	{r7}
20006a7c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
20006a7e:	bf00      	nop
20006a80:	46bd      	mov	sp, r7
20006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
20006a86:	4770      	bx	lr

20006a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20006a88:	b480      	push	{r7}
20006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20006a8c:	e7fe      	b.n	20006a8c <HardFault_Handler+0x4>

20006a8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20006a8e:	b480      	push	{r7}
20006a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20006a92:	e7fe      	b.n	20006a92 <MemManage_Handler+0x4>

20006a94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20006a94:	b480      	push	{r7}
20006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20006a98:	e7fe      	b.n	20006a98 <BusFault_Handler+0x4>

20006a9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20006a9a:	b480      	push	{r7}
20006a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20006a9e:	e7fe      	b.n	20006a9e <UsageFault_Handler+0x4>

20006aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20006aa0:	b480      	push	{r7}
20006aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20006aa4:	bf00      	nop
20006aa6:	46bd      	mov	sp, r7
20006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
20006aac:	4770      	bx	lr
	...

20006ab0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
20006ab0:	b580      	push	{r7, lr}
20006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
20006ab4:	4802      	ldr	r0, [pc, #8]	; (20006ac0 <TIM6_DAC_IRQHandler+0x10>)
20006ab6:	f7f9 fdcf 	bl	20000658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
20006aba:	bf00      	nop
20006abc:	bd80      	pop	{r7, pc}
20006abe:	bf00      	nop
20006ac0:	2001f788 	.word	0x2001f788

20006ac4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
20006ac4:	b580      	push	{r7, lr}
20006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC4(DMA2) == 1)
20006ac8:	4809      	ldr	r0, [pc, #36]	; (20006af0 <DMA2_Stream4_IRQHandler+0x2c>)
20006aca:	f7ff ffa3 	bl	20006a14 <LL_DMA_IsActiveFlag_TC4>
20006ace:	4603      	mov	r3, r0
20006ad0:	2b01      	cmp	r3, #1
20006ad2:	d102      	bne.n	20006ada <DMA2_Stream4_IRQHandler+0x16>
  {
    DMA1_Stream4_TransferComplete();
20006ad4:	f7ff fafa 	bl	200060cc <DMA1_Stream4_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
  {
    LL_DMA_ClearFlag_TE4(DMA2);
  }
  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
20006ad8:	e008      	b.n	20006aec <DMA2_Stream4_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
20006ada:	4805      	ldr	r0, [pc, #20]	; (20006af0 <DMA2_Stream4_IRQHandler+0x2c>)
20006adc:	f7ff ffad 	bl	20006a3a <LL_DMA_IsActiveFlag_TE4>
20006ae0:	4603      	mov	r3, r0
20006ae2:	2b01      	cmp	r3, #1
20006ae4:	d102      	bne.n	20006aec <DMA2_Stream4_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE4(DMA2);
20006ae6:	4802      	ldr	r0, [pc, #8]	; (20006af0 <DMA2_Stream4_IRQHandler+0x2c>)
20006ae8:	f7ff ffba 	bl	20006a60 <LL_DMA_ClearFlag_TE4>
}
20006aec:	bf00      	nop
20006aee:	bd80      	pop	{r7, pc}
20006af0:	40026400 	.word	0x40026400

20006af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20006af4:	b480      	push	{r7}
20006af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20006af8:	4b08      	ldr	r3, [pc, #32]	; (20006b1c <SystemInit+0x28>)
20006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20006afe:	4a07      	ldr	r2, [pc, #28]	; (20006b1c <SystemInit+0x28>)
20006b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20006b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20006b08:	4b04      	ldr	r3, [pc, #16]	; (20006b1c <SystemInit+0x28>)
20006b0a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
20006b0e:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
20006b10:	bf00      	nop
20006b12:	46bd      	mov	sp, r7
20006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
20006b18:	4770      	bx	lr
20006b1a:	bf00      	nop
20006b1c:	e000ed00 	.word	0xe000ed00

20006b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
20006b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 20006b58 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
20006b24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
20006b26:	e003      	b.n	20006b30 <LoopCopyDataInit>

20006b28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
20006b28:	4b0c      	ldr	r3, [pc, #48]	; (20006b5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
20006b2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
20006b2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
20006b2e:	3104      	adds	r1, #4

20006b30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
20006b30:	480b      	ldr	r0, [pc, #44]	; (20006b60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
20006b32:	4b0c      	ldr	r3, [pc, #48]	; (20006b64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
20006b34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
20006b36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
20006b38:	d3f6      	bcc.n	20006b28 <CopyDataInit>
  ldr  r2, =_sbss
20006b3a:	4a0b      	ldr	r2, [pc, #44]	; (20006b68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
20006b3c:	e002      	b.n	20006b44 <LoopFillZerobss>

20006b3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
20006b3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
20006b40:	f842 3b04 	str.w	r3, [r2], #4

20006b44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
20006b44:	4b09      	ldr	r3, [pc, #36]	; (20006b6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
20006b46:	429a      	cmp	r2, r3
  bcc  FillZerobss
20006b48:	d3f9      	bcc.n	20006b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
20006b4a:	f7ff ffd3 	bl	20006af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20006b4e:	f000 f811 	bl	20006b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20006b52:	f7ff fa33 	bl	20005fbc <main>
  bx  lr    
20006b56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
20006b58:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
20006b5c:	2000ac30 	.word	0x2000ac30
  ldr  r0, =_sdata
20006b60:	2000ac30 	.word	0x2000ac30
  ldr  r3, =_edata
20006b64:	2000acd8 	.word	0x2000acd8
  ldr  r2, =_sbss
20006b68:	2000acd8 	.word	0x2000acd8
  ldr  r3, = _ebss
20006b6c:	2001f7d8 	.word	0x2001f7d8

20006b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20006b70:	e7fe      	b.n	20006b70 <ADC_IRQHandler>
	...

20006b74 <__libc_init_array>:
20006b74:	b570      	push	{r4, r5, r6, lr}
20006b76:	4d0d      	ldr	r5, [pc, #52]	; (20006bac <__libc_init_array+0x38>)
20006b78:	4c0d      	ldr	r4, [pc, #52]	; (20006bb0 <__libc_init_array+0x3c>)
20006b7a:	1b64      	subs	r4, r4, r5
20006b7c:	10a4      	asrs	r4, r4, #2
20006b7e:	2600      	movs	r6, #0
20006b80:	42a6      	cmp	r6, r4
20006b82:	d109      	bne.n	20006b98 <__libc_init_array+0x24>
20006b84:	4d0b      	ldr	r5, [pc, #44]	; (20006bb4 <__libc_init_array+0x40>)
20006b86:	4c0c      	ldr	r4, [pc, #48]	; (20006bb8 <__libc_init_array+0x44>)
20006b88:	f000 f8f2 	bl	20006d70 <_init>
20006b8c:	1b64      	subs	r4, r4, r5
20006b8e:	10a4      	asrs	r4, r4, #2
20006b90:	2600      	movs	r6, #0
20006b92:	42a6      	cmp	r6, r4
20006b94:	d105      	bne.n	20006ba2 <__libc_init_array+0x2e>
20006b96:	bd70      	pop	{r4, r5, r6, pc}
20006b98:	f855 3b04 	ldr.w	r3, [r5], #4
20006b9c:	4798      	blx	r3
20006b9e:	3601      	adds	r6, #1
20006ba0:	e7ee      	b.n	20006b80 <__libc_init_array+0xc>
20006ba2:	f855 3b04 	ldr.w	r3, [r5], #4
20006ba6:	4798      	blx	r3
20006ba8:	3601      	adds	r6, #1
20006baa:	e7f2      	b.n	20006b92 <__libc_init_array+0x1e>
20006bac:	2000ac28 	.word	0x2000ac28
20006bb0:	2000ac28 	.word	0x2000ac28
20006bb4:	2000ac28 	.word	0x2000ac28
20006bb8:	2000ac2c 	.word	0x2000ac2c

20006bbc <__retarget_lock_acquire_recursive>:
20006bbc:	4770      	bx	lr

20006bbe <__retarget_lock_release_recursive>:
20006bbe:	4770      	bx	lr

20006bc0 <memcpy>:
20006bc0:	440a      	add	r2, r1
20006bc2:	4291      	cmp	r1, r2
20006bc4:	f100 33ff 	add.w	r3, r0, #4294967295
20006bc8:	d100      	bne.n	20006bcc <memcpy+0xc>
20006bca:	4770      	bx	lr
20006bcc:	b510      	push	{r4, lr}
20006bce:	f811 4b01 	ldrb.w	r4, [r1], #1
20006bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
20006bd6:	4291      	cmp	r1, r2
20006bd8:	d1f9      	bne.n	20006bce <memcpy+0xe>
20006bda:	bd10      	pop	{r4, pc}

20006bdc <memset>:
20006bdc:	4402      	add	r2, r0
20006bde:	4603      	mov	r3, r0
20006be0:	4293      	cmp	r3, r2
20006be2:	d100      	bne.n	20006be6 <memset+0xa>
20006be4:	4770      	bx	lr
20006be6:	f803 1b01 	strb.w	r1, [r3], #1
20006bea:	e7f9      	b.n	20006be0 <memset+0x4>

20006bec <cleanup_glue>:
20006bec:	b538      	push	{r3, r4, r5, lr}
20006bee:	460c      	mov	r4, r1
20006bf0:	6809      	ldr	r1, [r1, #0]
20006bf2:	4605      	mov	r5, r0
20006bf4:	b109      	cbz	r1, 20006bfa <cleanup_glue+0xe>
20006bf6:	f7ff fff9 	bl	20006bec <cleanup_glue>
20006bfa:	4621      	mov	r1, r4
20006bfc:	4628      	mov	r0, r5
20006bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20006c02:	f000 b869 	b.w	20006cd8 <_free_r>
	...

20006c08 <_reclaim_reent>:
20006c08:	4b2c      	ldr	r3, [pc, #176]	; (20006cbc <_reclaim_reent+0xb4>)
20006c0a:	681b      	ldr	r3, [r3, #0]
20006c0c:	4283      	cmp	r3, r0
20006c0e:	b570      	push	{r4, r5, r6, lr}
20006c10:	4604      	mov	r4, r0
20006c12:	d051      	beq.n	20006cb8 <_reclaim_reent+0xb0>
20006c14:	6a43      	ldr	r3, [r0, #36]	; 0x24
20006c16:	b143      	cbz	r3, 20006c2a <_reclaim_reent+0x22>
20006c18:	68db      	ldr	r3, [r3, #12]
20006c1a:	2b00      	cmp	r3, #0
20006c1c:	d14a      	bne.n	20006cb4 <_reclaim_reent+0xac>
20006c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006c20:	6819      	ldr	r1, [r3, #0]
20006c22:	b111      	cbz	r1, 20006c2a <_reclaim_reent+0x22>
20006c24:	4620      	mov	r0, r4
20006c26:	f000 f857 	bl	20006cd8 <_free_r>
20006c2a:	6961      	ldr	r1, [r4, #20]
20006c2c:	b111      	cbz	r1, 20006c34 <_reclaim_reent+0x2c>
20006c2e:	4620      	mov	r0, r4
20006c30:	f000 f852 	bl	20006cd8 <_free_r>
20006c34:	6a61      	ldr	r1, [r4, #36]	; 0x24
20006c36:	b111      	cbz	r1, 20006c3e <_reclaim_reent+0x36>
20006c38:	4620      	mov	r0, r4
20006c3a:	f000 f84d 	bl	20006cd8 <_free_r>
20006c3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
20006c40:	b111      	cbz	r1, 20006c48 <_reclaim_reent+0x40>
20006c42:	4620      	mov	r0, r4
20006c44:	f000 f848 	bl	20006cd8 <_free_r>
20006c48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
20006c4a:	b111      	cbz	r1, 20006c52 <_reclaim_reent+0x4a>
20006c4c:	4620      	mov	r0, r4
20006c4e:	f000 f843 	bl	20006cd8 <_free_r>
20006c52:	6c21      	ldr	r1, [r4, #64]	; 0x40
20006c54:	b111      	cbz	r1, 20006c5c <_reclaim_reent+0x54>
20006c56:	4620      	mov	r0, r4
20006c58:	f000 f83e 	bl	20006cd8 <_free_r>
20006c5c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20006c5e:	b111      	cbz	r1, 20006c66 <_reclaim_reent+0x5e>
20006c60:	4620      	mov	r0, r4
20006c62:	f000 f839 	bl	20006cd8 <_free_r>
20006c66:	6da1      	ldr	r1, [r4, #88]	; 0x58
20006c68:	b111      	cbz	r1, 20006c70 <_reclaim_reent+0x68>
20006c6a:	4620      	mov	r0, r4
20006c6c:	f000 f834 	bl	20006cd8 <_free_r>
20006c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
20006c72:	b111      	cbz	r1, 20006c7a <_reclaim_reent+0x72>
20006c74:	4620      	mov	r0, r4
20006c76:	f000 f82f 	bl	20006cd8 <_free_r>
20006c7a:	69a3      	ldr	r3, [r4, #24]
20006c7c:	b1e3      	cbz	r3, 20006cb8 <_reclaim_reent+0xb0>
20006c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20006c80:	4620      	mov	r0, r4
20006c82:	4798      	blx	r3
20006c84:	6ca1      	ldr	r1, [r4, #72]	; 0x48
20006c86:	b1b9      	cbz	r1, 20006cb8 <_reclaim_reent+0xb0>
20006c88:	4620      	mov	r0, r4
20006c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20006c8e:	f7ff bfad 	b.w	20006bec <cleanup_glue>
20006c92:	5949      	ldr	r1, [r1, r5]
20006c94:	b941      	cbnz	r1, 20006ca8 <_reclaim_reent+0xa0>
20006c96:	3504      	adds	r5, #4
20006c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006c9a:	2d80      	cmp	r5, #128	; 0x80
20006c9c:	68d9      	ldr	r1, [r3, #12]
20006c9e:	d1f8      	bne.n	20006c92 <_reclaim_reent+0x8a>
20006ca0:	4620      	mov	r0, r4
20006ca2:	f000 f819 	bl	20006cd8 <_free_r>
20006ca6:	e7ba      	b.n	20006c1e <_reclaim_reent+0x16>
20006ca8:	680e      	ldr	r6, [r1, #0]
20006caa:	4620      	mov	r0, r4
20006cac:	f000 f814 	bl	20006cd8 <_free_r>
20006cb0:	4631      	mov	r1, r6
20006cb2:	e7ef      	b.n	20006c94 <_reclaim_reent+0x8c>
20006cb4:	2500      	movs	r5, #0
20006cb6:	e7ef      	b.n	20006c98 <_reclaim_reent+0x90>
20006cb8:	bd70      	pop	{r4, r5, r6, pc}
20006cba:	bf00      	nop
20006cbc:	2000ac74 	.word	0x2000ac74

20006cc0 <__malloc_lock>:
20006cc0:	4801      	ldr	r0, [pc, #4]	; (20006cc8 <__malloc_lock+0x8>)
20006cc2:	f7ff bf7b 	b.w	20006bbc <__retarget_lock_acquire_recursive>
20006cc6:	bf00      	nop
20006cc8:	2001f7d0 	.word	0x2001f7d0

20006ccc <__malloc_unlock>:
20006ccc:	4801      	ldr	r0, [pc, #4]	; (20006cd4 <__malloc_unlock+0x8>)
20006cce:	f7ff bf76 	b.w	20006bbe <__retarget_lock_release_recursive>
20006cd2:	bf00      	nop
20006cd4:	2001f7d0 	.word	0x2001f7d0

20006cd8 <_free_r>:
20006cd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
20006cda:	2900      	cmp	r1, #0
20006cdc:	d044      	beq.n	20006d68 <_free_r+0x90>
20006cde:	f851 3c04 	ldr.w	r3, [r1, #-4]
20006ce2:	9001      	str	r0, [sp, #4]
20006ce4:	2b00      	cmp	r3, #0
20006ce6:	f1a1 0404 	sub.w	r4, r1, #4
20006cea:	bfb8      	it	lt
20006cec:	18e4      	addlt	r4, r4, r3
20006cee:	f7ff ffe7 	bl	20006cc0 <__malloc_lock>
20006cf2:	4a1e      	ldr	r2, [pc, #120]	; (20006d6c <_free_r+0x94>)
20006cf4:	9801      	ldr	r0, [sp, #4]
20006cf6:	6813      	ldr	r3, [r2, #0]
20006cf8:	b933      	cbnz	r3, 20006d08 <_free_r+0x30>
20006cfa:	6063      	str	r3, [r4, #4]
20006cfc:	6014      	str	r4, [r2, #0]
20006cfe:	b003      	add	sp, #12
20006d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
20006d04:	f7ff bfe2 	b.w	20006ccc <__malloc_unlock>
20006d08:	42a3      	cmp	r3, r4
20006d0a:	d908      	bls.n	20006d1e <_free_r+0x46>
20006d0c:	6825      	ldr	r5, [r4, #0]
20006d0e:	1961      	adds	r1, r4, r5
20006d10:	428b      	cmp	r3, r1
20006d12:	bf01      	itttt	eq
20006d14:	6819      	ldreq	r1, [r3, #0]
20006d16:	685b      	ldreq	r3, [r3, #4]
20006d18:	1949      	addeq	r1, r1, r5
20006d1a:	6021      	streq	r1, [r4, #0]
20006d1c:	e7ed      	b.n	20006cfa <_free_r+0x22>
20006d1e:	461a      	mov	r2, r3
20006d20:	685b      	ldr	r3, [r3, #4]
20006d22:	b10b      	cbz	r3, 20006d28 <_free_r+0x50>
20006d24:	42a3      	cmp	r3, r4
20006d26:	d9fa      	bls.n	20006d1e <_free_r+0x46>
20006d28:	6811      	ldr	r1, [r2, #0]
20006d2a:	1855      	adds	r5, r2, r1
20006d2c:	42a5      	cmp	r5, r4
20006d2e:	d10b      	bne.n	20006d48 <_free_r+0x70>
20006d30:	6824      	ldr	r4, [r4, #0]
20006d32:	4421      	add	r1, r4
20006d34:	1854      	adds	r4, r2, r1
20006d36:	42a3      	cmp	r3, r4
20006d38:	6011      	str	r1, [r2, #0]
20006d3a:	d1e0      	bne.n	20006cfe <_free_r+0x26>
20006d3c:	681c      	ldr	r4, [r3, #0]
20006d3e:	685b      	ldr	r3, [r3, #4]
20006d40:	6053      	str	r3, [r2, #4]
20006d42:	4421      	add	r1, r4
20006d44:	6011      	str	r1, [r2, #0]
20006d46:	e7da      	b.n	20006cfe <_free_r+0x26>
20006d48:	d902      	bls.n	20006d50 <_free_r+0x78>
20006d4a:	230c      	movs	r3, #12
20006d4c:	6003      	str	r3, [r0, #0]
20006d4e:	e7d6      	b.n	20006cfe <_free_r+0x26>
20006d50:	6825      	ldr	r5, [r4, #0]
20006d52:	1961      	adds	r1, r4, r5
20006d54:	428b      	cmp	r3, r1
20006d56:	bf04      	itt	eq
20006d58:	6819      	ldreq	r1, [r3, #0]
20006d5a:	685b      	ldreq	r3, [r3, #4]
20006d5c:	6063      	str	r3, [r4, #4]
20006d5e:	bf04      	itt	eq
20006d60:	1949      	addeq	r1, r1, r5
20006d62:	6021      	streq	r1, [r4, #0]
20006d64:	6054      	str	r4, [r2, #4]
20006d66:	e7ca      	b.n	20006cfe <_free_r+0x26>
20006d68:	b003      	add	sp, #12
20006d6a:	bd30      	pop	{r4, r5, pc}
20006d6c:	2001f7d4 	.word	0x2001f7d4

20006d70 <_init>:
20006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006d72:	bf00      	nop
20006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
20006d76:	bc08      	pop	{r3}
20006d78:	469e      	mov	lr, r3
20006d7a:	4770      	bx	lr

20006d7c <_fini>:
20006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006d7e:	bf00      	nop
20006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
20006d82:	bc08      	pop	{r3}
20006d84:	469e      	mov	lr, r3
20006d86:	4770      	bx	lr
