
Bazowy_OSM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006864  200001b0  200001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ea0  20006a14  20006a14  00016a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000a8b4  2000a8b4  0001a964  2**0
                  CONTENTS
  4 .ARM          00000000  2000a8b4  2000a8b4  0001a964  2**0
                  CONTENTS
  5 .preinit_array 00000000  2000a8b4  2000a964  0001a964  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000a8b4  2000a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000a8b8  2000a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  2000a8bc  2000a8bc  0001a8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014b00  2000a964  2000a964  0001a964  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f464  2001f464  0001a964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a964  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f0d  00000000  00000000  0001a994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ebd  00000000  00000000  000348a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00038760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f43  00000000  00000000  0003b4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bb4  00000000  00000000  0006440b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3e74  00000000  00000000  0007cfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170e33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006510  00000000  00000000  00170e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001b0 <__do_global_dtors_aux>:
200001b0:	b510      	push	{r4, lr}
200001b2:	4c05      	ldr	r4, [pc, #20]	; (200001c8 <__do_global_dtors_aux+0x18>)
200001b4:	7823      	ldrb	r3, [r4, #0]
200001b6:	b933      	cbnz	r3, 200001c6 <__do_global_dtors_aux+0x16>
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <__do_global_dtors_aux+0x1c>)
200001ba:	b113      	cbz	r3, 200001c2 <__do_global_dtors_aux+0x12>
200001bc:	4804      	ldr	r0, [pc, #16]	; (200001d0 <__do_global_dtors_aux+0x20>)
200001be:	f3af 8000 	nop.w
200001c2:	2301      	movs	r3, #1
200001c4:	7023      	strb	r3, [r4, #0]
200001c6:	bd10      	pop	{r4, pc}
200001c8:	2000a964 	.word	0x2000a964
200001cc:	00000000 	.word	0x00000000
200001d0:	200069fc 	.word	0x200069fc

200001d4 <frame_dummy>:
200001d4:	b508      	push	{r3, lr}
200001d6:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <frame_dummy+0x10>)
200001d8:	b11b      	cbz	r3, 200001e2 <frame_dummy+0xe>
200001da:	4903      	ldr	r1, [pc, #12]	; (200001e8 <frame_dummy+0x14>)
200001dc:	4803      	ldr	r0, [pc, #12]	; (200001ec <frame_dummy+0x18>)
200001de:	f3af 8000 	nop.w
200001e2:	bd08      	pop	{r3, pc}
200001e4:	00000000 	.word	0x00000000
200001e8:	2000a968 	.word	0x2000a968
200001ec:	200069fc 	.word	0x200069fc

200001f0 <__aeabi_drsub>:
200001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
200001f4:	e002      	b.n	200001fc <__adddf3>
200001f6:	bf00      	nop

200001f8 <__aeabi_dsub>:
200001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

200001fc <__adddf3>:
200001fc:	b530      	push	{r4, r5, lr}
200001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
20000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
20000206:	ea94 0f05 	teq	r4, r5
2000020a:	bf08      	it	eq
2000020c:	ea90 0f02 	teqeq	r0, r2
20000210:	bf1f      	itttt	ne
20000212:	ea54 0c00 	orrsne.w	ip, r4, r0
20000216:	ea55 0c02 	orrsne.w	ip, r5, r2
2000021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
2000021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000222:	f000 80e2 	beq.w	200003ea <__adddf3+0x1ee>
20000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
2000022e:	bfb8      	it	lt
20000230:	426d      	neglt	r5, r5
20000232:	dd0c      	ble.n	2000024e <__adddf3+0x52>
20000234:	442c      	add	r4, r5
20000236:	ea80 0202 	eor.w	r2, r0, r2
2000023a:	ea81 0303 	eor.w	r3, r1, r3
2000023e:	ea82 0000 	eor.w	r0, r2, r0
20000242:	ea83 0101 	eor.w	r1, r3, r1
20000246:	ea80 0202 	eor.w	r2, r0, r2
2000024a:	ea81 0303 	eor.w	r3, r1, r3
2000024e:	2d36      	cmp	r5, #54	; 0x36
20000250:	bf88      	it	hi
20000252:	bd30      	pophi	{r4, r5, pc}
20000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20000264:	d002      	beq.n	2000026c <__adddf3+0x70>
20000266:	4240      	negs	r0, r0
20000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20000278:	d002      	beq.n	20000280 <__adddf3+0x84>
2000027a:	4252      	negs	r2, r2
2000027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000280:	ea94 0f05 	teq	r4, r5
20000284:	f000 80a7 	beq.w	200003d6 <__adddf3+0x1da>
20000288:	f1a4 0401 	sub.w	r4, r4, #1
2000028c:	f1d5 0e20 	rsbs	lr, r5, #32
20000290:	db0d      	blt.n	200002ae <__adddf3+0xb2>
20000292:	fa02 fc0e 	lsl.w	ip, r2, lr
20000296:	fa22 f205 	lsr.w	r2, r2, r5
2000029a:	1880      	adds	r0, r0, r2
2000029c:	f141 0100 	adc.w	r1, r1, #0
200002a0:	fa03 f20e 	lsl.w	r2, r3, lr
200002a4:	1880      	adds	r0, r0, r2
200002a6:	fa43 f305 	asr.w	r3, r3, r5
200002aa:	4159      	adcs	r1, r3
200002ac:	e00e      	b.n	200002cc <__adddf3+0xd0>
200002ae:	f1a5 0520 	sub.w	r5, r5, #32
200002b2:	f10e 0e20 	add.w	lr, lr, #32
200002b6:	2a01      	cmp	r2, #1
200002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
200002bc:	bf28      	it	cs
200002be:	f04c 0c02 	orrcs.w	ip, ip, #2
200002c2:	fa43 f305 	asr.w	r3, r3, r5
200002c6:	18c0      	adds	r0, r0, r3
200002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
200002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200002d0:	d507      	bpl.n	200002e2 <__adddf3+0xe6>
200002d2:	f04f 0e00 	mov.w	lr, #0
200002d6:	f1dc 0c00 	rsbs	ip, ip, #0
200002da:	eb7e 0000 	sbcs.w	r0, lr, r0
200002de:	eb6e 0101 	sbc.w	r1, lr, r1
200002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
200002e6:	d31b      	bcc.n	20000320 <__adddf3+0x124>
200002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
200002ec:	d30c      	bcc.n	20000308 <__adddf3+0x10c>
200002ee:	0849      	lsrs	r1, r1, #1
200002f0:	ea5f 0030 	movs.w	r0, r0, rrx
200002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
200002f8:	f104 0401 	add.w	r4, r4, #1
200002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
20000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20000304:	f080 809a 	bcs.w	2000043c <__adddf3+0x240>
20000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000030c:	bf08      	it	eq
2000030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000312:	f150 0000 	adcs.w	r0, r0, #0
20000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000031a:	ea41 0105 	orr.w	r1, r1, r5
2000031e:	bd30      	pop	{r4, r5, pc}
20000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20000324:	4140      	adcs	r0, r0
20000326:	eb41 0101 	adc.w	r1, r1, r1
2000032a:	3c01      	subs	r4, #1
2000032c:	bf28      	it	cs
2000032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
20000332:	d2e9      	bcs.n	20000308 <__adddf3+0x10c>
20000334:	f091 0f00 	teq	r1, #0
20000338:	bf04      	itt	eq
2000033a:	4601      	moveq	r1, r0
2000033c:	2000      	moveq	r0, #0
2000033e:	fab1 f381 	clz	r3, r1
20000342:	bf08      	it	eq
20000344:	3320      	addeq	r3, #32
20000346:	f1a3 030b 	sub.w	r3, r3, #11
2000034a:	f1b3 0220 	subs.w	r2, r3, #32
2000034e:	da0c      	bge.n	2000036a <__adddf3+0x16e>
20000350:	320c      	adds	r2, #12
20000352:	dd08      	ble.n	20000366 <__adddf3+0x16a>
20000354:	f102 0c14 	add.w	ip, r2, #20
20000358:	f1c2 020c 	rsb	r2, r2, #12
2000035c:	fa01 f00c 	lsl.w	r0, r1, ip
20000360:	fa21 f102 	lsr.w	r1, r1, r2
20000364:	e00c      	b.n	20000380 <__adddf3+0x184>
20000366:	f102 0214 	add.w	r2, r2, #20
2000036a:	bfd8      	it	le
2000036c:	f1c2 0c20 	rsble	ip, r2, #32
20000370:	fa01 f102 	lsl.w	r1, r1, r2
20000374:	fa20 fc0c 	lsr.w	ip, r0, ip
20000378:	bfdc      	itt	le
2000037a:	ea41 010c 	orrle.w	r1, r1, ip
2000037e:	4090      	lslle	r0, r2
20000380:	1ae4      	subs	r4, r4, r3
20000382:	bfa2      	ittt	ge
20000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20000388:	4329      	orrge	r1, r5
2000038a:	bd30      	popge	{r4, r5, pc}
2000038c:	ea6f 0404 	mvn.w	r4, r4
20000390:	3c1f      	subs	r4, #31
20000392:	da1c      	bge.n	200003ce <__adddf3+0x1d2>
20000394:	340c      	adds	r4, #12
20000396:	dc0e      	bgt.n	200003b6 <__adddf3+0x1ba>
20000398:	f104 0414 	add.w	r4, r4, #20
2000039c:	f1c4 0220 	rsb	r2, r4, #32
200003a0:	fa20 f004 	lsr.w	r0, r0, r4
200003a4:	fa01 f302 	lsl.w	r3, r1, r2
200003a8:	ea40 0003 	orr.w	r0, r0, r3
200003ac:	fa21 f304 	lsr.w	r3, r1, r4
200003b0:	ea45 0103 	orr.w	r1, r5, r3
200003b4:	bd30      	pop	{r4, r5, pc}
200003b6:	f1c4 040c 	rsb	r4, r4, #12
200003ba:	f1c4 0220 	rsb	r2, r4, #32
200003be:	fa20 f002 	lsr.w	r0, r0, r2
200003c2:	fa01 f304 	lsl.w	r3, r1, r4
200003c6:	ea40 0003 	orr.w	r0, r0, r3
200003ca:	4629      	mov	r1, r5
200003cc:	bd30      	pop	{r4, r5, pc}
200003ce:	fa21 f004 	lsr.w	r0, r1, r4
200003d2:	4629      	mov	r1, r5
200003d4:	bd30      	pop	{r4, r5, pc}
200003d6:	f094 0f00 	teq	r4, #0
200003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
200003de:	bf06      	itte	eq
200003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
200003e4:	3401      	addeq	r4, #1
200003e6:	3d01      	subne	r5, #1
200003e8:	e74e      	b.n	20000288 <__adddf3+0x8c>
200003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200003ee:	bf18      	it	ne
200003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
200003f4:	d029      	beq.n	2000044a <__adddf3+0x24e>
200003f6:	ea94 0f05 	teq	r4, r5
200003fa:	bf08      	it	eq
200003fc:	ea90 0f02 	teqeq	r0, r2
20000400:	d005      	beq.n	2000040e <__adddf3+0x212>
20000402:	ea54 0c00 	orrs.w	ip, r4, r0
20000406:	bf04      	itt	eq
20000408:	4619      	moveq	r1, r3
2000040a:	4610      	moveq	r0, r2
2000040c:	bd30      	pop	{r4, r5, pc}
2000040e:	ea91 0f03 	teq	r1, r3
20000412:	bf1e      	ittt	ne
20000414:	2100      	movne	r1, #0
20000416:	2000      	movne	r0, #0
20000418:	bd30      	popne	{r4, r5, pc}
2000041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
2000041e:	d105      	bne.n	2000042c <__adddf3+0x230>
20000420:	0040      	lsls	r0, r0, #1
20000422:	4149      	adcs	r1, r1
20000424:	bf28      	it	cs
20000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000042a:	bd30      	pop	{r4, r5, pc}
2000042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20000430:	bf3c      	itt	cc
20000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20000436:	bd30      	popcc	{r4, r5, pc}
20000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
2000043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20000444:	f04f 0000 	mov.w	r0, #0
20000448:	bd30      	pop	{r4, r5, pc}
2000044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000044e:	bf1a      	itte	ne
20000450:	4619      	movne	r1, r3
20000452:	4610      	movne	r0, r2
20000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20000458:	bf1c      	itt	ne
2000045a:	460b      	movne	r3, r1
2000045c:	4602      	movne	r2, r0
2000045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20000462:	bf06      	itte	eq
20000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20000468:	ea91 0f03 	teqeq	r1, r3
2000046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20000470:	bd30      	pop	{r4, r5, pc}
20000472:	bf00      	nop

20000474 <__aeabi_ui2d>:
20000474:	f090 0f00 	teq	r0, #0
20000478:	bf04      	itt	eq
2000047a:	2100      	moveq	r1, #0
2000047c:	4770      	bxeq	lr
2000047e:	b530      	push	{r4, r5, lr}
20000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
20000488:	f04f 0500 	mov.w	r5, #0
2000048c:	f04f 0100 	mov.w	r1, #0
20000490:	e750      	b.n	20000334 <__adddf3+0x138>
20000492:	bf00      	nop

20000494 <__aeabi_i2d>:
20000494:	f090 0f00 	teq	r0, #0
20000498:	bf04      	itt	eq
2000049a:	2100      	moveq	r1, #0
2000049c:	4770      	bxeq	lr
2000049e:	b530      	push	{r4, r5, lr}
200004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
200004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
200004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200004ac:	bf48      	it	mi
200004ae:	4240      	negmi	r0, r0
200004b0:	f04f 0100 	mov.w	r1, #0
200004b4:	e73e      	b.n	20000334 <__adddf3+0x138>
200004b6:	bf00      	nop

200004b8 <__aeabi_f2d>:
200004b8:	0042      	lsls	r2, r0, #1
200004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
200004be:	ea4f 0131 	mov.w	r1, r1, rrx
200004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
200004c6:	bf1f      	itttt	ne
200004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
200004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
200004d4:	4770      	bxne	lr
200004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
200004da:	bf08      	it	eq
200004dc:	4770      	bxeq	lr
200004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
200004e2:	bf04      	itt	eq
200004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
200004e8:	4770      	bxeq	lr
200004ea:	b530      	push	{r4, r5, lr}
200004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
200004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200004f8:	e71c      	b.n	20000334 <__adddf3+0x138>
200004fa:	bf00      	nop

200004fc <__aeabi_ul2d>:
200004fc:	ea50 0201 	orrs.w	r2, r0, r1
20000500:	bf08      	it	eq
20000502:	4770      	bxeq	lr
20000504:	b530      	push	{r4, r5, lr}
20000506:	f04f 0500 	mov.w	r5, #0
2000050a:	e00a      	b.n	20000522 <__aeabi_l2d+0x16>

2000050c <__aeabi_l2d>:
2000050c:	ea50 0201 	orrs.w	r2, r0, r1
20000510:	bf08      	it	eq
20000512:	4770      	bxeq	lr
20000514:	b530      	push	{r4, r5, lr}
20000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
2000051a:	d502      	bpl.n	20000522 <__aeabi_l2d+0x16>
2000051c:	4240      	negs	r0, r0
2000051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000052e:	f43f aed8 	beq.w	200002e2 <__adddf3+0xe6>
20000532:	f04f 0203 	mov.w	r2, #3
20000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000053a:	bf18      	it	ne
2000053c:	3203      	addne	r2, #3
2000053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20000542:	bf18      	it	ne
20000544:	3203      	addne	r2, #3
20000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
2000054a:	f1c2 0320 	rsb	r3, r2, #32
2000054e:	fa00 fc03 	lsl.w	ip, r0, r3
20000552:	fa20 f002 	lsr.w	r0, r0, r2
20000556:	fa01 fe03 	lsl.w	lr, r1, r3
2000055a:	ea40 000e 	orr.w	r0, r0, lr
2000055e:	fa21 f102 	lsr.w	r1, r1, r2
20000562:	4414      	add	r4, r2
20000564:	e6bd      	b.n	200002e2 <__adddf3+0xe6>
20000566:	bf00      	nop

20000568 <__aeabi_d2f>:
20000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
2000056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
20000570:	bf24      	itt	cs
20000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
20000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
2000057a:	d90d      	bls.n	20000598 <__aeabi_d2f+0x30>
2000057c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
20000588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
2000058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
20000590:	bf08      	it	eq
20000592:	f020 0001 	biceq.w	r0, r0, #1
20000596:	4770      	bx	lr
20000598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
2000059c:	d121      	bne.n	200005e2 <__aeabi_d2f+0x7a>
2000059e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
200005a2:	bfbc      	itt	lt
200005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
200005a8:	4770      	bxlt	lr
200005aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
200005b2:	f1c2 0218 	rsb	r2, r2, #24
200005b6:	f1c2 0c20 	rsb	ip, r2, #32
200005ba:	fa10 f30c 	lsls.w	r3, r0, ip
200005be:	fa20 f002 	lsr.w	r0, r0, r2
200005c2:	bf18      	it	ne
200005c4:	f040 0001 	orrne.w	r0, r0, #1
200005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
200005d4:	ea40 000c 	orr.w	r0, r0, ip
200005d8:	fa23 f302 	lsr.w	r3, r3, r2
200005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
200005e0:	e7cc      	b.n	2000057c <__aeabi_d2f+0x14>
200005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
200005e6:	d107      	bne.n	200005f8 <__aeabi_d2f+0x90>
200005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
200005ec:	bf1e      	ittt	ne
200005ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
200005f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
200005f6:	4770      	bxne	lr
200005f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
200005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20000600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20000604:	4770      	bx	lr
20000606:	bf00      	nop

20000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20000608:	b580      	push	{r7, lr}
2000060a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000060c:	4b0e      	ldr	r3, [pc, #56]	; (20000648 <HAL_Init+0x40>)
2000060e:	681b      	ldr	r3, [r3, #0]
20000610:	4a0d      	ldr	r2, [pc, #52]	; (20000648 <HAL_Init+0x40>)
20000612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20000616:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20000618:	4b0b      	ldr	r3, [pc, #44]	; (20000648 <HAL_Init+0x40>)
2000061a:	681b      	ldr	r3, [r3, #0]
2000061c:	4a0a      	ldr	r2, [pc, #40]	; (20000648 <HAL_Init+0x40>)
2000061e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20000622:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20000624:	4b08      	ldr	r3, [pc, #32]	; (20000648 <HAL_Init+0x40>)
20000626:	681b      	ldr	r3, [r3, #0]
20000628:	4a07      	ldr	r2, [pc, #28]	; (20000648 <HAL_Init+0x40>)
2000062a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000062e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20000630:	2003      	movs	r0, #3
20000632:	f000 f8cc 	bl	200007ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20000636:	200f      	movs	r0, #15
20000638:	f005 ffd8 	bl	200065ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000063c:	f005 ffaa 	bl	20006594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20000640:	2300      	movs	r3, #0
}
20000642:	4618      	mov	r0, r3
20000644:	bd80      	pop	{r7, pc}
20000646:	bf00      	nop
20000648:	40023c00 	.word	0x40023c00

2000064c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000064c:	b480      	push	{r7}
2000064e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20000650:	4b06      	ldr	r3, [pc, #24]	; (2000066c <HAL_IncTick+0x20>)
20000652:	781b      	ldrb	r3, [r3, #0]
20000654:	461a      	mov	r2, r3
20000656:	4b06      	ldr	r3, [pc, #24]	; (20000670 <HAL_IncTick+0x24>)
20000658:	681b      	ldr	r3, [r3, #0]
2000065a:	4413      	add	r3, r2
2000065c:	4a04      	ldr	r2, [pc, #16]	; (20000670 <HAL_IncTick+0x24>)
2000065e:	6013      	str	r3, [r2, #0]
}
20000660:	bf00      	nop
20000662:	46bd      	mov	sp, r7
20000664:	f85d 7b04 	ldr.w	r7, [sp], #4
20000668:	4770      	bx	lr
2000066a:	bf00      	nop
2000066c:	2000a8bc 	.word	0x2000a8bc
20000670:	2000a980 	.word	0x2000a980

20000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20000674:	b480      	push	{r7}
20000676:	b085      	sub	sp, #20
20000678:	af00      	add	r7, sp, #0
2000067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	f003 0307 	and.w	r3, r3, #7
20000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20000684:	4b0c      	ldr	r3, [pc, #48]	; (200006b8 <__NVIC_SetPriorityGrouping+0x44>)
20000686:	68db      	ldr	r3, [r3, #12]
20000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000068a:	68ba      	ldr	r2, [r7, #8]
2000068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20000690:	4013      	ands	r3, r2
20000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20000694:	68fb      	ldr	r3, [r7, #12]
20000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20000698:	68bb      	ldr	r3, [r7, #8]
2000069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200006a6:	4a04      	ldr	r2, [pc, #16]	; (200006b8 <__NVIC_SetPriorityGrouping+0x44>)
200006a8:	68bb      	ldr	r3, [r7, #8]
200006aa:	60d3      	str	r3, [r2, #12]
}
200006ac:	bf00      	nop
200006ae:	3714      	adds	r7, #20
200006b0:	46bd      	mov	sp, r7
200006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200006b6:	4770      	bx	lr
200006b8:	e000ed00 	.word	0xe000ed00

200006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200006bc:	b480      	push	{r7}
200006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200006c0:	4b04      	ldr	r3, [pc, #16]	; (200006d4 <__NVIC_GetPriorityGrouping+0x18>)
200006c2:	68db      	ldr	r3, [r3, #12]
200006c4:	0a1b      	lsrs	r3, r3, #8
200006c6:	f003 0307 	and.w	r3, r3, #7
}
200006ca:	4618      	mov	r0, r3
200006cc:	46bd      	mov	sp, r7
200006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200006d2:	4770      	bx	lr
200006d4:	e000ed00 	.word	0xe000ed00

200006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
200006d8:	b480      	push	{r7}
200006da:	b083      	sub	sp, #12
200006dc:	af00      	add	r7, sp, #0
200006de:	4603      	mov	r3, r0
200006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200006e6:	2b00      	cmp	r3, #0
200006e8:	db0b      	blt.n	20000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200006ea:	79fb      	ldrb	r3, [r7, #7]
200006ec:	f003 021f 	and.w	r2, r3, #31
200006f0:	4907      	ldr	r1, [pc, #28]	; (20000710 <__NVIC_EnableIRQ+0x38>)
200006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200006f6:	095b      	lsrs	r3, r3, #5
200006f8:	2001      	movs	r0, #1
200006fa:	fa00 f202 	lsl.w	r2, r0, r2
200006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20000702:	bf00      	nop
20000704:	370c      	adds	r7, #12
20000706:	46bd      	mov	sp, r7
20000708:	f85d 7b04 	ldr.w	r7, [sp], #4
2000070c:	4770      	bx	lr
2000070e:	bf00      	nop
20000710:	e000e100 	.word	0xe000e100

20000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000714:	b480      	push	{r7}
20000716:	b083      	sub	sp, #12
20000718:	af00      	add	r7, sp, #0
2000071a:	4603      	mov	r3, r0
2000071c:	6039      	str	r1, [r7, #0]
2000071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000724:	2b00      	cmp	r3, #0
20000726:	db0a      	blt.n	2000073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000728:	683b      	ldr	r3, [r7, #0]
2000072a:	b2da      	uxtb	r2, r3
2000072c:	490c      	ldr	r1, [pc, #48]	; (20000760 <__NVIC_SetPriority+0x4c>)
2000072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000732:	0112      	lsls	r2, r2, #4
20000734:	b2d2      	uxtb	r2, r2
20000736:	440b      	add	r3, r1
20000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000073c:	e00a      	b.n	20000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000073e:	683b      	ldr	r3, [r7, #0]
20000740:	b2da      	uxtb	r2, r3
20000742:	4908      	ldr	r1, [pc, #32]	; (20000764 <__NVIC_SetPriority+0x50>)
20000744:	79fb      	ldrb	r3, [r7, #7]
20000746:	f003 030f 	and.w	r3, r3, #15
2000074a:	3b04      	subs	r3, #4
2000074c:	0112      	lsls	r2, r2, #4
2000074e:	b2d2      	uxtb	r2, r2
20000750:	440b      	add	r3, r1
20000752:	761a      	strb	r2, [r3, #24]
}
20000754:	bf00      	nop
20000756:	370c      	adds	r7, #12
20000758:	46bd      	mov	sp, r7
2000075a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000075e:	4770      	bx	lr
20000760:	e000e100 	.word	0xe000e100
20000764:	e000ed00 	.word	0xe000ed00

20000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20000768:	b480      	push	{r7}
2000076a:	b089      	sub	sp, #36	; 0x24
2000076c:	af00      	add	r7, sp, #0
2000076e:	60f8      	str	r0, [r7, #12]
20000770:	60b9      	str	r1, [r7, #8]
20000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20000774:	68fb      	ldr	r3, [r7, #12]
20000776:	f003 0307 	and.w	r3, r3, #7
2000077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000077c:	69fb      	ldr	r3, [r7, #28]
2000077e:	f1c3 0307 	rsb	r3, r3, #7
20000782:	2b04      	cmp	r3, #4
20000784:	bf28      	it	cs
20000786:	2304      	movcs	r3, #4
20000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000078a:	69fb      	ldr	r3, [r7, #28]
2000078c:	3304      	adds	r3, #4
2000078e:	2b06      	cmp	r3, #6
20000790:	d902      	bls.n	20000798 <NVIC_EncodePriority+0x30>
20000792:	69fb      	ldr	r3, [r7, #28]
20000794:	3b03      	subs	r3, #3
20000796:	e000      	b.n	2000079a <NVIC_EncodePriority+0x32>
20000798:	2300      	movs	r3, #0
2000079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000079c:	f04f 32ff 	mov.w	r2, #4294967295
200007a0:	69bb      	ldr	r3, [r7, #24]
200007a2:	fa02 f303 	lsl.w	r3, r2, r3
200007a6:	43da      	mvns	r2, r3
200007a8:	68bb      	ldr	r3, [r7, #8]
200007aa:	401a      	ands	r2, r3
200007ac:	697b      	ldr	r3, [r7, #20]
200007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200007b0:	f04f 31ff 	mov.w	r1, #4294967295
200007b4:	697b      	ldr	r3, [r7, #20]
200007b6:	fa01 f303 	lsl.w	r3, r1, r3
200007ba:	43d9      	mvns	r1, r3
200007bc:	687b      	ldr	r3, [r7, #4]
200007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200007c0:	4313      	orrs	r3, r2
         );
}
200007c2:	4618      	mov	r0, r3
200007c4:	3724      	adds	r7, #36	; 0x24
200007c6:	46bd      	mov	sp, r7
200007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200007cc:	4770      	bx	lr

200007ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200007ce:	b580      	push	{r7, lr}
200007d0:	b082      	sub	sp, #8
200007d2:	af00      	add	r7, sp, #0
200007d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200007d6:	6878      	ldr	r0, [r7, #4]
200007d8:	f7ff ff4c 	bl	20000674 <__NVIC_SetPriorityGrouping>
}
200007dc:	bf00      	nop
200007de:	3708      	adds	r7, #8
200007e0:	46bd      	mov	sp, r7
200007e2:	bd80      	pop	{r7, pc}

200007e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200007e4:	b580      	push	{r7, lr}
200007e6:	b086      	sub	sp, #24
200007e8:	af00      	add	r7, sp, #0
200007ea:	4603      	mov	r3, r0
200007ec:	60b9      	str	r1, [r7, #8]
200007ee:	607a      	str	r2, [r7, #4]
200007f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
200007f2:	2300      	movs	r3, #0
200007f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
200007f6:	f7ff ff61 	bl	200006bc <__NVIC_GetPriorityGrouping>
200007fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
200007fc:	687a      	ldr	r2, [r7, #4]
200007fe:	68b9      	ldr	r1, [r7, #8]
20000800:	6978      	ldr	r0, [r7, #20]
20000802:	f7ff ffb1 	bl	20000768 <NVIC_EncodePriority>
20000806:	4602      	mov	r2, r0
20000808:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000080c:	4611      	mov	r1, r2
2000080e:	4618      	mov	r0, r3
20000810:	f7ff ff80 	bl	20000714 <__NVIC_SetPriority>
}
20000814:	bf00      	nop
20000816:	3718      	adds	r7, #24
20000818:	46bd      	mov	sp, r7
2000081a:	bd80      	pop	{r7, pc}

2000081c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000081c:	b580      	push	{r7, lr}
2000081e:	b082      	sub	sp, #8
20000820:	af00      	add	r7, sp, #0
20000822:	4603      	mov	r3, r0
20000824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20000826:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000082a:	4618      	mov	r0, r3
2000082c:	f7ff ff54 	bl	200006d8 <__NVIC_EnableIRQ>
}
20000830:	bf00      	nop
20000832:	3708      	adds	r7, #8
20000834:	46bd      	mov	sp, r7
20000836:	bd80      	pop	{r7, pc}

20000838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20000838:	b480      	push	{r7}
2000083a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000083c:	4b03      	ldr	r3, [pc, #12]	; (2000084c <HAL_RCC_GetHCLKFreq+0x14>)
2000083e:	681b      	ldr	r3, [r3, #0]
}
20000840:	4618      	mov	r0, r3
20000842:	46bd      	mov	sp, r7
20000844:	f85d 7b04 	ldr.w	r7, [sp], #4
20000848:	4770      	bx	lr
2000084a:	bf00      	nop
2000084c:	2000a8fc 	.word	0x2000a8fc

20000850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20000850:	b580      	push	{r7, lr}
20000852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20000854:	f7ff fff0 	bl	20000838 <HAL_RCC_GetHCLKFreq>
20000858:	4602      	mov	r2, r0
2000085a:	4b05      	ldr	r3, [pc, #20]	; (20000870 <HAL_RCC_GetPCLK1Freq+0x20>)
2000085c:	689b      	ldr	r3, [r3, #8]
2000085e:	0a9b      	lsrs	r3, r3, #10
20000860:	f003 0307 	and.w	r3, r3, #7
20000864:	4903      	ldr	r1, [pc, #12]	; (20000874 <HAL_RCC_GetPCLK1Freq+0x24>)
20000866:	5ccb      	ldrb	r3, [r1, r3]
20000868:	fa22 f303 	lsr.w	r3, r2, r3
}
2000086c:	4618      	mov	r0, r3
2000086e:	bd80      	pop	{r7, pc}
20000870:	40023800 	.word	0x40023800
20000874:	2000a84c 	.word	0x2000a84c

20000878 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
20000878:	b480      	push	{r7}
2000087a:	b083      	sub	sp, #12
2000087c:	af00      	add	r7, sp, #0
2000087e:	6078      	str	r0, [r7, #4]
20000880:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	220f      	movs	r2, #15
20000886:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
20000888:	4b12      	ldr	r3, [pc, #72]	; (200008d4 <HAL_RCC_GetClockConfig+0x5c>)
2000088a:	689b      	ldr	r3, [r3, #8]
2000088c:	f003 0203 	and.w	r2, r3, #3
20000890:	687b      	ldr	r3, [r7, #4]
20000892:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
20000894:	4b0f      	ldr	r3, [pc, #60]	; (200008d4 <HAL_RCC_GetClockConfig+0x5c>)
20000896:	689b      	ldr	r3, [r3, #8]
20000898:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
200008a0:	4b0c      	ldr	r3, [pc, #48]	; (200008d4 <HAL_RCC_GetClockConfig+0x5c>)
200008a2:	689b      	ldr	r3, [r3, #8]
200008a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
200008a8:	687b      	ldr	r3, [r7, #4]
200008aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
200008ac:	4b09      	ldr	r3, [pc, #36]	; (200008d4 <HAL_RCC_GetClockConfig+0x5c>)
200008ae:	689b      	ldr	r3, [r3, #8]
200008b0:	08db      	lsrs	r3, r3, #3
200008b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
200008b6:	687b      	ldr	r3, [r7, #4]
200008b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
200008ba:	4b07      	ldr	r3, [pc, #28]	; (200008d8 <HAL_RCC_GetClockConfig+0x60>)
200008bc:	681b      	ldr	r3, [r3, #0]
200008be:	f003 020f 	and.w	r2, r3, #15
200008c2:	683b      	ldr	r3, [r7, #0]
200008c4:	601a      	str	r2, [r3, #0]
}
200008c6:	bf00      	nop
200008c8:	370c      	adds	r7, #12
200008ca:	46bd      	mov	sp, r7
200008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200008d0:	4770      	bx	lr
200008d2:	bf00      	nop
200008d4:	40023800 	.word	0x40023800
200008d8:	40023c00 	.word	0x40023c00

200008dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
200008dc:	b580      	push	{r7, lr}
200008de:	b082      	sub	sp, #8
200008e0:	af00      	add	r7, sp, #0
200008e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
200008e4:	687b      	ldr	r3, [r7, #4]
200008e6:	2b00      	cmp	r3, #0
200008e8:	d101      	bne.n	200008ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
200008ea:	2301      	movs	r3, #1
200008ec:	e041      	b.n	20000972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
200008ee:	687b      	ldr	r3, [r7, #4]
200008f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
200008f4:	b2db      	uxtb	r3, r3
200008f6:	2b00      	cmp	r3, #0
200008f8:	d106      	bne.n	20000908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
200008fa:	687b      	ldr	r3, [r7, #4]
200008fc:	2200      	movs	r2, #0
200008fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
20000902:	6878      	ldr	r0, [r7, #4]
20000904:	f000 f839 	bl	2000097a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
20000908:	687b      	ldr	r3, [r7, #4]
2000090a:	2202      	movs	r2, #2
2000090c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
20000910:	687b      	ldr	r3, [r7, #4]
20000912:	681a      	ldr	r2, [r3, #0]
20000914:	687b      	ldr	r3, [r7, #4]
20000916:	3304      	adds	r3, #4
20000918:	4619      	mov	r1, r3
2000091a:	4610      	mov	r0, r2
2000091c:	f000 f9d8 	bl	20000cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
20000920:	687b      	ldr	r3, [r7, #4]
20000922:	2201      	movs	r2, #1
20000924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20000928:	687b      	ldr	r3, [r7, #4]
2000092a:	2201      	movs	r2, #1
2000092c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
20000930:	687b      	ldr	r3, [r7, #4]
20000932:	2201      	movs	r2, #1
20000934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
20000938:	687b      	ldr	r3, [r7, #4]
2000093a:	2201      	movs	r2, #1
2000093c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	2201      	movs	r2, #1
20000944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
20000948:	687b      	ldr	r3, [r7, #4]
2000094a:	2201      	movs	r2, #1
2000094c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	2201      	movs	r2, #1
20000954:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	2201      	movs	r2, #1
2000095c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	2201      	movs	r2, #1
20000964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
20000968:	687b      	ldr	r3, [r7, #4]
2000096a:	2201      	movs	r2, #1
2000096c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
20000970:	2300      	movs	r3, #0
}
20000972:	4618      	mov	r0, r3
20000974:	3708      	adds	r7, #8
20000976:	46bd      	mov	sp, r7
20000978:	bd80      	pop	{r7, pc}

2000097a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
2000097a:	b480      	push	{r7}
2000097c:	b083      	sub	sp, #12
2000097e:	af00      	add	r7, sp, #0
20000980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
20000982:	bf00      	nop
20000984:	370c      	adds	r7, #12
20000986:	46bd      	mov	sp, r7
20000988:	f85d 7b04 	ldr.w	r7, [sp], #4
2000098c:	4770      	bx	lr
	...

20000990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
20000990:	b480      	push	{r7}
20000992:	b085      	sub	sp, #20
20000994:	af00      	add	r7, sp, #0
20000996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
20000998:	687b      	ldr	r3, [r7, #4]
2000099a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2000099e:	b2db      	uxtb	r3, r3
200009a0:	2b01      	cmp	r3, #1
200009a2:	d001      	beq.n	200009a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
200009a4:	2301      	movs	r3, #1
200009a6:	e04e      	b.n	20000a46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
200009a8:	687b      	ldr	r3, [r7, #4]
200009aa:	2202      	movs	r2, #2
200009ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
200009b0:	687b      	ldr	r3, [r7, #4]
200009b2:	681b      	ldr	r3, [r3, #0]
200009b4:	68da      	ldr	r2, [r3, #12]
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	681b      	ldr	r3, [r3, #0]
200009ba:	f042 0201 	orr.w	r2, r2, #1
200009be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
200009c0:	687b      	ldr	r3, [r7, #4]
200009c2:	681b      	ldr	r3, [r3, #0]
200009c4:	4a23      	ldr	r2, [pc, #140]	; (20000a54 <HAL_TIM_Base_Start_IT+0xc4>)
200009c6:	4293      	cmp	r3, r2
200009c8:	d022      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
200009ca:	687b      	ldr	r3, [r7, #4]
200009cc:	681b      	ldr	r3, [r3, #0]
200009ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
200009d2:	d01d      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
200009d4:	687b      	ldr	r3, [r7, #4]
200009d6:	681b      	ldr	r3, [r3, #0]
200009d8:	4a1f      	ldr	r2, [pc, #124]	; (20000a58 <HAL_TIM_Base_Start_IT+0xc8>)
200009da:	4293      	cmp	r3, r2
200009dc:	d018      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
200009de:	687b      	ldr	r3, [r7, #4]
200009e0:	681b      	ldr	r3, [r3, #0]
200009e2:	4a1e      	ldr	r2, [pc, #120]	; (20000a5c <HAL_TIM_Base_Start_IT+0xcc>)
200009e4:	4293      	cmp	r3, r2
200009e6:	d013      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
200009e8:	687b      	ldr	r3, [r7, #4]
200009ea:	681b      	ldr	r3, [r3, #0]
200009ec:	4a1c      	ldr	r2, [pc, #112]	; (20000a60 <HAL_TIM_Base_Start_IT+0xd0>)
200009ee:	4293      	cmp	r3, r2
200009f0:	d00e      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
200009f2:	687b      	ldr	r3, [r7, #4]
200009f4:	681b      	ldr	r3, [r3, #0]
200009f6:	4a1b      	ldr	r2, [pc, #108]	; (20000a64 <HAL_TIM_Base_Start_IT+0xd4>)
200009f8:	4293      	cmp	r3, r2
200009fa:	d009      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
200009fc:	687b      	ldr	r3, [r7, #4]
200009fe:	681b      	ldr	r3, [r3, #0]
20000a00:	4a19      	ldr	r2, [pc, #100]	; (20000a68 <HAL_TIM_Base_Start_IT+0xd8>)
20000a02:	4293      	cmp	r3, r2
20000a04:	d004      	beq.n	20000a10 <HAL_TIM_Base_Start_IT+0x80>
20000a06:	687b      	ldr	r3, [r7, #4]
20000a08:	681b      	ldr	r3, [r3, #0]
20000a0a:	4a18      	ldr	r2, [pc, #96]	; (20000a6c <HAL_TIM_Base_Start_IT+0xdc>)
20000a0c:	4293      	cmp	r3, r2
20000a0e:	d111      	bne.n	20000a34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
20000a10:	687b      	ldr	r3, [r7, #4]
20000a12:	681b      	ldr	r3, [r3, #0]
20000a14:	689b      	ldr	r3, [r3, #8]
20000a16:	f003 0307 	and.w	r3, r3, #7
20000a1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20000a1c:	68fb      	ldr	r3, [r7, #12]
20000a1e:	2b06      	cmp	r3, #6
20000a20:	d010      	beq.n	20000a44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
20000a22:	687b      	ldr	r3, [r7, #4]
20000a24:	681b      	ldr	r3, [r3, #0]
20000a26:	681a      	ldr	r2, [r3, #0]
20000a28:	687b      	ldr	r3, [r7, #4]
20000a2a:	681b      	ldr	r3, [r3, #0]
20000a2c:	f042 0201 	orr.w	r2, r2, #1
20000a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
20000a32:	e007      	b.n	20000a44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	681b      	ldr	r3, [r3, #0]
20000a38:	681a      	ldr	r2, [r3, #0]
20000a3a:	687b      	ldr	r3, [r7, #4]
20000a3c:	681b      	ldr	r3, [r3, #0]
20000a3e:	f042 0201 	orr.w	r2, r2, #1
20000a42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
20000a44:	2300      	movs	r3, #0
}
20000a46:	4618      	mov	r0, r3
20000a48:	3714      	adds	r7, #20
20000a4a:	46bd      	mov	sp, r7
20000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a50:	4770      	bx	lr
20000a52:	bf00      	nop
20000a54:	40010000 	.word	0x40010000
20000a58:	40000400 	.word	0x40000400
20000a5c:	40000800 	.word	0x40000800
20000a60:	40000c00 	.word	0x40000c00
20000a64:	40010400 	.word	0x40010400
20000a68:	40014000 	.word	0x40014000
20000a6c:	40001800 	.word	0x40001800

20000a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
20000a70:	b580      	push	{r7, lr}
20000a72:	b082      	sub	sp, #8
20000a74:	af00      	add	r7, sp, #0
20000a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
20000a78:	687b      	ldr	r3, [r7, #4]
20000a7a:	681b      	ldr	r3, [r3, #0]
20000a7c:	691b      	ldr	r3, [r3, #16]
20000a7e:	f003 0302 	and.w	r3, r3, #2
20000a82:	2b02      	cmp	r3, #2
20000a84:	d122      	bne.n	20000acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
20000a86:	687b      	ldr	r3, [r7, #4]
20000a88:	681b      	ldr	r3, [r3, #0]
20000a8a:	68db      	ldr	r3, [r3, #12]
20000a8c:	f003 0302 	and.w	r3, r3, #2
20000a90:	2b02      	cmp	r3, #2
20000a92:	d11b      	bne.n	20000acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
20000a94:	687b      	ldr	r3, [r7, #4]
20000a96:	681b      	ldr	r3, [r3, #0]
20000a98:	f06f 0202 	mvn.w	r2, #2
20000a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
20000a9e:	687b      	ldr	r3, [r7, #4]
20000aa0:	2201      	movs	r2, #1
20000aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
20000aa4:	687b      	ldr	r3, [r7, #4]
20000aa6:	681b      	ldr	r3, [r3, #0]
20000aa8:	699b      	ldr	r3, [r3, #24]
20000aaa:	f003 0303 	and.w	r3, r3, #3
20000aae:	2b00      	cmp	r3, #0
20000ab0:	d003      	beq.n	20000aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
20000ab2:	6878      	ldr	r0, [r7, #4]
20000ab4:	f000 f8ee 	bl	20000c94 <HAL_TIM_IC_CaptureCallback>
20000ab8:	e005      	b.n	20000ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
20000aba:	6878      	ldr	r0, [r7, #4]
20000abc:	f000 f8e0 	bl	20000c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
20000ac0:	6878      	ldr	r0, [r7, #4]
20000ac2:	f000 f8f1 	bl	20000ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20000ac6:	687b      	ldr	r3, [r7, #4]
20000ac8:	2200      	movs	r2, #0
20000aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
20000acc:	687b      	ldr	r3, [r7, #4]
20000ace:	681b      	ldr	r3, [r3, #0]
20000ad0:	691b      	ldr	r3, [r3, #16]
20000ad2:	f003 0304 	and.w	r3, r3, #4
20000ad6:	2b04      	cmp	r3, #4
20000ad8:	d122      	bne.n	20000b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
20000ada:	687b      	ldr	r3, [r7, #4]
20000adc:	681b      	ldr	r3, [r3, #0]
20000ade:	68db      	ldr	r3, [r3, #12]
20000ae0:	f003 0304 	and.w	r3, r3, #4
20000ae4:	2b04      	cmp	r3, #4
20000ae6:	d11b      	bne.n	20000b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
20000ae8:	687b      	ldr	r3, [r7, #4]
20000aea:	681b      	ldr	r3, [r3, #0]
20000aec:	f06f 0204 	mvn.w	r2, #4
20000af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
20000af2:	687b      	ldr	r3, [r7, #4]
20000af4:	2202      	movs	r2, #2
20000af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
20000af8:	687b      	ldr	r3, [r7, #4]
20000afa:	681b      	ldr	r3, [r3, #0]
20000afc:	699b      	ldr	r3, [r3, #24]
20000afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
20000b02:	2b00      	cmp	r3, #0
20000b04:	d003      	beq.n	20000b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20000b06:	6878      	ldr	r0, [r7, #4]
20000b08:	f000 f8c4 	bl	20000c94 <HAL_TIM_IC_CaptureCallback>
20000b0c:	e005      	b.n	20000b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20000b0e:	6878      	ldr	r0, [r7, #4]
20000b10:	f000 f8b6 	bl	20000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20000b14:	6878      	ldr	r0, [r7, #4]
20000b16:	f000 f8c7 	bl	20000ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20000b1a:	687b      	ldr	r3, [r7, #4]
20000b1c:	2200      	movs	r2, #0
20000b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
20000b20:	687b      	ldr	r3, [r7, #4]
20000b22:	681b      	ldr	r3, [r3, #0]
20000b24:	691b      	ldr	r3, [r3, #16]
20000b26:	f003 0308 	and.w	r3, r3, #8
20000b2a:	2b08      	cmp	r3, #8
20000b2c:	d122      	bne.n	20000b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
20000b2e:	687b      	ldr	r3, [r7, #4]
20000b30:	681b      	ldr	r3, [r3, #0]
20000b32:	68db      	ldr	r3, [r3, #12]
20000b34:	f003 0308 	and.w	r3, r3, #8
20000b38:	2b08      	cmp	r3, #8
20000b3a:	d11b      	bne.n	20000b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
20000b3c:	687b      	ldr	r3, [r7, #4]
20000b3e:	681b      	ldr	r3, [r3, #0]
20000b40:	f06f 0208 	mvn.w	r2, #8
20000b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
20000b46:	687b      	ldr	r3, [r7, #4]
20000b48:	2204      	movs	r2, #4
20000b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
20000b4c:	687b      	ldr	r3, [r7, #4]
20000b4e:	681b      	ldr	r3, [r3, #0]
20000b50:	69db      	ldr	r3, [r3, #28]
20000b52:	f003 0303 	and.w	r3, r3, #3
20000b56:	2b00      	cmp	r3, #0
20000b58:	d003      	beq.n	20000b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20000b5a:	6878      	ldr	r0, [r7, #4]
20000b5c:	f000 f89a 	bl	20000c94 <HAL_TIM_IC_CaptureCallback>
20000b60:	e005      	b.n	20000b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20000b62:	6878      	ldr	r0, [r7, #4]
20000b64:	f000 f88c 	bl	20000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20000b68:	6878      	ldr	r0, [r7, #4]
20000b6a:	f000 f89d 	bl	20000ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20000b6e:	687b      	ldr	r3, [r7, #4]
20000b70:	2200      	movs	r2, #0
20000b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
20000b74:	687b      	ldr	r3, [r7, #4]
20000b76:	681b      	ldr	r3, [r3, #0]
20000b78:	691b      	ldr	r3, [r3, #16]
20000b7a:	f003 0310 	and.w	r3, r3, #16
20000b7e:	2b10      	cmp	r3, #16
20000b80:	d122      	bne.n	20000bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
20000b82:	687b      	ldr	r3, [r7, #4]
20000b84:	681b      	ldr	r3, [r3, #0]
20000b86:	68db      	ldr	r3, [r3, #12]
20000b88:	f003 0310 	and.w	r3, r3, #16
20000b8c:	2b10      	cmp	r3, #16
20000b8e:	d11b      	bne.n	20000bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
20000b90:	687b      	ldr	r3, [r7, #4]
20000b92:	681b      	ldr	r3, [r3, #0]
20000b94:	f06f 0210 	mvn.w	r2, #16
20000b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
20000b9a:	687b      	ldr	r3, [r7, #4]
20000b9c:	2208      	movs	r2, #8
20000b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
20000ba0:	687b      	ldr	r3, [r7, #4]
20000ba2:	681b      	ldr	r3, [r3, #0]
20000ba4:	69db      	ldr	r3, [r3, #28]
20000ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
20000baa:	2b00      	cmp	r3, #0
20000bac:	d003      	beq.n	20000bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
20000bae:	6878      	ldr	r0, [r7, #4]
20000bb0:	f000 f870 	bl	20000c94 <HAL_TIM_IC_CaptureCallback>
20000bb4:	e005      	b.n	20000bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
20000bb6:	6878      	ldr	r0, [r7, #4]
20000bb8:	f000 f862 	bl	20000c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
20000bbc:	6878      	ldr	r0, [r7, #4]
20000bbe:	f000 f873 	bl	20000ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
20000bc2:	687b      	ldr	r3, [r7, #4]
20000bc4:	2200      	movs	r2, #0
20000bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
20000bc8:	687b      	ldr	r3, [r7, #4]
20000bca:	681b      	ldr	r3, [r3, #0]
20000bcc:	691b      	ldr	r3, [r3, #16]
20000bce:	f003 0301 	and.w	r3, r3, #1
20000bd2:	2b01      	cmp	r3, #1
20000bd4:	d10e      	bne.n	20000bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	681b      	ldr	r3, [r3, #0]
20000bda:	68db      	ldr	r3, [r3, #12]
20000bdc:	f003 0301 	and.w	r3, r3, #1
20000be0:	2b01      	cmp	r3, #1
20000be2:	d107      	bne.n	20000bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	681b      	ldr	r3, [r3, #0]
20000be8:	f06f 0201 	mvn.w	r2, #1
20000bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
20000bee:	6878      	ldr	r0, [r7, #4]
20000bf0:	f005 f8d4 	bl	20005d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
20000bf4:	687b      	ldr	r3, [r7, #4]
20000bf6:	681b      	ldr	r3, [r3, #0]
20000bf8:	691b      	ldr	r3, [r3, #16]
20000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
20000bfe:	2b80      	cmp	r3, #128	; 0x80
20000c00:	d10e      	bne.n	20000c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
20000c02:	687b      	ldr	r3, [r7, #4]
20000c04:	681b      	ldr	r3, [r3, #0]
20000c06:	68db      	ldr	r3, [r3, #12]
20000c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
20000c0c:	2b80      	cmp	r3, #128	; 0x80
20000c0e:	d107      	bne.n	20000c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
20000c10:	687b      	ldr	r3, [r7, #4]
20000c12:	681b      	ldr	r3, [r3, #0]
20000c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
20000c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
20000c1a:	6878      	ldr	r0, [r7, #4]
20000c1c:	f000 f902 	bl	20000e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
20000c20:	687b      	ldr	r3, [r7, #4]
20000c22:	681b      	ldr	r3, [r3, #0]
20000c24:	691b      	ldr	r3, [r3, #16]
20000c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000c2a:	2b40      	cmp	r3, #64	; 0x40
20000c2c:	d10e      	bne.n	20000c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
20000c2e:	687b      	ldr	r3, [r7, #4]
20000c30:	681b      	ldr	r3, [r3, #0]
20000c32:	68db      	ldr	r3, [r3, #12]
20000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000c38:	2b40      	cmp	r3, #64	; 0x40
20000c3a:	d107      	bne.n	20000c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
20000c3c:	687b      	ldr	r3, [r7, #4]
20000c3e:	681b      	ldr	r3, [r3, #0]
20000c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
20000c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
20000c46:	6878      	ldr	r0, [r7, #4]
20000c48:	f000 f838 	bl	20000cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
20000c4c:	687b      	ldr	r3, [r7, #4]
20000c4e:	681b      	ldr	r3, [r3, #0]
20000c50:	691b      	ldr	r3, [r3, #16]
20000c52:	f003 0320 	and.w	r3, r3, #32
20000c56:	2b20      	cmp	r3, #32
20000c58:	d10e      	bne.n	20000c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
20000c5a:	687b      	ldr	r3, [r7, #4]
20000c5c:	681b      	ldr	r3, [r3, #0]
20000c5e:	68db      	ldr	r3, [r3, #12]
20000c60:	f003 0320 	and.w	r3, r3, #32
20000c64:	2b20      	cmp	r3, #32
20000c66:	d107      	bne.n	20000c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
20000c68:	687b      	ldr	r3, [r7, #4]
20000c6a:	681b      	ldr	r3, [r3, #0]
20000c6c:	f06f 0220 	mvn.w	r2, #32
20000c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
20000c72:	6878      	ldr	r0, [r7, #4]
20000c74:	f000 f8cc 	bl	20000e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
20000c78:	bf00      	nop
20000c7a:	3708      	adds	r7, #8
20000c7c:	46bd      	mov	sp, r7
20000c7e:	bd80      	pop	{r7, pc}

20000c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
20000c80:	b480      	push	{r7}
20000c82:	b083      	sub	sp, #12
20000c84:	af00      	add	r7, sp, #0
20000c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
20000c88:	bf00      	nop
20000c8a:	370c      	adds	r7, #12
20000c8c:	46bd      	mov	sp, r7
20000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000c92:	4770      	bx	lr

20000c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
20000c94:	b480      	push	{r7}
20000c96:	b083      	sub	sp, #12
20000c98:	af00      	add	r7, sp, #0
20000c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
20000c9c:	bf00      	nop
20000c9e:	370c      	adds	r7, #12
20000ca0:	46bd      	mov	sp, r7
20000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
20000ca6:	4770      	bx	lr

20000ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
20000ca8:	b480      	push	{r7}
20000caa:	b083      	sub	sp, #12
20000cac:	af00      	add	r7, sp, #0
20000cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
20000cb0:	bf00      	nop
20000cb2:	370c      	adds	r7, #12
20000cb4:	46bd      	mov	sp, r7
20000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000cba:	4770      	bx	lr

20000cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
20000cbc:	b480      	push	{r7}
20000cbe:	b083      	sub	sp, #12
20000cc0:	af00      	add	r7, sp, #0
20000cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
20000cc4:	bf00      	nop
20000cc6:	370c      	adds	r7, #12
20000cc8:	46bd      	mov	sp, r7
20000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
20000cce:	4770      	bx	lr

20000cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
20000cd0:	b480      	push	{r7}
20000cd2:	b085      	sub	sp, #20
20000cd4:	af00      	add	r7, sp, #0
20000cd6:	6078      	str	r0, [r7, #4]
20000cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
20000cda:	687b      	ldr	r3, [r7, #4]
20000cdc:	681b      	ldr	r3, [r3, #0]
20000cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
20000ce0:	687b      	ldr	r3, [r7, #4]
20000ce2:	4a40      	ldr	r2, [pc, #256]	; (20000de4 <TIM_Base_SetConfig+0x114>)
20000ce4:	4293      	cmp	r3, r2
20000ce6:	d013      	beq.n	20000d10 <TIM_Base_SetConfig+0x40>
20000ce8:	687b      	ldr	r3, [r7, #4]
20000cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20000cee:	d00f      	beq.n	20000d10 <TIM_Base_SetConfig+0x40>
20000cf0:	687b      	ldr	r3, [r7, #4]
20000cf2:	4a3d      	ldr	r2, [pc, #244]	; (20000de8 <TIM_Base_SetConfig+0x118>)
20000cf4:	4293      	cmp	r3, r2
20000cf6:	d00b      	beq.n	20000d10 <TIM_Base_SetConfig+0x40>
20000cf8:	687b      	ldr	r3, [r7, #4]
20000cfa:	4a3c      	ldr	r2, [pc, #240]	; (20000dec <TIM_Base_SetConfig+0x11c>)
20000cfc:	4293      	cmp	r3, r2
20000cfe:	d007      	beq.n	20000d10 <TIM_Base_SetConfig+0x40>
20000d00:	687b      	ldr	r3, [r7, #4]
20000d02:	4a3b      	ldr	r2, [pc, #236]	; (20000df0 <TIM_Base_SetConfig+0x120>)
20000d04:	4293      	cmp	r3, r2
20000d06:	d003      	beq.n	20000d10 <TIM_Base_SetConfig+0x40>
20000d08:	687b      	ldr	r3, [r7, #4]
20000d0a:	4a3a      	ldr	r2, [pc, #232]	; (20000df4 <TIM_Base_SetConfig+0x124>)
20000d0c:	4293      	cmp	r3, r2
20000d0e:	d108      	bne.n	20000d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
20000d10:	68fb      	ldr	r3, [r7, #12]
20000d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
20000d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
20000d18:	683b      	ldr	r3, [r7, #0]
20000d1a:	685b      	ldr	r3, [r3, #4]
20000d1c:	68fa      	ldr	r2, [r7, #12]
20000d1e:	4313      	orrs	r3, r2
20000d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
20000d22:	687b      	ldr	r3, [r7, #4]
20000d24:	4a2f      	ldr	r2, [pc, #188]	; (20000de4 <TIM_Base_SetConfig+0x114>)
20000d26:	4293      	cmp	r3, r2
20000d28:	d02b      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d2a:	687b      	ldr	r3, [r7, #4]
20000d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
20000d30:	d027      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d32:	687b      	ldr	r3, [r7, #4]
20000d34:	4a2c      	ldr	r2, [pc, #176]	; (20000de8 <TIM_Base_SetConfig+0x118>)
20000d36:	4293      	cmp	r3, r2
20000d38:	d023      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d3a:	687b      	ldr	r3, [r7, #4]
20000d3c:	4a2b      	ldr	r2, [pc, #172]	; (20000dec <TIM_Base_SetConfig+0x11c>)
20000d3e:	4293      	cmp	r3, r2
20000d40:	d01f      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	4a2a      	ldr	r2, [pc, #168]	; (20000df0 <TIM_Base_SetConfig+0x120>)
20000d46:	4293      	cmp	r3, r2
20000d48:	d01b      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d4a:	687b      	ldr	r3, [r7, #4]
20000d4c:	4a29      	ldr	r2, [pc, #164]	; (20000df4 <TIM_Base_SetConfig+0x124>)
20000d4e:	4293      	cmp	r3, r2
20000d50:	d017      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d52:	687b      	ldr	r3, [r7, #4]
20000d54:	4a28      	ldr	r2, [pc, #160]	; (20000df8 <TIM_Base_SetConfig+0x128>)
20000d56:	4293      	cmp	r3, r2
20000d58:	d013      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d5a:	687b      	ldr	r3, [r7, #4]
20000d5c:	4a27      	ldr	r2, [pc, #156]	; (20000dfc <TIM_Base_SetConfig+0x12c>)
20000d5e:	4293      	cmp	r3, r2
20000d60:	d00f      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d62:	687b      	ldr	r3, [r7, #4]
20000d64:	4a26      	ldr	r2, [pc, #152]	; (20000e00 <TIM_Base_SetConfig+0x130>)
20000d66:	4293      	cmp	r3, r2
20000d68:	d00b      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d6a:	687b      	ldr	r3, [r7, #4]
20000d6c:	4a25      	ldr	r2, [pc, #148]	; (20000e04 <TIM_Base_SetConfig+0x134>)
20000d6e:	4293      	cmp	r3, r2
20000d70:	d007      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d72:	687b      	ldr	r3, [r7, #4]
20000d74:	4a24      	ldr	r2, [pc, #144]	; (20000e08 <TIM_Base_SetConfig+0x138>)
20000d76:	4293      	cmp	r3, r2
20000d78:	d003      	beq.n	20000d82 <TIM_Base_SetConfig+0xb2>
20000d7a:	687b      	ldr	r3, [r7, #4]
20000d7c:	4a23      	ldr	r2, [pc, #140]	; (20000e0c <TIM_Base_SetConfig+0x13c>)
20000d7e:	4293      	cmp	r3, r2
20000d80:	d108      	bne.n	20000d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
20000d82:	68fb      	ldr	r3, [r7, #12]
20000d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20000d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
20000d8a:	683b      	ldr	r3, [r7, #0]
20000d8c:	68db      	ldr	r3, [r3, #12]
20000d8e:	68fa      	ldr	r2, [r7, #12]
20000d90:	4313      	orrs	r3, r2
20000d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
20000d94:	68fb      	ldr	r3, [r7, #12]
20000d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
20000d9a:	683b      	ldr	r3, [r7, #0]
20000d9c:	695b      	ldr	r3, [r3, #20]
20000d9e:	4313      	orrs	r3, r2
20000da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
20000da2:	687b      	ldr	r3, [r7, #4]
20000da4:	68fa      	ldr	r2, [r7, #12]
20000da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
20000da8:	683b      	ldr	r3, [r7, #0]
20000daa:	689a      	ldr	r2, [r3, #8]
20000dac:	687b      	ldr	r3, [r7, #4]
20000dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
20000db0:	683b      	ldr	r3, [r7, #0]
20000db2:	681a      	ldr	r2, [r3, #0]
20000db4:	687b      	ldr	r3, [r7, #4]
20000db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
20000db8:	687b      	ldr	r3, [r7, #4]
20000dba:	4a0a      	ldr	r2, [pc, #40]	; (20000de4 <TIM_Base_SetConfig+0x114>)
20000dbc:	4293      	cmp	r3, r2
20000dbe:	d003      	beq.n	20000dc8 <TIM_Base_SetConfig+0xf8>
20000dc0:	687b      	ldr	r3, [r7, #4]
20000dc2:	4a0c      	ldr	r2, [pc, #48]	; (20000df4 <TIM_Base_SetConfig+0x124>)
20000dc4:	4293      	cmp	r3, r2
20000dc6:	d103      	bne.n	20000dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
20000dc8:	683b      	ldr	r3, [r7, #0]
20000dca:	691a      	ldr	r2, [r3, #16]
20000dcc:	687b      	ldr	r3, [r7, #4]
20000dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
20000dd0:	687b      	ldr	r3, [r7, #4]
20000dd2:	2201      	movs	r2, #1
20000dd4:	615a      	str	r2, [r3, #20]
}
20000dd6:	bf00      	nop
20000dd8:	3714      	adds	r7, #20
20000dda:	46bd      	mov	sp, r7
20000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
20000de0:	4770      	bx	lr
20000de2:	bf00      	nop
20000de4:	40010000 	.word	0x40010000
20000de8:	40000400 	.word	0x40000400
20000dec:	40000800 	.word	0x40000800
20000df0:	40000c00 	.word	0x40000c00
20000df4:	40010400 	.word	0x40010400
20000df8:	40014000 	.word	0x40014000
20000dfc:	40014400 	.word	0x40014400
20000e00:	40014800 	.word	0x40014800
20000e04:	40001800 	.word	0x40001800
20000e08:	40001c00 	.word	0x40001c00
20000e0c:	40002000 	.word	0x40002000

20000e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
20000e10:	b480      	push	{r7}
20000e12:	b083      	sub	sp, #12
20000e14:	af00      	add	r7, sp, #0
20000e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
20000e18:	bf00      	nop
20000e1a:	370c      	adds	r7, #12
20000e1c:	46bd      	mov	sp, r7
20000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e22:	4770      	bx	lr

20000e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
20000e24:	b480      	push	{r7}
20000e26:	b083      	sub	sp, #12
20000e28:	af00      	add	r7, sp, #0
20000e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
20000e2c:	bf00      	nop
20000e2e:	370c      	adds	r7, #12
20000e30:	46bd      	mov	sp, r7
20000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e36:	4770      	bx	lr

20000e38 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
20000e38:	b480      	push	{r7}
20000e3a:	b089      	sub	sp, #36	; 0x24
20000e3c:	af00      	add	r7, sp, #0
20000e3e:	60f8      	str	r0, [r7, #12]
20000e40:	60b9      	str	r1, [r7, #8]
20000e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
20000e44:	68fb      	ldr	r3, [r7, #12]
20000e46:	681a      	ldr	r2, [r3, #0]
20000e48:	68bb      	ldr	r3, [r7, #8]
20000e4a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000e4c:	697b      	ldr	r3, [r7, #20]
20000e4e:	fa93 f3a3 	rbit	r3, r3
20000e52:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
20000e54:	693b      	ldr	r3, [r7, #16]
20000e56:	fab3 f383 	clz	r3, r3
20000e5a:	b2db      	uxtb	r3, r3
20000e5c:	005b      	lsls	r3, r3, #1
20000e5e:	2103      	movs	r1, #3
20000e60:	fa01 f303 	lsl.w	r3, r1, r3
20000e64:	43db      	mvns	r3, r3
20000e66:	401a      	ands	r2, r3
20000e68:	68bb      	ldr	r3, [r7, #8]
20000e6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000e6c:	69fb      	ldr	r3, [r7, #28]
20000e6e:	fa93 f3a3 	rbit	r3, r3
20000e72:	61bb      	str	r3, [r7, #24]
  return result;
20000e74:	69bb      	ldr	r3, [r7, #24]
20000e76:	fab3 f383 	clz	r3, r3
20000e7a:	b2db      	uxtb	r3, r3
20000e7c:	005b      	lsls	r3, r3, #1
20000e7e:	6879      	ldr	r1, [r7, #4]
20000e80:	fa01 f303 	lsl.w	r3, r1, r3
20000e84:	431a      	orrs	r2, r3
20000e86:	68fb      	ldr	r3, [r7, #12]
20000e88:	601a      	str	r2, [r3, #0]
}
20000e8a:	bf00      	nop
20000e8c:	3724      	adds	r7, #36	; 0x24
20000e8e:	46bd      	mov	sp, r7
20000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e94:	4770      	bx	lr

20000e96 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
20000e96:	b480      	push	{r7}
20000e98:	b085      	sub	sp, #20
20000e9a:	af00      	add	r7, sp, #0
20000e9c:	60f8      	str	r0, [r7, #12]
20000e9e:	60b9      	str	r1, [r7, #8]
20000ea0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
20000ea2:	68fb      	ldr	r3, [r7, #12]
20000ea4:	685a      	ldr	r2, [r3, #4]
20000ea6:	68bb      	ldr	r3, [r7, #8]
20000ea8:	43db      	mvns	r3, r3
20000eaa:	401a      	ands	r2, r3
20000eac:	68bb      	ldr	r3, [r7, #8]
20000eae:	6879      	ldr	r1, [r7, #4]
20000eb0:	fb01 f303 	mul.w	r3, r1, r3
20000eb4:	431a      	orrs	r2, r3
20000eb6:	68fb      	ldr	r3, [r7, #12]
20000eb8:	605a      	str	r2, [r3, #4]
}
20000eba:	bf00      	nop
20000ebc:	3714      	adds	r7, #20
20000ebe:	46bd      	mov	sp, r7
20000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
20000ec4:	4770      	bx	lr

20000ec6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
20000ec6:	b480      	push	{r7}
20000ec8:	b089      	sub	sp, #36	; 0x24
20000eca:	af00      	add	r7, sp, #0
20000ecc:	60f8      	str	r0, [r7, #12]
20000ece:	60b9      	str	r1, [r7, #8]
20000ed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
20000ed2:	68fb      	ldr	r3, [r7, #12]
20000ed4:	689a      	ldr	r2, [r3, #8]
20000ed6:	68bb      	ldr	r3, [r7, #8]
20000ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000eda:	697b      	ldr	r3, [r7, #20]
20000edc:	fa93 f3a3 	rbit	r3, r3
20000ee0:	613b      	str	r3, [r7, #16]
  return result;
20000ee2:	693b      	ldr	r3, [r7, #16]
20000ee4:	fab3 f383 	clz	r3, r3
20000ee8:	b2db      	uxtb	r3, r3
20000eea:	005b      	lsls	r3, r3, #1
20000eec:	2103      	movs	r1, #3
20000eee:	fa01 f303 	lsl.w	r3, r1, r3
20000ef2:	43db      	mvns	r3, r3
20000ef4:	401a      	ands	r2, r3
20000ef6:	68bb      	ldr	r3, [r7, #8]
20000ef8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000efa:	69fb      	ldr	r3, [r7, #28]
20000efc:	fa93 f3a3 	rbit	r3, r3
20000f00:	61bb      	str	r3, [r7, #24]
  return result;
20000f02:	69bb      	ldr	r3, [r7, #24]
20000f04:	fab3 f383 	clz	r3, r3
20000f08:	b2db      	uxtb	r3, r3
20000f0a:	005b      	lsls	r3, r3, #1
20000f0c:	6879      	ldr	r1, [r7, #4]
20000f0e:	fa01 f303 	lsl.w	r3, r1, r3
20000f12:	431a      	orrs	r2, r3
20000f14:	68fb      	ldr	r3, [r7, #12]
20000f16:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
20000f18:	bf00      	nop
20000f1a:	3724      	adds	r7, #36	; 0x24
20000f1c:	46bd      	mov	sp, r7
20000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f22:	4770      	bx	lr

20000f24 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
20000f24:	b480      	push	{r7}
20000f26:	b089      	sub	sp, #36	; 0x24
20000f28:	af00      	add	r7, sp, #0
20000f2a:	60f8      	str	r0, [r7, #12]
20000f2c:	60b9      	str	r1, [r7, #8]
20000f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
20000f30:	68fb      	ldr	r3, [r7, #12]
20000f32:	68da      	ldr	r2, [r3, #12]
20000f34:	68bb      	ldr	r3, [r7, #8]
20000f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000f38:	697b      	ldr	r3, [r7, #20]
20000f3a:	fa93 f3a3 	rbit	r3, r3
20000f3e:	613b      	str	r3, [r7, #16]
  return result;
20000f40:	693b      	ldr	r3, [r7, #16]
20000f42:	fab3 f383 	clz	r3, r3
20000f46:	b2db      	uxtb	r3, r3
20000f48:	005b      	lsls	r3, r3, #1
20000f4a:	2103      	movs	r1, #3
20000f4c:	fa01 f303 	lsl.w	r3, r1, r3
20000f50:	43db      	mvns	r3, r3
20000f52:	401a      	ands	r2, r3
20000f54:	68bb      	ldr	r3, [r7, #8]
20000f56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000f58:	69fb      	ldr	r3, [r7, #28]
20000f5a:	fa93 f3a3 	rbit	r3, r3
20000f5e:	61bb      	str	r3, [r7, #24]
  return result;
20000f60:	69bb      	ldr	r3, [r7, #24]
20000f62:	fab3 f383 	clz	r3, r3
20000f66:	b2db      	uxtb	r3, r3
20000f68:	005b      	lsls	r3, r3, #1
20000f6a:	6879      	ldr	r1, [r7, #4]
20000f6c:	fa01 f303 	lsl.w	r3, r1, r3
20000f70:	431a      	orrs	r2, r3
20000f72:	68fb      	ldr	r3, [r7, #12]
20000f74:	60da      	str	r2, [r3, #12]
}
20000f76:	bf00      	nop
20000f78:	3724      	adds	r7, #36	; 0x24
20000f7a:	46bd      	mov	sp, r7
20000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f80:	4770      	bx	lr

20000f82 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000f82:	b480      	push	{r7}
20000f84:	b089      	sub	sp, #36	; 0x24
20000f86:	af00      	add	r7, sp, #0
20000f88:	60f8      	str	r0, [r7, #12]
20000f8a:	60b9      	str	r1, [r7, #8]
20000f8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
20000f8e:	68fb      	ldr	r3, [r7, #12]
20000f90:	6a1a      	ldr	r2, [r3, #32]
20000f92:	68bb      	ldr	r3, [r7, #8]
20000f94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000f96:	697b      	ldr	r3, [r7, #20]
20000f98:	fa93 f3a3 	rbit	r3, r3
20000f9c:	613b      	str	r3, [r7, #16]
  return result;
20000f9e:	693b      	ldr	r3, [r7, #16]
20000fa0:	fab3 f383 	clz	r3, r3
20000fa4:	b2db      	uxtb	r3, r3
20000fa6:	009b      	lsls	r3, r3, #2
20000fa8:	210f      	movs	r1, #15
20000faa:	fa01 f303 	lsl.w	r3, r1, r3
20000fae:	43db      	mvns	r3, r3
20000fb0:	401a      	ands	r2, r3
20000fb2:	68bb      	ldr	r3, [r7, #8]
20000fb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000fb6:	69fb      	ldr	r3, [r7, #28]
20000fb8:	fa93 f3a3 	rbit	r3, r3
20000fbc:	61bb      	str	r3, [r7, #24]
  return result;
20000fbe:	69bb      	ldr	r3, [r7, #24]
20000fc0:	fab3 f383 	clz	r3, r3
20000fc4:	b2db      	uxtb	r3, r3
20000fc6:	009b      	lsls	r3, r3, #2
20000fc8:	6879      	ldr	r1, [r7, #4]
20000fca:	fa01 f303 	lsl.w	r3, r1, r3
20000fce:	431a      	orrs	r2, r3
20000fd0:	68fb      	ldr	r3, [r7, #12]
20000fd2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
20000fd4:	bf00      	nop
20000fd6:	3724      	adds	r7, #36	; 0x24
20000fd8:	46bd      	mov	sp, r7
20000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fde:	4770      	bx	lr

20000fe0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000fe0:	b480      	push	{r7}
20000fe2:	b089      	sub	sp, #36	; 0x24
20000fe4:	af00      	add	r7, sp, #0
20000fe6:	60f8      	str	r0, [r7, #12]
20000fe8:	60b9      	str	r1, [r7, #8]
20000fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
20000fec:	68fb      	ldr	r3, [r7, #12]
20000fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
20000ff0:	68bb      	ldr	r3, [r7, #8]
20000ff2:	0a1b      	lsrs	r3, r3, #8
20000ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000ff6:	697b      	ldr	r3, [r7, #20]
20000ff8:	fa93 f3a3 	rbit	r3, r3
20000ffc:	613b      	str	r3, [r7, #16]
  return result;
20000ffe:	693b      	ldr	r3, [r7, #16]
20001000:	fab3 f383 	clz	r3, r3
20001004:	b2db      	uxtb	r3, r3
20001006:	009b      	lsls	r3, r3, #2
20001008:	210f      	movs	r1, #15
2000100a:	fa01 f303 	lsl.w	r3, r1, r3
2000100e:	43db      	mvns	r3, r3
20001010:	401a      	ands	r2, r3
20001012:	68bb      	ldr	r3, [r7, #8]
20001014:	0a1b      	lsrs	r3, r3, #8
20001016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20001018:	69fb      	ldr	r3, [r7, #28]
2000101a:	fa93 f3a3 	rbit	r3, r3
2000101e:	61bb      	str	r3, [r7, #24]
  return result;
20001020:	69bb      	ldr	r3, [r7, #24]
20001022:	fab3 f383 	clz	r3, r3
20001026:	b2db      	uxtb	r3, r3
20001028:	009b      	lsls	r3, r3, #2
2000102a:	6879      	ldr	r1, [r7, #4]
2000102c:	fa01 f303 	lsl.w	r3, r1, r3
20001030:	431a      	orrs	r2, r3
20001032:	68fb      	ldr	r3, [r7, #12]
20001034:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
20001036:	bf00      	nop
20001038:	3724      	adds	r7, #36	; 0x24
2000103a:	46bd      	mov	sp, r7
2000103c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001040:	4770      	bx	lr

20001042 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
20001042:	b580      	push	{r7, lr}
20001044:	b088      	sub	sp, #32
20001046:	af00      	add	r7, sp, #0
20001048:	6078      	str	r0, [r7, #4]
2000104a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
2000104c:	2300      	movs	r3, #0
2000104e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
20001050:	2300      	movs	r3, #0
20001052:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
20001054:	683b      	ldr	r3, [r7, #0]
20001056:	681b      	ldr	r3, [r3, #0]
20001058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000105a:	697b      	ldr	r3, [r7, #20]
2000105c:	fa93 f3a3 	rbit	r3, r3
20001060:	613b      	str	r3, [r7, #16]
  return result;
20001062:	693b      	ldr	r3, [r7, #16]
20001064:	fab3 f383 	clz	r3, r3
20001068:	b2db      	uxtb	r3, r3
2000106a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
2000106c:	e050      	b.n	20001110 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
2000106e:	683b      	ldr	r3, [r7, #0]
20001070:	681a      	ldr	r2, [r3, #0]
20001072:	2101      	movs	r1, #1
20001074:	69fb      	ldr	r3, [r7, #28]
20001076:	fa01 f303 	lsl.w	r3, r1, r3
2000107a:	4013      	ands	r3, r2
2000107c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
2000107e:	69bb      	ldr	r3, [r7, #24]
20001080:	2b00      	cmp	r3, #0
20001082:	d042      	beq.n	2000110a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
20001084:	683b      	ldr	r3, [r7, #0]
20001086:	685b      	ldr	r3, [r3, #4]
20001088:	2b01      	cmp	r3, #1
2000108a:	d003      	beq.n	20001094 <LL_GPIO_Init+0x52>
2000108c:	683b      	ldr	r3, [r7, #0]
2000108e:	685b      	ldr	r3, [r3, #4]
20001090:	2b02      	cmp	r3, #2
20001092:	d10d      	bne.n	200010b0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
20001094:	683b      	ldr	r3, [r7, #0]
20001096:	689b      	ldr	r3, [r3, #8]
20001098:	461a      	mov	r2, r3
2000109a:	69b9      	ldr	r1, [r7, #24]
2000109c:	6878      	ldr	r0, [r7, #4]
2000109e:	f7ff ff12 	bl	20000ec6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
200010a2:	683b      	ldr	r3, [r7, #0]
200010a4:	68db      	ldr	r3, [r3, #12]
200010a6:	461a      	mov	r2, r3
200010a8:	69b9      	ldr	r1, [r7, #24]
200010aa:	6878      	ldr	r0, [r7, #4]
200010ac:	f7ff fef3 	bl	20000e96 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
200010b0:	683b      	ldr	r3, [r7, #0]
200010b2:	691b      	ldr	r3, [r3, #16]
200010b4:	461a      	mov	r2, r3
200010b6:	69b9      	ldr	r1, [r7, #24]
200010b8:	6878      	ldr	r0, [r7, #4]
200010ba:	f7ff ff33 	bl	20000f24 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
200010be:	683b      	ldr	r3, [r7, #0]
200010c0:	685b      	ldr	r3, [r3, #4]
200010c2:	2b02      	cmp	r3, #2
200010c4:	d11a      	bne.n	200010fc <LL_GPIO_Init+0xba>
200010c6:	69bb      	ldr	r3, [r7, #24]
200010c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200010ca:	68fb      	ldr	r3, [r7, #12]
200010cc:	fa93 f3a3 	rbit	r3, r3
200010d0:	60bb      	str	r3, [r7, #8]
  return result;
200010d2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
200010d4:	fab3 f383 	clz	r3, r3
200010d8:	b2db      	uxtb	r3, r3
200010da:	2b07      	cmp	r3, #7
200010dc:	d807      	bhi.n	200010ee <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200010de:	683b      	ldr	r3, [r7, #0]
200010e0:	695b      	ldr	r3, [r3, #20]
200010e2:	461a      	mov	r2, r3
200010e4:	69b9      	ldr	r1, [r7, #24]
200010e6:	6878      	ldr	r0, [r7, #4]
200010e8:	f7ff ff4b 	bl	20000f82 <LL_GPIO_SetAFPin_0_7>
200010ec:	e006      	b.n	200010fc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200010ee:	683b      	ldr	r3, [r7, #0]
200010f0:	695b      	ldr	r3, [r3, #20]
200010f2:	461a      	mov	r2, r3
200010f4:	69b9      	ldr	r1, [r7, #24]
200010f6:	6878      	ldr	r0, [r7, #4]
200010f8:	f7ff ff72 	bl	20000fe0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
200010fc:	683b      	ldr	r3, [r7, #0]
200010fe:	685b      	ldr	r3, [r3, #4]
20001100:	461a      	mov	r2, r3
20001102:	69b9      	ldr	r1, [r7, #24]
20001104:	6878      	ldr	r0, [r7, #4]
20001106:	f7ff fe97 	bl	20000e38 <LL_GPIO_SetPinMode>
    }
    pinpos++;
2000110a:	69fb      	ldr	r3, [r7, #28]
2000110c:	3301      	adds	r3, #1
2000110e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
20001110:	683b      	ldr	r3, [r7, #0]
20001112:	681a      	ldr	r2, [r3, #0]
20001114:	69fb      	ldr	r3, [r7, #28]
20001116:	fa22 f303 	lsr.w	r3, r2, r3
2000111a:	2b00      	cmp	r3, #0
2000111c:	d1a7      	bne.n	2000106e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
2000111e:	2300      	movs	r3, #0
}
20001120:	4618      	mov	r0, r3
20001122:	3720      	adds	r7, #32
20001124:	46bd      	mov	sp, r7
20001126:	bd80      	pop	{r7, pc}

20001128 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
20001128:	b480      	push	{r7}
2000112a:	b083      	sub	sp, #12
2000112c:	af00      	add	r7, sp, #0
2000112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	681b      	ldr	r3, [r3, #0]
20001134:	f003 0340 	and.w	r3, r3, #64	; 0x40
20001138:	2b40      	cmp	r3, #64	; 0x40
2000113a:	d101      	bne.n	20001140 <LL_SPI_IsEnabled+0x18>
2000113c:	2301      	movs	r3, #1
2000113e:	e000      	b.n	20001142 <LL_SPI_IsEnabled+0x1a>
20001140:	2300      	movs	r3, #0
}
20001142:	4618      	mov	r0, r3
20001144:	370c      	adds	r7, #12
20001146:	46bd      	mov	sp, r7
20001148:	f85d 7b04 	ldr.w	r7, [sp], #4
2000114c:	4770      	bx	lr

2000114e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
2000114e:	b480      	push	{r7}
20001150:	b083      	sub	sp, #12
20001152:	af00      	add	r7, sp, #0
20001154:	6078      	str	r0, [r7, #4]
20001156:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
20001158:	683b      	ldr	r3, [r7, #0]
2000115a:	b29b      	uxth	r3, r3
2000115c:	461a      	mov	r2, r3
2000115e:	687b      	ldr	r3, [r7, #4]
20001160:	611a      	str	r2, [r3, #16]
}
20001162:	bf00      	nop
20001164:	370c      	adds	r7, #12
20001166:	46bd      	mov	sp, r7
20001168:	f85d 7b04 	ldr.w	r7, [sp], #4
2000116c:	4770      	bx	lr

2000116e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
2000116e:	b580      	push	{r7, lr}
20001170:	b084      	sub	sp, #16
20001172:	af00      	add	r7, sp, #0
20001174:	6078      	str	r0, [r7, #4]
20001176:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
20001178:	2301      	movs	r3, #1
2000117a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
2000117c:	6878      	ldr	r0, [r7, #4]
2000117e:	f7ff ffd3 	bl	20001128 <LL_SPI_IsEnabled>
20001182:	4603      	mov	r3, r0
20001184:	2b00      	cmp	r3, #0
20001186:	d139      	bne.n	200011fc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
20001188:	687b      	ldr	r3, [r7, #4]
2000118a:	681b      	ldr	r3, [r3, #0]
2000118c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
20001190:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
20001194:	683a      	ldr	r2, [r7, #0]
20001196:	6811      	ldr	r1, [r2, #0]
20001198:	683a      	ldr	r2, [r7, #0]
2000119a:	6852      	ldr	r2, [r2, #4]
2000119c:	4311      	orrs	r1, r2
2000119e:	683a      	ldr	r2, [r7, #0]
200011a0:	6892      	ldr	r2, [r2, #8]
200011a2:	4311      	orrs	r1, r2
200011a4:	683a      	ldr	r2, [r7, #0]
200011a6:	68d2      	ldr	r2, [r2, #12]
200011a8:	4311      	orrs	r1, r2
200011aa:	683a      	ldr	r2, [r7, #0]
200011ac:	6912      	ldr	r2, [r2, #16]
200011ae:	4311      	orrs	r1, r2
200011b0:	683a      	ldr	r2, [r7, #0]
200011b2:	6952      	ldr	r2, [r2, #20]
200011b4:	4311      	orrs	r1, r2
200011b6:	683a      	ldr	r2, [r7, #0]
200011b8:	6992      	ldr	r2, [r2, #24]
200011ba:	4311      	orrs	r1, r2
200011bc:	683a      	ldr	r2, [r7, #0]
200011be:	69d2      	ldr	r2, [r2, #28]
200011c0:	4311      	orrs	r1, r2
200011c2:	683a      	ldr	r2, [r7, #0]
200011c4:	6a12      	ldr	r2, [r2, #32]
200011c6:	430a      	orrs	r2, r1
200011c8:	431a      	orrs	r2, r3
200011ca:	687b      	ldr	r3, [r7, #4]
200011cc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
200011ce:	687b      	ldr	r3, [r7, #4]
200011d0:	685b      	ldr	r3, [r3, #4]
200011d2:	f023 0204 	bic.w	r2, r3, #4
200011d6:	683b      	ldr	r3, [r7, #0]
200011d8:	695b      	ldr	r3, [r3, #20]
200011da:	0c1b      	lsrs	r3, r3, #16
200011dc:	431a      	orrs	r2, r3
200011de:	687b      	ldr	r3, [r7, #4]
200011e0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
200011e2:	683b      	ldr	r3, [r7, #0]
200011e4:	6a1b      	ldr	r3, [r3, #32]
200011e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200011ea:	d105      	bne.n	200011f8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
200011ec:	683b      	ldr	r3, [r7, #0]
200011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200011f0:	4619      	mov	r1, r3
200011f2:	6878      	ldr	r0, [r7, #4]
200011f4:	f7ff ffab 	bl	2000114e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
200011f8:	2300      	movs	r3, #0
200011fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
200011fc:	687b      	ldr	r3, [r7, #4]
200011fe:	69db      	ldr	r3, [r3, #28]
20001200:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
20001204:	687b      	ldr	r3, [r7, #4]
20001206:	61da      	str	r2, [r3, #28]
  return status;
20001208:	7bfb      	ldrb	r3, [r7, #15]
}
2000120a:	4618      	mov	r0, r3
2000120c:	3710      	adds	r7, #16
2000120e:	46bd      	mov	sp, r7
20001210:	bd80      	pop	{r7, pc}
	...

20001214 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
20001214:	b480      	push	{r7}
20001216:	b085      	sub	sp, #20
20001218:	af00      	add	r7, sp, #0
2000121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
2000121c:	4b0f      	ldr	r3, [pc, #60]	; (2000125c <LL_mDelay+0x48>)
2000121e:	681b      	ldr	r3, [r3, #0]
20001220:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
20001222:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
20001224:	687b      	ldr	r3, [r7, #4]
20001226:	f1b3 3fff 	cmp.w	r3, #4294967295
2000122a:	d00c      	beq.n	20001246 <LL_mDelay+0x32>
  {
    Delay++;
2000122c:	687b      	ldr	r3, [r7, #4]
2000122e:	3301      	adds	r3, #1
20001230:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
20001232:	e008      	b.n	20001246 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
20001234:	4b09      	ldr	r3, [pc, #36]	; (2000125c <LL_mDelay+0x48>)
20001236:	681b      	ldr	r3, [r3, #0]
20001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000123c:	2b00      	cmp	r3, #0
2000123e:	d002      	beq.n	20001246 <LL_mDelay+0x32>
    {
      Delay--;
20001240:	687b      	ldr	r3, [r7, #4]
20001242:	3b01      	subs	r3, #1
20001244:	607b      	str	r3, [r7, #4]
  while (Delay)
20001246:	687b      	ldr	r3, [r7, #4]
20001248:	2b00      	cmp	r3, #0
2000124a:	d1f3      	bne.n	20001234 <LL_mDelay+0x20>
    }
  }
}
2000124c:	bf00      	nop
2000124e:	bf00      	nop
20001250:	3714      	adds	r7, #20
20001252:	46bd      	mov	sp, r7
20001254:	f85d 7b04 	ldr.w	r7, [sp], #4
20001258:	4770      	bx	lr
2000125a:	bf00      	nop
2000125c:	e000e010 	.word	0xe000e010

20001260 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
20001260:	b480      	push	{r7}
20001262:	b083      	sub	sp, #12
20001264:	af00      	add	r7, sp, #0
20001266:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
20001268:	4a04      	ldr	r2, [pc, #16]	; (2000127c <LL_SetSystemCoreClock+0x1c>)
2000126a:	687b      	ldr	r3, [r7, #4]
2000126c:	6013      	str	r3, [r2, #0]
}
2000126e:	bf00      	nop
20001270:	370c      	adds	r7, #12
20001272:	46bd      	mov	sp, r7
20001274:	f85d 7b04 	ldr.w	r7, [sp], #4
20001278:	4770      	bx	lr
2000127a:	bf00      	nop
2000127c:	2000a8fc 	.word	0x2000a8fc

20001280 <__NVIC_SetPriority>:
{
20001280:	b480      	push	{r7}
20001282:	b083      	sub	sp, #12
20001284:	af00      	add	r7, sp, #0
20001286:	4603      	mov	r3, r0
20001288:	6039      	str	r1, [r7, #0]
2000128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001290:	2b00      	cmp	r3, #0
20001292:	db0a      	blt.n	200012aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001294:	683b      	ldr	r3, [r7, #0]
20001296:	b2da      	uxtb	r2, r3
20001298:	490c      	ldr	r1, [pc, #48]	; (200012cc <__NVIC_SetPriority+0x4c>)
2000129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000129e:	0112      	lsls	r2, r2, #4
200012a0:	b2d2      	uxtb	r2, r2
200012a2:	440b      	add	r3, r1
200012a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200012a8:	e00a      	b.n	200012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200012aa:	683b      	ldr	r3, [r7, #0]
200012ac:	b2da      	uxtb	r2, r3
200012ae:	4908      	ldr	r1, [pc, #32]	; (200012d0 <__NVIC_SetPriority+0x50>)
200012b0:	79fb      	ldrb	r3, [r7, #7]
200012b2:	f003 030f 	and.w	r3, r3, #15
200012b6:	3b04      	subs	r3, #4
200012b8:	0112      	lsls	r2, r2, #4
200012ba:	b2d2      	uxtb	r2, r2
200012bc:	440b      	add	r3, r1
200012be:	761a      	strb	r2, [r3, #24]
}
200012c0:	bf00      	nop
200012c2:	370c      	adds	r7, #12
200012c4:	46bd      	mov	sp, r7
200012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200012ca:	4770      	bx	lr
200012cc:	e000e100 	.word	0xe000e100
200012d0:	e000ed00 	.word	0xe000ed00

200012d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
200012d4:	b580      	push	{r7, lr}
200012d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
200012d8:	4b05      	ldr	r3, [pc, #20]	; (200012f0 <SysTick_Handler+0x1c>)
200012da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
200012dc:	f001 fea2 	bl	20003024 <xTaskGetSchedulerState>
200012e0:	4603      	mov	r3, r0
200012e2:	2b01      	cmp	r3, #1
200012e4:	d001      	beq.n	200012ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
200012e6:	f002 fc87 	bl	20003bf8 <xPortSysTickHandler>
  }
}
200012ea:	bf00      	nop
200012ec:	bd80      	pop	{r7, pc}
200012ee:	bf00      	nop
200012f0:	e000e010 	.word	0xe000e010

200012f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
200012f4:	b580      	push	{r7, lr}
200012f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
200012f8:	2100      	movs	r1, #0
200012fa:	f06f 0004 	mvn.w	r0, #4
200012fe:	f7ff ffbf 	bl	20001280 <__NVIC_SetPriority>
#endif
}
20001302:	bf00      	nop
20001304:	bd80      	pop	{r7, pc}
	...

20001308 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
20001308:	b480      	push	{r7}
2000130a:	b083      	sub	sp, #12
2000130c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
2000130e:	f3ef 8305 	mrs	r3, IPSR
20001312:	603b      	str	r3, [r7, #0]
  return(result);
20001314:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20001316:	2b00      	cmp	r3, #0
20001318:	d003      	beq.n	20001322 <osKernelInitialize+0x1a>
    stat = osErrorISR;
2000131a:	f06f 0305 	mvn.w	r3, #5
2000131e:	607b      	str	r3, [r7, #4]
20001320:	e00c      	b.n	2000133c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
20001322:	4b0a      	ldr	r3, [pc, #40]	; (2000134c <osKernelInitialize+0x44>)
20001324:	681b      	ldr	r3, [r3, #0]
20001326:	2b00      	cmp	r3, #0
20001328:	d105      	bne.n	20001336 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
2000132a:	4b08      	ldr	r3, [pc, #32]	; (2000134c <osKernelInitialize+0x44>)
2000132c:	2201      	movs	r2, #1
2000132e:	601a      	str	r2, [r3, #0]
      stat = osOK;
20001330:	2300      	movs	r3, #0
20001332:	607b      	str	r3, [r7, #4]
20001334:	e002      	b.n	2000133c <osKernelInitialize+0x34>
    } else {
      stat = osError;
20001336:	f04f 33ff 	mov.w	r3, #4294967295
2000133a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
2000133c:	687b      	ldr	r3, [r7, #4]
}
2000133e:	4618      	mov	r0, r3
20001340:	370c      	adds	r7, #12
20001342:	46bd      	mov	sp, r7
20001344:	f85d 7b04 	ldr.w	r7, [sp], #4
20001348:	4770      	bx	lr
2000134a:	bf00      	nop
2000134c:	2000a984 	.word	0x2000a984

20001350 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
20001350:	b580      	push	{r7, lr}
20001352:	b082      	sub	sp, #8
20001354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20001356:	f3ef 8305 	mrs	r3, IPSR
2000135a:	603b      	str	r3, [r7, #0]
  return(result);
2000135c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
2000135e:	2b00      	cmp	r3, #0
20001360:	d003      	beq.n	2000136a <osKernelStart+0x1a>
    stat = osErrorISR;
20001362:	f06f 0305 	mvn.w	r3, #5
20001366:	607b      	str	r3, [r7, #4]
20001368:	e010      	b.n	2000138c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
2000136a:	4b0b      	ldr	r3, [pc, #44]	; (20001398 <osKernelStart+0x48>)
2000136c:	681b      	ldr	r3, [r3, #0]
2000136e:	2b01      	cmp	r3, #1
20001370:	d109      	bne.n	20001386 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
20001372:	f7ff ffbf 	bl	200012f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
20001376:	4b08      	ldr	r3, [pc, #32]	; (20001398 <osKernelStart+0x48>)
20001378:	2202      	movs	r2, #2
2000137a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
2000137c:	f001 f9f6 	bl	2000276c <vTaskStartScheduler>
      stat = osOK;
20001380:	2300      	movs	r3, #0
20001382:	607b      	str	r3, [r7, #4]
20001384:	e002      	b.n	2000138c <osKernelStart+0x3c>
    } else {
      stat = osError;
20001386:	f04f 33ff 	mov.w	r3, #4294967295
2000138a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
2000138c:	687b      	ldr	r3, [r7, #4]
}
2000138e:	4618      	mov	r0, r3
20001390:	3708      	adds	r7, #8
20001392:	46bd      	mov	sp, r7
20001394:	bd80      	pop	{r7, pc}
20001396:	bf00      	nop
20001398:	2000a984 	.word	0x2000a984

2000139c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
2000139c:	b580      	push	{r7, lr}
2000139e:	b08e      	sub	sp, #56	; 0x38
200013a0:	af04      	add	r7, sp, #16
200013a2:	60f8      	str	r0, [r7, #12]
200013a4:	60b9      	str	r1, [r7, #8]
200013a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
200013a8:	2300      	movs	r3, #0
200013aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200013ac:	f3ef 8305 	mrs	r3, IPSR
200013b0:	617b      	str	r3, [r7, #20]
  return(result);
200013b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
200013b4:	2b00      	cmp	r3, #0
200013b6:	d17e      	bne.n	200014b6 <osThreadNew+0x11a>
200013b8:	68fb      	ldr	r3, [r7, #12]
200013ba:	2b00      	cmp	r3, #0
200013bc:	d07b      	beq.n	200014b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
200013be:	2380      	movs	r3, #128	; 0x80
200013c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
200013c2:	2318      	movs	r3, #24
200013c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
200013c6:	2300      	movs	r3, #0
200013c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
200013ca:	f04f 33ff 	mov.w	r3, #4294967295
200013ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
200013d0:	687b      	ldr	r3, [r7, #4]
200013d2:	2b00      	cmp	r3, #0
200013d4:	d045      	beq.n	20001462 <osThreadNew+0xc6>
      if (attr->name != NULL) {
200013d6:	687b      	ldr	r3, [r7, #4]
200013d8:	681b      	ldr	r3, [r3, #0]
200013da:	2b00      	cmp	r3, #0
200013dc:	d002      	beq.n	200013e4 <osThreadNew+0x48>
        name = attr->name;
200013de:	687b      	ldr	r3, [r7, #4]
200013e0:	681b      	ldr	r3, [r3, #0]
200013e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
200013e4:	687b      	ldr	r3, [r7, #4]
200013e6:	699b      	ldr	r3, [r3, #24]
200013e8:	2b00      	cmp	r3, #0
200013ea:	d002      	beq.n	200013f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
200013ec:	687b      	ldr	r3, [r7, #4]
200013ee:	699b      	ldr	r3, [r3, #24]
200013f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
200013f2:	69fb      	ldr	r3, [r7, #28]
200013f4:	2b00      	cmp	r3, #0
200013f6:	d008      	beq.n	2000140a <osThreadNew+0x6e>
200013f8:	69fb      	ldr	r3, [r7, #28]
200013fa:	2b38      	cmp	r3, #56	; 0x38
200013fc:	d805      	bhi.n	2000140a <osThreadNew+0x6e>
200013fe:	687b      	ldr	r3, [r7, #4]
20001400:	685b      	ldr	r3, [r3, #4]
20001402:	f003 0301 	and.w	r3, r3, #1
20001406:	2b00      	cmp	r3, #0
20001408:	d001      	beq.n	2000140e <osThreadNew+0x72>
        return (NULL);
2000140a:	2300      	movs	r3, #0
2000140c:	e054      	b.n	200014b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
2000140e:	687b      	ldr	r3, [r7, #4]
20001410:	695b      	ldr	r3, [r3, #20]
20001412:	2b00      	cmp	r3, #0
20001414:	d003      	beq.n	2000141e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
20001416:	687b      	ldr	r3, [r7, #4]
20001418:	695b      	ldr	r3, [r3, #20]
2000141a:	089b      	lsrs	r3, r3, #2
2000141c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
2000141e:	687b      	ldr	r3, [r7, #4]
20001420:	689b      	ldr	r3, [r3, #8]
20001422:	2b00      	cmp	r3, #0
20001424:	d00e      	beq.n	20001444 <osThreadNew+0xa8>
20001426:	687b      	ldr	r3, [r7, #4]
20001428:	68db      	ldr	r3, [r3, #12]
2000142a:	2bbb      	cmp	r3, #187	; 0xbb
2000142c:	d90a      	bls.n	20001444 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
2000142e:	687b      	ldr	r3, [r7, #4]
20001430:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20001432:	2b00      	cmp	r3, #0
20001434:	d006      	beq.n	20001444 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20001436:	687b      	ldr	r3, [r7, #4]
20001438:	695b      	ldr	r3, [r3, #20]
2000143a:	2b00      	cmp	r3, #0
2000143c:	d002      	beq.n	20001444 <osThreadNew+0xa8>
        mem = 1;
2000143e:	2301      	movs	r3, #1
20001440:	61bb      	str	r3, [r7, #24]
20001442:	e010      	b.n	20001466 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
20001444:	687b      	ldr	r3, [r7, #4]
20001446:	689b      	ldr	r3, [r3, #8]
20001448:	2b00      	cmp	r3, #0
2000144a:	d10c      	bne.n	20001466 <osThreadNew+0xca>
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	68db      	ldr	r3, [r3, #12]
20001450:	2b00      	cmp	r3, #0
20001452:	d108      	bne.n	20001466 <osThreadNew+0xca>
20001454:	687b      	ldr	r3, [r7, #4]
20001456:	691b      	ldr	r3, [r3, #16]
20001458:	2b00      	cmp	r3, #0
2000145a:	d104      	bne.n	20001466 <osThreadNew+0xca>
          mem = 0;
2000145c:	2300      	movs	r3, #0
2000145e:	61bb      	str	r3, [r7, #24]
20001460:	e001      	b.n	20001466 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
20001462:	2300      	movs	r3, #0
20001464:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
20001466:	69bb      	ldr	r3, [r7, #24]
20001468:	2b01      	cmp	r3, #1
2000146a:	d110      	bne.n	2000148e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
2000146c:	687b      	ldr	r3, [r7, #4]
2000146e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
20001470:	687a      	ldr	r2, [r7, #4]
20001472:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20001474:	9202      	str	r2, [sp, #8]
20001476:	9301      	str	r3, [sp, #4]
20001478:	69fb      	ldr	r3, [r7, #28]
2000147a:	9300      	str	r3, [sp, #0]
2000147c:	68bb      	ldr	r3, [r7, #8]
2000147e:	6a3a      	ldr	r2, [r7, #32]
20001480:	6a79      	ldr	r1, [r7, #36]	; 0x24
20001482:	68f8      	ldr	r0, [r7, #12]
20001484:	f000 ff86 	bl	20002394 <xTaskCreateStatic>
20001488:	4603      	mov	r3, r0
2000148a:	613b      	str	r3, [r7, #16]
2000148c:	e013      	b.n	200014b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
2000148e:	69bb      	ldr	r3, [r7, #24]
20001490:	2b00      	cmp	r3, #0
20001492:	d110      	bne.n	200014b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
20001494:	6a3b      	ldr	r3, [r7, #32]
20001496:	b29a      	uxth	r2, r3
20001498:	f107 0310 	add.w	r3, r7, #16
2000149c:	9301      	str	r3, [sp, #4]
2000149e:	69fb      	ldr	r3, [r7, #28]
200014a0:	9300      	str	r3, [sp, #0]
200014a2:	68bb      	ldr	r3, [r7, #8]
200014a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
200014a6:	68f8      	ldr	r0, [r7, #12]
200014a8:	f000 ffd1 	bl	2000244e <xTaskCreate>
200014ac:	4603      	mov	r3, r0
200014ae:	2b01      	cmp	r3, #1
200014b0:	d001      	beq.n	200014b6 <osThreadNew+0x11a>
            hTask = NULL;
200014b2:	2300      	movs	r3, #0
200014b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
200014b6:	693b      	ldr	r3, [r7, #16]
}
200014b8:	4618      	mov	r0, r3
200014ba:	3728      	adds	r7, #40	; 0x28
200014bc:	46bd      	mov	sp, r7
200014be:	bd80      	pop	{r7, pc}

200014c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
200014c0:	b580      	push	{r7, lr}
200014c2:	b084      	sub	sp, #16
200014c4:	af00      	add	r7, sp, #0
200014c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
200014c8:	f3ef 8305 	mrs	r3, IPSR
200014cc:	60bb      	str	r3, [r7, #8]
  return(result);
200014ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
200014d0:	2b00      	cmp	r3, #0
200014d2:	d003      	beq.n	200014dc <osDelay+0x1c>
    stat = osErrorISR;
200014d4:	f06f 0305 	mvn.w	r3, #5
200014d8:	60fb      	str	r3, [r7, #12]
200014da:	e007      	b.n	200014ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
200014dc:	2300      	movs	r3, #0
200014de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
200014e0:	687b      	ldr	r3, [r7, #4]
200014e2:	2b00      	cmp	r3, #0
200014e4:	d002      	beq.n	200014ec <osDelay+0x2c>
      vTaskDelay(ticks);
200014e6:	6878      	ldr	r0, [r7, #4]
200014e8:	f001 f90c 	bl	20002704 <vTaskDelay>
    }
  }

  return (stat);
200014ec:	68fb      	ldr	r3, [r7, #12]
}
200014ee:	4618      	mov	r0, r3
200014f0:	3710      	adds	r7, #16
200014f2:	46bd      	mov	sp, r7
200014f4:	bd80      	pop	{r7, pc}

200014f6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
200014f6:	b580      	push	{r7, lr}
200014f8:	b08a      	sub	sp, #40	; 0x28
200014fa:	af02      	add	r7, sp, #8
200014fc:	60f8      	str	r0, [r7, #12]
200014fe:	60b9      	str	r1, [r7, #8]
20001500:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
20001502:	2300      	movs	r3, #0
20001504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20001506:	f3ef 8305 	mrs	r3, IPSR
2000150a:	613b      	str	r3, [r7, #16]
  return(result);
2000150c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
2000150e:	2b00      	cmp	r3, #0
20001510:	d175      	bne.n	200015fe <osSemaphoreNew+0x108>
20001512:	68fb      	ldr	r3, [r7, #12]
20001514:	2b00      	cmp	r3, #0
20001516:	d072      	beq.n	200015fe <osSemaphoreNew+0x108>
20001518:	68ba      	ldr	r2, [r7, #8]
2000151a:	68fb      	ldr	r3, [r7, #12]
2000151c:	429a      	cmp	r2, r3
2000151e:	d86e      	bhi.n	200015fe <osSemaphoreNew+0x108>
    mem = -1;
20001520:	f04f 33ff 	mov.w	r3, #4294967295
20001524:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
20001526:	687b      	ldr	r3, [r7, #4]
20001528:	2b00      	cmp	r3, #0
2000152a:	d015      	beq.n	20001558 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
2000152c:	687b      	ldr	r3, [r7, #4]
2000152e:	689b      	ldr	r3, [r3, #8]
20001530:	2b00      	cmp	r3, #0
20001532:	d006      	beq.n	20001542 <osSemaphoreNew+0x4c>
20001534:	687b      	ldr	r3, [r7, #4]
20001536:	68db      	ldr	r3, [r3, #12]
20001538:	2b4f      	cmp	r3, #79	; 0x4f
2000153a:	d902      	bls.n	20001542 <osSemaphoreNew+0x4c>
        mem = 1;
2000153c:	2301      	movs	r3, #1
2000153e:	61bb      	str	r3, [r7, #24]
20001540:	e00c      	b.n	2000155c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
20001542:	687b      	ldr	r3, [r7, #4]
20001544:	689b      	ldr	r3, [r3, #8]
20001546:	2b00      	cmp	r3, #0
20001548:	d108      	bne.n	2000155c <osSemaphoreNew+0x66>
2000154a:	687b      	ldr	r3, [r7, #4]
2000154c:	68db      	ldr	r3, [r3, #12]
2000154e:	2b00      	cmp	r3, #0
20001550:	d104      	bne.n	2000155c <osSemaphoreNew+0x66>
          mem = 0;
20001552:	2300      	movs	r3, #0
20001554:	61bb      	str	r3, [r7, #24]
20001556:	e001      	b.n	2000155c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
20001558:	2300      	movs	r3, #0
2000155a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
2000155c:	69bb      	ldr	r3, [r7, #24]
2000155e:	f1b3 3fff 	cmp.w	r3, #4294967295
20001562:	d04c      	beq.n	200015fe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
20001564:	68fb      	ldr	r3, [r7, #12]
20001566:	2b01      	cmp	r3, #1
20001568:	d128      	bne.n	200015bc <osSemaphoreNew+0xc6>
        if (mem == 1) {
2000156a:	69bb      	ldr	r3, [r7, #24]
2000156c:	2b01      	cmp	r3, #1
2000156e:	d10a      	bne.n	20001586 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
20001570:	687b      	ldr	r3, [r7, #4]
20001572:	689b      	ldr	r3, [r3, #8]
20001574:	2203      	movs	r2, #3
20001576:	9200      	str	r2, [sp, #0]
20001578:	2200      	movs	r2, #0
2000157a:	2100      	movs	r1, #0
2000157c:	2001      	movs	r0, #1
2000157e:	f000 f993 	bl	200018a8 <xQueueGenericCreateStatic>
20001582:	61f8      	str	r0, [r7, #28]
20001584:	e005      	b.n	20001592 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
20001586:	2203      	movs	r2, #3
20001588:	2100      	movs	r1, #0
2000158a:	2001      	movs	r0, #1
2000158c:	f000 fa04 	bl	20001998 <xQueueGenericCreate>
20001590:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
20001592:	69fb      	ldr	r3, [r7, #28]
20001594:	2b00      	cmp	r3, #0
20001596:	d022      	beq.n	200015de <osSemaphoreNew+0xe8>
20001598:	68bb      	ldr	r3, [r7, #8]
2000159a:	2b00      	cmp	r3, #0
2000159c:	d01f      	beq.n	200015de <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
2000159e:	2300      	movs	r3, #0
200015a0:	2200      	movs	r2, #0
200015a2:	2100      	movs	r1, #0
200015a4:	69f8      	ldr	r0, [r7, #28]
200015a6:	f000 fabf 	bl	20001b28 <xQueueGenericSend>
200015aa:	4603      	mov	r3, r0
200015ac:	2b01      	cmp	r3, #1
200015ae:	d016      	beq.n	200015de <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
200015b0:	69f8      	ldr	r0, [r7, #28]
200015b2:	f000 fd33 	bl	2000201c <vQueueDelete>
            hSemaphore = NULL;
200015b6:	2300      	movs	r3, #0
200015b8:	61fb      	str	r3, [r7, #28]
200015ba:	e010      	b.n	200015de <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
200015bc:	69bb      	ldr	r3, [r7, #24]
200015be:	2b01      	cmp	r3, #1
200015c0:	d108      	bne.n	200015d4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
200015c2:	687b      	ldr	r3, [r7, #4]
200015c4:	689b      	ldr	r3, [r3, #8]
200015c6:	461a      	mov	r2, r3
200015c8:	68b9      	ldr	r1, [r7, #8]
200015ca:	68f8      	ldr	r0, [r7, #12]
200015cc:	f000 fa41 	bl	20001a52 <xQueueCreateCountingSemaphoreStatic>
200015d0:	61f8      	str	r0, [r7, #28]
200015d2:	e004      	b.n	200015de <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
200015d4:	68b9      	ldr	r1, [r7, #8]
200015d6:	68f8      	ldr	r0, [r7, #12]
200015d8:	f000 fa72 	bl	20001ac0 <xQueueCreateCountingSemaphore>
200015dc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
200015de:	69fb      	ldr	r3, [r7, #28]
200015e0:	2b00      	cmp	r3, #0
200015e2:	d00c      	beq.n	200015fe <osSemaphoreNew+0x108>
        if (attr != NULL) {
200015e4:	687b      	ldr	r3, [r7, #4]
200015e6:	2b00      	cmp	r3, #0
200015e8:	d003      	beq.n	200015f2 <osSemaphoreNew+0xfc>
          name = attr->name;
200015ea:	687b      	ldr	r3, [r7, #4]
200015ec:	681b      	ldr	r3, [r3, #0]
200015ee:	617b      	str	r3, [r7, #20]
200015f0:	e001      	b.n	200015f6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
200015f2:	2300      	movs	r3, #0
200015f4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
200015f6:	6979      	ldr	r1, [r7, #20]
200015f8:	69f8      	ldr	r0, [r7, #28]
200015fa:	f000 fe43 	bl	20002284 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
200015fe:	69fb      	ldr	r3, [r7, #28]
}
20001600:	4618      	mov	r0, r3
20001602:	3720      	adds	r7, #32
20001604:	46bd      	mov	sp, r7
20001606:	bd80      	pop	{r7, pc}

20001608 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
20001608:	b480      	push	{r7}
2000160a:	b085      	sub	sp, #20
2000160c:	af00      	add	r7, sp, #0
2000160e:	60f8      	str	r0, [r7, #12]
20001610:	60b9      	str	r1, [r7, #8]
20001612:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
20001614:	68fb      	ldr	r3, [r7, #12]
20001616:	4a07      	ldr	r2, [pc, #28]	; (20001634 <vApplicationGetIdleTaskMemory+0x2c>)
20001618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
2000161a:	68bb      	ldr	r3, [r7, #8]
2000161c:	4a06      	ldr	r2, [pc, #24]	; (20001638 <vApplicationGetIdleTaskMemory+0x30>)
2000161e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
20001620:	687b      	ldr	r3, [r7, #4]
20001622:	2280      	movs	r2, #128	; 0x80
20001624:	601a      	str	r2, [r3, #0]
}
20001626:	bf00      	nop
20001628:	3714      	adds	r7, #20
2000162a:	46bd      	mov	sp, r7
2000162c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001630:	4770      	bx	lr
20001632:	bf00      	nop
20001634:	2000a988 	.word	0x2000a988
20001638:	2000aa44 	.word	0x2000aa44

2000163c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
2000163c:	b480      	push	{r7}
2000163e:	b085      	sub	sp, #20
20001640:	af00      	add	r7, sp, #0
20001642:	60f8      	str	r0, [r7, #12]
20001644:	60b9      	str	r1, [r7, #8]
20001646:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
20001648:	68fb      	ldr	r3, [r7, #12]
2000164a:	4a07      	ldr	r2, [pc, #28]	; (20001668 <vApplicationGetTimerTaskMemory+0x2c>)
2000164c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
2000164e:	68bb      	ldr	r3, [r7, #8]
20001650:	4a06      	ldr	r2, [pc, #24]	; (2000166c <vApplicationGetTimerTaskMemory+0x30>)
20001652:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
20001654:	687b      	ldr	r3, [r7, #4]
20001656:	f44f 7280 	mov.w	r2, #256	; 0x100
2000165a:	601a      	str	r2, [r3, #0]
}
2000165c:	bf00      	nop
2000165e:	3714      	adds	r7, #20
20001660:	46bd      	mov	sp, r7
20001662:	f85d 7b04 	ldr.w	r7, [sp], #4
20001666:	4770      	bx	lr
20001668:	2000ac44 	.word	0x2000ac44
2000166c:	2000ad00 	.word	0x2000ad00

20001670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20001670:	b480      	push	{r7}
20001672:	b083      	sub	sp, #12
20001674:	af00      	add	r7, sp, #0
20001676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001678:	687b      	ldr	r3, [r7, #4]
2000167a:	f103 0208 	add.w	r2, r3, #8
2000167e:	687b      	ldr	r3, [r7, #4]
20001680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20001682:	687b      	ldr	r3, [r7, #4]
20001684:	f04f 32ff 	mov.w	r2, #4294967295
20001688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
2000168a:	687b      	ldr	r3, [r7, #4]
2000168c:	f103 0208 	add.w	r2, r3, #8
20001690:	687b      	ldr	r3, [r7, #4]
20001692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20001694:	687b      	ldr	r3, [r7, #4]
20001696:	f103 0208 	add.w	r2, r3, #8
2000169a:	687b      	ldr	r3, [r7, #4]
2000169c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
2000169e:	687b      	ldr	r3, [r7, #4]
200016a0:	2200      	movs	r2, #0
200016a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
200016a4:	bf00      	nop
200016a6:	370c      	adds	r7, #12
200016a8:	46bd      	mov	sp, r7
200016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200016ae:	4770      	bx	lr

200016b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
200016b0:	b480      	push	{r7}
200016b2:	b083      	sub	sp, #12
200016b4:	af00      	add	r7, sp, #0
200016b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
200016b8:	687b      	ldr	r3, [r7, #4]
200016ba:	2200      	movs	r2, #0
200016bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
200016be:	bf00      	nop
200016c0:	370c      	adds	r7, #12
200016c2:	46bd      	mov	sp, r7
200016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200016c8:	4770      	bx	lr

200016ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
200016ca:	b480      	push	{r7}
200016cc:	b085      	sub	sp, #20
200016ce:	af00      	add	r7, sp, #0
200016d0:	6078      	str	r0, [r7, #4]
200016d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
200016d4:	687b      	ldr	r3, [r7, #4]
200016d6:	685b      	ldr	r3, [r3, #4]
200016d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
200016da:	683b      	ldr	r3, [r7, #0]
200016dc:	68fa      	ldr	r2, [r7, #12]
200016de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
200016e0:	68fb      	ldr	r3, [r7, #12]
200016e2:	689a      	ldr	r2, [r3, #8]
200016e4:	683b      	ldr	r3, [r7, #0]
200016e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
200016e8:	68fb      	ldr	r3, [r7, #12]
200016ea:	689b      	ldr	r3, [r3, #8]
200016ec:	683a      	ldr	r2, [r7, #0]
200016ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
200016f0:	68fb      	ldr	r3, [r7, #12]
200016f2:	683a      	ldr	r2, [r7, #0]
200016f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
200016f6:	683b      	ldr	r3, [r7, #0]
200016f8:	687a      	ldr	r2, [r7, #4]
200016fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
200016fc:	687b      	ldr	r3, [r7, #4]
200016fe:	681b      	ldr	r3, [r3, #0]
20001700:	1c5a      	adds	r2, r3, #1
20001702:	687b      	ldr	r3, [r7, #4]
20001704:	601a      	str	r2, [r3, #0]
}
20001706:	bf00      	nop
20001708:	3714      	adds	r7, #20
2000170a:	46bd      	mov	sp, r7
2000170c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001710:	4770      	bx	lr

20001712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20001712:	b480      	push	{r7}
20001714:	b085      	sub	sp, #20
20001716:	af00      	add	r7, sp, #0
20001718:	6078      	str	r0, [r7, #4]
2000171a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
2000171c:	683b      	ldr	r3, [r7, #0]
2000171e:	681b      	ldr	r3, [r3, #0]
20001720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20001722:	68bb      	ldr	r3, [r7, #8]
20001724:	f1b3 3fff 	cmp.w	r3, #4294967295
20001728:	d103      	bne.n	20001732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
2000172a:	687b      	ldr	r3, [r7, #4]
2000172c:	691b      	ldr	r3, [r3, #16]
2000172e:	60fb      	str	r3, [r7, #12]
20001730:	e00c      	b.n	2000174c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
20001732:	687b      	ldr	r3, [r7, #4]
20001734:	3308      	adds	r3, #8
20001736:	60fb      	str	r3, [r7, #12]
20001738:	e002      	b.n	20001740 <vListInsert+0x2e>
2000173a:	68fb      	ldr	r3, [r7, #12]
2000173c:	685b      	ldr	r3, [r3, #4]
2000173e:	60fb      	str	r3, [r7, #12]
20001740:	68fb      	ldr	r3, [r7, #12]
20001742:	685b      	ldr	r3, [r3, #4]
20001744:	681b      	ldr	r3, [r3, #0]
20001746:	68ba      	ldr	r2, [r7, #8]
20001748:	429a      	cmp	r2, r3
2000174a:	d2f6      	bcs.n	2000173a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
2000174c:	68fb      	ldr	r3, [r7, #12]
2000174e:	685a      	ldr	r2, [r3, #4]
20001750:	683b      	ldr	r3, [r7, #0]
20001752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001754:	683b      	ldr	r3, [r7, #0]
20001756:	685b      	ldr	r3, [r3, #4]
20001758:	683a      	ldr	r2, [r7, #0]
2000175a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
2000175c:	683b      	ldr	r3, [r7, #0]
2000175e:	68fa      	ldr	r2, [r7, #12]
20001760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20001762:	68fb      	ldr	r3, [r7, #12]
20001764:	683a      	ldr	r2, [r7, #0]
20001766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
20001768:	683b      	ldr	r3, [r7, #0]
2000176a:	687a      	ldr	r2, [r7, #4]
2000176c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000176e:	687b      	ldr	r3, [r7, #4]
20001770:	681b      	ldr	r3, [r3, #0]
20001772:	1c5a      	adds	r2, r3, #1
20001774:	687b      	ldr	r3, [r7, #4]
20001776:	601a      	str	r2, [r3, #0]
}
20001778:	bf00      	nop
2000177a:	3714      	adds	r7, #20
2000177c:	46bd      	mov	sp, r7
2000177e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001782:	4770      	bx	lr

20001784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20001784:	b480      	push	{r7}
20001786:	b085      	sub	sp, #20
20001788:	af00      	add	r7, sp, #0
2000178a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
2000178c:	687b      	ldr	r3, [r7, #4]
2000178e:	691b      	ldr	r3, [r3, #16]
20001790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20001792:	687b      	ldr	r3, [r7, #4]
20001794:	685b      	ldr	r3, [r3, #4]
20001796:	687a      	ldr	r2, [r7, #4]
20001798:	6892      	ldr	r2, [r2, #8]
2000179a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
2000179c:	687b      	ldr	r3, [r7, #4]
2000179e:	689b      	ldr	r3, [r3, #8]
200017a0:	687a      	ldr	r2, [r7, #4]
200017a2:	6852      	ldr	r2, [r2, #4]
200017a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
200017a6:	68fb      	ldr	r3, [r7, #12]
200017a8:	685b      	ldr	r3, [r3, #4]
200017aa:	687a      	ldr	r2, [r7, #4]
200017ac:	429a      	cmp	r2, r3
200017ae:	d103      	bne.n	200017b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
200017b0:	687b      	ldr	r3, [r7, #4]
200017b2:	689a      	ldr	r2, [r3, #8]
200017b4:	68fb      	ldr	r3, [r7, #12]
200017b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
200017b8:	687b      	ldr	r3, [r7, #4]
200017ba:	2200      	movs	r2, #0
200017bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
200017be:	68fb      	ldr	r3, [r7, #12]
200017c0:	681b      	ldr	r3, [r3, #0]
200017c2:	1e5a      	subs	r2, r3, #1
200017c4:	68fb      	ldr	r3, [r7, #12]
200017c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200017c8:	68fb      	ldr	r3, [r7, #12]
200017ca:	681b      	ldr	r3, [r3, #0]
}
200017cc:	4618      	mov	r0, r3
200017ce:	3714      	adds	r7, #20
200017d0:	46bd      	mov	sp, r7
200017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200017d6:	4770      	bx	lr

200017d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
200017d8:	b580      	push	{r7, lr}
200017da:	b084      	sub	sp, #16
200017dc:	af00      	add	r7, sp, #0
200017de:	6078      	str	r0, [r7, #4]
200017e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
200017e2:	687b      	ldr	r3, [r7, #4]
200017e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
200017e6:	68fb      	ldr	r3, [r7, #12]
200017e8:	2b00      	cmp	r3, #0
200017ea:	d10a      	bne.n	20001802 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
200017ec:	f04f 0350 	mov.w	r3, #80	; 0x50
200017f0:	f383 8811 	msr	BASEPRI, r3
200017f4:	f3bf 8f6f 	isb	sy
200017f8:	f3bf 8f4f 	dsb	sy
200017fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
200017fe:	bf00      	nop
20001800:	e7fe      	b.n	20001800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
20001802:	f002 f967 	bl	20003ad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20001806:	68fb      	ldr	r3, [r7, #12]
20001808:	681a      	ldr	r2, [r3, #0]
2000180a:	68fb      	ldr	r3, [r7, #12]
2000180c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000180e:	68f9      	ldr	r1, [r7, #12]
20001810:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001812:	fb01 f303 	mul.w	r3, r1, r3
20001816:	441a      	add	r2, r3
20001818:	68fb      	ldr	r3, [r7, #12]
2000181a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
2000181c:	68fb      	ldr	r3, [r7, #12]
2000181e:	2200      	movs	r2, #0
20001820:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001822:	68fb      	ldr	r3, [r7, #12]
20001824:	681a      	ldr	r2, [r3, #0]
20001826:	68fb      	ldr	r3, [r7, #12]
20001828:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
2000182a:	68fb      	ldr	r3, [r7, #12]
2000182c:	681a      	ldr	r2, [r3, #0]
2000182e:	68fb      	ldr	r3, [r7, #12]
20001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001832:	3b01      	subs	r3, #1
20001834:	68f9      	ldr	r1, [r7, #12]
20001836:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001838:	fb01 f303 	mul.w	r3, r1, r3
2000183c:	441a      	add	r2, r3
2000183e:	68fb      	ldr	r3, [r7, #12]
20001840:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20001842:	68fb      	ldr	r3, [r7, #12]
20001844:	22ff      	movs	r2, #255	; 0xff
20001846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
2000184a:	68fb      	ldr	r3, [r7, #12]
2000184c:	22ff      	movs	r2, #255	; 0xff
2000184e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
20001852:	683b      	ldr	r3, [r7, #0]
20001854:	2b00      	cmp	r3, #0
20001856:	d114      	bne.n	20001882 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001858:	68fb      	ldr	r3, [r7, #12]
2000185a:	691b      	ldr	r3, [r3, #16]
2000185c:	2b00      	cmp	r3, #0
2000185e:	d01a      	beq.n	20001896 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001860:	68fb      	ldr	r3, [r7, #12]
20001862:	3310      	adds	r3, #16
20001864:	4618      	mov	r0, r3
20001866:	f001 fa1b 	bl	20002ca0 <xTaskRemoveFromEventList>
2000186a:	4603      	mov	r3, r0
2000186c:	2b00      	cmp	r3, #0
2000186e:	d012      	beq.n	20001896 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
20001870:	4b0c      	ldr	r3, [pc, #48]	; (200018a4 <xQueueGenericReset+0xcc>)
20001872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001876:	601a      	str	r2, [r3, #0]
20001878:	f3bf 8f4f 	dsb	sy
2000187c:	f3bf 8f6f 	isb	sy
20001880:	e009      	b.n	20001896 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001882:	68fb      	ldr	r3, [r7, #12]
20001884:	3310      	adds	r3, #16
20001886:	4618      	mov	r0, r3
20001888:	f7ff fef2 	bl	20001670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
2000188c:	68fb      	ldr	r3, [r7, #12]
2000188e:	3324      	adds	r3, #36	; 0x24
20001890:	4618      	mov	r0, r3
20001892:	f7ff feed 	bl	20001670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
20001896:	f002 f94d 	bl	20003b34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
2000189a:	2301      	movs	r3, #1
}
2000189c:	4618      	mov	r0, r3
2000189e:	3710      	adds	r7, #16
200018a0:	46bd      	mov	sp, r7
200018a2:	bd80      	pop	{r7, pc}
200018a4:	e000ed04 	.word	0xe000ed04

200018a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
200018a8:	b580      	push	{r7, lr}
200018aa:	b08e      	sub	sp, #56	; 0x38
200018ac:	af02      	add	r7, sp, #8
200018ae:	60f8      	str	r0, [r7, #12]
200018b0:	60b9      	str	r1, [r7, #8]
200018b2:	607a      	str	r2, [r7, #4]
200018b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200018b6:	68fb      	ldr	r3, [r7, #12]
200018b8:	2b00      	cmp	r3, #0
200018ba:	d10a      	bne.n	200018d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
200018bc:	f04f 0350 	mov.w	r3, #80	; 0x50
200018c0:	f383 8811 	msr	BASEPRI, r3
200018c4:	f3bf 8f6f 	isb	sy
200018c8:	f3bf 8f4f 	dsb	sy
200018cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
200018ce:	bf00      	nop
200018d0:	e7fe      	b.n	200018d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
200018d2:	683b      	ldr	r3, [r7, #0]
200018d4:	2b00      	cmp	r3, #0
200018d6:	d10a      	bne.n	200018ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
200018d8:	f04f 0350 	mov.w	r3, #80	; 0x50
200018dc:	f383 8811 	msr	BASEPRI, r3
200018e0:	f3bf 8f6f 	isb	sy
200018e4:	f3bf 8f4f 	dsb	sy
200018e8:	627b      	str	r3, [r7, #36]	; 0x24
}
200018ea:	bf00      	nop
200018ec:	e7fe      	b.n	200018ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
200018ee:	687b      	ldr	r3, [r7, #4]
200018f0:	2b00      	cmp	r3, #0
200018f2:	d002      	beq.n	200018fa <xQueueGenericCreateStatic+0x52>
200018f4:	68bb      	ldr	r3, [r7, #8]
200018f6:	2b00      	cmp	r3, #0
200018f8:	d001      	beq.n	200018fe <xQueueGenericCreateStatic+0x56>
200018fa:	2301      	movs	r3, #1
200018fc:	e000      	b.n	20001900 <xQueueGenericCreateStatic+0x58>
200018fe:	2300      	movs	r3, #0
20001900:	2b00      	cmp	r3, #0
20001902:	d10a      	bne.n	2000191a <xQueueGenericCreateStatic+0x72>
	__asm volatile
20001904:	f04f 0350 	mov.w	r3, #80	; 0x50
20001908:	f383 8811 	msr	BASEPRI, r3
2000190c:	f3bf 8f6f 	isb	sy
20001910:	f3bf 8f4f 	dsb	sy
20001914:	623b      	str	r3, [r7, #32]
}
20001916:	bf00      	nop
20001918:	e7fe      	b.n	20001918 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
2000191a:	687b      	ldr	r3, [r7, #4]
2000191c:	2b00      	cmp	r3, #0
2000191e:	d102      	bne.n	20001926 <xQueueGenericCreateStatic+0x7e>
20001920:	68bb      	ldr	r3, [r7, #8]
20001922:	2b00      	cmp	r3, #0
20001924:	d101      	bne.n	2000192a <xQueueGenericCreateStatic+0x82>
20001926:	2301      	movs	r3, #1
20001928:	e000      	b.n	2000192c <xQueueGenericCreateStatic+0x84>
2000192a:	2300      	movs	r3, #0
2000192c:	2b00      	cmp	r3, #0
2000192e:	d10a      	bne.n	20001946 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
20001930:	f04f 0350 	mov.w	r3, #80	; 0x50
20001934:	f383 8811 	msr	BASEPRI, r3
20001938:	f3bf 8f6f 	isb	sy
2000193c:	f3bf 8f4f 	dsb	sy
20001940:	61fb      	str	r3, [r7, #28]
}
20001942:	bf00      	nop
20001944:	e7fe      	b.n	20001944 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
20001946:	2350      	movs	r3, #80	; 0x50
20001948:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
2000194a:	697b      	ldr	r3, [r7, #20]
2000194c:	2b50      	cmp	r3, #80	; 0x50
2000194e:	d00a      	beq.n	20001966 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
20001950:	f04f 0350 	mov.w	r3, #80	; 0x50
20001954:	f383 8811 	msr	BASEPRI, r3
20001958:	f3bf 8f6f 	isb	sy
2000195c:	f3bf 8f4f 	dsb	sy
20001960:	61bb      	str	r3, [r7, #24]
}
20001962:	bf00      	nop
20001964:	e7fe      	b.n	20001964 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
20001966:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20001968:	683b      	ldr	r3, [r7, #0]
2000196a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
2000196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000196e:	2b00      	cmp	r3, #0
20001970:	d00d      	beq.n	2000198e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
20001972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001974:	2201      	movs	r2, #1
20001976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
2000197a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
2000197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001980:	9300      	str	r3, [sp, #0]
20001982:	4613      	mov	r3, r2
20001984:	687a      	ldr	r2, [r7, #4]
20001986:	68b9      	ldr	r1, [r7, #8]
20001988:	68f8      	ldr	r0, [r7, #12]
2000198a:	f000 f83f 	bl	20001a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
2000198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
20001990:	4618      	mov	r0, r3
20001992:	3730      	adds	r7, #48	; 0x30
20001994:	46bd      	mov	sp, r7
20001996:	bd80      	pop	{r7, pc}

20001998 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20001998:	b580      	push	{r7, lr}
2000199a:	b08a      	sub	sp, #40	; 0x28
2000199c:	af02      	add	r7, sp, #8
2000199e:	60f8      	str	r0, [r7, #12]
200019a0:	60b9      	str	r1, [r7, #8]
200019a2:	4613      	mov	r3, r2
200019a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200019a6:	68fb      	ldr	r3, [r7, #12]
200019a8:	2b00      	cmp	r3, #0
200019aa:	d10a      	bne.n	200019c2 <xQueueGenericCreate+0x2a>
	__asm volatile
200019ac:	f04f 0350 	mov.w	r3, #80	; 0x50
200019b0:	f383 8811 	msr	BASEPRI, r3
200019b4:	f3bf 8f6f 	isb	sy
200019b8:	f3bf 8f4f 	dsb	sy
200019bc:	613b      	str	r3, [r7, #16]
}
200019be:	bf00      	nop
200019c0:	e7fe      	b.n	200019c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200019c2:	68fb      	ldr	r3, [r7, #12]
200019c4:	68ba      	ldr	r2, [r7, #8]
200019c6:	fb02 f303 	mul.w	r3, r2, r3
200019ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
200019cc:	69fb      	ldr	r3, [r7, #28]
200019ce:	3350      	adds	r3, #80	; 0x50
200019d0:	4618      	mov	r0, r3
200019d2:	f002 f9a1 	bl	20003d18 <pvPortMalloc>
200019d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
200019d8:	69bb      	ldr	r3, [r7, #24]
200019da:	2b00      	cmp	r3, #0
200019dc:	d011      	beq.n	20001a02 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
200019de:	69bb      	ldr	r3, [r7, #24]
200019e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
200019e2:	697b      	ldr	r3, [r7, #20]
200019e4:	3350      	adds	r3, #80	; 0x50
200019e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
200019e8:	69bb      	ldr	r3, [r7, #24]
200019ea:	2200      	movs	r2, #0
200019ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200019f0:	79fa      	ldrb	r2, [r7, #7]
200019f2:	69bb      	ldr	r3, [r7, #24]
200019f4:	9300      	str	r3, [sp, #0]
200019f6:	4613      	mov	r3, r2
200019f8:	697a      	ldr	r2, [r7, #20]
200019fa:	68b9      	ldr	r1, [r7, #8]
200019fc:	68f8      	ldr	r0, [r7, #12]
200019fe:	f000 f805 	bl	20001a0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
20001a02:	69bb      	ldr	r3, [r7, #24]
	}
20001a04:	4618      	mov	r0, r3
20001a06:	3720      	adds	r7, #32
20001a08:	46bd      	mov	sp, r7
20001a0a:	bd80      	pop	{r7, pc}

20001a0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001a0c:	b580      	push	{r7, lr}
20001a0e:	b084      	sub	sp, #16
20001a10:	af00      	add	r7, sp, #0
20001a12:	60f8      	str	r0, [r7, #12]
20001a14:	60b9      	str	r1, [r7, #8]
20001a16:	607a      	str	r2, [r7, #4]
20001a18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20001a1a:	68bb      	ldr	r3, [r7, #8]
20001a1c:	2b00      	cmp	r3, #0
20001a1e:	d103      	bne.n	20001a28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001a20:	69bb      	ldr	r3, [r7, #24]
20001a22:	69ba      	ldr	r2, [r7, #24]
20001a24:	601a      	str	r2, [r3, #0]
20001a26:	e002      	b.n	20001a2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001a28:	69bb      	ldr	r3, [r7, #24]
20001a2a:	687a      	ldr	r2, [r7, #4]
20001a2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
20001a2e:	69bb      	ldr	r3, [r7, #24]
20001a30:	68fa      	ldr	r2, [r7, #12]
20001a32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20001a34:	69bb      	ldr	r3, [r7, #24]
20001a36:	68ba      	ldr	r2, [r7, #8]
20001a38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
20001a3a:	2101      	movs	r1, #1
20001a3c:	69b8      	ldr	r0, [r7, #24]
20001a3e:	f7ff fecb 	bl	200017d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
20001a42:	69bb      	ldr	r3, [r7, #24]
20001a44:	78fa      	ldrb	r2, [r7, #3]
20001a46:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
20001a4a:	bf00      	nop
20001a4c:	3710      	adds	r7, #16
20001a4e:	46bd      	mov	sp, r7
20001a50:	bd80      	pop	{r7, pc}

20001a52 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
20001a52:	b580      	push	{r7, lr}
20001a54:	b08a      	sub	sp, #40	; 0x28
20001a56:	af02      	add	r7, sp, #8
20001a58:	60f8      	str	r0, [r7, #12]
20001a5a:	60b9      	str	r1, [r7, #8]
20001a5c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
20001a5e:	68fb      	ldr	r3, [r7, #12]
20001a60:	2b00      	cmp	r3, #0
20001a62:	d10a      	bne.n	20001a7a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
20001a64:	f04f 0350 	mov.w	r3, #80	; 0x50
20001a68:	f383 8811 	msr	BASEPRI, r3
20001a6c:	f3bf 8f6f 	isb	sy
20001a70:	f3bf 8f4f 	dsb	sy
20001a74:	61bb      	str	r3, [r7, #24]
}
20001a76:	bf00      	nop
20001a78:	e7fe      	b.n	20001a78 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
20001a7a:	68ba      	ldr	r2, [r7, #8]
20001a7c:	68fb      	ldr	r3, [r7, #12]
20001a7e:	429a      	cmp	r2, r3
20001a80:	d90a      	bls.n	20001a98 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
20001a82:	f04f 0350 	mov.w	r3, #80	; 0x50
20001a86:	f383 8811 	msr	BASEPRI, r3
20001a8a:	f3bf 8f6f 	isb	sy
20001a8e:	f3bf 8f4f 	dsb	sy
20001a92:	617b      	str	r3, [r7, #20]
}
20001a94:	bf00      	nop
20001a96:	e7fe      	b.n	20001a96 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001a98:	2302      	movs	r3, #2
20001a9a:	9300      	str	r3, [sp, #0]
20001a9c:	687b      	ldr	r3, [r7, #4]
20001a9e:	2200      	movs	r2, #0
20001aa0:	2100      	movs	r1, #0
20001aa2:	68f8      	ldr	r0, [r7, #12]
20001aa4:	f7ff ff00 	bl	200018a8 <xQueueGenericCreateStatic>
20001aa8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
20001aaa:	69fb      	ldr	r3, [r7, #28]
20001aac:	2b00      	cmp	r3, #0
20001aae:	d002      	beq.n	20001ab6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
20001ab0:	69fb      	ldr	r3, [r7, #28]
20001ab2:	68ba      	ldr	r2, [r7, #8]
20001ab4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
20001ab6:	69fb      	ldr	r3, [r7, #28]
	}
20001ab8:	4618      	mov	r0, r3
20001aba:	3720      	adds	r7, #32
20001abc:	46bd      	mov	sp, r7
20001abe:	bd80      	pop	{r7, pc}

20001ac0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
20001ac0:	b580      	push	{r7, lr}
20001ac2:	b086      	sub	sp, #24
20001ac4:	af00      	add	r7, sp, #0
20001ac6:	6078      	str	r0, [r7, #4]
20001ac8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
20001aca:	687b      	ldr	r3, [r7, #4]
20001acc:	2b00      	cmp	r3, #0
20001ace:	d10a      	bne.n	20001ae6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
20001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ad4:	f383 8811 	msr	BASEPRI, r3
20001ad8:	f3bf 8f6f 	isb	sy
20001adc:	f3bf 8f4f 	dsb	sy
20001ae0:	613b      	str	r3, [r7, #16]
}
20001ae2:	bf00      	nop
20001ae4:	e7fe      	b.n	20001ae4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
20001ae6:	683a      	ldr	r2, [r7, #0]
20001ae8:	687b      	ldr	r3, [r7, #4]
20001aea:	429a      	cmp	r2, r3
20001aec:	d90a      	bls.n	20001b04 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
20001aee:	f04f 0350 	mov.w	r3, #80	; 0x50
20001af2:	f383 8811 	msr	BASEPRI, r3
20001af6:	f3bf 8f6f 	isb	sy
20001afa:	f3bf 8f4f 	dsb	sy
20001afe:	60fb      	str	r3, [r7, #12]
}
20001b00:	bf00      	nop
20001b02:	e7fe      	b.n	20001b02 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001b04:	2202      	movs	r2, #2
20001b06:	2100      	movs	r1, #0
20001b08:	6878      	ldr	r0, [r7, #4]
20001b0a:	f7ff ff45 	bl	20001998 <xQueueGenericCreate>
20001b0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
20001b10:	697b      	ldr	r3, [r7, #20]
20001b12:	2b00      	cmp	r3, #0
20001b14:	d002      	beq.n	20001b1c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
20001b16:	697b      	ldr	r3, [r7, #20]
20001b18:	683a      	ldr	r2, [r7, #0]
20001b1a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
20001b1c:	697b      	ldr	r3, [r7, #20]
	}
20001b1e:	4618      	mov	r0, r3
20001b20:	3718      	adds	r7, #24
20001b22:	46bd      	mov	sp, r7
20001b24:	bd80      	pop	{r7, pc}
	...

20001b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001b28:	b580      	push	{r7, lr}
20001b2a:	b08e      	sub	sp, #56	; 0x38
20001b2c:	af00      	add	r7, sp, #0
20001b2e:	60f8      	str	r0, [r7, #12]
20001b30:	60b9      	str	r1, [r7, #8]
20001b32:	607a      	str	r2, [r7, #4]
20001b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
20001b36:	2300      	movs	r3, #0
20001b38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001b3a:	68fb      	ldr	r3, [r7, #12]
20001b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
20001b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001b40:	2b00      	cmp	r3, #0
20001b42:	d10a      	bne.n	20001b5a <xQueueGenericSend+0x32>
	__asm volatile
20001b44:	f04f 0350 	mov.w	r3, #80	; 0x50
20001b48:	f383 8811 	msr	BASEPRI, r3
20001b4c:	f3bf 8f6f 	isb	sy
20001b50:	f3bf 8f4f 	dsb	sy
20001b54:	62bb      	str	r3, [r7, #40]	; 0x28
}
20001b56:	bf00      	nop
20001b58:	e7fe      	b.n	20001b58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001b5a:	68bb      	ldr	r3, [r7, #8]
20001b5c:	2b00      	cmp	r3, #0
20001b5e:	d103      	bne.n	20001b68 <xQueueGenericSend+0x40>
20001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001b64:	2b00      	cmp	r3, #0
20001b66:	d101      	bne.n	20001b6c <xQueueGenericSend+0x44>
20001b68:	2301      	movs	r3, #1
20001b6a:	e000      	b.n	20001b6e <xQueueGenericSend+0x46>
20001b6c:	2300      	movs	r3, #0
20001b6e:	2b00      	cmp	r3, #0
20001b70:	d10a      	bne.n	20001b88 <xQueueGenericSend+0x60>
	__asm volatile
20001b72:	f04f 0350 	mov.w	r3, #80	; 0x50
20001b76:	f383 8811 	msr	BASEPRI, r3
20001b7a:	f3bf 8f6f 	isb	sy
20001b7e:	f3bf 8f4f 	dsb	sy
20001b82:	627b      	str	r3, [r7, #36]	; 0x24
}
20001b84:	bf00      	nop
20001b86:	e7fe      	b.n	20001b86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001b88:	683b      	ldr	r3, [r7, #0]
20001b8a:	2b02      	cmp	r3, #2
20001b8c:	d103      	bne.n	20001b96 <xQueueGenericSend+0x6e>
20001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001b92:	2b01      	cmp	r3, #1
20001b94:	d101      	bne.n	20001b9a <xQueueGenericSend+0x72>
20001b96:	2301      	movs	r3, #1
20001b98:	e000      	b.n	20001b9c <xQueueGenericSend+0x74>
20001b9a:	2300      	movs	r3, #0
20001b9c:	2b00      	cmp	r3, #0
20001b9e:	d10a      	bne.n	20001bb6 <xQueueGenericSend+0x8e>
	__asm volatile
20001ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ba4:	f383 8811 	msr	BASEPRI, r3
20001ba8:	f3bf 8f6f 	isb	sy
20001bac:	f3bf 8f4f 	dsb	sy
20001bb0:	623b      	str	r3, [r7, #32]
}
20001bb2:	bf00      	nop
20001bb4:	e7fe      	b.n	20001bb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001bb6:	f001 fa35 	bl	20003024 <xTaskGetSchedulerState>
20001bba:	4603      	mov	r3, r0
20001bbc:	2b00      	cmp	r3, #0
20001bbe:	d102      	bne.n	20001bc6 <xQueueGenericSend+0x9e>
20001bc0:	687b      	ldr	r3, [r7, #4]
20001bc2:	2b00      	cmp	r3, #0
20001bc4:	d101      	bne.n	20001bca <xQueueGenericSend+0xa2>
20001bc6:	2301      	movs	r3, #1
20001bc8:	e000      	b.n	20001bcc <xQueueGenericSend+0xa4>
20001bca:	2300      	movs	r3, #0
20001bcc:	2b00      	cmp	r3, #0
20001bce:	d10a      	bne.n	20001be6 <xQueueGenericSend+0xbe>
	__asm volatile
20001bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
20001bd4:	f383 8811 	msr	BASEPRI, r3
20001bd8:	f3bf 8f6f 	isb	sy
20001bdc:	f3bf 8f4f 	dsb	sy
20001be0:	61fb      	str	r3, [r7, #28]
}
20001be2:	bf00      	nop
20001be4:	e7fe      	b.n	20001be4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001be6:	f001 ff75 	bl	20003ad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001bf2:	429a      	cmp	r2, r3
20001bf4:	d302      	bcc.n	20001bfc <xQueueGenericSend+0xd4>
20001bf6:	683b      	ldr	r3, [r7, #0]
20001bf8:	2b02      	cmp	r3, #2
20001bfa:	d129      	bne.n	20001c50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001bfc:	683a      	ldr	r2, [r7, #0]
20001bfe:	68b9      	ldr	r1, [r7, #8]
20001c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001c02:	f000 fa2e 	bl	20002062 <prvCopyDataToQueue>
20001c06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001c0c:	2b00      	cmp	r3, #0
20001c0e:	d010      	beq.n	20001c32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c12:	3324      	adds	r3, #36	; 0x24
20001c14:	4618      	mov	r0, r3
20001c16:	f001 f843 	bl	20002ca0 <xTaskRemoveFromEventList>
20001c1a:	4603      	mov	r3, r0
20001c1c:	2b00      	cmp	r3, #0
20001c1e:	d013      	beq.n	20001c48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001c20:	4b3f      	ldr	r3, [pc, #252]	; (20001d20 <xQueueGenericSend+0x1f8>)
20001c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c26:	601a      	str	r2, [r3, #0]
20001c28:	f3bf 8f4f 	dsb	sy
20001c2c:	f3bf 8f6f 	isb	sy
20001c30:	e00a      	b.n	20001c48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001c34:	2b00      	cmp	r3, #0
20001c36:	d007      	beq.n	20001c48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001c38:	4b39      	ldr	r3, [pc, #228]	; (20001d20 <xQueueGenericSend+0x1f8>)
20001c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c3e:	601a      	str	r2, [r3, #0]
20001c40:	f3bf 8f4f 	dsb	sy
20001c44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001c48:	f001 ff74 	bl	20003b34 <vPortExitCritical>
				return pdPASS;
20001c4c:	2301      	movs	r3, #1
20001c4e:	e063      	b.n	20001d18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001c50:	687b      	ldr	r3, [r7, #4]
20001c52:	2b00      	cmp	r3, #0
20001c54:	d103      	bne.n	20001c5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001c56:	f001 ff6d 	bl	20003b34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
20001c5a:	2300      	movs	r3, #0
20001c5c:	e05c      	b.n	20001d18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
20001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001c60:	2b00      	cmp	r3, #0
20001c62:	d106      	bne.n	20001c72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001c64:	f107 0314 	add.w	r3, r7, #20
20001c68:	4618      	mov	r0, r3
20001c6a:	f001 f87d 	bl	20002d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001c6e:	2301      	movs	r3, #1
20001c70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001c72:	f001 ff5f 	bl	20003b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001c76:	f000 fde9 	bl	2000284c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001c7a:	f001 ff2b 	bl	20003ad4 <vPortEnterCritical>
20001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001c84:	b25b      	sxtb	r3, r3
20001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
20001c8a:	d103      	bne.n	20001c94 <xQueueGenericSend+0x16c>
20001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c8e:	2200      	movs	r2, #0
20001c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001c9a:	b25b      	sxtb	r3, r3
20001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ca0:	d103      	bne.n	20001caa <xQueueGenericSend+0x182>
20001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ca4:	2200      	movs	r2, #0
20001ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001caa:	f001 ff43 	bl	20003b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001cae:	1d3a      	adds	r2, r7, #4
20001cb0:	f107 0314 	add.w	r3, r7, #20
20001cb4:	4611      	mov	r1, r2
20001cb6:	4618      	mov	r0, r3
20001cb8:	f001 f86c 	bl	20002d94 <xTaskCheckForTimeOut>
20001cbc:	4603      	mov	r3, r0
20001cbe:	2b00      	cmp	r3, #0
20001cc0:	d124      	bne.n	20001d0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
20001cc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001cc4:	f000 fac5 	bl	20002252 <prvIsQueueFull>
20001cc8:	4603      	mov	r3, r0
20001cca:	2b00      	cmp	r3, #0
20001ccc:	d018      	beq.n	20001d00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
20001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001cd0:	3310      	adds	r3, #16
20001cd2:	687a      	ldr	r2, [r7, #4]
20001cd4:	4611      	mov	r1, r2
20001cd6:	4618      	mov	r0, r3
20001cd8:	f000 ff92 	bl	20002c00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001cde:	f000 fa50 	bl	20002182 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
20001ce2:	f000 fdc1 	bl	20002868 <xTaskResumeAll>
20001ce6:	4603      	mov	r3, r0
20001ce8:	2b00      	cmp	r3, #0
20001cea:	f47f af7c 	bne.w	20001be6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
20001cee:	4b0c      	ldr	r3, [pc, #48]	; (20001d20 <xQueueGenericSend+0x1f8>)
20001cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001cf4:	601a      	str	r2, [r3, #0]
20001cf6:	f3bf 8f4f 	dsb	sy
20001cfa:	f3bf 8f6f 	isb	sy
20001cfe:	e772      	b.n	20001be6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001d02:	f000 fa3e 	bl	20002182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001d06:	f000 fdaf 	bl	20002868 <xTaskResumeAll>
20001d0a:	e76c      	b.n	20001be6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
20001d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001d0e:	f000 fa38 	bl	20002182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001d12:	f000 fda9 	bl	20002868 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001d16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
20001d18:	4618      	mov	r0, r3
20001d1a:	3738      	adds	r7, #56	; 0x38
20001d1c:	46bd      	mov	sp, r7
20001d1e:	bd80      	pop	{r7, pc}
20001d20:	e000ed04 	.word	0xe000ed04

20001d24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001d24:	b580      	push	{r7, lr}
20001d26:	b090      	sub	sp, #64	; 0x40
20001d28:	af00      	add	r7, sp, #0
20001d2a:	60f8      	str	r0, [r7, #12]
20001d2c:	60b9      	str	r1, [r7, #8]
20001d2e:	607a      	str	r2, [r7, #4]
20001d30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001d32:	68fb      	ldr	r3, [r7, #12]
20001d34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
20001d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001d38:	2b00      	cmp	r3, #0
20001d3a:	d10a      	bne.n	20001d52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
20001d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d40:	f383 8811 	msr	BASEPRI, r3
20001d44:	f3bf 8f6f 	isb	sy
20001d48:	f3bf 8f4f 	dsb	sy
20001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
20001d4e:	bf00      	nop
20001d50:	e7fe      	b.n	20001d50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001d52:	68bb      	ldr	r3, [r7, #8]
20001d54:	2b00      	cmp	r3, #0
20001d56:	d103      	bne.n	20001d60 <xQueueGenericSendFromISR+0x3c>
20001d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001d5c:	2b00      	cmp	r3, #0
20001d5e:	d101      	bne.n	20001d64 <xQueueGenericSendFromISR+0x40>
20001d60:	2301      	movs	r3, #1
20001d62:	e000      	b.n	20001d66 <xQueueGenericSendFromISR+0x42>
20001d64:	2300      	movs	r3, #0
20001d66:	2b00      	cmp	r3, #0
20001d68:	d10a      	bne.n	20001d80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
20001d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d6e:	f383 8811 	msr	BASEPRI, r3
20001d72:	f3bf 8f6f 	isb	sy
20001d76:	f3bf 8f4f 	dsb	sy
20001d7a:	627b      	str	r3, [r7, #36]	; 0x24
}
20001d7c:	bf00      	nop
20001d7e:	e7fe      	b.n	20001d7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001d80:	683b      	ldr	r3, [r7, #0]
20001d82:	2b02      	cmp	r3, #2
20001d84:	d103      	bne.n	20001d8e <xQueueGenericSendFromISR+0x6a>
20001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001d8a:	2b01      	cmp	r3, #1
20001d8c:	d101      	bne.n	20001d92 <xQueueGenericSendFromISR+0x6e>
20001d8e:	2301      	movs	r3, #1
20001d90:	e000      	b.n	20001d94 <xQueueGenericSendFromISR+0x70>
20001d92:	2300      	movs	r3, #0
20001d94:	2b00      	cmp	r3, #0
20001d96:	d10a      	bne.n	20001dae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
20001d98:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d9c:	f383 8811 	msr	BASEPRI, r3
20001da0:	f3bf 8f6f 	isb	sy
20001da4:	f3bf 8f4f 	dsb	sy
20001da8:	623b      	str	r3, [r7, #32]
}
20001daa:	bf00      	nop
20001dac:	e7fe      	b.n	20001dac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001dae:	f001 ff73 	bl	20003c98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
20001db2:	f3ef 8211 	mrs	r2, BASEPRI
20001db6:	f04f 0350 	mov.w	r3, #80	; 0x50
20001dba:	f383 8811 	msr	BASEPRI, r3
20001dbe:	f3bf 8f6f 	isb	sy
20001dc2:	f3bf 8f4f 	dsb	sy
20001dc6:	61fa      	str	r2, [r7, #28]
20001dc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
20001dca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001dcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001dd6:	429a      	cmp	r2, r3
20001dd8:	d302      	bcc.n	20001de0 <xQueueGenericSendFromISR+0xbc>
20001dda:	683b      	ldr	r3, [r7, #0]
20001ddc:	2b02      	cmp	r3, #2
20001dde:	d12f      	bne.n	20001e40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
20001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001de2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
20001dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001df0:	683a      	ldr	r2, [r7, #0]
20001df2:	68b9      	ldr	r1, [r7, #8]
20001df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001df6:	f000 f934 	bl	20002062 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001dfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
20001dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e02:	d112      	bne.n	20001e2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001e08:	2b00      	cmp	r3, #0
20001e0a:	d016      	beq.n	20001e3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001e0e:	3324      	adds	r3, #36	; 0x24
20001e10:	4618      	mov	r0, r3
20001e12:	f000 ff45 	bl	20002ca0 <xTaskRemoveFromEventList>
20001e16:	4603      	mov	r3, r0
20001e18:	2b00      	cmp	r3, #0
20001e1a:	d00e      	beq.n	20001e3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001e1c:	687b      	ldr	r3, [r7, #4]
20001e1e:	2b00      	cmp	r3, #0
20001e20:	d00b      	beq.n	20001e3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001e22:	687b      	ldr	r3, [r7, #4]
20001e24:	2201      	movs	r2, #1
20001e26:	601a      	str	r2, [r3, #0]
20001e28:	e007      	b.n	20001e3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001e2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
20001e2e:	3301      	adds	r3, #1
20001e30:	b2db      	uxtb	r3, r3
20001e32:	b25a      	sxtb	r2, r3
20001e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
20001e3a:	2301      	movs	r3, #1
20001e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
20001e3e:	e001      	b.n	20001e44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001e40:	2300      	movs	r3, #0
20001e42:	63fb      	str	r3, [r7, #60]	; 0x3c
20001e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001e46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001e48:	697b      	ldr	r3, [r7, #20]
20001e4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
20001e4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
20001e52:	4618      	mov	r0, r3
20001e54:	3740      	adds	r7, #64	; 0x40
20001e56:	46bd      	mov	sp, r7
20001e58:	bd80      	pop	{r7, pc}
	...

20001e5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
20001e5c:	b580      	push	{r7, lr}
20001e5e:	b08c      	sub	sp, #48	; 0x30
20001e60:	af00      	add	r7, sp, #0
20001e62:	60f8      	str	r0, [r7, #12]
20001e64:	60b9      	str	r1, [r7, #8]
20001e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
20001e68:	2300      	movs	r3, #0
20001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001e6c:	68fb      	ldr	r3, [r7, #12]
20001e6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
20001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001e72:	2b00      	cmp	r3, #0
20001e74:	d10a      	bne.n	20001e8c <xQueueReceive+0x30>
	__asm volatile
20001e76:	f04f 0350 	mov.w	r3, #80	; 0x50
20001e7a:	f383 8811 	msr	BASEPRI, r3
20001e7e:	f3bf 8f6f 	isb	sy
20001e82:	f3bf 8f4f 	dsb	sy
20001e86:	623b      	str	r3, [r7, #32]
}
20001e88:	bf00      	nop
20001e8a:	e7fe      	b.n	20001e8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001e8c:	68bb      	ldr	r3, [r7, #8]
20001e8e:	2b00      	cmp	r3, #0
20001e90:	d103      	bne.n	20001e9a <xQueueReceive+0x3e>
20001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e96:	2b00      	cmp	r3, #0
20001e98:	d101      	bne.n	20001e9e <xQueueReceive+0x42>
20001e9a:	2301      	movs	r3, #1
20001e9c:	e000      	b.n	20001ea0 <xQueueReceive+0x44>
20001e9e:	2300      	movs	r3, #0
20001ea0:	2b00      	cmp	r3, #0
20001ea2:	d10a      	bne.n	20001eba <xQueueReceive+0x5e>
	__asm volatile
20001ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ea8:	f383 8811 	msr	BASEPRI, r3
20001eac:	f3bf 8f6f 	isb	sy
20001eb0:	f3bf 8f4f 	dsb	sy
20001eb4:	61fb      	str	r3, [r7, #28]
}
20001eb6:	bf00      	nop
20001eb8:	e7fe      	b.n	20001eb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001eba:	f001 f8b3 	bl	20003024 <xTaskGetSchedulerState>
20001ebe:	4603      	mov	r3, r0
20001ec0:	2b00      	cmp	r3, #0
20001ec2:	d102      	bne.n	20001eca <xQueueReceive+0x6e>
20001ec4:	687b      	ldr	r3, [r7, #4]
20001ec6:	2b00      	cmp	r3, #0
20001ec8:	d101      	bne.n	20001ece <xQueueReceive+0x72>
20001eca:	2301      	movs	r3, #1
20001ecc:	e000      	b.n	20001ed0 <xQueueReceive+0x74>
20001ece:	2300      	movs	r3, #0
20001ed0:	2b00      	cmp	r3, #0
20001ed2:	d10a      	bne.n	20001eea <xQueueReceive+0x8e>
	__asm volatile
20001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ed8:	f383 8811 	msr	BASEPRI, r3
20001edc:	f3bf 8f6f 	isb	sy
20001ee0:	f3bf 8f4f 	dsb	sy
20001ee4:	61bb      	str	r3, [r7, #24]
}
20001ee6:	bf00      	nop
20001ee8:	e7fe      	b.n	20001ee8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001eea:	f001 fdf3 	bl	20003ad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001ef2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001ef6:	2b00      	cmp	r3, #0
20001ef8:	d01f      	beq.n	20001f3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
20001efa:	68b9      	ldr	r1, [r7, #8]
20001efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001efe:	f000 f91a 	bl	20002136 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
20001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001f04:	1e5a      	subs	r2, r3, #1
20001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f0c:	691b      	ldr	r3, [r3, #16]
20001f0e:	2b00      	cmp	r3, #0
20001f10:	d00f      	beq.n	20001f32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f14:	3310      	adds	r3, #16
20001f16:	4618      	mov	r0, r3
20001f18:	f000 fec2 	bl	20002ca0 <xTaskRemoveFromEventList>
20001f1c:	4603      	mov	r3, r0
20001f1e:	2b00      	cmp	r3, #0
20001f20:	d007      	beq.n	20001f32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
20001f22:	4b3d      	ldr	r3, [pc, #244]	; (20002018 <xQueueReceive+0x1bc>)
20001f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001f28:	601a      	str	r2, [r3, #0]
20001f2a:	f3bf 8f4f 	dsb	sy
20001f2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
20001f32:	f001 fdff 	bl	20003b34 <vPortExitCritical>
				return pdPASS;
20001f36:	2301      	movs	r3, #1
20001f38:	e069      	b.n	2000200e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001f3a:	687b      	ldr	r3, [r7, #4]
20001f3c:	2b00      	cmp	r3, #0
20001f3e:	d103      	bne.n	20001f48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001f40:	f001 fdf8 	bl	20003b34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001f44:	2300      	movs	r3, #0
20001f46:	e062      	b.n	2000200e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
20001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001f4a:	2b00      	cmp	r3, #0
20001f4c:	d106      	bne.n	20001f5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001f4e:	f107 0310 	add.w	r3, r7, #16
20001f52:	4618      	mov	r0, r3
20001f54:	f000 ff08 	bl	20002d68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001f58:	2301      	movs	r3, #1
20001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001f5c:	f001 fdea 	bl	20003b34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001f60:	f000 fc74 	bl	2000284c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001f64:	f001 fdb6 	bl	20003ad4 <vPortEnterCritical>
20001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001f6e:	b25b      	sxtb	r3, r3
20001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f74:	d103      	bne.n	20001f7e <xQueueReceive+0x122>
20001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f78:	2200      	movs	r2, #0
20001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001f84:	b25b      	sxtb	r3, r3
20001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
20001f8a:	d103      	bne.n	20001f94 <xQueueReceive+0x138>
20001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001f8e:	2200      	movs	r2, #0
20001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001f94:	f001 fdce 	bl	20003b34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001f98:	1d3a      	adds	r2, r7, #4
20001f9a:	f107 0310 	add.w	r3, r7, #16
20001f9e:	4611      	mov	r1, r2
20001fa0:	4618      	mov	r0, r3
20001fa2:	f000 fef7 	bl	20002d94 <xTaskCheckForTimeOut>
20001fa6:	4603      	mov	r3, r0
20001fa8:	2b00      	cmp	r3, #0
20001faa:	d123      	bne.n	20001ff4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001fae:	f000 f93a 	bl	20002226 <prvIsQueueEmpty>
20001fb2:	4603      	mov	r3, r0
20001fb4:	2b00      	cmp	r3, #0
20001fb6:	d017      	beq.n	20001fe8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001fba:	3324      	adds	r3, #36	; 0x24
20001fbc:	687a      	ldr	r2, [r7, #4]
20001fbe:	4611      	mov	r1, r2
20001fc0:	4618      	mov	r0, r3
20001fc2:	f000 fe1d 	bl	20002c00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001fc8:	f000 f8db 	bl	20002182 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001fcc:	f000 fc4c 	bl	20002868 <xTaskResumeAll>
20001fd0:	4603      	mov	r3, r0
20001fd2:	2b00      	cmp	r3, #0
20001fd4:	d189      	bne.n	20001eea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
20001fd6:	4b10      	ldr	r3, [pc, #64]	; (20002018 <xQueueReceive+0x1bc>)
20001fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001fdc:	601a      	str	r2, [r3, #0]
20001fde:	f3bf 8f4f 	dsb	sy
20001fe2:	f3bf 8f6f 	isb	sy
20001fe6:	e780      	b.n	20001eea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
20001fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001fea:	f000 f8ca 	bl	20002182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001fee:	f000 fc3b 	bl	20002868 <xTaskResumeAll>
20001ff2:	e77a      	b.n	20001eea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
20001ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001ff6:	f000 f8c4 	bl	20002182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001ffa:	f000 fc35 	bl	20002868 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002000:	f000 f911 	bl	20002226 <prvIsQueueEmpty>
20002004:	4603      	mov	r3, r0
20002006:	2b00      	cmp	r3, #0
20002008:	f43f af6f 	beq.w	20001eea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
2000200c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
2000200e:	4618      	mov	r0, r3
20002010:	3730      	adds	r7, #48	; 0x30
20002012:	46bd      	mov	sp, r7
20002014:	bd80      	pop	{r7, pc}
20002016:	bf00      	nop
20002018:	e000ed04 	.word	0xe000ed04

2000201c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
2000201c:	b580      	push	{r7, lr}
2000201e:	b084      	sub	sp, #16
20002020:	af00      	add	r7, sp, #0
20002022:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
20002024:	687b      	ldr	r3, [r7, #4]
20002026:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
20002028:	68fb      	ldr	r3, [r7, #12]
2000202a:	2b00      	cmp	r3, #0
2000202c:	d10a      	bne.n	20002044 <vQueueDelete+0x28>
	__asm volatile
2000202e:	f04f 0350 	mov.w	r3, #80	; 0x50
20002032:	f383 8811 	msr	BASEPRI, r3
20002036:	f3bf 8f6f 	isb	sy
2000203a:	f3bf 8f4f 	dsb	sy
2000203e:	60bb      	str	r3, [r7, #8]
}
20002040:	bf00      	nop
20002042:	e7fe      	b.n	20002042 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
20002044:	68f8      	ldr	r0, [r7, #12]
20002046:	f000 f947 	bl	200022d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2000204a:	68fb      	ldr	r3, [r7, #12]
2000204c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
20002050:	2b00      	cmp	r3, #0
20002052:	d102      	bne.n	2000205a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
20002054:	68f8      	ldr	r0, [r7, #12]
20002056:	f001 ff2b 	bl	20003eb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
2000205a:	bf00      	nop
2000205c:	3710      	adds	r7, #16
2000205e:	46bd      	mov	sp, r7
20002060:	bd80      	pop	{r7, pc}

20002062 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20002062:	b580      	push	{r7, lr}
20002064:	b086      	sub	sp, #24
20002066:	af00      	add	r7, sp, #0
20002068:	60f8      	str	r0, [r7, #12]
2000206a:	60b9      	str	r1, [r7, #8]
2000206c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
2000206e:	2300      	movs	r3, #0
20002070:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20002072:	68fb      	ldr	r3, [r7, #12]
20002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002076:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20002078:	68fb      	ldr	r3, [r7, #12]
2000207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000207c:	2b00      	cmp	r3, #0
2000207e:	d10d      	bne.n	2000209c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20002080:	68fb      	ldr	r3, [r7, #12]
20002082:	681b      	ldr	r3, [r3, #0]
20002084:	2b00      	cmp	r3, #0
20002086:	d14d      	bne.n	20002124 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
20002088:	68fb      	ldr	r3, [r7, #12]
2000208a:	689b      	ldr	r3, [r3, #8]
2000208c:	4618      	mov	r0, r3
2000208e:	f000 ffe7 	bl	20003060 <xTaskPriorityDisinherit>
20002092:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
20002094:	68fb      	ldr	r3, [r7, #12]
20002096:	2200      	movs	r2, #0
20002098:	609a      	str	r2, [r3, #8]
2000209a:	e043      	b.n	20002124 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
2000209c:	687b      	ldr	r3, [r7, #4]
2000209e:	2b00      	cmp	r3, #0
200020a0:	d119      	bne.n	200020d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
200020a2:	68fb      	ldr	r3, [r7, #12]
200020a4:	6858      	ldr	r0, [r3, #4]
200020a6:	68fb      	ldr	r3, [r7, #12]
200020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200020aa:	461a      	mov	r2, r3
200020ac:	68b9      	ldr	r1, [r7, #8]
200020ae:	f004 fbcd 	bl	2000684c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
200020b2:	68fb      	ldr	r3, [r7, #12]
200020b4:	685a      	ldr	r2, [r3, #4]
200020b6:	68fb      	ldr	r3, [r7, #12]
200020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200020ba:	441a      	add	r2, r3
200020bc:	68fb      	ldr	r3, [r7, #12]
200020be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200020c0:	68fb      	ldr	r3, [r7, #12]
200020c2:	685a      	ldr	r2, [r3, #4]
200020c4:	68fb      	ldr	r3, [r7, #12]
200020c6:	689b      	ldr	r3, [r3, #8]
200020c8:	429a      	cmp	r2, r3
200020ca:	d32b      	bcc.n	20002124 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
200020cc:	68fb      	ldr	r3, [r7, #12]
200020ce:	681a      	ldr	r2, [r3, #0]
200020d0:	68fb      	ldr	r3, [r7, #12]
200020d2:	605a      	str	r2, [r3, #4]
200020d4:	e026      	b.n	20002124 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
200020d6:	68fb      	ldr	r3, [r7, #12]
200020d8:	68d8      	ldr	r0, [r3, #12]
200020da:	68fb      	ldr	r3, [r7, #12]
200020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200020de:	461a      	mov	r2, r3
200020e0:	68b9      	ldr	r1, [r7, #8]
200020e2:	f004 fbb3 	bl	2000684c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
200020e6:	68fb      	ldr	r3, [r7, #12]
200020e8:	68da      	ldr	r2, [r3, #12]
200020ea:	68fb      	ldr	r3, [r7, #12]
200020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200020ee:	425b      	negs	r3, r3
200020f0:	441a      	add	r2, r3
200020f2:	68fb      	ldr	r3, [r7, #12]
200020f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200020f6:	68fb      	ldr	r3, [r7, #12]
200020f8:	68da      	ldr	r2, [r3, #12]
200020fa:	68fb      	ldr	r3, [r7, #12]
200020fc:	681b      	ldr	r3, [r3, #0]
200020fe:	429a      	cmp	r2, r3
20002100:	d207      	bcs.n	20002112 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
20002102:	68fb      	ldr	r3, [r7, #12]
20002104:	689a      	ldr	r2, [r3, #8]
20002106:	68fb      	ldr	r3, [r7, #12]
20002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000210a:	425b      	negs	r3, r3
2000210c:	441a      	add	r2, r3
2000210e:	68fb      	ldr	r3, [r7, #12]
20002110:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20002112:	687b      	ldr	r3, [r7, #4]
20002114:	2b02      	cmp	r3, #2
20002116:	d105      	bne.n	20002124 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20002118:	693b      	ldr	r3, [r7, #16]
2000211a:	2b00      	cmp	r3, #0
2000211c:	d002      	beq.n	20002124 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
2000211e:	693b      	ldr	r3, [r7, #16]
20002120:	3b01      	subs	r3, #1
20002122:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20002124:	693b      	ldr	r3, [r7, #16]
20002126:	1c5a      	adds	r2, r3, #1
20002128:	68fb      	ldr	r3, [r7, #12]
2000212a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
2000212c:	697b      	ldr	r3, [r7, #20]
}
2000212e:	4618      	mov	r0, r3
20002130:	3718      	adds	r7, #24
20002132:	46bd      	mov	sp, r7
20002134:	bd80      	pop	{r7, pc}

20002136 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20002136:	b580      	push	{r7, lr}
20002138:	b082      	sub	sp, #8
2000213a:	af00      	add	r7, sp, #0
2000213c:	6078      	str	r0, [r7, #4]
2000213e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20002140:	687b      	ldr	r3, [r7, #4]
20002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002144:	2b00      	cmp	r3, #0
20002146:	d018      	beq.n	2000217a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20002148:	687b      	ldr	r3, [r7, #4]
2000214a:	68da      	ldr	r2, [r3, #12]
2000214c:	687b      	ldr	r3, [r7, #4]
2000214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002150:	441a      	add	r2, r3
20002152:	687b      	ldr	r3, [r7, #4]
20002154:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20002156:	687b      	ldr	r3, [r7, #4]
20002158:	68da      	ldr	r2, [r3, #12]
2000215a:	687b      	ldr	r3, [r7, #4]
2000215c:	689b      	ldr	r3, [r3, #8]
2000215e:	429a      	cmp	r2, r3
20002160:	d303      	bcc.n	2000216a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
20002162:	687b      	ldr	r3, [r7, #4]
20002164:	681a      	ldr	r2, [r3, #0]
20002166:	687b      	ldr	r3, [r7, #4]
20002168:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
2000216a:	687b      	ldr	r3, [r7, #4]
2000216c:	68d9      	ldr	r1, [r3, #12]
2000216e:	687b      	ldr	r3, [r7, #4]
20002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002172:	461a      	mov	r2, r3
20002174:	6838      	ldr	r0, [r7, #0]
20002176:	f004 fb69 	bl	2000684c <memcpy>
	}
}
2000217a:	bf00      	nop
2000217c:	3708      	adds	r7, #8
2000217e:	46bd      	mov	sp, r7
20002180:	bd80      	pop	{r7, pc}

20002182 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20002182:	b580      	push	{r7, lr}
20002184:	b084      	sub	sp, #16
20002186:	af00      	add	r7, sp, #0
20002188:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
2000218a:	f001 fca3 	bl	20003ad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
2000218e:	687b      	ldr	r3, [r7, #4]
20002190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20002194:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20002196:	e011      	b.n	200021bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20002198:	687b      	ldr	r3, [r7, #4]
2000219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000219c:	2b00      	cmp	r3, #0
2000219e:	d012      	beq.n	200021c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200021a0:	687b      	ldr	r3, [r7, #4]
200021a2:	3324      	adds	r3, #36	; 0x24
200021a4:	4618      	mov	r0, r3
200021a6:	f000 fd7b 	bl	20002ca0 <xTaskRemoveFromEventList>
200021aa:	4603      	mov	r3, r0
200021ac:	2b00      	cmp	r3, #0
200021ae:	d001      	beq.n	200021b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
200021b0:	f000 fe52 	bl	20002e58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
200021b4:	7bfb      	ldrb	r3, [r7, #15]
200021b6:	3b01      	subs	r3, #1
200021b8:	b2db      	uxtb	r3, r3
200021ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
200021bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
200021c0:	2b00      	cmp	r3, #0
200021c2:	dce9      	bgt.n	20002198 <prvUnlockQueue+0x16>
200021c4:	e000      	b.n	200021c8 <prvUnlockQueue+0x46>
					break;
200021c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
200021c8:	687b      	ldr	r3, [r7, #4]
200021ca:	22ff      	movs	r2, #255	; 0xff
200021cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
200021d0:	f001 fcb0 	bl	20003b34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
200021d4:	f001 fc7e 	bl	20003ad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
200021d8:	687b      	ldr	r3, [r7, #4]
200021da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200021de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
200021e0:	e011      	b.n	20002206 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
200021e2:	687b      	ldr	r3, [r7, #4]
200021e4:	691b      	ldr	r3, [r3, #16]
200021e6:	2b00      	cmp	r3, #0
200021e8:	d012      	beq.n	20002210 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
200021ea:	687b      	ldr	r3, [r7, #4]
200021ec:	3310      	adds	r3, #16
200021ee:	4618      	mov	r0, r3
200021f0:	f000 fd56 	bl	20002ca0 <xTaskRemoveFromEventList>
200021f4:	4603      	mov	r3, r0
200021f6:	2b00      	cmp	r3, #0
200021f8:	d001      	beq.n	200021fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
200021fa:	f000 fe2d 	bl	20002e58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
200021fe:	7bbb      	ldrb	r3, [r7, #14]
20002200:	3b01      	subs	r3, #1
20002202:	b2db      	uxtb	r3, r3
20002204:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
20002206:	f997 300e 	ldrsb.w	r3, [r7, #14]
2000220a:	2b00      	cmp	r3, #0
2000220c:	dce9      	bgt.n	200021e2 <prvUnlockQueue+0x60>
2000220e:	e000      	b.n	20002212 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
20002210:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20002212:	687b      	ldr	r3, [r7, #4]
20002214:	22ff      	movs	r2, #255	; 0xff
20002216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
2000221a:	f001 fc8b 	bl	20003b34 <vPortExitCritical>
}
2000221e:	bf00      	nop
20002220:	3710      	adds	r7, #16
20002222:	46bd      	mov	sp, r7
20002224:	bd80      	pop	{r7, pc}

20002226 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20002226:	b580      	push	{r7, lr}
20002228:	b084      	sub	sp, #16
2000222a:	af00      	add	r7, sp, #0
2000222c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
2000222e:	f001 fc51 	bl	20003ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20002232:	687b      	ldr	r3, [r7, #4]
20002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002236:	2b00      	cmp	r3, #0
20002238:	d102      	bne.n	20002240 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
2000223a:	2301      	movs	r3, #1
2000223c:	60fb      	str	r3, [r7, #12]
2000223e:	e001      	b.n	20002244 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
20002240:	2300      	movs	r3, #0
20002242:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20002244:	f001 fc76 	bl	20003b34 <vPortExitCritical>

	return xReturn;
20002248:	68fb      	ldr	r3, [r7, #12]
}
2000224a:	4618      	mov	r0, r3
2000224c:	3710      	adds	r7, #16
2000224e:	46bd      	mov	sp, r7
20002250:	bd80      	pop	{r7, pc}

20002252 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20002252:	b580      	push	{r7, lr}
20002254:	b084      	sub	sp, #16
20002256:	af00      	add	r7, sp, #0
20002258:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
2000225a:	f001 fc3b 	bl	20003ad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
2000225e:	687b      	ldr	r3, [r7, #4]
20002260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20002262:	687b      	ldr	r3, [r7, #4]
20002264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002266:	429a      	cmp	r2, r3
20002268:	d102      	bne.n	20002270 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
2000226a:	2301      	movs	r3, #1
2000226c:	60fb      	str	r3, [r7, #12]
2000226e:	e001      	b.n	20002274 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20002270:	2300      	movs	r3, #0
20002272:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20002274:	f001 fc5e 	bl	20003b34 <vPortExitCritical>

	return xReturn;
20002278:	68fb      	ldr	r3, [r7, #12]
}
2000227a:	4618      	mov	r0, r3
2000227c:	3710      	adds	r7, #16
2000227e:	46bd      	mov	sp, r7
20002280:	bd80      	pop	{r7, pc}
	...

20002284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20002284:	b480      	push	{r7}
20002286:	b085      	sub	sp, #20
20002288:	af00      	add	r7, sp, #0
2000228a:	6078      	str	r0, [r7, #4]
2000228c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2000228e:	2300      	movs	r3, #0
20002290:	60fb      	str	r3, [r7, #12]
20002292:	e014      	b.n	200022be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
20002294:	4a0f      	ldr	r2, [pc, #60]	; (200022d4 <vQueueAddToRegistry+0x50>)
20002296:	68fb      	ldr	r3, [r7, #12]
20002298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
2000229c:	2b00      	cmp	r3, #0
2000229e:	d10b      	bne.n	200022b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
200022a0:	490c      	ldr	r1, [pc, #48]	; (200022d4 <vQueueAddToRegistry+0x50>)
200022a2:	68fb      	ldr	r3, [r7, #12]
200022a4:	683a      	ldr	r2, [r7, #0]
200022a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
200022aa:	4a0a      	ldr	r2, [pc, #40]	; (200022d4 <vQueueAddToRegistry+0x50>)
200022ac:	68fb      	ldr	r3, [r7, #12]
200022ae:	00db      	lsls	r3, r3, #3
200022b0:	4413      	add	r3, r2
200022b2:	687a      	ldr	r2, [r7, #4]
200022b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
200022b6:	e006      	b.n	200022c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
200022b8:	68fb      	ldr	r3, [r7, #12]
200022ba:	3301      	adds	r3, #1
200022bc:	60fb      	str	r3, [r7, #12]
200022be:	68fb      	ldr	r3, [r7, #12]
200022c0:	2b07      	cmp	r3, #7
200022c2:	d9e7      	bls.n	20002294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
200022c4:	bf00      	nop
200022c6:	bf00      	nop
200022c8:	3714      	adds	r7, #20
200022ca:	46bd      	mov	sp, r7
200022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200022d0:	4770      	bx	lr
200022d2:	bf00      	nop
200022d4:	2000b100 	.word	0x2000b100

200022d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
200022d8:	b480      	push	{r7}
200022da:	b085      	sub	sp, #20
200022dc:	af00      	add	r7, sp, #0
200022de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
200022e0:	2300      	movs	r3, #0
200022e2:	60fb      	str	r3, [r7, #12]
200022e4:	e016      	b.n	20002314 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
200022e6:	4a10      	ldr	r2, [pc, #64]	; (20002328 <vQueueUnregisterQueue+0x50>)
200022e8:	68fb      	ldr	r3, [r7, #12]
200022ea:	00db      	lsls	r3, r3, #3
200022ec:	4413      	add	r3, r2
200022ee:	685b      	ldr	r3, [r3, #4]
200022f0:	687a      	ldr	r2, [r7, #4]
200022f2:	429a      	cmp	r2, r3
200022f4:	d10b      	bne.n	2000230e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
200022f6:	4a0c      	ldr	r2, [pc, #48]	; (20002328 <vQueueUnregisterQueue+0x50>)
200022f8:	68fb      	ldr	r3, [r7, #12]
200022fa:	2100      	movs	r1, #0
200022fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
20002300:	4a09      	ldr	r2, [pc, #36]	; (20002328 <vQueueUnregisterQueue+0x50>)
20002302:	68fb      	ldr	r3, [r7, #12]
20002304:	00db      	lsls	r3, r3, #3
20002306:	4413      	add	r3, r2
20002308:	2200      	movs	r2, #0
2000230a:	605a      	str	r2, [r3, #4]
				break;
2000230c:	e006      	b.n	2000231c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2000230e:	68fb      	ldr	r3, [r7, #12]
20002310:	3301      	adds	r3, #1
20002312:	60fb      	str	r3, [r7, #12]
20002314:	68fb      	ldr	r3, [r7, #12]
20002316:	2b07      	cmp	r3, #7
20002318:	d9e5      	bls.n	200022e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2000231a:	bf00      	nop
2000231c:	bf00      	nop
2000231e:	3714      	adds	r7, #20
20002320:	46bd      	mov	sp, r7
20002322:	f85d 7b04 	ldr.w	r7, [sp], #4
20002326:	4770      	bx	lr
20002328:	2000b100 	.word	0x2000b100

2000232c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
2000232c:	b580      	push	{r7, lr}
2000232e:	b086      	sub	sp, #24
20002330:	af00      	add	r7, sp, #0
20002332:	60f8      	str	r0, [r7, #12]
20002334:	60b9      	str	r1, [r7, #8]
20002336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
20002338:	68fb      	ldr	r3, [r7, #12]
2000233a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
2000233c:	f001 fbca 	bl	20003ad4 <vPortEnterCritical>
20002340:	697b      	ldr	r3, [r7, #20]
20002342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20002346:	b25b      	sxtb	r3, r3
20002348:	f1b3 3fff 	cmp.w	r3, #4294967295
2000234c:	d103      	bne.n	20002356 <vQueueWaitForMessageRestricted+0x2a>
2000234e:	697b      	ldr	r3, [r7, #20]
20002350:	2200      	movs	r2, #0
20002352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20002356:	697b      	ldr	r3, [r7, #20]
20002358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
2000235c:	b25b      	sxtb	r3, r3
2000235e:	f1b3 3fff 	cmp.w	r3, #4294967295
20002362:	d103      	bne.n	2000236c <vQueueWaitForMessageRestricted+0x40>
20002364:	697b      	ldr	r3, [r7, #20]
20002366:	2200      	movs	r2, #0
20002368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
2000236c:	f001 fbe2 	bl	20003b34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20002370:	697b      	ldr	r3, [r7, #20]
20002372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002374:	2b00      	cmp	r3, #0
20002376:	d106      	bne.n	20002386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20002378:	697b      	ldr	r3, [r7, #20]
2000237a:	3324      	adds	r3, #36	; 0x24
2000237c:	687a      	ldr	r2, [r7, #4]
2000237e:	68b9      	ldr	r1, [r7, #8]
20002380:	4618      	mov	r0, r3
20002382:	f000 fc61 	bl	20002c48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20002386:	6978      	ldr	r0, [r7, #20]
20002388:	f7ff fefb 	bl	20002182 <prvUnlockQueue>
	}
2000238c:	bf00      	nop
2000238e:	3718      	adds	r7, #24
20002390:	46bd      	mov	sp, r7
20002392:	bd80      	pop	{r7, pc}

20002394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
20002394:	b580      	push	{r7, lr}
20002396:	b08e      	sub	sp, #56	; 0x38
20002398:	af04      	add	r7, sp, #16
2000239a:	60f8      	str	r0, [r7, #12]
2000239c:	60b9      	str	r1, [r7, #8]
2000239e:	607a      	str	r2, [r7, #4]
200023a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
200023a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
200023a4:	2b00      	cmp	r3, #0
200023a6:	d10a      	bne.n	200023be <xTaskCreateStatic+0x2a>
	__asm volatile
200023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
200023ac:	f383 8811 	msr	BASEPRI, r3
200023b0:	f3bf 8f6f 	isb	sy
200023b4:	f3bf 8f4f 	dsb	sy
200023b8:	623b      	str	r3, [r7, #32]
}
200023ba:	bf00      	nop
200023bc:	e7fe      	b.n	200023bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
200023be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200023c0:	2b00      	cmp	r3, #0
200023c2:	d10a      	bne.n	200023da <xTaskCreateStatic+0x46>
	__asm volatile
200023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
200023c8:	f383 8811 	msr	BASEPRI, r3
200023cc:	f3bf 8f6f 	isb	sy
200023d0:	f3bf 8f4f 	dsb	sy
200023d4:	61fb      	str	r3, [r7, #28]
}
200023d6:	bf00      	nop
200023d8:	e7fe      	b.n	200023d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
200023da:	23bc      	movs	r3, #188	; 0xbc
200023dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
200023de:	693b      	ldr	r3, [r7, #16]
200023e0:	2bbc      	cmp	r3, #188	; 0xbc
200023e2:	d00a      	beq.n	200023fa <xTaskCreateStatic+0x66>
	__asm volatile
200023e4:	f04f 0350 	mov.w	r3, #80	; 0x50
200023e8:	f383 8811 	msr	BASEPRI, r3
200023ec:	f3bf 8f6f 	isb	sy
200023f0:	f3bf 8f4f 	dsb	sy
200023f4:	61bb      	str	r3, [r7, #24]
}
200023f6:	bf00      	nop
200023f8:	e7fe      	b.n	200023f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
200023fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
200023fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200023fe:	2b00      	cmp	r3, #0
20002400:	d01e      	beq.n	20002440 <xTaskCreateStatic+0xac>
20002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002404:	2b00      	cmp	r3, #0
20002406:	d01b      	beq.n	20002440 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20002408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000240a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
2000240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000240e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20002410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
20002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002414:	2202      	movs	r2, #2
20002416:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
2000241a:	2300      	movs	r3, #0
2000241c:	9303      	str	r3, [sp, #12]
2000241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002420:	9302      	str	r3, [sp, #8]
20002422:	f107 0314 	add.w	r3, r7, #20
20002426:	9301      	str	r3, [sp, #4]
20002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000242a:	9300      	str	r3, [sp, #0]
2000242c:	683b      	ldr	r3, [r7, #0]
2000242e:	687a      	ldr	r2, [r7, #4]
20002430:	68b9      	ldr	r1, [r7, #8]
20002432:	68f8      	ldr	r0, [r7, #12]
20002434:	f000 f850 	bl	200024d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20002438:	6a78      	ldr	r0, [r7, #36]	; 0x24
2000243a:	f000 f8f3 	bl	20002624 <prvAddNewTaskToReadyList>
2000243e:	e001      	b.n	20002444 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
20002440:	2300      	movs	r3, #0
20002442:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
20002444:	697b      	ldr	r3, [r7, #20]
	}
20002446:	4618      	mov	r0, r3
20002448:	3728      	adds	r7, #40	; 0x28
2000244a:	46bd      	mov	sp, r7
2000244c:	bd80      	pop	{r7, pc}

2000244e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
2000244e:	b580      	push	{r7, lr}
20002450:	b08c      	sub	sp, #48	; 0x30
20002452:	af04      	add	r7, sp, #16
20002454:	60f8      	str	r0, [r7, #12]
20002456:	60b9      	str	r1, [r7, #8]
20002458:	603b      	str	r3, [r7, #0]
2000245a:	4613      	mov	r3, r2
2000245c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
2000245e:	88fb      	ldrh	r3, [r7, #6]
20002460:	009b      	lsls	r3, r3, #2
20002462:	4618      	mov	r0, r3
20002464:	f001 fc58 	bl	20003d18 <pvPortMalloc>
20002468:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
2000246a:	697b      	ldr	r3, [r7, #20]
2000246c:	2b00      	cmp	r3, #0
2000246e:	d00e      	beq.n	2000248e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
20002470:	20bc      	movs	r0, #188	; 0xbc
20002472:	f001 fc51 	bl	20003d18 <pvPortMalloc>
20002476:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
20002478:	69fb      	ldr	r3, [r7, #28]
2000247a:	2b00      	cmp	r3, #0
2000247c:	d003      	beq.n	20002486 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
2000247e:	69fb      	ldr	r3, [r7, #28]
20002480:	697a      	ldr	r2, [r7, #20]
20002482:	631a      	str	r2, [r3, #48]	; 0x30
20002484:	e005      	b.n	20002492 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20002486:	6978      	ldr	r0, [r7, #20]
20002488:	f001 fd12 	bl	20003eb0 <vPortFree>
2000248c:	e001      	b.n	20002492 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
2000248e:	2300      	movs	r3, #0
20002490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20002492:	69fb      	ldr	r3, [r7, #28]
20002494:	2b00      	cmp	r3, #0
20002496:	d017      	beq.n	200024c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
20002498:	69fb      	ldr	r3, [r7, #28]
2000249a:	2200      	movs	r2, #0
2000249c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
200024a0:	88fa      	ldrh	r2, [r7, #6]
200024a2:	2300      	movs	r3, #0
200024a4:	9303      	str	r3, [sp, #12]
200024a6:	69fb      	ldr	r3, [r7, #28]
200024a8:	9302      	str	r3, [sp, #8]
200024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200024ac:	9301      	str	r3, [sp, #4]
200024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
200024b0:	9300      	str	r3, [sp, #0]
200024b2:	683b      	ldr	r3, [r7, #0]
200024b4:	68b9      	ldr	r1, [r7, #8]
200024b6:	68f8      	ldr	r0, [r7, #12]
200024b8:	f000 f80e 	bl	200024d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
200024bc:	69f8      	ldr	r0, [r7, #28]
200024be:	f000 f8b1 	bl	20002624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
200024c2:	2301      	movs	r3, #1
200024c4:	61bb      	str	r3, [r7, #24]
200024c6:	e002      	b.n	200024ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
200024c8:	f04f 33ff 	mov.w	r3, #4294967295
200024cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
200024ce:	69bb      	ldr	r3, [r7, #24]
	}
200024d0:	4618      	mov	r0, r3
200024d2:	3720      	adds	r7, #32
200024d4:	46bd      	mov	sp, r7
200024d6:	bd80      	pop	{r7, pc}

200024d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
200024d8:	b580      	push	{r7, lr}
200024da:	b088      	sub	sp, #32
200024dc:	af00      	add	r7, sp, #0
200024de:	60f8      	str	r0, [r7, #12]
200024e0:	60b9      	str	r1, [r7, #8]
200024e2:	607a      	str	r2, [r7, #4]
200024e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
200024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200024e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
200024ea:	687b      	ldr	r3, [r7, #4]
200024ec:	009b      	lsls	r3, r3, #2
200024ee:	461a      	mov	r2, r3
200024f0:	21a5      	movs	r1, #165	; 0xa5
200024f2:	f004 f9b9 	bl	20006868 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
200024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200024f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200024fa:	687b      	ldr	r3, [r7, #4]
200024fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
20002500:	3b01      	subs	r3, #1
20002502:	009b      	lsls	r3, r3, #2
20002504:	4413      	add	r3, r2
20002506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
20002508:	69bb      	ldr	r3, [r7, #24]
2000250a:	f023 0307 	bic.w	r3, r3, #7
2000250e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20002510:	69bb      	ldr	r3, [r7, #24]
20002512:	f003 0307 	and.w	r3, r3, #7
20002516:	2b00      	cmp	r3, #0
20002518:	d00a      	beq.n	20002530 <prvInitialiseNewTask+0x58>
	__asm volatile
2000251a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000251e:	f383 8811 	msr	BASEPRI, r3
20002522:	f3bf 8f6f 	isb	sy
20002526:	f3bf 8f4f 	dsb	sy
2000252a:	617b      	str	r3, [r7, #20]
}
2000252c:	bf00      	nop
2000252e:	e7fe      	b.n	2000252e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
20002530:	68bb      	ldr	r3, [r7, #8]
20002532:	2b00      	cmp	r3, #0
20002534:	d01f      	beq.n	20002576 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20002536:	2300      	movs	r3, #0
20002538:	61fb      	str	r3, [r7, #28]
2000253a:	e012      	b.n	20002562 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
2000253c:	68ba      	ldr	r2, [r7, #8]
2000253e:	69fb      	ldr	r3, [r7, #28]
20002540:	4413      	add	r3, r2
20002542:	7819      	ldrb	r1, [r3, #0]
20002544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002546:	69fb      	ldr	r3, [r7, #28]
20002548:	4413      	add	r3, r2
2000254a:	3334      	adds	r3, #52	; 0x34
2000254c:	460a      	mov	r2, r1
2000254e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
20002550:	68ba      	ldr	r2, [r7, #8]
20002552:	69fb      	ldr	r3, [r7, #28]
20002554:	4413      	add	r3, r2
20002556:	781b      	ldrb	r3, [r3, #0]
20002558:	2b00      	cmp	r3, #0
2000255a:	d006      	beq.n	2000256a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2000255c:	69fb      	ldr	r3, [r7, #28]
2000255e:	3301      	adds	r3, #1
20002560:	61fb      	str	r3, [r7, #28]
20002562:	69fb      	ldr	r3, [r7, #28]
20002564:	2b0f      	cmp	r3, #15
20002566:	d9e9      	bls.n	2000253c <prvInitialiseNewTask+0x64>
20002568:	e000      	b.n	2000256c <prvInitialiseNewTask+0x94>
			{
				break;
2000256a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
2000256c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000256e:	2200      	movs	r2, #0
20002570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20002574:	e003      	b.n	2000257e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
20002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002578:	2200      	movs	r2, #0
2000257a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2000257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002580:	2b37      	cmp	r3, #55	; 0x37
20002582:	d901      	bls.n	20002588 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002584:	2337      	movs	r3, #55	; 0x37
20002586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000258a:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000258c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
2000258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002590:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002592:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
20002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002596:	2200      	movs	r2, #0
20002598:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
2000259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000259c:	3304      	adds	r3, #4
2000259e:	4618      	mov	r0, r3
200025a0:	f7ff f886 	bl	200016b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
200025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025a6:	3318      	adds	r3, #24
200025a8:	4618      	mov	r0, r3
200025aa:	f7ff f881 	bl	200016b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
200025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200025b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
200025b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
200025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
200025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200025c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
200025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025c6:	2200      	movs	r2, #0
200025c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
200025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025ce:	2200      	movs	r2, #0
200025d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
200025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025d6:	3354      	adds	r3, #84	; 0x54
200025d8:	2260      	movs	r2, #96	; 0x60
200025da:	2100      	movs	r1, #0
200025dc:	4618      	mov	r0, r3
200025de:	f004 f943 	bl	20006868 <memset>
200025e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025e4:	4a0c      	ldr	r2, [pc, #48]	; (20002618 <prvInitialiseNewTask+0x140>)
200025e6:	659a      	str	r2, [r3, #88]	; 0x58
200025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025ea:	4a0c      	ldr	r2, [pc, #48]	; (2000261c <prvInitialiseNewTask+0x144>)
200025ec:	65da      	str	r2, [r3, #92]	; 0x5c
200025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200025f0:	4a0b      	ldr	r2, [pc, #44]	; (20002620 <prvInitialiseNewTask+0x148>)
200025f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
200025f4:	683a      	ldr	r2, [r7, #0]
200025f6:	68f9      	ldr	r1, [r7, #12]
200025f8:	69b8      	ldr	r0, [r7, #24]
200025fa:	f001 f941 	bl	20003880 <pxPortInitialiseStack>
200025fe:	4602      	mov	r2, r0
20002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002602:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
20002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002606:	2b00      	cmp	r3, #0
20002608:	d002      	beq.n	20002610 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
2000260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000260c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000260e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20002610:	bf00      	nop
20002612:	3720      	adds	r7, #32
20002614:	46bd      	mov	sp, r7
20002616:	bd80      	pop	{r7, pc}
20002618:	2000a874 	.word	0x2000a874
2000261c:	2000a894 	.word	0x2000a894
20002620:	2000a854 	.word	0x2000a854

20002624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20002624:	b580      	push	{r7, lr}
20002626:	b082      	sub	sp, #8
20002628:	af00      	add	r7, sp, #0
2000262a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
2000262c:	f001 fa52 	bl	20003ad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20002630:	4b2d      	ldr	r3, [pc, #180]	; (200026e8 <prvAddNewTaskToReadyList+0xc4>)
20002632:	681b      	ldr	r3, [r3, #0]
20002634:	3301      	adds	r3, #1
20002636:	4a2c      	ldr	r2, [pc, #176]	; (200026e8 <prvAddNewTaskToReadyList+0xc4>)
20002638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
2000263a:	4b2c      	ldr	r3, [pc, #176]	; (200026ec <prvAddNewTaskToReadyList+0xc8>)
2000263c:	681b      	ldr	r3, [r3, #0]
2000263e:	2b00      	cmp	r3, #0
20002640:	d109      	bne.n	20002656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20002642:	4a2a      	ldr	r2, [pc, #168]	; (200026ec <prvAddNewTaskToReadyList+0xc8>)
20002644:	687b      	ldr	r3, [r7, #4]
20002646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20002648:	4b27      	ldr	r3, [pc, #156]	; (200026e8 <prvAddNewTaskToReadyList+0xc4>)
2000264a:	681b      	ldr	r3, [r3, #0]
2000264c:	2b01      	cmp	r3, #1
2000264e:	d110      	bne.n	20002672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20002650:	f000 fc26 	bl	20002ea0 <prvInitialiseTaskLists>
20002654:	e00d      	b.n	20002672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20002656:	4b26      	ldr	r3, [pc, #152]	; (200026f0 <prvAddNewTaskToReadyList+0xcc>)
20002658:	681b      	ldr	r3, [r3, #0]
2000265a:	2b00      	cmp	r3, #0
2000265c:	d109      	bne.n	20002672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
2000265e:	4b23      	ldr	r3, [pc, #140]	; (200026ec <prvAddNewTaskToReadyList+0xc8>)
20002660:	681b      	ldr	r3, [r3, #0]
20002662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002664:	687b      	ldr	r3, [r7, #4]
20002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002668:	429a      	cmp	r2, r3
2000266a:	d802      	bhi.n	20002672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
2000266c:	4a1f      	ldr	r2, [pc, #124]	; (200026ec <prvAddNewTaskToReadyList+0xc8>)
2000266e:	687b      	ldr	r3, [r7, #4]
20002670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20002672:	4b20      	ldr	r3, [pc, #128]	; (200026f4 <prvAddNewTaskToReadyList+0xd0>)
20002674:	681b      	ldr	r3, [r3, #0]
20002676:	3301      	adds	r3, #1
20002678:	4a1e      	ldr	r2, [pc, #120]	; (200026f4 <prvAddNewTaskToReadyList+0xd0>)
2000267a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
2000267c:	4b1d      	ldr	r3, [pc, #116]	; (200026f4 <prvAddNewTaskToReadyList+0xd0>)
2000267e:	681a      	ldr	r2, [r3, #0]
20002680:	687b      	ldr	r3, [r7, #4]
20002682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20002684:	687b      	ldr	r3, [r7, #4]
20002686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002688:	4b1b      	ldr	r3, [pc, #108]	; (200026f8 <prvAddNewTaskToReadyList+0xd4>)
2000268a:	681b      	ldr	r3, [r3, #0]
2000268c:	429a      	cmp	r2, r3
2000268e:	d903      	bls.n	20002698 <prvAddNewTaskToReadyList+0x74>
20002690:	687b      	ldr	r3, [r7, #4]
20002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002694:	4a18      	ldr	r2, [pc, #96]	; (200026f8 <prvAddNewTaskToReadyList+0xd4>)
20002696:	6013      	str	r3, [r2, #0]
20002698:	687b      	ldr	r3, [r7, #4]
2000269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000269c:	4613      	mov	r3, r2
2000269e:	009b      	lsls	r3, r3, #2
200026a0:	4413      	add	r3, r2
200026a2:	009b      	lsls	r3, r3, #2
200026a4:	4a15      	ldr	r2, [pc, #84]	; (200026fc <prvAddNewTaskToReadyList+0xd8>)
200026a6:	441a      	add	r2, r3
200026a8:	687b      	ldr	r3, [r7, #4]
200026aa:	3304      	adds	r3, #4
200026ac:	4619      	mov	r1, r3
200026ae:	4610      	mov	r0, r2
200026b0:	f7ff f80b 	bl	200016ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
200026b4:	f001 fa3e 	bl	20003b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
200026b8:	4b0d      	ldr	r3, [pc, #52]	; (200026f0 <prvAddNewTaskToReadyList+0xcc>)
200026ba:	681b      	ldr	r3, [r3, #0]
200026bc:	2b00      	cmp	r3, #0
200026be:	d00e      	beq.n	200026de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
200026c0:	4b0a      	ldr	r3, [pc, #40]	; (200026ec <prvAddNewTaskToReadyList+0xc8>)
200026c2:	681b      	ldr	r3, [r3, #0]
200026c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200026c6:	687b      	ldr	r3, [r7, #4]
200026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200026ca:	429a      	cmp	r2, r3
200026cc:	d207      	bcs.n	200026de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
200026ce:	4b0c      	ldr	r3, [pc, #48]	; (20002700 <prvAddNewTaskToReadyList+0xdc>)
200026d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200026d4:	601a      	str	r2, [r3, #0]
200026d6:	f3bf 8f4f 	dsb	sy
200026da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
200026de:	bf00      	nop
200026e0:	3708      	adds	r7, #8
200026e2:	46bd      	mov	sp, r7
200026e4:	bd80      	pop	{r7, pc}
200026e6:	bf00      	nop
200026e8:	2000b614 	.word	0x2000b614
200026ec:	2000b140 	.word	0x2000b140
200026f0:	2000b620 	.word	0x2000b620
200026f4:	2000b630 	.word	0x2000b630
200026f8:	2000b61c 	.word	0x2000b61c
200026fc:	2000b144 	.word	0x2000b144
20002700:	e000ed04 	.word	0xe000ed04

20002704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20002704:	b580      	push	{r7, lr}
20002706:	b084      	sub	sp, #16
20002708:	af00      	add	r7, sp, #0
2000270a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
2000270c:	2300      	movs	r3, #0
2000270e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
20002710:	687b      	ldr	r3, [r7, #4]
20002712:	2b00      	cmp	r3, #0
20002714:	d017      	beq.n	20002746 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
20002716:	4b13      	ldr	r3, [pc, #76]	; (20002764 <vTaskDelay+0x60>)
20002718:	681b      	ldr	r3, [r3, #0]
2000271a:	2b00      	cmp	r3, #0
2000271c:	d00a      	beq.n	20002734 <vTaskDelay+0x30>
	__asm volatile
2000271e:	f04f 0350 	mov.w	r3, #80	; 0x50
20002722:	f383 8811 	msr	BASEPRI, r3
20002726:	f3bf 8f6f 	isb	sy
2000272a:	f3bf 8f4f 	dsb	sy
2000272e:	60bb      	str	r3, [r7, #8]
}
20002730:	bf00      	nop
20002732:	e7fe      	b.n	20002732 <vTaskDelay+0x2e>
			vTaskSuspendAll();
20002734:	f000 f88a 	bl	2000284c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
20002738:	2100      	movs	r1, #0
2000273a:	6878      	ldr	r0, [r7, #4]
2000273c:	f000 fcfe 	bl	2000313c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
20002740:	f000 f892 	bl	20002868 <xTaskResumeAll>
20002744:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
20002746:	68fb      	ldr	r3, [r7, #12]
20002748:	2b00      	cmp	r3, #0
2000274a:	d107      	bne.n	2000275c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
2000274c:	4b06      	ldr	r3, [pc, #24]	; (20002768 <vTaskDelay+0x64>)
2000274e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002752:	601a      	str	r2, [r3, #0]
20002754:	f3bf 8f4f 	dsb	sy
20002758:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
2000275c:	bf00      	nop
2000275e:	3710      	adds	r7, #16
20002760:	46bd      	mov	sp, r7
20002762:	bd80      	pop	{r7, pc}
20002764:	2000b63c 	.word	0x2000b63c
20002768:	e000ed04 	.word	0xe000ed04

2000276c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
2000276c:	b580      	push	{r7, lr}
2000276e:	b08a      	sub	sp, #40	; 0x28
20002770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
20002772:	2300      	movs	r3, #0
20002774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
20002776:	2300      	movs	r3, #0
20002778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
2000277a:	463a      	mov	r2, r7
2000277c:	1d39      	adds	r1, r7, #4
2000277e:	f107 0308 	add.w	r3, r7, #8
20002782:	4618      	mov	r0, r3
20002784:	f7fe ff40 	bl	20001608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
20002788:	6839      	ldr	r1, [r7, #0]
2000278a:	687b      	ldr	r3, [r7, #4]
2000278c:	68ba      	ldr	r2, [r7, #8]
2000278e:	9202      	str	r2, [sp, #8]
20002790:	9301      	str	r3, [sp, #4]
20002792:	2300      	movs	r3, #0
20002794:	9300      	str	r3, [sp, #0]
20002796:	2300      	movs	r3, #0
20002798:	460a      	mov	r2, r1
2000279a:	4924      	ldr	r1, [pc, #144]	; (2000282c <vTaskStartScheduler+0xc0>)
2000279c:	4824      	ldr	r0, [pc, #144]	; (20002830 <vTaskStartScheduler+0xc4>)
2000279e:	f7ff fdf9 	bl	20002394 <xTaskCreateStatic>
200027a2:	4603      	mov	r3, r0
200027a4:	4a23      	ldr	r2, [pc, #140]	; (20002834 <vTaskStartScheduler+0xc8>)
200027a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
200027a8:	4b22      	ldr	r3, [pc, #136]	; (20002834 <vTaskStartScheduler+0xc8>)
200027aa:	681b      	ldr	r3, [r3, #0]
200027ac:	2b00      	cmp	r3, #0
200027ae:	d002      	beq.n	200027b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
200027b0:	2301      	movs	r3, #1
200027b2:	617b      	str	r3, [r7, #20]
200027b4:	e001      	b.n	200027ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
200027b6:	2300      	movs	r3, #0
200027b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
200027ba:	697b      	ldr	r3, [r7, #20]
200027bc:	2b01      	cmp	r3, #1
200027be:	d102      	bne.n	200027c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
200027c0:	f000 fd10 	bl	200031e4 <xTimerCreateTimerTask>
200027c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
200027c6:	697b      	ldr	r3, [r7, #20]
200027c8:	2b01      	cmp	r3, #1
200027ca:	d11b      	bne.n	20002804 <vTaskStartScheduler+0x98>
	__asm volatile
200027cc:	f04f 0350 	mov.w	r3, #80	; 0x50
200027d0:	f383 8811 	msr	BASEPRI, r3
200027d4:	f3bf 8f6f 	isb	sy
200027d8:	f3bf 8f4f 	dsb	sy
200027dc:	613b      	str	r3, [r7, #16]
}
200027de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
200027e0:	4b15      	ldr	r3, [pc, #84]	; (20002838 <vTaskStartScheduler+0xcc>)
200027e2:	681b      	ldr	r3, [r3, #0]
200027e4:	3354      	adds	r3, #84	; 0x54
200027e6:	4a15      	ldr	r2, [pc, #84]	; (2000283c <vTaskStartScheduler+0xd0>)
200027e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
200027ea:	4b15      	ldr	r3, [pc, #84]	; (20002840 <vTaskStartScheduler+0xd4>)
200027ec:	f04f 32ff 	mov.w	r2, #4294967295
200027f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
200027f2:	4b14      	ldr	r3, [pc, #80]	; (20002844 <vTaskStartScheduler+0xd8>)
200027f4:	2201      	movs	r2, #1
200027f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
200027f8:	4b13      	ldr	r3, [pc, #76]	; (20002848 <vTaskStartScheduler+0xdc>)
200027fa:	2200      	movs	r2, #0
200027fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
200027fe:	f001 f8c7 	bl	20003990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20002802:	e00e      	b.n	20002822 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002804:	697b      	ldr	r3, [r7, #20]
20002806:	f1b3 3fff 	cmp.w	r3, #4294967295
2000280a:	d10a      	bne.n	20002822 <vTaskStartScheduler+0xb6>
	__asm volatile
2000280c:	f04f 0350 	mov.w	r3, #80	; 0x50
20002810:	f383 8811 	msr	BASEPRI, r3
20002814:	f3bf 8f6f 	isb	sy
20002818:	f3bf 8f4f 	dsb	sy
2000281c:	60fb      	str	r3, [r7, #12]
}
2000281e:	bf00      	nop
20002820:	e7fe      	b.n	20002820 <vTaskStartScheduler+0xb4>
}
20002822:	bf00      	nop
20002824:	3718      	adds	r7, #24
20002826:	46bd      	mov	sp, r7
20002828:	bd80      	pop	{r7, pc}
2000282a:	bf00      	nop
2000282c:	20006a14 	.word	0x20006a14
20002830:	20002e71 	.word	0x20002e71
20002834:	2000b638 	.word	0x2000b638
20002838:	2000b140 	.word	0x2000b140
2000283c:	2000a900 	.word	0x2000a900
20002840:	2000b634 	.word	0x2000b634
20002844:	2000b620 	.word	0x2000b620
20002848:	2000b618 	.word	0x2000b618

2000284c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
2000284c:	b480      	push	{r7}
2000284e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
20002850:	4b04      	ldr	r3, [pc, #16]	; (20002864 <vTaskSuspendAll+0x18>)
20002852:	681b      	ldr	r3, [r3, #0]
20002854:	3301      	adds	r3, #1
20002856:	4a03      	ldr	r2, [pc, #12]	; (20002864 <vTaskSuspendAll+0x18>)
20002858:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
2000285a:	bf00      	nop
2000285c:	46bd      	mov	sp, r7
2000285e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002862:	4770      	bx	lr
20002864:	2000b63c 	.word	0x2000b63c

20002868 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20002868:	b580      	push	{r7, lr}
2000286a:	b084      	sub	sp, #16
2000286c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
2000286e:	2300      	movs	r3, #0
20002870:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
20002872:	2300      	movs	r3, #0
20002874:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
20002876:	4b42      	ldr	r3, [pc, #264]	; (20002980 <xTaskResumeAll+0x118>)
20002878:	681b      	ldr	r3, [r3, #0]
2000287a:	2b00      	cmp	r3, #0
2000287c:	d10a      	bne.n	20002894 <xTaskResumeAll+0x2c>
	__asm volatile
2000287e:	f04f 0350 	mov.w	r3, #80	; 0x50
20002882:	f383 8811 	msr	BASEPRI, r3
20002886:	f3bf 8f6f 	isb	sy
2000288a:	f3bf 8f4f 	dsb	sy
2000288e:	603b      	str	r3, [r7, #0]
}
20002890:	bf00      	nop
20002892:	e7fe      	b.n	20002892 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002894:	f001 f91e 	bl	20003ad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20002898:	4b39      	ldr	r3, [pc, #228]	; (20002980 <xTaskResumeAll+0x118>)
2000289a:	681b      	ldr	r3, [r3, #0]
2000289c:	3b01      	subs	r3, #1
2000289e:	4a38      	ldr	r2, [pc, #224]	; (20002980 <xTaskResumeAll+0x118>)
200028a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200028a2:	4b37      	ldr	r3, [pc, #220]	; (20002980 <xTaskResumeAll+0x118>)
200028a4:	681b      	ldr	r3, [r3, #0]
200028a6:	2b00      	cmp	r3, #0
200028a8:	d162      	bne.n	20002970 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
200028aa:	4b36      	ldr	r3, [pc, #216]	; (20002984 <xTaskResumeAll+0x11c>)
200028ac:	681b      	ldr	r3, [r3, #0]
200028ae:	2b00      	cmp	r3, #0
200028b0:	d05e      	beq.n	20002970 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200028b2:	e02f      	b.n	20002914 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200028b4:	4b34      	ldr	r3, [pc, #208]	; (20002988 <xTaskResumeAll+0x120>)
200028b6:	68db      	ldr	r3, [r3, #12]
200028b8:	68db      	ldr	r3, [r3, #12]
200028ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
200028bc:	68fb      	ldr	r3, [r7, #12]
200028be:	3318      	adds	r3, #24
200028c0:	4618      	mov	r0, r3
200028c2:	f7fe ff5f 	bl	20001784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200028c6:	68fb      	ldr	r3, [r7, #12]
200028c8:	3304      	adds	r3, #4
200028ca:	4618      	mov	r0, r3
200028cc:	f7fe ff5a 	bl	20001784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
200028d0:	68fb      	ldr	r3, [r7, #12]
200028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200028d4:	4b2d      	ldr	r3, [pc, #180]	; (2000298c <xTaskResumeAll+0x124>)
200028d6:	681b      	ldr	r3, [r3, #0]
200028d8:	429a      	cmp	r2, r3
200028da:	d903      	bls.n	200028e4 <xTaskResumeAll+0x7c>
200028dc:	68fb      	ldr	r3, [r7, #12]
200028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200028e0:	4a2a      	ldr	r2, [pc, #168]	; (2000298c <xTaskResumeAll+0x124>)
200028e2:	6013      	str	r3, [r2, #0]
200028e4:	68fb      	ldr	r3, [r7, #12]
200028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200028e8:	4613      	mov	r3, r2
200028ea:	009b      	lsls	r3, r3, #2
200028ec:	4413      	add	r3, r2
200028ee:	009b      	lsls	r3, r3, #2
200028f0:	4a27      	ldr	r2, [pc, #156]	; (20002990 <xTaskResumeAll+0x128>)
200028f2:	441a      	add	r2, r3
200028f4:	68fb      	ldr	r3, [r7, #12]
200028f6:	3304      	adds	r3, #4
200028f8:	4619      	mov	r1, r3
200028fa:	4610      	mov	r0, r2
200028fc:	f7fe fee5 	bl	200016ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002900:	68fb      	ldr	r3, [r7, #12]
20002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002904:	4b23      	ldr	r3, [pc, #140]	; (20002994 <xTaskResumeAll+0x12c>)
20002906:	681b      	ldr	r3, [r3, #0]
20002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000290a:	429a      	cmp	r2, r3
2000290c:	d302      	bcc.n	20002914 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
2000290e:	4b22      	ldr	r3, [pc, #136]	; (20002998 <xTaskResumeAll+0x130>)
20002910:	2201      	movs	r2, #1
20002912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002914:	4b1c      	ldr	r3, [pc, #112]	; (20002988 <xTaskResumeAll+0x120>)
20002916:	681b      	ldr	r3, [r3, #0]
20002918:	2b00      	cmp	r3, #0
2000291a:	d1cb      	bne.n	200028b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
2000291c:	68fb      	ldr	r3, [r7, #12]
2000291e:	2b00      	cmp	r3, #0
20002920:	d001      	beq.n	20002926 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002922:	f000 fb5f 	bl	20002fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
20002926:	4b1d      	ldr	r3, [pc, #116]	; (2000299c <xTaskResumeAll+0x134>)
20002928:	681b      	ldr	r3, [r3, #0]
2000292a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
2000292c:	687b      	ldr	r3, [r7, #4]
2000292e:	2b00      	cmp	r3, #0
20002930:	d010      	beq.n	20002954 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
20002932:	f000 f847 	bl	200029c4 <xTaskIncrementTick>
20002936:	4603      	mov	r3, r0
20002938:	2b00      	cmp	r3, #0
2000293a:	d002      	beq.n	20002942 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
2000293c:	4b16      	ldr	r3, [pc, #88]	; (20002998 <xTaskResumeAll+0x130>)
2000293e:	2201      	movs	r2, #1
20002940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
20002942:	687b      	ldr	r3, [r7, #4]
20002944:	3b01      	subs	r3, #1
20002946:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
20002948:	687b      	ldr	r3, [r7, #4]
2000294a:	2b00      	cmp	r3, #0
2000294c:	d1f1      	bne.n	20002932 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
2000294e:	4b13      	ldr	r3, [pc, #76]	; (2000299c <xTaskResumeAll+0x134>)
20002950:	2200      	movs	r2, #0
20002952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
20002954:	4b10      	ldr	r3, [pc, #64]	; (20002998 <xTaskResumeAll+0x130>)
20002956:	681b      	ldr	r3, [r3, #0]
20002958:	2b00      	cmp	r3, #0
2000295a:	d009      	beq.n	20002970 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
2000295c:	2301      	movs	r3, #1
2000295e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
20002960:	4b0f      	ldr	r3, [pc, #60]	; (200029a0 <xTaskResumeAll+0x138>)
20002962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002966:	601a      	str	r2, [r3, #0]
20002968:	f3bf 8f4f 	dsb	sy
2000296c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002970:	f001 f8e0 	bl	20003b34 <vPortExitCritical>

	return xAlreadyYielded;
20002974:	68bb      	ldr	r3, [r7, #8]
}
20002976:	4618      	mov	r0, r3
20002978:	3710      	adds	r7, #16
2000297a:	46bd      	mov	sp, r7
2000297c:	bd80      	pop	{r7, pc}
2000297e:	bf00      	nop
20002980:	2000b63c 	.word	0x2000b63c
20002984:	2000b614 	.word	0x2000b614
20002988:	2000b5d4 	.word	0x2000b5d4
2000298c:	2000b61c 	.word	0x2000b61c
20002990:	2000b144 	.word	0x2000b144
20002994:	2000b140 	.word	0x2000b140
20002998:	2000b628 	.word	0x2000b628
2000299c:	2000b624 	.word	0x2000b624
200029a0:	e000ed04 	.word	0xe000ed04

200029a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
200029a4:	b480      	push	{r7}
200029a6:	b083      	sub	sp, #12
200029a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
200029aa:	4b05      	ldr	r3, [pc, #20]	; (200029c0 <xTaskGetTickCount+0x1c>)
200029ac:	681b      	ldr	r3, [r3, #0]
200029ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
200029b0:	687b      	ldr	r3, [r7, #4]
}
200029b2:	4618      	mov	r0, r3
200029b4:	370c      	adds	r7, #12
200029b6:	46bd      	mov	sp, r7
200029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200029bc:	4770      	bx	lr
200029be:	bf00      	nop
200029c0:	2000b618 	.word	0x2000b618

200029c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
200029c4:	b580      	push	{r7, lr}
200029c6:	b086      	sub	sp, #24
200029c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
200029ca:	2300      	movs	r3, #0
200029cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200029ce:	4b4f      	ldr	r3, [pc, #316]	; (20002b0c <xTaskIncrementTick+0x148>)
200029d0:	681b      	ldr	r3, [r3, #0]
200029d2:	2b00      	cmp	r3, #0
200029d4:	f040 808f 	bne.w	20002af6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
200029d8:	4b4d      	ldr	r3, [pc, #308]	; (20002b10 <xTaskIncrementTick+0x14c>)
200029da:	681b      	ldr	r3, [r3, #0]
200029dc:	3301      	adds	r3, #1
200029de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
200029e0:	4a4b      	ldr	r2, [pc, #300]	; (20002b10 <xTaskIncrementTick+0x14c>)
200029e2:	693b      	ldr	r3, [r7, #16]
200029e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
200029e6:	693b      	ldr	r3, [r7, #16]
200029e8:	2b00      	cmp	r3, #0
200029ea:	d120      	bne.n	20002a2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
200029ec:	4b49      	ldr	r3, [pc, #292]	; (20002b14 <xTaskIncrementTick+0x150>)
200029ee:	681b      	ldr	r3, [r3, #0]
200029f0:	681b      	ldr	r3, [r3, #0]
200029f2:	2b00      	cmp	r3, #0
200029f4:	d00a      	beq.n	20002a0c <xTaskIncrementTick+0x48>
	__asm volatile
200029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
200029fa:	f383 8811 	msr	BASEPRI, r3
200029fe:	f3bf 8f6f 	isb	sy
20002a02:	f3bf 8f4f 	dsb	sy
20002a06:	603b      	str	r3, [r7, #0]
}
20002a08:	bf00      	nop
20002a0a:	e7fe      	b.n	20002a0a <xTaskIncrementTick+0x46>
20002a0c:	4b41      	ldr	r3, [pc, #260]	; (20002b14 <xTaskIncrementTick+0x150>)
20002a0e:	681b      	ldr	r3, [r3, #0]
20002a10:	60fb      	str	r3, [r7, #12]
20002a12:	4b41      	ldr	r3, [pc, #260]	; (20002b18 <xTaskIncrementTick+0x154>)
20002a14:	681b      	ldr	r3, [r3, #0]
20002a16:	4a3f      	ldr	r2, [pc, #252]	; (20002b14 <xTaskIncrementTick+0x150>)
20002a18:	6013      	str	r3, [r2, #0]
20002a1a:	4a3f      	ldr	r2, [pc, #252]	; (20002b18 <xTaskIncrementTick+0x154>)
20002a1c:	68fb      	ldr	r3, [r7, #12]
20002a1e:	6013      	str	r3, [r2, #0]
20002a20:	4b3e      	ldr	r3, [pc, #248]	; (20002b1c <xTaskIncrementTick+0x158>)
20002a22:	681b      	ldr	r3, [r3, #0]
20002a24:	3301      	adds	r3, #1
20002a26:	4a3d      	ldr	r2, [pc, #244]	; (20002b1c <xTaskIncrementTick+0x158>)
20002a28:	6013      	str	r3, [r2, #0]
20002a2a:	f000 fadb 	bl	20002fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
20002a2e:	4b3c      	ldr	r3, [pc, #240]	; (20002b20 <xTaskIncrementTick+0x15c>)
20002a30:	681b      	ldr	r3, [r3, #0]
20002a32:	693a      	ldr	r2, [r7, #16]
20002a34:	429a      	cmp	r2, r3
20002a36:	d349      	bcc.n	20002acc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002a38:	4b36      	ldr	r3, [pc, #216]	; (20002b14 <xTaskIncrementTick+0x150>)
20002a3a:	681b      	ldr	r3, [r3, #0]
20002a3c:	681b      	ldr	r3, [r3, #0]
20002a3e:	2b00      	cmp	r3, #0
20002a40:	d104      	bne.n	20002a4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002a42:	4b37      	ldr	r3, [pc, #220]	; (20002b20 <xTaskIncrementTick+0x15c>)
20002a44:	f04f 32ff 	mov.w	r2, #4294967295
20002a48:	601a      	str	r2, [r3, #0]
					break;
20002a4a:	e03f      	b.n	20002acc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002a4c:	4b31      	ldr	r3, [pc, #196]	; (20002b14 <xTaskIncrementTick+0x150>)
20002a4e:	681b      	ldr	r3, [r3, #0]
20002a50:	68db      	ldr	r3, [r3, #12]
20002a52:	68db      	ldr	r3, [r3, #12]
20002a54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20002a56:	68bb      	ldr	r3, [r7, #8]
20002a58:	685b      	ldr	r3, [r3, #4]
20002a5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
20002a5c:	693a      	ldr	r2, [r7, #16]
20002a5e:	687b      	ldr	r3, [r7, #4]
20002a60:	429a      	cmp	r2, r3
20002a62:	d203      	bcs.n	20002a6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
20002a64:	4a2e      	ldr	r2, [pc, #184]	; (20002b20 <xTaskIncrementTick+0x15c>)
20002a66:	687b      	ldr	r3, [r7, #4]
20002a68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
20002a6a:	e02f      	b.n	20002acc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002a6c:	68bb      	ldr	r3, [r7, #8]
20002a6e:	3304      	adds	r3, #4
20002a70:	4618      	mov	r0, r3
20002a72:	f7fe fe87 	bl	20001784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002a76:	68bb      	ldr	r3, [r7, #8]
20002a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002a7a:	2b00      	cmp	r3, #0
20002a7c:	d004      	beq.n	20002a88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002a7e:	68bb      	ldr	r3, [r7, #8]
20002a80:	3318      	adds	r3, #24
20002a82:	4618      	mov	r0, r3
20002a84:	f7fe fe7e 	bl	20001784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002a88:	68bb      	ldr	r3, [r7, #8]
20002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a8c:	4b25      	ldr	r3, [pc, #148]	; (20002b24 <xTaskIncrementTick+0x160>)
20002a8e:	681b      	ldr	r3, [r3, #0]
20002a90:	429a      	cmp	r2, r3
20002a92:	d903      	bls.n	20002a9c <xTaskIncrementTick+0xd8>
20002a94:	68bb      	ldr	r3, [r7, #8]
20002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a98:	4a22      	ldr	r2, [pc, #136]	; (20002b24 <xTaskIncrementTick+0x160>)
20002a9a:	6013      	str	r3, [r2, #0]
20002a9c:	68bb      	ldr	r3, [r7, #8]
20002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002aa0:	4613      	mov	r3, r2
20002aa2:	009b      	lsls	r3, r3, #2
20002aa4:	4413      	add	r3, r2
20002aa6:	009b      	lsls	r3, r3, #2
20002aa8:	4a1f      	ldr	r2, [pc, #124]	; (20002b28 <xTaskIncrementTick+0x164>)
20002aaa:	441a      	add	r2, r3
20002aac:	68bb      	ldr	r3, [r7, #8]
20002aae:	3304      	adds	r3, #4
20002ab0:	4619      	mov	r1, r3
20002ab2:	4610      	mov	r0, r2
20002ab4:	f7fe fe09 	bl	200016ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002ab8:	68bb      	ldr	r3, [r7, #8]
20002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002abc:	4b1b      	ldr	r3, [pc, #108]	; (20002b2c <xTaskIncrementTick+0x168>)
20002abe:	681b      	ldr	r3, [r3, #0]
20002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002ac2:	429a      	cmp	r2, r3
20002ac4:	d3b8      	bcc.n	20002a38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
20002ac6:	2301      	movs	r3, #1
20002ac8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002aca:	e7b5      	b.n	20002a38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002acc:	4b17      	ldr	r3, [pc, #92]	; (20002b2c <xTaskIncrementTick+0x168>)
20002ace:	681b      	ldr	r3, [r3, #0]
20002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002ad2:	4915      	ldr	r1, [pc, #84]	; (20002b28 <xTaskIncrementTick+0x164>)
20002ad4:	4613      	mov	r3, r2
20002ad6:	009b      	lsls	r3, r3, #2
20002ad8:	4413      	add	r3, r2
20002ada:	009b      	lsls	r3, r3, #2
20002adc:	440b      	add	r3, r1
20002ade:	681b      	ldr	r3, [r3, #0]
20002ae0:	2b01      	cmp	r3, #1
20002ae2:	d901      	bls.n	20002ae8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
20002ae4:	2301      	movs	r3, #1
20002ae6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
20002ae8:	4b11      	ldr	r3, [pc, #68]	; (20002b30 <xTaskIncrementTick+0x16c>)
20002aea:	681b      	ldr	r3, [r3, #0]
20002aec:	2b00      	cmp	r3, #0
20002aee:	d007      	beq.n	20002b00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
20002af0:	2301      	movs	r3, #1
20002af2:	617b      	str	r3, [r7, #20]
20002af4:	e004      	b.n	20002b00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
20002af6:	4b0f      	ldr	r3, [pc, #60]	; (20002b34 <xTaskIncrementTick+0x170>)
20002af8:	681b      	ldr	r3, [r3, #0]
20002afa:	3301      	adds	r3, #1
20002afc:	4a0d      	ldr	r2, [pc, #52]	; (20002b34 <xTaskIncrementTick+0x170>)
20002afe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
20002b00:	697b      	ldr	r3, [r7, #20]
}
20002b02:	4618      	mov	r0, r3
20002b04:	3718      	adds	r7, #24
20002b06:	46bd      	mov	sp, r7
20002b08:	bd80      	pop	{r7, pc}
20002b0a:	bf00      	nop
20002b0c:	2000b63c 	.word	0x2000b63c
20002b10:	2000b618 	.word	0x2000b618
20002b14:	2000b5cc 	.word	0x2000b5cc
20002b18:	2000b5d0 	.word	0x2000b5d0
20002b1c:	2000b62c 	.word	0x2000b62c
20002b20:	2000b634 	.word	0x2000b634
20002b24:	2000b61c 	.word	0x2000b61c
20002b28:	2000b144 	.word	0x2000b144
20002b2c:	2000b140 	.word	0x2000b140
20002b30:	2000b628 	.word	0x2000b628
20002b34:	2000b624 	.word	0x2000b624

20002b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002b38:	b480      	push	{r7}
20002b3a:	b085      	sub	sp, #20
20002b3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
20002b3e:	4b2a      	ldr	r3, [pc, #168]	; (20002be8 <vTaskSwitchContext+0xb0>)
20002b40:	681b      	ldr	r3, [r3, #0]
20002b42:	2b00      	cmp	r3, #0
20002b44:	d003      	beq.n	20002b4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002b46:	4b29      	ldr	r3, [pc, #164]	; (20002bec <vTaskSwitchContext+0xb4>)
20002b48:	2201      	movs	r2, #1
20002b4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
20002b4c:	e046      	b.n	20002bdc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
20002b4e:	4b27      	ldr	r3, [pc, #156]	; (20002bec <vTaskSwitchContext+0xb4>)
20002b50:	2200      	movs	r2, #0
20002b52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002b54:	4b26      	ldr	r3, [pc, #152]	; (20002bf0 <vTaskSwitchContext+0xb8>)
20002b56:	681b      	ldr	r3, [r3, #0]
20002b58:	60fb      	str	r3, [r7, #12]
20002b5a:	e010      	b.n	20002b7e <vTaskSwitchContext+0x46>
20002b5c:	68fb      	ldr	r3, [r7, #12]
20002b5e:	2b00      	cmp	r3, #0
20002b60:	d10a      	bne.n	20002b78 <vTaskSwitchContext+0x40>
	__asm volatile
20002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
20002b66:	f383 8811 	msr	BASEPRI, r3
20002b6a:	f3bf 8f6f 	isb	sy
20002b6e:	f3bf 8f4f 	dsb	sy
20002b72:	607b      	str	r3, [r7, #4]
}
20002b74:	bf00      	nop
20002b76:	e7fe      	b.n	20002b76 <vTaskSwitchContext+0x3e>
20002b78:	68fb      	ldr	r3, [r7, #12]
20002b7a:	3b01      	subs	r3, #1
20002b7c:	60fb      	str	r3, [r7, #12]
20002b7e:	491d      	ldr	r1, [pc, #116]	; (20002bf4 <vTaskSwitchContext+0xbc>)
20002b80:	68fa      	ldr	r2, [r7, #12]
20002b82:	4613      	mov	r3, r2
20002b84:	009b      	lsls	r3, r3, #2
20002b86:	4413      	add	r3, r2
20002b88:	009b      	lsls	r3, r3, #2
20002b8a:	440b      	add	r3, r1
20002b8c:	681b      	ldr	r3, [r3, #0]
20002b8e:	2b00      	cmp	r3, #0
20002b90:	d0e4      	beq.n	20002b5c <vTaskSwitchContext+0x24>
20002b92:	68fa      	ldr	r2, [r7, #12]
20002b94:	4613      	mov	r3, r2
20002b96:	009b      	lsls	r3, r3, #2
20002b98:	4413      	add	r3, r2
20002b9a:	009b      	lsls	r3, r3, #2
20002b9c:	4a15      	ldr	r2, [pc, #84]	; (20002bf4 <vTaskSwitchContext+0xbc>)
20002b9e:	4413      	add	r3, r2
20002ba0:	60bb      	str	r3, [r7, #8]
20002ba2:	68bb      	ldr	r3, [r7, #8]
20002ba4:	685b      	ldr	r3, [r3, #4]
20002ba6:	685a      	ldr	r2, [r3, #4]
20002ba8:	68bb      	ldr	r3, [r7, #8]
20002baa:	605a      	str	r2, [r3, #4]
20002bac:	68bb      	ldr	r3, [r7, #8]
20002bae:	685a      	ldr	r2, [r3, #4]
20002bb0:	68bb      	ldr	r3, [r7, #8]
20002bb2:	3308      	adds	r3, #8
20002bb4:	429a      	cmp	r2, r3
20002bb6:	d104      	bne.n	20002bc2 <vTaskSwitchContext+0x8a>
20002bb8:	68bb      	ldr	r3, [r7, #8]
20002bba:	685b      	ldr	r3, [r3, #4]
20002bbc:	685a      	ldr	r2, [r3, #4]
20002bbe:	68bb      	ldr	r3, [r7, #8]
20002bc0:	605a      	str	r2, [r3, #4]
20002bc2:	68bb      	ldr	r3, [r7, #8]
20002bc4:	685b      	ldr	r3, [r3, #4]
20002bc6:	68db      	ldr	r3, [r3, #12]
20002bc8:	4a0b      	ldr	r2, [pc, #44]	; (20002bf8 <vTaskSwitchContext+0xc0>)
20002bca:	6013      	str	r3, [r2, #0]
20002bcc:	4a08      	ldr	r2, [pc, #32]	; (20002bf0 <vTaskSwitchContext+0xb8>)
20002bce:	68fb      	ldr	r3, [r7, #12]
20002bd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
20002bd2:	4b09      	ldr	r3, [pc, #36]	; (20002bf8 <vTaskSwitchContext+0xc0>)
20002bd4:	681b      	ldr	r3, [r3, #0]
20002bd6:	3354      	adds	r3, #84	; 0x54
20002bd8:	4a08      	ldr	r2, [pc, #32]	; (20002bfc <vTaskSwitchContext+0xc4>)
20002bda:	6013      	str	r3, [r2, #0]
}
20002bdc:	bf00      	nop
20002bde:	3714      	adds	r7, #20
20002be0:	46bd      	mov	sp, r7
20002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
20002be6:	4770      	bx	lr
20002be8:	2000b63c 	.word	0x2000b63c
20002bec:	2000b628 	.word	0x2000b628
20002bf0:	2000b61c 	.word	0x2000b61c
20002bf4:	2000b144 	.word	0x2000b144
20002bf8:	2000b140 	.word	0x2000b140
20002bfc:	2000a900 	.word	0x2000a900

20002c00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002c00:	b580      	push	{r7, lr}
20002c02:	b084      	sub	sp, #16
20002c04:	af00      	add	r7, sp, #0
20002c06:	6078      	str	r0, [r7, #4]
20002c08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002c0a:	687b      	ldr	r3, [r7, #4]
20002c0c:	2b00      	cmp	r3, #0
20002c0e:	d10a      	bne.n	20002c26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
20002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
20002c14:	f383 8811 	msr	BASEPRI, r3
20002c18:	f3bf 8f6f 	isb	sy
20002c1c:	f3bf 8f4f 	dsb	sy
20002c20:	60fb      	str	r3, [r7, #12]
}
20002c22:	bf00      	nop
20002c24:	e7fe      	b.n	20002c24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002c26:	4b07      	ldr	r3, [pc, #28]	; (20002c44 <vTaskPlaceOnEventList+0x44>)
20002c28:	681b      	ldr	r3, [r3, #0]
20002c2a:	3318      	adds	r3, #24
20002c2c:	4619      	mov	r1, r3
20002c2e:	6878      	ldr	r0, [r7, #4]
20002c30:	f7fe fd6f 	bl	20001712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002c34:	2101      	movs	r1, #1
20002c36:	6838      	ldr	r0, [r7, #0]
20002c38:	f000 fa80 	bl	2000313c <prvAddCurrentTaskToDelayedList>
}
20002c3c:	bf00      	nop
20002c3e:	3710      	adds	r7, #16
20002c40:	46bd      	mov	sp, r7
20002c42:	bd80      	pop	{r7, pc}
20002c44:	2000b140 	.word	0x2000b140

20002c48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002c48:	b580      	push	{r7, lr}
20002c4a:	b086      	sub	sp, #24
20002c4c:	af00      	add	r7, sp, #0
20002c4e:	60f8      	str	r0, [r7, #12]
20002c50:	60b9      	str	r1, [r7, #8]
20002c52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002c54:	68fb      	ldr	r3, [r7, #12]
20002c56:	2b00      	cmp	r3, #0
20002c58:	d10a      	bne.n	20002c70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
20002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
20002c5e:	f383 8811 	msr	BASEPRI, r3
20002c62:	f3bf 8f6f 	isb	sy
20002c66:	f3bf 8f4f 	dsb	sy
20002c6a:	617b      	str	r3, [r7, #20]
}
20002c6c:	bf00      	nop
20002c6e:	e7fe      	b.n	20002c6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002c70:	4b0a      	ldr	r3, [pc, #40]	; (20002c9c <vTaskPlaceOnEventListRestricted+0x54>)
20002c72:	681b      	ldr	r3, [r3, #0]
20002c74:	3318      	adds	r3, #24
20002c76:	4619      	mov	r1, r3
20002c78:	68f8      	ldr	r0, [r7, #12]
20002c7a:	f7fe fd26 	bl	200016ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002c7e:	687b      	ldr	r3, [r7, #4]
20002c80:	2b00      	cmp	r3, #0
20002c82:	d002      	beq.n	20002c8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
20002c84:	f04f 33ff 	mov.w	r3, #4294967295
20002c88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002c8a:	6879      	ldr	r1, [r7, #4]
20002c8c:	68b8      	ldr	r0, [r7, #8]
20002c8e:	f000 fa55 	bl	2000313c <prvAddCurrentTaskToDelayedList>
	}
20002c92:	bf00      	nop
20002c94:	3718      	adds	r7, #24
20002c96:	46bd      	mov	sp, r7
20002c98:	bd80      	pop	{r7, pc}
20002c9a:	bf00      	nop
20002c9c:	2000b140 	.word	0x2000b140

20002ca0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002ca0:	b580      	push	{r7, lr}
20002ca2:	b086      	sub	sp, #24
20002ca4:	af00      	add	r7, sp, #0
20002ca6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002ca8:	687b      	ldr	r3, [r7, #4]
20002caa:	68db      	ldr	r3, [r3, #12]
20002cac:	68db      	ldr	r3, [r3, #12]
20002cae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
20002cb0:	693b      	ldr	r3, [r7, #16]
20002cb2:	2b00      	cmp	r3, #0
20002cb4:	d10a      	bne.n	20002ccc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
20002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
20002cba:	f383 8811 	msr	BASEPRI, r3
20002cbe:	f3bf 8f6f 	isb	sy
20002cc2:	f3bf 8f4f 	dsb	sy
20002cc6:	60fb      	str	r3, [r7, #12]
}
20002cc8:	bf00      	nop
20002cca:	e7fe      	b.n	20002cca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002ccc:	693b      	ldr	r3, [r7, #16]
20002cce:	3318      	adds	r3, #24
20002cd0:	4618      	mov	r0, r3
20002cd2:	f7fe fd57 	bl	20001784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002cd6:	4b1e      	ldr	r3, [pc, #120]	; (20002d50 <xTaskRemoveFromEventList+0xb0>)
20002cd8:	681b      	ldr	r3, [r3, #0]
20002cda:	2b00      	cmp	r3, #0
20002cdc:	d11d      	bne.n	20002d1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002cde:	693b      	ldr	r3, [r7, #16]
20002ce0:	3304      	adds	r3, #4
20002ce2:	4618      	mov	r0, r3
20002ce4:	f7fe fd4e 	bl	20001784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002ce8:	693b      	ldr	r3, [r7, #16]
20002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002cec:	4b19      	ldr	r3, [pc, #100]	; (20002d54 <xTaskRemoveFromEventList+0xb4>)
20002cee:	681b      	ldr	r3, [r3, #0]
20002cf0:	429a      	cmp	r2, r3
20002cf2:	d903      	bls.n	20002cfc <xTaskRemoveFromEventList+0x5c>
20002cf4:	693b      	ldr	r3, [r7, #16]
20002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002cf8:	4a16      	ldr	r2, [pc, #88]	; (20002d54 <xTaskRemoveFromEventList+0xb4>)
20002cfa:	6013      	str	r3, [r2, #0]
20002cfc:	693b      	ldr	r3, [r7, #16]
20002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d00:	4613      	mov	r3, r2
20002d02:	009b      	lsls	r3, r3, #2
20002d04:	4413      	add	r3, r2
20002d06:	009b      	lsls	r3, r3, #2
20002d08:	4a13      	ldr	r2, [pc, #76]	; (20002d58 <xTaskRemoveFromEventList+0xb8>)
20002d0a:	441a      	add	r2, r3
20002d0c:	693b      	ldr	r3, [r7, #16]
20002d0e:	3304      	adds	r3, #4
20002d10:	4619      	mov	r1, r3
20002d12:	4610      	mov	r0, r2
20002d14:	f7fe fcd9 	bl	200016ca <vListInsertEnd>
20002d18:	e005      	b.n	20002d26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002d1a:	693b      	ldr	r3, [r7, #16]
20002d1c:	3318      	adds	r3, #24
20002d1e:	4619      	mov	r1, r3
20002d20:	480e      	ldr	r0, [pc, #56]	; (20002d5c <xTaskRemoveFromEventList+0xbc>)
20002d22:	f7fe fcd2 	bl	200016ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002d26:	693b      	ldr	r3, [r7, #16]
20002d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002d2a:	4b0d      	ldr	r3, [pc, #52]	; (20002d60 <xTaskRemoveFromEventList+0xc0>)
20002d2c:	681b      	ldr	r3, [r3, #0]
20002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002d30:	429a      	cmp	r2, r3
20002d32:	d905      	bls.n	20002d40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002d34:	2301      	movs	r3, #1
20002d36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002d38:	4b0a      	ldr	r3, [pc, #40]	; (20002d64 <xTaskRemoveFromEventList+0xc4>)
20002d3a:	2201      	movs	r2, #1
20002d3c:	601a      	str	r2, [r3, #0]
20002d3e:	e001      	b.n	20002d44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
20002d40:	2300      	movs	r3, #0
20002d42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
20002d44:	697b      	ldr	r3, [r7, #20]
}
20002d46:	4618      	mov	r0, r3
20002d48:	3718      	adds	r7, #24
20002d4a:	46bd      	mov	sp, r7
20002d4c:	bd80      	pop	{r7, pc}
20002d4e:	bf00      	nop
20002d50:	2000b63c 	.word	0x2000b63c
20002d54:	2000b61c 	.word	0x2000b61c
20002d58:	2000b144 	.word	0x2000b144
20002d5c:	2000b5d4 	.word	0x2000b5d4
20002d60:	2000b140 	.word	0x2000b140
20002d64:	2000b628 	.word	0x2000b628

20002d68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002d68:	b480      	push	{r7}
20002d6a:	b083      	sub	sp, #12
20002d6c:	af00      	add	r7, sp, #0
20002d6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002d70:	4b06      	ldr	r3, [pc, #24]	; (20002d8c <vTaskInternalSetTimeOutState+0x24>)
20002d72:	681a      	ldr	r2, [r3, #0]
20002d74:	687b      	ldr	r3, [r7, #4]
20002d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002d78:	4b05      	ldr	r3, [pc, #20]	; (20002d90 <vTaskInternalSetTimeOutState+0x28>)
20002d7a:	681a      	ldr	r2, [r3, #0]
20002d7c:	687b      	ldr	r3, [r7, #4]
20002d7e:	605a      	str	r2, [r3, #4]
}
20002d80:	bf00      	nop
20002d82:	370c      	adds	r7, #12
20002d84:	46bd      	mov	sp, r7
20002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
20002d8a:	4770      	bx	lr
20002d8c:	2000b62c 	.word	0x2000b62c
20002d90:	2000b618 	.word	0x2000b618

20002d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002d94:	b580      	push	{r7, lr}
20002d96:	b088      	sub	sp, #32
20002d98:	af00      	add	r7, sp, #0
20002d9a:	6078      	str	r0, [r7, #4]
20002d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002d9e:	687b      	ldr	r3, [r7, #4]
20002da0:	2b00      	cmp	r3, #0
20002da2:	d10a      	bne.n	20002dba <xTaskCheckForTimeOut+0x26>
	__asm volatile
20002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
20002da8:	f383 8811 	msr	BASEPRI, r3
20002dac:	f3bf 8f6f 	isb	sy
20002db0:	f3bf 8f4f 	dsb	sy
20002db4:	613b      	str	r3, [r7, #16]
}
20002db6:	bf00      	nop
20002db8:	e7fe      	b.n	20002db8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
20002dba:	683b      	ldr	r3, [r7, #0]
20002dbc:	2b00      	cmp	r3, #0
20002dbe:	d10a      	bne.n	20002dd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
20002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
20002dc4:	f383 8811 	msr	BASEPRI, r3
20002dc8:	f3bf 8f6f 	isb	sy
20002dcc:	f3bf 8f4f 	dsb	sy
20002dd0:	60fb      	str	r3, [r7, #12]
}
20002dd2:	bf00      	nop
20002dd4:	e7fe      	b.n	20002dd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
20002dd6:	f000 fe7d 	bl	20003ad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002dda:	4b1d      	ldr	r3, [pc, #116]	; (20002e50 <xTaskCheckForTimeOut+0xbc>)
20002ddc:	681b      	ldr	r3, [r3, #0]
20002dde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
20002de0:	687b      	ldr	r3, [r7, #4]
20002de2:	685b      	ldr	r3, [r3, #4]
20002de4:	69ba      	ldr	r2, [r7, #24]
20002de6:	1ad3      	subs	r3, r2, r3
20002de8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002dea:	683b      	ldr	r3, [r7, #0]
20002dec:	681b      	ldr	r3, [r3, #0]
20002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
20002df2:	d102      	bne.n	20002dfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002df4:	2300      	movs	r3, #0
20002df6:	61fb      	str	r3, [r7, #28]
20002df8:	e023      	b.n	20002e42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002dfa:	687b      	ldr	r3, [r7, #4]
20002dfc:	681a      	ldr	r2, [r3, #0]
20002dfe:	4b15      	ldr	r3, [pc, #84]	; (20002e54 <xTaskCheckForTimeOut+0xc0>)
20002e00:	681b      	ldr	r3, [r3, #0]
20002e02:	429a      	cmp	r2, r3
20002e04:	d007      	beq.n	20002e16 <xTaskCheckForTimeOut+0x82>
20002e06:	687b      	ldr	r3, [r7, #4]
20002e08:	685b      	ldr	r3, [r3, #4]
20002e0a:	69ba      	ldr	r2, [r7, #24]
20002e0c:	429a      	cmp	r2, r3
20002e0e:	d302      	bcc.n	20002e16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002e10:	2301      	movs	r3, #1
20002e12:	61fb      	str	r3, [r7, #28]
20002e14:	e015      	b.n	20002e42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002e16:	683b      	ldr	r3, [r7, #0]
20002e18:	681b      	ldr	r3, [r3, #0]
20002e1a:	697a      	ldr	r2, [r7, #20]
20002e1c:	429a      	cmp	r2, r3
20002e1e:	d20b      	bcs.n	20002e38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
20002e20:	683b      	ldr	r3, [r7, #0]
20002e22:	681a      	ldr	r2, [r3, #0]
20002e24:	697b      	ldr	r3, [r7, #20]
20002e26:	1ad2      	subs	r2, r2, r3
20002e28:	683b      	ldr	r3, [r7, #0]
20002e2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
20002e2c:	6878      	ldr	r0, [r7, #4]
20002e2e:	f7ff ff9b 	bl	20002d68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
20002e32:	2300      	movs	r3, #0
20002e34:	61fb      	str	r3, [r7, #28]
20002e36:	e004      	b.n	20002e42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
20002e38:	683b      	ldr	r3, [r7, #0]
20002e3a:	2200      	movs	r2, #0
20002e3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
20002e3e:	2301      	movs	r3, #1
20002e40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
20002e42:	f000 fe77 	bl	20003b34 <vPortExitCritical>

	return xReturn;
20002e46:	69fb      	ldr	r3, [r7, #28]
}
20002e48:	4618      	mov	r0, r3
20002e4a:	3720      	adds	r7, #32
20002e4c:	46bd      	mov	sp, r7
20002e4e:	bd80      	pop	{r7, pc}
20002e50:	2000b618 	.word	0x2000b618
20002e54:	2000b62c 	.word	0x2000b62c

20002e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002e58:	b480      	push	{r7}
20002e5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002e5c:	4b03      	ldr	r3, [pc, #12]	; (20002e6c <vTaskMissedYield+0x14>)
20002e5e:	2201      	movs	r2, #1
20002e60:	601a      	str	r2, [r3, #0]
}
20002e62:	bf00      	nop
20002e64:	46bd      	mov	sp, r7
20002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
20002e6a:	4770      	bx	lr
20002e6c:	2000b628 	.word	0x2000b628

20002e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002e70:	b580      	push	{r7, lr}
20002e72:	b082      	sub	sp, #8
20002e74:	af00      	add	r7, sp, #0
20002e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002e78:	f000 f852 	bl	20002f20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002e7c:	4b06      	ldr	r3, [pc, #24]	; (20002e98 <prvIdleTask+0x28>)
20002e7e:	681b      	ldr	r3, [r3, #0]
20002e80:	2b01      	cmp	r3, #1
20002e82:	d9f9      	bls.n	20002e78 <prvIdleTask+0x8>
			{
				taskYIELD();
20002e84:	4b05      	ldr	r3, [pc, #20]	; (20002e9c <prvIdleTask+0x2c>)
20002e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002e8a:	601a      	str	r2, [r3, #0]
20002e8c:	f3bf 8f4f 	dsb	sy
20002e90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
20002e94:	e7f0      	b.n	20002e78 <prvIdleTask+0x8>
20002e96:	bf00      	nop
20002e98:	2000b144 	.word	0x2000b144
20002e9c:	e000ed04 	.word	0xe000ed04

20002ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002ea0:	b580      	push	{r7, lr}
20002ea2:	b082      	sub	sp, #8
20002ea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002ea6:	2300      	movs	r3, #0
20002ea8:	607b      	str	r3, [r7, #4]
20002eaa:	e00c      	b.n	20002ec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002eac:	687a      	ldr	r2, [r7, #4]
20002eae:	4613      	mov	r3, r2
20002eb0:	009b      	lsls	r3, r3, #2
20002eb2:	4413      	add	r3, r2
20002eb4:	009b      	lsls	r3, r3, #2
20002eb6:	4a12      	ldr	r2, [pc, #72]	; (20002f00 <prvInitialiseTaskLists+0x60>)
20002eb8:	4413      	add	r3, r2
20002eba:	4618      	mov	r0, r3
20002ebc:	f7fe fbd8 	bl	20001670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002ec0:	687b      	ldr	r3, [r7, #4]
20002ec2:	3301      	adds	r3, #1
20002ec4:	607b      	str	r3, [r7, #4]
20002ec6:	687b      	ldr	r3, [r7, #4]
20002ec8:	2b37      	cmp	r3, #55	; 0x37
20002eca:	d9ef      	bls.n	20002eac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
20002ecc:	480d      	ldr	r0, [pc, #52]	; (20002f04 <prvInitialiseTaskLists+0x64>)
20002ece:	f7fe fbcf 	bl	20001670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002ed2:	480d      	ldr	r0, [pc, #52]	; (20002f08 <prvInitialiseTaskLists+0x68>)
20002ed4:	f7fe fbcc 	bl	20001670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002ed8:	480c      	ldr	r0, [pc, #48]	; (20002f0c <prvInitialiseTaskLists+0x6c>)
20002eda:	f7fe fbc9 	bl	20001670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002ede:	480c      	ldr	r0, [pc, #48]	; (20002f10 <prvInitialiseTaskLists+0x70>)
20002ee0:	f7fe fbc6 	bl	20001670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002ee4:	480b      	ldr	r0, [pc, #44]	; (20002f14 <prvInitialiseTaskLists+0x74>)
20002ee6:	f7fe fbc3 	bl	20001670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002eea:	4b0b      	ldr	r3, [pc, #44]	; (20002f18 <prvInitialiseTaskLists+0x78>)
20002eec:	4a05      	ldr	r2, [pc, #20]	; (20002f04 <prvInitialiseTaskLists+0x64>)
20002eee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002ef0:	4b0a      	ldr	r3, [pc, #40]	; (20002f1c <prvInitialiseTaskLists+0x7c>)
20002ef2:	4a05      	ldr	r2, [pc, #20]	; (20002f08 <prvInitialiseTaskLists+0x68>)
20002ef4:	601a      	str	r2, [r3, #0]
}
20002ef6:	bf00      	nop
20002ef8:	3708      	adds	r7, #8
20002efa:	46bd      	mov	sp, r7
20002efc:	bd80      	pop	{r7, pc}
20002efe:	bf00      	nop
20002f00:	2000b144 	.word	0x2000b144
20002f04:	2000b5a4 	.word	0x2000b5a4
20002f08:	2000b5b8 	.word	0x2000b5b8
20002f0c:	2000b5d4 	.word	0x2000b5d4
20002f10:	2000b5e8 	.word	0x2000b5e8
20002f14:	2000b600 	.word	0x2000b600
20002f18:	2000b5cc 	.word	0x2000b5cc
20002f1c:	2000b5d0 	.word	0x2000b5d0

20002f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002f20:	b580      	push	{r7, lr}
20002f22:	b082      	sub	sp, #8
20002f24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002f26:	e019      	b.n	20002f5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
20002f28:	f000 fdd4 	bl	20003ad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002f2c:	4b10      	ldr	r3, [pc, #64]	; (20002f70 <prvCheckTasksWaitingTermination+0x50>)
20002f2e:	68db      	ldr	r3, [r3, #12]
20002f30:	68db      	ldr	r3, [r3, #12]
20002f32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002f34:	687b      	ldr	r3, [r7, #4]
20002f36:	3304      	adds	r3, #4
20002f38:	4618      	mov	r0, r3
20002f3a:	f7fe fc23 	bl	20001784 <uxListRemove>
				--uxCurrentNumberOfTasks;
20002f3e:	4b0d      	ldr	r3, [pc, #52]	; (20002f74 <prvCheckTasksWaitingTermination+0x54>)
20002f40:	681b      	ldr	r3, [r3, #0]
20002f42:	3b01      	subs	r3, #1
20002f44:	4a0b      	ldr	r2, [pc, #44]	; (20002f74 <prvCheckTasksWaitingTermination+0x54>)
20002f46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
20002f48:	4b0b      	ldr	r3, [pc, #44]	; (20002f78 <prvCheckTasksWaitingTermination+0x58>)
20002f4a:	681b      	ldr	r3, [r3, #0]
20002f4c:	3b01      	subs	r3, #1
20002f4e:	4a0a      	ldr	r2, [pc, #40]	; (20002f78 <prvCheckTasksWaitingTermination+0x58>)
20002f50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
20002f52:	f000 fdef 	bl	20003b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
20002f56:	6878      	ldr	r0, [r7, #4]
20002f58:	f000 f810 	bl	20002f7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002f5c:	4b06      	ldr	r3, [pc, #24]	; (20002f78 <prvCheckTasksWaitingTermination+0x58>)
20002f5e:	681b      	ldr	r3, [r3, #0]
20002f60:	2b00      	cmp	r3, #0
20002f62:	d1e1      	bne.n	20002f28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002f64:	bf00      	nop
20002f66:	bf00      	nop
20002f68:	3708      	adds	r7, #8
20002f6a:	46bd      	mov	sp, r7
20002f6c:	bd80      	pop	{r7, pc}
20002f6e:	bf00      	nop
20002f70:	2000b5e8 	.word	0x2000b5e8
20002f74:	2000b614 	.word	0x2000b614
20002f78:	2000b5fc 	.word	0x2000b5fc

20002f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002f7c:	b580      	push	{r7, lr}
20002f7e:	b084      	sub	sp, #16
20002f80:	af00      	add	r7, sp, #0
20002f82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
20002f84:	687b      	ldr	r3, [r7, #4]
20002f86:	3354      	adds	r3, #84	; 0x54
20002f88:	4618      	mov	r0, r3
20002f8a:	f003 fc83 	bl	20006894 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
20002f8e:	687b      	ldr	r3, [r7, #4]
20002f90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002f94:	2b00      	cmp	r3, #0
20002f96:	d108      	bne.n	20002faa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
20002f98:	687b      	ldr	r3, [r7, #4]
20002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002f9c:	4618      	mov	r0, r3
20002f9e:	f000 ff87 	bl	20003eb0 <vPortFree>
				vPortFree( pxTCB );
20002fa2:	6878      	ldr	r0, [r7, #4]
20002fa4:	f000 ff84 	bl	20003eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002fa8:	e018      	b.n	20002fdc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
20002faa:	687b      	ldr	r3, [r7, #4]
20002fac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002fb0:	2b01      	cmp	r3, #1
20002fb2:	d103      	bne.n	20002fbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
20002fb4:	6878      	ldr	r0, [r7, #4]
20002fb6:	f000 ff7b 	bl	20003eb0 <vPortFree>
	}
20002fba:	e00f      	b.n	20002fdc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
20002fbc:	687b      	ldr	r3, [r7, #4]
20002fbe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002fc2:	2b02      	cmp	r3, #2
20002fc4:	d00a      	beq.n	20002fdc <prvDeleteTCB+0x60>
	__asm volatile
20002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
20002fca:	f383 8811 	msr	BASEPRI, r3
20002fce:	f3bf 8f6f 	isb	sy
20002fd2:	f3bf 8f4f 	dsb	sy
20002fd6:	60fb      	str	r3, [r7, #12]
}
20002fd8:	bf00      	nop
20002fda:	e7fe      	b.n	20002fda <prvDeleteTCB+0x5e>
	}
20002fdc:	bf00      	nop
20002fde:	3710      	adds	r7, #16
20002fe0:	46bd      	mov	sp, r7
20002fe2:	bd80      	pop	{r7, pc}

20002fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002fe4:	b480      	push	{r7}
20002fe6:	b083      	sub	sp, #12
20002fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002fea:	4b0c      	ldr	r3, [pc, #48]	; (2000301c <prvResetNextTaskUnblockTime+0x38>)
20002fec:	681b      	ldr	r3, [r3, #0]
20002fee:	681b      	ldr	r3, [r3, #0]
20002ff0:	2b00      	cmp	r3, #0
20002ff2:	d104      	bne.n	20002ffe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002ff4:	4b0a      	ldr	r3, [pc, #40]	; (20003020 <prvResetNextTaskUnblockTime+0x3c>)
20002ff6:	f04f 32ff 	mov.w	r2, #4294967295
20002ffa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
20002ffc:	e008      	b.n	20003010 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002ffe:	4b07      	ldr	r3, [pc, #28]	; (2000301c <prvResetNextTaskUnblockTime+0x38>)
20003000:	681b      	ldr	r3, [r3, #0]
20003002:	68db      	ldr	r3, [r3, #12]
20003004:	68db      	ldr	r3, [r3, #12]
20003006:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20003008:	687b      	ldr	r3, [r7, #4]
2000300a:	685b      	ldr	r3, [r3, #4]
2000300c:	4a04      	ldr	r2, [pc, #16]	; (20003020 <prvResetNextTaskUnblockTime+0x3c>)
2000300e:	6013      	str	r3, [r2, #0]
}
20003010:	bf00      	nop
20003012:	370c      	adds	r7, #12
20003014:	46bd      	mov	sp, r7
20003016:	f85d 7b04 	ldr.w	r7, [sp], #4
2000301a:	4770      	bx	lr
2000301c:	2000b5cc 	.word	0x2000b5cc
20003020:	2000b634 	.word	0x2000b634

20003024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20003024:	b480      	push	{r7}
20003026:	b083      	sub	sp, #12
20003028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
2000302a:	4b0b      	ldr	r3, [pc, #44]	; (20003058 <xTaskGetSchedulerState+0x34>)
2000302c:	681b      	ldr	r3, [r3, #0]
2000302e:	2b00      	cmp	r3, #0
20003030:	d102      	bne.n	20003038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20003032:	2301      	movs	r3, #1
20003034:	607b      	str	r3, [r7, #4]
20003036:	e008      	b.n	2000304a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20003038:	4b08      	ldr	r3, [pc, #32]	; (2000305c <xTaskGetSchedulerState+0x38>)
2000303a:	681b      	ldr	r3, [r3, #0]
2000303c:	2b00      	cmp	r3, #0
2000303e:	d102      	bne.n	20003046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
20003040:	2302      	movs	r3, #2
20003042:	607b      	str	r3, [r7, #4]
20003044:	e001      	b.n	2000304a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20003046:	2300      	movs	r3, #0
20003048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
2000304a:	687b      	ldr	r3, [r7, #4]
	}
2000304c:	4618      	mov	r0, r3
2000304e:	370c      	adds	r7, #12
20003050:	46bd      	mov	sp, r7
20003052:	f85d 7b04 	ldr.w	r7, [sp], #4
20003056:	4770      	bx	lr
20003058:	2000b620 	.word	0x2000b620
2000305c:	2000b63c 	.word	0x2000b63c

20003060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20003060:	b580      	push	{r7, lr}
20003062:	b086      	sub	sp, #24
20003064:	af00      	add	r7, sp, #0
20003066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
20003068:	687b      	ldr	r3, [r7, #4]
2000306a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
2000306c:	2300      	movs	r3, #0
2000306e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20003070:	687b      	ldr	r3, [r7, #4]
20003072:	2b00      	cmp	r3, #0
20003074:	d056      	beq.n	20003124 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20003076:	4b2e      	ldr	r3, [pc, #184]	; (20003130 <xTaskPriorityDisinherit+0xd0>)
20003078:	681b      	ldr	r3, [r3, #0]
2000307a:	693a      	ldr	r2, [r7, #16]
2000307c:	429a      	cmp	r2, r3
2000307e:	d00a      	beq.n	20003096 <xTaskPriorityDisinherit+0x36>
	__asm volatile
20003080:	f04f 0350 	mov.w	r3, #80	; 0x50
20003084:	f383 8811 	msr	BASEPRI, r3
20003088:	f3bf 8f6f 	isb	sy
2000308c:	f3bf 8f4f 	dsb	sy
20003090:	60fb      	str	r3, [r7, #12]
}
20003092:	bf00      	nop
20003094:	e7fe      	b.n	20003094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
20003096:	693b      	ldr	r3, [r7, #16]
20003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000309a:	2b00      	cmp	r3, #0
2000309c:	d10a      	bne.n	200030b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
2000309e:	f04f 0350 	mov.w	r3, #80	; 0x50
200030a2:	f383 8811 	msr	BASEPRI, r3
200030a6:	f3bf 8f6f 	isb	sy
200030aa:	f3bf 8f4f 	dsb	sy
200030ae:	60bb      	str	r3, [r7, #8]
}
200030b0:	bf00      	nop
200030b2:	e7fe      	b.n	200030b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
200030b4:	693b      	ldr	r3, [r7, #16]
200030b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200030b8:	1e5a      	subs	r2, r3, #1
200030ba:	693b      	ldr	r3, [r7, #16]
200030bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
200030be:	693b      	ldr	r3, [r7, #16]
200030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200030c2:	693b      	ldr	r3, [r7, #16]
200030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200030c6:	429a      	cmp	r2, r3
200030c8:	d02c      	beq.n	20003124 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
200030ca:	693b      	ldr	r3, [r7, #16]
200030cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200030ce:	2b00      	cmp	r3, #0
200030d0:	d128      	bne.n	20003124 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200030d2:	693b      	ldr	r3, [r7, #16]
200030d4:	3304      	adds	r3, #4
200030d6:	4618      	mov	r0, r3
200030d8:	f7fe fb54 	bl	20001784 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
200030dc:	693b      	ldr	r3, [r7, #16]
200030de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200030e0:	693b      	ldr	r3, [r7, #16]
200030e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200030e4:	693b      	ldr	r3, [r7, #16]
200030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200030e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
200030ec:	693b      	ldr	r3, [r7, #16]
200030ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
200030f0:	693b      	ldr	r3, [r7, #16]
200030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200030f4:	4b0f      	ldr	r3, [pc, #60]	; (20003134 <xTaskPriorityDisinherit+0xd4>)
200030f6:	681b      	ldr	r3, [r3, #0]
200030f8:	429a      	cmp	r2, r3
200030fa:	d903      	bls.n	20003104 <xTaskPriorityDisinherit+0xa4>
200030fc:	693b      	ldr	r3, [r7, #16]
200030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003100:	4a0c      	ldr	r2, [pc, #48]	; (20003134 <xTaskPriorityDisinherit+0xd4>)
20003102:	6013      	str	r3, [r2, #0]
20003104:	693b      	ldr	r3, [r7, #16]
20003106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20003108:	4613      	mov	r3, r2
2000310a:	009b      	lsls	r3, r3, #2
2000310c:	4413      	add	r3, r2
2000310e:	009b      	lsls	r3, r3, #2
20003110:	4a09      	ldr	r2, [pc, #36]	; (20003138 <xTaskPriorityDisinherit+0xd8>)
20003112:	441a      	add	r2, r3
20003114:	693b      	ldr	r3, [r7, #16]
20003116:	3304      	adds	r3, #4
20003118:	4619      	mov	r1, r3
2000311a:	4610      	mov	r0, r2
2000311c:	f7fe fad5 	bl	200016ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20003120:	2301      	movs	r3, #1
20003122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20003124:	697b      	ldr	r3, [r7, #20]
	}
20003126:	4618      	mov	r0, r3
20003128:	3718      	adds	r7, #24
2000312a:	46bd      	mov	sp, r7
2000312c:	bd80      	pop	{r7, pc}
2000312e:	bf00      	nop
20003130:	2000b140 	.word	0x2000b140
20003134:	2000b61c 	.word	0x2000b61c
20003138:	2000b144 	.word	0x2000b144

2000313c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
2000313c:	b580      	push	{r7, lr}
2000313e:	b084      	sub	sp, #16
20003140:	af00      	add	r7, sp, #0
20003142:	6078      	str	r0, [r7, #4]
20003144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20003146:	4b21      	ldr	r3, [pc, #132]	; (200031cc <prvAddCurrentTaskToDelayedList+0x90>)
20003148:	681b      	ldr	r3, [r3, #0]
2000314a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000314c:	4b20      	ldr	r3, [pc, #128]	; (200031d0 <prvAddCurrentTaskToDelayedList+0x94>)
2000314e:	681b      	ldr	r3, [r3, #0]
20003150:	3304      	adds	r3, #4
20003152:	4618      	mov	r0, r3
20003154:	f7fe fb16 	bl	20001784 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20003158:	687b      	ldr	r3, [r7, #4]
2000315a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000315e:	d10a      	bne.n	20003176 <prvAddCurrentTaskToDelayedList+0x3a>
20003160:	683b      	ldr	r3, [r7, #0]
20003162:	2b00      	cmp	r3, #0
20003164:	d007      	beq.n	20003176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003166:	4b1a      	ldr	r3, [pc, #104]	; (200031d0 <prvAddCurrentTaskToDelayedList+0x94>)
20003168:	681b      	ldr	r3, [r3, #0]
2000316a:	3304      	adds	r3, #4
2000316c:	4619      	mov	r1, r3
2000316e:	4819      	ldr	r0, [pc, #100]	; (200031d4 <prvAddCurrentTaskToDelayedList+0x98>)
20003170:	f7fe faab 	bl	200016ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
20003174:	e026      	b.n	200031c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
20003176:	68fa      	ldr	r2, [r7, #12]
20003178:	687b      	ldr	r3, [r7, #4]
2000317a:	4413      	add	r3, r2
2000317c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
2000317e:	4b14      	ldr	r3, [pc, #80]	; (200031d0 <prvAddCurrentTaskToDelayedList+0x94>)
20003180:	681b      	ldr	r3, [r3, #0]
20003182:	68ba      	ldr	r2, [r7, #8]
20003184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
20003186:	68ba      	ldr	r2, [r7, #8]
20003188:	68fb      	ldr	r3, [r7, #12]
2000318a:	429a      	cmp	r2, r3
2000318c:	d209      	bcs.n	200031a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000318e:	4b12      	ldr	r3, [pc, #72]	; (200031d8 <prvAddCurrentTaskToDelayedList+0x9c>)
20003190:	681a      	ldr	r2, [r3, #0]
20003192:	4b0f      	ldr	r3, [pc, #60]	; (200031d0 <prvAddCurrentTaskToDelayedList+0x94>)
20003194:	681b      	ldr	r3, [r3, #0]
20003196:	3304      	adds	r3, #4
20003198:	4619      	mov	r1, r3
2000319a:	4610      	mov	r0, r2
2000319c:	f7fe fab9 	bl	20001712 <vListInsert>
}
200031a0:	e010      	b.n	200031c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200031a2:	4b0e      	ldr	r3, [pc, #56]	; (200031dc <prvAddCurrentTaskToDelayedList+0xa0>)
200031a4:	681a      	ldr	r2, [r3, #0]
200031a6:	4b0a      	ldr	r3, [pc, #40]	; (200031d0 <prvAddCurrentTaskToDelayedList+0x94>)
200031a8:	681b      	ldr	r3, [r3, #0]
200031aa:	3304      	adds	r3, #4
200031ac:	4619      	mov	r1, r3
200031ae:	4610      	mov	r0, r2
200031b0:	f7fe faaf 	bl	20001712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
200031b4:	4b0a      	ldr	r3, [pc, #40]	; (200031e0 <prvAddCurrentTaskToDelayedList+0xa4>)
200031b6:	681b      	ldr	r3, [r3, #0]
200031b8:	68ba      	ldr	r2, [r7, #8]
200031ba:	429a      	cmp	r2, r3
200031bc:	d202      	bcs.n	200031c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
200031be:	4a08      	ldr	r2, [pc, #32]	; (200031e0 <prvAddCurrentTaskToDelayedList+0xa4>)
200031c0:	68bb      	ldr	r3, [r7, #8]
200031c2:	6013      	str	r3, [r2, #0]
}
200031c4:	bf00      	nop
200031c6:	3710      	adds	r7, #16
200031c8:	46bd      	mov	sp, r7
200031ca:	bd80      	pop	{r7, pc}
200031cc:	2000b618 	.word	0x2000b618
200031d0:	2000b140 	.word	0x2000b140
200031d4:	2000b600 	.word	0x2000b600
200031d8:	2000b5d0 	.word	0x2000b5d0
200031dc:	2000b5cc 	.word	0x2000b5cc
200031e0:	2000b634 	.word	0x2000b634

200031e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
200031e4:	b580      	push	{r7, lr}
200031e6:	b08a      	sub	sp, #40	; 0x28
200031e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
200031ea:	2300      	movs	r3, #0
200031ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
200031ee:	f000 fb07 	bl	20003800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
200031f2:	4b1c      	ldr	r3, [pc, #112]	; (20003264 <xTimerCreateTimerTask+0x80>)
200031f4:	681b      	ldr	r3, [r3, #0]
200031f6:	2b00      	cmp	r3, #0
200031f8:	d021      	beq.n	2000323e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
200031fa:	2300      	movs	r3, #0
200031fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
200031fe:	2300      	movs	r3, #0
20003200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
20003202:	1d3a      	adds	r2, r7, #4
20003204:	f107 0108 	add.w	r1, r7, #8
20003208:	f107 030c 	add.w	r3, r7, #12
2000320c:	4618      	mov	r0, r3
2000320e:	f7fe fa15 	bl	2000163c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
20003212:	6879      	ldr	r1, [r7, #4]
20003214:	68bb      	ldr	r3, [r7, #8]
20003216:	68fa      	ldr	r2, [r7, #12]
20003218:	9202      	str	r2, [sp, #8]
2000321a:	9301      	str	r3, [sp, #4]
2000321c:	2302      	movs	r3, #2
2000321e:	9300      	str	r3, [sp, #0]
20003220:	2300      	movs	r3, #0
20003222:	460a      	mov	r2, r1
20003224:	4910      	ldr	r1, [pc, #64]	; (20003268 <xTimerCreateTimerTask+0x84>)
20003226:	4811      	ldr	r0, [pc, #68]	; (2000326c <xTimerCreateTimerTask+0x88>)
20003228:	f7ff f8b4 	bl	20002394 <xTaskCreateStatic>
2000322c:	4603      	mov	r3, r0
2000322e:	4a10      	ldr	r2, [pc, #64]	; (20003270 <xTimerCreateTimerTask+0x8c>)
20003230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
20003232:	4b0f      	ldr	r3, [pc, #60]	; (20003270 <xTimerCreateTimerTask+0x8c>)
20003234:	681b      	ldr	r3, [r3, #0]
20003236:	2b00      	cmp	r3, #0
20003238:	d001      	beq.n	2000323e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
2000323a:	2301      	movs	r3, #1
2000323c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
2000323e:	697b      	ldr	r3, [r7, #20]
20003240:	2b00      	cmp	r3, #0
20003242:	d10a      	bne.n	2000325a <xTimerCreateTimerTask+0x76>
	__asm volatile
20003244:	f04f 0350 	mov.w	r3, #80	; 0x50
20003248:	f383 8811 	msr	BASEPRI, r3
2000324c:	f3bf 8f6f 	isb	sy
20003250:	f3bf 8f4f 	dsb	sy
20003254:	613b      	str	r3, [r7, #16]
}
20003256:	bf00      	nop
20003258:	e7fe      	b.n	20003258 <xTimerCreateTimerTask+0x74>
	return xReturn;
2000325a:	697b      	ldr	r3, [r7, #20]
}
2000325c:	4618      	mov	r0, r3
2000325e:	3718      	adds	r7, #24
20003260:	46bd      	mov	sp, r7
20003262:	bd80      	pop	{r7, pc}
20003264:	2000b670 	.word	0x2000b670
20003268:	20006a1c 	.word	0x20006a1c
2000326c:	200033a9 	.word	0x200033a9
20003270:	2000b674 	.word	0x2000b674

20003274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20003274:	b580      	push	{r7, lr}
20003276:	b08a      	sub	sp, #40	; 0x28
20003278:	af00      	add	r7, sp, #0
2000327a:	60f8      	str	r0, [r7, #12]
2000327c:	60b9      	str	r1, [r7, #8]
2000327e:	607a      	str	r2, [r7, #4]
20003280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
20003282:	2300      	movs	r3, #0
20003284:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20003286:	68fb      	ldr	r3, [r7, #12]
20003288:	2b00      	cmp	r3, #0
2000328a:	d10a      	bne.n	200032a2 <xTimerGenericCommand+0x2e>
	__asm volatile
2000328c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003290:	f383 8811 	msr	BASEPRI, r3
20003294:	f3bf 8f6f 	isb	sy
20003298:	f3bf 8f4f 	dsb	sy
2000329c:	623b      	str	r3, [r7, #32]
}
2000329e:	bf00      	nop
200032a0:	e7fe      	b.n	200032a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
200032a2:	4b1a      	ldr	r3, [pc, #104]	; (2000330c <xTimerGenericCommand+0x98>)
200032a4:	681b      	ldr	r3, [r3, #0]
200032a6:	2b00      	cmp	r3, #0
200032a8:	d02a      	beq.n	20003300 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
200032aa:	68bb      	ldr	r3, [r7, #8]
200032ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
200032ae:	687b      	ldr	r3, [r7, #4]
200032b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
200032b2:	68fb      	ldr	r3, [r7, #12]
200032b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
200032b6:	68bb      	ldr	r3, [r7, #8]
200032b8:	2b05      	cmp	r3, #5
200032ba:	dc18      	bgt.n	200032ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
200032bc:	f7ff feb2 	bl	20003024 <xTaskGetSchedulerState>
200032c0:	4603      	mov	r3, r0
200032c2:	2b02      	cmp	r3, #2
200032c4:	d109      	bne.n	200032da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
200032c6:	4b11      	ldr	r3, [pc, #68]	; (2000330c <xTimerGenericCommand+0x98>)
200032c8:	6818      	ldr	r0, [r3, #0]
200032ca:	f107 0110 	add.w	r1, r7, #16
200032ce:	2300      	movs	r3, #0
200032d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200032d2:	f7fe fc29 	bl	20001b28 <xQueueGenericSend>
200032d6:	6278      	str	r0, [r7, #36]	; 0x24
200032d8:	e012      	b.n	20003300 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
200032da:	4b0c      	ldr	r3, [pc, #48]	; (2000330c <xTimerGenericCommand+0x98>)
200032dc:	6818      	ldr	r0, [r3, #0]
200032de:	f107 0110 	add.w	r1, r7, #16
200032e2:	2300      	movs	r3, #0
200032e4:	2200      	movs	r2, #0
200032e6:	f7fe fc1f 	bl	20001b28 <xQueueGenericSend>
200032ea:	6278      	str	r0, [r7, #36]	; 0x24
200032ec:	e008      	b.n	20003300 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
200032ee:	4b07      	ldr	r3, [pc, #28]	; (2000330c <xTimerGenericCommand+0x98>)
200032f0:	6818      	ldr	r0, [r3, #0]
200032f2:	f107 0110 	add.w	r1, r7, #16
200032f6:	2300      	movs	r3, #0
200032f8:	683a      	ldr	r2, [r7, #0]
200032fa:	f7fe fd13 	bl	20001d24 <xQueueGenericSendFromISR>
200032fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
20003302:	4618      	mov	r0, r3
20003304:	3728      	adds	r7, #40	; 0x28
20003306:	46bd      	mov	sp, r7
20003308:	bd80      	pop	{r7, pc}
2000330a:	bf00      	nop
2000330c:	2000b670 	.word	0x2000b670

20003310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20003310:	b580      	push	{r7, lr}
20003312:	b088      	sub	sp, #32
20003314:	af02      	add	r7, sp, #8
20003316:	6078      	str	r0, [r7, #4]
20003318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
2000331a:	4b22      	ldr	r3, [pc, #136]	; (200033a4 <prvProcessExpiredTimer+0x94>)
2000331c:	681b      	ldr	r3, [r3, #0]
2000331e:	68db      	ldr	r3, [r3, #12]
20003320:	68db      	ldr	r3, [r3, #12]
20003322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003324:	697b      	ldr	r3, [r7, #20]
20003326:	3304      	adds	r3, #4
20003328:	4618      	mov	r0, r3
2000332a:	f7fe fa2b 	bl	20001784 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
2000332e:	697b      	ldr	r3, [r7, #20]
20003330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003334:	f003 0304 	and.w	r3, r3, #4
20003338:	2b00      	cmp	r3, #0
2000333a:	d022      	beq.n	20003382 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
2000333c:	697b      	ldr	r3, [r7, #20]
2000333e:	699a      	ldr	r2, [r3, #24]
20003340:	687b      	ldr	r3, [r7, #4]
20003342:	18d1      	adds	r1, r2, r3
20003344:	687b      	ldr	r3, [r7, #4]
20003346:	683a      	ldr	r2, [r7, #0]
20003348:	6978      	ldr	r0, [r7, #20]
2000334a:	f000 f8d1 	bl	200034f0 <prvInsertTimerInActiveList>
2000334e:	4603      	mov	r3, r0
20003350:	2b00      	cmp	r3, #0
20003352:	d01f      	beq.n	20003394 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20003354:	2300      	movs	r3, #0
20003356:	9300      	str	r3, [sp, #0]
20003358:	2300      	movs	r3, #0
2000335a:	687a      	ldr	r2, [r7, #4]
2000335c:	2100      	movs	r1, #0
2000335e:	6978      	ldr	r0, [r7, #20]
20003360:	f7ff ff88 	bl	20003274 <xTimerGenericCommand>
20003364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
20003366:	693b      	ldr	r3, [r7, #16]
20003368:	2b00      	cmp	r3, #0
2000336a:	d113      	bne.n	20003394 <prvProcessExpiredTimer+0x84>
	__asm volatile
2000336c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003370:	f383 8811 	msr	BASEPRI, r3
20003374:	f3bf 8f6f 	isb	sy
20003378:	f3bf 8f4f 	dsb	sy
2000337c:	60fb      	str	r3, [r7, #12]
}
2000337e:	bf00      	nop
20003380:	e7fe      	b.n	20003380 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20003382:	697b      	ldr	r3, [r7, #20]
20003384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003388:	f023 0301 	bic.w	r3, r3, #1
2000338c:	b2da      	uxtb	r2, r3
2000338e:	697b      	ldr	r3, [r7, #20]
20003390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20003394:	697b      	ldr	r3, [r7, #20]
20003396:	6a1b      	ldr	r3, [r3, #32]
20003398:	6978      	ldr	r0, [r7, #20]
2000339a:	4798      	blx	r3
}
2000339c:	bf00      	nop
2000339e:	3718      	adds	r7, #24
200033a0:	46bd      	mov	sp, r7
200033a2:	bd80      	pop	{r7, pc}
200033a4:	2000b668 	.word	0x2000b668

200033a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
200033a8:	b580      	push	{r7, lr}
200033aa:	b084      	sub	sp, #16
200033ac:	af00      	add	r7, sp, #0
200033ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
200033b0:	f107 0308 	add.w	r3, r7, #8
200033b4:	4618      	mov	r0, r3
200033b6:	f000 f857 	bl	20003468 <prvGetNextExpireTime>
200033ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
200033bc:	68bb      	ldr	r3, [r7, #8]
200033be:	4619      	mov	r1, r3
200033c0:	68f8      	ldr	r0, [r7, #12]
200033c2:	f000 f803 	bl	200033cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
200033c6:	f000 f8d5 	bl	20003574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
200033ca:	e7f1      	b.n	200033b0 <prvTimerTask+0x8>

200033cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
200033cc:	b580      	push	{r7, lr}
200033ce:	b084      	sub	sp, #16
200033d0:	af00      	add	r7, sp, #0
200033d2:	6078      	str	r0, [r7, #4]
200033d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
200033d6:	f7ff fa39 	bl	2000284c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200033da:	f107 0308 	add.w	r3, r7, #8
200033de:	4618      	mov	r0, r3
200033e0:	f000 f866 	bl	200034b0 <prvSampleTimeNow>
200033e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
200033e6:	68bb      	ldr	r3, [r7, #8]
200033e8:	2b00      	cmp	r3, #0
200033ea:	d130      	bne.n	2000344e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
200033ec:	683b      	ldr	r3, [r7, #0]
200033ee:	2b00      	cmp	r3, #0
200033f0:	d10a      	bne.n	20003408 <prvProcessTimerOrBlockTask+0x3c>
200033f2:	687a      	ldr	r2, [r7, #4]
200033f4:	68fb      	ldr	r3, [r7, #12]
200033f6:	429a      	cmp	r2, r3
200033f8:	d806      	bhi.n	20003408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
200033fa:	f7ff fa35 	bl	20002868 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
200033fe:	68f9      	ldr	r1, [r7, #12]
20003400:	6878      	ldr	r0, [r7, #4]
20003402:	f7ff ff85 	bl	20003310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20003406:	e024      	b.n	20003452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
20003408:	683b      	ldr	r3, [r7, #0]
2000340a:	2b00      	cmp	r3, #0
2000340c:	d008      	beq.n	20003420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
2000340e:	4b13      	ldr	r3, [pc, #76]	; (2000345c <prvProcessTimerOrBlockTask+0x90>)
20003410:	681b      	ldr	r3, [r3, #0]
20003412:	681b      	ldr	r3, [r3, #0]
20003414:	2b00      	cmp	r3, #0
20003416:	d101      	bne.n	2000341c <prvProcessTimerOrBlockTask+0x50>
20003418:	2301      	movs	r3, #1
2000341a:	e000      	b.n	2000341e <prvProcessTimerOrBlockTask+0x52>
2000341c:	2300      	movs	r3, #0
2000341e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20003420:	4b0f      	ldr	r3, [pc, #60]	; (20003460 <prvProcessTimerOrBlockTask+0x94>)
20003422:	6818      	ldr	r0, [r3, #0]
20003424:	687a      	ldr	r2, [r7, #4]
20003426:	68fb      	ldr	r3, [r7, #12]
20003428:	1ad3      	subs	r3, r2, r3
2000342a:	683a      	ldr	r2, [r7, #0]
2000342c:	4619      	mov	r1, r3
2000342e:	f7fe ff7d 	bl	2000232c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
20003432:	f7ff fa19 	bl	20002868 <xTaskResumeAll>
20003436:	4603      	mov	r3, r0
20003438:	2b00      	cmp	r3, #0
2000343a:	d10a      	bne.n	20003452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
2000343c:	4b09      	ldr	r3, [pc, #36]	; (20003464 <prvProcessTimerOrBlockTask+0x98>)
2000343e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003442:	601a      	str	r2, [r3, #0]
20003444:	f3bf 8f4f 	dsb	sy
20003448:	f3bf 8f6f 	isb	sy
}
2000344c:	e001      	b.n	20003452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
2000344e:	f7ff fa0b 	bl	20002868 <xTaskResumeAll>
}
20003452:	bf00      	nop
20003454:	3710      	adds	r7, #16
20003456:	46bd      	mov	sp, r7
20003458:	bd80      	pop	{r7, pc}
2000345a:	bf00      	nop
2000345c:	2000b66c 	.word	0x2000b66c
20003460:	2000b670 	.word	0x2000b670
20003464:	e000ed04 	.word	0xe000ed04

20003468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20003468:	b480      	push	{r7}
2000346a:	b085      	sub	sp, #20
2000346c:	af00      	add	r7, sp, #0
2000346e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20003470:	4b0e      	ldr	r3, [pc, #56]	; (200034ac <prvGetNextExpireTime+0x44>)
20003472:	681b      	ldr	r3, [r3, #0]
20003474:	681b      	ldr	r3, [r3, #0]
20003476:	2b00      	cmp	r3, #0
20003478:	d101      	bne.n	2000347e <prvGetNextExpireTime+0x16>
2000347a:	2201      	movs	r2, #1
2000347c:	e000      	b.n	20003480 <prvGetNextExpireTime+0x18>
2000347e:	2200      	movs	r2, #0
20003480:	687b      	ldr	r3, [r7, #4]
20003482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20003484:	687b      	ldr	r3, [r7, #4]
20003486:	681b      	ldr	r3, [r3, #0]
20003488:	2b00      	cmp	r3, #0
2000348a:	d105      	bne.n	20003498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
2000348c:	4b07      	ldr	r3, [pc, #28]	; (200034ac <prvGetNextExpireTime+0x44>)
2000348e:	681b      	ldr	r3, [r3, #0]
20003490:	68db      	ldr	r3, [r3, #12]
20003492:	681b      	ldr	r3, [r3, #0]
20003494:	60fb      	str	r3, [r7, #12]
20003496:	e001      	b.n	2000349c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003498:	2300      	movs	r3, #0
2000349a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
2000349c:	68fb      	ldr	r3, [r7, #12]
}
2000349e:	4618      	mov	r0, r3
200034a0:	3714      	adds	r7, #20
200034a2:	46bd      	mov	sp, r7
200034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200034a8:	4770      	bx	lr
200034aa:	bf00      	nop
200034ac:	2000b668 	.word	0x2000b668

200034b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
200034b0:	b580      	push	{r7, lr}
200034b2:	b084      	sub	sp, #16
200034b4:	af00      	add	r7, sp, #0
200034b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
200034b8:	f7ff fa74 	bl	200029a4 <xTaskGetTickCount>
200034bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
200034be:	4b0b      	ldr	r3, [pc, #44]	; (200034ec <prvSampleTimeNow+0x3c>)
200034c0:	681b      	ldr	r3, [r3, #0]
200034c2:	68fa      	ldr	r2, [r7, #12]
200034c4:	429a      	cmp	r2, r3
200034c6:	d205      	bcs.n	200034d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
200034c8:	f000 f936 	bl	20003738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
200034cc:	687b      	ldr	r3, [r7, #4]
200034ce:	2201      	movs	r2, #1
200034d0:	601a      	str	r2, [r3, #0]
200034d2:	e002      	b.n	200034da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
200034d4:	687b      	ldr	r3, [r7, #4]
200034d6:	2200      	movs	r2, #0
200034d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
200034da:	4a04      	ldr	r2, [pc, #16]	; (200034ec <prvSampleTimeNow+0x3c>)
200034dc:	68fb      	ldr	r3, [r7, #12]
200034de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
200034e0:	68fb      	ldr	r3, [r7, #12]
}
200034e2:	4618      	mov	r0, r3
200034e4:	3710      	adds	r7, #16
200034e6:	46bd      	mov	sp, r7
200034e8:	bd80      	pop	{r7, pc}
200034ea:	bf00      	nop
200034ec:	2000b678 	.word	0x2000b678

200034f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
200034f0:	b580      	push	{r7, lr}
200034f2:	b086      	sub	sp, #24
200034f4:	af00      	add	r7, sp, #0
200034f6:	60f8      	str	r0, [r7, #12]
200034f8:	60b9      	str	r1, [r7, #8]
200034fa:	607a      	str	r2, [r7, #4]
200034fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
200034fe:	2300      	movs	r3, #0
20003500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20003502:	68fb      	ldr	r3, [r7, #12]
20003504:	68ba      	ldr	r2, [r7, #8]
20003506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003508:	68fb      	ldr	r3, [r7, #12]
2000350a:	68fa      	ldr	r2, [r7, #12]
2000350c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
2000350e:	68ba      	ldr	r2, [r7, #8]
20003510:	687b      	ldr	r3, [r7, #4]
20003512:	429a      	cmp	r2, r3
20003514:	d812      	bhi.n	2000353c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20003516:	687a      	ldr	r2, [r7, #4]
20003518:	683b      	ldr	r3, [r7, #0]
2000351a:	1ad2      	subs	r2, r2, r3
2000351c:	68fb      	ldr	r3, [r7, #12]
2000351e:	699b      	ldr	r3, [r3, #24]
20003520:	429a      	cmp	r2, r3
20003522:	d302      	bcc.n	2000352a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20003524:	2301      	movs	r3, #1
20003526:	617b      	str	r3, [r7, #20]
20003528:	e01b      	b.n	20003562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
2000352a:	4b10      	ldr	r3, [pc, #64]	; (2000356c <prvInsertTimerInActiveList+0x7c>)
2000352c:	681a      	ldr	r2, [r3, #0]
2000352e:	68fb      	ldr	r3, [r7, #12]
20003530:	3304      	adds	r3, #4
20003532:	4619      	mov	r1, r3
20003534:	4610      	mov	r0, r2
20003536:	f7fe f8ec 	bl	20001712 <vListInsert>
2000353a:	e012      	b.n	20003562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
2000353c:	687a      	ldr	r2, [r7, #4]
2000353e:	683b      	ldr	r3, [r7, #0]
20003540:	429a      	cmp	r2, r3
20003542:	d206      	bcs.n	20003552 <prvInsertTimerInActiveList+0x62>
20003544:	68ba      	ldr	r2, [r7, #8]
20003546:	683b      	ldr	r3, [r7, #0]
20003548:	429a      	cmp	r2, r3
2000354a:	d302      	bcc.n	20003552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
2000354c:	2301      	movs	r3, #1
2000354e:	617b      	str	r3, [r7, #20]
20003550:	e007      	b.n	20003562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003552:	4b07      	ldr	r3, [pc, #28]	; (20003570 <prvInsertTimerInActiveList+0x80>)
20003554:	681a      	ldr	r2, [r3, #0]
20003556:	68fb      	ldr	r3, [r7, #12]
20003558:	3304      	adds	r3, #4
2000355a:	4619      	mov	r1, r3
2000355c:	4610      	mov	r0, r2
2000355e:	f7fe f8d8 	bl	20001712 <vListInsert>
		}
	}

	return xProcessTimerNow;
20003562:	697b      	ldr	r3, [r7, #20]
}
20003564:	4618      	mov	r0, r3
20003566:	3718      	adds	r7, #24
20003568:	46bd      	mov	sp, r7
2000356a:	bd80      	pop	{r7, pc}
2000356c:	2000b66c 	.word	0x2000b66c
20003570:	2000b668 	.word	0x2000b668

20003574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20003574:	b580      	push	{r7, lr}
20003576:	b08e      	sub	sp, #56	; 0x38
20003578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
2000357a:	e0ca      	b.n	20003712 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
2000357c:	687b      	ldr	r3, [r7, #4]
2000357e:	2b00      	cmp	r3, #0
20003580:	da18      	bge.n	200035b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20003582:	1d3b      	adds	r3, r7, #4
20003584:	3304      	adds	r3, #4
20003586:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000358a:	2b00      	cmp	r3, #0
2000358c:	d10a      	bne.n	200035a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
2000358e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003592:	f383 8811 	msr	BASEPRI, r3
20003596:	f3bf 8f6f 	isb	sy
2000359a:	f3bf 8f4f 	dsb	sy
2000359e:	61fb      	str	r3, [r7, #28]
}
200035a0:	bf00      	nop
200035a2:	e7fe      	b.n	200035a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
200035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200035a6:	681b      	ldr	r3, [r3, #0]
200035a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200035aa:	6850      	ldr	r0, [r2, #4]
200035ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
200035ae:	6892      	ldr	r2, [r2, #8]
200035b0:	4611      	mov	r1, r2
200035b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
200035b4:	687b      	ldr	r3, [r7, #4]
200035b6:	2b00      	cmp	r3, #0
200035b8:	f2c0 80aa 	blt.w	20003710 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
200035bc:	68fb      	ldr	r3, [r7, #12]
200035be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
200035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035c2:	695b      	ldr	r3, [r3, #20]
200035c4:	2b00      	cmp	r3, #0
200035c6:	d004      	beq.n	200035d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035ca:	3304      	adds	r3, #4
200035cc:	4618      	mov	r0, r3
200035ce:	f7fe f8d9 	bl	20001784 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
200035d2:	463b      	mov	r3, r7
200035d4:	4618      	mov	r0, r3
200035d6:	f7ff ff6b 	bl	200034b0 <prvSampleTimeNow>
200035da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
200035dc:	687b      	ldr	r3, [r7, #4]
200035de:	2b09      	cmp	r3, #9
200035e0:	f200 8097 	bhi.w	20003712 <prvProcessReceivedCommands+0x19e>
200035e4:	a201      	add	r2, pc, #4	; (adr r2, 200035ec <prvProcessReceivedCommands+0x78>)
200035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200035ea:	bf00      	nop
200035ec:	20003615 	.word	0x20003615
200035f0:	20003615 	.word	0x20003615
200035f4:	20003615 	.word	0x20003615
200035f8:	20003689 	.word	0x20003689
200035fc:	2000369d 	.word	0x2000369d
20003600:	200036e7 	.word	0x200036e7
20003604:	20003615 	.word	0x20003615
20003608:	20003615 	.word	0x20003615
2000360c:	20003689 	.word	0x20003689
20003610:	2000369d 	.word	0x2000369d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20003614:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000361a:	f043 0301 	orr.w	r3, r3, #1
2000361e:	b2da      	uxtb	r2, r3
20003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20003626:	68ba      	ldr	r2, [r7, #8]
20003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000362a:	699b      	ldr	r3, [r3, #24]
2000362c:	18d1      	adds	r1, r2, r3
2000362e:	68bb      	ldr	r3, [r7, #8]
20003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003634:	f7ff ff5c 	bl	200034f0 <prvInsertTimerInActiveList>
20003638:	4603      	mov	r3, r0
2000363a:	2b00      	cmp	r3, #0
2000363c:	d069      	beq.n	20003712 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
2000363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003640:	6a1b      	ldr	r3, [r3, #32]
20003642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000364c:	f003 0304 	and.w	r3, r3, #4
20003650:	2b00      	cmp	r3, #0
20003652:	d05e      	beq.n	20003712 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20003654:	68ba      	ldr	r2, [r7, #8]
20003656:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003658:	699b      	ldr	r3, [r3, #24]
2000365a:	441a      	add	r2, r3
2000365c:	2300      	movs	r3, #0
2000365e:	9300      	str	r3, [sp, #0]
20003660:	2300      	movs	r3, #0
20003662:	2100      	movs	r1, #0
20003664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003666:	f7ff fe05 	bl	20003274 <xTimerGenericCommand>
2000366a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
2000366c:	6a3b      	ldr	r3, [r7, #32]
2000366e:	2b00      	cmp	r3, #0
20003670:	d14f      	bne.n	20003712 <prvProcessReceivedCommands+0x19e>
	__asm volatile
20003672:	f04f 0350 	mov.w	r3, #80	; 0x50
20003676:	f383 8811 	msr	BASEPRI, r3
2000367a:	f3bf 8f6f 	isb	sy
2000367e:	f3bf 8f4f 	dsb	sy
20003682:	61bb      	str	r3, [r7, #24]
}
20003684:	bf00      	nop
20003686:	e7fe      	b.n	20003686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000368a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000368e:	f023 0301 	bic.w	r3, r3, #1
20003692:	b2da      	uxtb	r2, r3
20003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
2000369a:	e03a      	b.n	20003712 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
2000369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000369e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200036a2:	f043 0301 	orr.w	r3, r3, #1
200036a6:	b2da      	uxtb	r2, r3
200036a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200036aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
200036ae:	68ba      	ldr	r2, [r7, #8]
200036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200036b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
200036b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
200036b6:	699b      	ldr	r3, [r3, #24]
200036b8:	2b00      	cmp	r3, #0
200036ba:	d10a      	bne.n	200036d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
200036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
200036c0:	f383 8811 	msr	BASEPRI, r3
200036c4:	f3bf 8f6f 	isb	sy
200036c8:	f3bf 8f4f 	dsb	sy
200036cc:	617b      	str	r3, [r7, #20]
}
200036ce:	bf00      	nop
200036d0:	e7fe      	b.n	200036d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
200036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200036d4:	699a      	ldr	r2, [r3, #24]
200036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200036d8:	18d1      	adds	r1, r2, r3
200036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200036de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200036e0:	f7ff ff06 	bl	200034f0 <prvInsertTimerInActiveList>
					break;
200036e4:	e015      	b.n	20003712 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
200036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200036e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200036ec:	f003 0302 	and.w	r3, r3, #2
200036f0:	2b00      	cmp	r3, #0
200036f2:	d103      	bne.n	200036fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
200036f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200036f6:	f000 fbdb 	bl	20003eb0 <vPortFree>
200036fa:	e00a      	b.n	20003712 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
200036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200036fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003702:	f023 0301 	bic.w	r3, r3, #1
20003706:	b2da      	uxtb	r2, r3
20003708:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000370a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
2000370e:	e000      	b.n	20003712 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
20003710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003712:	4b08      	ldr	r3, [pc, #32]	; (20003734 <prvProcessReceivedCommands+0x1c0>)
20003714:	681b      	ldr	r3, [r3, #0]
20003716:	1d39      	adds	r1, r7, #4
20003718:	2200      	movs	r2, #0
2000371a:	4618      	mov	r0, r3
2000371c:	f7fe fb9e 	bl	20001e5c <xQueueReceive>
20003720:	4603      	mov	r3, r0
20003722:	2b00      	cmp	r3, #0
20003724:	f47f af2a 	bne.w	2000357c <prvProcessReceivedCommands+0x8>
	}
}
20003728:	bf00      	nop
2000372a:	bf00      	nop
2000372c:	3730      	adds	r7, #48	; 0x30
2000372e:	46bd      	mov	sp, r7
20003730:	bd80      	pop	{r7, pc}
20003732:	bf00      	nop
20003734:	2000b670 	.word	0x2000b670

20003738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20003738:	b580      	push	{r7, lr}
2000373a:	b088      	sub	sp, #32
2000373c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
2000373e:	e048      	b.n	200037d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003740:	4b2d      	ldr	r3, [pc, #180]	; (200037f8 <prvSwitchTimerLists+0xc0>)
20003742:	681b      	ldr	r3, [r3, #0]
20003744:	68db      	ldr	r3, [r3, #12]
20003746:	681b      	ldr	r3, [r3, #0]
20003748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
2000374a:	4b2b      	ldr	r3, [pc, #172]	; (200037f8 <prvSwitchTimerLists+0xc0>)
2000374c:	681b      	ldr	r3, [r3, #0]
2000374e:	68db      	ldr	r3, [r3, #12]
20003750:	68db      	ldr	r3, [r3, #12]
20003752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003754:	68fb      	ldr	r3, [r7, #12]
20003756:	3304      	adds	r3, #4
20003758:	4618      	mov	r0, r3
2000375a:	f7fe f813 	bl	20001784 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
2000375e:	68fb      	ldr	r3, [r7, #12]
20003760:	6a1b      	ldr	r3, [r3, #32]
20003762:	68f8      	ldr	r0, [r7, #12]
20003764:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20003766:	68fb      	ldr	r3, [r7, #12]
20003768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000376c:	f003 0304 	and.w	r3, r3, #4
20003770:	2b00      	cmp	r3, #0
20003772:	d02e      	beq.n	200037d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20003774:	68fb      	ldr	r3, [r7, #12]
20003776:	699b      	ldr	r3, [r3, #24]
20003778:	693a      	ldr	r2, [r7, #16]
2000377a:	4413      	add	r3, r2
2000377c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
2000377e:	68ba      	ldr	r2, [r7, #8]
20003780:	693b      	ldr	r3, [r7, #16]
20003782:	429a      	cmp	r2, r3
20003784:	d90e      	bls.n	200037a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20003786:	68fb      	ldr	r3, [r7, #12]
20003788:	68ba      	ldr	r2, [r7, #8]
2000378a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
2000378c:	68fb      	ldr	r3, [r7, #12]
2000378e:	68fa      	ldr	r2, [r7, #12]
20003790:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20003792:	4b19      	ldr	r3, [pc, #100]	; (200037f8 <prvSwitchTimerLists+0xc0>)
20003794:	681a      	ldr	r2, [r3, #0]
20003796:	68fb      	ldr	r3, [r7, #12]
20003798:	3304      	adds	r3, #4
2000379a:	4619      	mov	r1, r3
2000379c:	4610      	mov	r0, r2
2000379e:	f7fd ffb8 	bl	20001712 <vListInsert>
200037a2:	e016      	b.n	200037d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
200037a4:	2300      	movs	r3, #0
200037a6:	9300      	str	r3, [sp, #0]
200037a8:	2300      	movs	r3, #0
200037aa:	693a      	ldr	r2, [r7, #16]
200037ac:	2100      	movs	r1, #0
200037ae:	68f8      	ldr	r0, [r7, #12]
200037b0:	f7ff fd60 	bl	20003274 <xTimerGenericCommand>
200037b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
200037b6:	687b      	ldr	r3, [r7, #4]
200037b8:	2b00      	cmp	r3, #0
200037ba:	d10a      	bne.n	200037d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
200037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
200037c0:	f383 8811 	msr	BASEPRI, r3
200037c4:	f3bf 8f6f 	isb	sy
200037c8:	f3bf 8f4f 	dsb	sy
200037cc:	603b      	str	r3, [r7, #0]
}
200037ce:	bf00      	nop
200037d0:	e7fe      	b.n	200037d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200037d2:	4b09      	ldr	r3, [pc, #36]	; (200037f8 <prvSwitchTimerLists+0xc0>)
200037d4:	681b      	ldr	r3, [r3, #0]
200037d6:	681b      	ldr	r3, [r3, #0]
200037d8:	2b00      	cmp	r3, #0
200037da:	d1b1      	bne.n	20003740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
200037dc:	4b06      	ldr	r3, [pc, #24]	; (200037f8 <prvSwitchTimerLists+0xc0>)
200037de:	681b      	ldr	r3, [r3, #0]
200037e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
200037e2:	4b06      	ldr	r3, [pc, #24]	; (200037fc <prvSwitchTimerLists+0xc4>)
200037e4:	681b      	ldr	r3, [r3, #0]
200037e6:	4a04      	ldr	r2, [pc, #16]	; (200037f8 <prvSwitchTimerLists+0xc0>)
200037e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
200037ea:	4a04      	ldr	r2, [pc, #16]	; (200037fc <prvSwitchTimerLists+0xc4>)
200037ec:	697b      	ldr	r3, [r7, #20]
200037ee:	6013      	str	r3, [r2, #0]
}
200037f0:	bf00      	nop
200037f2:	3718      	adds	r7, #24
200037f4:	46bd      	mov	sp, r7
200037f6:	bd80      	pop	{r7, pc}
200037f8:	2000b668 	.word	0x2000b668
200037fc:	2000b66c 	.word	0x2000b66c

20003800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003800:	b580      	push	{r7, lr}
20003802:	b082      	sub	sp, #8
20003804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003806:	f000 f965 	bl	20003ad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
2000380a:	4b15      	ldr	r3, [pc, #84]	; (20003860 <prvCheckForValidListAndQueue+0x60>)
2000380c:	681b      	ldr	r3, [r3, #0]
2000380e:	2b00      	cmp	r3, #0
20003810:	d120      	bne.n	20003854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
20003812:	4814      	ldr	r0, [pc, #80]	; (20003864 <prvCheckForValidListAndQueue+0x64>)
20003814:	f7fd ff2c 	bl	20001670 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003818:	4813      	ldr	r0, [pc, #76]	; (20003868 <prvCheckForValidListAndQueue+0x68>)
2000381a:	f7fd ff29 	bl	20001670 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
2000381e:	4b13      	ldr	r3, [pc, #76]	; (2000386c <prvCheckForValidListAndQueue+0x6c>)
20003820:	4a10      	ldr	r2, [pc, #64]	; (20003864 <prvCheckForValidListAndQueue+0x64>)
20003822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003824:	4b12      	ldr	r3, [pc, #72]	; (20003870 <prvCheckForValidListAndQueue+0x70>)
20003826:	4a10      	ldr	r2, [pc, #64]	; (20003868 <prvCheckForValidListAndQueue+0x68>)
20003828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
2000382a:	2300      	movs	r3, #0
2000382c:	9300      	str	r3, [sp, #0]
2000382e:	4b11      	ldr	r3, [pc, #68]	; (20003874 <prvCheckForValidListAndQueue+0x74>)
20003830:	4a11      	ldr	r2, [pc, #68]	; (20003878 <prvCheckForValidListAndQueue+0x78>)
20003832:	2110      	movs	r1, #16
20003834:	200a      	movs	r0, #10
20003836:	f7fe f837 	bl	200018a8 <xQueueGenericCreateStatic>
2000383a:	4603      	mov	r3, r0
2000383c:	4a08      	ldr	r2, [pc, #32]	; (20003860 <prvCheckForValidListAndQueue+0x60>)
2000383e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
20003840:	4b07      	ldr	r3, [pc, #28]	; (20003860 <prvCheckForValidListAndQueue+0x60>)
20003842:	681b      	ldr	r3, [r3, #0]
20003844:	2b00      	cmp	r3, #0
20003846:	d005      	beq.n	20003854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
20003848:	4b05      	ldr	r3, [pc, #20]	; (20003860 <prvCheckForValidListAndQueue+0x60>)
2000384a:	681b      	ldr	r3, [r3, #0]
2000384c:	490b      	ldr	r1, [pc, #44]	; (2000387c <prvCheckForValidListAndQueue+0x7c>)
2000384e:	4618      	mov	r0, r3
20003850:	f7fe fd18 	bl	20002284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003854:	f000 f96e 	bl	20003b34 <vPortExitCritical>
}
20003858:	bf00      	nop
2000385a:	46bd      	mov	sp, r7
2000385c:	bd80      	pop	{r7, pc}
2000385e:	bf00      	nop
20003860:	2000b670 	.word	0x2000b670
20003864:	2000b640 	.word	0x2000b640
20003868:	2000b654 	.word	0x2000b654
2000386c:	2000b668 	.word	0x2000b668
20003870:	2000b66c 	.word	0x2000b66c
20003874:	2000b71c 	.word	0x2000b71c
20003878:	2000b67c 	.word	0x2000b67c
2000387c:	20006a24 	.word	0x20006a24

20003880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20003880:	b480      	push	{r7}
20003882:	b085      	sub	sp, #20
20003884:	af00      	add	r7, sp, #0
20003886:	60f8      	str	r0, [r7, #12]
20003888:	60b9      	str	r1, [r7, #8]
2000388a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
2000388c:	68fb      	ldr	r3, [r7, #12]
2000388e:	3b04      	subs	r3, #4
20003890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003892:	68fb      	ldr	r3, [r7, #12]
20003894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000389a:	68fb      	ldr	r3, [r7, #12]
2000389c:	3b04      	subs	r3, #4
2000389e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
200038a0:	68bb      	ldr	r3, [r7, #8]
200038a2:	f023 0201 	bic.w	r2, r3, #1
200038a6:	68fb      	ldr	r3, [r7, #12]
200038a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
200038aa:	68fb      	ldr	r3, [r7, #12]
200038ac:	3b04      	subs	r3, #4
200038ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
200038b0:	4a0c      	ldr	r2, [pc, #48]	; (200038e4 <pxPortInitialiseStack+0x64>)
200038b2:	68fb      	ldr	r3, [r7, #12]
200038b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
200038b6:	68fb      	ldr	r3, [r7, #12]
200038b8:	3b14      	subs	r3, #20
200038ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
200038bc:	687a      	ldr	r2, [r7, #4]
200038be:	68fb      	ldr	r3, [r7, #12]
200038c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
200038c2:	68fb      	ldr	r3, [r7, #12]
200038c4:	3b04      	subs	r3, #4
200038c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
200038c8:	68fb      	ldr	r3, [r7, #12]
200038ca:	f06f 0202 	mvn.w	r2, #2
200038ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
200038d0:	68fb      	ldr	r3, [r7, #12]
200038d2:	3b20      	subs	r3, #32
200038d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
200038d6:	68fb      	ldr	r3, [r7, #12]
}
200038d8:	4618      	mov	r0, r3
200038da:	3714      	adds	r7, #20
200038dc:	46bd      	mov	sp, r7
200038de:	f85d 7b04 	ldr.w	r7, [sp], #4
200038e2:	4770      	bx	lr
200038e4:	200038e9 	.word	0x200038e9

200038e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
200038e8:	b480      	push	{r7}
200038ea:	b085      	sub	sp, #20
200038ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
200038ee:	2300      	movs	r3, #0
200038f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
200038f2:	4b12      	ldr	r3, [pc, #72]	; (2000393c <prvTaskExitError+0x54>)
200038f4:	681b      	ldr	r3, [r3, #0]
200038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
200038fa:	d00a      	beq.n	20003912 <prvTaskExitError+0x2a>
	__asm volatile
200038fc:	f04f 0350 	mov.w	r3, #80	; 0x50
20003900:	f383 8811 	msr	BASEPRI, r3
20003904:	f3bf 8f6f 	isb	sy
20003908:	f3bf 8f4f 	dsb	sy
2000390c:	60fb      	str	r3, [r7, #12]
}
2000390e:	bf00      	nop
20003910:	e7fe      	b.n	20003910 <prvTaskExitError+0x28>
	__asm volatile
20003912:	f04f 0350 	mov.w	r3, #80	; 0x50
20003916:	f383 8811 	msr	BASEPRI, r3
2000391a:	f3bf 8f6f 	isb	sy
2000391e:	f3bf 8f4f 	dsb	sy
20003922:	60bb      	str	r3, [r7, #8]
}
20003924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
20003926:	bf00      	nop
20003928:	687b      	ldr	r3, [r7, #4]
2000392a:	2b00      	cmp	r3, #0
2000392c:	d0fc      	beq.n	20003928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
2000392e:	bf00      	nop
20003930:	bf00      	nop
20003932:	3714      	adds	r7, #20
20003934:	46bd      	mov	sp, r7
20003936:	f85d 7b04 	ldr.w	r7, [sp], #4
2000393a:	4770      	bx	lr
2000393c:	2000a8c0 	.word	0x2000a8c0

20003940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20003940:	4b07      	ldr	r3, [pc, #28]	; (20003960 <pxCurrentTCBConst2>)
20003942:	6819      	ldr	r1, [r3, #0]
20003944:	6808      	ldr	r0, [r1, #0]
20003946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000394a:	f380 8809 	msr	PSP, r0
2000394e:	f3bf 8f6f 	isb	sy
20003952:	f04f 0000 	mov.w	r0, #0
20003956:	f380 8811 	msr	BASEPRI, r0
2000395a:	4770      	bx	lr
2000395c:	f3af 8000 	nop.w

20003960 <pxCurrentTCBConst2>:
20003960:	2000b140 	.word	0x2000b140
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
20003964:	bf00      	nop
20003966:	bf00      	nop

20003968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
20003968:	4808      	ldr	r0, [pc, #32]	; (2000398c <prvPortStartFirstTask+0x24>)
2000396a:	6800      	ldr	r0, [r0, #0]
2000396c:	6800      	ldr	r0, [r0, #0]
2000396e:	f380 8808 	msr	MSP, r0
20003972:	f04f 0000 	mov.w	r0, #0
20003976:	f380 8814 	msr	CONTROL, r0
2000397a:	b662      	cpsie	i
2000397c:	b661      	cpsie	f
2000397e:	f3bf 8f4f 	dsb	sy
20003982:	f3bf 8f6f 	isb	sy
20003986:	df00      	svc	0
20003988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
2000398a:	bf00      	nop
2000398c:	e000ed08 	.word	0xe000ed08

20003990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003990:	b580      	push	{r7, lr}
20003992:	b086      	sub	sp, #24
20003994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
20003996:	4b46      	ldr	r3, [pc, #280]	; (20003ab0 <xPortStartScheduler+0x120>)
20003998:	681b      	ldr	r3, [r3, #0]
2000399a:	4a46      	ldr	r2, [pc, #280]	; (20003ab4 <xPortStartScheduler+0x124>)
2000399c:	4293      	cmp	r3, r2
2000399e:	d10a      	bne.n	200039b6 <xPortStartScheduler+0x26>
	__asm volatile
200039a0:	f04f 0350 	mov.w	r3, #80	; 0x50
200039a4:	f383 8811 	msr	BASEPRI, r3
200039a8:	f3bf 8f6f 	isb	sy
200039ac:	f3bf 8f4f 	dsb	sy
200039b0:	613b      	str	r3, [r7, #16]
}
200039b2:	bf00      	nop
200039b4:	e7fe      	b.n	200039b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
200039b6:	4b3e      	ldr	r3, [pc, #248]	; (20003ab0 <xPortStartScheduler+0x120>)
200039b8:	681b      	ldr	r3, [r3, #0]
200039ba:	4a3f      	ldr	r2, [pc, #252]	; (20003ab8 <xPortStartScheduler+0x128>)
200039bc:	4293      	cmp	r3, r2
200039be:	d10a      	bne.n	200039d6 <xPortStartScheduler+0x46>
	__asm volatile
200039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
200039c4:	f383 8811 	msr	BASEPRI, r3
200039c8:	f3bf 8f6f 	isb	sy
200039cc:	f3bf 8f4f 	dsb	sy
200039d0:	60fb      	str	r3, [r7, #12]
}
200039d2:	bf00      	nop
200039d4:	e7fe      	b.n	200039d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
200039d6:	4b39      	ldr	r3, [pc, #228]	; (20003abc <xPortStartScheduler+0x12c>)
200039d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
200039da:	697b      	ldr	r3, [r7, #20]
200039dc:	781b      	ldrb	r3, [r3, #0]
200039de:	b2db      	uxtb	r3, r3
200039e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
200039e2:	697b      	ldr	r3, [r7, #20]
200039e4:	22ff      	movs	r2, #255	; 0xff
200039e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
200039e8:	697b      	ldr	r3, [r7, #20]
200039ea:	781b      	ldrb	r3, [r3, #0]
200039ec:	b2db      	uxtb	r3, r3
200039ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
200039f0:	78fb      	ldrb	r3, [r7, #3]
200039f2:	b2db      	uxtb	r3, r3
200039f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
200039f8:	b2da      	uxtb	r2, r3
200039fa:	4b31      	ldr	r3, [pc, #196]	; (20003ac0 <xPortStartScheduler+0x130>)
200039fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
200039fe:	4b31      	ldr	r3, [pc, #196]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a00:	2207      	movs	r2, #7
20003a02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003a04:	e009      	b.n	20003a1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
20003a06:	4b2f      	ldr	r3, [pc, #188]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a08:	681b      	ldr	r3, [r3, #0]
20003a0a:	3b01      	subs	r3, #1
20003a0c:	4a2d      	ldr	r2, [pc, #180]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20003a10:	78fb      	ldrb	r3, [r7, #3]
20003a12:	b2db      	uxtb	r3, r3
20003a14:	005b      	lsls	r3, r3, #1
20003a16:	b2db      	uxtb	r3, r3
20003a18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003a1a:	78fb      	ldrb	r3, [r7, #3]
20003a1c:	b2db      	uxtb	r3, r3
20003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003a22:	2b80      	cmp	r3, #128	; 0x80
20003a24:	d0ef      	beq.n	20003a06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
20003a26:	4b27      	ldr	r3, [pc, #156]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a28:	681b      	ldr	r3, [r3, #0]
20003a2a:	f1c3 0307 	rsb	r3, r3, #7
20003a2e:	2b04      	cmp	r3, #4
20003a30:	d00a      	beq.n	20003a48 <xPortStartScheduler+0xb8>
	__asm volatile
20003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
20003a36:	f383 8811 	msr	BASEPRI, r3
20003a3a:	f3bf 8f6f 	isb	sy
20003a3e:	f3bf 8f4f 	dsb	sy
20003a42:	60bb      	str	r3, [r7, #8]
}
20003a44:	bf00      	nop
20003a46:	e7fe      	b.n	20003a46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
20003a48:	4b1e      	ldr	r3, [pc, #120]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a4a:	681b      	ldr	r3, [r3, #0]
20003a4c:	021b      	lsls	r3, r3, #8
20003a4e:	4a1d      	ldr	r2, [pc, #116]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20003a52:	4b1c      	ldr	r3, [pc, #112]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a54:	681b      	ldr	r3, [r3, #0]
20003a56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
20003a5a:	4a1a      	ldr	r2, [pc, #104]	; (20003ac4 <xPortStartScheduler+0x134>)
20003a5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
20003a5e:	687b      	ldr	r3, [r7, #4]
20003a60:	b2da      	uxtb	r2, r3
20003a62:	697b      	ldr	r3, [r7, #20]
20003a64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20003a66:	4b18      	ldr	r3, [pc, #96]	; (20003ac8 <xPortStartScheduler+0x138>)
20003a68:	681b      	ldr	r3, [r3, #0]
20003a6a:	4a17      	ldr	r2, [pc, #92]	; (20003ac8 <xPortStartScheduler+0x138>)
20003a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20003a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
20003a72:	4b15      	ldr	r3, [pc, #84]	; (20003ac8 <xPortStartScheduler+0x138>)
20003a74:	681b      	ldr	r3, [r3, #0]
20003a76:	4a14      	ldr	r2, [pc, #80]	; (20003ac8 <xPortStartScheduler+0x138>)
20003a78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
20003a7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20003a7e:	f000 f8dd 	bl	20003c3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20003a82:	4b12      	ldr	r3, [pc, #72]	; (20003acc <xPortStartScheduler+0x13c>)
20003a84:	2200      	movs	r2, #0
20003a86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
20003a88:	f000 f8fc 	bl	20003c84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
20003a8c:	4b10      	ldr	r3, [pc, #64]	; (20003ad0 <xPortStartScheduler+0x140>)
20003a8e:	681b      	ldr	r3, [r3, #0]
20003a90:	4a0f      	ldr	r2, [pc, #60]	; (20003ad0 <xPortStartScheduler+0x140>)
20003a92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
20003a96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003a98:	f7ff ff66 	bl	20003968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
20003a9c:	f7ff f84c 	bl	20002b38 <vTaskSwitchContext>
	prvTaskExitError();
20003aa0:	f7ff ff22 	bl	200038e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
20003aa4:	2300      	movs	r3, #0
}
20003aa6:	4618      	mov	r0, r3
20003aa8:	3718      	adds	r7, #24
20003aaa:	46bd      	mov	sp, r7
20003aac:	bd80      	pop	{r7, pc}
20003aae:	bf00      	nop
20003ab0:	e000ed00 	.word	0xe000ed00
20003ab4:	410fc271 	.word	0x410fc271
20003ab8:	410fc270 	.word	0x410fc270
20003abc:	e000e400 	.word	0xe000e400
20003ac0:	2000b76c 	.word	0x2000b76c
20003ac4:	2000b770 	.word	0x2000b770
20003ac8:	e000ed20 	.word	0xe000ed20
20003acc:	2000a8c0 	.word	0x2000a8c0
20003ad0:	e000ef34 	.word	0xe000ef34

20003ad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
20003ad4:	b480      	push	{r7}
20003ad6:	b083      	sub	sp, #12
20003ad8:	af00      	add	r7, sp, #0
	__asm volatile
20003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
20003ade:	f383 8811 	msr	BASEPRI, r3
20003ae2:	f3bf 8f6f 	isb	sy
20003ae6:	f3bf 8f4f 	dsb	sy
20003aea:	607b      	str	r3, [r7, #4]
}
20003aec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20003aee:	4b0f      	ldr	r3, [pc, #60]	; (20003b2c <vPortEnterCritical+0x58>)
20003af0:	681b      	ldr	r3, [r3, #0]
20003af2:	3301      	adds	r3, #1
20003af4:	4a0d      	ldr	r2, [pc, #52]	; (20003b2c <vPortEnterCritical+0x58>)
20003af6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
20003af8:	4b0c      	ldr	r3, [pc, #48]	; (20003b2c <vPortEnterCritical+0x58>)
20003afa:	681b      	ldr	r3, [r3, #0]
20003afc:	2b01      	cmp	r3, #1
20003afe:	d10f      	bne.n	20003b20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003b00:	4b0b      	ldr	r3, [pc, #44]	; (20003b30 <vPortEnterCritical+0x5c>)
20003b02:	681b      	ldr	r3, [r3, #0]
20003b04:	b2db      	uxtb	r3, r3
20003b06:	2b00      	cmp	r3, #0
20003b08:	d00a      	beq.n	20003b20 <vPortEnterCritical+0x4c>
	__asm volatile
20003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
20003b0e:	f383 8811 	msr	BASEPRI, r3
20003b12:	f3bf 8f6f 	isb	sy
20003b16:	f3bf 8f4f 	dsb	sy
20003b1a:	603b      	str	r3, [r7, #0]
}
20003b1c:	bf00      	nop
20003b1e:	e7fe      	b.n	20003b1e <vPortEnterCritical+0x4a>
	}
}
20003b20:	bf00      	nop
20003b22:	370c      	adds	r7, #12
20003b24:	46bd      	mov	sp, r7
20003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
20003b2a:	4770      	bx	lr
20003b2c:	2000a8c0 	.word	0x2000a8c0
20003b30:	e000ed04 	.word	0xe000ed04

20003b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
20003b34:	b480      	push	{r7}
20003b36:	b083      	sub	sp, #12
20003b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20003b3a:	4b12      	ldr	r3, [pc, #72]	; (20003b84 <vPortExitCritical+0x50>)
20003b3c:	681b      	ldr	r3, [r3, #0]
20003b3e:	2b00      	cmp	r3, #0
20003b40:	d10a      	bne.n	20003b58 <vPortExitCritical+0x24>
	__asm volatile
20003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
20003b46:	f383 8811 	msr	BASEPRI, r3
20003b4a:	f3bf 8f6f 	isb	sy
20003b4e:	f3bf 8f4f 	dsb	sy
20003b52:	607b      	str	r3, [r7, #4]
}
20003b54:	bf00      	nop
20003b56:	e7fe      	b.n	20003b56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
20003b58:	4b0a      	ldr	r3, [pc, #40]	; (20003b84 <vPortExitCritical+0x50>)
20003b5a:	681b      	ldr	r3, [r3, #0]
20003b5c:	3b01      	subs	r3, #1
20003b5e:	4a09      	ldr	r2, [pc, #36]	; (20003b84 <vPortExitCritical+0x50>)
20003b60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
20003b62:	4b08      	ldr	r3, [pc, #32]	; (20003b84 <vPortExitCritical+0x50>)
20003b64:	681b      	ldr	r3, [r3, #0]
20003b66:	2b00      	cmp	r3, #0
20003b68:	d105      	bne.n	20003b76 <vPortExitCritical+0x42>
20003b6a:	2300      	movs	r3, #0
20003b6c:	603b      	str	r3, [r7, #0]
	__asm volatile
20003b6e:	683b      	ldr	r3, [r7, #0]
20003b70:	f383 8811 	msr	BASEPRI, r3
}
20003b74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
20003b76:	bf00      	nop
20003b78:	370c      	adds	r7, #12
20003b7a:	46bd      	mov	sp, r7
20003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003b80:	4770      	bx	lr
20003b82:	bf00      	nop
20003b84:	2000a8c0 	.word	0x2000a8c0
	...

20003b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003b90:	f3ef 8009 	mrs	r0, PSP
20003b94:	f3bf 8f6f 	isb	sy
20003b98:	4b15      	ldr	r3, [pc, #84]	; (20003bf0 <pxCurrentTCBConst>)
20003b9a:	681a      	ldr	r2, [r3, #0]
20003b9c:	f01e 0f10 	tst.w	lr, #16
20003ba0:	bf08      	it	eq
20003ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
20003ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003baa:	6010      	str	r0, [r2, #0]
20003bac:	e92d 0009 	stmdb	sp!, {r0, r3}
20003bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
20003bb4:	f380 8811 	msr	BASEPRI, r0
20003bb8:	f3bf 8f4f 	dsb	sy
20003bbc:	f3bf 8f6f 	isb	sy
20003bc0:	f7fe ffba 	bl	20002b38 <vTaskSwitchContext>
20003bc4:	f04f 0000 	mov.w	r0, #0
20003bc8:	f380 8811 	msr	BASEPRI, r0
20003bcc:	bc09      	pop	{r0, r3}
20003bce:	6819      	ldr	r1, [r3, #0]
20003bd0:	6808      	ldr	r0, [r1, #0]
20003bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003bd6:	f01e 0f10 	tst.w	lr, #16
20003bda:	bf08      	it	eq
20003bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
20003be0:	f380 8809 	msr	PSP, r0
20003be4:	f3bf 8f6f 	isb	sy
20003be8:	4770      	bx	lr
20003bea:	bf00      	nop
20003bec:	f3af 8000 	nop.w

20003bf0 <pxCurrentTCBConst>:
20003bf0:	2000b140 	.word	0x2000b140
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
20003bf4:	bf00      	nop
20003bf6:	bf00      	nop

20003bf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20003bf8:	b580      	push	{r7, lr}
20003bfa:	b082      	sub	sp, #8
20003bfc:	af00      	add	r7, sp, #0
	__asm volatile
20003bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
20003c02:	f383 8811 	msr	BASEPRI, r3
20003c06:	f3bf 8f6f 	isb	sy
20003c0a:	f3bf 8f4f 	dsb	sy
20003c0e:	607b      	str	r3, [r7, #4]
}
20003c10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20003c12:	f7fe fed7 	bl	200029c4 <xTaskIncrementTick>
20003c16:	4603      	mov	r3, r0
20003c18:	2b00      	cmp	r3, #0
20003c1a:	d003      	beq.n	20003c24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20003c1c:	4b06      	ldr	r3, [pc, #24]	; (20003c38 <xPortSysTickHandler+0x40>)
20003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003c22:	601a      	str	r2, [r3, #0]
20003c24:	2300      	movs	r3, #0
20003c26:	603b      	str	r3, [r7, #0]
	__asm volatile
20003c28:	683b      	ldr	r3, [r7, #0]
20003c2a:	f383 8811 	msr	BASEPRI, r3
}
20003c2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
20003c30:	bf00      	nop
20003c32:	3708      	adds	r7, #8
20003c34:	46bd      	mov	sp, r7
20003c36:	bd80      	pop	{r7, pc}
20003c38:	e000ed04 	.word	0xe000ed04

20003c3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20003c3c:	b480      	push	{r7}
20003c3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
20003c40:	4b0b      	ldr	r3, [pc, #44]	; (20003c70 <vPortSetupTimerInterrupt+0x34>)
20003c42:	2200      	movs	r2, #0
20003c44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
20003c46:	4b0b      	ldr	r3, [pc, #44]	; (20003c74 <vPortSetupTimerInterrupt+0x38>)
20003c48:	2200      	movs	r2, #0
20003c4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20003c4c:	4b0a      	ldr	r3, [pc, #40]	; (20003c78 <vPortSetupTimerInterrupt+0x3c>)
20003c4e:	681b      	ldr	r3, [r3, #0]
20003c50:	4a0a      	ldr	r2, [pc, #40]	; (20003c7c <vPortSetupTimerInterrupt+0x40>)
20003c52:	fba2 2303 	umull	r2, r3, r2, r3
20003c56:	099b      	lsrs	r3, r3, #6
20003c58:	4a09      	ldr	r2, [pc, #36]	; (20003c80 <vPortSetupTimerInterrupt+0x44>)
20003c5a:	3b01      	subs	r3, #1
20003c5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20003c5e:	4b04      	ldr	r3, [pc, #16]	; (20003c70 <vPortSetupTimerInterrupt+0x34>)
20003c60:	2207      	movs	r2, #7
20003c62:	601a      	str	r2, [r3, #0]
}
20003c64:	bf00      	nop
20003c66:	46bd      	mov	sp, r7
20003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c6c:	4770      	bx	lr
20003c6e:	bf00      	nop
20003c70:	e000e010 	.word	0xe000e010
20003c74:	e000e018 	.word	0xe000e018
20003c78:	2000a8fc 	.word	0x2000a8fc
20003c7c:	10624dd3 	.word	0x10624dd3
20003c80:	e000e014 	.word	0xe000e014

20003c84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
20003c84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 20003c94 <vPortEnableVFP+0x10>
20003c88:	6801      	ldr	r1, [r0, #0]
20003c8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003c8e:	6001      	str	r1, [r0, #0]
20003c90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
20003c92:	bf00      	nop
20003c94:	e000ed88 	.word	0xe000ed88

20003c98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20003c98:	b480      	push	{r7}
20003c9a:	b085      	sub	sp, #20
20003c9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
20003c9e:	f3ef 8305 	mrs	r3, IPSR
20003ca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20003ca4:	68fb      	ldr	r3, [r7, #12]
20003ca6:	2b0f      	cmp	r3, #15
20003ca8:	d914      	bls.n	20003cd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
20003caa:	4a17      	ldr	r2, [pc, #92]	; (20003d08 <vPortValidateInterruptPriority+0x70>)
20003cac:	68fb      	ldr	r3, [r7, #12]
20003cae:	4413      	add	r3, r2
20003cb0:	781b      	ldrb	r3, [r3, #0]
20003cb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20003cb4:	4b15      	ldr	r3, [pc, #84]	; (20003d0c <vPortValidateInterruptPriority+0x74>)
20003cb6:	781b      	ldrb	r3, [r3, #0]
20003cb8:	7afa      	ldrb	r2, [r7, #11]
20003cba:	429a      	cmp	r2, r3
20003cbc:	d20a      	bcs.n	20003cd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
20003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
20003cc2:	f383 8811 	msr	BASEPRI, r3
20003cc6:	f3bf 8f6f 	isb	sy
20003cca:	f3bf 8f4f 	dsb	sy
20003cce:	607b      	str	r3, [r7, #4]
}
20003cd0:	bf00      	nop
20003cd2:	e7fe      	b.n	20003cd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
20003cd4:	4b0e      	ldr	r3, [pc, #56]	; (20003d10 <vPortValidateInterruptPriority+0x78>)
20003cd6:	681b      	ldr	r3, [r3, #0]
20003cd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20003cdc:	4b0d      	ldr	r3, [pc, #52]	; (20003d14 <vPortValidateInterruptPriority+0x7c>)
20003cde:	681b      	ldr	r3, [r3, #0]
20003ce0:	429a      	cmp	r2, r3
20003ce2:	d90a      	bls.n	20003cfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
20003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
20003ce8:	f383 8811 	msr	BASEPRI, r3
20003cec:	f3bf 8f6f 	isb	sy
20003cf0:	f3bf 8f4f 	dsb	sy
20003cf4:	603b      	str	r3, [r7, #0]
}
20003cf6:	bf00      	nop
20003cf8:	e7fe      	b.n	20003cf8 <vPortValidateInterruptPriority+0x60>
	}
20003cfa:	bf00      	nop
20003cfc:	3714      	adds	r7, #20
20003cfe:	46bd      	mov	sp, r7
20003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
20003d04:	4770      	bx	lr
20003d06:	bf00      	nop
20003d08:	e000e3f0 	.word	0xe000e3f0
20003d0c:	2000b76c 	.word	0x2000b76c
20003d10:	e000ed0c 	.word	0xe000ed0c
20003d14:	2000b770 	.word	0x2000b770

20003d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003d18:	b580      	push	{r7, lr}
20003d1a:	b08a      	sub	sp, #40	; 0x28
20003d1c:	af00      	add	r7, sp, #0
20003d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003d20:	2300      	movs	r3, #0
20003d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
20003d24:	f7fe fd92 	bl	2000284c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003d28:	4b5b      	ldr	r3, [pc, #364]	; (20003e98 <pvPortMalloc+0x180>)
20003d2a:	681b      	ldr	r3, [r3, #0]
20003d2c:	2b00      	cmp	r3, #0
20003d2e:	d101      	bne.n	20003d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
20003d30:	f000 f920 	bl	20003f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003d34:	4b59      	ldr	r3, [pc, #356]	; (20003e9c <pvPortMalloc+0x184>)
20003d36:	681a      	ldr	r2, [r3, #0]
20003d38:	687b      	ldr	r3, [r7, #4]
20003d3a:	4013      	ands	r3, r2
20003d3c:	2b00      	cmp	r3, #0
20003d3e:	f040 8093 	bne.w	20003e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003d42:	687b      	ldr	r3, [r7, #4]
20003d44:	2b00      	cmp	r3, #0
20003d46:	d01d      	beq.n	20003d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
20003d48:	2208      	movs	r2, #8
20003d4a:	687b      	ldr	r3, [r7, #4]
20003d4c:	4413      	add	r3, r2
20003d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003d50:	687b      	ldr	r3, [r7, #4]
20003d52:	f003 0307 	and.w	r3, r3, #7
20003d56:	2b00      	cmp	r3, #0
20003d58:	d014      	beq.n	20003d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003d5a:	687b      	ldr	r3, [r7, #4]
20003d5c:	f023 0307 	bic.w	r3, r3, #7
20003d60:	3308      	adds	r3, #8
20003d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003d64:	687b      	ldr	r3, [r7, #4]
20003d66:	f003 0307 	and.w	r3, r3, #7
20003d6a:	2b00      	cmp	r3, #0
20003d6c:	d00a      	beq.n	20003d84 <pvPortMalloc+0x6c>
	__asm volatile
20003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003d72:	f383 8811 	msr	BASEPRI, r3
20003d76:	f3bf 8f6f 	isb	sy
20003d7a:	f3bf 8f4f 	dsb	sy
20003d7e:	617b      	str	r3, [r7, #20]
}
20003d80:	bf00      	nop
20003d82:	e7fe      	b.n	20003d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003d84:	687b      	ldr	r3, [r7, #4]
20003d86:	2b00      	cmp	r3, #0
20003d88:	d06e      	beq.n	20003e68 <pvPortMalloc+0x150>
20003d8a:	4b45      	ldr	r3, [pc, #276]	; (20003ea0 <pvPortMalloc+0x188>)
20003d8c:	681b      	ldr	r3, [r3, #0]
20003d8e:	687a      	ldr	r2, [r7, #4]
20003d90:	429a      	cmp	r2, r3
20003d92:	d869      	bhi.n	20003e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003d94:	4b43      	ldr	r3, [pc, #268]	; (20003ea4 <pvPortMalloc+0x18c>)
20003d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
20003d98:	4b42      	ldr	r3, [pc, #264]	; (20003ea4 <pvPortMalloc+0x18c>)
20003d9a:	681b      	ldr	r3, [r3, #0]
20003d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003d9e:	e004      	b.n	20003daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
20003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
20003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003da6:	681b      	ldr	r3, [r3, #0]
20003da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003dac:	685b      	ldr	r3, [r3, #4]
20003dae:	687a      	ldr	r2, [r7, #4]
20003db0:	429a      	cmp	r2, r3
20003db2:	d903      	bls.n	20003dbc <pvPortMalloc+0xa4>
20003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003db6:	681b      	ldr	r3, [r3, #0]
20003db8:	2b00      	cmp	r3, #0
20003dba:	d1f1      	bne.n	20003da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20003dbc:	4b36      	ldr	r3, [pc, #216]	; (20003e98 <pvPortMalloc+0x180>)
20003dbe:	681b      	ldr	r3, [r3, #0]
20003dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003dc2:	429a      	cmp	r2, r3
20003dc4:	d050      	beq.n	20003e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003dc6:	6a3b      	ldr	r3, [r7, #32]
20003dc8:	681b      	ldr	r3, [r3, #0]
20003dca:	2208      	movs	r2, #8
20003dcc:	4413      	add	r3, r2
20003dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003dd2:	681a      	ldr	r2, [r3, #0]
20003dd4:	6a3b      	ldr	r3, [r7, #32]
20003dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003dda:	685a      	ldr	r2, [r3, #4]
20003ddc:	687b      	ldr	r3, [r7, #4]
20003dde:	1ad2      	subs	r2, r2, r3
20003de0:	2308      	movs	r3, #8
20003de2:	005b      	lsls	r3, r3, #1
20003de4:	429a      	cmp	r2, r3
20003de6:	d91f      	bls.n	20003e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003dea:	687b      	ldr	r3, [r7, #4]
20003dec:	4413      	add	r3, r2
20003dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003df0:	69bb      	ldr	r3, [r7, #24]
20003df2:	f003 0307 	and.w	r3, r3, #7
20003df6:	2b00      	cmp	r3, #0
20003df8:	d00a      	beq.n	20003e10 <pvPortMalloc+0xf8>
	__asm volatile
20003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
20003dfe:	f383 8811 	msr	BASEPRI, r3
20003e02:	f3bf 8f6f 	isb	sy
20003e06:	f3bf 8f4f 	dsb	sy
20003e0a:	613b      	str	r3, [r7, #16]
}
20003e0c:	bf00      	nop
20003e0e:	e7fe      	b.n	20003e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e12:	685a      	ldr	r2, [r3, #4]
20003e14:	687b      	ldr	r3, [r7, #4]
20003e16:	1ad2      	subs	r2, r2, r3
20003e18:	69bb      	ldr	r3, [r7, #24]
20003e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
20003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e1e:	687a      	ldr	r2, [r7, #4]
20003e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003e22:	69b8      	ldr	r0, [r7, #24]
20003e24:	f000 f908 	bl	20004038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003e28:	4b1d      	ldr	r3, [pc, #116]	; (20003ea0 <pvPortMalloc+0x188>)
20003e2a:	681a      	ldr	r2, [r3, #0]
20003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e2e:	685b      	ldr	r3, [r3, #4]
20003e30:	1ad3      	subs	r3, r2, r3
20003e32:	4a1b      	ldr	r2, [pc, #108]	; (20003ea0 <pvPortMalloc+0x188>)
20003e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20003e36:	4b1a      	ldr	r3, [pc, #104]	; (20003ea0 <pvPortMalloc+0x188>)
20003e38:	681a      	ldr	r2, [r3, #0]
20003e3a:	4b1b      	ldr	r3, [pc, #108]	; (20003ea8 <pvPortMalloc+0x190>)
20003e3c:	681b      	ldr	r3, [r3, #0]
20003e3e:	429a      	cmp	r2, r3
20003e40:	d203      	bcs.n	20003e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20003e42:	4b17      	ldr	r3, [pc, #92]	; (20003ea0 <pvPortMalloc+0x188>)
20003e44:	681b      	ldr	r3, [r3, #0]
20003e46:	4a18      	ldr	r2, [pc, #96]	; (20003ea8 <pvPortMalloc+0x190>)
20003e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e4c:	685a      	ldr	r2, [r3, #4]
20003e4e:	4b13      	ldr	r3, [pc, #76]	; (20003e9c <pvPortMalloc+0x184>)
20003e50:	681b      	ldr	r3, [r3, #0]
20003e52:	431a      	orrs	r2, r3
20003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e5a:	2200      	movs	r2, #0
20003e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
20003e5e:	4b13      	ldr	r3, [pc, #76]	; (20003eac <pvPortMalloc+0x194>)
20003e60:	681b      	ldr	r3, [r3, #0]
20003e62:	3301      	adds	r3, #1
20003e64:	4a11      	ldr	r2, [pc, #68]	; (20003eac <pvPortMalloc+0x194>)
20003e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20003e68:	f7fe fcfe 	bl	20002868 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20003e6c:	69fb      	ldr	r3, [r7, #28]
20003e6e:	f003 0307 	and.w	r3, r3, #7
20003e72:	2b00      	cmp	r3, #0
20003e74:	d00a      	beq.n	20003e8c <pvPortMalloc+0x174>
	__asm volatile
20003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
20003e7a:	f383 8811 	msr	BASEPRI, r3
20003e7e:	f3bf 8f6f 	isb	sy
20003e82:	f3bf 8f4f 	dsb	sy
20003e86:	60fb      	str	r3, [r7, #12]
}
20003e88:	bf00      	nop
20003e8a:	e7fe      	b.n	20003e8a <pvPortMalloc+0x172>
	return pvReturn;
20003e8c:	69fb      	ldr	r3, [r7, #28]
}
20003e8e:	4618      	mov	r0, r3
20003e90:	3728      	adds	r7, #40	; 0x28
20003e92:	46bd      	mov	sp, r7
20003e94:	bd80      	pop	{r7, pc}
20003e96:	bf00      	nop
20003e98:	2000f37c 	.word	0x2000f37c
20003e9c:	2000f390 	.word	0x2000f390
20003ea0:	2000f380 	.word	0x2000f380
20003ea4:	2000f374 	.word	0x2000f374
20003ea8:	2000f384 	.word	0x2000f384
20003eac:	2000f388 	.word	0x2000f388

20003eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003eb0:	b580      	push	{r7, lr}
20003eb2:	b086      	sub	sp, #24
20003eb4:	af00      	add	r7, sp, #0
20003eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20003eb8:	687b      	ldr	r3, [r7, #4]
20003eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
20003ebc:	687b      	ldr	r3, [r7, #4]
20003ebe:	2b00      	cmp	r3, #0
20003ec0:	d04d      	beq.n	20003f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003ec2:	2308      	movs	r3, #8
20003ec4:	425b      	negs	r3, r3
20003ec6:	697a      	ldr	r2, [r7, #20]
20003ec8:	4413      	add	r3, r2
20003eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
20003ecc:	697b      	ldr	r3, [r7, #20]
20003ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20003ed0:	693b      	ldr	r3, [r7, #16]
20003ed2:	685a      	ldr	r2, [r3, #4]
20003ed4:	4b24      	ldr	r3, [pc, #144]	; (20003f68 <vPortFree+0xb8>)
20003ed6:	681b      	ldr	r3, [r3, #0]
20003ed8:	4013      	ands	r3, r2
20003eda:	2b00      	cmp	r3, #0
20003edc:	d10a      	bne.n	20003ef4 <vPortFree+0x44>
	__asm volatile
20003ede:	f04f 0350 	mov.w	r3, #80	; 0x50
20003ee2:	f383 8811 	msr	BASEPRI, r3
20003ee6:	f3bf 8f6f 	isb	sy
20003eea:	f3bf 8f4f 	dsb	sy
20003eee:	60fb      	str	r3, [r7, #12]
}
20003ef0:	bf00      	nop
20003ef2:	e7fe      	b.n	20003ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20003ef4:	693b      	ldr	r3, [r7, #16]
20003ef6:	681b      	ldr	r3, [r3, #0]
20003ef8:	2b00      	cmp	r3, #0
20003efa:	d00a      	beq.n	20003f12 <vPortFree+0x62>
	__asm volatile
20003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
20003f00:	f383 8811 	msr	BASEPRI, r3
20003f04:	f3bf 8f6f 	isb	sy
20003f08:	f3bf 8f4f 	dsb	sy
20003f0c:	60bb      	str	r3, [r7, #8]
}
20003f0e:	bf00      	nop
20003f10:	e7fe      	b.n	20003f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003f12:	693b      	ldr	r3, [r7, #16]
20003f14:	685a      	ldr	r2, [r3, #4]
20003f16:	4b14      	ldr	r3, [pc, #80]	; (20003f68 <vPortFree+0xb8>)
20003f18:	681b      	ldr	r3, [r3, #0]
20003f1a:	4013      	ands	r3, r2
20003f1c:	2b00      	cmp	r3, #0
20003f1e:	d01e      	beq.n	20003f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003f20:	693b      	ldr	r3, [r7, #16]
20003f22:	681b      	ldr	r3, [r3, #0]
20003f24:	2b00      	cmp	r3, #0
20003f26:	d11a      	bne.n	20003f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003f28:	693b      	ldr	r3, [r7, #16]
20003f2a:	685a      	ldr	r2, [r3, #4]
20003f2c:	4b0e      	ldr	r3, [pc, #56]	; (20003f68 <vPortFree+0xb8>)
20003f2e:	681b      	ldr	r3, [r3, #0]
20003f30:	43db      	mvns	r3, r3
20003f32:	401a      	ands	r2, r3
20003f34:	693b      	ldr	r3, [r7, #16]
20003f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003f38:	f7fe fc88 	bl	2000284c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003f3c:	693b      	ldr	r3, [r7, #16]
20003f3e:	685a      	ldr	r2, [r3, #4]
20003f40:	4b0a      	ldr	r3, [pc, #40]	; (20003f6c <vPortFree+0xbc>)
20003f42:	681b      	ldr	r3, [r3, #0]
20003f44:	4413      	add	r3, r2
20003f46:	4a09      	ldr	r2, [pc, #36]	; (20003f6c <vPortFree+0xbc>)
20003f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20003f4a:	6938      	ldr	r0, [r7, #16]
20003f4c:	f000 f874 	bl	20004038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
20003f50:	4b07      	ldr	r3, [pc, #28]	; (20003f70 <vPortFree+0xc0>)
20003f52:	681b      	ldr	r3, [r3, #0]
20003f54:	3301      	adds	r3, #1
20003f56:	4a06      	ldr	r2, [pc, #24]	; (20003f70 <vPortFree+0xc0>)
20003f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
20003f5a:	f7fe fc85 	bl	20002868 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003f5e:	bf00      	nop
20003f60:	3718      	adds	r7, #24
20003f62:	46bd      	mov	sp, r7
20003f64:	bd80      	pop	{r7, pc}
20003f66:	bf00      	nop
20003f68:	2000f390 	.word	0x2000f390
20003f6c:	2000f380 	.word	0x2000f380
20003f70:	2000f38c 	.word	0x2000f38c

20003f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003f74:	b480      	push	{r7}
20003f76:	b085      	sub	sp, #20
20003f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
20003f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003f80:	4b27      	ldr	r3, [pc, #156]	; (20004020 <prvHeapInit+0xac>)
20003f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003f84:	68fb      	ldr	r3, [r7, #12]
20003f86:	f003 0307 	and.w	r3, r3, #7
20003f8a:	2b00      	cmp	r3, #0
20003f8c:	d00c      	beq.n	20003fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20003f8e:	68fb      	ldr	r3, [r7, #12]
20003f90:	3307      	adds	r3, #7
20003f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003f94:	68fb      	ldr	r3, [r7, #12]
20003f96:	f023 0307 	bic.w	r3, r3, #7
20003f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20003f9c:	68ba      	ldr	r2, [r7, #8]
20003f9e:	68fb      	ldr	r3, [r7, #12]
20003fa0:	1ad3      	subs	r3, r2, r3
20003fa2:	4a1f      	ldr	r2, [pc, #124]	; (20004020 <prvHeapInit+0xac>)
20003fa4:	4413      	add	r3, r2
20003fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20003fa8:	68fb      	ldr	r3, [r7, #12]
20003faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20003fac:	4a1d      	ldr	r2, [pc, #116]	; (20004024 <prvHeapInit+0xb0>)
20003fae:	687b      	ldr	r3, [r7, #4]
20003fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
20003fb2:	4b1c      	ldr	r3, [pc, #112]	; (20004024 <prvHeapInit+0xb0>)
20003fb4:	2200      	movs	r2, #0
20003fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20003fb8:	687b      	ldr	r3, [r7, #4]
20003fba:	68ba      	ldr	r2, [r7, #8]
20003fbc:	4413      	add	r3, r2
20003fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
20003fc0:	2208      	movs	r2, #8
20003fc2:	68fb      	ldr	r3, [r7, #12]
20003fc4:	1a9b      	subs	r3, r3, r2
20003fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003fc8:	68fb      	ldr	r3, [r7, #12]
20003fca:	f023 0307 	bic.w	r3, r3, #7
20003fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
20003fd0:	68fb      	ldr	r3, [r7, #12]
20003fd2:	4a15      	ldr	r2, [pc, #84]	; (20004028 <prvHeapInit+0xb4>)
20003fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
20003fd6:	4b14      	ldr	r3, [pc, #80]	; (20004028 <prvHeapInit+0xb4>)
20003fd8:	681b      	ldr	r3, [r3, #0]
20003fda:	2200      	movs	r2, #0
20003fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
20003fde:	4b12      	ldr	r3, [pc, #72]	; (20004028 <prvHeapInit+0xb4>)
20003fe0:	681b      	ldr	r3, [r3, #0]
20003fe2:	2200      	movs	r2, #0
20003fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20003fe6:	687b      	ldr	r3, [r7, #4]
20003fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20003fea:	683b      	ldr	r3, [r7, #0]
20003fec:	68fa      	ldr	r2, [r7, #12]
20003fee:	1ad2      	subs	r2, r2, r3
20003ff0:	683b      	ldr	r3, [r7, #0]
20003ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20003ff4:	4b0c      	ldr	r3, [pc, #48]	; (20004028 <prvHeapInit+0xb4>)
20003ff6:	681a      	ldr	r2, [r3, #0]
20003ff8:	683b      	ldr	r3, [r7, #0]
20003ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003ffc:	683b      	ldr	r3, [r7, #0]
20003ffe:	685b      	ldr	r3, [r3, #4]
20004000:	4a0a      	ldr	r2, [pc, #40]	; (2000402c <prvHeapInit+0xb8>)
20004002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20004004:	683b      	ldr	r3, [r7, #0]
20004006:	685b      	ldr	r3, [r3, #4]
20004008:	4a09      	ldr	r2, [pc, #36]	; (20004030 <prvHeapInit+0xbc>)
2000400a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
2000400c:	4b09      	ldr	r3, [pc, #36]	; (20004034 <prvHeapInit+0xc0>)
2000400e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20004012:	601a      	str	r2, [r3, #0]
}
20004014:	bf00      	nop
20004016:	3714      	adds	r7, #20
20004018:	46bd      	mov	sp, r7
2000401a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000401e:	4770      	bx	lr
20004020:	2000b774 	.word	0x2000b774
20004024:	2000f374 	.word	0x2000f374
20004028:	2000f37c 	.word	0x2000f37c
2000402c:	2000f384 	.word	0x2000f384
20004030:	2000f380 	.word	0x2000f380
20004034:	2000f390 	.word	0x2000f390

20004038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20004038:	b480      	push	{r7}
2000403a:	b085      	sub	sp, #20
2000403c:	af00      	add	r7, sp, #0
2000403e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20004040:	4b28      	ldr	r3, [pc, #160]	; (200040e4 <prvInsertBlockIntoFreeList+0xac>)
20004042:	60fb      	str	r3, [r7, #12]
20004044:	e002      	b.n	2000404c <prvInsertBlockIntoFreeList+0x14>
20004046:	68fb      	ldr	r3, [r7, #12]
20004048:	681b      	ldr	r3, [r3, #0]
2000404a:	60fb      	str	r3, [r7, #12]
2000404c:	68fb      	ldr	r3, [r7, #12]
2000404e:	681b      	ldr	r3, [r3, #0]
20004050:	687a      	ldr	r2, [r7, #4]
20004052:	429a      	cmp	r2, r3
20004054:	d8f7      	bhi.n	20004046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20004056:	68fb      	ldr	r3, [r7, #12]
20004058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
2000405a:	68fb      	ldr	r3, [r7, #12]
2000405c:	685b      	ldr	r3, [r3, #4]
2000405e:	68ba      	ldr	r2, [r7, #8]
20004060:	4413      	add	r3, r2
20004062:	687a      	ldr	r2, [r7, #4]
20004064:	429a      	cmp	r2, r3
20004066:	d108      	bne.n	2000407a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20004068:	68fb      	ldr	r3, [r7, #12]
2000406a:	685a      	ldr	r2, [r3, #4]
2000406c:	687b      	ldr	r3, [r7, #4]
2000406e:	685b      	ldr	r3, [r3, #4]
20004070:	441a      	add	r2, r3
20004072:	68fb      	ldr	r3, [r7, #12]
20004074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20004076:	68fb      	ldr	r3, [r7, #12]
20004078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
2000407a:	687b      	ldr	r3, [r7, #4]
2000407c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
2000407e:	687b      	ldr	r3, [r7, #4]
20004080:	685b      	ldr	r3, [r3, #4]
20004082:	68ba      	ldr	r2, [r7, #8]
20004084:	441a      	add	r2, r3
20004086:	68fb      	ldr	r3, [r7, #12]
20004088:	681b      	ldr	r3, [r3, #0]
2000408a:	429a      	cmp	r2, r3
2000408c:	d118      	bne.n	200040c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
2000408e:	68fb      	ldr	r3, [r7, #12]
20004090:	681a      	ldr	r2, [r3, #0]
20004092:	4b15      	ldr	r3, [pc, #84]	; (200040e8 <prvInsertBlockIntoFreeList+0xb0>)
20004094:	681b      	ldr	r3, [r3, #0]
20004096:	429a      	cmp	r2, r3
20004098:	d00d      	beq.n	200040b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
2000409a:	687b      	ldr	r3, [r7, #4]
2000409c:	685a      	ldr	r2, [r3, #4]
2000409e:	68fb      	ldr	r3, [r7, #12]
200040a0:	681b      	ldr	r3, [r3, #0]
200040a2:	685b      	ldr	r3, [r3, #4]
200040a4:	441a      	add	r2, r3
200040a6:	687b      	ldr	r3, [r7, #4]
200040a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
200040aa:	68fb      	ldr	r3, [r7, #12]
200040ac:	681b      	ldr	r3, [r3, #0]
200040ae:	681a      	ldr	r2, [r3, #0]
200040b0:	687b      	ldr	r3, [r7, #4]
200040b2:	601a      	str	r2, [r3, #0]
200040b4:	e008      	b.n	200040c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
200040b6:	4b0c      	ldr	r3, [pc, #48]	; (200040e8 <prvInsertBlockIntoFreeList+0xb0>)
200040b8:	681a      	ldr	r2, [r3, #0]
200040ba:	687b      	ldr	r3, [r7, #4]
200040bc:	601a      	str	r2, [r3, #0]
200040be:	e003      	b.n	200040c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
200040c0:	68fb      	ldr	r3, [r7, #12]
200040c2:	681a      	ldr	r2, [r3, #0]
200040c4:	687b      	ldr	r3, [r7, #4]
200040c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
200040c8:	68fa      	ldr	r2, [r7, #12]
200040ca:	687b      	ldr	r3, [r7, #4]
200040cc:	429a      	cmp	r2, r3
200040ce:	d002      	beq.n	200040d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
200040d0:	68fb      	ldr	r3, [r7, #12]
200040d2:	687a      	ldr	r2, [r7, #4]
200040d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
200040d6:	bf00      	nop
200040d8:	3714      	adds	r7, #20
200040da:	46bd      	mov	sp, r7
200040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200040e0:	4770      	bx	lr
200040e2:	bf00      	nop
200040e4:	2000f374 	.word	0x2000f374
200040e8:	2000f37c 	.word	0x2000f37c

200040ec <__NVIC_GetPriorityGrouping>:
{
200040ec:	b480      	push	{r7}
200040ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200040f0:	4b04      	ldr	r3, [pc, #16]	; (20004104 <__NVIC_GetPriorityGrouping+0x18>)
200040f2:	68db      	ldr	r3, [r3, #12]
200040f4:	0a1b      	lsrs	r3, r3, #8
200040f6:	f003 0307 	and.w	r3, r3, #7
}
200040fa:	4618      	mov	r0, r3
200040fc:	46bd      	mov	sp, r7
200040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20004102:	4770      	bx	lr
20004104:	e000ed00 	.word	0xe000ed00

20004108 <__NVIC_EnableIRQ>:
{
20004108:	b480      	push	{r7}
2000410a:	b083      	sub	sp, #12
2000410c:	af00      	add	r7, sp, #0
2000410e:	4603      	mov	r3, r0
20004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004116:	2b00      	cmp	r3, #0
20004118:	db0b      	blt.n	20004132 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000411a:	79fb      	ldrb	r3, [r7, #7]
2000411c:	f003 021f 	and.w	r2, r3, #31
20004120:	4907      	ldr	r1, [pc, #28]	; (20004140 <__NVIC_EnableIRQ+0x38>)
20004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004126:	095b      	lsrs	r3, r3, #5
20004128:	2001      	movs	r0, #1
2000412a:	fa00 f202 	lsl.w	r2, r0, r2
2000412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
20004132:	bf00      	nop
20004134:	370c      	adds	r7, #12
20004136:	46bd      	mov	sp, r7
20004138:	f85d 7b04 	ldr.w	r7, [sp], #4
2000413c:	4770      	bx	lr
2000413e:	bf00      	nop
20004140:	e000e100 	.word	0xe000e100

20004144 <__NVIC_SetPriority>:
{
20004144:	b480      	push	{r7}
20004146:	b083      	sub	sp, #12
20004148:	af00      	add	r7, sp, #0
2000414a:	4603      	mov	r3, r0
2000414c:	6039      	str	r1, [r7, #0]
2000414e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004154:	2b00      	cmp	r3, #0
20004156:	db0a      	blt.n	2000416e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004158:	683b      	ldr	r3, [r7, #0]
2000415a:	b2da      	uxtb	r2, r3
2000415c:	490c      	ldr	r1, [pc, #48]	; (20004190 <__NVIC_SetPriority+0x4c>)
2000415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004162:	0112      	lsls	r2, r2, #4
20004164:	b2d2      	uxtb	r2, r2
20004166:	440b      	add	r3, r1
20004168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
2000416c:	e00a      	b.n	20004184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000416e:	683b      	ldr	r3, [r7, #0]
20004170:	b2da      	uxtb	r2, r3
20004172:	4908      	ldr	r1, [pc, #32]	; (20004194 <__NVIC_SetPriority+0x50>)
20004174:	79fb      	ldrb	r3, [r7, #7]
20004176:	f003 030f 	and.w	r3, r3, #15
2000417a:	3b04      	subs	r3, #4
2000417c:	0112      	lsls	r2, r2, #4
2000417e:	b2d2      	uxtb	r2, r2
20004180:	440b      	add	r3, r1
20004182:	761a      	strb	r2, [r3, #24]
}
20004184:	bf00      	nop
20004186:	370c      	adds	r7, #12
20004188:	46bd      	mov	sp, r7
2000418a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000418e:	4770      	bx	lr
20004190:	e000e100 	.word	0xe000e100
20004194:	e000ed00 	.word	0xe000ed00

20004198 <NVIC_EncodePriority>:
{
20004198:	b480      	push	{r7}
2000419a:	b089      	sub	sp, #36	; 0x24
2000419c:	af00      	add	r7, sp, #0
2000419e:	60f8      	str	r0, [r7, #12]
200041a0:	60b9      	str	r1, [r7, #8]
200041a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200041a4:	68fb      	ldr	r3, [r7, #12]
200041a6:	f003 0307 	and.w	r3, r3, #7
200041aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200041ac:	69fb      	ldr	r3, [r7, #28]
200041ae:	f1c3 0307 	rsb	r3, r3, #7
200041b2:	2b04      	cmp	r3, #4
200041b4:	bf28      	it	cs
200041b6:	2304      	movcs	r3, #4
200041b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200041ba:	69fb      	ldr	r3, [r7, #28]
200041bc:	3304      	adds	r3, #4
200041be:	2b06      	cmp	r3, #6
200041c0:	d902      	bls.n	200041c8 <NVIC_EncodePriority+0x30>
200041c2:	69fb      	ldr	r3, [r7, #28]
200041c4:	3b03      	subs	r3, #3
200041c6:	e000      	b.n	200041ca <NVIC_EncodePriority+0x32>
200041c8:	2300      	movs	r3, #0
200041ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200041cc:	f04f 32ff 	mov.w	r2, #4294967295
200041d0:	69bb      	ldr	r3, [r7, #24]
200041d2:	fa02 f303 	lsl.w	r3, r2, r3
200041d6:	43da      	mvns	r2, r3
200041d8:	68bb      	ldr	r3, [r7, #8]
200041da:	401a      	ands	r2, r3
200041dc:	697b      	ldr	r3, [r7, #20]
200041de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200041e0:	f04f 31ff 	mov.w	r1, #4294967295
200041e4:	697b      	ldr	r3, [r7, #20]
200041e6:	fa01 f303 	lsl.w	r3, r1, r3
200041ea:	43d9      	mvns	r1, r3
200041ec:	687b      	ldr	r3, [r7, #4]
200041ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200041f0:	4313      	orrs	r3, r2
}
200041f2:	4618      	mov	r0, r3
200041f4:	3724      	adds	r7, #36	; 0x24
200041f6:	46bd      	mov	sp, r7
200041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200041fc:	4770      	bx	lr
	...

20004200 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
20004200:	b480      	push	{r7}
20004202:	b085      	sub	sp, #20
20004204:	af00      	add	r7, sp, #0
20004206:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
20004208:	4b08      	ldr	r3, [pc, #32]	; (2000422c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000420c:	4907      	ldr	r1, [pc, #28]	; (2000422c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000420e:	687b      	ldr	r3, [r7, #4]
20004210:	4313      	orrs	r3, r2
20004212:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20004214:	4b05      	ldr	r3, [pc, #20]	; (2000422c <LL_AHB1_GRP1_EnableClock+0x2c>)
20004216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20004218:	687b      	ldr	r3, [r7, #4]
2000421a:	4013      	ands	r3, r2
2000421c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000421e:	68fb      	ldr	r3, [r7, #12]
}
20004220:	bf00      	nop
20004222:	3714      	adds	r7, #20
20004224:	46bd      	mov	sp, r7
20004226:	f85d 7b04 	ldr.w	r7, [sp], #4
2000422a:	4770      	bx	lr
2000422c:	40023800 	.word	0x40023800

20004230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
20004230:	b580      	push	{r7, lr}
20004232:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
20004234:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20004238:	f7ff ffe2 	bl	20004200 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
2000423c:	f7ff ff56 	bl	200040ec <__NVIC_GetPriorityGrouping>
20004240:	4603      	mov	r3, r0
20004242:	2200      	movs	r2, #0
20004244:	2105      	movs	r1, #5
20004246:	4618      	mov	r0, r3
20004248:	f7ff ffa6 	bl	20004198 <NVIC_EncodePriority>
2000424c:	4603      	mov	r3, r0
2000424e:	4619      	mov	r1, r3
20004250:	203c      	movs	r0, #60	; 0x3c
20004252:	f7ff ff77 	bl	20004144 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
20004256:	203c      	movs	r0, #60	; 0x3c
20004258:	f7ff ff56 	bl	20004108 <__NVIC_EnableIRQ>

}
2000425c:	bf00      	nop
2000425e:	bd80      	pop	{r7, pc}

20004260 <LL_GPIO_ReadInputPort>:
  * @rmtoll IDR          IDy           LL_GPIO_ReadInputPort
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
20004260:	b480      	push	{r7}
20004262:	b083      	sub	sp, #12
20004264:	af00      	add	r7, sp, #0
20004266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
20004268:	687b      	ldr	r3, [r7, #4]
2000426a:	691b      	ldr	r3, [r3, #16]
}
2000426c:	4618      	mov	r0, r3
2000426e:	370c      	adds	r7, #12
20004270:	46bd      	mov	sp, r7
20004272:	f85d 7b04 	ldr.w	r7, [sp], #4
20004276:	4770      	bx	lr

20004278 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
20004278:	b480      	push	{r7}
2000427a:	b085      	sub	sp, #20
2000427c:	af00      	add	r7, sp, #0
2000427e:	6078      	str	r0, [r7, #4]
20004280:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
20004282:	687b      	ldr	r3, [r7, #4]
20004284:	695b      	ldr	r3, [r3, #20]
20004286:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
20004288:	68fa      	ldr	r2, [r7, #12]
2000428a:	683b      	ldr	r3, [r7, #0]
2000428c:	4013      	ands	r3, r2
2000428e:	041a      	lsls	r2, r3, #16
20004290:	68fb      	ldr	r3, [r7, #12]
20004292:	43d9      	mvns	r1, r3
20004294:	683b      	ldr	r3, [r7, #0]
20004296:	400b      	ands	r3, r1
20004298:	431a      	orrs	r2, r3
2000429a:	687b      	ldr	r3, [r7, #4]
2000429c:	619a      	str	r2, [r3, #24]
}
2000429e:	bf00      	nop
200042a0:	3714      	adds	r7, #20
200042a2:	46bd      	mov	sp, r7
200042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200042a8:	4770      	bx	lr
	...

200042ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
200042ac:	b580      	push	{r7, lr}
200042ae:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
200042b0:	4a18      	ldr	r2, [pc, #96]	; (20004314 <MX_FREERTOS_Init+0x68>)
200042b2:	2101      	movs	r1, #1
200042b4:	2001      	movs	r0, #1
200042b6:	f7fd f91e 	bl	200014f6 <osSemaphoreNew>
200042ba:	4603      	mov	r3, r0
200042bc:	4a16      	ldr	r2, [pc, #88]	; (20004318 <MX_FREERTOS_Init+0x6c>)
200042be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(StartLCDTask, NULL, &LCD_Task_attributes);
200042c0:	4a16      	ldr	r2, [pc, #88]	; (2000431c <MX_FREERTOS_Init+0x70>)
200042c2:	2100      	movs	r1, #0
200042c4:	4816      	ldr	r0, [pc, #88]	; (20004320 <MX_FREERTOS_Init+0x74>)
200042c6:	f7fd f869 	bl	2000139c <osThreadNew>
200042ca:	4603      	mov	r3, r0
200042cc:	4a15      	ldr	r2, [pc, #84]	; (20004324 <MX_FREERTOS_Init+0x78>)
200042ce:	6013      	str	r3, [r2, #0]

  /* creation of LED1_task */
  LED1_taskHandle = osThreadNew(StartTaskLED1, NULL, &LED1_task_attributes);
200042d0:	4a15      	ldr	r2, [pc, #84]	; (20004328 <MX_FREERTOS_Init+0x7c>)
200042d2:	2100      	movs	r1, #0
200042d4:	4815      	ldr	r0, [pc, #84]	; (2000432c <MX_FREERTOS_Init+0x80>)
200042d6:	f7fd f861 	bl	2000139c <osThreadNew>
200042da:	4603      	mov	r3, r0
200042dc:	4a14      	ldr	r2, [pc, #80]	; (20004330 <MX_FREERTOS_Init+0x84>)
200042de:	6013      	str	r3, [r2, #0]

  /* creation of LED2_tack */
  LED2_tackHandle = osThreadNew(StartTaskLED2, NULL, &LED2_tack_attributes);
200042e0:	4a14      	ldr	r2, [pc, #80]	; (20004334 <MX_FREERTOS_Init+0x88>)
200042e2:	2100      	movs	r1, #0
200042e4:	4814      	ldr	r0, [pc, #80]	; (20004338 <MX_FREERTOS_Init+0x8c>)
200042e6:	f7fd f859 	bl	2000139c <osThreadNew>
200042ea:	4603      	mov	r3, r0
200042ec:	4a13      	ldr	r2, [pc, #76]	; (2000433c <MX_FREERTOS_Init+0x90>)
200042ee:	6013      	str	r3, [r2, #0]

  /* creation of Reg_task */
  Reg_taskHandle = osThreadNew(Reg_task_init, NULL, &Reg_task_attributes);
200042f0:	4a13      	ldr	r2, [pc, #76]	; (20004340 <MX_FREERTOS_Init+0x94>)
200042f2:	2100      	movs	r1, #0
200042f4:	4813      	ldr	r0, [pc, #76]	; (20004344 <MX_FREERTOS_Init+0x98>)
200042f6:	f7fd f851 	bl	2000139c <osThreadNew>
200042fa:	4603      	mov	r3, r0
200042fc:	4a12      	ldr	r2, [pc, #72]	; (20004348 <MX_FREERTOS_Init+0x9c>)
200042fe:	6013      	str	r3, [r2, #0]

  /* creation of Read_Peripheral */
  Read_PeripheralHandle = osThreadNew(StartRead_Peripheral, NULL, &Read_Peripheral_attributes);
20004300:	4a12      	ldr	r2, [pc, #72]	; (2000434c <MX_FREERTOS_Init+0xa0>)
20004302:	2100      	movs	r1, #0
20004304:	4812      	ldr	r0, [pc, #72]	; (20004350 <MX_FREERTOS_Init+0xa4>)
20004306:	f7fd f849 	bl	2000139c <osThreadNew>
2000430a:	4603      	mov	r3, r0
2000430c:	4a11      	ldr	r2, [pc, #68]	; (20004354 <MX_FREERTOS_Init+0xa8>)
2000430e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
20004310:	bf00      	nop
20004312:	bd80      	pop	{r7, pc}
20004314:	20006b48 	.word	0x20006b48
20004318:	2000f3fc 	.word	0x2000f3fc
2000431c:	20006a94 	.word	0x20006a94
20004320:	20004359 	.word	0x20004359
20004324:	2000f3e8 	.word	0x2000f3e8
20004328:	20006ab8 	.word	0x20006ab8
2000432c:	20004449 	.word	0x20004449
20004330:	2000f3ec 	.word	0x2000f3ec
20004334:	20006adc 	.word	0x20006adc
20004338:	20004469 	.word	0x20004469
2000433c:	2000f3f0 	.word	0x2000f3f0
20004340:	20006b00 	.word	0x20006b00
20004344:	20004489 	.word	0x20004489
20004348:	2000f3f4 	.word	0x2000f3f4
2000434c:	20006b24 	.word	0x20006b24
20004350:	20004559 	.word	0x20004559
20004354:	2000f3f8 	.word	0x2000f3f8

20004358 <StartLCDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
20004358:	b580      	push	{r7, lr}
2000435a:	b086      	sub	sp, #24
2000435c:	af02      	add	r7, sp, #8
2000435e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCDTask */
	TFTDisplay_ILI9341_Initialization(240, 320);
20004360:	f44f 71a0 	mov.w	r1, #320	; 0x140
20004364:	20f0      	movs	r0, #240	; 0xf0
20004366:	f000 fb3b 	bl	200049e0 <TFTDisplay_ILI9341_Initialization>
	  TFTDisplay_ILI9341_SetRotation(2);
2000436a:	2002      	movs	r0, #2
2000436c:	f000 fecc 	bl	20005108 <TFTDisplay_ILI9341_SetRotation>
//	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_GREEN);
//	  osDelay(500);
//	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_RED);
//	  osDelay(500);
	  TFTDisplay_ILI9341_FillScreen(TFT_COLOR_ILI9341_BLUE);
20004370:	201f      	movs	r0, #31
20004372:	f000 fc39 	bl	20004be8 <TFTDisplay_ILI9341_FillScreen>
	  osDelay(100);
20004376:	2064      	movs	r0, #100	; 0x64
20004378:	f7fd f8a2 	bl	200014c0 <osDelay>

	  TFTDisplay_ILI9341_DrawCircle(140, 140, 50, TFT_COLOR_ILI9341_GREEN);
2000437c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
20004380:	2232      	movs	r2, #50	; 0x32
20004382:	218c      	movs	r1, #140	; 0x8c
20004384:	208c      	movs	r0, #140	; 0x8c
20004386:	f000 fd1b 	bl	20004dc0 <TFTDisplay_ILI9341_DrawCircle>


	  for (int i=0; i < dl_n; i++){
2000438a:	2300      	movs	r3, #0
2000438c:	60fb      	str	r3, [r7, #12]
2000438e:	e018      	b.n	200043c2 <StartLCDTask+0x6a>
		  TFTDisplay_ILI9341_DrawChar (nx, ny, *ptr);
20004390:	4b28      	ldr	r3, [pc, #160]	; (20004434 <StartLCDTask+0xdc>)
20004392:	681b      	ldr	r3, [r3, #0]
20004394:	b298      	uxth	r0, r3
20004396:	4b28      	ldr	r3, [pc, #160]	; (20004438 <StartLCDTask+0xe0>)
20004398:	681b      	ldr	r3, [r3, #0]
2000439a:	b299      	uxth	r1, r3
2000439c:	4b27      	ldr	r3, [pc, #156]	; (2000443c <StartLCDTask+0xe4>)
2000439e:	681b      	ldr	r3, [r3, #0]
200043a0:	781b      	ldrb	r3, [r3, #0]
200043a2:	461a      	mov	r2, r3
200043a4:	f000 fdb8 	bl	20004f18 <TFTDisplay_ILI9341_DrawChar>
		  nx= nx +10;
200043a8:	4b22      	ldr	r3, [pc, #136]	; (20004434 <StartLCDTask+0xdc>)
200043aa:	681b      	ldr	r3, [r3, #0]
200043ac:	330a      	adds	r3, #10
200043ae:	4a21      	ldr	r2, [pc, #132]	; (20004434 <StartLCDTask+0xdc>)
200043b0:	6013      	str	r3, [r2, #0]
		  ptr++;
200043b2:	4b22      	ldr	r3, [pc, #136]	; (2000443c <StartLCDTask+0xe4>)
200043b4:	681b      	ldr	r3, [r3, #0]
200043b6:	3301      	adds	r3, #1
200043b8:	4a20      	ldr	r2, [pc, #128]	; (2000443c <StartLCDTask+0xe4>)
200043ba:	6013      	str	r3, [r2, #0]
	  for (int i=0; i < dl_n; i++){
200043bc:	68fb      	ldr	r3, [r7, #12]
200043be:	3301      	adds	r3, #1
200043c0:	60fb      	str	r3, [r7, #12]
200043c2:	4b1f      	ldr	r3, [pc, #124]	; (20004440 <StartLCDTask+0xe8>)
200043c4:	681b      	ldr	r3, [r3, #0]
200043c6:	68fa      	ldr	r2, [r7, #12]
200043c8:	429a      	cmp	r2, r3
200043ca:	dbe1      	blt.n	20004390 <StartLCDTask+0x38>

	  }


	  TFTDisplay_ILI9341_DrawLine(0, 0, 240, 240, TFT_COLOR_ILI9341_RED);
200043cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
200043d0:	9300      	str	r3, [sp, #0]
200043d2:	23f0      	movs	r3, #240	; 0xf0
200043d4:	22f0      	movs	r2, #240	; 0xf0
200043d6:	2100      	movs	r1, #0
200043d8:	2000      	movs	r0, #0
200043da:	f000 fc61 	bl	20004ca0 <TFTDisplay_ILI9341_DrawLine>
	  TFTDisplay_ILI9341_DrawPixel(140, 140, TFT_COLOR_ILI9341_WHITE);
200043de:	f64f 72ff 	movw	r2, #65535	; 0xffff
200043e2:	218c      	movs	r1, #140	; 0x8c
200043e4:	208c      	movs	r0, #140	; 0x8c
200043e6:	f000 fc1b 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>


	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
200043ea:	e002      	b.n	200043f2 <StartLCDTask+0x9a>
		{
		osDelay(2);					//aby nie blokować innych tasków
200043ec:	2002      	movs	r0, #2
200043ee:	f7fd f867 	bl	200014c0 <osDelay>
	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
200043f2:	4b14      	ldr	r3, [pc, #80]	; (20004444 <StartLCDTask+0xec>)
200043f4:	691b      	ldr	r3, [r3, #16]
200043f6:	f003 0301 	and.w	r3, r3, #1
200043fa:	2b00      	cmp	r3, #0
200043fc:	d0f6      	beq.n	200043ec <StartLCDTask+0x94>
		}

  /* Infinite loop */
  for(;;)
  {
	  for(int i=0; i< 10; i++)
200043fe:	2300      	movs	r3, #0
20004400:	60bb      	str	r3, [r7, #8]
20004402:	e00f      	b.n	20004424 <StartLCDTask+0xcc>
	  {
		  TFTDisplay_ILI9341_DrawChar(100, 100, 0x30 + i);
20004404:	68bb      	ldr	r3, [r7, #8]
20004406:	b2db      	uxtb	r3, r3
20004408:	3330      	adds	r3, #48	; 0x30
2000440a:	b2db      	uxtb	r3, r3
2000440c:	461a      	mov	r2, r3
2000440e:	2164      	movs	r1, #100	; 0x64
20004410:	2064      	movs	r0, #100	; 0x64
20004412:	f000 fd81 	bl	20004f18 <TFTDisplay_ILI9341_DrawChar>
		  osDelay(1000);
20004416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2000441a:	f7fd f851 	bl	200014c0 <osDelay>
	  for(int i=0; i< 10; i++)
2000441e:	68bb      	ldr	r3, [r7, #8]
20004420:	3301      	adds	r3, #1
20004422:	60bb      	str	r3, [r7, #8]
20004424:	68bb      	ldr	r3, [r7, #8]
20004426:	2b09      	cmp	r3, #9
20004428:	ddec      	ble.n	20004404 <StartLCDTask+0xac>
	  }
	  osDelay(1);
2000442a:	2001      	movs	r0, #1
2000442c:	f7fd f848 	bl	200014c0 <osDelay>
	  for(int i=0; i< 10; i++)
20004430:	e7e5      	b.n	200043fe <StartLCDTask+0xa6>
20004432:	bf00      	nop
20004434:	2000f404 	.word	0x2000f404
20004438:	2000a8d0 	.word	0x2000a8d0
2000443c:	2000f400 	.word	0x2000f400
20004440:	2000a8cc 	.word	0x2000a8cc
20004444:	40020000 	.word	0x40020000

20004448 <StartTaskLED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED1 */
void StartTaskLED1(void *argument)
{
20004448:	b580      	push	{r7, lr}
2000444a:	b082      	sub	sp, #8
2000444c:	af00      	add	r7, sp, #0
2000444e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED1 */
  /* Infinite loop */
	for(;;)
	{
	  // osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_13);
20004450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20004454:	4803      	ldr	r0, [pc, #12]	; (20004464 <StartTaskLED1+0x1c>)
20004456:	f7ff ff0f 	bl	20004278 <LL_GPIO_TogglePin>
	  osDelay(500);
2000445a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
2000445e:	f7fd f82f 	bl	200014c0 <osDelay>
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_13);
20004462:	e7f5      	b.n	20004450 <StartTaskLED1+0x8>
20004464:	40021800 	.word	0x40021800

20004468 <StartTaskLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED2 */
void StartTaskLED2(void *argument)
{
20004468:	b580      	push	{r7, lr}
2000446a:	b082      	sub	sp, #8
2000446c:	af00      	add	r7, sp, #0
2000446e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED2 */
  /* Infinite loop */
	for(;;)
	{
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20004470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
20004474:	4803      	ldr	r0, [pc, #12]	; (20004484 <StartTaskLED2+0x1c>)
20004476:	f7ff feff 	bl	20004278 <LL_GPIO_TogglePin>
	  osDelay(1000);
2000447a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
2000447e:	f7fd f81f 	bl	200014c0 <osDelay>
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20004482:	e7f5      	b.n	20004470 <StartTaskLED2+0x8>
20004484:	40021800 	.word	0x40021800

20004488 <Reg_task_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Reg_task_init */
void Reg_task_init(void *argument)
{
20004488:	b580      	push	{r7, lr}
2000448a:	b084      	sub	sp, #16
2000448c:	af00      	add	r7, sp, #0
2000448e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Reg_task_init */
	PID_s_init(&pid, 10, 3, 0.9, tp);
20004490:	4b2c      	ldr	r3, [pc, #176]	; (20004544 <Reg_task_init+0xbc>)
20004492:	edd3 7a00 	vldr	s15, [r3]
20004496:	eef0 1a67 	vmov.f32	s3, s15
2000449a:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 20004548 <Reg_task_init+0xc0>
2000449e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
200044a2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
200044a6:	4829      	ldr	r0, [pc, #164]	; (2000454c <Reg_task_init+0xc4>)
200044a8:	f001 fd46 	bl	20005f38 <PID_s_init>
	Inercja_s_init(&in3, 1, tp, 5);
200044ac:	4b25      	ldr	r3, [pc, #148]	; (20004544 <Reg_task_init+0xbc>)
200044ae:	edd3 7a00 	vldr	s15, [r3]
200044b2:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
200044b6:	eef0 0a67 	vmov.f32	s1, s15
200044ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
200044be:	4824      	ldr	r0, [pc, #144]	; (20004550 <Reg_task_init+0xc8>)
200044c0:	f001 fdce 	bl	20006060 <Inercja_s_init>
	Inercja_s_init(&in4, 2, tp, 3);
200044c4:	4b1f      	ldr	r3, [pc, #124]	; (20004544 <Reg_task_init+0xbc>)
200044c6:	edd3 7a00 	vldr	s15, [r3]
200044ca:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
200044ce:	eef0 0a67 	vmov.f32	s1, s15
200044d2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
200044d6:	481f      	ldr	r0, [pc, #124]	; (20004554 <Reg_task_init+0xcc>)
200044d8:	f001 fdc2 	bl	20006060 <Inercja_s_init>
	float expected = 0;
200044dc:	f04f 0300 	mov.w	r3, #0
200044e0:	60bb      	str	r3, [r7, #8]
	float output = 0;
200044e2:	f04f 0300 	mov.w	r3, #0
200044e6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    pid.expected = expected;
200044e8:	4a18      	ldr	r2, [pc, #96]	; (2000454c <Reg_task_init+0xc4>)
200044ea:	68bb      	ldr	r3, [r7, #8]
200044ec:	61d3      	str	r3, [r2, #28]
    pid.input = output;
200044ee:	4a17      	ldr	r2, [pc, #92]	; (2000454c <Reg_task_init+0xc4>)
200044f0:	68fb      	ldr	r3, [r7, #12]
200044f2:	6193      	str	r3, [r2, #24]
    Reg_s_step(&pid);
200044f4:	4815      	ldr	r0, [pc, #84]	; (2000454c <Reg_task_init+0xc4>)
200044f6:	f001 fd45 	bl	20005f84 <Reg_s_step>
    //output = pid.output;
    in3.input = pid.output;
200044fa:	4b14      	ldr	r3, [pc, #80]	; (2000454c <Reg_task_init+0xc4>)
200044fc:	6a1b      	ldr	r3, [r3, #32]
200044fe:	4a14      	ldr	r2, [pc, #80]	; (20004550 <Reg_task_init+0xc8>)
20004500:	6153      	str	r3, [r2, #20]
    Inercja_s_step(&in3);
20004502:	4813      	ldr	r0, [pc, #76]	; (20004550 <Reg_task_init+0xc8>)
20004504:	f001 fdc9 	bl	2000609a <Inercja_s_step>
    in4.input = in3.output;
20004508:	4b11      	ldr	r3, [pc, #68]	; (20004550 <Reg_task_init+0xc8>)
2000450a:	691b      	ldr	r3, [r3, #16]
2000450c:	4a11      	ldr	r2, [pc, #68]	; (20004554 <Reg_task_init+0xcc>)
2000450e:	6153      	str	r3, [r2, #20]
    Inercja_s_step(&in4);
20004510:	4810      	ldr	r0, [pc, #64]	; (20004554 <Reg_task_init+0xcc>)
20004512:	f001 fdc2 	bl	2000609a <Inercja_s_step>
    output =  in4.output;
20004516:	4b0f      	ldr	r3, [pc, #60]	; (20004554 <Reg_task_init+0xcc>)
20004518:	691b      	ldr	r3, [r3, #16]
2000451a:	60fb      	str	r3, [r7, #12]
    Draw_info((int)output, (int) expected, false);
2000451c:	edd7 7a03 	vldr	s15, [r7, #12]
20004520:	eebd 7ae7 	vcvt.s32.f32	s14, s15
20004524:	edd7 7a02 	vldr	s15, [r7, #8]
20004528:	eefd 7ae7 	vcvt.s32.f32	s15, s15
2000452c:	2200      	movs	r2, #0
2000452e:	ee17 1a90 	vmov	r1, s15
20004532:	ee17 0a10 	vmov	r0, s14
20004536:	f001 fc4b 	bl	20005dd0 <Draw_info>
    osDelay(10);
2000453a:	200a      	movs	r0, #10
2000453c:	f7fc ffc0 	bl	200014c0 <osDelay>
  {
20004540:	e7d2      	b.n	200044e8 <Reg_task_init+0x60>
20004542:	bf00      	nop
20004544:	2000a8c4 	.word	0x2000a8c4
20004548:	3f666666 	.word	0x3f666666
2000454c:	2000f394 	.word	0x2000f394
20004550:	2000f3b8 	.word	0x2000f3b8
20004554:	2000f3d0 	.word	0x2000f3d0

20004558 <StartRead_Peripheral>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRead_Peripheral */
void StartRead_Peripheral(void *argument)
{
20004558:	b580      	push	{r7, lr}
2000455a:	b082      	sub	sp, #8
2000455c:	af00      	add	r7, sp, #0
2000455e:	6078      	str	r0, [r7, #4]
//	int adc_data_pot3;
//	int adc_data_pot4;
  /* Infinite loop */
  for(;;)
  {
	  if(LL_GPIO_ReadInputPort(GPIOC)==0x0800){
20004560:	4825      	ldr	r0, [pc, #148]	; (200045f8 <StartRead_Peripheral+0xa0>)
20004562:	f7ff fe7d 	bl	20004260 <LL_GPIO_ReadInputPort>
20004566:	4603      	mov	r3, r0
20004568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
2000456c:	d117      	bne.n	2000459e <StartRead_Peripheral+0x46>
		  pid.expected += 0.1;
2000456e:	4b23      	ldr	r3, [pc, #140]	; (200045fc <StartRead_Peripheral+0xa4>)
20004570:	69db      	ldr	r3, [r3, #28]
20004572:	4618      	mov	r0, r3
20004574:	f7fb ffa0 	bl	200004b8 <__aeabi_f2d>
20004578:	a31d      	add	r3, pc, #116	; (adr r3, 200045f0 <StartRead_Peripheral+0x98>)
2000457a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000457e:	f7fb fe3d 	bl	200001fc <__adddf3>
20004582:	4602      	mov	r2, r0
20004584:	460b      	mov	r3, r1
20004586:	4610      	mov	r0, r2
20004588:	4619      	mov	r1, r3
2000458a:	f7fb ffed 	bl	20000568 <__aeabi_d2f>
2000458e:	4603      	mov	r3, r0
20004590:	4a1a      	ldr	r2, [pc, #104]	; (200045fc <StartRead_Peripheral+0xa4>)
20004592:	61d3      	str	r3, [r2, #28]
		  TFTDisplay_ILI9341_DrawChar(100, 150, 0x31);
20004594:	2231      	movs	r2, #49	; 0x31
20004596:	2196      	movs	r1, #150	; 0x96
20004598:	2064      	movs	r0, #100	; 0x64
2000459a:	f000 fcbd 	bl	20004f18 <TFTDisplay_ILI9341_DrawChar>
	  }
	  if(LL_GPIO_ReadInputPort(GPIOC)==0x1000){
2000459e:	4816      	ldr	r0, [pc, #88]	; (200045f8 <StartRead_Peripheral+0xa0>)
200045a0:	f7ff fe5e 	bl	20004260 <LL_GPIO_ReadInputPort>
200045a4:	4603      	mov	r3, r0
200045a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
200045aa:	d117      	bne.n	200045dc <StartRead_Peripheral+0x84>
		  pid.expected -= 0.1;
200045ac:	4b13      	ldr	r3, [pc, #76]	; (200045fc <StartRead_Peripheral+0xa4>)
200045ae:	69db      	ldr	r3, [r3, #28]
200045b0:	4618      	mov	r0, r3
200045b2:	f7fb ff81 	bl	200004b8 <__aeabi_f2d>
200045b6:	a30e      	add	r3, pc, #56	; (adr r3, 200045f0 <StartRead_Peripheral+0x98>)
200045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
200045bc:	f7fb fe1c 	bl	200001f8 <__aeabi_dsub>
200045c0:	4602      	mov	r2, r0
200045c2:	460b      	mov	r3, r1
200045c4:	4610      	mov	r0, r2
200045c6:	4619      	mov	r1, r3
200045c8:	f7fb ffce 	bl	20000568 <__aeabi_d2f>
200045cc:	4603      	mov	r3, r0
200045ce:	4a0b      	ldr	r2, [pc, #44]	; (200045fc <StartRead_Peripheral+0xa4>)
200045d0:	61d3      	str	r3, [r2, #28]
		  TFTDisplay_ILI9341_DrawChar(100, 150, 0x32);
200045d2:	2232      	movs	r2, #50	; 0x32
200045d4:	2196      	movs	r1, #150	; 0x96
200045d6:	2064      	movs	r0, #100	; 0x64
200045d8:	f000 fc9e 	bl	20004f18 <TFTDisplay_ILI9341_DrawChar>
	  }
	  if(LL_GPIO_ReadInputPort(GPIOC)==0x2000){
200045dc:	4806      	ldr	r0, [pc, #24]	; (200045f8 <StartRead_Peripheral+0xa0>)
200045de:	f7ff fe3f 	bl	20004260 <LL_GPIO_ReadInputPort>
//	  while (LL_ADC_IsActiveFlag_EOC(ADC1) == 0){
//		  osDelay(1);
//	  }
//	  adc_data_pot4 = LL_ADC_REG_ReadConversionData12(ADC1);
//
    osDelay(100);
200045e2:	2064      	movs	r0, #100	; 0x64
200045e4:	f7fc ff6c 	bl	200014c0 <osDelay>
	  if(LL_GPIO_ReadInputPort(GPIOC)==0x0800){
200045e8:	e7ba      	b.n	20004560 <StartRead_Peripheral+0x8>
200045ea:	bf00      	nop
200045ec:	f3af 8000 	nop.w
200045f0:	9999999a 	.word	0x9999999a
200045f4:	3fb99999 	.word	0x3fb99999
200045f8:	40020800 	.word	0x40020800
200045fc:	2000f394 	.word	0x2000f394

20004600 <LL_AHB1_GRP1_EnableClock>:
{
20004600:	b480      	push	{r7}
20004602:	b085      	sub	sp, #20
20004604:	af00      	add	r7, sp, #0
20004606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
20004608:	4b08      	ldr	r3, [pc, #32]	; (2000462c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000460a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000460c:	4907      	ldr	r1, [pc, #28]	; (2000462c <LL_AHB1_GRP1_EnableClock+0x2c>)
2000460e:	687b      	ldr	r3, [r7, #4]
20004610:	4313      	orrs	r3, r2
20004612:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20004614:	4b05      	ldr	r3, [pc, #20]	; (2000462c <LL_AHB1_GRP1_EnableClock+0x2c>)
20004616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20004618:	687b      	ldr	r3, [r7, #4]
2000461a:	4013      	ands	r3, r2
2000461c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000461e:	68fb      	ldr	r3, [r7, #12]
}
20004620:	bf00      	nop
20004622:	3714      	adds	r7, #20
20004624:	46bd      	mov	sp, r7
20004626:	f85d 7b04 	ldr.w	r7, [sp], #4
2000462a:	4770      	bx	lr
2000462c:	40023800 	.word	0x40023800

20004630 <LL_GPIO_ResetOutputPin>:
{
20004630:	b480      	push	{r7}
20004632:	b083      	sub	sp, #12
20004634:	af00      	add	r7, sp, #0
20004636:	6078      	str	r0, [r7, #4]
20004638:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
2000463a:	683b      	ldr	r3, [r7, #0]
2000463c:	041a      	lsls	r2, r3, #16
2000463e:	687b      	ldr	r3, [r7, #4]
20004640:	619a      	str	r2, [r3, #24]
}
20004642:	bf00      	nop
20004644:	370c      	adds	r7, #12
20004646:	46bd      	mov	sp, r7
20004648:	f85d 7b04 	ldr.w	r7, [sp], #4
2000464c:	4770      	bx	lr
	...

20004650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20004650:	b580      	push	{r7, lr}
20004652:	b086      	sub	sp, #24
20004654:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
20004656:	463b      	mov	r3, r7
20004658:	2200      	movs	r2, #0
2000465a:	601a      	str	r2, [r3, #0]
2000465c:	605a      	str	r2, [r3, #4]
2000465e:	609a      	str	r2, [r3, #8]
20004660:	60da      	str	r2, [r3, #12]
20004662:	611a      	str	r2, [r3, #16]
20004664:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
20004666:	2004      	movs	r0, #4
20004668:	f7ff ffca 	bl	20004600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
2000466c:	2020      	movs	r0, #32
2000466e:	f7ff ffc7 	bl	20004600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
20004672:	2080      	movs	r0, #128	; 0x80
20004674:	f7ff ffc4 	bl	20004600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
20004678:	2001      	movs	r0, #1
2000467a:	f7ff ffc1 	bl	20004600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
2000467e:	2008      	movs	r0, #8
20004680:	f7ff ffbe 	bl	20004600 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
20004684:	2040      	movs	r0, #64	; 0x40
20004686:	f7ff ffbb 	bl	20004600 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
2000468a:	2104      	movs	r1, #4
2000468c:	483b      	ldr	r0, [pc, #236]	; (2000477c <MX_GPIO_Init+0x12c>)
2000468e:	f7ff ffcf 	bl	20004630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13);
20004692:	f44f 5140 	mov.w	r1, #12288	; 0x3000
20004696:	483a      	ldr	r0, [pc, #232]	; (20004780 <MX_GPIO_Init+0x130>)
20004698:	f7ff ffca 	bl	20004630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LL_GPIO_PIN_13|LL_GPIO_PIN_14);
2000469c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
200046a0:	4838      	ldr	r0, [pc, #224]	; (20004784 <MX_GPIO_Init+0x134>)
200046a2:	f7ff ffc5 	bl	20004630 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BUTTON_mode_Pin|BUTTON_9_Pin|BUTTON_10_Pin;
200046a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
200046aa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
200046ac:	2300      	movs	r3, #0
200046ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200046b0:	2300      	movs	r3, #0
200046b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200046b4:	463b      	mov	r3, r7
200046b6:	4619      	mov	r1, r3
200046b8:	4830      	ldr	r0, [pc, #192]	; (2000477c <MX_GPIO_Init+0x12c>)
200046ba:	f7fc fcc2 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_JOYSTICK2_Pin;
200046be:	2340      	movs	r3, #64	; 0x40
200046c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
200046c2:	2303      	movs	r3, #3
200046c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200046c6:	2300      	movs	r3, #0
200046c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LEFT_JOYSTICK2_GPIO_Port, &GPIO_InitStruct);
200046ca:	463b      	mov	r3, r7
200046cc:	4619      	mov	r1, r3
200046ce:	482e      	ldr	r0, [pc, #184]	; (20004788 <MX_GPIO_Init+0x138>)
200046d0:	f7fc fcb7 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
200046d4:	2304      	movs	r3, #4
200046d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
200046d8:	2301      	movs	r3, #1
200046da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
200046dc:	2303      	movs	r3, #3
200046de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200046e0:	2300      	movs	r3, #0
200046e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200046e4:	2300      	movs	r3, #0
200046e6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
200046e8:	463b      	mov	r3, r7
200046ea:	4619      	mov	r1, r3
200046ec:	4823      	ldr	r0, [pc, #140]	; (2000477c <MX_GPIO_Init+0x12c>)
200046ee:	f7fc fca8 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LEFT_JOYSTICK1_Pin;
200046f2:	2308      	movs	r3, #8
200046f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
200046f6:	2303      	movs	r3, #3
200046f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200046fa:	2300      	movs	r3, #0
200046fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LEFT_JOYSTICK1_GPIO_Port, &GPIO_InitStruct);
200046fe:	463b      	mov	r3, r7
20004700:	4619      	mov	r1, r3
20004702:	481e      	ldr	r0, [pc, #120]	; (2000477c <MX_GPIO_Init+0x12c>)
20004704:	f7fc fc9d 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
20004708:	2301      	movs	r3, #1
2000470a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
2000470c:	2300      	movs	r3, #0
2000470e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004710:	2300      	movs	r3, #0
20004712:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20004714:	463b      	mov	r3, r7
20004716:	4619      	mov	r1, r3
20004718:	481c      	ldr	r0, [pc, #112]	; (2000478c <MX_GPIO_Init+0x13c>)
2000471a:	f7fc fc92 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RIGHT_JOYSTICK1_Pin|RIGHT_JOYSTICK2_Pin;
2000471e:	23a0      	movs	r3, #160	; 0xa0
20004720:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
20004722:	2303      	movs	r3, #3
20004724:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004726:	2300      	movs	r3, #0
20004728:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000472a:	463b      	mov	r3, r7
2000472c:	4619      	mov	r1, r3
2000472e:	4817      	ldr	r0, [pc, #92]	; (2000478c <MX_GPIO_Init+0x13c>)
20004730:	f7fc fc87 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
20004734:	f44f 5340 	mov.w	r3, #12288	; 0x3000
20004738:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
2000473a:	2301      	movs	r3, #1
2000473c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
2000473e:	2303      	movs	r3, #3
20004740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20004742:	2300      	movs	r3, #0
20004744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004746:	2300      	movs	r3, #0
20004748:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000474a:	463b      	mov	r3, r7
2000474c:	4619      	mov	r1, r3
2000474e:	480c      	ldr	r0, [pc, #48]	; (20004780 <MX_GPIO_Init+0x130>)
20004750:	f7fc fc77 	bl	20001042 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
20004754:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
20004758:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
2000475a:	2301      	movs	r3, #1
2000475c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
2000475e:	2300      	movs	r3, #0
20004760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20004762:	2300      	movs	r3, #0
20004764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20004766:	2300      	movs	r3, #0
20004768:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
2000476a:	463b      	mov	r3, r7
2000476c:	4619      	mov	r1, r3
2000476e:	4805      	ldr	r0, [pc, #20]	; (20004784 <MX_GPIO_Init+0x134>)
20004770:	f7fc fc67 	bl	20001042 <LL_GPIO_Init>

}
20004774:	bf00      	nop
20004776:	3718      	adds	r7, #24
20004778:	46bd      	mov	sp, r7
2000477a:	bd80      	pop	{r7, pc}
2000477c:	40020800 	.word	0x40020800
20004780:	40020c00 	.word	0x40020c00
20004784:	40021800 	.word	0x40021800
20004788:	40021400 	.word	0x40021400
2000478c:	40020000 	.word	0x40020000

20004790 <LL_GPIO_SetOutputPin>:
{
20004790:	b480      	push	{r7}
20004792:	b083      	sub	sp, #12
20004794:	af00      	add	r7, sp, #0
20004796:	6078      	str	r0, [r7, #4]
20004798:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
2000479a:	687b      	ldr	r3, [r7, #4]
2000479c:	683a      	ldr	r2, [r7, #0]
2000479e:	619a      	str	r2, [r3, #24]
}
200047a0:	bf00      	nop
200047a2:	370c      	adds	r7, #12
200047a4:	46bd      	mov	sp, r7
200047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200047aa:	4770      	bx	lr

200047ac <LL_GPIO_ResetOutputPin>:
{
200047ac:	b480      	push	{r7}
200047ae:	b083      	sub	sp, #12
200047b0:	af00      	add	r7, sp, #0
200047b2:	6078      	str	r0, [r7, #4]
200047b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
200047b6:	683b      	ldr	r3, [r7, #0]
200047b8:	041a      	lsls	r2, r3, #16
200047ba:	687b      	ldr	r3, [r7, #4]
200047bc:	619a      	str	r2, [r3, #24]
}
200047be:	bf00      	nop
200047c0:	370c      	adds	r7, #12
200047c2:	46bd      	mov	sp, r7
200047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200047c8:	4770      	bx	lr

200047ca <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
200047ca:	b480      	push	{r7}
200047cc:	b083      	sub	sp, #12
200047ce:	af00      	add	r7, sp, #0
200047d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
200047d2:	687b      	ldr	r3, [r7, #4]
200047d4:	689b      	ldr	r3, [r3, #8]
200047d6:	f003 0301 	and.w	r3, r3, #1
200047da:	2b01      	cmp	r3, #1
200047dc:	d101      	bne.n	200047e2 <LL_SPI_IsActiveFlag_RXNE+0x18>
200047de:	2301      	movs	r3, #1
200047e0:	e000      	b.n	200047e4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
200047e2:	2300      	movs	r3, #0
}
200047e4:	4618      	mov	r0, r3
200047e6:	370c      	adds	r7, #12
200047e8:	46bd      	mov	sp, r7
200047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200047ee:	4770      	bx	lr

200047f0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
200047f0:	b480      	push	{r7}
200047f2:	b083      	sub	sp, #12
200047f4:	af00      	add	r7, sp, #0
200047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
200047f8:	687b      	ldr	r3, [r7, #4]
200047fa:	689b      	ldr	r3, [r3, #8]
200047fc:	f003 0302 	and.w	r3, r3, #2
20004800:	2b02      	cmp	r3, #2
20004802:	d101      	bne.n	20004808 <LL_SPI_IsActiveFlag_TXE+0x18>
20004804:	2301      	movs	r3, #1
20004806:	e000      	b.n	2000480a <LL_SPI_IsActiveFlag_TXE+0x1a>
20004808:	2300      	movs	r3, #0
}
2000480a:	4618      	mov	r0, r3
2000480c:	370c      	adds	r7, #12
2000480e:	46bd      	mov	sp, r7
20004810:	f85d 7b04 	ldr.w	r7, [sp], #4
20004814:	4770      	bx	lr

20004816 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
20004816:	b480      	push	{r7}
20004818:	b083      	sub	sp, #12
2000481a:	af00      	add	r7, sp, #0
2000481c:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
2000481e:	687b      	ldr	r3, [r7, #4]
20004820:	330c      	adds	r3, #12
}
20004822:	4618      	mov	r0, r3
20004824:	370c      	adds	r7, #12
20004826:	46bd      	mov	sp, r7
20004828:	f85d 7b04 	ldr.w	r7, [sp], #4
2000482c:	4770      	bx	lr

2000482e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
2000482e:	b480      	push	{r7}
20004830:	b083      	sub	sp, #12
20004832:	af00      	add	r7, sp, #0
20004834:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
20004836:	687b      	ldr	r3, [r7, #4]
20004838:	330c      	adds	r3, #12
2000483a:	781b      	ldrb	r3, [r3, #0]
2000483c:	b2db      	uxtb	r3, r3
}
2000483e:	4618      	mov	r0, r3
20004840:	370c      	adds	r7, #12
20004842:	46bd      	mov	sp, r7
20004844:	f85d 7b04 	ldr.w	r7, [sp], #4
20004848:	4770      	bx	lr

2000484a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
2000484a:	b480      	push	{r7}
2000484c:	b085      	sub	sp, #20
2000484e:	af00      	add	r7, sp, #0
20004850:	6078      	str	r0, [r7, #4]
20004852:	460b      	mov	r3, r1
20004854:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
20004856:	687b      	ldr	r3, [r7, #4]
20004858:	330c      	adds	r3, #12
2000485a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
2000485c:	68fb      	ldr	r3, [r7, #12]
2000485e:	78fa      	ldrb	r2, [r7, #3]
20004860:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
20004862:	bf00      	nop
20004864:	3714      	adds	r7, #20
20004866:	46bd      	mov	sp, r7
20004868:	f85d 7b04 	ldr.w	r7, [sp], #4
2000486c:	4770      	bx	lr
	...

20004870 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
20004870:	b480      	push	{r7}
20004872:	b083      	sub	sp, #12
20004874:	af00      	add	r7, sp, #0
20004876:	6078      	str	r0, [r7, #4]
20004878:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
2000487a:	4a0c      	ldr	r2, [pc, #48]	; (200048ac <LL_DMA_EnableStream+0x3c>)
2000487c:	683b      	ldr	r3, [r7, #0]
2000487e:	4413      	add	r3, r2
20004880:	781b      	ldrb	r3, [r3, #0]
20004882:	461a      	mov	r2, r3
20004884:	687b      	ldr	r3, [r7, #4]
20004886:	4413      	add	r3, r2
20004888:	681b      	ldr	r3, [r3, #0]
2000488a:	4908      	ldr	r1, [pc, #32]	; (200048ac <LL_DMA_EnableStream+0x3c>)
2000488c:	683a      	ldr	r2, [r7, #0]
2000488e:	440a      	add	r2, r1
20004890:	7812      	ldrb	r2, [r2, #0]
20004892:	4611      	mov	r1, r2
20004894:	687a      	ldr	r2, [r7, #4]
20004896:	440a      	add	r2, r1
20004898:	f043 0301 	orr.w	r3, r3, #1
2000489c:	6013      	str	r3, [r2, #0]
}
2000489e:	bf00      	nop
200048a0:	370c      	adds	r7, #12
200048a2:	46bd      	mov	sp, r7
200048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200048a8:	4770      	bx	lr
200048aa:	bf00      	nop
200048ac:	20006b58 	.word	0x20006b58

200048b0 <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
200048b0:	b480      	push	{r7}
200048b2:	b083      	sub	sp, #12
200048b4:	af00      	add	r7, sp, #0
200048b6:	6078      	str	r0, [r7, #4]
200048b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
200048ba:	4a0c      	ldr	r2, [pc, #48]	; (200048ec <LL_DMA_DisableStream+0x3c>)
200048bc:	683b      	ldr	r3, [r7, #0]
200048be:	4413      	add	r3, r2
200048c0:	781b      	ldrb	r3, [r3, #0]
200048c2:	461a      	mov	r2, r3
200048c4:	687b      	ldr	r3, [r7, #4]
200048c6:	4413      	add	r3, r2
200048c8:	681b      	ldr	r3, [r3, #0]
200048ca:	4908      	ldr	r1, [pc, #32]	; (200048ec <LL_DMA_DisableStream+0x3c>)
200048cc:	683a      	ldr	r2, [r7, #0]
200048ce:	440a      	add	r2, r1
200048d0:	7812      	ldrb	r2, [r2, #0]
200048d2:	4611      	mov	r1, r2
200048d4:	687a      	ldr	r2, [r7, #4]
200048d6:	440a      	add	r2, r1
200048d8:	f023 0301 	bic.w	r3, r3, #1
200048dc:	6013      	str	r3, [r2, #0]
}
200048de:	bf00      	nop
200048e0:	370c      	adds	r7, #12
200048e2:	46bd      	mov	sp, r7
200048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
200048e8:	4770      	bx	lr
200048ea:	bf00      	nop
200048ec:	20006b58 	.word	0x20006b58

200048f0 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
200048f0:	b480      	push	{r7}
200048f2:	b083      	sub	sp, #12
200048f4:	af00      	add	r7, sp, #0
200048f6:	6078      	str	r0, [r7, #4]
200048f8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
200048fa:	4a08      	ldr	r2, [pc, #32]	; (2000491c <LL_DMA_GetDataTransferDirection+0x2c>)
200048fc:	683b      	ldr	r3, [r7, #0]
200048fe:	4413      	add	r3, r2
20004900:	781b      	ldrb	r3, [r3, #0]
20004902:	461a      	mov	r2, r3
20004904:	687b      	ldr	r3, [r7, #4]
20004906:	4413      	add	r3, r2
20004908:	681b      	ldr	r3, [r3, #0]
2000490a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
2000490e:	4618      	mov	r0, r3
20004910:	370c      	adds	r7, #12
20004912:	46bd      	mov	sp, r7
20004914:	f85d 7b04 	ldr.w	r7, [sp], #4
20004918:	4770      	bx	lr
2000491a:	bf00      	nop
2000491c:	20006b58 	.word	0x20006b58

20004920 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
20004920:	b480      	push	{r7}
20004922:	b085      	sub	sp, #20
20004924:	af00      	add	r7, sp, #0
20004926:	60f8      	str	r0, [r7, #12]
20004928:	60b9      	str	r1, [r7, #8]
2000492a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
2000492c:	4a0d      	ldr	r2, [pc, #52]	; (20004964 <LL_DMA_SetDataLength+0x44>)
2000492e:	68bb      	ldr	r3, [r7, #8]
20004930:	4413      	add	r3, r2
20004932:	781b      	ldrb	r3, [r3, #0]
20004934:	461a      	mov	r2, r3
20004936:	68fb      	ldr	r3, [r7, #12]
20004938:	4413      	add	r3, r2
2000493a:	685b      	ldr	r3, [r3, #4]
2000493c:	0c1b      	lsrs	r3, r3, #16
2000493e:	041b      	lsls	r3, r3, #16
20004940:	4908      	ldr	r1, [pc, #32]	; (20004964 <LL_DMA_SetDataLength+0x44>)
20004942:	68ba      	ldr	r2, [r7, #8]
20004944:	440a      	add	r2, r1
20004946:	7812      	ldrb	r2, [r2, #0]
20004948:	4611      	mov	r1, r2
2000494a:	68fa      	ldr	r2, [r7, #12]
2000494c:	440a      	add	r2, r1
2000494e:	4611      	mov	r1, r2
20004950:	687a      	ldr	r2, [r7, #4]
20004952:	4313      	orrs	r3, r2
20004954:	604b      	str	r3, [r1, #4]
}
20004956:	bf00      	nop
20004958:	3714      	adds	r7, #20
2000495a:	46bd      	mov	sp, r7
2000495c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004960:	4770      	bx	lr
20004962:	bf00      	nop
20004964:	20006b58 	.word	0x20006b58

20004968 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
20004968:	b480      	push	{r7}
2000496a:	b085      	sub	sp, #20
2000496c:	af00      	add	r7, sp, #0
2000496e:	60f8      	str	r0, [r7, #12]
20004970:	60b9      	str	r1, [r7, #8]
20004972:	607a      	str	r2, [r7, #4]
20004974:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
20004976:	69bb      	ldr	r3, [r7, #24]
20004978:	2b40      	cmp	r3, #64	; 0x40
2000497a:	d114      	bne.n	200049a6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
2000497c:	4a17      	ldr	r2, [pc, #92]	; (200049dc <LL_DMA_ConfigAddresses+0x74>)
2000497e:	68bb      	ldr	r3, [r7, #8]
20004980:	4413      	add	r3, r2
20004982:	781b      	ldrb	r3, [r3, #0]
20004984:	461a      	mov	r2, r3
20004986:	68fb      	ldr	r3, [r7, #12]
20004988:	4413      	add	r3, r2
2000498a:	461a      	mov	r2, r3
2000498c:	687b      	ldr	r3, [r7, #4]
2000498e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
20004990:	4a12      	ldr	r2, [pc, #72]	; (200049dc <LL_DMA_ConfigAddresses+0x74>)
20004992:	68bb      	ldr	r3, [r7, #8]
20004994:	4413      	add	r3, r2
20004996:	781b      	ldrb	r3, [r3, #0]
20004998:	461a      	mov	r2, r3
2000499a:	68fb      	ldr	r3, [r7, #12]
2000499c:	4413      	add	r3, r2
2000499e:	461a      	mov	r2, r3
200049a0:	683b      	ldr	r3, [r7, #0]
200049a2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
200049a4:	e013      	b.n	200049ce <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
200049a6:	4a0d      	ldr	r2, [pc, #52]	; (200049dc <LL_DMA_ConfigAddresses+0x74>)
200049a8:	68bb      	ldr	r3, [r7, #8]
200049aa:	4413      	add	r3, r2
200049ac:	781b      	ldrb	r3, [r3, #0]
200049ae:	461a      	mov	r2, r3
200049b0:	68fb      	ldr	r3, [r7, #12]
200049b2:	4413      	add	r3, r2
200049b4:	461a      	mov	r2, r3
200049b6:	687b      	ldr	r3, [r7, #4]
200049b8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
200049ba:	4a08      	ldr	r2, [pc, #32]	; (200049dc <LL_DMA_ConfigAddresses+0x74>)
200049bc:	68bb      	ldr	r3, [r7, #8]
200049be:	4413      	add	r3, r2
200049c0:	781b      	ldrb	r3, [r3, #0]
200049c2:	461a      	mov	r2, r3
200049c4:	68fb      	ldr	r3, [r7, #12]
200049c6:	4413      	add	r3, r2
200049c8:	461a      	mov	r2, r3
200049ca:	683b      	ldr	r3, [r7, #0]
200049cc:	60d3      	str	r3, [r2, #12]
}
200049ce:	bf00      	nop
200049d0:	3714      	adds	r7, #20
200049d2:	46bd      	mov	sp, r7
200049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200049d8:	4770      	bx	lr
200049da:	bf00      	nop
200049dc:	20006b58 	.word	0x20006b58

200049e0 <TFTDisplay_ILI9341_Initialization>:
static void tftDisplay_ILI9341_Reset(void);
static void tftDisplay_ILI9341_FontsInitialization(void);
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_Initialization(uint16_t screenWidth, uint16_t screeHeight)
{
200049e0:	b580      	push	{r7, lr}
200049e2:	b082      	sub	sp, #8
200049e4:	af00      	add	r7, sp, #0
200049e6:	4603      	mov	r3, r0
200049e8:	460a      	mov	r2, r1
200049ea:	80fb      	strh	r3, [r7, #6]
200049ec:	4613      	mov	r3, r2
200049ee:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE();
200049f0:	2104      	movs	r1, #4
200049f2:	4823      	ldr	r0, [pc, #140]	; (20004a80 <TFTDisplay_ILI9341_Initialization+0xa0>)
200049f4:	f7ff feda 	bl	200047ac <LL_GPIO_ResetOutputPin>
	tftDisplay_ILI9341_Reset();
200049f8:	f000 fcfa 	bl	200053f0 <tftDisplay_ILI9341_Reset>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SWRESET);
200049fc:	2001      	movs	r0, #1
200049fe:	f000 fbdb 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(1000);
20004a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20004a06:	f7fc fc05 	bl	20001214 <LL_mDelay>

	tftDisplay_ILI9341_Init_PowerControl_A();
20004a0a:	f000 fd91 	bl	20005530 <tftDisplay_ILI9341_Init_PowerControl_A>
	tftDisplay_ILI9341_Init_PowerControl_B();
20004a0e:	f000 fdad 	bl	2000556c <tftDisplay_ILI9341_Init_PowerControl_B>
	tftDisplay_ILI9341_Init_DriverTimingControl_A();
20004a12:	f000 fdc3 	bl	2000559c <tftDisplay_ILI9341_Init_DriverTimingControl_A>
	tftDisplay_ILI9341_Init_DriverTimingControl_B();
20004a16:	f000 fdd9 	bl	200055cc <tftDisplay_ILI9341_Init_DriverTimingControl_B>
	tftDisplay_ILI9341_Init_PowerSequenceControl();
20004a1a:	f000 fdeb 	bl	200055f4 <tftDisplay_ILI9341_Init_PowerSequenceControl>
	tftDisplay_ILI9341_Init_PumpRatioControl();
20004a1e:	f000 fe03 	bl	20005628 <tftDisplay_ILI9341_Init_PumpRatioControl>
	tftDisplay_ILI9341_Init_PowerControlVRH();
20004a22:	f000 fe11 	bl	20005648 <tftDisplay_ILI9341_Init_PowerControlVRH>
	tftDisplay_ILI9341_Init_PowerControlSAP();
20004a26:	f000 fe1f 	bl	20005668 <tftDisplay_ILI9341_Init_PowerControlSAP>
	tftDisplay_ILI9341_Init_VCOMControl_1();
20004a2a:	f000 fe2d 	bl	20005688 <tftDisplay_ILI9341_Init_VCOMControl_1>
	tftDisplay_ILI9341_Init_VCOMControl_2();
20004a2e:	f000 fe3f 	bl	200056b0 <tftDisplay_ILI9341_Init_VCOMControl_2>
	tftDisplay_ILI9341_Init_MemmoryAccessControl();
20004a32:	f000 fe4d 	bl	200056d0 <tftDisplay_ILI9341_Init_MemmoryAccessControl>
	tftDisplay_ILI9341_Init_PixelFormatSet();
20004a36:	f000 fe5b 	bl	200056f0 <tftDisplay_ILI9341_Init_PixelFormatSet>
	tftDisplay_ILI9341_Init_FrameRationControl();
20004a3a:	f000 fe69 	bl	20005710 <tftDisplay_ILI9341_Init_FrameRationControl>
	tftDisplay_ILI9341_Init_DisplayFunctionControl();
20004a3e:	f000 fe7b 	bl	20005738 <tftDisplay_ILI9341_Init_DisplayFunctionControl>
	tftDisplay_ILI9341_Init_GammaSet();
20004a42:	f000 fe89 	bl	20005758 <tftDisplay_ILI9341_Init_GammaSet>
	tftDisplay_ILI9341_Init_PositiveGammaCorection();
20004a46:	f000 fe97 	bl	20005778 <tftDisplay_ILI9341_Init_PositiveGammaCorection>
	tftDisplay_ILI9341_Init_NegativeGammaCorection();
20004a4a:	f000 fed1 	bl	200057f0 <tftDisplay_ILI9341_Init_NegativeGammaCorection>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SLEEP_OUT);
20004a4e:	2011      	movs	r0, #17
20004a50:	f000 fbb2 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(120);
20004a54:	2078      	movs	r0, #120	; 0x78
20004a56:	f7fc fbdd 	bl	20001214 <LL_mDelay>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DISPLAY_ON);
20004a5a:	2029      	movs	r0, #41	; 0x29
20004a5c:	f000 fbac 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(TFT_ILI9341_ROTATION);
20004a60:	2048      	movs	r0, #72	; 0x48
20004a62:	f000 fbf7 	bl	20005254 <tftDisplay_ILI9341_SendData>
	TFTDisplay_ILI9341_WIDTH = screenWidth;
20004a66:	4a07      	ldr	r2, [pc, #28]	; (20004a84 <TFTDisplay_ILI9341_Initialization+0xa4>)
20004a68:	88fb      	ldrh	r3, [r7, #6]
20004a6a:	8013      	strh	r3, [r2, #0]
	TFTDisplay_ILI9341_HEIGHT = screeHeight;
20004a6c:	4a06      	ldr	r2, [pc, #24]	; (20004a88 <TFTDisplay_ILI9341_Initialization+0xa8>)
20004a6e:	88bb      	ldrh	r3, [r7, #4]
20004a70:	8013      	strh	r3, [r2, #0]
	tftDisplay_ILI9341_FontsInitialization();
20004a72:	f000 fcd1 	bl	20005418 <tftDisplay_ILI9341_FontsInitialization>
}
20004a76:	bf00      	nop
20004a78:	3708      	adds	r7, #8
20004a7a:	46bd      	mov	sp, r7
20004a7c:	bd80      	pop	{r7, pc}
20004a7e:	bf00      	nop
20004a80:	40020800 	.word	0x40020800
20004a84:	2000f408 	.word	0x2000f408
20004a88:	2000f40a 	.word	0x2000f40a

20004a8c <TFTDisplay_ILI9341_FillRect>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
20004a8c:	b590      	push	{r4, r7, lr}
20004a8e:	b089      	sub	sp, #36	; 0x24
20004a90:	af00      	add	r7, sp, #0
20004a92:	4604      	mov	r4, r0
20004a94:	4608      	mov	r0, r1
20004a96:	4611      	mov	r1, r2
20004a98:	461a      	mov	r2, r3
20004a9a:	4623      	mov	r3, r4
20004a9c:	80fb      	strh	r3, [r7, #6]
20004a9e:	4603      	mov	r3, r0
20004aa0:	80bb      	strh	r3, [r7, #4]
20004aa2:	460b      	mov	r3, r1
20004aa4:	807b      	strh	r3, [r7, #2]
20004aa6:	4613      	mov	r3, r2
20004aa8:	803b      	strh	r3, [r7, #0]
  uint32_t i = 0;
20004aaa:	2300      	movs	r3, #0
20004aac:	61fb      	str	r3, [r7, #28]
  uint32_t n = 0;
20004aae:	2300      	movs	r3, #0
20004ab0:	613b      	str	r3, [r7, #16]
  uint8_t cnt = 0;
20004ab2:	2300      	movs	r3, #0
20004ab4:	76fb      	strb	r3, [r7, #27]
  uint32_t buf_size = 0;
20004ab6:	2300      	movs	r3, #0
20004ab8:	617b      	str	r3, [r7, #20]

  if((x1 >= TFTDisplay_ILI9341_WIDTH) || (y1 >= TFTDisplay_ILI9341_HEIGHT) ||
20004aba:	4b47      	ldr	r3, [pc, #284]	; (20004bd8 <TFTDisplay_ILI9341_FillRect+0x14c>)
20004abc:	881b      	ldrh	r3, [r3, #0]
20004abe:	88fa      	ldrh	r2, [r7, #6]
20004ac0:	429a      	cmp	r2, r3
20004ac2:	f080 8084 	bcs.w	20004bce <TFTDisplay_ILI9341_FillRect+0x142>
20004ac6:	4b45      	ldr	r3, [pc, #276]	; (20004bdc <TFTDisplay_ILI9341_FillRect+0x150>)
20004ac8:	881b      	ldrh	r3, [r3, #0]
20004aca:	88ba      	ldrh	r2, [r7, #4]
20004acc:	429a      	cmp	r2, r3
20004ace:	d27e      	bcs.n	20004bce <TFTDisplay_ILI9341_FillRect+0x142>
     (x2 >= TFTDisplay_ILI9341_WIDTH) || (y2 >= TFTDisplay_ILI9341_HEIGHT)) {
20004ad0:	4b41      	ldr	r3, [pc, #260]	; (20004bd8 <TFTDisplay_ILI9341_FillRect+0x14c>)
20004ad2:	881b      	ldrh	r3, [r3, #0]
  if((x1 >= TFTDisplay_ILI9341_WIDTH) || (y1 >= TFTDisplay_ILI9341_HEIGHT) ||
20004ad4:	887a      	ldrh	r2, [r7, #2]
20004ad6:	429a      	cmp	r2, r3
20004ad8:	d279      	bcs.n	20004bce <TFTDisplay_ILI9341_FillRect+0x142>
     (x2 >= TFTDisplay_ILI9341_WIDTH) || (y2 >= TFTDisplay_ILI9341_HEIGHT)) {
20004ada:	4b40      	ldr	r3, [pc, #256]	; (20004bdc <TFTDisplay_ILI9341_FillRect+0x150>)
20004adc:	881b      	ldrh	r3, [r3, #0]
20004ade:	883a      	ldrh	r2, [r7, #0]
20004ae0:	429a      	cmp	r2, r3
20004ae2:	d274      	bcs.n	20004bce <TFTDisplay_ILI9341_FillRect+0x142>
	  return;
  }
  if(x1>x2) {
20004ae4:	88fa      	ldrh	r2, [r7, #6]
20004ae6:	887b      	ldrh	r3, [r7, #2]
20004ae8:	429a      	cmp	r2, r3
20004aea:	d905      	bls.n	20004af8 <TFTDisplay_ILI9341_FillRect+0x6c>
	  SWAP(x1,x2);
20004aec:	88fb      	ldrh	r3, [r7, #6]
20004aee:	81fb      	strh	r3, [r7, #14]
20004af0:	887b      	ldrh	r3, [r7, #2]
20004af2:	80fb      	strh	r3, [r7, #6]
20004af4:	89fb      	ldrh	r3, [r7, #14]
20004af6:	807b      	strh	r3, [r7, #2]
  }
  if(y1>y2) {
20004af8:	88ba      	ldrh	r2, [r7, #4]
20004afa:	883b      	ldrh	r3, [r7, #0]
20004afc:	429a      	cmp	r2, r3
20004afe:	d905      	bls.n	20004b0c <TFTDisplay_ILI9341_FillRect+0x80>
	  SWAP(y1,y2);
20004b00:	88bb      	ldrh	r3, [r7, #4]
20004b02:	81bb      	strh	r3, [r7, #12]
20004b04:	883b      	ldrh	r3, [r7, #0]
20004b06:	80bb      	strh	r3, [r7, #4]
20004b08:	89bb      	ldrh	r3, [r7, #12]
20004b0a:	803b      	strh	r3, [r7, #0]
  }
  tftDisplay_ILI9341_SetAddrWindow(x1, y1, x2, y2);
20004b0c:	883b      	ldrh	r3, [r7, #0]
20004b0e:	887a      	ldrh	r2, [r7, #2]
20004b10:	88b9      	ldrh	r1, [r7, #4]
20004b12:	88f8      	ldrh	r0, [r7, #6]
20004b14:	f000 fcbc 	bl	20005490 <tftDisplay_ILI9341_SetAddrWindow>
  n = (x2-x1+1)*(y2-y1+1)*2;
20004b18:	887a      	ldrh	r2, [r7, #2]
20004b1a:	88fb      	ldrh	r3, [r7, #6]
20004b1c:	1ad3      	subs	r3, r2, r3
20004b1e:	3301      	adds	r3, #1
20004b20:	8839      	ldrh	r1, [r7, #0]
20004b22:	88ba      	ldrh	r2, [r7, #4]
20004b24:	1a8a      	subs	r2, r1, r2
20004b26:	3201      	adds	r2, #1
20004b28:	fb02 f303 	mul.w	r3, r2, r3
20004b2c:	005b      	lsls	r3, r3, #1
20004b2e:	613b      	str	r3, [r7, #16]
  if(n<=65535)
20004b30:	693b      	ldr	r3, [r7, #16]
20004b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20004b36:	d204      	bcs.n	20004b42 <TFTDisplay_ILI9341_FillRect+0xb6>
  {
    cnt = 1;
20004b38:	2301      	movs	r3, #1
20004b3a:	76fb      	strb	r3, [r7, #27]
    buf_size = n;
20004b3c:	693b      	ldr	r3, [r7, #16]
20004b3e:	617b      	str	r3, [r7, #20]
20004b40:	e024      	b.n	20004b8c <TFTDisplay_ILI9341_FillRect+0x100>
  }
  else
  {
    cnt = n/2;
20004b42:	693b      	ldr	r3, [r7, #16]
20004b44:	085b      	lsrs	r3, r3, #1
20004b46:	76fb      	strb	r3, [r7, #27]
    buf_size = 2;
20004b48:	2302      	movs	r3, #2
20004b4a:	617b      	str	r3, [r7, #20]
    for(i = 3; i < n/3; i++)
20004b4c:	2303      	movs	r3, #3
20004b4e:	61fb      	str	r3, [r7, #28]
20004b50:	e014      	b.n	20004b7c <TFTDisplay_ILI9341_FillRect+0xf0>
    {
      if(n%i == 0)
20004b52:	693b      	ldr	r3, [r7, #16]
20004b54:	69fa      	ldr	r2, [r7, #28]
20004b56:	fbb3 f2f2 	udiv	r2, r3, r2
20004b5a:	69f9      	ldr	r1, [r7, #28]
20004b5c:	fb01 f202 	mul.w	r2, r1, r2
20004b60:	1a9b      	subs	r3, r3, r2
20004b62:	2b00      	cmp	r3, #0
20004b64:	d107      	bne.n	20004b76 <TFTDisplay_ILI9341_FillRect+0xea>
      {
        cnt = i;
20004b66:	69fb      	ldr	r3, [r7, #28]
20004b68:	76fb      	strb	r3, [r7, #27]
        buf_size = n/i;
20004b6a:	693a      	ldr	r2, [r7, #16]
20004b6c:	69fb      	ldr	r3, [r7, #28]
20004b6e:	fbb2 f3f3 	udiv	r3, r2, r3
20004b72:	617b      	str	r3, [r7, #20]
        break;
20004b74:	e00a      	b.n	20004b8c <TFTDisplay_ILI9341_FillRect+0x100>
    for(i = 3; i < n/3; i++)
20004b76:	69fb      	ldr	r3, [r7, #28]
20004b78:	3301      	adds	r3, #1
20004b7a:	61fb      	str	r3, [r7, #28]
20004b7c:	693b      	ldr	r3, [r7, #16]
20004b7e:	4a18      	ldr	r2, [pc, #96]	; (20004be0 <TFTDisplay_ILI9341_FillRect+0x154>)
20004b80:	fba2 2303 	umull	r2, r3, r2, r3
20004b84:	085b      	lsrs	r3, r3, #1
20004b86:	69fa      	ldr	r2, [r7, #28]
20004b88:	429a      	cmp	r2, r3
20004b8a:	d3e2      	bcc.n	20004b52 <TFTDisplay_ILI9341_FillRect+0xc6>
      }
    }
  }
  for(i = 0; i < buf_size/2; i++)
20004b8c:	2300      	movs	r3, #0
20004b8e:	61fb      	str	r3, [r7, #28]
20004b90:	e011      	b.n	20004bb6 <TFTDisplay_ILI9341_FillRect+0x12a>
  {
	  DataBuffer[i*2] = color >> 8;
20004b92:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
20004b94:	0a1b      	lsrs	r3, r3, #8
20004b96:	b29a      	uxth	r2, r3
20004b98:	69fb      	ldr	r3, [r7, #28]
20004b9a:	005b      	lsls	r3, r3, #1
20004b9c:	b2d1      	uxtb	r1, r2
20004b9e:	4a11      	ldr	r2, [pc, #68]	; (20004be4 <TFTDisplay_ILI9341_FillRect+0x158>)
20004ba0:	54d1      	strb	r1, [r2, r3]
	  DataBuffer[i*2+1] = color & 0xFF;
20004ba2:	69fb      	ldr	r3, [r7, #28]
20004ba4:	005b      	lsls	r3, r3, #1
20004ba6:	3301      	adds	r3, #1
20004ba8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
20004baa:	b2d1      	uxtb	r1, r2
20004bac:	4a0d      	ldr	r2, [pc, #52]	; (20004be4 <TFTDisplay_ILI9341_FillRect+0x158>)
20004bae:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < buf_size/2; i++)
20004bb0:	69fb      	ldr	r3, [r7, #28]
20004bb2:	3301      	adds	r3, #1
20004bb4:	61fb      	str	r3, [r7, #28]
20004bb6:	697b      	ldr	r3, [r7, #20]
20004bb8:	085b      	lsrs	r3, r3, #1
20004bba:	69fa      	ldr	r2, [r7, #28]
20004bbc:	429a      	cmp	r2, r3
20004bbe:	d3e8      	bcc.n	20004b92 <TFTDisplay_ILI9341_FillRect+0x106>
  }

  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], buf_size, cnt);
20004bc0:	7efb      	ldrb	r3, [r7, #27]
20004bc2:	461a      	mov	r2, r3
20004bc4:	6979      	ldr	r1, [r7, #20]
20004bc6:	4807      	ldr	r0, [pc, #28]	; (20004be4 <TFTDisplay_ILI9341_FillRect+0x158>)
20004bc8:	f000 fbc2 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
20004bcc:	e000      	b.n	20004bd0 <TFTDisplay_ILI9341_FillRect+0x144>
	  return;
20004bce:	bf00      	nop
}
20004bd0:	3724      	adds	r7, #36	; 0x24
20004bd2:	46bd      	mov	sp, r7
20004bd4:	bd90      	pop	{r4, r7, pc}
20004bd6:	bf00      	nop
20004bd8:	2000f408 	.word	0x2000f408
20004bdc:	2000f40a 	.word	0x2000f40a
20004be0:	aaaaaaab 	.word	0xaaaaaaab
20004be4:	2000f40c 	.word	0x2000f40c

20004be8 <TFTDisplay_ILI9341_FillScreen>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_FillScreen(uint16_t color)
{
20004be8:	b580      	push	{r7, lr}
20004bea:	b084      	sub	sp, #16
20004bec:	af02      	add	r7, sp, #8
20004bee:	4603      	mov	r3, r0
20004bf0:	80fb      	strh	r3, [r7, #6]
	TFTDisplay_ILI9341_FillRect(0, 0, TFTDisplay_ILI9341_WIDTH-1, TFTDisplay_ILI9341_HEIGHT-1, color);
20004bf2:	4b09      	ldr	r3, [pc, #36]	; (20004c18 <TFTDisplay_ILI9341_FillScreen+0x30>)
20004bf4:	881b      	ldrh	r3, [r3, #0]
20004bf6:	3b01      	subs	r3, #1
20004bf8:	b29a      	uxth	r2, r3
20004bfa:	4b08      	ldr	r3, [pc, #32]	; (20004c1c <TFTDisplay_ILI9341_FillScreen+0x34>)
20004bfc:	881b      	ldrh	r3, [r3, #0]
20004bfe:	3b01      	subs	r3, #1
20004c00:	b299      	uxth	r1, r3
20004c02:	88fb      	ldrh	r3, [r7, #6]
20004c04:	9300      	str	r3, [sp, #0]
20004c06:	460b      	mov	r3, r1
20004c08:	2100      	movs	r1, #0
20004c0a:	2000      	movs	r0, #0
20004c0c:	f7ff ff3e 	bl	20004a8c <TFTDisplay_ILI9341_FillRect>
}
20004c10:	bf00      	nop
20004c12:	3708      	adds	r7, #8
20004c14:	46bd      	mov	sp, r7
20004c16:	bd80      	pop	{r7, pc}
20004c18:	2000f408 	.word	0x2000f408
20004c1c:	2000f40a 	.word	0x2000f40a

20004c20 <TFTDisplay_ILI9341_DrawPixel>:
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawPixel(int x, int y, uint16_t color)
{
20004c20:	b580      	push	{r7, lr}
20004c22:	b084      	sub	sp, #16
20004c24:	af00      	add	r7, sp, #0
20004c26:	60f8      	str	r0, [r7, #12]
20004c28:	60b9      	str	r1, [r7, #8]
20004c2a:	4613      	mov	r3, r2
20004c2c:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFTDisplay_ILI9341_WIDTH)||(y>=TFTDisplay_ILI9341_HEIGHT))
20004c2e:	68fb      	ldr	r3, [r7, #12]
20004c30:	2b00      	cmp	r3, #0
20004c32:	db2b      	blt.n	20004c8c <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004c34:	68bb      	ldr	r3, [r7, #8]
20004c36:	2b00      	cmp	r3, #0
20004c38:	db28      	blt.n	20004c8c <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004c3a:	4b16      	ldr	r3, [pc, #88]	; (20004c94 <TFTDisplay_ILI9341_DrawPixel+0x74>)
20004c3c:	881b      	ldrh	r3, [r3, #0]
20004c3e:	461a      	mov	r2, r3
20004c40:	68fb      	ldr	r3, [r7, #12]
20004c42:	4293      	cmp	r3, r2
20004c44:	da22      	bge.n	20004c8c <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004c46:	4b14      	ldr	r3, [pc, #80]	; (20004c98 <TFTDisplay_ILI9341_DrawPixel+0x78>)
20004c48:	881b      	ldrh	r3, [r3, #0]
20004c4a:	461a      	mov	r2, r3
20004c4c:	68bb      	ldr	r3, [r7, #8]
20004c4e:	4293      	cmp	r3, r2
20004c50:	da1c      	bge.n	20004c8c <TFTDisplay_ILI9341_DrawPixel+0x6c>
	{
		return;
	}

	tftDisplay_ILI9341_SetAddrWindow(x,y,x,y);
20004c52:	68fb      	ldr	r3, [r7, #12]
20004c54:	b298      	uxth	r0, r3
20004c56:	68bb      	ldr	r3, [r7, #8]
20004c58:	b299      	uxth	r1, r3
20004c5a:	68fb      	ldr	r3, [r7, #12]
20004c5c:	b29a      	uxth	r2, r3
20004c5e:	68bb      	ldr	r3, [r7, #8]
20004c60:	b29b      	uxth	r3, r3
20004c62:	f000 fc15 	bl	20005490 <tftDisplay_ILI9341_SetAddrWindow>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
20004c66:	202c      	movs	r0, #44	; 0x2c
20004c68:	f000 faa6 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	DataBuffer[0] = color>>8;
20004c6c:	88fb      	ldrh	r3, [r7, #6]
20004c6e:	0a1b      	lsrs	r3, r3, #8
20004c70:	b29b      	uxth	r3, r3
20004c72:	b2da      	uxtb	r2, r3
20004c74:	4b09      	ldr	r3, [pc, #36]	; (20004c9c <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004c76:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = color & 0xFF;
20004c78:	88fb      	ldrh	r3, [r7, #6]
20004c7a:	b2da      	uxtb	r2, r3
20004c7c:	4b07      	ldr	r3, [pc, #28]	; (20004c9c <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004c7e:	705a      	strb	r2, [r3, #1]


	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004c80:	2201      	movs	r2, #1
20004c82:	2102      	movs	r1, #2
20004c84:	4805      	ldr	r0, [pc, #20]	; (20004c9c <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20004c86:	f000 fb63 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
20004c8a:	e000      	b.n	20004c8e <TFTDisplay_ILI9341_DrawPixel+0x6e>
		return;
20004c8c:	bf00      	nop
}
20004c8e:	3710      	adds	r7, #16
20004c90:	46bd      	mov	sp, r7
20004c92:	bd80      	pop	{r7, pc}
20004c94:	2000f408 	.word	0x2000f408
20004c98:	2000f40a 	.word	0x2000f40a
20004c9c:	2000f40c 	.word	0x2000f40c

20004ca0 <TFTDisplay_ILI9341_DrawLine>:
//------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawLine(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
20004ca0:	b590      	push	{r4, r7, lr}
20004ca2:	b08b      	sub	sp, #44	; 0x2c
20004ca4:	af00      	add	r7, sp, #0
20004ca6:	4604      	mov	r4, r0
20004ca8:	4608      	mov	r0, r1
20004caa:	4611      	mov	r1, r2
20004cac:	461a      	mov	r2, r3
20004cae:	4623      	mov	r3, r4
20004cb0:	80fb      	strh	r3, [r7, #6]
20004cb2:	4603      	mov	r3, r0
20004cb4:	80bb      	strh	r3, [r7, #4]
20004cb6:	460b      	mov	r3, r1
20004cb8:	807b      	strh	r3, [r7, #2]
20004cba:	4613      	mov	r3, r2
20004cbc:	803b      	strh	r3, [r7, #0]
    int steep = abs(y_end-y_start)>abs(x_end-x_start);
20004cbe:	883a      	ldrh	r2, [r7, #0]
20004cc0:	88bb      	ldrh	r3, [r7, #4]
20004cc2:	1ad3      	subs	r3, r2, r3
20004cc4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20004cc8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20004ccc:	8879      	ldrh	r1, [r7, #2]
20004cce:	88fb      	ldrh	r3, [r7, #6]
20004cd0:	1acb      	subs	r3, r1, r3
20004cd2:	2b00      	cmp	r3, #0
20004cd4:	bfb8      	it	lt
20004cd6:	425b      	neglt	r3, r3
20004cd8:	429a      	cmp	r2, r3
20004cda:	bfcc      	ite	gt
20004cdc:	2301      	movgt	r3, #1
20004cde:	2300      	movle	r3, #0
20004ce0:	b2db      	uxtb	r3, r3
20004ce2:	61fb      	str	r3, [r7, #28]
    int dx=0;
20004ce4:	2300      	movs	r3, #0
20004ce6:	61bb      	str	r3, [r7, #24]
    int dy=0;
20004ce8:	2300      	movs	r3, #0
20004cea:	617b      	str	r3, [r7, #20]
    int err=0;
20004cec:	2300      	movs	r3, #0
20004cee:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep=0;
20004cf0:	2300      	movs	r3, #0
20004cf2:	623b      	str	r3, [r7, #32]

    if (steep)
20004cf4:	69fb      	ldr	r3, [r7, #28]
20004cf6:	2b00      	cmp	r3, #0
20004cf8:	d00b      	beq.n	20004d12 <TFTDisplay_ILI9341_DrawLine+0x72>
    {
    	SWAP(x_start,y_start);
20004cfa:	88fb      	ldrh	r3, [r7, #6]
20004cfc:	827b      	strh	r3, [r7, #18]
20004cfe:	88bb      	ldrh	r3, [r7, #4]
20004d00:	80fb      	strh	r3, [r7, #6]
20004d02:	8a7b      	ldrh	r3, [r7, #18]
20004d04:	80bb      	strh	r3, [r7, #4]
    	SWAP(x_end,y_end);
20004d06:	887b      	ldrh	r3, [r7, #2]
20004d08:	823b      	strh	r3, [r7, #16]
20004d0a:	883b      	ldrh	r3, [r7, #0]
20004d0c:	807b      	strh	r3, [r7, #2]
20004d0e:	8a3b      	ldrh	r3, [r7, #16]
20004d10:	803b      	strh	r3, [r7, #0]
    }

    if(x_start>x_end)
20004d12:	88fa      	ldrh	r2, [r7, #6]
20004d14:	887b      	ldrh	r3, [r7, #2]
20004d16:	429a      	cmp	r2, r3
20004d18:	d90b      	bls.n	20004d32 <TFTDisplay_ILI9341_DrawLine+0x92>
    {
    	SWAP(x_start,x_end);
20004d1a:	88fb      	ldrh	r3, [r7, #6]
20004d1c:	81fb      	strh	r3, [r7, #14]
20004d1e:	887b      	ldrh	r3, [r7, #2]
20004d20:	80fb      	strh	r3, [r7, #6]
20004d22:	89fb      	ldrh	r3, [r7, #14]
20004d24:	807b      	strh	r3, [r7, #2]
    	SWAP(y_start,y_end);
20004d26:	88bb      	ldrh	r3, [r7, #4]
20004d28:	81bb      	strh	r3, [r7, #12]
20004d2a:	883b      	ldrh	r3, [r7, #0]
20004d2c:	80bb      	strh	r3, [r7, #4]
20004d2e:	89bb      	ldrh	r3, [r7, #12]
20004d30:	803b      	strh	r3, [r7, #0]
    }

    dx=x_end-x_start;
20004d32:	887a      	ldrh	r2, [r7, #2]
20004d34:	88fb      	ldrh	r3, [r7, #6]
20004d36:	1ad3      	subs	r3, r2, r3
20004d38:	61bb      	str	r3, [r7, #24]
    dy=abs(y_end-y_start);
20004d3a:	883a      	ldrh	r2, [r7, #0]
20004d3c:	88bb      	ldrh	r3, [r7, #4]
20004d3e:	1ad3      	subs	r3, r2, r3
20004d40:	2b00      	cmp	r3, #0
20004d42:	bfb8      	it	lt
20004d44:	425b      	neglt	r3, r3
20004d46:	617b      	str	r3, [r7, #20]
    err=dx/2;
20004d48:	69bb      	ldr	r3, [r7, #24]
20004d4a:	0fda      	lsrs	r2, r3, #31
20004d4c:	4413      	add	r3, r2
20004d4e:	105b      	asrs	r3, r3, #1
20004d50:	627b      	str	r3, [r7, #36]	; 0x24

    if(y_start<y_end)
20004d52:	88ba      	ldrh	r2, [r7, #4]
20004d54:	883b      	ldrh	r3, [r7, #0]
20004d56:	429a      	cmp	r2, r3
20004d58:	d202      	bcs.n	20004d60 <TFTDisplay_ILI9341_DrawLine+0xc0>
    {
        ystep = 1;
20004d5a:	2301      	movs	r3, #1
20004d5c:	623b      	str	r3, [r7, #32]
20004d5e:	e026      	b.n	20004dae <TFTDisplay_ILI9341_DrawLine+0x10e>
    }
    else
    {
        ystep = -1;
20004d60:	f04f 33ff 	mov.w	r3, #4294967295
20004d64:	623b      	str	r3, [r7, #32]
    }
    for (;x_start<=x_end;x_start++)
20004d66:	e022      	b.n	20004dae <TFTDisplay_ILI9341_DrawLine+0x10e>
    {
       if (steep)
20004d68:	69fb      	ldr	r3, [r7, #28]
20004d6a:	2b00      	cmp	r3, #0
20004d6c:	d006      	beq.n	20004d7c <TFTDisplay_ILI9341_DrawLine+0xdc>
       {
    	   TFTDisplay_ILI9341_DrawPixel(y_start,x_start,color);
20004d6e:	88bb      	ldrh	r3, [r7, #4]
20004d70:	88f9      	ldrh	r1, [r7, #6]
20004d72:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20004d74:	4618      	mov	r0, r3
20004d76:	f7ff ff53 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
20004d7a:	e005      	b.n	20004d88 <TFTDisplay_ILI9341_DrawLine+0xe8>
       }
       else
       {
    	   TFTDisplay_ILI9341_DrawPixel(x_start,y_start,color);
20004d7c:	88fb      	ldrh	r3, [r7, #6]
20004d7e:	88b9      	ldrh	r1, [r7, #4]
20004d80:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20004d82:	4618      	mov	r0, r3
20004d84:	f7ff ff4c 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
       }
       err-=dy;
20004d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004d8a:	697b      	ldr	r3, [r7, #20]
20004d8c:	1ad3      	subs	r3, r2, r3
20004d8e:	627b      	str	r3, [r7, #36]	; 0x24
       if (err<0)
20004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004d92:	2b00      	cmp	r3, #0
20004d94:	da08      	bge.n	20004da8 <TFTDisplay_ILI9341_DrawLine+0x108>
       {
        y_start += ystep;
20004d96:	6a3b      	ldr	r3, [r7, #32]
20004d98:	b29a      	uxth	r2, r3
20004d9a:	88bb      	ldrh	r3, [r7, #4]
20004d9c:	4413      	add	r3, r2
20004d9e:	80bb      	strh	r3, [r7, #4]
        err+=dx;
20004da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004da2:	69bb      	ldr	r3, [r7, #24]
20004da4:	4413      	add	r3, r2
20004da6:	627b      	str	r3, [r7, #36]	; 0x24
    for (;x_start<=x_end;x_start++)
20004da8:	88fb      	ldrh	r3, [r7, #6]
20004daa:	3301      	adds	r3, #1
20004dac:	80fb      	strh	r3, [r7, #6]
20004dae:	88fa      	ldrh	r2, [r7, #6]
20004db0:	887b      	ldrh	r3, [r7, #2]
20004db2:	429a      	cmp	r2, r3
20004db4:	d9d8      	bls.n	20004d68 <TFTDisplay_ILI9341_DrawLine+0xc8>
       }
    }
}
20004db6:	bf00      	nop
20004db8:	bf00      	nop
20004dba:	372c      	adds	r7, #44	; 0x2c
20004dbc:	46bd      	mov	sp, r7
20004dbe:	bd90      	pop	{r4, r7, pc}

20004dc0 <TFTDisplay_ILI9341_DrawCircle>:
    TFTDisplay_ILI9341_DrawLine(start_x, start_y, start_x, end_y, color);
    TFTDisplay_ILI9341_DrawLine(start_x, end_y, end_x, end_y, color);
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawCircle(uint16_t x_Position, uint16_t y_Position, int radius, uint16_t color)
{
20004dc0:	b580      	push	{r7, lr}
20004dc2:	b08a      	sub	sp, #40	; 0x28
20004dc4:	af00      	add	r7, sp, #0
20004dc6:	60ba      	str	r2, [r7, #8]
20004dc8:	461a      	mov	r2, r3
20004dca:	4603      	mov	r3, r0
20004dcc:	81fb      	strh	r3, [r7, #14]
20004dce:	460b      	mov	r3, r1
20004dd0:	81bb      	strh	r3, [r7, #12]
20004dd2:	4613      	mov	r3, r2
20004dd4:	80fb      	strh	r3, [r7, #6]
	int f = 1-radius;
20004dd6:	68bb      	ldr	r3, [r7, #8]
20004dd8:	f1c3 0301 	rsb	r3, r3, #1
20004ddc:	627b      	str	r3, [r7, #36]	; 0x24
	int ddF_x=1;
20004dde:	2301      	movs	r3, #1
20004de0:	623b      	str	r3, [r7, #32]
	int ddF_y=-2*radius;
20004de2:	68ba      	ldr	r2, [r7, #8]
20004de4:	4613      	mov	r3, r2
20004de6:	07db      	lsls	r3, r3, #31
20004de8:	1a9b      	subs	r3, r3, r2
20004dea:	005b      	lsls	r3, r3, #1
20004dec:	61fb      	str	r3, [r7, #28]
	int x = 0;
20004dee:	2300      	movs	r3, #0
20004df0:	61bb      	str	r3, [r7, #24]
	int y = radius;
20004df2:	68bb      	ldr	r3, [r7, #8]
20004df4:	617b      	str	r3, [r7, #20]

	TFTDisplay_ILI9341_DrawPixel(x_Position,y_Position+radius,color);
20004df6:	89f8      	ldrh	r0, [r7, #14]
20004df8:	89ba      	ldrh	r2, [r7, #12]
20004dfa:	68bb      	ldr	r3, [r7, #8]
20004dfc:	4413      	add	r3, r2
20004dfe:	88fa      	ldrh	r2, [r7, #6]
20004e00:	4619      	mov	r1, r3
20004e02:	f7ff ff0d 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position,y_Position-radius,color);
20004e06:	89f8      	ldrh	r0, [r7, #14]
20004e08:	89ba      	ldrh	r2, [r7, #12]
20004e0a:	68bb      	ldr	r3, [r7, #8]
20004e0c:	1ad3      	subs	r3, r2, r3
20004e0e:	88fa      	ldrh	r2, [r7, #6]
20004e10:	4619      	mov	r1, r3
20004e12:	f7ff ff05 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position+radius,y_Position,color);
20004e16:	89fa      	ldrh	r2, [r7, #14]
20004e18:	68bb      	ldr	r3, [r7, #8]
20004e1a:	4413      	add	r3, r2
20004e1c:	89b9      	ldrh	r1, [r7, #12]
20004e1e:	88fa      	ldrh	r2, [r7, #6]
20004e20:	4618      	mov	r0, r3
20004e22:	f7ff fefd 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	TFTDisplay_ILI9341_DrawPixel(x_Position-radius,y_Position,color);
20004e26:	89fa      	ldrh	r2, [r7, #14]
20004e28:	68bb      	ldr	r3, [r7, #8]
20004e2a:	1ad3      	subs	r3, r2, r3
20004e2c:	89b9      	ldrh	r1, [r7, #12]
20004e2e:	88fa      	ldrh	r2, [r7, #6]
20004e30:	4618      	mov	r0, r3
20004e32:	f7ff fef5 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	while (x<y)
20004e36:	e066      	b.n	20004f06 <TFTDisplay_ILI9341_DrawCircle+0x146>
	{
		if (f>=0)
20004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004e3a:	2b00      	cmp	r3, #0
20004e3c:	db09      	blt.n	20004e52 <TFTDisplay_ILI9341_DrawCircle+0x92>
		{
			y--;
20004e3e:	697b      	ldr	r3, [r7, #20]
20004e40:	3b01      	subs	r3, #1
20004e42:	617b      	str	r3, [r7, #20]
			ddF_y+=2;
20004e44:	69fb      	ldr	r3, [r7, #28]
20004e46:	3302      	adds	r3, #2
20004e48:	61fb      	str	r3, [r7, #28]
			f+=ddF_y;
20004e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004e4c:	69fb      	ldr	r3, [r7, #28]
20004e4e:	4413      	add	r3, r2
20004e50:	627b      	str	r3, [r7, #36]	; 0x24
	    }

		x++;
20004e52:	69bb      	ldr	r3, [r7, #24]
20004e54:	3301      	adds	r3, #1
20004e56:	61bb      	str	r3, [r7, #24]
	    ddF_x+=2;
20004e58:	6a3b      	ldr	r3, [r7, #32]
20004e5a:	3302      	adds	r3, #2
20004e5c:	623b      	str	r3, [r7, #32]
	    f+=ddF_x;
20004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004e60:	6a3b      	ldr	r3, [r7, #32]
20004e62:	4413      	add	r3, r2
20004e64:	627b      	str	r3, [r7, #36]	; 0x24
	    TFTDisplay_ILI9341_DrawPixel(x_Position+x,y_Position+y,color);
20004e66:	89fa      	ldrh	r2, [r7, #14]
20004e68:	69bb      	ldr	r3, [r7, #24]
20004e6a:	18d0      	adds	r0, r2, r3
20004e6c:	89ba      	ldrh	r2, [r7, #12]
20004e6e:	697b      	ldr	r3, [r7, #20]
20004e70:	4413      	add	r3, r2
20004e72:	88fa      	ldrh	r2, [r7, #6]
20004e74:	4619      	mov	r1, r3
20004e76:	f7ff fed3 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-x,y_Position+y,color);
20004e7a:	89fa      	ldrh	r2, [r7, #14]
20004e7c:	69bb      	ldr	r3, [r7, #24]
20004e7e:	1ad0      	subs	r0, r2, r3
20004e80:	89ba      	ldrh	r2, [r7, #12]
20004e82:	697b      	ldr	r3, [r7, #20]
20004e84:	4413      	add	r3, r2
20004e86:	88fa      	ldrh	r2, [r7, #6]
20004e88:	4619      	mov	r1, r3
20004e8a:	f7ff fec9 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+x,y_Position-y,color);
20004e8e:	89fa      	ldrh	r2, [r7, #14]
20004e90:	69bb      	ldr	r3, [r7, #24]
20004e92:	18d0      	adds	r0, r2, r3
20004e94:	89ba      	ldrh	r2, [r7, #12]
20004e96:	697b      	ldr	r3, [r7, #20]
20004e98:	1ad3      	subs	r3, r2, r3
20004e9a:	88fa      	ldrh	r2, [r7, #6]
20004e9c:	4619      	mov	r1, r3
20004e9e:	f7ff febf 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-x,y_Position-y,color);
20004ea2:	89fa      	ldrh	r2, [r7, #14]
20004ea4:	69bb      	ldr	r3, [r7, #24]
20004ea6:	1ad0      	subs	r0, r2, r3
20004ea8:	89ba      	ldrh	r2, [r7, #12]
20004eaa:	697b      	ldr	r3, [r7, #20]
20004eac:	1ad3      	subs	r3, r2, r3
20004eae:	88fa      	ldrh	r2, [r7, #6]
20004eb0:	4619      	mov	r1, r3
20004eb2:	f7ff feb5 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+y,y_Position+x,color);
20004eb6:	89fa      	ldrh	r2, [r7, #14]
20004eb8:	697b      	ldr	r3, [r7, #20]
20004eba:	18d0      	adds	r0, r2, r3
20004ebc:	89ba      	ldrh	r2, [r7, #12]
20004ebe:	69bb      	ldr	r3, [r7, #24]
20004ec0:	4413      	add	r3, r2
20004ec2:	88fa      	ldrh	r2, [r7, #6]
20004ec4:	4619      	mov	r1, r3
20004ec6:	f7ff feab 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-y,y_Position+x,color);
20004eca:	89fa      	ldrh	r2, [r7, #14]
20004ecc:	697b      	ldr	r3, [r7, #20]
20004ece:	1ad0      	subs	r0, r2, r3
20004ed0:	89ba      	ldrh	r2, [r7, #12]
20004ed2:	69bb      	ldr	r3, [r7, #24]
20004ed4:	4413      	add	r3, r2
20004ed6:	88fa      	ldrh	r2, [r7, #6]
20004ed8:	4619      	mov	r1, r3
20004eda:	f7ff fea1 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position+y,y_Position-x,color);
20004ede:	89fa      	ldrh	r2, [r7, #14]
20004ee0:	697b      	ldr	r3, [r7, #20]
20004ee2:	18d0      	adds	r0, r2, r3
20004ee4:	89ba      	ldrh	r2, [r7, #12]
20004ee6:	69bb      	ldr	r3, [r7, #24]
20004ee8:	1ad3      	subs	r3, r2, r3
20004eea:	88fa      	ldrh	r2, [r7, #6]
20004eec:	4619      	mov	r1, r3
20004eee:	f7ff fe97 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	    TFTDisplay_ILI9341_DrawPixel(x_Position-y,y_Position-x,color);
20004ef2:	89fa      	ldrh	r2, [r7, #14]
20004ef4:	697b      	ldr	r3, [r7, #20]
20004ef6:	1ad0      	subs	r0, r2, r3
20004ef8:	89ba      	ldrh	r2, [r7, #12]
20004efa:	69bb      	ldr	r3, [r7, #24]
20004efc:	1ad3      	subs	r3, r2, r3
20004efe:	88fa      	ldrh	r2, [r7, #6]
20004f00:	4619      	mov	r1, r3
20004f02:	f7ff fe8d 	bl	20004c20 <TFTDisplay_ILI9341_DrawPixel>
	while (x<y)
20004f06:	69ba      	ldr	r2, [r7, #24]
20004f08:	697b      	ldr	r3, [r7, #20]
20004f0a:	429a      	cmp	r2, r3
20004f0c:	db94      	blt.n	20004e38 <TFTDisplay_ILI9341_DrawCircle+0x78>
	}
}
20004f0e:	bf00      	nop
20004f10:	bf00      	nop
20004f12:	3728      	adds	r7, #40	; 0x28
20004f14:	46bd      	mov	sp, r7
20004f16:	bd80      	pop	{r7, pc}

20004f18 <TFTDisplay_ILI9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
20004f18:	b590      	push	{r4, r7, lr}
20004f1a:	b08b      	sub	sp, #44	; 0x2c
20004f1c:	af00      	add	r7, sp, #0
20004f1e:	4603      	mov	r3, r0
20004f20:	80fb      	strh	r3, [r7, #6]
20004f22:	460b      	mov	r3, r1
20004f24:	80bb      	strh	r3, [r7, #4]
20004f26:	4613      	mov	r3, r2
20004f28:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
20004f2a:	2300      	movs	r3, #0
20004f2c:	627b      	str	r3, [r7, #36]	; 0x24
20004f2e:	2300      	movs	r3, #0
20004f30:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint16_t y_cur = y;
20004f32:	88bb      	ldrh	r3, [r7, #4]
20004f34:	83fb      	strh	r3, [r7, #30]
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
20004f36:	2300      	movs	r3, #0
20004f38:	61bb      	str	r3, [r7, #24]
  height = lcdprop.pFont->Height;
20004f3a:	4b70      	ldr	r3, [pc, #448]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004f3c:	685b      	ldr	r3, [r3, #4]
20004f3e:	88db      	ldrh	r3, [r3, #6]
20004f40:	82fb      	strh	r3, [r7, #22]
  width  = lcdprop.pFont->Width;
20004f42:	4b6e      	ldr	r3, [pc, #440]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004f44:	685b      	ldr	r3, [r3, #4]
20004f46:	889b      	ldrh	r3, [r3, #4]
20004f48:	82bb      	strh	r3, [r7, #20]
  offset = 8 *((width + 7)/8) -  width ;
20004f4a:	8abb      	ldrh	r3, [r7, #20]
20004f4c:	3307      	adds	r3, #7
20004f4e:	2b00      	cmp	r3, #0
20004f50:	da00      	bge.n	20004f54 <TFTDisplay_ILI9341_DrawChar+0x3c>
20004f52:	3307      	adds	r3, #7
20004f54:	10db      	asrs	r3, r3, #3
20004f56:	b2db      	uxtb	r3, r3
20004f58:	00db      	lsls	r3, r3, #3
20004f5a:	b2da      	uxtb	r2, r3
20004f5c:	8abb      	ldrh	r3, [r7, #20]
20004f5e:	b2db      	uxtb	r3, r3
20004f60:	1ad3      	subs	r3, r2, r3
20004f62:	74fb      	strb	r3, [r7, #19]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
20004f64:	4b65      	ldr	r3, [pc, #404]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004f66:	685b      	ldr	r3, [r3, #4]
20004f68:	681a      	ldr	r2, [r3, #0]
20004f6a:	78fb      	ldrb	r3, [r7, #3]
20004f6c:	3b20      	subs	r3, #32
20004f6e:	4963      	ldr	r1, [pc, #396]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004f70:	6849      	ldr	r1, [r1, #4]
20004f72:	88c9      	ldrh	r1, [r1, #6]
20004f74:	fb03 f101 	mul.w	r1, r3, r1
20004f78:	4b60      	ldr	r3, [pc, #384]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004f7a:	685b      	ldr	r3, [r3, #4]
20004f7c:	889b      	ldrh	r3, [r3, #4]
20004f7e:	3307      	adds	r3, #7
20004f80:	2b00      	cmp	r3, #0
20004f82:	da00      	bge.n	20004f86 <TFTDisplay_ILI9341_DrawChar+0x6e>
20004f84:	3307      	adds	r3, #7
20004f86:	10db      	asrs	r3, r3, #3
20004f88:	fb01 f303 	mul.w	r3, r1, r3
20004f8c:	4413      	add	r3, r2
20004f8e:	60fb      	str	r3, [r7, #12]
  for(i = 0; i < height; i++)
20004f90:	2300      	movs	r3, #0
20004f92:	627b      	str	r3, [r7, #36]	; 0x24
20004f94:	e087      	b.n	200050a6 <TFTDisplay_ILI9341_DrawChar+0x18e>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
20004f96:	8abb      	ldrh	r3, [r7, #20]
20004f98:	3307      	adds	r3, #7
20004f9a:	2b00      	cmp	r3, #0
20004f9c:	da00      	bge.n	20004fa0 <TFTDisplay_ILI9341_DrawChar+0x88>
20004f9e:	3307      	adds	r3, #7
20004fa0:	10db      	asrs	r3, r3, #3
20004fa2:	461a      	mov	r2, r3
20004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20004fa6:	fb02 f303 	mul.w	r3, r2, r3
20004faa:	68fa      	ldr	r2, [r7, #12]
20004fac:	4413      	add	r3, r2
20004fae:	60bb      	str	r3, [r7, #8]
    switch(((width + 7)/8))
20004fb0:	8abb      	ldrh	r3, [r7, #20]
20004fb2:	3307      	adds	r3, #7
20004fb4:	2b00      	cmp	r3, #0
20004fb6:	da00      	bge.n	20004fba <TFTDisplay_ILI9341_DrawChar+0xa2>
20004fb8:	3307      	adds	r3, #7
20004fba:	10db      	asrs	r3, r3, #3
20004fbc:	2b01      	cmp	r3, #1
20004fbe:	d002      	beq.n	20004fc6 <TFTDisplay_ILI9341_DrawChar+0xae>
20004fc0:	2b02      	cmp	r3, #2
20004fc2:	d004      	beq.n	20004fce <TFTDisplay_ILI9341_DrawChar+0xb6>
20004fc4:	e00c      	b.n	20004fe0 <TFTDisplay_ILI9341_DrawChar+0xc8>
    {
      case 1:
          line =  pchar[0];      
20004fc6:	68bb      	ldr	r3, [r7, #8]
20004fc8:	781b      	ldrb	r3, [r3, #0]
20004fca:	61bb      	str	r3, [r7, #24]
          break;
20004fcc:	e016      	b.n	20004ffc <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
20004fce:	68bb      	ldr	r3, [r7, #8]
20004fd0:	781b      	ldrb	r3, [r3, #0]
20004fd2:	021b      	lsls	r3, r3, #8
20004fd4:	68ba      	ldr	r2, [r7, #8]
20004fd6:	3201      	adds	r2, #1
20004fd8:	7812      	ldrb	r2, [r2, #0]
20004fda:	4313      	orrs	r3, r2
20004fdc:	61bb      	str	r3, [r7, #24]
          break;
20004fde:	e00d      	b.n	20004ffc <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
20004fe0:	68bb      	ldr	r3, [r7, #8]
20004fe2:	781b      	ldrb	r3, [r3, #0]
20004fe4:	041a      	lsls	r2, r3, #16
20004fe6:	68bb      	ldr	r3, [r7, #8]
20004fe8:	3301      	adds	r3, #1
20004fea:	781b      	ldrb	r3, [r3, #0]
20004fec:	021b      	lsls	r3, r3, #8
20004fee:	4313      	orrs	r3, r2
20004ff0:	68ba      	ldr	r2, [r7, #8]
20004ff2:	3202      	adds	r2, #2
20004ff4:	7812      	ldrb	r2, [r2, #0]
20004ff6:	4313      	orrs	r3, r2
20004ff8:	61bb      	str	r3, [r7, #24]
        break;
20004ffa:	bf00      	nop
    }
    for (j = 0; j < width; j++)
20004ffc:	2300      	movs	r3, #0
20004ffe:	623b      	str	r3, [r7, #32]
20005000:	e047      	b.n	20005092 <TFTDisplay_ILI9341_DrawChar+0x17a>
    {
      if(line & (1 << (width- j + offset- 1))) 
20005002:	8aba      	ldrh	r2, [r7, #20]
20005004:	6a3b      	ldr	r3, [r7, #32]
20005006:	1ad2      	subs	r2, r2, r3
20005008:	7cfb      	ldrb	r3, [r7, #19]
2000500a:	4413      	add	r3, r2
2000500c:	3b01      	subs	r3, #1
2000500e:	2201      	movs	r2, #1
20005010:	fa02 f303 	lsl.w	r3, r2, r3
20005014:	461a      	mov	r2, r3
20005016:	69bb      	ldr	r3, [r7, #24]
20005018:	4013      	ands	r3, r2
2000501a:	2b00      	cmp	r3, #0
2000501c:	d01b      	beq.n	20005056 <TFTDisplay_ILI9341_DrawChar+0x13e>
      {
    	DataBuffer[(i*width + j) * 2] = lcdprop.TextColor >> 8;
2000501e:	4b37      	ldr	r3, [pc, #220]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20005020:	881b      	ldrh	r3, [r3, #0]
20005022:	0a1b      	lsrs	r3, r3, #8
20005024:	b299      	uxth	r1, r3
20005026:	8abb      	ldrh	r3, [r7, #20]
20005028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000502a:	fb03 f202 	mul.w	r2, r3, r2
2000502e:	6a3b      	ldr	r3, [r7, #32]
20005030:	4413      	add	r3, r2
20005032:	005b      	lsls	r3, r3, #1
20005034:	b2c9      	uxtb	r1, r1
20005036:	4a32      	ldr	r2, [pc, #200]	; (20005100 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20005038:	54d1      	strb	r1, [r2, r3]
    	DataBuffer[(i*width + j)*2+1] = lcdprop.TextColor & 0xFF;
2000503a:	4b30      	ldr	r3, [pc, #192]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000503c:	8819      	ldrh	r1, [r3, #0]
2000503e:	8abb      	ldrh	r3, [r7, #20]
20005040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20005042:	fb03 f202 	mul.w	r2, r3, r2
20005046:	6a3b      	ldr	r3, [r7, #32]
20005048:	4413      	add	r3, r2
2000504a:	005b      	lsls	r3, r3, #1
2000504c:	3301      	adds	r3, #1
2000504e:	b2c9      	uxtb	r1, r1
20005050:	4a2b      	ldr	r2, [pc, #172]	; (20005100 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20005052:	54d1      	strb	r1, [r2, r3]
20005054:	e01a      	b.n	2000508c <TFTDisplay_ILI9341_DrawChar+0x174>
      }
      else
      {
    	DataBuffer[(i*width + j)*2] = lcdprop.BackColor >> 8;
20005056:	4b29      	ldr	r3, [pc, #164]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20005058:	885b      	ldrh	r3, [r3, #2]
2000505a:	0a1b      	lsrs	r3, r3, #8
2000505c:	b299      	uxth	r1, r3
2000505e:	8abb      	ldrh	r3, [r7, #20]
20005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20005062:	fb03 f202 	mul.w	r2, r3, r2
20005066:	6a3b      	ldr	r3, [r7, #32]
20005068:	4413      	add	r3, r2
2000506a:	005b      	lsls	r3, r3, #1
2000506c:	b2c9      	uxtb	r1, r1
2000506e:	4a24      	ldr	r2, [pc, #144]	; (20005100 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20005070:	54d1      	strb	r1, [r2, r3]
        DataBuffer[(i*width + j)*2+1] = lcdprop.BackColor & 0xFF;
20005072:	4b22      	ldr	r3, [pc, #136]	; (200050fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20005074:	8859      	ldrh	r1, [r3, #2]
20005076:	8abb      	ldrh	r3, [r7, #20]
20005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000507a:	fb03 f202 	mul.w	r2, r3, r2
2000507e:	6a3b      	ldr	r3, [r7, #32]
20005080:	4413      	add	r3, r2
20005082:	005b      	lsls	r3, r3, #1
20005084:	3301      	adds	r3, #1
20005086:	b2c9      	uxtb	r1, r1
20005088:	4a1d      	ldr	r2, [pc, #116]	; (20005100 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
2000508a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < width; j++)
2000508c:	6a3b      	ldr	r3, [r7, #32]
2000508e:	3301      	adds	r3, #1
20005090:	623b      	str	r3, [r7, #32]
20005092:	8abb      	ldrh	r3, [r7, #20]
20005094:	6a3a      	ldr	r2, [r7, #32]
20005096:	429a      	cmp	r2, r3
20005098:	d3b3      	bcc.n	20005002 <TFTDisplay_ILI9341_DrawChar+0xea>
      } 
    }
    y_cur++;
2000509a:	8bfb      	ldrh	r3, [r7, #30]
2000509c:	3301      	adds	r3, #1
2000509e:	83fb      	strh	r3, [r7, #30]
  for(i = 0; i < height; i++)
200050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200050a2:	3301      	adds	r3, #1
200050a4:	627b      	str	r3, [r7, #36]	; 0x24
200050a6:	8afb      	ldrh	r3, [r7, #22]
200050a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200050aa:	429a      	cmp	r2, r3
200050ac:	f4ff af73 	bcc.w	20004f96 <TFTDisplay_ILI9341_DrawChar+0x7e>
  }

  DmaSpiCnt = 1;
200050b0:	4b14      	ldr	r3, [pc, #80]	; (20005104 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
200050b2:	2201      	movs	r2, #1
200050b4:	601a      	str	r2, [r3, #0]
  tftDisplay_ILI9341_SetAddrWindow(x, y, x+width-1, y+height-1);
200050b6:	88fa      	ldrh	r2, [r7, #6]
200050b8:	8abb      	ldrh	r3, [r7, #20]
200050ba:	4413      	add	r3, r2
200050bc:	b29b      	uxth	r3, r3
200050be:	3b01      	subs	r3, #1
200050c0:	b29c      	uxth	r4, r3
200050c2:	88ba      	ldrh	r2, [r7, #4]
200050c4:	8afb      	ldrh	r3, [r7, #22]
200050c6:	4413      	add	r3, r2
200050c8:	b29b      	uxth	r3, r3
200050ca:	3b01      	subs	r3, #1
200050cc:	b29b      	uxth	r3, r3
200050ce:	88b9      	ldrh	r1, [r7, #4]
200050d0:	88f8      	ldrh	r0, [r7, #6]
200050d2:	4622      	mov	r2, r4
200050d4:	f000 f9dc 	bl	20005490 <tftDisplay_ILI9341_SetAddrWindow>
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], width * height * 2, DmaSpiCnt);
200050d8:	8abb      	ldrh	r3, [r7, #20]
200050da:	8afa      	ldrh	r2, [r7, #22]
200050dc:	fb02 f303 	mul.w	r3, r2, r3
200050e0:	005b      	lsls	r3, r3, #1
200050e2:	4619      	mov	r1, r3
200050e4:	4b07      	ldr	r3, [pc, #28]	; (20005104 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
200050e6:	681b      	ldr	r3, [r3, #0]
200050e8:	b2db      	uxtb	r3, r3
200050ea:	461a      	mov	r2, r3
200050ec:	4804      	ldr	r0, [pc, #16]	; (20005100 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200050ee:	f000 f92f 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
200050f2:	bf00      	nop
200050f4:	372c      	adds	r7, #44	; 0x2c
200050f6:	46bd      	mov	sp, r7
200050f8:	bd90      	pop	{r4, r7, pc}
200050fa:	bf00      	nop
200050fc:	2001f40c 	.word	0x2001f40c
20005100:	2000f40c 	.word	0x2000f40c
20005104:	2000a8c8 	.word	0x2000a8c8

20005108 <TFTDisplay_ILI9341_SetRotation>:
      (void)*str++;
  }
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_SetRotation(uint8_t RotationSelectVal)
{
20005108:	b580      	push	{r7, lr}
2000510a:	b082      	sub	sp, #8
2000510c:	af00      	add	r7, sp, #0
2000510e:	4603      	mov	r3, r0
20005110:	71fb      	strb	r3, [r7, #7]
  tftDisplay_ILI9341_SendCommand(0x36);
20005112:	2036      	movs	r0, #54	; 0x36
20005114:	f000 f850 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
  switch(RotationSelectVal)
20005118:	79fb      	ldrb	r3, [r7, #7]
2000511a:	2b03      	cmp	r3, #3
2000511c:	d842      	bhi.n	200051a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
2000511e:	a201      	add	r2, pc, #4	; (adr r2, 20005124 <TFTDisplay_ILI9341_SetRotation+0x1c>)
20005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20005124:	20005135 	.word	0x20005135
20005128:	20005151 	.word	0x20005151
2000512c:	2000516d 	.word	0x2000516d
20005130:	20005189 	.word	0x20005189
  {
    case 0:
      DataBuffer[0] = ORIENTATION_PORTRAIT;
20005134:	4b1d      	ldr	r3, [pc, #116]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20005136:	2248      	movs	r2, #72	; 0x48
20005138:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000513a:	481c      	ldr	r0, [pc, #112]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000513c:	f000 f8bc 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20005140:	4b1b      	ldr	r3, [pc, #108]	; (200051b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
20005142:	22f0      	movs	r2, #240	; 0xf0
20005144:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
20005146:	4b1b      	ldr	r3, [pc, #108]	; (200051b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
20005148:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000514c:	801a      	strh	r2, [r3, #0]
      break;
2000514e:	e029      	b.n	200051a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 1:
      DataBuffer[0] = ORIENTATION_LANDSCAPE;
20005150:	4b16      	ldr	r3, [pc, #88]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20005152:	2228      	movs	r2, #40	; 0x28
20005154:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005156:	4815      	ldr	r0, [pc, #84]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20005158:	f000 f8ae 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
2000515c:	4b14      	ldr	r3, [pc, #80]	; (200051b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000515e:	f44f 72a0 	mov.w	r2, #320	; 0x140
20005162:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
20005164:	4b13      	ldr	r3, [pc, #76]	; (200051b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
20005166:	22f0      	movs	r2, #240	; 0xf0
20005168:	801a      	strh	r2, [r3, #0]
      break;
2000516a:	e01b      	b.n	200051a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 2:
      DataBuffer[0] = ORIENTATION_PORTRAIT_MIRROR;
2000516c:	4b0f      	ldr	r3, [pc, #60]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000516e:	2288      	movs	r2, #136	; 0x88
20005170:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005172:	480e      	ldr	r0, [pc, #56]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20005174:	f000 f8a0 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20005178:	4b0d      	ldr	r3, [pc, #52]	; (200051b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000517a:	22f0      	movs	r2, #240	; 0xf0
2000517c:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
2000517e:	4b0d      	ldr	r3, [pc, #52]	; (200051b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
20005180:	f44f 72a0 	mov.w	r2, #320	; 0x140
20005184:	801a      	strh	r2, [r3, #0]
      break;
20005186:	e00d      	b.n	200051a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 3:
      DataBuffer[0] = ORIENTATION_LANDSCAPE_MIRROR;
20005188:	4b08      	ldr	r3, [pc, #32]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000518a:	22e8      	movs	r2, #232	; 0xe8
2000518c:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000518e:	4807      	ldr	r0, [pc, #28]	; (200051ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20005190:	f000 f892 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20005194:	4b06      	ldr	r3, [pc, #24]	; (200051b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
20005196:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000519a:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
2000519c:	4b05      	ldr	r3, [pc, #20]	; (200051b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
2000519e:	22f0      	movs	r2, #240	; 0xf0
200051a0:	801a      	strh	r2, [r3, #0]
      break;
200051a2:	bf00      	nop
  }
}
200051a4:	bf00      	nop
200051a6:	3708      	adds	r7, #8
200051a8:	46bd      	mov	sp, r7
200051aa:	bd80      	pop	{r7, pc}
200051ac:	2000f40c 	.word	0x2000f40c
200051b0:	2000f408 	.word	0x2000f408
200051b4:	2000f40a 	.word	0x2000f40a

200051b8 <tftDisplay_ILI9341_SendCommand>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void tftDisplay_ILI9341_SendCommand(uint8_t command)
{
200051b8:	b5b0      	push	{r4, r5, r7, lr}
200051ba:	b084      	sub	sp, #16
200051bc:	af02      	add	r7, sp, #8
200051be:	4603      	mov	r3, r0
200051c0:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
200051c2:	2104      	movs	r1, #4
200051c4:	481d      	ldr	r0, [pc, #116]	; (2000523c <tftDisplay_ILI9341_SendCommand+0x84>)
200051c6:	f7ff faf1 	bl	200047ac <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_COMMAND();
200051ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200051ce:	481c      	ldr	r0, [pc, #112]	; (20005240 <tftDisplay_ILI9341_SendCommand+0x88>)
200051d0:	f7ff faec 	bl	200047ac <LL_GPIO_ResetOutputPin>
	DmaSpiCnt = 1;
200051d4:	4b1b      	ldr	r3, [pc, #108]	; (20005244 <tftDisplay_ILI9341_SendCommand+0x8c>)
200051d6:	2201      	movs	r2, #1
200051d8:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200051da:	2104      	movs	r1, #4
200051dc:	481a      	ldr	r0, [pc, #104]	; (20005248 <tftDisplay_ILI9341_SendCommand+0x90>)
200051de:	f7ff fb67 	bl	200048b0 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
200051e2:	2201      	movs	r2, #1
200051e4:	2104      	movs	r1, #4
200051e6:	4818      	ldr	r0, [pc, #96]	; (20005248 <tftDisplay_ILI9341_SendCommand+0x90>)
200051e8:	f7ff fb9a 	bl	20004920 <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4, (uint32_t)&command,
200051ec:	1dfc      	adds	r4, r7, #7
200051ee:	4817      	ldr	r0, [pc, #92]	; (2000524c <tftDisplay_ILI9341_SendCommand+0x94>)
200051f0:	f7ff fb11 	bl	20004816 <LL_SPI_DMA_GetRegAddr>
200051f4:	4605      	mov	r5, r0
200051f6:	2104      	movs	r1, #4
200051f8:	4813      	ldr	r0, [pc, #76]	; (20005248 <tftDisplay_ILI9341_SendCommand+0x90>)
200051fa:	f7ff fb79 	bl	200048f0 <LL_DMA_GetDataTransferDirection>
200051fe:	4603      	mov	r3, r0
20005200:	9300      	str	r3, [sp, #0]
20005202:	462b      	mov	r3, r5
20005204:	4622      	mov	r2, r4
20005206:	2104      	movs	r1, #4
20005208:	480f      	ldr	r0, [pc, #60]	; (20005248 <tftDisplay_ILI9341_SendCommand+0x90>)
2000520a:	f7ff fbad 	bl	20004968 <LL_DMA_ConfigAddresses>
			LL_SPI_DMA_GetRegAddr(SPI5), LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
2000520e:	2104      	movs	r1, #4
20005210:	480d      	ldr	r0, [pc, #52]	; (20005248 <tftDisplay_ILI9341_SendCommand+0x90>)
20005212:	f7ff fb2d 	bl	20004870 <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20005216:	bf00      	nop
20005218:	4b0d      	ldr	r3, [pc, #52]	; (20005250 <tftDisplay_ILI9341_SendCommand+0x98>)
2000521a:	681b      	ldr	r3, [r3, #0]
2000521c:	f003 0301 	and.w	r3, r3, #1
20005220:	2b00      	cmp	r3, #0
20005222:	d1f9      	bne.n	20005218 <tftDisplay_ILI9341_SendCommand+0x60>
20005224:	4b08      	ldr	r3, [pc, #32]	; (20005248 <tftDisplay_ILI9341_SendCommand+0x90>)
20005226:	685b      	ldr	r3, [r3, #4]
20005228:	f003 0320 	and.w	r3, r3, #32
2000522c:	2b00      	cmp	r3, #0
2000522e:	d1f3      	bne.n	20005218 <tftDisplay_ILI9341_SendCommand+0x60>
}
20005230:	bf00      	nop
20005232:	bf00      	nop
20005234:	3708      	adds	r7, #8
20005236:	46bd      	mov	sp, r7
20005238:	bdb0      	pop	{r4, r5, r7, pc}
2000523a:	bf00      	nop
2000523c:	40020800 	.word	0x40020800
20005240:	40020c00 	.word	0x40020c00
20005244:	2000a8c8 	.word	0x2000a8c8
20005248:	40026400 	.word	0x40026400
2000524c:	40015000 	.word	0x40015000
20005250:	40026470 	.word	0x40026470

20005254 <tftDisplay_ILI9341_SendData>:
static void tftDisplay_ILI9341_SendData(uint8_t data)
{
20005254:	b580      	push	{r7, lr}
20005256:	b082      	sub	sp, #8
20005258:	af00      	add	r7, sp, #0
2000525a:	4603      	mov	r3, r0
2000525c:	71fb      	strb	r3, [r7, #7]
//	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
//
//	  while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
//	  //CS_DESELECT();

	CS_ACTIVE();
2000525e:	2104      	movs	r1, #4
20005260:	4812      	ldr	r0, [pc, #72]	; (200052ac <tftDisplay_ILI9341_SendData+0x58>)
20005262:	f7ff faa3 	bl	200047ac <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
20005266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000526a:	4811      	ldr	r0, [pc, #68]	; (200052b0 <tftDisplay_ILI9341_SendData+0x5c>)
2000526c:	f7ff fa90 	bl	20004790 <LL_GPIO_SetOutputPin>
    while(!LL_SPI_IsActiveFlag_TXE(SPI5)) {}
20005270:	bf00      	nop
20005272:	4810      	ldr	r0, [pc, #64]	; (200052b4 <tftDisplay_ILI9341_SendData+0x60>)
20005274:	f7ff fabc 	bl	200047f0 <LL_SPI_IsActiveFlag_TXE>
20005278:	4603      	mov	r3, r0
2000527a:	2b00      	cmp	r3, #0
2000527c:	d0f9      	beq.n	20005272 <tftDisplay_ILI9341_SendData+0x1e>
	LL_SPI_TransmitData8 (SPI5, data);
2000527e:	79fb      	ldrb	r3, [r7, #7]
20005280:	4619      	mov	r1, r3
20005282:	480c      	ldr	r0, [pc, #48]	; (200052b4 <tftDisplay_ILI9341_SendData+0x60>)
20005284:	f7ff fae1 	bl	2000484a <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI5)) {}
20005288:	bf00      	nop
2000528a:	480a      	ldr	r0, [pc, #40]	; (200052b4 <tftDisplay_ILI9341_SendData+0x60>)
2000528c:	f7ff fa9d 	bl	200047ca <LL_SPI_IsActiveFlag_RXNE>
20005290:	4603      	mov	r3, r0
20005292:	2b00      	cmp	r3, #0
20005294:	d0f9      	beq.n	2000528a <tftDisplay_ILI9341_SendData+0x36>
	LL_SPI_ReceiveData8(SPI5);
20005296:	4807      	ldr	r0, [pc, #28]	; (200052b4 <tftDisplay_ILI9341_SendData+0x60>)
20005298:	f7ff fac9 	bl	2000482e <LL_SPI_ReceiveData8>
	CS_DESELECT();
2000529c:	2104      	movs	r1, #4
2000529e:	4803      	ldr	r0, [pc, #12]	; (200052ac <tftDisplay_ILI9341_SendData+0x58>)
200052a0:	f7ff fa76 	bl	20004790 <LL_GPIO_SetOutputPin>
}
200052a4:	bf00      	nop
200052a6:	3708      	adds	r7, #8
200052a8:	46bd      	mov	sp, r7
200052aa:	bd80      	pop	{r7, pc}
200052ac:	40020800 	.word	0x40020800
200052b0:	40020c00 	.word	0x40020c00
200052b4:	40015000 	.word	0x40015000

200052b8 <tftDisplay_ILI9341_SendSingleData>:

static void tftDisplay_ILI9341_SendSingleData(uint32_t* BufferPtr)
{
200052b8:	b5b0      	push	{r4, r5, r7, lr}
200052ba:	b084      	sub	sp, #16
200052bc:	af02      	add	r7, sp, #8
200052be:	6078      	str	r0, [r7, #4]
	CS_ACTIVE();
200052c0:	2104      	movs	r1, #4
200052c2:	481d      	ldr	r0, [pc, #116]	; (20005338 <tftDisplay_ILI9341_SendSingleData+0x80>)
200052c4:	f7ff fa72 	bl	200047ac <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200052c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200052cc:	481b      	ldr	r0, [pc, #108]	; (2000533c <tftDisplay_ILI9341_SendSingleData+0x84>)
200052ce:	f7ff fa5f 	bl	20004790 <LL_GPIO_SetOutputPin>
	DmaSpiCnt = 1;
200052d2:	4b1b      	ldr	r3, [pc, #108]	; (20005340 <tftDisplay_ILI9341_SendSingleData+0x88>)
200052d4:	2201      	movs	r2, #1
200052d6:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200052d8:	2104      	movs	r1, #4
200052da:	481a      	ldr	r0, [pc, #104]	; (20005344 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200052dc:	f7ff fae8 	bl	200048b0 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
200052e0:	2201      	movs	r2, #1
200052e2:	2104      	movs	r1, #4
200052e4:	4817      	ldr	r0, [pc, #92]	; (20005344 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200052e6:	f7ff fb1b 	bl	20004920 <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
200052ea:	687c      	ldr	r4, [r7, #4]
200052ec:	4816      	ldr	r0, [pc, #88]	; (20005348 <tftDisplay_ILI9341_SendSingleData+0x90>)
200052ee:	f7ff fa92 	bl	20004816 <LL_SPI_DMA_GetRegAddr>
200052f2:	4605      	mov	r5, r0
200052f4:	2104      	movs	r1, #4
200052f6:	4813      	ldr	r0, [pc, #76]	; (20005344 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200052f8:	f7ff fafa 	bl	200048f0 <LL_DMA_GetDataTransferDirection>
200052fc:	4603      	mov	r3, r0
200052fe:	9300      	str	r3, [sp, #0]
20005300:	462b      	mov	r3, r5
20005302:	4622      	mov	r2, r4
20005304:	2104      	movs	r1, #4
20005306:	480f      	ldr	r0, [pc, #60]	; (20005344 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20005308:	f7ff fb2e 	bl	20004968 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
2000530c:	2104      	movs	r1, #4
2000530e:	480d      	ldr	r0, [pc, #52]	; (20005344 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20005310:	f7ff faae 	bl	20004870 <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20005314:	bf00      	nop
20005316:	4b0d      	ldr	r3, [pc, #52]	; (2000534c <tftDisplay_ILI9341_SendSingleData+0x94>)
20005318:	681b      	ldr	r3, [r3, #0]
2000531a:	f003 0301 	and.w	r3, r3, #1
2000531e:	2b00      	cmp	r3, #0
20005320:	d1f9      	bne.n	20005316 <tftDisplay_ILI9341_SendSingleData+0x5e>
20005322:	4b08      	ldr	r3, [pc, #32]	; (20005344 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20005324:	685b      	ldr	r3, [r3, #4]
20005326:	f003 0320 	and.w	r3, r3, #32
2000532a:	2b00      	cmp	r3, #0
2000532c:	d1f3      	bne.n	20005316 <tftDisplay_ILI9341_SendSingleData+0x5e>
}
2000532e:	bf00      	nop
20005330:	bf00      	nop
20005332:	3708      	adds	r7, #8
20005334:	46bd      	mov	sp, r7
20005336:	bdb0      	pop	{r4, r5, r7, pc}
20005338:	40020800 	.word	0x40020800
2000533c:	40020c00 	.word	0x40020c00
20005340:	2000a8c8 	.word	0x2000a8c8
20005344:	40026400 	.word	0x40026400
20005348:	40015000 	.word	0x40015000
2000534c:	40026470 	.word	0x40026470

20005350 <tftDisplay_ILI9341_WriteMultipleData>:

static void tftDisplay_ILI9341_WriteMultipleData(uint32_t* BufferPtr, uint32_t BufferSize, uint8_t DmaCount)
{
20005350:	b5b0      	push	{r4, r5, r7, lr}
20005352:	b086      	sub	sp, #24
20005354:	af02      	add	r7, sp, #8
20005356:	60f8      	str	r0, [r7, #12]
20005358:	60b9      	str	r1, [r7, #8]
2000535a:	4613      	mov	r3, r2
2000535c:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
2000535e:	2104      	movs	r1, #4
20005360:	481d      	ldr	r0, [pc, #116]	; (200053d8 <tftDisplay_ILI9341_WriteMultipleData+0x88>)
20005362:	f7ff fa23 	bl	200047ac <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
20005366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000536a:	481c      	ldr	r0, [pc, #112]	; (200053dc <tftDisplay_ILI9341_WriteMultipleData+0x8c>)
2000536c:	f7ff fa10 	bl	20004790 <LL_GPIO_SetOutputPin>
	DmaSpiCnt = DmaCount;
20005370:	79fb      	ldrb	r3, [r7, #7]
20005372:	4a1b      	ldr	r2, [pc, #108]	; (200053e0 <tftDisplay_ILI9341_WriteMultipleData+0x90>)
20005374:	6013      	str	r3, [r2, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005376:	2104      	movs	r1, #4
20005378:	481a      	ldr	r0, [pc, #104]	; (200053e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000537a:	f7ff fa99 	bl	200048b0 <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, BufferSize);
2000537e:	68ba      	ldr	r2, [r7, #8]
20005380:	2104      	movs	r1, #4
20005382:	4818      	ldr	r0, [pc, #96]	; (200053e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20005384:	f7ff facc 	bl	20004920 <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
20005388:	68fc      	ldr	r4, [r7, #12]
2000538a:	4817      	ldr	r0, [pc, #92]	; (200053e8 <tftDisplay_ILI9341_WriteMultipleData+0x98>)
2000538c:	f7ff fa43 	bl	20004816 <LL_SPI_DMA_GetRegAddr>
20005390:	4605      	mov	r5, r0
20005392:	2104      	movs	r1, #4
20005394:	4813      	ldr	r0, [pc, #76]	; (200053e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20005396:	f7ff faab 	bl	200048f0 <LL_DMA_GetDataTransferDirection>
2000539a:	4603      	mov	r3, r0
2000539c:	9300      	str	r3, [sp, #0]
2000539e:	462b      	mov	r3, r5
200053a0:	4622      	mov	r2, r4
200053a2:	2104      	movs	r1, #4
200053a4:	480f      	ldr	r0, [pc, #60]	; (200053e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200053a6:	f7ff fadf 	bl	20004968 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
200053aa:	2104      	movs	r1, #4
200053ac:	480d      	ldr	r0, [pc, #52]	; (200053e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200053ae:	f7ff fa5f 	bl	20004870 <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
200053b2:	bf00      	nop
200053b4:	4b0d      	ldr	r3, [pc, #52]	; (200053ec <tftDisplay_ILI9341_WriteMultipleData+0x9c>)
200053b6:	681b      	ldr	r3, [r3, #0]
200053b8:	f003 0301 	and.w	r3, r3, #1
200053bc:	2b00      	cmp	r3, #0
200053be:	d1f9      	bne.n	200053b4 <tftDisplay_ILI9341_WriteMultipleData+0x64>
200053c0:	4b08      	ldr	r3, [pc, #32]	; (200053e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200053c2:	685b      	ldr	r3, [r3, #4]
200053c4:	f003 0320 	and.w	r3, r3, #32
200053c8:	2b00      	cmp	r3, #0
200053ca:	d1f3      	bne.n	200053b4 <tftDisplay_ILI9341_WriteMultipleData+0x64>
}
200053cc:	bf00      	nop
200053ce:	bf00      	nop
200053d0:	3710      	adds	r7, #16
200053d2:	46bd      	mov	sp, r7
200053d4:	bdb0      	pop	{r4, r5, r7, pc}
200053d6:	bf00      	nop
200053d8:	40020800 	.word	0x40020800
200053dc:	40020c00 	.word	0x40020c00
200053e0:	2000a8c8 	.word	0x2000a8c8
200053e4:	40026400 	.word	0x40026400
200053e8:	40015000 	.word	0x40015000
200053ec:	40026470 	.word	0x40026470

200053f0 <tftDisplay_ILI9341_Reset>:
static void tftDisplay_ILI9341_Reset(void)
{
200053f0:	b580      	push	{r7, lr}
200053f2:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
200053f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
200053f8:	4806      	ldr	r0, [pc, #24]	; (20005414 <tftDisplay_ILI9341_Reset+0x24>)
200053fa:	f7ff f9d7 	bl	200047ac <LL_GPIO_ResetOutputPin>
	LL_mDelay(5);
200053fe:	2005      	movs	r0, #5
20005400:	f7fb ff08 	bl	20001214 <LL_mDelay>
	RESET_IDLE();
20005404:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20005408:	4802      	ldr	r0, [pc, #8]	; (20005414 <tftDisplay_ILI9341_Reset+0x24>)
2000540a:	f7ff f9c1 	bl	20004790 <LL_GPIO_SetOutputPin>
}
2000540e:	bf00      	nop
20005410:	bd80      	pop	{r7, pc}
20005412:	bf00      	nop
20005414:	40020c00 	.word	0x40020c00

20005418 <tftDisplay_ILI9341_FontsInitialization>:
static void tftDisplay_ILI9341_FontsInitialization(void)
{
20005418:	b480      	push	{r7}
2000541a:	af00      	add	r7, sp, #0
  Font8.Height = 8;
2000541c:	4b16      	ldr	r3, [pc, #88]	; (20005478 <tftDisplay_ILI9341_FontsInitialization+0x60>)
2000541e:	2208      	movs	r2, #8
20005420:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
20005422:	4b15      	ldr	r3, [pc, #84]	; (20005478 <tftDisplay_ILI9341_FontsInitialization+0x60>)
20005424:	2205      	movs	r2, #5
20005426:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
20005428:	4b14      	ldr	r3, [pc, #80]	; (2000547c <tftDisplay_ILI9341_FontsInitialization+0x64>)
2000542a:	220c      	movs	r2, #12
2000542c:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
2000542e:	4b13      	ldr	r3, [pc, #76]	; (2000547c <tftDisplay_ILI9341_FontsInitialization+0x64>)
20005430:	2207      	movs	r2, #7
20005432:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
20005434:	4b12      	ldr	r3, [pc, #72]	; (20005480 <tftDisplay_ILI9341_FontsInitialization+0x68>)
20005436:	2210      	movs	r2, #16
20005438:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
2000543a:	4b11      	ldr	r3, [pc, #68]	; (20005480 <tftDisplay_ILI9341_FontsInitialization+0x68>)
2000543c:	220b      	movs	r2, #11
2000543e:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
20005440:	4b10      	ldr	r3, [pc, #64]	; (20005484 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
20005442:	2214      	movs	r2, #20
20005444:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
20005446:	4b0f      	ldr	r3, [pc, #60]	; (20005484 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
20005448:	220e      	movs	r2, #14
2000544a:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
2000544c:	4b0e      	ldr	r3, [pc, #56]	; (20005488 <tftDisplay_ILI9341_FontsInitialization+0x70>)
2000544e:	2218      	movs	r2, #24
20005450:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
20005452:	4b0d      	ldr	r3, [pc, #52]	; (20005488 <tftDisplay_ILI9341_FontsInitialization+0x70>)
20005454:	2211      	movs	r2, #17
20005456:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT_COLOR_ILI9341_BLACK;
20005458:	4b0c      	ldr	r3, [pc, #48]	; (2000548c <tftDisplay_ILI9341_FontsInitialization+0x74>)
2000545a:	2200      	movs	r2, #0
2000545c:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT_COLOR_ILI9341_GREEN;
2000545e:	4b0b      	ldr	r3, [pc, #44]	; (2000548c <tftDisplay_ILI9341_FontsInitialization+0x74>)
20005460:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
20005464:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
20005466:	4b09      	ldr	r3, [pc, #36]	; (2000548c <tftDisplay_ILI9341_FontsInitialization+0x74>)
20005468:	4a05      	ldr	r2, [pc, #20]	; (20005480 <tftDisplay_ILI9341_FontsInitialization+0x68>)
2000546a:	605a      	str	r2, [r3, #4]
}
2000546c:	bf00      	nop
2000546e:	46bd      	mov	sp, r7
20005470:	f85d 7b04 	ldr.w	r7, [sp], #4
20005474:	4770      	bx	lr
20005476:	bf00      	nop
20005478:	2000a8f4 	.word	0x2000a8f4
2000547c:	2000a8ec 	.word	0x2000a8ec
20005480:	2000a8e4 	.word	0x2000a8e4
20005484:	2000a8dc 	.word	0x2000a8dc
20005488:	2000a8d4 	.word	0x2000a8d4
2000548c:	2001f40c 	.word	0x2001f40c

20005490 <tftDisplay_ILI9341_SetAddrWindow>:
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
20005490:	b590      	push	{r4, r7, lr}
20005492:	b083      	sub	sp, #12
20005494:	af00      	add	r7, sp, #0
20005496:	4604      	mov	r4, r0
20005498:	4608      	mov	r0, r1
2000549a:	4611      	mov	r1, r2
2000549c:	461a      	mov	r2, r3
2000549e:	4623      	mov	r3, r4
200054a0:	80fb      	strh	r3, [r7, #6]
200054a2:	4603      	mov	r3, r0
200054a4:	80bb      	strh	r3, [r7, #4]
200054a6:	460b      	mov	r3, r1
200054a8:	807b      	strh	r3, [r7, #2]
200054aa:	4613      	mov	r3, r2
200054ac:	803b      	strh	r3, [r7, #0]
  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_COLUMN_ADDR);
200054ae:	202a      	movs	r0, #42	; 0x2a
200054b0:	f7ff fe82 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (x0 >> 8) & 0xFF;
200054b4:	88fb      	ldrh	r3, [r7, #6]
200054b6:	0a1b      	lsrs	r3, r3, #8
200054b8:	b29b      	uxth	r3, r3
200054ba:	b2da      	uxtb	r2, r3
200054bc:	4b1b      	ldr	r3, [pc, #108]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054be:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = x0 & 0xFF;
200054c0:	88fb      	ldrh	r3, [r7, #6]
200054c2:	b2da      	uxtb	r2, r3
200054c4:	4b19      	ldr	r3, [pc, #100]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054c6:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (x1 >> 8) & 0xFF;
200054c8:	887b      	ldrh	r3, [r7, #2]
200054ca:	0a1b      	lsrs	r3, r3, #8
200054cc:	b29b      	uxth	r3, r3
200054ce:	b2da      	uxtb	r2, r3
200054d0:	4b16      	ldr	r3, [pc, #88]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054d2:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = x1 & 0xFF;
200054d4:	887b      	ldrh	r3, [r7, #2]
200054d6:	b2da      	uxtb	r2, r3
200054d8:	4b14      	ldr	r3, [pc, #80]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054da:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
200054dc:	2201      	movs	r2, #1
200054de:	2104      	movs	r1, #4
200054e0:	4812      	ldr	r0, [pc, #72]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054e2:	f7ff ff35 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PAGE_ADDR);
200054e6:	202b      	movs	r0, #43	; 0x2b
200054e8:	f7ff fe66 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (y0 >> 8) & 0xFF;
200054ec:	88bb      	ldrh	r3, [r7, #4]
200054ee:	0a1b      	lsrs	r3, r3, #8
200054f0:	b29b      	uxth	r3, r3
200054f2:	b2da      	uxtb	r2, r3
200054f4:	4b0d      	ldr	r3, [pc, #52]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054f6:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = y0 & 0xFF;
200054f8:	88bb      	ldrh	r3, [r7, #4]
200054fa:	b2da      	uxtb	r2, r3
200054fc:	4b0b      	ldr	r3, [pc, #44]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
200054fe:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (y1 >> 8) & 0xFF;
20005500:	883b      	ldrh	r3, [r7, #0]
20005502:	0a1b      	lsrs	r3, r3, #8
20005504:	b29b      	uxth	r3, r3
20005506:	b2da      	uxtb	r2, r3
20005508:	4b08      	ldr	r3, [pc, #32]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000550a:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = y1 & 0xFF;
2000550c:	883b      	ldrh	r3, [r7, #0]
2000550e:	b2da      	uxtb	r2, r3
20005510:	4b06      	ldr	r3, [pc, #24]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20005512:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20005514:	2201      	movs	r2, #1
20005516:	2104      	movs	r1, #4
20005518:	4804      	ldr	r0, [pc, #16]	; (2000552c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000551a:	f7ff ff19 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
2000551e:	202c      	movs	r0, #44	; 0x2c
20005520:	f7ff fe4a 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
}
20005524:	bf00      	nop
20005526:	370c      	adds	r7, #12
20005528:	46bd      	mov	sp, r7
2000552a:	bd90      	pop	{r4, r7, pc}
2000552c:	2000f40c 	.word	0x2000f40c

20005530 <tftDisplay_ILI9341_Init_PowerControl_A>:
//------------------------------------------------------------------
/* Initialization static functions */
static void tftDisplay_ILI9341_Init_PowerControl_A()
{
20005530:	b580      	push	{r7, lr}
20005532:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x39;
20005534:	4b0c      	ldr	r3, [pc, #48]	; (20005568 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20005536:	2239      	movs	r2, #57	; 0x39
20005538:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x2C;
2000553a:	4b0b      	ldr	r3, [pc, #44]	; (20005568 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
2000553c:	222c      	movs	r2, #44	; 0x2c
2000553e:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x00;
20005540:	4b09      	ldr	r3, [pc, #36]	; (20005568 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20005542:	2200      	movs	r2, #0
20005544:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x34;
20005546:	4b08      	ldr	r3, [pc, #32]	; (20005568 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20005548:	2234      	movs	r2, #52	; 0x34
2000554a:	70da      	strb	r2, [r3, #3]
	DataBuffer[4] = 0x02;
2000554c:	4b06      	ldr	r3, [pc, #24]	; (20005568 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
2000554e:	2202      	movs	r2, #2
20005550:	711a      	strb	r2, [r3, #4]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERA);
20005552:	20cb      	movs	r0, #203	; 0xcb
20005554:	f7ff fe30 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 5, 1);
20005558:	2201      	movs	r2, #1
2000555a:	2105      	movs	r1, #5
2000555c:	4802      	ldr	r0, [pc, #8]	; (20005568 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
2000555e:	f7ff fef7 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
20005562:	bf00      	nop
20005564:	bd80      	pop	{r7, pc}
20005566:	bf00      	nop
20005568:	2000f40c 	.word	0x2000f40c

2000556c <tftDisplay_ILI9341_Init_PowerControl_B>:

static void tftDisplay_ILI9341_Init_PowerControl_B()
{
2000556c:	b580      	push	{r7, lr}
2000556e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20005570:	4b09      	ldr	r3, [pc, #36]	; (20005598 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20005572:	2200      	movs	r2, #0
20005574:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0xC1;
20005576:	4b08      	ldr	r3, [pc, #32]	; (20005598 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20005578:	22c1      	movs	r2, #193	; 0xc1
2000557a:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x30;
2000557c:	4b06      	ldr	r3, [pc, #24]	; (20005598 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
2000557e:	2230      	movs	r2, #48	; 0x30
20005580:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERB);
20005582:	20cf      	movs	r0, #207	; 0xcf
20005584:	f7ff fe18 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20005588:	2201      	movs	r2, #1
2000558a:	2103      	movs	r1, #3
2000558c:	4802      	ldr	r0, [pc, #8]	; (20005598 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
2000558e:	f7ff fedf 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
20005592:	bf00      	nop
20005594:	bd80      	pop	{r7, pc}
20005596:	bf00      	nop
20005598:	2000f40c 	.word	0x2000f40c

2000559c <tftDisplay_ILI9341_Init_DriverTimingControl_A>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_A()
{
2000559c:	b580      	push	{r7, lr}
2000559e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x85;
200055a0:	4b09      	ldr	r3, [pc, #36]	; (200055c8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
200055a2:	2285      	movs	r2, #133	; 0x85
200055a4:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
200055a6:	4b08      	ldr	r3, [pc, #32]	; (200055c8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
200055a8:	2200      	movs	r2, #0
200055aa:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x78;
200055ac:	4b06      	ldr	r3, [pc, #24]	; (200055c8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
200055ae:	2278      	movs	r2, #120	; 0x78
200055b0:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
200055b2:	20ea      	movs	r0, #234	; 0xea
200055b4:	f7ff fe00 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
200055b8:	2201      	movs	r2, #1
200055ba:	2103      	movs	r1, #3
200055bc:	4802      	ldr	r0, [pc, #8]	; (200055c8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
200055be:	f7ff fec7 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
200055c2:	bf00      	nop
200055c4:	bd80      	pop	{r7, pc}
200055c6:	bf00      	nop
200055c8:	2000f40c 	.word	0x2000f40c

200055cc <tftDisplay_ILI9341_Init_DriverTimingControl_B>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_B()
{
200055cc:	b580      	push	{r7, lr}
200055ce:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
200055d0:	4b07      	ldr	r3, [pc, #28]	; (200055f0 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
200055d2:	2200      	movs	r2, #0
200055d4:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
200055d6:	4b06      	ldr	r3, [pc, #24]	; (200055f0 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
200055d8:	2200      	movs	r2, #0
200055da:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
200055dc:	20ea      	movs	r0, #234	; 0xea
200055de:	f7ff fdeb 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
200055e2:	2201      	movs	r2, #1
200055e4:	2102      	movs	r1, #2
200055e6:	4802      	ldr	r0, [pc, #8]	; (200055f0 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
200055e8:	f7ff feb2 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
200055ec:	bf00      	nop
200055ee:	bd80      	pop	{r7, pc}
200055f0:	2000f40c 	.word	0x2000f40c

200055f4 <tftDisplay_ILI9341_Init_PowerSequenceControl>:

static void tftDisplay_ILI9341_Init_PowerSequenceControl()
{
200055f4:	b580      	push	{r7, lr}
200055f6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x64;
200055f8:	4b0a      	ldr	r3, [pc, #40]	; (20005624 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
200055fa:	2264      	movs	r2, #100	; 0x64
200055fc:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x03;
200055fe:	4b09      	ldr	r3, [pc, #36]	; (20005624 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20005600:	2203      	movs	r2, #3
20005602:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x12;
20005604:	4b07      	ldr	r3, [pc, #28]	; (20005624 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20005606:	2212      	movs	r2, #18
20005608:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x81;
2000560a:	4b06      	ldr	r3, [pc, #24]	; (20005624 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
2000560c:	2281      	movs	r2, #129	; 0x81
2000560e:	70da      	strb	r2, [r3, #3]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER_SEQ);
20005610:	20ed      	movs	r0, #237	; 0xed
20005612:	f7ff fdd1 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20005616:	2201      	movs	r2, #1
20005618:	2104      	movs	r1, #4
2000561a:	4802      	ldr	r0, [pc, #8]	; (20005624 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
2000561c:	f7ff fe98 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
20005620:	bf00      	nop
20005622:	bd80      	pop	{r7, pc}
20005624:	2000f40c 	.word	0x2000f40c

20005628 <tftDisplay_ILI9341_Init_PumpRatioControl>:

static void tftDisplay_ILI9341_Init_PumpRatioControl()
{
20005628:	b580      	push	{r7, lr}
2000562a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x20;
2000562c:	4b05      	ldr	r3, [pc, #20]	; (20005644 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
2000562e:	2220      	movs	r2, #32
20005630:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PRC);
20005632:	20f7      	movs	r0, #247	; 0xf7
20005634:	f7ff fdc0 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005638:	4802      	ldr	r0, [pc, #8]	; (20005644 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
2000563a:	f7ff fe3d 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
2000563e:	bf00      	nop
20005640:	bd80      	pop	{r7, pc}
20005642:	bf00      	nop
20005644:	2000f40c 	.word	0x2000f40c

20005648 <tftDisplay_ILI9341_Init_PowerControlVRH>:

static void tftDisplay_ILI9341_Init_PowerControlVRH()
{
20005648:	b580      	push	{r7, lr}
2000564a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
2000564c:	4b05      	ldr	r3, [pc, #20]	; (20005664 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
2000564e:	2210      	movs	r2, #16
20005650:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER1);
20005652:	20c0      	movs	r0, #192	; 0xc0
20005654:	f7ff fdb0 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005658:	4802      	ldr	r0, [pc, #8]	; (20005664 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
2000565a:	f7ff fe2d 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
2000565e:	bf00      	nop
20005660:	bd80      	pop	{r7, pc}
20005662:	bf00      	nop
20005664:	2000f40c 	.word	0x2000f40c

20005668 <tftDisplay_ILI9341_Init_PowerControlSAP>:

static void tftDisplay_ILI9341_Init_PowerControlSAP()
{
20005668:	b580      	push	{r7, lr}
2000566a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
2000566c:	4b05      	ldr	r3, [pc, #20]	; (20005684 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
2000566e:	2210      	movs	r2, #16
20005670:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER2);
20005672:	20c1      	movs	r0, #193	; 0xc1
20005674:	f7ff fda0 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005678:	4802      	ldr	r0, [pc, #8]	; (20005684 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
2000567a:	f7ff fe1d 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
2000567e:	bf00      	nop
20005680:	bd80      	pop	{r7, pc}
20005682:	bf00      	nop
20005684:	2000f40c 	.word	0x2000f40c

20005688 <tftDisplay_ILI9341_Init_VCOMControl_1>:

static void tftDisplay_ILI9341_Init_VCOMControl_1()
{
20005688:	b580      	push	{r7, lr}
2000568a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x3E;
2000568c:	4b07      	ldr	r3, [pc, #28]	; (200056ac <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
2000568e:	223e      	movs	r2, #62	; 0x3e
20005690:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x28;
20005692:	4b06      	ldr	r3, [pc, #24]	; (200056ac <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20005694:	2228      	movs	r2, #40	; 0x28
20005696:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM1);
20005698:	20c5      	movs	r0, #197	; 0xc5
2000569a:	f7ff fd8d 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
2000569e:	2201      	movs	r2, #1
200056a0:	2102      	movs	r1, #2
200056a2:	4802      	ldr	r0, [pc, #8]	; (200056ac <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
200056a4:	f7ff fe54 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
200056a8:	bf00      	nop
200056aa:	bd80      	pop	{r7, pc}
200056ac:	2000f40c 	.word	0x2000f40c

200056b0 <tftDisplay_ILI9341_Init_VCOMControl_2>:

static void tftDisplay_ILI9341_Init_VCOMControl_2()
{
200056b0:	b580      	push	{r7, lr}
200056b2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x86;
200056b4:	4b05      	ldr	r3, [pc, #20]	; (200056cc <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
200056b6:	2286      	movs	r2, #134	; 0x86
200056b8:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM2);
200056ba:	20c7      	movs	r0, #199	; 0xc7
200056bc:	f7ff fd7c 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200056c0:	4802      	ldr	r0, [pc, #8]	; (200056cc <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
200056c2:	f7ff fdf9 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
200056c6:	bf00      	nop
200056c8:	bd80      	pop	{r7, pc}
200056ca:	bf00      	nop
200056cc:	2000f40c 	.word	0x2000f40c

200056d0 <tftDisplay_ILI9341_Init_MemmoryAccessControl>:

static void tftDisplay_ILI9341_Init_MemmoryAccessControl()
{
200056d0:	b580      	push	{r7, lr}
200056d2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x48;
200056d4:	4b05      	ldr	r3, [pc, #20]	; (200056ec <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
200056d6:	2248      	movs	r2, #72	; 0x48
200056d8:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_MAC);
200056da:	2036      	movs	r0, #54	; 0x36
200056dc:	f7ff fd6c 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200056e0:	4802      	ldr	r0, [pc, #8]	; (200056ec <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
200056e2:	f7ff fde9 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
200056e6:	bf00      	nop
200056e8:	bd80      	pop	{r7, pc}
200056ea:	bf00      	nop
200056ec:	2000f40c 	.word	0x2000f40c

200056f0 <tftDisplay_ILI9341_Init_PixelFormatSet>:

static void tftDisplay_ILI9341_Init_PixelFormatSet()
{
200056f0:	b580      	push	{r7, lr}
200056f2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x55;
200056f4:	4b05      	ldr	r3, [pc, #20]	; (2000570c <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
200056f6:	2255      	movs	r2, #85	; 0x55
200056f8:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PIXEL_FORMAT);
200056fa:	203a      	movs	r0, #58	; 0x3a
200056fc:	f7ff fd5c 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005700:	4802      	ldr	r0, [pc, #8]	; (2000570c <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20005702:	f7ff fdd9 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
20005706:	bf00      	nop
20005708:	bd80      	pop	{r7, pc}
2000570a:	bf00      	nop
2000570c:	2000f40c 	.word	0x2000f40c

20005710 <tftDisplay_ILI9341_Init_FrameRationControl>:

static void tftDisplay_ILI9341_Init_FrameRationControl()
{
20005710:	b580      	push	{r7, lr}
20005712:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20005714:	4b07      	ldr	r3, [pc, #28]	; (20005734 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20005716:	2200      	movs	r2, #0
20005718:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x18;
2000571a:	4b06      	ldr	r3, [pc, #24]	; (20005734 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
2000571c:	2218      	movs	r2, #24
2000571e:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_FRMCTR1);
20005720:	20b1      	movs	r0, #177	; 0xb1
20005722:	f7ff fd49 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20005726:	2201      	movs	r2, #1
20005728:	2102      	movs	r1, #2
2000572a:	4802      	ldr	r0, [pc, #8]	; (20005734 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
2000572c:	f7ff fe10 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
20005730:	bf00      	nop
20005732:	bd80      	pop	{r7, pc}
20005734:	2000f40c 	.word	0x2000f40c

20005738 <tftDisplay_ILI9341_Init_DisplayFunctionControl>:

static void tftDisplay_ILI9341_Init_DisplayFunctionControl()
{
20005738:	b580      	push	{r7, lr}
2000573a:	af00      	add	r7, sp, #0
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DFC);
2000573c:	20b6      	movs	r0, #182	; 0xb6
2000573e:	f7ff fd3b 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(0x08);
20005742:	2008      	movs	r0, #8
20005744:	f7ff fd86 	bl	20005254 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x82);
20005748:	2082      	movs	r0, #130	; 0x82
2000574a:	f7ff fd83 	bl	20005254 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x27);
2000574e:	2027      	movs	r0, #39	; 0x27
20005750:	f7ff fd80 	bl	20005254 <tftDisplay_ILI9341_SendData>
}
20005754:	bf00      	nop
20005756:	bd80      	pop	{r7, pc}

20005758 <tftDisplay_ILI9341_Init_GammaSet>:

static void tftDisplay_ILI9341_Init_GammaSet()
{
20005758:	b580      	push	{r7, lr}
2000575a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x01;
2000575c:	4b05      	ldr	r3, [pc, #20]	; (20005774 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
2000575e:	2201      	movs	r2, #1
20005760:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GAMMA);
20005762:	2026      	movs	r0, #38	; 0x26
20005764:	f7ff fd28 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20005768:	4802      	ldr	r0, [pc, #8]	; (20005774 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
2000576a:	f7ff fda5 	bl	200052b8 <tftDisplay_ILI9341_SendSingleData>
}
2000576e:	bf00      	nop
20005770:	bd80      	pop	{r7, pc}
20005772:	bf00      	nop
20005774:	2000f40c 	.word	0x2000f40c

20005778 <tftDisplay_ILI9341_Init_PositiveGammaCorection>:

static void tftDisplay_ILI9341_Init_PositiveGammaCorection()
{
20005778:	b580      	push	{r7, lr}
2000577a:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x0F;
2000577c:	4b1b      	ldr	r3, [pc, #108]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000577e:	220f      	movs	r2, #15
20005780:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x31;
20005782:	4b1a      	ldr	r3, [pc, #104]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005784:	2231      	movs	r2, #49	; 0x31
20005786:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x2B;
20005788:	4b18      	ldr	r3, [pc, #96]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000578a:	222b      	movs	r2, #43	; 0x2b
2000578c:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x0C;
2000578e:	4b17      	ldr	r3, [pc, #92]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005790:	220c      	movs	r2, #12
20005792:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x0E;
20005794:	4b15      	ldr	r3, [pc, #84]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20005796:	220e      	movs	r2, #14
20005798:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x08;
2000579a:	4b14      	ldr	r3, [pc, #80]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000579c:	2208      	movs	r2, #8
2000579e:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x4E;
200057a0:	4b12      	ldr	r3, [pc, #72]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057a2:	224e      	movs	r2, #78	; 0x4e
200057a4:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xF1;
200057a6:	4b11      	ldr	r3, [pc, #68]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057a8:	22f1      	movs	r2, #241	; 0xf1
200057aa:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x37;
200057ac:	4b0f      	ldr	r3, [pc, #60]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057ae:	2237      	movs	r2, #55	; 0x37
200057b0:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x07;
200057b2:	4b0e      	ldr	r3, [pc, #56]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057b4:	2207      	movs	r2, #7
200057b6:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x10;
200057b8:	4b0c      	ldr	r3, [pc, #48]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057ba:	2210      	movs	r2, #16
200057bc:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x03;
200057be:	4b0b      	ldr	r3, [pc, #44]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057c0:	2203      	movs	r2, #3
200057c2:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x0E;
200057c4:	4b09      	ldr	r3, [pc, #36]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057c6:	220e      	movs	r2, #14
200057c8:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x09;
200057ca:	4b08      	ldr	r3, [pc, #32]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057cc:	2209      	movs	r2, #9
200057ce:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x00;
200057d0:	4b06      	ldr	r3, [pc, #24]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057d2:	2200      	movs	r2, #0
200057d4:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PGAMMA);
200057d6:	20e0      	movs	r0, #224	; 0xe0
200057d8:	f7ff fcee 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
200057dc:	2201      	movs	r2, #1
200057de:	210f      	movs	r1, #15
200057e0:	4802      	ldr	r0, [pc, #8]	; (200057ec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200057e2:	f7ff fdb5 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
200057e6:	bf00      	nop
200057e8:	bd80      	pop	{r7, pc}
200057ea:	bf00      	nop
200057ec:	2000f40c 	.word	0x2000f40c

200057f0 <tftDisplay_ILI9341_Init_NegativeGammaCorection>:

static void tftDisplay_ILI9341_Init_NegativeGammaCorection()
{
200057f0:	b580      	push	{r7, lr}
200057f2:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x00;
200057f4:	4b1b      	ldr	r3, [pc, #108]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200057f6:	2200      	movs	r2, #0
200057f8:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x0E;
200057fa:	4b1a      	ldr	r3, [pc, #104]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200057fc:	220e      	movs	r2, #14
200057fe:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x14;
20005800:	4b18      	ldr	r3, [pc, #96]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005802:	2214      	movs	r2, #20
20005804:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x03;
20005806:	4b17      	ldr	r3, [pc, #92]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005808:	2203      	movs	r2, #3
2000580a:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x11;
2000580c:	4b15      	ldr	r3, [pc, #84]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000580e:	2211      	movs	r2, #17
20005810:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x07;
20005812:	4b14      	ldr	r3, [pc, #80]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005814:	2207      	movs	r2, #7
20005816:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x31;
20005818:	4b12      	ldr	r3, [pc, #72]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000581a:	2231      	movs	r2, #49	; 0x31
2000581c:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xC1;
2000581e:	4b11      	ldr	r3, [pc, #68]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005820:	22c1      	movs	r2, #193	; 0xc1
20005822:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x48;
20005824:	4b0f      	ldr	r3, [pc, #60]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005826:	2248      	movs	r2, #72	; 0x48
20005828:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x08;
2000582a:	4b0e      	ldr	r3, [pc, #56]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000582c:	2208      	movs	r2, #8
2000582e:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x0F;
20005830:	4b0c      	ldr	r3, [pc, #48]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005832:	220f      	movs	r2, #15
20005834:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x0C;
20005836:	4b0b      	ldr	r3, [pc, #44]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005838:	220c      	movs	r2, #12
2000583a:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x31;
2000583c:	4b09      	ldr	r3, [pc, #36]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000583e:	2231      	movs	r2, #49	; 0x31
20005840:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x36;
20005842:	4b08      	ldr	r3, [pc, #32]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20005844:	2236      	movs	r2, #54	; 0x36
20005846:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x0F;
20005848:	4b06      	ldr	r3, [pc, #24]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000584a:	220f      	movs	r2, #15
2000584c:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_NGAMMA);
2000584e:	20e1      	movs	r0, #225	; 0xe1
20005850:	f7ff fcb2 	bl	200051b8 <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20005854:	2201      	movs	r2, #1
20005856:	210f      	movs	r1, #15
20005858:	4802      	ldr	r0, [pc, #8]	; (20005864 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000585a:	f7ff fd79 	bl	20005350 <tftDisplay_ILI9341_WriteMultipleData>
}
2000585e:	bf00      	nop
20005860:	bd80      	pop	{r7, pc}
20005862:	bf00      	nop
20005864:	2000f40c 	.word	0x2000f40c

20005868 <LL_DMA_DisableStream>:
{
20005868:	b480      	push	{r7}
2000586a:	b083      	sub	sp, #12
2000586c:	af00      	add	r7, sp, #0
2000586e:	6078      	str	r0, [r7, #4]
20005870:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20005872:	4a0c      	ldr	r2, [pc, #48]	; (200058a4 <LL_DMA_DisableStream+0x3c>)
20005874:	683b      	ldr	r3, [r7, #0]
20005876:	4413      	add	r3, r2
20005878:	781b      	ldrb	r3, [r3, #0]
2000587a:	461a      	mov	r2, r3
2000587c:	687b      	ldr	r3, [r7, #4]
2000587e:	4413      	add	r3, r2
20005880:	681b      	ldr	r3, [r3, #0]
20005882:	4908      	ldr	r1, [pc, #32]	; (200058a4 <LL_DMA_DisableStream+0x3c>)
20005884:	683a      	ldr	r2, [r7, #0]
20005886:	440a      	add	r2, r1
20005888:	7812      	ldrb	r2, [r2, #0]
2000588a:	4611      	mov	r1, r2
2000588c:	687a      	ldr	r2, [r7, #4]
2000588e:	440a      	add	r2, r1
20005890:	f023 0301 	bic.w	r3, r3, #1
20005894:	6013      	str	r3, [r2, #0]
}
20005896:	bf00      	nop
20005898:	370c      	adds	r7, #12
2000589a:	46bd      	mov	sp, r7
2000589c:	f85d 7b04 	ldr.w	r7, [sp], #4
200058a0:	4770      	bx	lr
200058a2:	bf00      	nop
200058a4:	2000a83c 	.word	0x2000a83c

200058a8 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
200058a8:	b480      	push	{r7}
200058aa:	b083      	sub	sp, #12
200058ac:	af00      	add	r7, sp, #0
200058ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
200058b0:	687b      	ldr	r3, [r7, #4]
200058b2:	2220      	movs	r2, #32
200058b4:	60da      	str	r2, [r3, #12]
}
200058b6:	bf00      	nop
200058b8:	370c      	adds	r7, #12
200058ba:	46bd      	mov	sp, r7
200058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200058c0:	4770      	bx	lr

200058c2 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
200058c2:	b480      	push	{r7}
200058c4:	b083      	sub	sp, #12
200058c6:	af00      	add	r7, sp, #0
200058c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
200058ca:	687b      	ldr	r3, [r7, #4]
200058cc:	2208      	movs	r2, #8
200058ce:	60da      	str	r2, [r3, #12]
}
200058d0:	bf00      	nop
200058d2:	370c      	adds	r7, #12
200058d4:	46bd      	mov	sp, r7
200058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200058da:	4770      	bx	lr

200058dc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
200058dc:	b480      	push	{r7}
200058de:	b083      	sub	sp, #12
200058e0:	af00      	add	r7, sp, #0
200058e2:	6078      	str	r0, [r7, #4]
200058e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
200058e6:	4a0c      	ldr	r2, [pc, #48]	; (20005918 <LL_DMA_EnableIT_TE+0x3c>)
200058e8:	683b      	ldr	r3, [r7, #0]
200058ea:	4413      	add	r3, r2
200058ec:	781b      	ldrb	r3, [r3, #0]
200058ee:	461a      	mov	r2, r3
200058f0:	687b      	ldr	r3, [r7, #4]
200058f2:	4413      	add	r3, r2
200058f4:	681b      	ldr	r3, [r3, #0]
200058f6:	4908      	ldr	r1, [pc, #32]	; (20005918 <LL_DMA_EnableIT_TE+0x3c>)
200058f8:	683a      	ldr	r2, [r7, #0]
200058fa:	440a      	add	r2, r1
200058fc:	7812      	ldrb	r2, [r2, #0]
200058fe:	4611      	mov	r1, r2
20005900:	687a      	ldr	r2, [r7, #4]
20005902:	440a      	add	r2, r1
20005904:	f043 0304 	orr.w	r3, r3, #4
20005908:	6013      	str	r3, [r2, #0]
}
2000590a:	bf00      	nop
2000590c:	370c      	adds	r7, #12
2000590e:	46bd      	mov	sp, r7
20005910:	f85d 7b04 	ldr.w	r7, [sp], #4
20005914:	4770      	bx	lr
20005916:	bf00      	nop
20005918:	2000a83c 	.word	0x2000a83c

2000591c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
2000591c:	b480      	push	{r7}
2000591e:	b083      	sub	sp, #12
20005920:	af00      	add	r7, sp, #0
20005922:	6078      	str	r0, [r7, #4]
20005924:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
20005926:	4a0c      	ldr	r2, [pc, #48]	; (20005958 <LL_DMA_EnableIT_TC+0x3c>)
20005928:	683b      	ldr	r3, [r7, #0]
2000592a:	4413      	add	r3, r2
2000592c:	781b      	ldrb	r3, [r3, #0]
2000592e:	461a      	mov	r2, r3
20005930:	687b      	ldr	r3, [r7, #4]
20005932:	4413      	add	r3, r2
20005934:	681b      	ldr	r3, [r3, #0]
20005936:	4908      	ldr	r1, [pc, #32]	; (20005958 <LL_DMA_EnableIT_TC+0x3c>)
20005938:	683a      	ldr	r2, [r7, #0]
2000593a:	440a      	add	r2, r1
2000593c:	7812      	ldrb	r2, [r2, #0]
2000593e:	4611      	mov	r1, r2
20005940:	687a      	ldr	r2, [r7, #4]
20005942:	440a      	add	r2, r1
20005944:	f043 0310 	orr.w	r3, r3, #16
20005948:	6013      	str	r3, [r2, #0]
}
2000594a:	bf00      	nop
2000594c:	370c      	adds	r7, #12
2000594e:	46bd      	mov	sp, r7
20005950:	f85d 7b04 	ldr.w	r7, [sp], #4
20005954:	4770      	bx	lr
20005956:	bf00      	nop
20005958:	2000a83c 	.word	0x2000a83c

2000595c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
2000595c:	b480      	push	{r7}
2000595e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
20005960:	4b05      	ldr	r3, [pc, #20]	; (20005978 <LL_RCC_HSE_Enable+0x1c>)
20005962:	681b      	ldr	r3, [r3, #0]
20005964:	4a04      	ldr	r2, [pc, #16]	; (20005978 <LL_RCC_HSE_Enable+0x1c>)
20005966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000596a:	6013      	str	r3, [r2, #0]
}
2000596c:	bf00      	nop
2000596e:	46bd      	mov	sp, r7
20005970:	f85d 7b04 	ldr.w	r7, [sp], #4
20005974:	4770      	bx	lr
20005976:	bf00      	nop
20005978:	40023800 	.word	0x40023800

2000597c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
2000597c:	b480      	push	{r7}
2000597e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
20005980:	4b07      	ldr	r3, [pc, #28]	; (200059a0 <LL_RCC_HSE_IsReady+0x24>)
20005982:	681b      	ldr	r3, [r3, #0]
20005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
2000598c:	bf0c      	ite	eq
2000598e:	2301      	moveq	r3, #1
20005990:	2300      	movne	r3, #0
20005992:	b2db      	uxtb	r3, r3
}
20005994:	4618      	mov	r0, r3
20005996:	46bd      	mov	sp, r7
20005998:	f85d 7b04 	ldr.w	r7, [sp], #4
2000599c:	4770      	bx	lr
2000599e:	bf00      	nop
200059a0:	40023800 	.word	0x40023800

200059a4 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
200059a4:	b480      	push	{r7}
200059a6:	b083      	sub	sp, #12
200059a8:	af00      	add	r7, sp, #0
200059aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
200059ac:	4b06      	ldr	r3, [pc, #24]	; (200059c8 <LL_RCC_SetSysClkSource+0x24>)
200059ae:	689b      	ldr	r3, [r3, #8]
200059b0:	f023 0203 	bic.w	r2, r3, #3
200059b4:	4904      	ldr	r1, [pc, #16]	; (200059c8 <LL_RCC_SetSysClkSource+0x24>)
200059b6:	687b      	ldr	r3, [r7, #4]
200059b8:	4313      	orrs	r3, r2
200059ba:	608b      	str	r3, [r1, #8]
}
200059bc:	bf00      	nop
200059be:	370c      	adds	r7, #12
200059c0:	46bd      	mov	sp, r7
200059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200059c6:	4770      	bx	lr
200059c8:	40023800 	.word	0x40023800

200059cc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
200059cc:	b480      	push	{r7}
200059ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
200059d0:	4b04      	ldr	r3, [pc, #16]	; (200059e4 <LL_RCC_GetSysClkSource+0x18>)
200059d2:	689b      	ldr	r3, [r3, #8]
200059d4:	f003 030c 	and.w	r3, r3, #12
}
200059d8:	4618      	mov	r0, r3
200059da:	46bd      	mov	sp, r7
200059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200059e0:	4770      	bx	lr
200059e2:	bf00      	nop
200059e4:	40023800 	.word	0x40023800

200059e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
200059e8:	b480      	push	{r7}
200059ea:	b083      	sub	sp, #12
200059ec:	af00      	add	r7, sp, #0
200059ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
200059f0:	4b06      	ldr	r3, [pc, #24]	; (20005a0c <LL_RCC_SetAHBPrescaler+0x24>)
200059f2:	689b      	ldr	r3, [r3, #8]
200059f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
200059f8:	4904      	ldr	r1, [pc, #16]	; (20005a0c <LL_RCC_SetAHBPrescaler+0x24>)
200059fa:	687b      	ldr	r3, [r7, #4]
200059fc:	4313      	orrs	r3, r2
200059fe:	608b      	str	r3, [r1, #8]
}
20005a00:	bf00      	nop
20005a02:	370c      	adds	r7, #12
20005a04:	46bd      	mov	sp, r7
20005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a0a:	4770      	bx	lr
20005a0c:	40023800 	.word	0x40023800

20005a10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
20005a10:	b480      	push	{r7}
20005a12:	b083      	sub	sp, #12
20005a14:	af00      	add	r7, sp, #0
20005a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
20005a18:	4b06      	ldr	r3, [pc, #24]	; (20005a34 <LL_RCC_SetAPB1Prescaler+0x24>)
20005a1a:	689b      	ldr	r3, [r3, #8]
20005a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20005a20:	4904      	ldr	r1, [pc, #16]	; (20005a34 <LL_RCC_SetAPB1Prescaler+0x24>)
20005a22:	687b      	ldr	r3, [r7, #4]
20005a24:	4313      	orrs	r3, r2
20005a26:	608b      	str	r3, [r1, #8]
}
20005a28:	bf00      	nop
20005a2a:	370c      	adds	r7, #12
20005a2c:	46bd      	mov	sp, r7
20005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a32:	4770      	bx	lr
20005a34:	40023800 	.word	0x40023800

20005a38 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
20005a38:	b480      	push	{r7}
20005a3a:	b083      	sub	sp, #12
20005a3c:	af00      	add	r7, sp, #0
20005a3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
20005a40:	4b06      	ldr	r3, [pc, #24]	; (20005a5c <LL_RCC_SetAPB2Prescaler+0x24>)
20005a42:	689b      	ldr	r3, [r3, #8]
20005a44:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20005a48:	4904      	ldr	r1, [pc, #16]	; (20005a5c <LL_RCC_SetAPB2Prescaler+0x24>)
20005a4a:	687b      	ldr	r3, [r7, #4]
20005a4c:	4313      	orrs	r3, r2
20005a4e:	608b      	str	r3, [r1, #8]
}
20005a50:	bf00      	nop
20005a52:	370c      	adds	r7, #12
20005a54:	46bd      	mov	sp, r7
20005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a5a:	4770      	bx	lr
20005a5c:	40023800 	.word	0x40023800

20005a60 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
20005a60:	b480      	push	{r7}
20005a62:	b083      	sub	sp, #12
20005a64:	af00      	add	r7, sp, #0
20005a66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
20005a68:	4b07      	ldr	r3, [pc, #28]	; (20005a88 <LL_RCC_SetTIMPrescaler+0x28>)
20005a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20005a6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
20005a72:	4905      	ldr	r1, [pc, #20]	; (20005a88 <LL_RCC_SetTIMPrescaler+0x28>)
20005a74:	687b      	ldr	r3, [r7, #4]
20005a76:	4313      	orrs	r3, r2
20005a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
20005a7c:	bf00      	nop
20005a7e:	370c      	adds	r7, #12
20005a80:	46bd      	mov	sp, r7
20005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a86:	4770      	bx	lr
20005a88:	40023800 	.word	0x40023800

20005a8c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
20005a8c:	b480      	push	{r7}
20005a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
20005a90:	4b05      	ldr	r3, [pc, #20]	; (20005aa8 <LL_RCC_PLL_Enable+0x1c>)
20005a92:	681b      	ldr	r3, [r3, #0]
20005a94:	4a04      	ldr	r2, [pc, #16]	; (20005aa8 <LL_RCC_PLL_Enable+0x1c>)
20005a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20005a9a:	6013      	str	r3, [r2, #0]
}
20005a9c:	bf00      	nop
20005a9e:	46bd      	mov	sp, r7
20005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
20005aa4:	4770      	bx	lr
20005aa6:	bf00      	nop
20005aa8:	40023800 	.word	0x40023800

20005aac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
20005aac:	b480      	push	{r7}
20005aae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
20005ab0:	4b07      	ldr	r3, [pc, #28]	; (20005ad0 <LL_RCC_PLL_IsReady+0x24>)
20005ab2:	681b      	ldr	r3, [r3, #0]
20005ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005ab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20005abc:	bf0c      	ite	eq
20005abe:	2301      	moveq	r3, #1
20005ac0:	2300      	movne	r3, #0
20005ac2:	b2db      	uxtb	r3, r3
}
20005ac4:	4618      	mov	r0, r3
20005ac6:	46bd      	mov	sp, r7
20005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
20005acc:	4770      	bx	lr
20005ace:	bf00      	nop
20005ad0:	40023800 	.word	0x40023800

20005ad4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
20005ad4:	b480      	push	{r7}
20005ad6:	b085      	sub	sp, #20
20005ad8:	af00      	add	r7, sp, #0
20005ada:	60f8      	str	r0, [r7, #12]
20005adc:	60b9      	str	r1, [r7, #8]
20005ade:	607a      	str	r2, [r7, #4]
20005ae0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
20005ae2:	4b0d      	ldr	r3, [pc, #52]	; (20005b18 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005ae4:	685a      	ldr	r2, [r3, #4]
20005ae6:	4b0d      	ldr	r3, [pc, #52]	; (20005b1c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
20005ae8:	4013      	ands	r3, r2
20005aea:	68f9      	ldr	r1, [r7, #12]
20005aec:	68ba      	ldr	r2, [r7, #8]
20005aee:	4311      	orrs	r1, r2
20005af0:	687a      	ldr	r2, [r7, #4]
20005af2:	0192      	lsls	r2, r2, #6
20005af4:	430a      	orrs	r2, r1
20005af6:	4908      	ldr	r1, [pc, #32]	; (20005b18 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005af8:	4313      	orrs	r3, r2
20005afa:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
20005afc:	4b06      	ldr	r3, [pc, #24]	; (20005b18 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005afe:	685b      	ldr	r3, [r3, #4]
20005b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
20005b04:	4904      	ldr	r1, [pc, #16]	; (20005b18 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20005b06:	683b      	ldr	r3, [r7, #0]
20005b08:	4313      	orrs	r3, r2
20005b0a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
20005b0c:	bf00      	nop
20005b0e:	3714      	adds	r7, #20
20005b10:	46bd      	mov	sp, r7
20005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b16:	4770      	bx	lr
20005b18:	40023800 	.word	0x40023800
20005b1c:	ffbf8000 	.word	0xffbf8000

20005b20 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
20005b20:	b480      	push	{r7}
20005b22:	b085      	sub	sp, #20
20005b24:	af00      	add	r7, sp, #0
20005b26:	60f8      	str	r0, [r7, #12]
20005b28:	60b9      	str	r1, [r7, #8]
20005b2a:	607a      	str	r2, [r7, #4]
20005b2c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
20005b2e:	4b0a      	ldr	r3, [pc, #40]	; (20005b58 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005b30:	685a      	ldr	r2, [r3, #4]
20005b32:	4b0a      	ldr	r3, [pc, #40]	; (20005b5c <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
20005b34:	4013      	ands	r3, r2
20005b36:	68f9      	ldr	r1, [r7, #12]
20005b38:	68ba      	ldr	r2, [r7, #8]
20005b3a:	4311      	orrs	r1, r2
20005b3c:	687a      	ldr	r2, [r7, #4]
20005b3e:	0192      	lsls	r2, r2, #6
20005b40:	4311      	orrs	r1, r2
20005b42:	683a      	ldr	r2, [r7, #0]
20005b44:	430a      	orrs	r2, r1
20005b46:	4904      	ldr	r1, [pc, #16]	; (20005b58 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005b48:	4313      	orrs	r3, r2
20005b4a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
20005b4c:	bf00      	nop
20005b4e:	3714      	adds	r7, #20
20005b50:	46bd      	mov	sp, r7
20005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b56:	4770      	bx	lr
20005b58:	40023800 	.word	0x40023800
20005b5c:	f0bf8000 	.word	0xf0bf8000

20005b60 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
20005b60:	b480      	push	{r7}
20005b62:	b083      	sub	sp, #12
20005b64:	af00      	add	r7, sp, #0
20005b66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
20005b68:	4b06      	ldr	r3, [pc, #24]	; (20005b84 <LL_FLASH_SetLatency+0x24>)
20005b6a:	681b      	ldr	r3, [r3, #0]
20005b6c:	f023 020f 	bic.w	r2, r3, #15
20005b70:	4904      	ldr	r1, [pc, #16]	; (20005b84 <LL_FLASH_SetLatency+0x24>)
20005b72:	687b      	ldr	r3, [r7, #4]
20005b74:	4313      	orrs	r3, r2
20005b76:	600b      	str	r3, [r1, #0]
}
20005b78:	bf00      	nop
20005b7a:	370c      	adds	r7, #12
20005b7c:	46bd      	mov	sp, r7
20005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b82:	4770      	bx	lr
20005b84:	40023c00 	.word	0x40023c00

20005b88 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
20005b88:	b480      	push	{r7}
20005b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
20005b8c:	4b04      	ldr	r3, [pc, #16]	; (20005ba0 <LL_FLASH_GetLatency+0x18>)
20005b8e:	681b      	ldr	r3, [r3, #0]
20005b90:	f003 030f 	and.w	r3, r3, #15
}
20005b94:	4618      	mov	r0, r3
20005b96:	46bd      	mov	sp, r7
20005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b9c:	4770      	bx	lr
20005b9e:	bf00      	nop
20005ba0:	40023c00 	.word	0x40023c00

20005ba4 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
20005ba4:	b480      	push	{r7}
20005ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
20005ba8:	4b05      	ldr	r3, [pc, #20]	; (20005bc0 <LL_PWR_EnableOverDriveMode+0x1c>)
20005baa:	681b      	ldr	r3, [r3, #0]
20005bac:	4a04      	ldr	r2, [pc, #16]	; (20005bc0 <LL_PWR_EnableOverDriveMode+0x1c>)
20005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005bb2:	6013      	str	r3, [r2, #0]
}
20005bb4:	bf00      	nop
20005bb6:	46bd      	mov	sp, r7
20005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
20005bbc:	4770      	bx	lr
20005bbe:	bf00      	nop
20005bc0:	40007000 	.word	0x40007000

20005bc4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
20005bc4:	b480      	push	{r7}
20005bc6:	b083      	sub	sp, #12
20005bc8:	af00      	add	r7, sp, #0
20005bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
20005bcc:	4b06      	ldr	r3, [pc, #24]	; (20005be8 <LL_PWR_SetRegulVoltageScaling+0x24>)
20005bce:	681b      	ldr	r3, [r3, #0]
20005bd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20005bd4:	4904      	ldr	r1, [pc, #16]	; (20005be8 <LL_PWR_SetRegulVoltageScaling+0x24>)
20005bd6:	687b      	ldr	r3, [r7, #4]
20005bd8:	4313      	orrs	r3, r2
20005bda:	600b      	str	r3, [r1, #0]
}
20005bdc:	bf00      	nop
20005bde:	370c      	adds	r7, #12
20005be0:	46bd      	mov	sp, r7
20005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
20005be6:	4770      	bx	lr
20005be8:	40007000 	.word	0x40007000

20005bec <LL_SPI_Enable>:
{
20005bec:	b480      	push	{r7}
20005bee:	b083      	sub	sp, #12
20005bf0:	af00      	add	r7, sp, #0
20005bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
20005bf4:	687b      	ldr	r3, [r7, #4]
20005bf6:	681b      	ldr	r3, [r3, #0]
20005bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20005bfc:	687b      	ldr	r3, [r7, #4]
20005bfe:	601a      	str	r2, [r3, #0]
}
20005c00:	bf00      	nop
20005c02:	370c      	adds	r7, #12
20005c04:	46bd      	mov	sp, r7
20005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c0a:	4770      	bx	lr

20005c0c <LL_SPI_EnableDMAReq_TX>:
{
20005c0c:	b480      	push	{r7}
20005c0e:	b083      	sub	sp, #12
20005c10:	af00      	add	r7, sp, #0
20005c12:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
20005c14:	687b      	ldr	r3, [r7, #4]
20005c16:	685b      	ldr	r3, [r3, #4]
20005c18:	f043 0202 	orr.w	r2, r3, #2
20005c1c:	687b      	ldr	r3, [r7, #4]
20005c1e:	605a      	str	r2, [r3, #4]
}
20005c20:	bf00      	nop
20005c22:	370c      	adds	r7, #12
20005c24:	46bd      	mov	sp, r7
20005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c2a:	4770      	bx	lr

20005c2c <LL_GPIO_SetOutputPin>:
{
20005c2c:	b480      	push	{r7}
20005c2e:	b083      	sub	sp, #12
20005c30:	af00      	add	r7, sp, #0
20005c32:	6078      	str	r0, [r7, #4]
20005c34:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20005c36:	687b      	ldr	r3, [r7, #4]
20005c38:	683a      	ldr	r2, [r7, #0]
20005c3a:	619a      	str	r2, [r3, #24]
}
20005c3c:	bf00      	nop
20005c3e:	370c      	adds	r7, #12
20005c40:	46bd      	mov	sp, r7
20005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c46:	4770      	bx	lr

20005c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20005c48:	b580      	push	{r7, lr}
20005c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20005c4c:	f7fa fcdc 	bl	20000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20005c50:	f000 f82c 	bl	20005cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20005c54:	f7fe fcfc 	bl	20004650 <MX_GPIO_Init>
  MX_DMA_Init();
20005c58:	f7fe faea 	bl	20004230 <MX_DMA_Init>
  MX_RNG_Init();
20005c5c:	f000 fa86 	bl	2000616c <MX_RNG_Init>
  MX_SPI5_Init();
20005c60:	f000 fc14 	bl	2000648c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005c64:	2104      	movs	r1, #4
20005c66:	480f      	ldr	r0, [pc, #60]	; (20005ca4 <main+0x5c>)
20005c68:	f7ff fdfe 	bl	20005868 <LL_DMA_DisableStream>
  LL_DMA_ClearFlag_TC4(DMA2);
20005c6c:	480d      	ldr	r0, [pc, #52]	; (20005ca4 <main+0x5c>)
20005c6e:	f7ff fe1b 	bl	200058a8 <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA2);
20005c72:	480c      	ldr	r0, [pc, #48]	; (20005ca4 <main+0x5c>)
20005c74:	f7ff fe25 	bl	200058c2 <LL_DMA_ClearFlag_TE4>
  LL_SPI_EnableDMAReq_TX(SPI5);
20005c78:	480b      	ldr	r0, [pc, #44]	; (20005ca8 <main+0x60>)
20005c7a:	f7ff ffc7 	bl	20005c0c <LL_SPI_EnableDMAReq_TX>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_4);
20005c7e:	2104      	movs	r1, #4
20005c80:	4808      	ldr	r0, [pc, #32]	; (20005ca4 <main+0x5c>)
20005c82:	f7ff fe4b 	bl	2000591c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_4);
20005c86:	2104      	movs	r1, #4
20005c88:	4806      	ldr	r0, [pc, #24]	; (20005ca4 <main+0x5c>)
20005c8a:	f7ff fe27 	bl	200058dc <LL_DMA_EnableIT_TE>
  LL_SPI_Enable(SPI5);
20005c8e:	4806      	ldr	r0, [pc, #24]	; (20005ca8 <main+0x60>)
20005c90:	f7ff ffac 	bl	20005bec <LL_SPI_Enable>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
20005c94:	f7fb fb38 	bl	20001308 <osKernelInitialize>
  MX_FREERTOS_Init();
20005c98:	f7fe fb08 	bl	200042ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
20005c9c:	f7fb fb58 	bl	20001350 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20005ca0:	e7fe      	b.n	20005ca0 <main+0x58>
20005ca2:	bf00      	nop
20005ca4:	40026400 	.word	0x40026400
20005ca8:	40015000 	.word	0x40015000

20005cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20005cac:	b580      	push	{r7, lr}
20005cae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
20005cb0:	2005      	movs	r0, #5
20005cb2:	f7ff ff55 	bl	20005b60 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
20005cb6:	bf00      	nop
20005cb8:	f7ff ff66 	bl	20005b88 <LL_FLASH_GetLatency>
20005cbc:	4603      	mov	r3, r0
20005cbe:	2b05      	cmp	r3, #5
20005cc0:	d1fa      	bne.n	20005cb8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
20005cc2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
20005cc6:	f7ff ff7d 	bl	20005bc4 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
20005cca:	f7ff ff6b 	bl	20005ba4 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
20005cce:	f7ff fe45 	bl	2000595c <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
20005cd2:	bf00      	nop
20005cd4:	f7ff fe52 	bl	2000597c <LL_RCC_HSE_IsReady>
20005cd8:	4603      	mov	r3, r0
20005cda:	2b01      	cmp	r3, #1
20005cdc:	d1fa      	bne.n	20005cd4 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
20005cde:	2300      	movs	r3, #0
20005ce0:	22b4      	movs	r2, #180	; 0xb4
20005ce2:	2104      	movs	r1, #4
20005ce4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005ce8:	f7ff fef4 	bl	20005ad4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
20005cec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20005cf0:	22b4      	movs	r2, #180	; 0xb4
20005cf2:	2104      	movs	r1, #4
20005cf4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005cf8:	f7ff ff12 	bl	20005b20 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
20005cfc:	f7ff fec6 	bl	20005a8c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
20005d00:	bf00      	nop
20005d02:	f7ff fed3 	bl	20005aac <LL_RCC_PLL_IsReady>
20005d06:	4603      	mov	r3, r0
20005d08:	2b01      	cmp	r3, #1
20005d0a:	d1fa      	bne.n	20005d02 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
20005d0c:	2000      	movs	r0, #0
20005d0e:	f7ff fe6b 	bl	200059e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
20005d12:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
20005d16:	f7ff fe7b 	bl	20005a10 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
20005d1a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
20005d1e:	f7ff fe8b 	bl	20005a38 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
20005d22:	2002      	movs	r0, #2
20005d24:	f7ff fe3e 	bl	200059a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
20005d28:	bf00      	nop
20005d2a:	f7ff fe4f 	bl	200059cc <LL_RCC_GetSysClkSource>
20005d2e:	4603      	mov	r3, r0
20005d30:	2b08      	cmp	r3, #8
20005d32:	d1fa      	bne.n	20005d2a <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(180000000);
20005d34:	4807      	ldr	r0, [pc, #28]	; (20005d54 <SystemClock_Config+0xa8>)
20005d36:	f7fb fa93 	bl	20001260 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
20005d3a:	200f      	movs	r0, #15
20005d3c:	f000 fc56 	bl	200065ec <HAL_InitTick>
20005d40:	4603      	mov	r3, r0
20005d42:	2b00      	cmp	r3, #0
20005d44:	d001      	beq.n	20005d4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
20005d46:	f000 f83b 	bl	20005dc0 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
20005d4a:	2000      	movs	r0, #0
20005d4c:	f7ff fe88 	bl	20005a60 <LL_RCC_SetTIMPrescaler>
}
20005d50:	bf00      	nop
20005d52:	bd80      	pop	{r7, pc}
20005d54:	0aba9500 	.word	0x0aba9500

20005d58 <DMA1_Stream4_TransferComplete>:

/* USER CODE BEGIN 4 */
void DMA1_Stream4_TransferComplete(void)
{
20005d58:	b580      	push	{r7, lr}
20005d5a:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC4(DMA2);
20005d5c:	480c      	ldr	r0, [pc, #48]	; (20005d90 <DMA1_Stream4_TransferComplete+0x38>)
20005d5e:	f7ff fda3 	bl	200058a8 <LL_DMA_ClearFlag_TC4>
  DmaSpiCnt--;
20005d62:	4b0c      	ldr	r3, [pc, #48]	; (20005d94 <DMA1_Stream4_TransferComplete+0x3c>)
20005d64:	781b      	ldrb	r3, [r3, #0]
20005d66:	3b01      	subs	r3, #1
20005d68:	b2da      	uxtb	r2, r3
20005d6a:	4b0a      	ldr	r3, [pc, #40]	; (20005d94 <DMA1_Stream4_TransferComplete+0x3c>)
20005d6c:	701a      	strb	r2, [r3, #0]

  if(DmaSpiCnt == 0)
20005d6e:	4b09      	ldr	r3, [pc, #36]	; (20005d94 <DMA1_Stream4_TransferComplete+0x3c>)
20005d70:	781b      	ldrb	r3, [r3, #0]
20005d72:	2b00      	cmp	r3, #0
20005d74:	d10a      	bne.n	20005d8c <DMA1_Stream4_TransferComplete+0x34>
  {
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005d76:	2104      	movs	r1, #4
20005d78:	4805      	ldr	r0, [pc, #20]	; (20005d90 <DMA1_Stream4_TransferComplete+0x38>)
20005d7a:	f7ff fd75 	bl	20005868 <LL_DMA_DisableStream>
    DmaSpiCnt=1;
20005d7e:	4b05      	ldr	r3, [pc, #20]	; (20005d94 <DMA1_Stream4_TransferComplete+0x3c>)
20005d80:	2201      	movs	r2, #1
20005d82:	701a      	strb	r2, [r3, #0]
    CS_DESELECT();
20005d84:	2104      	movs	r1, #4
20005d86:	4804      	ldr	r0, [pc, #16]	; (20005d98 <DMA1_Stream4_TransferComplete+0x40>)
20005d88:	f7ff ff50 	bl	20005c2c <LL_GPIO_SetOutputPin>
  }
}
20005d8c:	bf00      	nop
20005d8e:	bd80      	pop	{r7, pc}
20005d90:	40026400 	.word	0x40026400
20005d94:	2000a8c8 	.word	0x2000a8c8
20005d98:	40020800 	.word	0x40020800

20005d9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
20005d9c:	b580      	push	{r7, lr}
20005d9e:	b082      	sub	sp, #8
20005da0:	af00      	add	r7, sp, #0
20005da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
20005da4:	687b      	ldr	r3, [r7, #4]
20005da6:	681b      	ldr	r3, [r3, #0]
20005da8:	4a04      	ldr	r2, [pc, #16]	; (20005dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
20005daa:	4293      	cmp	r3, r2
20005dac:	d101      	bne.n	20005db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
20005dae:	f7fa fc4d 	bl	2000064c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
20005db2:	bf00      	nop
20005db4:	3708      	adds	r7, #8
20005db6:	46bd      	mov	sp, r7
20005db8:	bd80      	pop	{r7, pc}
20005dba:	bf00      	nop
20005dbc:	40001000 	.word	0x40001000

20005dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20005dc0:	b480      	push	{r7}
20005dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
20005dc4:	bf00      	nop
20005dc6:	46bd      	mov	sp, r7
20005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dcc:	4770      	bx	lr
	...

20005dd0 <Draw_info>:
#include "myfunctions.h"

unsigned short int *const LCD_FB = (unsigned short int*) 0xD0000000;
unsigned short int *const LCD_BUF = (unsigned short int*) 0xD0100000;

void Draw_info(int real_temp, int exp_temp, bool window){
20005dd0:	b5b0      	push	{r4, r5, r7, lr}
20005dd2:	b08c      	sub	sp, #48	; 0x30
20005dd4:	af00      	add	r7, sp, #0
20005dd6:	60f8      	str	r0, [r7, #12]
20005dd8:	60b9      	str	r1, [r7, #8]
20005dda:	4613      	mov	r3, r2
20005ddc:	71fb      	strb	r3, [r7, #7]
    unsigned char data[]= "Temp:  .  Set:  .  Okno: ";
20005dde:	4b53      	ldr	r3, [pc, #332]	; (20005f2c <Draw_info+0x15c>)
20005de0:	f107 0410 	add.w	r4, r7, #16
20005de4:	461d      	mov	r5, r3
20005de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
20005de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
20005dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
20005dee:	c403      	stmia	r4!, {r0, r1}
20005df0:	8022      	strh	r2, [r4, #0]
    if(real_temp > 500) real_temp = 500;
20005df2:	68fb      	ldr	r3, [r7, #12]
20005df4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
20005df8:	dd02      	ble.n	20005e00 <Draw_info+0x30>
20005dfa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
20005dfe:	60fb      	str	r3, [r7, #12]
    data[5] = real_temp / 100 + '0';
20005e00:	68fb      	ldr	r3, [r7, #12]
20005e02:	4a4b      	ldr	r2, [pc, #300]	; (20005f30 <Draw_info+0x160>)
20005e04:	fb82 1203 	smull	r1, r2, r2, r3
20005e08:	1152      	asrs	r2, r2, #5
20005e0a:	17db      	asrs	r3, r3, #31
20005e0c:	1ad3      	subs	r3, r2, r3
20005e0e:	b2db      	uxtb	r3, r3
20005e10:	3330      	adds	r3, #48	; 0x30
20005e12:	b2db      	uxtb	r3, r3
20005e14:	757b      	strb	r3, [r7, #21]
    data[6] = ((real_temp / 10) - (real_temp / 100 * 10)) + '0';
20005e16:	68fb      	ldr	r3, [r7, #12]
20005e18:	4a46      	ldr	r2, [pc, #280]	; (20005f34 <Draw_info+0x164>)
20005e1a:	fb82 1203 	smull	r1, r2, r2, r3
20005e1e:	1092      	asrs	r2, r2, #2
20005e20:	17db      	asrs	r3, r3, #31
20005e22:	1ad3      	subs	r3, r2, r3
20005e24:	b2da      	uxtb	r2, r3
20005e26:	68fb      	ldr	r3, [r7, #12]
20005e28:	4941      	ldr	r1, [pc, #260]	; (20005f30 <Draw_info+0x160>)
20005e2a:	fb81 0103 	smull	r0, r1, r1, r3
20005e2e:	1149      	asrs	r1, r1, #5
20005e30:	17db      	asrs	r3, r3, #31
20005e32:	1a5b      	subs	r3, r3, r1
20005e34:	b2db      	uxtb	r3, r3
20005e36:	4619      	mov	r1, r3
20005e38:	0089      	lsls	r1, r1, #2
20005e3a:	440b      	add	r3, r1
20005e3c:	005b      	lsls	r3, r3, #1
20005e3e:	b2db      	uxtb	r3, r3
20005e40:	4413      	add	r3, r2
20005e42:	b2db      	uxtb	r3, r3
20005e44:	3330      	adds	r3, #48	; 0x30
20005e46:	b2db      	uxtb	r3, r3
20005e48:	75bb      	strb	r3, [r7, #22]
    data[8] = real_temp % 10 + '0';
20005e4a:	68fa      	ldr	r2, [r7, #12]
20005e4c:	4b39      	ldr	r3, [pc, #228]	; (20005f34 <Draw_info+0x164>)
20005e4e:	fb83 1302 	smull	r1, r3, r3, r2
20005e52:	1099      	asrs	r1, r3, #2
20005e54:	17d3      	asrs	r3, r2, #31
20005e56:	1ac9      	subs	r1, r1, r3
20005e58:	460b      	mov	r3, r1
20005e5a:	009b      	lsls	r3, r3, #2
20005e5c:	440b      	add	r3, r1
20005e5e:	005b      	lsls	r3, r3, #1
20005e60:	1ad1      	subs	r1, r2, r3
20005e62:	b2cb      	uxtb	r3, r1
20005e64:	3330      	adds	r3, #48	; 0x30
20005e66:	b2db      	uxtb	r3, r3
20005e68:	763b      	strb	r3, [r7, #24]
    data[14] = exp_temp / 100 + '0';
20005e6a:	68bb      	ldr	r3, [r7, #8]
20005e6c:	4a30      	ldr	r2, [pc, #192]	; (20005f30 <Draw_info+0x160>)
20005e6e:	fb82 1203 	smull	r1, r2, r2, r3
20005e72:	1152      	asrs	r2, r2, #5
20005e74:	17db      	asrs	r3, r3, #31
20005e76:	1ad3      	subs	r3, r2, r3
20005e78:	b2db      	uxtb	r3, r3
20005e7a:	3330      	adds	r3, #48	; 0x30
20005e7c:	b2db      	uxtb	r3, r3
20005e7e:	77bb      	strb	r3, [r7, #30]
    data[15] = ((exp_temp / 10) - (exp_temp / 100 * 10)) + '0';
20005e80:	68bb      	ldr	r3, [r7, #8]
20005e82:	4a2c      	ldr	r2, [pc, #176]	; (20005f34 <Draw_info+0x164>)
20005e84:	fb82 1203 	smull	r1, r2, r2, r3
20005e88:	1092      	asrs	r2, r2, #2
20005e8a:	17db      	asrs	r3, r3, #31
20005e8c:	1ad3      	subs	r3, r2, r3
20005e8e:	b2da      	uxtb	r2, r3
20005e90:	68bb      	ldr	r3, [r7, #8]
20005e92:	4927      	ldr	r1, [pc, #156]	; (20005f30 <Draw_info+0x160>)
20005e94:	fb81 0103 	smull	r0, r1, r1, r3
20005e98:	1149      	asrs	r1, r1, #5
20005e9a:	17db      	asrs	r3, r3, #31
20005e9c:	1a5b      	subs	r3, r3, r1
20005e9e:	b2db      	uxtb	r3, r3
20005ea0:	4619      	mov	r1, r3
20005ea2:	0089      	lsls	r1, r1, #2
20005ea4:	440b      	add	r3, r1
20005ea6:	005b      	lsls	r3, r3, #1
20005ea8:	b2db      	uxtb	r3, r3
20005eaa:	4413      	add	r3, r2
20005eac:	b2db      	uxtb	r3, r3
20005eae:	3330      	adds	r3, #48	; 0x30
20005eb0:	b2db      	uxtb	r3, r3
20005eb2:	77fb      	strb	r3, [r7, #31]
    data[17] = exp_temp % 10 + '0';
20005eb4:	68ba      	ldr	r2, [r7, #8]
20005eb6:	4b1f      	ldr	r3, [pc, #124]	; (20005f34 <Draw_info+0x164>)
20005eb8:	fb83 1302 	smull	r1, r3, r3, r2
20005ebc:	1099      	asrs	r1, r3, #2
20005ebe:	17d3      	asrs	r3, r2, #31
20005ec0:	1ac9      	subs	r1, r1, r3
20005ec2:	460b      	mov	r3, r1
20005ec4:	009b      	lsls	r3, r3, #2
20005ec6:	440b      	add	r3, r1
20005ec8:	005b      	lsls	r3, r3, #1
20005eca:	1ad1      	subs	r1, r2, r3
20005ecc:	b2cb      	uxtb	r3, r1
20005ece:	3330      	adds	r3, #48	; 0x30
20005ed0:	b2db      	uxtb	r3, r3
20005ed2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    if(window){
20005ed6:	79fb      	ldrb	r3, [r7, #7]
20005ed8:	2b00      	cmp	r3, #0
20005eda:	d003      	beq.n	20005ee4 <Draw_info+0x114>
        data[24] = '1';
20005edc:	2331      	movs	r3, #49	; 0x31
20005ede:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
20005ee2:	e002      	b.n	20005eea <Draw_info+0x11a>
    }else{
        data[24] = '0';
20005ee4:	2330      	movs	r3, #48	; 0x30
20005ee6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    }
    for(int i = 0; i < 25; i++){
20005eea:	2300      	movs	r3, #0
20005eec:	62fb      	str	r3, [r7, #44]	; 0x2c
20005eee:	e014      	b.n	20005f1a <Draw_info+0x14a>
    	TFTDisplay_ILI9341_DrawChar(i * 6 + 5, 5, data[i]);
20005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005ef2:	b29b      	uxth	r3, r3
20005ef4:	461a      	mov	r2, r3
20005ef6:	0052      	lsls	r2, r2, #1
20005ef8:	4413      	add	r3, r2
20005efa:	005b      	lsls	r3, r3, #1
20005efc:	b29b      	uxth	r3, r3
20005efe:	3305      	adds	r3, #5
20005f00:	b298      	uxth	r0, r3
20005f02:	f107 0210 	add.w	r2, r7, #16
20005f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005f08:	4413      	add	r3, r2
20005f0a:	781b      	ldrb	r3, [r3, #0]
20005f0c:	461a      	mov	r2, r3
20005f0e:	2105      	movs	r1, #5
20005f10:	f7ff f802 	bl	20004f18 <TFTDisplay_ILI9341_DrawChar>
    for(int i = 0; i < 25; i++){
20005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005f16:	3301      	adds	r3, #1
20005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
20005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005f1c:	2b18      	cmp	r3, #24
20005f1e:	dde7      	ble.n	20005ef0 <Draw_info+0x120>
    }

}
20005f20:	bf00      	nop
20005f22:	bf00      	nop
20005f24:	3730      	adds	r7, #48	; 0x30
20005f26:	46bd      	mov	sp, r7
20005f28:	bdb0      	pop	{r4, r5, r7, pc}
20005f2a:	bf00      	nop
20005f2c:	20006a78 	.word	0x20006a78
20005f30:	51eb851f 	.word	0x51eb851f
20005f34:	66666667 	.word	0x66666667

20005f38 <PID_s_init>:
#include "reg2.h"

void PID_s_init(PID_s* reg, float kp, float ti, float td, float t){
20005f38:	b480      	push	{r7}
20005f3a:	b087      	sub	sp, #28
20005f3c:	af00      	add	r7, sp, #0
20005f3e:	6178      	str	r0, [r7, #20]
20005f40:	ed87 0a04 	vstr	s0, [r7, #16]
20005f44:	edc7 0a03 	vstr	s1, [r7, #12]
20005f48:	ed87 1a02 	vstr	s2, [r7, #8]
20005f4c:	edc7 1a01 	vstr	s3, [r7, #4]
    reg->Kp = kp;
20005f50:	697b      	ldr	r3, [r7, #20]
20005f52:	693a      	ldr	r2, [r7, #16]
20005f54:	601a      	str	r2, [r3, #0]
    reg->Ti = ti;
20005f56:	697b      	ldr	r3, [r7, #20]
20005f58:	68fa      	ldr	r2, [r7, #12]
20005f5a:	605a      	str	r2, [r3, #4]
    reg->Td = td;
20005f5c:	697b      	ldr	r3, [r7, #20]
20005f5e:	68ba      	ldr	r2, [r7, #8]
20005f60:	609a      	str	r2, [r3, #8]
    reg->Ts = t;
20005f62:	697b      	ldr	r3, [r7, #20]
20005f64:	687a      	ldr	r2, [r7, #4]
20005f66:	60da      	str	r2, [r3, #12]
    reg->last_i = 0;
20005f68:	697b      	ldr	r3, [r7, #20]
20005f6a:	f04f 0200 	mov.w	r2, #0
20005f6e:	611a      	str	r2, [r3, #16]
    reg->last_input = 0;
20005f70:	697b      	ldr	r3, [r7, #20]
20005f72:	f04f 0200 	mov.w	r2, #0
20005f76:	615a      	str	r2, [r3, #20]
}
20005f78:	bf00      	nop
20005f7a:	371c      	adds	r7, #28
20005f7c:	46bd      	mov	sp, r7
20005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f82:	4770      	bx	lr

20005f84 <Reg_s_step>:

void Reg_s_step(PID_s* reg){
20005f84:	b480      	push	{r7}
20005f86:	b087      	sub	sp, #28
20005f88:	af00      	add	r7, sp, #0
20005f8a:	6078      	str	r0, [r7, #4]
    //printf("(input: %f, expected: %f)",input, expected);
    float P = reg->Kp * (reg->expected - reg->input);
20005f8c:	687b      	ldr	r3, [r7, #4]
20005f8e:	ed93 7a00 	vldr	s14, [r3]
20005f92:	687b      	ldr	r3, [r7, #4]
20005f94:	edd3 6a07 	vldr	s13, [r3, #28]
20005f98:	687b      	ldr	r3, [r7, #4]
20005f9a:	edd3 7a06 	vldr	s15, [r3, #24]
20005f9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
20005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
20005fa6:	edc7 7a05 	vstr	s15, [r7, #20]
    float I = (reg->Kp /reg->Ti * reg->Ts * (reg->expected - reg->input)) + reg->last_i;        
20005faa:	687b      	ldr	r3, [r7, #4]
20005fac:	edd3 6a00 	vldr	s13, [r3]
20005fb0:	687b      	ldr	r3, [r7, #4]
20005fb2:	edd3 7a01 	vldr	s15, [r3, #4]
20005fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20005fba:	687b      	ldr	r3, [r7, #4]
20005fbc:	edd3 7a03 	vldr	s15, [r3, #12]
20005fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
20005fc4:	687b      	ldr	r3, [r7, #4]
20005fc6:	edd3 6a07 	vldr	s13, [r3, #28]
20005fca:	687b      	ldr	r3, [r7, #4]
20005fcc:	edd3 7a06 	vldr	s15, [r3, #24]
20005fd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
20005fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
20005fd8:	687b      	ldr	r3, [r7, #4]
20005fda:	edd3 7a04 	vldr	s15, [r3, #16]
20005fde:	ee77 7a27 	vadd.f32	s15, s14, s15
20005fe2:	edc7 7a04 	vstr	s15, [r7, #16]
    float D = reg->Kp * ((reg->expected - reg->input) - (reg->expected - reg->last_input))/reg->Ts * reg->Td;
20005fe6:	687b      	ldr	r3, [r7, #4]
20005fe8:	ed93 7a00 	vldr	s14, [r3]
20005fec:	687b      	ldr	r3, [r7, #4]
20005fee:	edd3 6a07 	vldr	s13, [r3, #28]
20005ff2:	687b      	ldr	r3, [r7, #4]
20005ff4:	edd3 7a06 	vldr	s15, [r3, #24]
20005ff8:	ee76 6ae7 	vsub.f32	s13, s13, s15
20005ffc:	687b      	ldr	r3, [r7, #4]
20005ffe:	ed93 6a07 	vldr	s12, [r3, #28]
20006002:	687b      	ldr	r3, [r7, #4]
20006004:	edd3 7a05 	vldr	s15, [r3, #20]
20006008:	ee76 7a67 	vsub.f32	s15, s12, s15
2000600c:	ee76 7ae7 	vsub.f32	s15, s13, s15
20006010:	ee67 6a27 	vmul.f32	s13, s14, s15
20006014:	687b      	ldr	r3, [r7, #4]
20006016:	edd3 7a03 	vldr	s15, [r3, #12]
2000601a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2000601e:	687b      	ldr	r3, [r7, #4]
20006020:	edd3 7a02 	vldr	s15, [r3, #8]
20006024:	ee67 7a27 	vmul.f32	s15, s14, s15
20006028:	edc7 7a03 	vstr	s15, [r7, #12]
    //printf("P: %.2f \t", P);
    reg->last_i = I;
2000602c:	687b      	ldr	r3, [r7, #4]
2000602e:	693a      	ldr	r2, [r7, #16]
20006030:	611a      	str	r2, [r3, #16]
    reg->last_input = reg->input;
20006032:	687b      	ldr	r3, [r7, #4]
20006034:	699a      	ldr	r2, [r3, #24]
20006036:	687b      	ldr	r3, [r7, #4]
20006038:	615a      	str	r2, [r3, #20]
    reg->output = P + I + D;
2000603a:	ed97 7a05 	vldr	s14, [r7, #20]
2000603e:	edd7 7a04 	vldr	s15, [r7, #16]
20006042:	ee37 7a27 	vadd.f32	s14, s14, s15
20006046:	edd7 7a03 	vldr	s15, [r7, #12]
2000604a:	ee77 7a27 	vadd.f32	s15, s14, s15
2000604e:	687b      	ldr	r3, [r7, #4]
20006050:	edc3 7a08 	vstr	s15, [r3, #32]
}
20006054:	bf00      	nop
20006056:	371c      	adds	r7, #28
20006058:	46bd      	mov	sp, r7
2000605a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000605e:	4770      	bx	lr

20006060 <Inercja_s_init>:

void Inercja_s_init(Inercja_s* in,float  k, float t, float ti){
20006060:	b480      	push	{r7}
20006062:	b085      	sub	sp, #20
20006064:	af00      	add	r7, sp, #0
20006066:	60f8      	str	r0, [r7, #12]
20006068:	ed87 0a02 	vstr	s0, [r7, #8]
2000606c:	edc7 0a01 	vstr	s1, [r7, #4]
20006070:	ed87 1a00 	vstr	s2, [r7]
    in->last_input = 0;
20006074:	68fb      	ldr	r3, [r7, #12]
20006076:	f04f 0200 	mov.w	r2, #0
2000607a:	601a      	str	r2, [r3, #0]
    in->kp = k;
2000607c:	68fb      	ldr	r3, [r7, #12]
2000607e:	68ba      	ldr	r2, [r7, #8]
20006080:	605a      	str	r2, [r3, #4]
    in->ts = t;
20006082:	68fb      	ldr	r3, [r7, #12]
20006084:	687a      	ldr	r2, [r7, #4]
20006086:	60da      	str	r2, [r3, #12]
    in->tin = ti;
20006088:	68fb      	ldr	r3, [r7, #12]
2000608a:	683a      	ldr	r2, [r7, #0]
2000608c:	609a      	str	r2, [r3, #8]
}
2000608e:	bf00      	nop
20006090:	3714      	adds	r7, #20
20006092:	46bd      	mov	sp, r7
20006094:	f85d 7b04 	ldr.w	r7, [sp], #4
20006098:	4770      	bx	lr

2000609a <Inercja_s_step>:

void Inercja_s_step(Inercja_s* in){
2000609a:	b480      	push	{r7}
2000609c:	b083      	sub	sp, #12
2000609e:	af00      	add	r7, sp, #0
200060a0:	6078      	str	r0, [r7, #4]
    //local out =  (Tp / (5 + Tp)) * enter + (5 / (5 + Tp)) * last           -- 1/(5s+1)
    //local out = ((Tp / (3 + Tp)) * enter + (3 / (3 + Tp)) * last/2)*2     -- 2/(3s+1)
    in->output = ((in->ts / (in->tin + in->ts)) * in->input + (in->tin / (in->tin + in->ts)) * in->last_input/in->kp)*in->kp;
200060a2:	687b      	ldr	r3, [r7, #4]
200060a4:	edd3 6a03 	vldr	s13, [r3, #12]
200060a8:	687b      	ldr	r3, [r7, #4]
200060aa:	ed93 7a02 	vldr	s14, [r3, #8]
200060ae:	687b      	ldr	r3, [r7, #4]
200060b0:	edd3 7a03 	vldr	s15, [r3, #12]
200060b4:	ee77 7a27 	vadd.f32	s15, s14, s15
200060b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200060bc:	687b      	ldr	r3, [r7, #4]
200060be:	edd3 7a05 	vldr	s15, [r3, #20]
200060c2:	ee27 7a27 	vmul.f32	s14, s14, s15
200060c6:	687b      	ldr	r3, [r7, #4]
200060c8:	ed93 6a02 	vldr	s12, [r3, #8]
200060cc:	687b      	ldr	r3, [r7, #4]
200060ce:	edd3 6a02 	vldr	s13, [r3, #8]
200060d2:	687b      	ldr	r3, [r7, #4]
200060d4:	edd3 7a03 	vldr	s15, [r3, #12]
200060d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
200060dc:	eec6 6a27 	vdiv.f32	s13, s12, s15
200060e0:	687b      	ldr	r3, [r7, #4]
200060e2:	edd3 7a00 	vldr	s15, [r3]
200060e6:	ee26 6aa7 	vmul.f32	s12, s13, s15
200060ea:	687b      	ldr	r3, [r7, #4]
200060ec:	edd3 6a01 	vldr	s13, [r3, #4]
200060f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
200060f4:	ee37 7a27 	vadd.f32	s14, s14, s15
200060f8:	687b      	ldr	r3, [r7, #4]
200060fa:	edd3 7a01 	vldr	s15, [r3, #4]
200060fe:	ee67 7a27 	vmul.f32	s15, s14, s15
20006102:	687b      	ldr	r3, [r7, #4]
20006104:	edc3 7a04 	vstr	s15, [r3, #16]
    in->last_input = in->input;
20006108:	687b      	ldr	r3, [r7, #4]
2000610a:	695a      	ldr	r2, [r3, #20]
2000610c:	687b      	ldr	r3, [r7, #4]
2000610e:	601a      	str	r2, [r3, #0]
20006110:	bf00      	nop
20006112:	370c      	adds	r7, #12
20006114:	46bd      	mov	sp, r7
20006116:	f85d 7b04 	ldr.w	r7, [sp], #4
2000611a:	4770      	bx	lr

2000611c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
2000611c:	b480      	push	{r7}
2000611e:	b085      	sub	sp, #20
20006120:	af00      	add	r7, sp, #0
20006122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
20006124:	4b08      	ldr	r3, [pc, #32]	; (20006148 <LL_AHB2_GRP1_EnableClock+0x2c>)
20006126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20006128:	4907      	ldr	r1, [pc, #28]	; (20006148 <LL_AHB2_GRP1_EnableClock+0x2c>)
2000612a:	687b      	ldr	r3, [r7, #4]
2000612c:	4313      	orrs	r3, r2
2000612e:	634b      	str	r3, [r1, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
20006130:	4b05      	ldr	r3, [pc, #20]	; (20006148 <LL_AHB2_GRP1_EnableClock+0x2c>)
20006132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20006134:	687b      	ldr	r3, [r7, #4]
20006136:	4013      	ands	r3, r2
20006138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000613a:	68fb      	ldr	r3, [r7, #12]
}
2000613c:	bf00      	nop
2000613e:	3714      	adds	r7, #20
20006140:	46bd      	mov	sp, r7
20006142:	f85d 7b04 	ldr.w	r7, [sp], #4
20006146:	4770      	bx	lr
20006148:	40023800 	.word	0x40023800

2000614c <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
2000614c:	b480      	push	{r7}
2000614e:	b083      	sub	sp, #12
20006150:	af00      	add	r7, sp, #0
20006152:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
20006154:	687b      	ldr	r3, [r7, #4]
20006156:	681b      	ldr	r3, [r3, #0]
20006158:	f043 0204 	orr.w	r2, r3, #4
2000615c:	687b      	ldr	r3, [r7, #4]
2000615e:	601a      	str	r2, [r3, #0]
}
20006160:	bf00      	nop
20006162:	370c      	adds	r7, #12
20006164:	46bd      	mov	sp, r7
20006166:	f85d 7b04 	ldr.w	r7, [sp], #4
2000616a:	4770      	bx	lr

2000616c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
2000616c:	b580      	push	{r7, lr}
2000616e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
20006170:	2040      	movs	r0, #64	; 0x40
20006172:	f7ff ffd3 	bl	2000611c <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  LL_RNG_Enable(RNG);
20006176:	4802      	ldr	r0, [pc, #8]	; (20006180 <MX_RNG_Init+0x14>)
20006178:	f7ff ffe8 	bl	2000614c <LL_RNG_Enable>
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
2000617c:	bf00      	nop
2000617e:	bd80      	pop	{r7, pc}
20006180:	50060800 	.word	0x50060800

20006184 <LL_DMA_SetDataTransferDirection>:
{
20006184:	b480      	push	{r7}
20006186:	b085      	sub	sp, #20
20006188:	af00      	add	r7, sp, #0
2000618a:	60f8      	str	r0, [r7, #12]
2000618c:	60b9      	str	r1, [r7, #8]
2000618e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
20006190:	4a0d      	ldr	r2, [pc, #52]	; (200061c8 <LL_DMA_SetDataTransferDirection+0x44>)
20006192:	68bb      	ldr	r3, [r7, #8]
20006194:	4413      	add	r3, r2
20006196:	781b      	ldrb	r3, [r3, #0]
20006198:	461a      	mov	r2, r3
2000619a:	68fb      	ldr	r3, [r7, #12]
2000619c:	4413      	add	r3, r2
2000619e:	681b      	ldr	r3, [r3, #0]
200061a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
200061a4:	4908      	ldr	r1, [pc, #32]	; (200061c8 <LL_DMA_SetDataTransferDirection+0x44>)
200061a6:	68bb      	ldr	r3, [r7, #8]
200061a8:	440b      	add	r3, r1
200061aa:	781b      	ldrb	r3, [r3, #0]
200061ac:	4619      	mov	r1, r3
200061ae:	68fb      	ldr	r3, [r7, #12]
200061b0:	440b      	add	r3, r1
200061b2:	4619      	mov	r1, r3
200061b4:	687b      	ldr	r3, [r7, #4]
200061b6:	4313      	orrs	r3, r2
200061b8:	600b      	str	r3, [r1, #0]
}
200061ba:	bf00      	nop
200061bc:	3714      	adds	r7, #20
200061be:	46bd      	mov	sp, r7
200061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200061c4:	4770      	bx	lr
200061c6:	bf00      	nop
200061c8:	2000a844 	.word	0x2000a844

200061cc <LL_DMA_SetMode>:
{
200061cc:	b480      	push	{r7}
200061ce:	b085      	sub	sp, #20
200061d0:	af00      	add	r7, sp, #0
200061d2:	60f8      	str	r0, [r7, #12]
200061d4:	60b9      	str	r1, [r7, #8]
200061d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
200061d8:	4a0d      	ldr	r2, [pc, #52]	; (20006210 <LL_DMA_SetMode+0x44>)
200061da:	68bb      	ldr	r3, [r7, #8]
200061dc:	4413      	add	r3, r2
200061de:	781b      	ldrb	r3, [r3, #0]
200061e0:	461a      	mov	r2, r3
200061e2:	68fb      	ldr	r3, [r7, #12]
200061e4:	4413      	add	r3, r2
200061e6:	681b      	ldr	r3, [r3, #0]
200061e8:	f423 7290 	bic.w	r2, r3, #288	; 0x120
200061ec:	4908      	ldr	r1, [pc, #32]	; (20006210 <LL_DMA_SetMode+0x44>)
200061ee:	68bb      	ldr	r3, [r7, #8]
200061f0:	440b      	add	r3, r1
200061f2:	781b      	ldrb	r3, [r3, #0]
200061f4:	4619      	mov	r1, r3
200061f6:	68fb      	ldr	r3, [r7, #12]
200061f8:	440b      	add	r3, r1
200061fa:	4619      	mov	r1, r3
200061fc:	687b      	ldr	r3, [r7, #4]
200061fe:	4313      	orrs	r3, r2
20006200:	600b      	str	r3, [r1, #0]
}
20006202:	bf00      	nop
20006204:	3714      	adds	r7, #20
20006206:	46bd      	mov	sp, r7
20006208:	f85d 7b04 	ldr.w	r7, [sp], #4
2000620c:	4770      	bx	lr
2000620e:	bf00      	nop
20006210:	2000a844 	.word	0x2000a844

20006214 <LL_DMA_SetPeriphIncMode>:
{
20006214:	b480      	push	{r7}
20006216:	b085      	sub	sp, #20
20006218:	af00      	add	r7, sp, #0
2000621a:	60f8      	str	r0, [r7, #12]
2000621c:	60b9      	str	r1, [r7, #8]
2000621e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
20006220:	4a0d      	ldr	r2, [pc, #52]	; (20006258 <LL_DMA_SetPeriphIncMode+0x44>)
20006222:	68bb      	ldr	r3, [r7, #8]
20006224:	4413      	add	r3, r2
20006226:	781b      	ldrb	r3, [r3, #0]
20006228:	461a      	mov	r2, r3
2000622a:	68fb      	ldr	r3, [r7, #12]
2000622c:	4413      	add	r3, r2
2000622e:	681b      	ldr	r3, [r3, #0]
20006230:	f423 7200 	bic.w	r2, r3, #512	; 0x200
20006234:	4908      	ldr	r1, [pc, #32]	; (20006258 <LL_DMA_SetPeriphIncMode+0x44>)
20006236:	68bb      	ldr	r3, [r7, #8]
20006238:	440b      	add	r3, r1
2000623a:	781b      	ldrb	r3, [r3, #0]
2000623c:	4619      	mov	r1, r3
2000623e:	68fb      	ldr	r3, [r7, #12]
20006240:	440b      	add	r3, r1
20006242:	4619      	mov	r1, r3
20006244:	687b      	ldr	r3, [r7, #4]
20006246:	4313      	orrs	r3, r2
20006248:	600b      	str	r3, [r1, #0]
}
2000624a:	bf00      	nop
2000624c:	3714      	adds	r7, #20
2000624e:	46bd      	mov	sp, r7
20006250:	f85d 7b04 	ldr.w	r7, [sp], #4
20006254:	4770      	bx	lr
20006256:	bf00      	nop
20006258:	2000a844 	.word	0x2000a844

2000625c <LL_DMA_SetMemoryIncMode>:
{
2000625c:	b480      	push	{r7}
2000625e:	b085      	sub	sp, #20
20006260:	af00      	add	r7, sp, #0
20006262:	60f8      	str	r0, [r7, #12]
20006264:	60b9      	str	r1, [r7, #8]
20006266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
20006268:	4a0d      	ldr	r2, [pc, #52]	; (200062a0 <LL_DMA_SetMemoryIncMode+0x44>)
2000626a:	68bb      	ldr	r3, [r7, #8]
2000626c:	4413      	add	r3, r2
2000626e:	781b      	ldrb	r3, [r3, #0]
20006270:	461a      	mov	r2, r3
20006272:	68fb      	ldr	r3, [r7, #12]
20006274:	4413      	add	r3, r2
20006276:	681b      	ldr	r3, [r3, #0]
20006278:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
2000627c:	4908      	ldr	r1, [pc, #32]	; (200062a0 <LL_DMA_SetMemoryIncMode+0x44>)
2000627e:	68bb      	ldr	r3, [r7, #8]
20006280:	440b      	add	r3, r1
20006282:	781b      	ldrb	r3, [r3, #0]
20006284:	4619      	mov	r1, r3
20006286:	68fb      	ldr	r3, [r7, #12]
20006288:	440b      	add	r3, r1
2000628a:	4619      	mov	r1, r3
2000628c:	687b      	ldr	r3, [r7, #4]
2000628e:	4313      	orrs	r3, r2
20006290:	600b      	str	r3, [r1, #0]
}
20006292:	bf00      	nop
20006294:	3714      	adds	r7, #20
20006296:	46bd      	mov	sp, r7
20006298:	f85d 7b04 	ldr.w	r7, [sp], #4
2000629c:	4770      	bx	lr
2000629e:	bf00      	nop
200062a0:	2000a844 	.word	0x2000a844

200062a4 <LL_DMA_SetPeriphSize>:
{
200062a4:	b480      	push	{r7}
200062a6:	b085      	sub	sp, #20
200062a8:	af00      	add	r7, sp, #0
200062aa:	60f8      	str	r0, [r7, #12]
200062ac:	60b9      	str	r1, [r7, #8]
200062ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
200062b0:	4a0d      	ldr	r2, [pc, #52]	; (200062e8 <LL_DMA_SetPeriphSize+0x44>)
200062b2:	68bb      	ldr	r3, [r7, #8]
200062b4:	4413      	add	r3, r2
200062b6:	781b      	ldrb	r3, [r3, #0]
200062b8:	461a      	mov	r2, r3
200062ba:	68fb      	ldr	r3, [r7, #12]
200062bc:	4413      	add	r3, r2
200062be:	681b      	ldr	r3, [r3, #0]
200062c0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
200062c4:	4908      	ldr	r1, [pc, #32]	; (200062e8 <LL_DMA_SetPeriphSize+0x44>)
200062c6:	68bb      	ldr	r3, [r7, #8]
200062c8:	440b      	add	r3, r1
200062ca:	781b      	ldrb	r3, [r3, #0]
200062cc:	4619      	mov	r1, r3
200062ce:	68fb      	ldr	r3, [r7, #12]
200062d0:	440b      	add	r3, r1
200062d2:	4619      	mov	r1, r3
200062d4:	687b      	ldr	r3, [r7, #4]
200062d6:	4313      	orrs	r3, r2
200062d8:	600b      	str	r3, [r1, #0]
}
200062da:	bf00      	nop
200062dc:	3714      	adds	r7, #20
200062de:	46bd      	mov	sp, r7
200062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
200062e4:	4770      	bx	lr
200062e6:	bf00      	nop
200062e8:	2000a844 	.word	0x2000a844

200062ec <LL_DMA_SetMemorySize>:
{
200062ec:	b480      	push	{r7}
200062ee:	b085      	sub	sp, #20
200062f0:	af00      	add	r7, sp, #0
200062f2:	60f8      	str	r0, [r7, #12]
200062f4:	60b9      	str	r1, [r7, #8]
200062f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
200062f8:	4a0d      	ldr	r2, [pc, #52]	; (20006330 <LL_DMA_SetMemorySize+0x44>)
200062fa:	68bb      	ldr	r3, [r7, #8]
200062fc:	4413      	add	r3, r2
200062fe:	781b      	ldrb	r3, [r3, #0]
20006300:	461a      	mov	r2, r3
20006302:	68fb      	ldr	r3, [r7, #12]
20006304:	4413      	add	r3, r2
20006306:	681b      	ldr	r3, [r3, #0]
20006308:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
2000630c:	4908      	ldr	r1, [pc, #32]	; (20006330 <LL_DMA_SetMemorySize+0x44>)
2000630e:	68bb      	ldr	r3, [r7, #8]
20006310:	440b      	add	r3, r1
20006312:	781b      	ldrb	r3, [r3, #0]
20006314:	4619      	mov	r1, r3
20006316:	68fb      	ldr	r3, [r7, #12]
20006318:	440b      	add	r3, r1
2000631a:	4619      	mov	r1, r3
2000631c:	687b      	ldr	r3, [r7, #4]
2000631e:	4313      	orrs	r3, r2
20006320:	600b      	str	r3, [r1, #0]
}
20006322:	bf00      	nop
20006324:	3714      	adds	r7, #20
20006326:	46bd      	mov	sp, r7
20006328:	f85d 7b04 	ldr.w	r7, [sp], #4
2000632c:	4770      	bx	lr
2000632e:	bf00      	nop
20006330:	2000a844 	.word	0x2000a844

20006334 <LL_DMA_SetStreamPriorityLevel>:
{
20006334:	b480      	push	{r7}
20006336:	b085      	sub	sp, #20
20006338:	af00      	add	r7, sp, #0
2000633a:	60f8      	str	r0, [r7, #12]
2000633c:	60b9      	str	r1, [r7, #8]
2000633e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
20006340:	4a0d      	ldr	r2, [pc, #52]	; (20006378 <LL_DMA_SetStreamPriorityLevel+0x44>)
20006342:	68bb      	ldr	r3, [r7, #8]
20006344:	4413      	add	r3, r2
20006346:	781b      	ldrb	r3, [r3, #0]
20006348:	461a      	mov	r2, r3
2000634a:	68fb      	ldr	r3, [r7, #12]
2000634c:	4413      	add	r3, r2
2000634e:	681b      	ldr	r3, [r3, #0]
20006350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
20006354:	4908      	ldr	r1, [pc, #32]	; (20006378 <LL_DMA_SetStreamPriorityLevel+0x44>)
20006356:	68bb      	ldr	r3, [r7, #8]
20006358:	440b      	add	r3, r1
2000635a:	781b      	ldrb	r3, [r3, #0]
2000635c:	4619      	mov	r1, r3
2000635e:	68fb      	ldr	r3, [r7, #12]
20006360:	440b      	add	r3, r1
20006362:	4619      	mov	r1, r3
20006364:	687b      	ldr	r3, [r7, #4]
20006366:	4313      	orrs	r3, r2
20006368:	600b      	str	r3, [r1, #0]
}
2000636a:	bf00      	nop
2000636c:	3714      	adds	r7, #20
2000636e:	46bd      	mov	sp, r7
20006370:	f85d 7b04 	ldr.w	r7, [sp], #4
20006374:	4770      	bx	lr
20006376:	bf00      	nop
20006378:	2000a844 	.word	0x2000a844

2000637c <LL_DMA_SetChannelSelection>:
{
2000637c:	b480      	push	{r7}
2000637e:	b085      	sub	sp, #20
20006380:	af00      	add	r7, sp, #0
20006382:	60f8      	str	r0, [r7, #12]
20006384:	60b9      	str	r1, [r7, #8]
20006386:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
20006388:	4a0d      	ldr	r2, [pc, #52]	; (200063c0 <LL_DMA_SetChannelSelection+0x44>)
2000638a:	68bb      	ldr	r3, [r7, #8]
2000638c:	4413      	add	r3, r2
2000638e:	781b      	ldrb	r3, [r3, #0]
20006390:	461a      	mov	r2, r3
20006392:	68fb      	ldr	r3, [r7, #12]
20006394:	4413      	add	r3, r2
20006396:	681b      	ldr	r3, [r3, #0]
20006398:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
2000639c:	4908      	ldr	r1, [pc, #32]	; (200063c0 <LL_DMA_SetChannelSelection+0x44>)
2000639e:	68bb      	ldr	r3, [r7, #8]
200063a0:	440b      	add	r3, r1
200063a2:	781b      	ldrb	r3, [r3, #0]
200063a4:	4619      	mov	r1, r3
200063a6:	68fb      	ldr	r3, [r7, #12]
200063a8:	440b      	add	r3, r1
200063aa:	4619      	mov	r1, r3
200063ac:	687b      	ldr	r3, [r7, #4]
200063ae:	4313      	orrs	r3, r2
200063b0:	600b      	str	r3, [r1, #0]
}
200063b2:	bf00      	nop
200063b4:	3714      	adds	r7, #20
200063b6:	46bd      	mov	sp, r7
200063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200063bc:	4770      	bx	lr
200063be:	bf00      	nop
200063c0:	2000a844 	.word	0x2000a844

200063c4 <LL_DMA_DisableFifoMode>:
{
200063c4:	b480      	push	{r7}
200063c6:	b083      	sub	sp, #12
200063c8:	af00      	add	r7, sp, #0
200063ca:	6078      	str	r0, [r7, #4]
200063cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
200063ce:	4a0c      	ldr	r2, [pc, #48]	; (20006400 <LL_DMA_DisableFifoMode+0x3c>)
200063d0:	683b      	ldr	r3, [r7, #0]
200063d2:	4413      	add	r3, r2
200063d4:	781b      	ldrb	r3, [r3, #0]
200063d6:	461a      	mov	r2, r3
200063d8:	687b      	ldr	r3, [r7, #4]
200063da:	4413      	add	r3, r2
200063dc:	695b      	ldr	r3, [r3, #20]
200063de:	4908      	ldr	r1, [pc, #32]	; (20006400 <LL_DMA_DisableFifoMode+0x3c>)
200063e0:	683a      	ldr	r2, [r7, #0]
200063e2:	440a      	add	r2, r1
200063e4:	7812      	ldrb	r2, [r2, #0]
200063e6:	4611      	mov	r1, r2
200063e8:	687a      	ldr	r2, [r7, #4]
200063ea:	440a      	add	r2, r1
200063ec:	f023 0304 	bic.w	r3, r3, #4
200063f0:	6153      	str	r3, [r2, #20]
}
200063f2:	bf00      	nop
200063f4:	370c      	adds	r7, #12
200063f6:	46bd      	mov	sp, r7
200063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200063fc:	4770      	bx	lr
200063fe:	bf00      	nop
20006400:	2000a844 	.word	0x2000a844

20006404 <LL_AHB1_GRP1_EnableClock>:
{
20006404:	b480      	push	{r7}
20006406:	b085      	sub	sp, #20
20006408:	af00      	add	r7, sp, #0
2000640a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
2000640c:	4b08      	ldr	r3, [pc, #32]	; (20006430 <LL_AHB1_GRP1_EnableClock+0x2c>)
2000640e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20006410:	4907      	ldr	r1, [pc, #28]	; (20006430 <LL_AHB1_GRP1_EnableClock+0x2c>)
20006412:	687b      	ldr	r3, [r7, #4]
20006414:	4313      	orrs	r3, r2
20006416:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20006418:	4b05      	ldr	r3, [pc, #20]	; (20006430 <LL_AHB1_GRP1_EnableClock+0x2c>)
2000641a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000641c:	687b      	ldr	r3, [r7, #4]
2000641e:	4013      	ands	r3, r2
20006420:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20006422:	68fb      	ldr	r3, [r7, #12]
}
20006424:	bf00      	nop
20006426:	3714      	adds	r7, #20
20006428:	46bd      	mov	sp, r7
2000642a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000642e:	4770      	bx	lr
20006430:	40023800 	.word	0x40023800

20006434 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
20006434:	b480      	push	{r7}
20006436:	b085      	sub	sp, #20
20006438:	af00      	add	r7, sp, #0
2000643a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
2000643c:	4b08      	ldr	r3, [pc, #32]	; (20006460 <LL_APB2_GRP1_EnableClock+0x2c>)
2000643e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20006440:	4907      	ldr	r1, [pc, #28]	; (20006460 <LL_APB2_GRP1_EnableClock+0x2c>)
20006442:	687b      	ldr	r3, [r7, #4]
20006444:	4313      	orrs	r3, r2
20006446:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
20006448:	4b05      	ldr	r3, [pc, #20]	; (20006460 <LL_APB2_GRP1_EnableClock+0x2c>)
2000644a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2000644c:	687b      	ldr	r3, [r7, #4]
2000644e:	4013      	ands	r3, r2
20006450:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20006452:	68fb      	ldr	r3, [r7, #12]
}
20006454:	bf00      	nop
20006456:	3714      	adds	r7, #20
20006458:	46bd      	mov	sp, r7
2000645a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000645e:	4770      	bx	lr
20006460:	40023800 	.word	0x40023800

20006464 <LL_SPI_SetStandard>:
{
20006464:	b480      	push	{r7}
20006466:	b083      	sub	sp, #12
20006468:	af00      	add	r7, sp, #0
2000646a:	6078      	str	r0, [r7, #4]
2000646c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
2000646e:	687b      	ldr	r3, [r7, #4]
20006470:	685b      	ldr	r3, [r3, #4]
20006472:	f023 0210 	bic.w	r2, r3, #16
20006476:	683b      	ldr	r3, [r7, #0]
20006478:	431a      	orrs	r2, r3
2000647a:	687b      	ldr	r3, [r7, #4]
2000647c:	605a      	str	r2, [r3, #4]
}
2000647e:	bf00      	nop
20006480:	370c      	adds	r7, #12
20006482:	46bd      	mov	sp, r7
20006484:	f85d 7b04 	ldr.w	r7, [sp], #4
20006488:	4770      	bx	lr
	...

2000648c <MX_SPI5_Init>:

/* USER CODE END 0 */

/* SPI5 init function */
void MX_SPI5_Init(void)
{
2000648c:	b580      	push	{r7, lr}
2000648e:	b090      	sub	sp, #64	; 0x40
20006490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
20006492:	f107 0318 	add.w	r3, r7, #24
20006496:	2228      	movs	r2, #40	; 0x28
20006498:	2100      	movs	r1, #0
2000649a:	4618      	mov	r0, r3
2000649c:	f000 f9e4 	bl	20006868 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
200064a0:	463b      	mov	r3, r7
200064a2:	2200      	movs	r2, #0
200064a4:	601a      	str	r2, [r3, #0]
200064a6:	605a      	str	r2, [r3, #4]
200064a8:	609a      	str	r2, [r3, #8]
200064aa:	60da      	str	r2, [r3, #12]
200064ac:	611a      	str	r2, [r3, #16]
200064ae:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
200064b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
200064b4:	f7ff ffbe 	bl	20006434 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
200064b8:	2020      	movs	r0, #32
200064ba:	f7ff ffa3 	bl	20006404 <LL_AHB1_GRP1_EnableClock>
  /**SPI5 GPIO Configuration
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
200064be:	f44f 7360 	mov.w	r3, #896	; 0x380
200064c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
200064c4:	2302      	movs	r3, #2
200064c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
200064c8:	2303      	movs	r3, #3
200064ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200064cc:	2300      	movs	r3, #0
200064ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200064d0:	2300      	movs	r3, #0
200064d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
200064d4:	2305      	movs	r3, #5
200064d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
200064d8:	463b      	mov	r3, r7
200064da:	4619      	mov	r1, r3
200064dc:	482a      	ldr	r0, [pc, #168]	; (20006588 <MX_SPI5_Init+0xfc>)
200064de:	f7fa fdb0 	bl	20001042 <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
200064e2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
200064e6:	2104      	movs	r1, #4
200064e8:	4828      	ldr	r0, [pc, #160]	; (2000658c <MX_SPI5_Init+0x100>)
200064ea:	f7ff ff47 	bl	2000637c <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
200064ee:	2240      	movs	r2, #64	; 0x40
200064f0:	2104      	movs	r1, #4
200064f2:	4826      	ldr	r0, [pc, #152]	; (2000658c <MX_SPI5_Init+0x100>)
200064f4:	f7ff fe46 	bl	20006184 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
200064f8:	2200      	movs	r2, #0
200064fa:	2104      	movs	r1, #4
200064fc:	4823      	ldr	r0, [pc, #140]	; (2000658c <MX_SPI5_Init+0x100>)
200064fe:	f7ff ff19 	bl	20006334 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_CIRCULAR);
20006502:	f44f 7280 	mov.w	r2, #256	; 0x100
20006506:	2104      	movs	r1, #4
20006508:	4820      	ldr	r0, [pc, #128]	; (2000658c <MX_SPI5_Init+0x100>)
2000650a:	f7ff fe5f 	bl	200061cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
2000650e:	2200      	movs	r2, #0
20006510:	2104      	movs	r1, #4
20006512:	481e      	ldr	r0, [pc, #120]	; (2000658c <MX_SPI5_Init+0x100>)
20006514:	f7ff fe7e 	bl	20006214 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
20006518:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000651c:	2104      	movs	r1, #4
2000651e:	481b      	ldr	r0, [pc, #108]	; (2000658c <MX_SPI5_Init+0x100>)
20006520:	f7ff fe9c 	bl	2000625c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
20006524:	2200      	movs	r2, #0
20006526:	2104      	movs	r1, #4
20006528:	4818      	ldr	r0, [pc, #96]	; (2000658c <MX_SPI5_Init+0x100>)
2000652a:	f7ff febb 	bl	200062a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
2000652e:	2200      	movs	r2, #0
20006530:	2104      	movs	r1, #4
20006532:	4816      	ldr	r0, [pc, #88]	; (2000658c <MX_SPI5_Init+0x100>)
20006534:	f7ff feda 	bl	200062ec <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
20006538:	2104      	movs	r1, #4
2000653a:	4814      	ldr	r0, [pc, #80]	; (2000658c <MX_SPI5_Init+0x100>)
2000653c:	f7ff ff42 	bl	200063c4 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
20006540:	2300      	movs	r3, #0
20006542:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
20006544:	f44f 7382 	mov.w	r3, #260	; 0x104
20006548:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
2000654a:	2300      	movs	r3, #0
2000654c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
2000654e:	2300      	movs	r3, #0
20006550:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
20006552:	2300      	movs	r3, #0
20006554:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
20006556:	f44f 7300 	mov.w	r3, #512	; 0x200
2000655a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
2000655c:	2300      	movs	r3, #0
2000655e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
20006560:	2300      	movs	r3, #0
20006562:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
20006564:	2300      	movs	r3, #0
20006566:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
20006568:	230a      	movs	r3, #10
2000656a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
2000656c:	f107 0318 	add.w	r3, r7, #24
20006570:	4619      	mov	r1, r3
20006572:	4807      	ldr	r0, [pc, #28]	; (20006590 <MX_SPI5_Init+0x104>)
20006574:	f7fa fdfb 	bl	2000116e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
20006578:	2100      	movs	r1, #0
2000657a:	4805      	ldr	r0, [pc, #20]	; (20006590 <MX_SPI5_Init+0x104>)
2000657c:	f7ff ff72 	bl	20006464 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
20006580:	bf00      	nop
20006582:	3740      	adds	r7, #64	; 0x40
20006584:	46bd      	mov	sp, r7
20006586:	bd80      	pop	{r7, pc}
20006588:	40021400 	.word	0x40021400
2000658c:	40026400 	.word	0x40026400
20006590:	40015000 	.word	0x40015000

20006594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20006594:	b580      	push	{r7, lr}
20006596:	b082      	sub	sp, #8
20006598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000659a:	2300      	movs	r3, #0
2000659c:	607b      	str	r3, [r7, #4]
2000659e:	4b12      	ldr	r3, [pc, #72]	; (200065e8 <HAL_MspInit+0x54>)
200065a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200065a2:	4a11      	ldr	r2, [pc, #68]	; (200065e8 <HAL_MspInit+0x54>)
200065a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200065a8:	6453      	str	r3, [r2, #68]	; 0x44
200065aa:	4b0f      	ldr	r3, [pc, #60]	; (200065e8 <HAL_MspInit+0x54>)
200065ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200065ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
200065b2:	607b      	str	r3, [r7, #4]
200065b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
200065b6:	2300      	movs	r3, #0
200065b8:	603b      	str	r3, [r7, #0]
200065ba:	4b0b      	ldr	r3, [pc, #44]	; (200065e8 <HAL_MspInit+0x54>)
200065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200065be:	4a0a      	ldr	r2, [pc, #40]	; (200065e8 <HAL_MspInit+0x54>)
200065c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200065c4:	6413      	str	r3, [r2, #64]	; 0x40
200065c6:	4b08      	ldr	r3, [pc, #32]	; (200065e8 <HAL_MspInit+0x54>)
200065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200065ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200065ce:	603b      	str	r3, [r7, #0]
200065d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
200065d2:	2200      	movs	r2, #0
200065d4:	210f      	movs	r1, #15
200065d6:	f06f 0001 	mvn.w	r0, #1
200065da:	f7fa f903 	bl	200007e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
200065de:	bf00      	nop
200065e0:	3708      	adds	r7, #8
200065e2:	46bd      	mov	sp, r7
200065e4:	bd80      	pop	{r7, pc}
200065e6:	bf00      	nop
200065e8:	40023800 	.word	0x40023800

200065ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
200065ec:	b580      	push	{r7, lr}
200065ee:	b08c      	sub	sp, #48	; 0x30
200065f0:	af00      	add	r7, sp, #0
200065f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
200065f4:	2300      	movs	r3, #0
200065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
200065f8:	2300      	movs	r3, #0
200065fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
200065fc:	2200      	movs	r2, #0
200065fe:	6879      	ldr	r1, [r7, #4]
20006600:	2036      	movs	r0, #54	; 0x36
20006602:	f7fa f8ef 	bl	200007e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
20006606:	2036      	movs	r0, #54	; 0x36
20006608:	f7fa f908 	bl	2000081c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
2000660c:	2300      	movs	r3, #0
2000660e:	60fb      	str	r3, [r7, #12]
20006610:	4b1f      	ldr	r3, [pc, #124]	; (20006690 <HAL_InitTick+0xa4>)
20006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006614:	4a1e      	ldr	r2, [pc, #120]	; (20006690 <HAL_InitTick+0xa4>)
20006616:	f043 0310 	orr.w	r3, r3, #16
2000661a:	6413      	str	r3, [r2, #64]	; 0x40
2000661c:	4b1c      	ldr	r3, [pc, #112]	; (20006690 <HAL_InitTick+0xa4>)
2000661e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006620:	f003 0310 	and.w	r3, r3, #16
20006624:	60fb      	str	r3, [r7, #12]
20006626:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
20006628:	f107 0210 	add.w	r2, r7, #16
2000662c:	f107 0314 	add.w	r3, r7, #20
20006630:	4611      	mov	r1, r2
20006632:	4618      	mov	r0, r3
20006634:	f7fa f920 	bl	20000878 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
20006638:	f7fa f90a 	bl	20000850 <HAL_RCC_GetPCLK1Freq>
2000663c:	4603      	mov	r3, r0
2000663e:	005b      	lsls	r3, r3, #1
20006640:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
20006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20006644:	4a13      	ldr	r2, [pc, #76]	; (20006694 <HAL_InitTick+0xa8>)
20006646:	fba2 2303 	umull	r2, r3, r2, r3
2000664a:	0c9b      	lsrs	r3, r3, #18
2000664c:	3b01      	subs	r3, #1
2000664e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
20006650:	4b11      	ldr	r3, [pc, #68]	; (20006698 <HAL_InitTick+0xac>)
20006652:	4a12      	ldr	r2, [pc, #72]	; (2000669c <HAL_InitTick+0xb0>)
20006654:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
20006656:	4b10      	ldr	r3, [pc, #64]	; (20006698 <HAL_InitTick+0xac>)
20006658:	f240 32e7 	movw	r2, #999	; 0x3e7
2000665c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
2000665e:	4a0e      	ldr	r2, [pc, #56]	; (20006698 <HAL_InitTick+0xac>)
20006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
20006662:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
20006664:	4b0c      	ldr	r3, [pc, #48]	; (20006698 <HAL_InitTick+0xac>)
20006666:	2200      	movs	r2, #0
20006668:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
2000666a:	4b0b      	ldr	r3, [pc, #44]	; (20006698 <HAL_InitTick+0xac>)
2000666c:	2200      	movs	r2, #0
2000666e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
20006670:	4809      	ldr	r0, [pc, #36]	; (20006698 <HAL_InitTick+0xac>)
20006672:	f7fa f933 	bl	200008dc <HAL_TIM_Base_Init>
20006676:	4603      	mov	r3, r0
20006678:	2b00      	cmp	r3, #0
2000667a:	d104      	bne.n	20006686 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
2000667c:	4806      	ldr	r0, [pc, #24]	; (20006698 <HAL_InitTick+0xac>)
2000667e:	f7fa f987 	bl	20000990 <HAL_TIM_Base_Start_IT>
20006682:	4603      	mov	r3, r0
20006684:	e000      	b.n	20006688 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
20006686:	2301      	movs	r3, #1
}
20006688:	4618      	mov	r0, r3
2000668a:	3730      	adds	r7, #48	; 0x30
2000668c:	46bd      	mov	sp, r7
2000668e:	bd80      	pop	{r7, pc}
20006690:	40023800 	.word	0x40023800
20006694:	431bde83 	.word	0x431bde83
20006698:	2001f414 	.word	0x2001f414
2000669c:	40001000 	.word	0x40001000

200066a0 <LL_DMA_IsActiveFlag_TC4>:
{
200066a0:	b480      	push	{r7}
200066a2:	b083      	sub	sp, #12
200066a4:	af00      	add	r7, sp, #0
200066a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
200066a8:	687b      	ldr	r3, [r7, #4]
200066aa:	685b      	ldr	r3, [r3, #4]
200066ac:	f003 0320 	and.w	r3, r3, #32
200066b0:	2b20      	cmp	r3, #32
200066b2:	bf0c      	ite	eq
200066b4:	2301      	moveq	r3, #1
200066b6:	2300      	movne	r3, #0
200066b8:	b2db      	uxtb	r3, r3
}
200066ba:	4618      	mov	r0, r3
200066bc:	370c      	adds	r7, #12
200066be:	46bd      	mov	sp, r7
200066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200066c4:	4770      	bx	lr

200066c6 <LL_DMA_IsActiveFlag_TE4>:
{
200066c6:	b480      	push	{r7}
200066c8:	b083      	sub	sp, #12
200066ca:	af00      	add	r7, sp, #0
200066cc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
200066ce:	687b      	ldr	r3, [r7, #4]
200066d0:	685b      	ldr	r3, [r3, #4]
200066d2:	f003 0308 	and.w	r3, r3, #8
200066d6:	2b08      	cmp	r3, #8
200066d8:	bf0c      	ite	eq
200066da:	2301      	moveq	r3, #1
200066dc:	2300      	movne	r3, #0
200066de:	b2db      	uxtb	r3, r3
}
200066e0:	4618      	mov	r0, r3
200066e2:	370c      	adds	r7, #12
200066e4:	46bd      	mov	sp, r7
200066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200066ea:	4770      	bx	lr

200066ec <LL_DMA_ClearFlag_TE4>:
{
200066ec:	b480      	push	{r7}
200066ee:	b083      	sub	sp, #12
200066f0:	af00      	add	r7, sp, #0
200066f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
200066f4:	687b      	ldr	r3, [r7, #4]
200066f6:	2208      	movs	r2, #8
200066f8:	60da      	str	r2, [r3, #12]
}
200066fa:	bf00      	nop
200066fc:	370c      	adds	r7, #12
200066fe:	46bd      	mov	sp, r7
20006700:	f85d 7b04 	ldr.w	r7, [sp], #4
20006704:	4770      	bx	lr

20006706 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20006706:	b480      	push	{r7}
20006708:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000670a:	bf00      	nop
2000670c:	46bd      	mov	sp, r7
2000670e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006712:	4770      	bx	lr

20006714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20006714:	b480      	push	{r7}
20006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20006718:	e7fe      	b.n	20006718 <HardFault_Handler+0x4>

2000671a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000671a:	b480      	push	{r7}
2000671c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000671e:	e7fe      	b.n	2000671e <MemManage_Handler+0x4>

20006720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20006720:	b480      	push	{r7}
20006722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20006724:	e7fe      	b.n	20006724 <BusFault_Handler+0x4>

20006726 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20006726:	b480      	push	{r7}
20006728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000672a:	e7fe      	b.n	2000672a <UsageFault_Handler+0x4>

2000672c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000672c:	b480      	push	{r7}
2000672e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20006730:	bf00      	nop
20006732:	46bd      	mov	sp, r7
20006734:	f85d 7b04 	ldr.w	r7, [sp], #4
20006738:	4770      	bx	lr
	...

2000673c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
2000673c:	b580      	push	{r7, lr}
2000673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
20006740:	4802      	ldr	r0, [pc, #8]	; (2000674c <TIM6_DAC_IRQHandler+0x10>)
20006742:	f7fa f995 	bl	20000a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
20006746:	bf00      	nop
20006748:	bd80      	pop	{r7, pc}
2000674a:	bf00      	nop
2000674c:	2001f414 	.word	0x2001f414

20006750 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
20006750:	b580      	push	{r7, lr}
20006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC4(DMA2) == 1)
20006754:	4809      	ldr	r0, [pc, #36]	; (2000677c <DMA2_Stream4_IRQHandler+0x2c>)
20006756:	f7ff ffa3 	bl	200066a0 <LL_DMA_IsActiveFlag_TC4>
2000675a:	4603      	mov	r3, r0
2000675c:	2b01      	cmp	r3, #1
2000675e:	d102      	bne.n	20006766 <DMA2_Stream4_IRQHandler+0x16>
  {
    DMA1_Stream4_TransferComplete();
20006760:	f7ff fafa 	bl	20005d58 <DMA1_Stream4_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
  {
    LL_DMA_ClearFlag_TE4(DMA2);
  }
  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
20006764:	e008      	b.n	20006778 <DMA2_Stream4_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
20006766:	4805      	ldr	r0, [pc, #20]	; (2000677c <DMA2_Stream4_IRQHandler+0x2c>)
20006768:	f7ff ffad 	bl	200066c6 <LL_DMA_IsActiveFlag_TE4>
2000676c:	4603      	mov	r3, r0
2000676e:	2b01      	cmp	r3, #1
20006770:	d102      	bne.n	20006778 <DMA2_Stream4_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE4(DMA2);
20006772:	4802      	ldr	r0, [pc, #8]	; (2000677c <DMA2_Stream4_IRQHandler+0x2c>)
20006774:	f7ff ffba 	bl	200066ec <LL_DMA_ClearFlag_TE4>
}
20006778:	bf00      	nop
2000677a:	bd80      	pop	{r7, pc}
2000677c:	40026400 	.word	0x40026400

20006780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20006780:	b480      	push	{r7}
20006782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20006784:	4b08      	ldr	r3, [pc, #32]	; (200067a8 <SystemInit+0x28>)
20006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000678a:	4a07      	ldr	r2, [pc, #28]	; (200067a8 <SystemInit+0x28>)
2000678c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20006790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20006794:	4b04      	ldr	r3, [pc, #16]	; (200067a8 <SystemInit+0x28>)
20006796:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
2000679a:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000679c:	bf00      	nop
2000679e:	46bd      	mov	sp, r7
200067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200067a4:	4770      	bx	lr
200067a6:	bf00      	nop
200067a8:	e000ed00 	.word	0xe000ed00

200067ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
200067ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 200067e4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
200067b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
200067b2:	e003      	b.n	200067bc <LoopCopyDataInit>

200067b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
200067b4:	4b0c      	ldr	r3, [pc, #48]	; (200067e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
200067b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
200067b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
200067ba:	3104      	adds	r1, #4

200067bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
200067bc:	480b      	ldr	r0, [pc, #44]	; (200067ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
200067be:	4b0c      	ldr	r3, [pc, #48]	; (200067f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
200067c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
200067c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
200067c4:	d3f6      	bcc.n	200067b4 <CopyDataInit>
  ldr  r2, =_sbss
200067c6:	4a0b      	ldr	r2, [pc, #44]	; (200067f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
200067c8:	e002      	b.n	200067d0 <LoopFillZerobss>

200067ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
200067ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
200067cc:	f842 3b04 	str.w	r3, [r2], #4

200067d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
200067d0:	4b09      	ldr	r3, [pc, #36]	; (200067f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
200067d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
200067d4:	d3f9      	bcc.n	200067ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
200067d6:	f7ff ffd3 	bl	20006780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
200067da:	f000 f811 	bl	20006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200067de:	f7ff fa33 	bl	20005c48 <main>
  bx  lr    
200067e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
200067e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
200067e8:	2000a8bc 	.word	0x2000a8bc
  ldr  r0, =_sdata
200067ec:	2000a8bc 	.word	0x2000a8bc
  ldr  r3, =_edata
200067f0:	2000a964 	.word	0x2000a964
  ldr  r2, =_sbss
200067f4:	2000a964 	.word	0x2000a964
  ldr  r3, = _ebss
200067f8:	2001f464 	.word	0x2001f464

200067fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
200067fc:	e7fe      	b.n	200067fc <ADC_IRQHandler>
	...

20006800 <__libc_init_array>:
20006800:	b570      	push	{r4, r5, r6, lr}
20006802:	4d0d      	ldr	r5, [pc, #52]	; (20006838 <__libc_init_array+0x38>)
20006804:	4c0d      	ldr	r4, [pc, #52]	; (2000683c <__libc_init_array+0x3c>)
20006806:	1b64      	subs	r4, r4, r5
20006808:	10a4      	asrs	r4, r4, #2
2000680a:	2600      	movs	r6, #0
2000680c:	42a6      	cmp	r6, r4
2000680e:	d109      	bne.n	20006824 <__libc_init_array+0x24>
20006810:	4d0b      	ldr	r5, [pc, #44]	; (20006840 <__libc_init_array+0x40>)
20006812:	4c0c      	ldr	r4, [pc, #48]	; (20006844 <__libc_init_array+0x44>)
20006814:	f000 f8f2 	bl	200069fc <_init>
20006818:	1b64      	subs	r4, r4, r5
2000681a:	10a4      	asrs	r4, r4, #2
2000681c:	2600      	movs	r6, #0
2000681e:	42a6      	cmp	r6, r4
20006820:	d105      	bne.n	2000682e <__libc_init_array+0x2e>
20006822:	bd70      	pop	{r4, r5, r6, pc}
20006824:	f855 3b04 	ldr.w	r3, [r5], #4
20006828:	4798      	blx	r3
2000682a:	3601      	adds	r6, #1
2000682c:	e7ee      	b.n	2000680c <__libc_init_array+0xc>
2000682e:	f855 3b04 	ldr.w	r3, [r5], #4
20006832:	4798      	blx	r3
20006834:	3601      	adds	r6, #1
20006836:	e7f2      	b.n	2000681e <__libc_init_array+0x1e>
20006838:	2000a8b4 	.word	0x2000a8b4
2000683c:	2000a8b4 	.word	0x2000a8b4
20006840:	2000a8b4 	.word	0x2000a8b4
20006844:	2000a8b8 	.word	0x2000a8b8

20006848 <__retarget_lock_acquire_recursive>:
20006848:	4770      	bx	lr

2000684a <__retarget_lock_release_recursive>:
2000684a:	4770      	bx	lr

2000684c <memcpy>:
2000684c:	440a      	add	r2, r1
2000684e:	4291      	cmp	r1, r2
20006850:	f100 33ff 	add.w	r3, r0, #4294967295
20006854:	d100      	bne.n	20006858 <memcpy+0xc>
20006856:	4770      	bx	lr
20006858:	b510      	push	{r4, lr}
2000685a:	f811 4b01 	ldrb.w	r4, [r1], #1
2000685e:	f803 4f01 	strb.w	r4, [r3, #1]!
20006862:	4291      	cmp	r1, r2
20006864:	d1f9      	bne.n	2000685a <memcpy+0xe>
20006866:	bd10      	pop	{r4, pc}

20006868 <memset>:
20006868:	4402      	add	r2, r0
2000686a:	4603      	mov	r3, r0
2000686c:	4293      	cmp	r3, r2
2000686e:	d100      	bne.n	20006872 <memset+0xa>
20006870:	4770      	bx	lr
20006872:	f803 1b01 	strb.w	r1, [r3], #1
20006876:	e7f9      	b.n	2000686c <memset+0x4>

20006878 <cleanup_glue>:
20006878:	b538      	push	{r3, r4, r5, lr}
2000687a:	460c      	mov	r4, r1
2000687c:	6809      	ldr	r1, [r1, #0]
2000687e:	4605      	mov	r5, r0
20006880:	b109      	cbz	r1, 20006886 <cleanup_glue+0xe>
20006882:	f7ff fff9 	bl	20006878 <cleanup_glue>
20006886:	4621      	mov	r1, r4
20006888:	4628      	mov	r0, r5
2000688a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
2000688e:	f000 b869 	b.w	20006964 <_free_r>
	...

20006894 <_reclaim_reent>:
20006894:	4b2c      	ldr	r3, [pc, #176]	; (20006948 <_reclaim_reent+0xb4>)
20006896:	681b      	ldr	r3, [r3, #0]
20006898:	4283      	cmp	r3, r0
2000689a:	b570      	push	{r4, r5, r6, lr}
2000689c:	4604      	mov	r4, r0
2000689e:	d051      	beq.n	20006944 <_reclaim_reent+0xb0>
200068a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
200068a2:	b143      	cbz	r3, 200068b6 <_reclaim_reent+0x22>
200068a4:	68db      	ldr	r3, [r3, #12]
200068a6:	2b00      	cmp	r3, #0
200068a8:	d14a      	bne.n	20006940 <_reclaim_reent+0xac>
200068aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
200068ac:	6819      	ldr	r1, [r3, #0]
200068ae:	b111      	cbz	r1, 200068b6 <_reclaim_reent+0x22>
200068b0:	4620      	mov	r0, r4
200068b2:	f000 f857 	bl	20006964 <_free_r>
200068b6:	6961      	ldr	r1, [r4, #20]
200068b8:	b111      	cbz	r1, 200068c0 <_reclaim_reent+0x2c>
200068ba:	4620      	mov	r0, r4
200068bc:	f000 f852 	bl	20006964 <_free_r>
200068c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
200068c2:	b111      	cbz	r1, 200068ca <_reclaim_reent+0x36>
200068c4:	4620      	mov	r0, r4
200068c6:	f000 f84d 	bl	20006964 <_free_r>
200068ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
200068cc:	b111      	cbz	r1, 200068d4 <_reclaim_reent+0x40>
200068ce:	4620      	mov	r0, r4
200068d0:	f000 f848 	bl	20006964 <_free_r>
200068d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
200068d6:	b111      	cbz	r1, 200068de <_reclaim_reent+0x4a>
200068d8:	4620      	mov	r0, r4
200068da:	f000 f843 	bl	20006964 <_free_r>
200068de:	6c21      	ldr	r1, [r4, #64]	; 0x40
200068e0:	b111      	cbz	r1, 200068e8 <_reclaim_reent+0x54>
200068e2:	4620      	mov	r0, r4
200068e4:	f000 f83e 	bl	20006964 <_free_r>
200068e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
200068ea:	b111      	cbz	r1, 200068f2 <_reclaim_reent+0x5e>
200068ec:	4620      	mov	r0, r4
200068ee:	f000 f839 	bl	20006964 <_free_r>
200068f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
200068f4:	b111      	cbz	r1, 200068fc <_reclaim_reent+0x68>
200068f6:	4620      	mov	r0, r4
200068f8:	f000 f834 	bl	20006964 <_free_r>
200068fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
200068fe:	b111      	cbz	r1, 20006906 <_reclaim_reent+0x72>
20006900:	4620      	mov	r0, r4
20006902:	f000 f82f 	bl	20006964 <_free_r>
20006906:	69a3      	ldr	r3, [r4, #24]
20006908:	b1e3      	cbz	r3, 20006944 <_reclaim_reent+0xb0>
2000690a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
2000690c:	4620      	mov	r0, r4
2000690e:	4798      	blx	r3
20006910:	6ca1      	ldr	r1, [r4, #72]	; 0x48
20006912:	b1b9      	cbz	r1, 20006944 <_reclaim_reent+0xb0>
20006914:	4620      	mov	r0, r4
20006916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
2000691a:	f7ff bfad 	b.w	20006878 <cleanup_glue>
2000691e:	5949      	ldr	r1, [r1, r5]
20006920:	b941      	cbnz	r1, 20006934 <_reclaim_reent+0xa0>
20006922:	3504      	adds	r5, #4
20006924:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006926:	2d80      	cmp	r5, #128	; 0x80
20006928:	68d9      	ldr	r1, [r3, #12]
2000692a:	d1f8      	bne.n	2000691e <_reclaim_reent+0x8a>
2000692c:	4620      	mov	r0, r4
2000692e:	f000 f819 	bl	20006964 <_free_r>
20006932:	e7ba      	b.n	200068aa <_reclaim_reent+0x16>
20006934:	680e      	ldr	r6, [r1, #0]
20006936:	4620      	mov	r0, r4
20006938:	f000 f814 	bl	20006964 <_free_r>
2000693c:	4631      	mov	r1, r6
2000693e:	e7ef      	b.n	20006920 <_reclaim_reent+0x8c>
20006940:	2500      	movs	r5, #0
20006942:	e7ef      	b.n	20006924 <_reclaim_reent+0x90>
20006944:	bd70      	pop	{r4, r5, r6, pc}
20006946:	bf00      	nop
20006948:	2000a900 	.word	0x2000a900

2000694c <__malloc_lock>:
2000694c:	4801      	ldr	r0, [pc, #4]	; (20006954 <__malloc_lock+0x8>)
2000694e:	f7ff bf7b 	b.w	20006848 <__retarget_lock_acquire_recursive>
20006952:	bf00      	nop
20006954:	2001f45c 	.word	0x2001f45c

20006958 <__malloc_unlock>:
20006958:	4801      	ldr	r0, [pc, #4]	; (20006960 <__malloc_unlock+0x8>)
2000695a:	f7ff bf76 	b.w	2000684a <__retarget_lock_release_recursive>
2000695e:	bf00      	nop
20006960:	2001f45c 	.word	0x2001f45c

20006964 <_free_r>:
20006964:	b537      	push	{r0, r1, r2, r4, r5, lr}
20006966:	2900      	cmp	r1, #0
20006968:	d044      	beq.n	200069f4 <_free_r+0x90>
2000696a:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000696e:	9001      	str	r0, [sp, #4]
20006970:	2b00      	cmp	r3, #0
20006972:	f1a1 0404 	sub.w	r4, r1, #4
20006976:	bfb8      	it	lt
20006978:	18e4      	addlt	r4, r4, r3
2000697a:	f7ff ffe7 	bl	2000694c <__malloc_lock>
2000697e:	4a1e      	ldr	r2, [pc, #120]	; (200069f8 <_free_r+0x94>)
20006980:	9801      	ldr	r0, [sp, #4]
20006982:	6813      	ldr	r3, [r2, #0]
20006984:	b933      	cbnz	r3, 20006994 <_free_r+0x30>
20006986:	6063      	str	r3, [r4, #4]
20006988:	6014      	str	r4, [r2, #0]
2000698a:	b003      	add	sp, #12
2000698c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
20006990:	f7ff bfe2 	b.w	20006958 <__malloc_unlock>
20006994:	42a3      	cmp	r3, r4
20006996:	d908      	bls.n	200069aa <_free_r+0x46>
20006998:	6825      	ldr	r5, [r4, #0]
2000699a:	1961      	adds	r1, r4, r5
2000699c:	428b      	cmp	r3, r1
2000699e:	bf01      	itttt	eq
200069a0:	6819      	ldreq	r1, [r3, #0]
200069a2:	685b      	ldreq	r3, [r3, #4]
200069a4:	1949      	addeq	r1, r1, r5
200069a6:	6021      	streq	r1, [r4, #0]
200069a8:	e7ed      	b.n	20006986 <_free_r+0x22>
200069aa:	461a      	mov	r2, r3
200069ac:	685b      	ldr	r3, [r3, #4]
200069ae:	b10b      	cbz	r3, 200069b4 <_free_r+0x50>
200069b0:	42a3      	cmp	r3, r4
200069b2:	d9fa      	bls.n	200069aa <_free_r+0x46>
200069b4:	6811      	ldr	r1, [r2, #0]
200069b6:	1855      	adds	r5, r2, r1
200069b8:	42a5      	cmp	r5, r4
200069ba:	d10b      	bne.n	200069d4 <_free_r+0x70>
200069bc:	6824      	ldr	r4, [r4, #0]
200069be:	4421      	add	r1, r4
200069c0:	1854      	adds	r4, r2, r1
200069c2:	42a3      	cmp	r3, r4
200069c4:	6011      	str	r1, [r2, #0]
200069c6:	d1e0      	bne.n	2000698a <_free_r+0x26>
200069c8:	681c      	ldr	r4, [r3, #0]
200069ca:	685b      	ldr	r3, [r3, #4]
200069cc:	6053      	str	r3, [r2, #4]
200069ce:	4421      	add	r1, r4
200069d0:	6011      	str	r1, [r2, #0]
200069d2:	e7da      	b.n	2000698a <_free_r+0x26>
200069d4:	d902      	bls.n	200069dc <_free_r+0x78>
200069d6:	230c      	movs	r3, #12
200069d8:	6003      	str	r3, [r0, #0]
200069da:	e7d6      	b.n	2000698a <_free_r+0x26>
200069dc:	6825      	ldr	r5, [r4, #0]
200069de:	1961      	adds	r1, r4, r5
200069e0:	428b      	cmp	r3, r1
200069e2:	bf04      	itt	eq
200069e4:	6819      	ldreq	r1, [r3, #0]
200069e6:	685b      	ldreq	r3, [r3, #4]
200069e8:	6063      	str	r3, [r4, #4]
200069ea:	bf04      	itt	eq
200069ec:	1949      	addeq	r1, r1, r5
200069ee:	6021      	streq	r1, [r4, #0]
200069f0:	6054      	str	r4, [r2, #4]
200069f2:	e7ca      	b.n	2000698a <_free_r+0x26>
200069f4:	b003      	add	sp, #12
200069f6:	bd30      	pop	{r4, r5, pc}
200069f8:	2001f460 	.word	0x2001f460

200069fc <_init>:
200069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200069fe:	bf00      	nop
20006a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
20006a02:	bc08      	pop	{r3}
20006a04:	469e      	mov	lr, r3
20006a06:	4770      	bx	lr

20006a08 <_fini>:
20006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006a0a:	bf00      	nop
20006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20006a0e:	bc08      	pop	{r3}
20006a10:	469e      	mov	lr, r3
20006a12:	4770      	bx	lr
