
Bazowy_STM32_LCD_SPI_ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd4  200001b0  200001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e28  20005d84  20005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20009bac  20009bac  00019c74  2**0
                  CONTENTS
  4 .ARM          00000000  20009bac  20009bac  00019c74  2**0
                  CONTENTS
  5 .preinit_array 00000000  20009bac  20009c74  00019c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  20009bac  20009bac  00019bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20009bb0  20009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20009bb4  20009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ab0  20009c74  20009c74  00019c74  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e724  2001e724  00019c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019c74  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b87  00000000  00000000  00019ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002720  00000000  00000000  0002a82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0002cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005863  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0c6  00000000  00000000  0003443b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4b5e  00000000  00000000  00041501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f605f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004114  00000000  00000000  000f60b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001b0 <__do_global_dtors_aux>:
200001b0:	b510      	push	{r4, lr}
200001b2:	4c05      	ldr	r4, [pc, #20]	; (200001c8 <__do_global_dtors_aux+0x18>)
200001b4:	7823      	ldrb	r3, [r4, #0]
200001b6:	b933      	cbnz	r3, 200001c6 <__do_global_dtors_aux+0x16>
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <__do_global_dtors_aux+0x1c>)
200001ba:	b113      	cbz	r3, 200001c2 <__do_global_dtors_aux+0x12>
200001bc:	4804      	ldr	r0, [pc, #16]	; (200001d0 <__do_global_dtors_aux+0x20>)
200001be:	f3af 8000 	nop.w
200001c2:	2301      	movs	r3, #1
200001c4:	7023      	strb	r3, [r4, #0]
200001c6:	bd10      	pop	{r4, pc}
200001c8:	20009c74 	.word	0x20009c74
200001cc:	00000000 	.word	0x00000000
200001d0:	20005d6c 	.word	0x20005d6c

200001d4 <frame_dummy>:
200001d4:	b508      	push	{r3, lr}
200001d6:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <frame_dummy+0x10>)
200001d8:	b11b      	cbz	r3, 200001e2 <frame_dummy+0xe>
200001da:	4903      	ldr	r1, [pc, #12]	; (200001e8 <frame_dummy+0x14>)
200001dc:	4803      	ldr	r0, [pc, #12]	; (200001ec <frame_dummy+0x18>)
200001de:	f3af 8000 	nop.w
200001e2:	bd08      	pop	{r3, pc}
200001e4:	00000000 	.word	0x00000000
200001e8:	20009c78 	.word	0x20009c78
200001ec:	20005d6c 	.word	0x20005d6c

200001f0 <__aeabi_drsub>:
200001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
200001f4:	e002      	b.n	200001fc <__adddf3>
200001f6:	bf00      	nop

200001f8 <__aeabi_dsub>:
200001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

200001fc <__adddf3>:
200001fc:	b530      	push	{r4, r5, lr}
200001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
20000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
20000206:	ea94 0f05 	teq	r4, r5
2000020a:	bf08      	it	eq
2000020c:	ea90 0f02 	teqeq	r0, r2
20000210:	bf1f      	itttt	ne
20000212:	ea54 0c00 	orrsne.w	ip, r4, r0
20000216:	ea55 0c02 	orrsne.w	ip, r5, r2
2000021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
2000021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000222:	f000 80e2 	beq.w	200003ea <__adddf3+0x1ee>
20000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
2000022e:	bfb8      	it	lt
20000230:	426d      	neglt	r5, r5
20000232:	dd0c      	ble.n	2000024e <__adddf3+0x52>
20000234:	442c      	add	r4, r5
20000236:	ea80 0202 	eor.w	r2, r0, r2
2000023a:	ea81 0303 	eor.w	r3, r1, r3
2000023e:	ea82 0000 	eor.w	r0, r2, r0
20000242:	ea83 0101 	eor.w	r1, r3, r1
20000246:	ea80 0202 	eor.w	r2, r0, r2
2000024a:	ea81 0303 	eor.w	r3, r1, r3
2000024e:	2d36      	cmp	r5, #54	; 0x36
20000250:	bf88      	it	hi
20000252:	bd30      	pophi	{r4, r5, pc}
20000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20000264:	d002      	beq.n	2000026c <__adddf3+0x70>
20000266:	4240      	negs	r0, r0
20000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20000278:	d002      	beq.n	20000280 <__adddf3+0x84>
2000027a:	4252      	negs	r2, r2
2000027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000280:	ea94 0f05 	teq	r4, r5
20000284:	f000 80a7 	beq.w	200003d6 <__adddf3+0x1da>
20000288:	f1a4 0401 	sub.w	r4, r4, #1
2000028c:	f1d5 0e20 	rsbs	lr, r5, #32
20000290:	db0d      	blt.n	200002ae <__adddf3+0xb2>
20000292:	fa02 fc0e 	lsl.w	ip, r2, lr
20000296:	fa22 f205 	lsr.w	r2, r2, r5
2000029a:	1880      	adds	r0, r0, r2
2000029c:	f141 0100 	adc.w	r1, r1, #0
200002a0:	fa03 f20e 	lsl.w	r2, r3, lr
200002a4:	1880      	adds	r0, r0, r2
200002a6:	fa43 f305 	asr.w	r3, r3, r5
200002aa:	4159      	adcs	r1, r3
200002ac:	e00e      	b.n	200002cc <__adddf3+0xd0>
200002ae:	f1a5 0520 	sub.w	r5, r5, #32
200002b2:	f10e 0e20 	add.w	lr, lr, #32
200002b6:	2a01      	cmp	r2, #1
200002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
200002bc:	bf28      	it	cs
200002be:	f04c 0c02 	orrcs.w	ip, ip, #2
200002c2:	fa43 f305 	asr.w	r3, r3, r5
200002c6:	18c0      	adds	r0, r0, r3
200002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
200002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200002d0:	d507      	bpl.n	200002e2 <__adddf3+0xe6>
200002d2:	f04f 0e00 	mov.w	lr, #0
200002d6:	f1dc 0c00 	rsbs	ip, ip, #0
200002da:	eb7e 0000 	sbcs.w	r0, lr, r0
200002de:	eb6e 0101 	sbc.w	r1, lr, r1
200002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
200002e6:	d31b      	bcc.n	20000320 <__adddf3+0x124>
200002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
200002ec:	d30c      	bcc.n	20000308 <__adddf3+0x10c>
200002ee:	0849      	lsrs	r1, r1, #1
200002f0:	ea5f 0030 	movs.w	r0, r0, rrx
200002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
200002f8:	f104 0401 	add.w	r4, r4, #1
200002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
20000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20000304:	f080 809a 	bcs.w	2000043c <__adddf3+0x240>
20000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000030c:	bf08      	it	eq
2000030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000312:	f150 0000 	adcs.w	r0, r0, #0
20000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000031a:	ea41 0105 	orr.w	r1, r1, r5
2000031e:	bd30      	pop	{r4, r5, pc}
20000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20000324:	4140      	adcs	r0, r0
20000326:	eb41 0101 	adc.w	r1, r1, r1
2000032a:	3c01      	subs	r4, #1
2000032c:	bf28      	it	cs
2000032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
20000332:	d2e9      	bcs.n	20000308 <__adddf3+0x10c>
20000334:	f091 0f00 	teq	r1, #0
20000338:	bf04      	itt	eq
2000033a:	4601      	moveq	r1, r0
2000033c:	2000      	moveq	r0, #0
2000033e:	fab1 f381 	clz	r3, r1
20000342:	bf08      	it	eq
20000344:	3320      	addeq	r3, #32
20000346:	f1a3 030b 	sub.w	r3, r3, #11
2000034a:	f1b3 0220 	subs.w	r2, r3, #32
2000034e:	da0c      	bge.n	2000036a <__adddf3+0x16e>
20000350:	320c      	adds	r2, #12
20000352:	dd08      	ble.n	20000366 <__adddf3+0x16a>
20000354:	f102 0c14 	add.w	ip, r2, #20
20000358:	f1c2 020c 	rsb	r2, r2, #12
2000035c:	fa01 f00c 	lsl.w	r0, r1, ip
20000360:	fa21 f102 	lsr.w	r1, r1, r2
20000364:	e00c      	b.n	20000380 <__adddf3+0x184>
20000366:	f102 0214 	add.w	r2, r2, #20
2000036a:	bfd8      	it	le
2000036c:	f1c2 0c20 	rsble	ip, r2, #32
20000370:	fa01 f102 	lsl.w	r1, r1, r2
20000374:	fa20 fc0c 	lsr.w	ip, r0, ip
20000378:	bfdc      	itt	le
2000037a:	ea41 010c 	orrle.w	r1, r1, ip
2000037e:	4090      	lslle	r0, r2
20000380:	1ae4      	subs	r4, r4, r3
20000382:	bfa2      	ittt	ge
20000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20000388:	4329      	orrge	r1, r5
2000038a:	bd30      	popge	{r4, r5, pc}
2000038c:	ea6f 0404 	mvn.w	r4, r4
20000390:	3c1f      	subs	r4, #31
20000392:	da1c      	bge.n	200003ce <__adddf3+0x1d2>
20000394:	340c      	adds	r4, #12
20000396:	dc0e      	bgt.n	200003b6 <__adddf3+0x1ba>
20000398:	f104 0414 	add.w	r4, r4, #20
2000039c:	f1c4 0220 	rsb	r2, r4, #32
200003a0:	fa20 f004 	lsr.w	r0, r0, r4
200003a4:	fa01 f302 	lsl.w	r3, r1, r2
200003a8:	ea40 0003 	orr.w	r0, r0, r3
200003ac:	fa21 f304 	lsr.w	r3, r1, r4
200003b0:	ea45 0103 	orr.w	r1, r5, r3
200003b4:	bd30      	pop	{r4, r5, pc}
200003b6:	f1c4 040c 	rsb	r4, r4, #12
200003ba:	f1c4 0220 	rsb	r2, r4, #32
200003be:	fa20 f002 	lsr.w	r0, r0, r2
200003c2:	fa01 f304 	lsl.w	r3, r1, r4
200003c6:	ea40 0003 	orr.w	r0, r0, r3
200003ca:	4629      	mov	r1, r5
200003cc:	bd30      	pop	{r4, r5, pc}
200003ce:	fa21 f004 	lsr.w	r0, r1, r4
200003d2:	4629      	mov	r1, r5
200003d4:	bd30      	pop	{r4, r5, pc}
200003d6:	f094 0f00 	teq	r4, #0
200003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
200003de:	bf06      	itte	eq
200003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
200003e4:	3401      	addeq	r4, #1
200003e6:	3d01      	subne	r5, #1
200003e8:	e74e      	b.n	20000288 <__adddf3+0x8c>
200003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200003ee:	bf18      	it	ne
200003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
200003f4:	d029      	beq.n	2000044a <__adddf3+0x24e>
200003f6:	ea94 0f05 	teq	r4, r5
200003fa:	bf08      	it	eq
200003fc:	ea90 0f02 	teqeq	r0, r2
20000400:	d005      	beq.n	2000040e <__adddf3+0x212>
20000402:	ea54 0c00 	orrs.w	ip, r4, r0
20000406:	bf04      	itt	eq
20000408:	4619      	moveq	r1, r3
2000040a:	4610      	moveq	r0, r2
2000040c:	bd30      	pop	{r4, r5, pc}
2000040e:	ea91 0f03 	teq	r1, r3
20000412:	bf1e      	ittt	ne
20000414:	2100      	movne	r1, #0
20000416:	2000      	movne	r0, #0
20000418:	bd30      	popne	{r4, r5, pc}
2000041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
2000041e:	d105      	bne.n	2000042c <__adddf3+0x230>
20000420:	0040      	lsls	r0, r0, #1
20000422:	4149      	adcs	r1, r1
20000424:	bf28      	it	cs
20000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000042a:	bd30      	pop	{r4, r5, pc}
2000042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20000430:	bf3c      	itt	cc
20000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20000436:	bd30      	popcc	{r4, r5, pc}
20000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
2000043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20000444:	f04f 0000 	mov.w	r0, #0
20000448:	bd30      	pop	{r4, r5, pc}
2000044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000044e:	bf1a      	itte	ne
20000450:	4619      	movne	r1, r3
20000452:	4610      	movne	r0, r2
20000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20000458:	bf1c      	itt	ne
2000045a:	460b      	movne	r3, r1
2000045c:	4602      	movne	r2, r0
2000045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20000462:	bf06      	itte	eq
20000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20000468:	ea91 0f03 	teqeq	r1, r3
2000046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20000470:	bd30      	pop	{r4, r5, pc}
20000472:	bf00      	nop

20000474 <__aeabi_ui2d>:
20000474:	f090 0f00 	teq	r0, #0
20000478:	bf04      	itt	eq
2000047a:	2100      	moveq	r1, #0
2000047c:	4770      	bxeq	lr
2000047e:	b530      	push	{r4, r5, lr}
20000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
20000488:	f04f 0500 	mov.w	r5, #0
2000048c:	f04f 0100 	mov.w	r1, #0
20000490:	e750      	b.n	20000334 <__adddf3+0x138>
20000492:	bf00      	nop

20000494 <__aeabi_i2d>:
20000494:	f090 0f00 	teq	r0, #0
20000498:	bf04      	itt	eq
2000049a:	2100      	moveq	r1, #0
2000049c:	4770      	bxeq	lr
2000049e:	b530      	push	{r4, r5, lr}
200004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
200004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
200004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200004ac:	bf48      	it	mi
200004ae:	4240      	negmi	r0, r0
200004b0:	f04f 0100 	mov.w	r1, #0
200004b4:	e73e      	b.n	20000334 <__adddf3+0x138>
200004b6:	bf00      	nop

200004b8 <__aeabi_f2d>:
200004b8:	0042      	lsls	r2, r0, #1
200004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
200004be:	ea4f 0131 	mov.w	r1, r1, rrx
200004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
200004c6:	bf1f      	itttt	ne
200004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
200004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
200004d4:	4770      	bxne	lr
200004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
200004da:	bf08      	it	eq
200004dc:	4770      	bxeq	lr
200004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
200004e2:	bf04      	itt	eq
200004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
200004e8:	4770      	bxeq	lr
200004ea:	b530      	push	{r4, r5, lr}
200004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
200004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200004f8:	e71c      	b.n	20000334 <__adddf3+0x138>
200004fa:	bf00      	nop

200004fc <__aeabi_ul2d>:
200004fc:	ea50 0201 	orrs.w	r2, r0, r1
20000500:	bf08      	it	eq
20000502:	4770      	bxeq	lr
20000504:	b530      	push	{r4, r5, lr}
20000506:	f04f 0500 	mov.w	r5, #0
2000050a:	e00a      	b.n	20000522 <__aeabi_l2d+0x16>

2000050c <__aeabi_l2d>:
2000050c:	ea50 0201 	orrs.w	r2, r0, r1
20000510:	bf08      	it	eq
20000512:	4770      	bxeq	lr
20000514:	b530      	push	{r4, r5, lr}
20000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
2000051a:	d502      	bpl.n	20000522 <__aeabi_l2d+0x16>
2000051c:	4240      	negs	r0, r0
2000051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000052e:	f43f aed8 	beq.w	200002e2 <__adddf3+0xe6>
20000532:	f04f 0203 	mov.w	r2, #3
20000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000053a:	bf18      	it	ne
2000053c:	3203      	addne	r2, #3
2000053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20000542:	bf18      	it	ne
20000544:	3203      	addne	r2, #3
20000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
2000054a:	f1c2 0320 	rsb	r3, r2, #32
2000054e:	fa00 fc03 	lsl.w	ip, r0, r3
20000552:	fa20 f002 	lsr.w	r0, r0, r2
20000556:	fa01 fe03 	lsl.w	lr, r1, r3
2000055a:	ea40 000e 	orr.w	r0, r0, lr
2000055e:	fa21 f102 	lsr.w	r1, r1, r2
20000562:	4414      	add	r4, r2
20000564:	e6bd      	b.n	200002e2 <__adddf3+0xe6>
20000566:	bf00      	nop

20000568 <__aeabi_d2f>:
20000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
2000056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
20000570:	bf24      	itt	cs
20000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
20000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
2000057a:	d90d      	bls.n	20000598 <__aeabi_d2f+0x30>
2000057c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
20000588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
2000058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
20000590:	bf08      	it	eq
20000592:	f020 0001 	biceq.w	r0, r0, #1
20000596:	4770      	bx	lr
20000598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
2000059c:	d121      	bne.n	200005e2 <__aeabi_d2f+0x7a>
2000059e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
200005a2:	bfbc      	itt	lt
200005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
200005a8:	4770      	bxlt	lr
200005aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
200005b2:	f1c2 0218 	rsb	r2, r2, #24
200005b6:	f1c2 0c20 	rsb	ip, r2, #32
200005ba:	fa10 f30c 	lsls.w	r3, r0, ip
200005be:	fa20 f002 	lsr.w	r0, r0, r2
200005c2:	bf18      	it	ne
200005c4:	f040 0001 	orrne.w	r0, r0, #1
200005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
200005d4:	ea40 000c 	orr.w	r0, r0, ip
200005d8:	fa23 f302 	lsr.w	r3, r3, r2
200005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
200005e0:	e7cc      	b.n	2000057c <__aeabi_d2f+0x14>
200005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
200005e6:	d107      	bne.n	200005f8 <__aeabi_d2f+0x90>
200005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
200005ec:	bf1e      	ittt	ne
200005ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
200005f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
200005f6:	4770      	bxne	lr
200005f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
200005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20000600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20000604:	4770      	bx	lr
20000606:	bf00      	nop

20000608 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
20000608:	b480      	push	{r7}
2000060a:	b089      	sub	sp, #36	; 0x24
2000060c:	af00      	add	r7, sp, #0
2000060e:	60f8      	str	r0, [r7, #12]
20000610:	60b9      	str	r1, [r7, #8]
20000612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
20000614:	68fb      	ldr	r3, [r7, #12]
20000616:	681a      	ldr	r2, [r3, #0]
20000618:	68bb      	ldr	r3, [r7, #8]
2000061a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000061c:	697b      	ldr	r3, [r7, #20]
2000061e:	fa93 f3a3 	rbit	r3, r3
20000622:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
20000624:	693b      	ldr	r3, [r7, #16]
20000626:	fab3 f383 	clz	r3, r3
2000062a:	b2db      	uxtb	r3, r3
2000062c:	005b      	lsls	r3, r3, #1
2000062e:	2103      	movs	r1, #3
20000630:	fa01 f303 	lsl.w	r3, r1, r3
20000634:	43db      	mvns	r3, r3
20000636:	401a      	ands	r2, r3
20000638:	68bb      	ldr	r3, [r7, #8]
2000063a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000063c:	69fb      	ldr	r3, [r7, #28]
2000063e:	fa93 f3a3 	rbit	r3, r3
20000642:	61bb      	str	r3, [r7, #24]
  return result;
20000644:	69bb      	ldr	r3, [r7, #24]
20000646:	fab3 f383 	clz	r3, r3
2000064a:	b2db      	uxtb	r3, r3
2000064c:	005b      	lsls	r3, r3, #1
2000064e:	6879      	ldr	r1, [r7, #4]
20000650:	fa01 f303 	lsl.w	r3, r1, r3
20000654:	431a      	orrs	r2, r3
20000656:	68fb      	ldr	r3, [r7, #12]
20000658:	601a      	str	r2, [r3, #0]
}
2000065a:	bf00      	nop
2000065c:	3724      	adds	r7, #36	; 0x24
2000065e:	46bd      	mov	sp, r7
20000660:	f85d 7b04 	ldr.w	r7, [sp], #4
20000664:	4770      	bx	lr

20000666 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
20000666:	b480      	push	{r7}
20000668:	b085      	sub	sp, #20
2000066a:	af00      	add	r7, sp, #0
2000066c:	60f8      	str	r0, [r7, #12]
2000066e:	60b9      	str	r1, [r7, #8]
20000670:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	685a      	ldr	r2, [r3, #4]
20000676:	68bb      	ldr	r3, [r7, #8]
20000678:	43db      	mvns	r3, r3
2000067a:	401a      	ands	r2, r3
2000067c:	68bb      	ldr	r3, [r7, #8]
2000067e:	6879      	ldr	r1, [r7, #4]
20000680:	fb01 f303 	mul.w	r3, r1, r3
20000684:	431a      	orrs	r2, r3
20000686:	68fb      	ldr	r3, [r7, #12]
20000688:	605a      	str	r2, [r3, #4]
}
2000068a:	bf00      	nop
2000068c:	3714      	adds	r7, #20
2000068e:	46bd      	mov	sp, r7
20000690:	f85d 7b04 	ldr.w	r7, [sp], #4
20000694:	4770      	bx	lr

20000696 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
20000696:	b480      	push	{r7}
20000698:	b089      	sub	sp, #36	; 0x24
2000069a:	af00      	add	r7, sp, #0
2000069c:	60f8      	str	r0, [r7, #12]
2000069e:	60b9      	str	r1, [r7, #8]
200006a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
200006a2:	68fb      	ldr	r3, [r7, #12]
200006a4:	689a      	ldr	r2, [r3, #8]
200006a6:	68bb      	ldr	r3, [r7, #8]
200006a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200006aa:	697b      	ldr	r3, [r7, #20]
200006ac:	fa93 f3a3 	rbit	r3, r3
200006b0:	613b      	str	r3, [r7, #16]
  return result;
200006b2:	693b      	ldr	r3, [r7, #16]
200006b4:	fab3 f383 	clz	r3, r3
200006b8:	b2db      	uxtb	r3, r3
200006ba:	005b      	lsls	r3, r3, #1
200006bc:	2103      	movs	r1, #3
200006be:	fa01 f303 	lsl.w	r3, r1, r3
200006c2:	43db      	mvns	r3, r3
200006c4:	401a      	ands	r2, r3
200006c6:	68bb      	ldr	r3, [r7, #8]
200006c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200006ca:	69fb      	ldr	r3, [r7, #28]
200006cc:	fa93 f3a3 	rbit	r3, r3
200006d0:	61bb      	str	r3, [r7, #24]
  return result;
200006d2:	69bb      	ldr	r3, [r7, #24]
200006d4:	fab3 f383 	clz	r3, r3
200006d8:	b2db      	uxtb	r3, r3
200006da:	005b      	lsls	r3, r3, #1
200006dc:	6879      	ldr	r1, [r7, #4]
200006de:	fa01 f303 	lsl.w	r3, r1, r3
200006e2:	431a      	orrs	r2, r3
200006e4:	68fb      	ldr	r3, [r7, #12]
200006e6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
200006e8:	bf00      	nop
200006ea:	3724      	adds	r7, #36	; 0x24
200006ec:	46bd      	mov	sp, r7
200006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200006f2:	4770      	bx	lr

200006f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
200006f4:	b480      	push	{r7}
200006f6:	b089      	sub	sp, #36	; 0x24
200006f8:	af00      	add	r7, sp, #0
200006fa:	60f8      	str	r0, [r7, #12]
200006fc:	60b9      	str	r1, [r7, #8]
200006fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
20000700:	68fb      	ldr	r3, [r7, #12]
20000702:	68da      	ldr	r2, [r3, #12]
20000704:	68bb      	ldr	r3, [r7, #8]
20000706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000708:	697b      	ldr	r3, [r7, #20]
2000070a:	fa93 f3a3 	rbit	r3, r3
2000070e:	613b      	str	r3, [r7, #16]
  return result;
20000710:	693b      	ldr	r3, [r7, #16]
20000712:	fab3 f383 	clz	r3, r3
20000716:	b2db      	uxtb	r3, r3
20000718:	005b      	lsls	r3, r3, #1
2000071a:	2103      	movs	r1, #3
2000071c:	fa01 f303 	lsl.w	r3, r1, r3
20000720:	43db      	mvns	r3, r3
20000722:	401a      	ands	r2, r3
20000724:	68bb      	ldr	r3, [r7, #8]
20000726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000728:	69fb      	ldr	r3, [r7, #28]
2000072a:	fa93 f3a3 	rbit	r3, r3
2000072e:	61bb      	str	r3, [r7, #24]
  return result;
20000730:	69bb      	ldr	r3, [r7, #24]
20000732:	fab3 f383 	clz	r3, r3
20000736:	b2db      	uxtb	r3, r3
20000738:	005b      	lsls	r3, r3, #1
2000073a:	6879      	ldr	r1, [r7, #4]
2000073c:	fa01 f303 	lsl.w	r3, r1, r3
20000740:	431a      	orrs	r2, r3
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	60da      	str	r2, [r3, #12]
}
20000746:	bf00      	nop
20000748:	3724      	adds	r7, #36	; 0x24
2000074a:	46bd      	mov	sp, r7
2000074c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000750:	4770      	bx	lr

20000752 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000752:	b480      	push	{r7}
20000754:	b089      	sub	sp, #36	; 0x24
20000756:	af00      	add	r7, sp, #0
20000758:	60f8      	str	r0, [r7, #12]
2000075a:	60b9      	str	r1, [r7, #8]
2000075c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	6a1a      	ldr	r2, [r3, #32]
20000762:	68bb      	ldr	r3, [r7, #8]
20000764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000766:	697b      	ldr	r3, [r7, #20]
20000768:	fa93 f3a3 	rbit	r3, r3
2000076c:	613b      	str	r3, [r7, #16]
  return result;
2000076e:	693b      	ldr	r3, [r7, #16]
20000770:	fab3 f383 	clz	r3, r3
20000774:	b2db      	uxtb	r3, r3
20000776:	009b      	lsls	r3, r3, #2
20000778:	210f      	movs	r1, #15
2000077a:	fa01 f303 	lsl.w	r3, r1, r3
2000077e:	43db      	mvns	r3, r3
20000780:	401a      	ands	r2, r3
20000782:	68bb      	ldr	r3, [r7, #8]
20000784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000786:	69fb      	ldr	r3, [r7, #28]
20000788:	fa93 f3a3 	rbit	r3, r3
2000078c:	61bb      	str	r3, [r7, #24]
  return result;
2000078e:	69bb      	ldr	r3, [r7, #24]
20000790:	fab3 f383 	clz	r3, r3
20000794:	b2db      	uxtb	r3, r3
20000796:	009b      	lsls	r3, r3, #2
20000798:	6879      	ldr	r1, [r7, #4]
2000079a:	fa01 f303 	lsl.w	r3, r1, r3
2000079e:	431a      	orrs	r2, r3
200007a0:	68fb      	ldr	r3, [r7, #12]
200007a2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
200007a4:	bf00      	nop
200007a6:	3724      	adds	r7, #36	; 0x24
200007a8:	46bd      	mov	sp, r7
200007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200007ae:	4770      	bx	lr

200007b0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
200007b0:	b480      	push	{r7}
200007b2:	b089      	sub	sp, #36	; 0x24
200007b4:	af00      	add	r7, sp, #0
200007b6:	60f8      	str	r0, [r7, #12]
200007b8:	60b9      	str	r1, [r7, #8]
200007ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
200007bc:	68fb      	ldr	r3, [r7, #12]
200007be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200007c0:	68bb      	ldr	r3, [r7, #8]
200007c2:	0a1b      	lsrs	r3, r3, #8
200007c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200007c6:	697b      	ldr	r3, [r7, #20]
200007c8:	fa93 f3a3 	rbit	r3, r3
200007cc:	613b      	str	r3, [r7, #16]
  return result;
200007ce:	693b      	ldr	r3, [r7, #16]
200007d0:	fab3 f383 	clz	r3, r3
200007d4:	b2db      	uxtb	r3, r3
200007d6:	009b      	lsls	r3, r3, #2
200007d8:	210f      	movs	r1, #15
200007da:	fa01 f303 	lsl.w	r3, r1, r3
200007de:	43db      	mvns	r3, r3
200007e0:	401a      	ands	r2, r3
200007e2:	68bb      	ldr	r3, [r7, #8]
200007e4:	0a1b      	lsrs	r3, r3, #8
200007e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200007e8:	69fb      	ldr	r3, [r7, #28]
200007ea:	fa93 f3a3 	rbit	r3, r3
200007ee:	61bb      	str	r3, [r7, #24]
  return result;
200007f0:	69bb      	ldr	r3, [r7, #24]
200007f2:	fab3 f383 	clz	r3, r3
200007f6:	b2db      	uxtb	r3, r3
200007f8:	009b      	lsls	r3, r3, #2
200007fa:	6879      	ldr	r1, [r7, #4]
200007fc:	fa01 f303 	lsl.w	r3, r1, r3
20000800:	431a      	orrs	r2, r3
20000802:	68fb      	ldr	r3, [r7, #12]
20000804:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
20000806:	bf00      	nop
20000808:	3724      	adds	r7, #36	; 0x24
2000080a:	46bd      	mov	sp, r7
2000080c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000810:	4770      	bx	lr

20000812 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
20000812:	b580      	push	{r7, lr}
20000814:	b088      	sub	sp, #32
20000816:	af00      	add	r7, sp, #0
20000818:	6078      	str	r0, [r7, #4]
2000081a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
2000081c:	2300      	movs	r3, #0
2000081e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
20000820:	2300      	movs	r3, #0
20000822:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
20000824:	683b      	ldr	r3, [r7, #0]
20000826:	681b      	ldr	r3, [r3, #0]
20000828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000082a:	697b      	ldr	r3, [r7, #20]
2000082c:	fa93 f3a3 	rbit	r3, r3
20000830:	613b      	str	r3, [r7, #16]
  return result;
20000832:	693b      	ldr	r3, [r7, #16]
20000834:	fab3 f383 	clz	r3, r3
20000838:	b2db      	uxtb	r3, r3
2000083a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
2000083c:	e050      	b.n	200008e0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
2000083e:	683b      	ldr	r3, [r7, #0]
20000840:	681a      	ldr	r2, [r3, #0]
20000842:	2101      	movs	r1, #1
20000844:	69fb      	ldr	r3, [r7, #28]
20000846:	fa01 f303 	lsl.w	r3, r1, r3
2000084a:	4013      	ands	r3, r2
2000084c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
2000084e:	69bb      	ldr	r3, [r7, #24]
20000850:	2b00      	cmp	r3, #0
20000852:	d042      	beq.n	200008da <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
20000854:	683b      	ldr	r3, [r7, #0]
20000856:	685b      	ldr	r3, [r3, #4]
20000858:	2b01      	cmp	r3, #1
2000085a:	d003      	beq.n	20000864 <LL_GPIO_Init+0x52>
2000085c:	683b      	ldr	r3, [r7, #0]
2000085e:	685b      	ldr	r3, [r3, #4]
20000860:	2b02      	cmp	r3, #2
20000862:	d10d      	bne.n	20000880 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
20000864:	683b      	ldr	r3, [r7, #0]
20000866:	689b      	ldr	r3, [r3, #8]
20000868:	461a      	mov	r2, r3
2000086a:	69b9      	ldr	r1, [r7, #24]
2000086c:	6878      	ldr	r0, [r7, #4]
2000086e:	f7ff ff12 	bl	20000696 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
20000872:	683b      	ldr	r3, [r7, #0]
20000874:	68db      	ldr	r3, [r3, #12]
20000876:	461a      	mov	r2, r3
20000878:	69b9      	ldr	r1, [r7, #24]
2000087a:	6878      	ldr	r0, [r7, #4]
2000087c:	f7ff fef3 	bl	20000666 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
20000880:	683b      	ldr	r3, [r7, #0]
20000882:	691b      	ldr	r3, [r3, #16]
20000884:	461a      	mov	r2, r3
20000886:	69b9      	ldr	r1, [r7, #24]
20000888:	6878      	ldr	r0, [r7, #4]
2000088a:	f7ff ff33 	bl	200006f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
2000088e:	683b      	ldr	r3, [r7, #0]
20000890:	685b      	ldr	r3, [r3, #4]
20000892:	2b02      	cmp	r3, #2
20000894:	d11a      	bne.n	200008cc <LL_GPIO_Init+0xba>
20000896:	69bb      	ldr	r3, [r7, #24]
20000898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000089a:	68fb      	ldr	r3, [r7, #12]
2000089c:	fa93 f3a3 	rbit	r3, r3
200008a0:	60bb      	str	r3, [r7, #8]
  return result;
200008a2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
200008a4:	fab3 f383 	clz	r3, r3
200008a8:	b2db      	uxtb	r3, r3
200008aa:	2b07      	cmp	r3, #7
200008ac:	d807      	bhi.n	200008be <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200008ae:	683b      	ldr	r3, [r7, #0]
200008b0:	695b      	ldr	r3, [r3, #20]
200008b2:	461a      	mov	r2, r3
200008b4:	69b9      	ldr	r1, [r7, #24]
200008b6:	6878      	ldr	r0, [r7, #4]
200008b8:	f7ff ff4b 	bl	20000752 <LL_GPIO_SetAFPin_0_7>
200008bc:	e006      	b.n	200008cc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200008be:	683b      	ldr	r3, [r7, #0]
200008c0:	695b      	ldr	r3, [r3, #20]
200008c2:	461a      	mov	r2, r3
200008c4:	69b9      	ldr	r1, [r7, #24]
200008c6:	6878      	ldr	r0, [r7, #4]
200008c8:	f7ff ff72 	bl	200007b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
200008cc:	683b      	ldr	r3, [r7, #0]
200008ce:	685b      	ldr	r3, [r3, #4]
200008d0:	461a      	mov	r2, r3
200008d2:	69b9      	ldr	r1, [r7, #24]
200008d4:	6878      	ldr	r0, [r7, #4]
200008d6:	f7ff fe97 	bl	20000608 <LL_GPIO_SetPinMode>
    }
    pinpos++;
200008da:	69fb      	ldr	r3, [r7, #28]
200008dc:	3301      	adds	r3, #1
200008de:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
200008e0:	683b      	ldr	r3, [r7, #0]
200008e2:	681a      	ldr	r2, [r3, #0]
200008e4:	69fb      	ldr	r3, [r7, #28]
200008e6:	fa22 f303 	lsr.w	r3, r2, r3
200008ea:	2b00      	cmp	r3, #0
200008ec:	d1a7      	bne.n	2000083e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
200008ee:	2300      	movs	r3, #0
}
200008f0:	4618      	mov	r0, r3
200008f2:	3720      	adds	r7, #32
200008f4:	46bd      	mov	sp, r7
200008f6:	bd80      	pop	{r7, pc}

200008f8 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
200008f8:	b480      	push	{r7}
200008fa:	b083      	sub	sp, #12
200008fc:	af00      	add	r7, sp, #0
200008fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	681b      	ldr	r3, [r3, #0]
20000904:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000908:	2b40      	cmp	r3, #64	; 0x40
2000090a:	d101      	bne.n	20000910 <LL_SPI_IsEnabled+0x18>
2000090c:	2301      	movs	r3, #1
2000090e:	e000      	b.n	20000912 <LL_SPI_IsEnabled+0x1a>
20000910:	2300      	movs	r3, #0
}
20000912:	4618      	mov	r0, r3
20000914:	370c      	adds	r7, #12
20000916:	46bd      	mov	sp, r7
20000918:	f85d 7b04 	ldr.w	r7, [sp], #4
2000091c:	4770      	bx	lr

2000091e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
2000091e:	b480      	push	{r7}
20000920:	b083      	sub	sp, #12
20000922:	af00      	add	r7, sp, #0
20000924:	6078      	str	r0, [r7, #4]
20000926:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
20000928:	683b      	ldr	r3, [r7, #0]
2000092a:	b29b      	uxth	r3, r3
2000092c:	461a      	mov	r2, r3
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	611a      	str	r2, [r3, #16]
}
20000932:	bf00      	nop
20000934:	370c      	adds	r7, #12
20000936:	46bd      	mov	sp, r7
20000938:	f85d 7b04 	ldr.w	r7, [sp], #4
2000093c:	4770      	bx	lr

2000093e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
2000093e:	b580      	push	{r7, lr}
20000940:	b084      	sub	sp, #16
20000942:	af00      	add	r7, sp, #0
20000944:	6078      	str	r0, [r7, #4]
20000946:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
20000948:	2301      	movs	r3, #1
2000094a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
2000094c:	6878      	ldr	r0, [r7, #4]
2000094e:	f7ff ffd3 	bl	200008f8 <LL_SPI_IsEnabled>
20000952:	4603      	mov	r3, r0
20000954:	2b00      	cmp	r3, #0
20000956:	d139      	bne.n	200009cc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	681b      	ldr	r3, [r3, #0]
2000095c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
20000960:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
20000964:	683a      	ldr	r2, [r7, #0]
20000966:	6811      	ldr	r1, [r2, #0]
20000968:	683a      	ldr	r2, [r7, #0]
2000096a:	6852      	ldr	r2, [r2, #4]
2000096c:	4311      	orrs	r1, r2
2000096e:	683a      	ldr	r2, [r7, #0]
20000970:	6892      	ldr	r2, [r2, #8]
20000972:	4311      	orrs	r1, r2
20000974:	683a      	ldr	r2, [r7, #0]
20000976:	68d2      	ldr	r2, [r2, #12]
20000978:	4311      	orrs	r1, r2
2000097a:	683a      	ldr	r2, [r7, #0]
2000097c:	6912      	ldr	r2, [r2, #16]
2000097e:	4311      	orrs	r1, r2
20000980:	683a      	ldr	r2, [r7, #0]
20000982:	6952      	ldr	r2, [r2, #20]
20000984:	4311      	orrs	r1, r2
20000986:	683a      	ldr	r2, [r7, #0]
20000988:	6992      	ldr	r2, [r2, #24]
2000098a:	4311      	orrs	r1, r2
2000098c:	683a      	ldr	r2, [r7, #0]
2000098e:	69d2      	ldr	r2, [r2, #28]
20000990:	4311      	orrs	r1, r2
20000992:	683a      	ldr	r2, [r7, #0]
20000994:	6a12      	ldr	r2, [r2, #32]
20000996:	430a      	orrs	r2, r1
20000998:	431a      	orrs	r2, r3
2000099a:	687b      	ldr	r3, [r7, #4]
2000099c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
2000099e:	687b      	ldr	r3, [r7, #4]
200009a0:	685b      	ldr	r3, [r3, #4]
200009a2:	f023 0204 	bic.w	r2, r3, #4
200009a6:	683b      	ldr	r3, [r7, #0]
200009a8:	695b      	ldr	r3, [r3, #20]
200009aa:	0c1b      	lsrs	r3, r3, #16
200009ac:	431a      	orrs	r2, r3
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
200009b2:	683b      	ldr	r3, [r7, #0]
200009b4:	6a1b      	ldr	r3, [r3, #32]
200009b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200009ba:	d105      	bne.n	200009c8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
200009bc:	683b      	ldr	r3, [r7, #0]
200009be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200009c0:	4619      	mov	r1, r3
200009c2:	6878      	ldr	r0, [r7, #4]
200009c4:	f7ff ffab 	bl	2000091e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
200009c8:	2300      	movs	r3, #0
200009ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
200009cc:	687b      	ldr	r3, [r7, #4]
200009ce:	69db      	ldr	r3, [r3, #28]
200009d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
200009d4:	687b      	ldr	r3, [r7, #4]
200009d6:	61da      	str	r2, [r3, #28]
  return status;
200009d8:	7bfb      	ldrb	r3, [r7, #15]
}
200009da:	4618      	mov	r0, r3
200009dc:	3710      	adds	r7, #16
200009de:	46bd      	mov	sp, r7
200009e0:	bd80      	pop	{r7, pc}
	...

200009e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
200009e4:	b480      	push	{r7}
200009e6:	b083      	sub	sp, #12
200009e8:	af00      	add	r7, sp, #0
200009ea:	6078      	str	r0, [r7, #4]
200009ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
200009ee:	687a      	ldr	r2, [r7, #4]
200009f0:	683b      	ldr	r3, [r7, #0]
200009f2:	fbb2 f3f3 	udiv	r3, r2, r3
200009f6:	4a07      	ldr	r2, [pc, #28]	; (20000a14 <LL_InitTick+0x30>)
200009f8:	3b01      	subs	r3, #1
200009fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <LL_InitTick+0x30>)
200009fe:	2200      	movs	r2, #0
20000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20000a02:	4b04      	ldr	r3, [pc, #16]	; (20000a14 <LL_InitTick+0x30>)
20000a04:	2205      	movs	r2, #5
20000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
20000a08:	bf00      	nop
20000a0a:	370c      	adds	r7, #12
20000a0c:	46bd      	mov	sp, r7
20000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a12:	4770      	bx	lr
20000a14:	e000e010 	.word	0xe000e010

20000a18 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
20000a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
20000a24:	6878      	ldr	r0, [r7, #4]
20000a26:	f7ff ffdd 	bl	200009e4 <LL_InitTick>
}
20000a2a:	bf00      	nop
20000a2c:	3708      	adds	r7, #8
20000a2e:	46bd      	mov	sp, r7
20000a30:	bd80      	pop	{r7, pc}
	...

20000a34 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
20000a34:	b480      	push	{r7}
20000a36:	b085      	sub	sp, #20
20000a38:	af00      	add	r7, sp, #0
20000a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
20000a3c:	4b0f      	ldr	r3, [pc, #60]	; (20000a7c <LL_mDelay+0x48>)
20000a3e:	681b      	ldr	r3, [r3, #0]
20000a40:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
20000a42:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	f1b3 3fff 	cmp.w	r3, #4294967295
20000a4a:	d00c      	beq.n	20000a66 <LL_mDelay+0x32>
  {
    Delay++;
20000a4c:	687b      	ldr	r3, [r7, #4]
20000a4e:	3301      	adds	r3, #1
20000a50:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
20000a52:	e008      	b.n	20000a66 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
20000a54:	4b09      	ldr	r3, [pc, #36]	; (20000a7c <LL_mDelay+0x48>)
20000a56:	681b      	ldr	r3, [r3, #0]
20000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000a5c:	2b00      	cmp	r3, #0
20000a5e:	d002      	beq.n	20000a66 <LL_mDelay+0x32>
    {
      Delay--;
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	3b01      	subs	r3, #1
20000a64:	607b      	str	r3, [r7, #4]
  while (Delay)
20000a66:	687b      	ldr	r3, [r7, #4]
20000a68:	2b00      	cmp	r3, #0
20000a6a:	d1f3      	bne.n	20000a54 <LL_mDelay+0x20>
    }
  }
}
20000a6c:	bf00      	nop
20000a6e:	bf00      	nop
20000a70:	3714      	adds	r7, #20
20000a72:	46bd      	mov	sp, r7
20000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a78:	4770      	bx	lr
20000a7a:	bf00      	nop
20000a7c:	e000e010 	.word	0xe000e010

20000a80 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
20000a80:	b480      	push	{r7}
20000a82:	b083      	sub	sp, #12
20000a84:	af00      	add	r7, sp, #0
20000a86:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
20000a88:	4a04      	ldr	r2, [pc, #16]	; (20000a9c <LL_SetSystemCoreClock+0x1c>)
20000a8a:	687b      	ldr	r3, [r7, #4]
20000a8c:	6013      	str	r3, [r2, #0]
}
20000a8e:	bf00      	nop
20000a90:	370c      	adds	r7, #12
20000a92:	46bd      	mov	sp, r7
20000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a98:	4770      	bx	lr
20000a9a:	bf00      	nop
20000a9c:	20009c0c 	.word	0x20009c0c

20000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000aa0:	b480      	push	{r7}
20000aa2:	b083      	sub	sp, #12
20000aa4:	af00      	add	r7, sp, #0
20000aa6:	4603      	mov	r3, r0
20000aa8:	6039      	str	r1, [r7, #0]
20000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000ab0:	2b00      	cmp	r3, #0
20000ab2:	db0a      	blt.n	20000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000ab4:	683b      	ldr	r3, [r7, #0]
20000ab6:	b2da      	uxtb	r2, r3
20000ab8:	490c      	ldr	r1, [pc, #48]	; (20000aec <__NVIC_SetPriority+0x4c>)
20000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000abe:	0112      	lsls	r2, r2, #4
20000ac0:	b2d2      	uxtb	r2, r2
20000ac2:	440b      	add	r3, r1
20000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000ac8:	e00a      	b.n	20000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000aca:	683b      	ldr	r3, [r7, #0]
20000acc:	b2da      	uxtb	r2, r3
20000ace:	4908      	ldr	r1, [pc, #32]	; (20000af0 <__NVIC_SetPriority+0x50>)
20000ad0:	79fb      	ldrb	r3, [r7, #7]
20000ad2:	f003 030f 	and.w	r3, r3, #15
20000ad6:	3b04      	subs	r3, #4
20000ad8:	0112      	lsls	r2, r2, #4
20000ada:	b2d2      	uxtb	r2, r2
20000adc:	440b      	add	r3, r1
20000ade:	761a      	strb	r2, [r3, #24]
}
20000ae0:	bf00      	nop
20000ae2:	370c      	adds	r7, #12
20000ae4:	46bd      	mov	sp, r7
20000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000aea:	4770      	bx	lr
20000aec:	e000e100 	.word	0xe000e100
20000af0:	e000ed00 	.word	0xe000ed00

20000af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
20000af4:	b580      	push	{r7, lr}
20000af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
20000af8:	2100      	movs	r1, #0
20000afa:	f06f 0004 	mvn.w	r0, #4
20000afe:	f7ff ffcf 	bl	20000aa0 <__NVIC_SetPriority>
#endif
}
20000b02:	bf00      	nop
20000b04:	bd80      	pop	{r7, pc}
	...

20000b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
20000b08:	b480      	push	{r7}
20000b0a:	b083      	sub	sp, #12
20000b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000b0e:	f3ef 8305 	mrs	r3, IPSR
20000b12:	603b      	str	r3, [r7, #0]
  return(result);
20000b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000b16:	2b00      	cmp	r3, #0
20000b18:	d003      	beq.n	20000b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
20000b1a:	f06f 0305 	mvn.w	r3, #5
20000b1e:	607b      	str	r3, [r7, #4]
20000b20:	e00c      	b.n	20000b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
20000b22:	4b0a      	ldr	r3, [pc, #40]	; (20000b4c <osKernelInitialize+0x44>)
20000b24:	681b      	ldr	r3, [r3, #0]
20000b26:	2b00      	cmp	r3, #0
20000b28:	d105      	bne.n	20000b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
20000b2a:	4b08      	ldr	r3, [pc, #32]	; (20000b4c <osKernelInitialize+0x44>)
20000b2c:	2201      	movs	r2, #1
20000b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
20000b30:	2300      	movs	r3, #0
20000b32:	607b      	str	r3, [r7, #4]
20000b34:	e002      	b.n	20000b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
20000b36:	f04f 33ff 	mov.w	r3, #4294967295
20000b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000b3c:	687b      	ldr	r3, [r7, #4]
}
20000b3e:	4618      	mov	r0, r3
20000b40:	370c      	adds	r7, #12
20000b42:	46bd      	mov	sp, r7
20000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b48:	4770      	bx	lr
20000b4a:	bf00      	nop
20000b4c:	20009c90 	.word	0x20009c90

20000b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
20000b50:	b580      	push	{r7, lr}
20000b52:	b082      	sub	sp, #8
20000b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000b56:	f3ef 8305 	mrs	r3, IPSR
20000b5a:	603b      	str	r3, [r7, #0]
  return(result);
20000b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000b5e:	2b00      	cmp	r3, #0
20000b60:	d003      	beq.n	20000b6a <osKernelStart+0x1a>
    stat = osErrorISR;
20000b62:	f06f 0305 	mvn.w	r3, #5
20000b66:	607b      	str	r3, [r7, #4]
20000b68:	e010      	b.n	20000b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
20000b6a:	4b0b      	ldr	r3, [pc, #44]	; (20000b98 <osKernelStart+0x48>)
20000b6c:	681b      	ldr	r3, [r3, #0]
20000b6e:	2b01      	cmp	r3, #1
20000b70:	d109      	bne.n	20000b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
20000b72:	f7ff ffbf 	bl	20000af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
20000b76:	4b08      	ldr	r3, [pc, #32]	; (20000b98 <osKernelStart+0x48>)
20000b78:	2202      	movs	r2, #2
20000b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
20000b7c:	f001 f9f6 	bl	20001f6c <vTaskStartScheduler>
      stat = osOK;
20000b80:	2300      	movs	r3, #0
20000b82:	607b      	str	r3, [r7, #4]
20000b84:	e002      	b.n	20000b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
20000b86:	f04f 33ff 	mov.w	r3, #4294967295
20000b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000b8c:	687b      	ldr	r3, [r7, #4]
}
20000b8e:	4618      	mov	r0, r3
20000b90:	3708      	adds	r7, #8
20000b92:	46bd      	mov	sp, r7
20000b94:	bd80      	pop	{r7, pc}
20000b96:	bf00      	nop
20000b98:	20009c90 	.word	0x20009c90

20000b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
20000b9c:	b580      	push	{r7, lr}
20000b9e:	b08e      	sub	sp, #56	; 0x38
20000ba0:	af04      	add	r7, sp, #16
20000ba2:	60f8      	str	r0, [r7, #12]
20000ba4:	60b9      	str	r1, [r7, #8]
20000ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
20000ba8:	2300      	movs	r3, #0
20000baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000bac:	f3ef 8305 	mrs	r3, IPSR
20000bb0:	617b      	str	r3, [r7, #20]
  return(result);
20000bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
20000bb4:	2b00      	cmp	r3, #0
20000bb6:	d17e      	bne.n	20000cb6 <osThreadNew+0x11a>
20000bb8:	68fb      	ldr	r3, [r7, #12]
20000bba:	2b00      	cmp	r3, #0
20000bbc:	d07b      	beq.n	20000cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
20000bbe:	2380      	movs	r3, #128	; 0x80
20000bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
20000bc2:	2318      	movs	r3, #24
20000bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
20000bc6:	2300      	movs	r3, #0
20000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
20000bca:	f04f 33ff 	mov.w	r3, #4294967295
20000bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	2b00      	cmp	r3, #0
20000bd4:	d045      	beq.n	20000c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	681b      	ldr	r3, [r3, #0]
20000bda:	2b00      	cmp	r3, #0
20000bdc:	d002      	beq.n	20000be4 <osThreadNew+0x48>
        name = attr->name;
20000bde:	687b      	ldr	r3, [r7, #4]
20000be0:	681b      	ldr	r3, [r3, #0]
20000be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	699b      	ldr	r3, [r3, #24]
20000be8:	2b00      	cmp	r3, #0
20000bea:	d002      	beq.n	20000bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
20000bec:	687b      	ldr	r3, [r7, #4]
20000bee:	699b      	ldr	r3, [r3, #24]
20000bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
20000bf2:	69fb      	ldr	r3, [r7, #28]
20000bf4:	2b00      	cmp	r3, #0
20000bf6:	d008      	beq.n	20000c0a <osThreadNew+0x6e>
20000bf8:	69fb      	ldr	r3, [r7, #28]
20000bfa:	2b38      	cmp	r3, #56	; 0x38
20000bfc:	d805      	bhi.n	20000c0a <osThreadNew+0x6e>
20000bfe:	687b      	ldr	r3, [r7, #4]
20000c00:	685b      	ldr	r3, [r3, #4]
20000c02:	f003 0301 	and.w	r3, r3, #1
20000c06:	2b00      	cmp	r3, #0
20000c08:	d001      	beq.n	20000c0e <osThreadNew+0x72>
        return (NULL);
20000c0a:	2300      	movs	r3, #0
20000c0c:	e054      	b.n	20000cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
20000c0e:	687b      	ldr	r3, [r7, #4]
20000c10:	695b      	ldr	r3, [r3, #20]
20000c12:	2b00      	cmp	r3, #0
20000c14:	d003      	beq.n	20000c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
20000c16:	687b      	ldr	r3, [r7, #4]
20000c18:	695b      	ldr	r3, [r3, #20]
20000c1a:	089b      	lsrs	r3, r3, #2
20000c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20000c1e:	687b      	ldr	r3, [r7, #4]
20000c20:	689b      	ldr	r3, [r3, #8]
20000c22:	2b00      	cmp	r3, #0
20000c24:	d00e      	beq.n	20000c44 <osThreadNew+0xa8>
20000c26:	687b      	ldr	r3, [r7, #4]
20000c28:	68db      	ldr	r3, [r3, #12]
20000c2a:	2bbb      	cmp	r3, #187	; 0xbb
20000c2c:	d90a      	bls.n	20000c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20000c2e:	687b      	ldr	r3, [r7, #4]
20000c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20000c32:	2b00      	cmp	r3, #0
20000c34:	d006      	beq.n	20000c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	695b      	ldr	r3, [r3, #20]
20000c3a:	2b00      	cmp	r3, #0
20000c3c:	d002      	beq.n	20000c44 <osThreadNew+0xa8>
        mem = 1;
20000c3e:	2301      	movs	r3, #1
20000c40:	61bb      	str	r3, [r7, #24]
20000c42:	e010      	b.n	20000c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
20000c44:	687b      	ldr	r3, [r7, #4]
20000c46:	689b      	ldr	r3, [r3, #8]
20000c48:	2b00      	cmp	r3, #0
20000c4a:	d10c      	bne.n	20000c66 <osThreadNew+0xca>
20000c4c:	687b      	ldr	r3, [r7, #4]
20000c4e:	68db      	ldr	r3, [r3, #12]
20000c50:	2b00      	cmp	r3, #0
20000c52:	d108      	bne.n	20000c66 <osThreadNew+0xca>
20000c54:	687b      	ldr	r3, [r7, #4]
20000c56:	691b      	ldr	r3, [r3, #16]
20000c58:	2b00      	cmp	r3, #0
20000c5a:	d104      	bne.n	20000c66 <osThreadNew+0xca>
          mem = 0;
20000c5c:	2300      	movs	r3, #0
20000c5e:	61bb      	str	r3, [r7, #24]
20000c60:	e001      	b.n	20000c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
20000c62:	2300      	movs	r3, #0
20000c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
20000c66:	69bb      	ldr	r3, [r7, #24]
20000c68:	2b01      	cmp	r3, #1
20000c6a:	d110      	bne.n	20000c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
20000c70:	687a      	ldr	r2, [r7, #4]
20000c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20000c74:	9202      	str	r2, [sp, #8]
20000c76:	9301      	str	r3, [sp, #4]
20000c78:	69fb      	ldr	r3, [r7, #28]
20000c7a:	9300      	str	r3, [sp, #0]
20000c7c:	68bb      	ldr	r3, [r7, #8]
20000c7e:	6a3a      	ldr	r2, [r7, #32]
20000c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000c82:	68f8      	ldr	r0, [r7, #12]
20000c84:	f000 ff86 	bl	20001b94 <xTaskCreateStatic>
20000c88:	4603      	mov	r3, r0
20000c8a:	613b      	str	r3, [r7, #16]
20000c8c:	e013      	b.n	20000cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
20000c8e:	69bb      	ldr	r3, [r7, #24]
20000c90:	2b00      	cmp	r3, #0
20000c92:	d110      	bne.n	20000cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
20000c94:	6a3b      	ldr	r3, [r7, #32]
20000c96:	b29a      	uxth	r2, r3
20000c98:	f107 0310 	add.w	r3, r7, #16
20000c9c:	9301      	str	r3, [sp, #4]
20000c9e:	69fb      	ldr	r3, [r7, #28]
20000ca0:	9300      	str	r3, [sp, #0]
20000ca2:	68bb      	ldr	r3, [r7, #8]
20000ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000ca6:	68f8      	ldr	r0, [r7, #12]
20000ca8:	f000 ffd1 	bl	20001c4e <xTaskCreate>
20000cac:	4603      	mov	r3, r0
20000cae:	2b01      	cmp	r3, #1
20000cb0:	d001      	beq.n	20000cb6 <osThreadNew+0x11a>
            hTask = NULL;
20000cb2:	2300      	movs	r3, #0
20000cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
20000cb6:	693b      	ldr	r3, [r7, #16]
}
20000cb8:	4618      	mov	r0, r3
20000cba:	3728      	adds	r7, #40	; 0x28
20000cbc:	46bd      	mov	sp, r7
20000cbe:	bd80      	pop	{r7, pc}

20000cc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
20000cc0:	b580      	push	{r7, lr}
20000cc2:	b084      	sub	sp, #16
20000cc4:	af00      	add	r7, sp, #0
20000cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000cc8:	f3ef 8305 	mrs	r3, IPSR
20000ccc:	60bb      	str	r3, [r7, #8]
  return(result);
20000cce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
20000cd0:	2b00      	cmp	r3, #0
20000cd2:	d003      	beq.n	20000cdc <osDelay+0x1c>
    stat = osErrorISR;
20000cd4:	f06f 0305 	mvn.w	r3, #5
20000cd8:	60fb      	str	r3, [r7, #12]
20000cda:	e007      	b.n	20000cec <osDelay+0x2c>
  }
  else {
    stat = osOK;
20000cdc:	2300      	movs	r3, #0
20000cde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
20000ce0:	687b      	ldr	r3, [r7, #4]
20000ce2:	2b00      	cmp	r3, #0
20000ce4:	d002      	beq.n	20000cec <osDelay+0x2c>
      vTaskDelay(ticks);
20000ce6:	6878      	ldr	r0, [r7, #4]
20000ce8:	f001 f90c 	bl	20001f04 <vTaskDelay>
    }
  }

  return (stat);
20000cec:	68fb      	ldr	r3, [r7, #12]
}
20000cee:	4618      	mov	r0, r3
20000cf0:	3710      	adds	r7, #16
20000cf2:	46bd      	mov	sp, r7
20000cf4:	bd80      	pop	{r7, pc}

20000cf6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
20000cf6:	b580      	push	{r7, lr}
20000cf8:	b08a      	sub	sp, #40	; 0x28
20000cfa:	af02      	add	r7, sp, #8
20000cfc:	60f8      	str	r0, [r7, #12]
20000cfe:	60b9      	str	r1, [r7, #8]
20000d00:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
20000d02:	2300      	movs	r3, #0
20000d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000d06:	f3ef 8305 	mrs	r3, IPSR
20000d0a:	613b      	str	r3, [r7, #16]
  return(result);
20000d0c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
20000d0e:	2b00      	cmp	r3, #0
20000d10:	d175      	bne.n	20000dfe <osSemaphoreNew+0x108>
20000d12:	68fb      	ldr	r3, [r7, #12]
20000d14:	2b00      	cmp	r3, #0
20000d16:	d072      	beq.n	20000dfe <osSemaphoreNew+0x108>
20000d18:	68ba      	ldr	r2, [r7, #8]
20000d1a:	68fb      	ldr	r3, [r7, #12]
20000d1c:	429a      	cmp	r2, r3
20000d1e:	d86e      	bhi.n	20000dfe <osSemaphoreNew+0x108>
    mem = -1;
20000d20:	f04f 33ff 	mov.w	r3, #4294967295
20000d24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
20000d26:	687b      	ldr	r3, [r7, #4]
20000d28:	2b00      	cmp	r3, #0
20000d2a:	d015      	beq.n	20000d58 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	689b      	ldr	r3, [r3, #8]
20000d30:	2b00      	cmp	r3, #0
20000d32:	d006      	beq.n	20000d42 <osSemaphoreNew+0x4c>
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	68db      	ldr	r3, [r3, #12]
20000d38:	2b4f      	cmp	r3, #79	; 0x4f
20000d3a:	d902      	bls.n	20000d42 <osSemaphoreNew+0x4c>
        mem = 1;
20000d3c:	2301      	movs	r3, #1
20000d3e:	61bb      	str	r3, [r7, #24]
20000d40:	e00c      	b.n	20000d5c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	689b      	ldr	r3, [r3, #8]
20000d46:	2b00      	cmp	r3, #0
20000d48:	d108      	bne.n	20000d5c <osSemaphoreNew+0x66>
20000d4a:	687b      	ldr	r3, [r7, #4]
20000d4c:	68db      	ldr	r3, [r3, #12]
20000d4e:	2b00      	cmp	r3, #0
20000d50:	d104      	bne.n	20000d5c <osSemaphoreNew+0x66>
          mem = 0;
20000d52:	2300      	movs	r3, #0
20000d54:	61bb      	str	r3, [r7, #24]
20000d56:	e001      	b.n	20000d5c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
20000d58:	2300      	movs	r3, #0
20000d5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
20000d5c:	69bb      	ldr	r3, [r7, #24]
20000d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
20000d62:	d04c      	beq.n	20000dfe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
20000d64:	68fb      	ldr	r3, [r7, #12]
20000d66:	2b01      	cmp	r3, #1
20000d68:	d128      	bne.n	20000dbc <osSemaphoreNew+0xc6>
        if (mem == 1) {
20000d6a:	69bb      	ldr	r3, [r7, #24]
20000d6c:	2b01      	cmp	r3, #1
20000d6e:	d10a      	bne.n	20000d86 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	689b      	ldr	r3, [r3, #8]
20000d74:	2203      	movs	r2, #3
20000d76:	9200      	str	r2, [sp, #0]
20000d78:	2200      	movs	r2, #0
20000d7a:	2100      	movs	r1, #0
20000d7c:	2001      	movs	r0, #1
20000d7e:	f000 f993 	bl	200010a8 <xQueueGenericCreateStatic>
20000d82:	61f8      	str	r0, [r7, #28]
20000d84:	e005      	b.n	20000d92 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
20000d86:	2203      	movs	r2, #3
20000d88:	2100      	movs	r1, #0
20000d8a:	2001      	movs	r0, #1
20000d8c:	f000 fa04 	bl	20001198 <xQueueGenericCreate>
20000d90:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
20000d92:	69fb      	ldr	r3, [r7, #28]
20000d94:	2b00      	cmp	r3, #0
20000d96:	d022      	beq.n	20000dde <osSemaphoreNew+0xe8>
20000d98:	68bb      	ldr	r3, [r7, #8]
20000d9a:	2b00      	cmp	r3, #0
20000d9c:	d01f      	beq.n	20000dde <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
20000d9e:	2300      	movs	r3, #0
20000da0:	2200      	movs	r2, #0
20000da2:	2100      	movs	r1, #0
20000da4:	69f8      	ldr	r0, [r7, #28]
20000da6:	f000 fabf 	bl	20001328 <xQueueGenericSend>
20000daa:	4603      	mov	r3, r0
20000dac:	2b01      	cmp	r3, #1
20000dae:	d016      	beq.n	20000dde <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
20000db0:	69f8      	ldr	r0, [r7, #28]
20000db2:	f000 fd33 	bl	2000181c <vQueueDelete>
            hSemaphore = NULL;
20000db6:	2300      	movs	r3, #0
20000db8:	61fb      	str	r3, [r7, #28]
20000dba:	e010      	b.n	20000dde <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
20000dbc:	69bb      	ldr	r3, [r7, #24]
20000dbe:	2b01      	cmp	r3, #1
20000dc0:	d108      	bne.n	20000dd4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
20000dc2:	687b      	ldr	r3, [r7, #4]
20000dc4:	689b      	ldr	r3, [r3, #8]
20000dc6:	461a      	mov	r2, r3
20000dc8:	68b9      	ldr	r1, [r7, #8]
20000dca:	68f8      	ldr	r0, [r7, #12]
20000dcc:	f000 fa41 	bl	20001252 <xQueueCreateCountingSemaphoreStatic>
20000dd0:	61f8      	str	r0, [r7, #28]
20000dd2:	e004      	b.n	20000dde <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
20000dd4:	68b9      	ldr	r1, [r7, #8]
20000dd6:	68f8      	ldr	r0, [r7, #12]
20000dd8:	f000 fa72 	bl	200012c0 <xQueueCreateCountingSemaphore>
20000ddc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
20000dde:	69fb      	ldr	r3, [r7, #28]
20000de0:	2b00      	cmp	r3, #0
20000de2:	d00c      	beq.n	20000dfe <osSemaphoreNew+0x108>
        if (attr != NULL) {
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	2b00      	cmp	r3, #0
20000de8:	d003      	beq.n	20000df2 <osSemaphoreNew+0xfc>
          name = attr->name;
20000dea:	687b      	ldr	r3, [r7, #4]
20000dec:	681b      	ldr	r3, [r3, #0]
20000dee:	617b      	str	r3, [r7, #20]
20000df0:	e001      	b.n	20000df6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
20000df2:	2300      	movs	r3, #0
20000df4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
20000df6:	6979      	ldr	r1, [r7, #20]
20000df8:	69f8      	ldr	r0, [r7, #28]
20000dfa:	f000 fe43 	bl	20001a84 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
20000dfe:	69fb      	ldr	r3, [r7, #28]
}
20000e00:	4618      	mov	r0, r3
20000e02:	3720      	adds	r7, #32
20000e04:	46bd      	mov	sp, r7
20000e06:	bd80      	pop	{r7, pc}

20000e08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
20000e08:	b480      	push	{r7}
20000e0a:	b085      	sub	sp, #20
20000e0c:	af00      	add	r7, sp, #0
20000e0e:	60f8      	str	r0, [r7, #12]
20000e10:	60b9      	str	r1, [r7, #8]
20000e12:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
20000e14:	68fb      	ldr	r3, [r7, #12]
20000e16:	4a07      	ldr	r2, [pc, #28]	; (20000e34 <vApplicationGetIdleTaskMemory+0x2c>)
20000e18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
20000e1a:	68bb      	ldr	r3, [r7, #8]
20000e1c:	4a06      	ldr	r2, [pc, #24]	; (20000e38 <vApplicationGetIdleTaskMemory+0x30>)
20000e1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
20000e20:	687b      	ldr	r3, [r7, #4]
20000e22:	2280      	movs	r2, #128	; 0x80
20000e24:	601a      	str	r2, [r3, #0]
}
20000e26:	bf00      	nop
20000e28:	3714      	adds	r7, #20
20000e2a:	46bd      	mov	sp, r7
20000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e30:	4770      	bx	lr
20000e32:	bf00      	nop
20000e34:	20009c94 	.word	0x20009c94
20000e38:	20009d50 	.word	0x20009d50

20000e3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
20000e3c:	b480      	push	{r7}
20000e3e:	b085      	sub	sp, #20
20000e40:	af00      	add	r7, sp, #0
20000e42:	60f8      	str	r0, [r7, #12]
20000e44:	60b9      	str	r1, [r7, #8]
20000e46:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
20000e48:	68fb      	ldr	r3, [r7, #12]
20000e4a:	4a07      	ldr	r2, [pc, #28]	; (20000e68 <vApplicationGetTimerTaskMemory+0x2c>)
20000e4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
20000e4e:	68bb      	ldr	r3, [r7, #8]
20000e50:	4a06      	ldr	r2, [pc, #24]	; (20000e6c <vApplicationGetTimerTaskMemory+0x30>)
20000e52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
20000e54:	687b      	ldr	r3, [r7, #4]
20000e56:	f44f 7280 	mov.w	r2, #256	; 0x100
20000e5a:	601a      	str	r2, [r3, #0]
}
20000e5c:	bf00      	nop
20000e5e:	3714      	adds	r7, #20
20000e60:	46bd      	mov	sp, r7
20000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
20000e66:	4770      	bx	lr
20000e68:	20009f50 	.word	0x20009f50
20000e6c:	2000a00c 	.word	0x2000a00c

20000e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20000e70:	b480      	push	{r7}
20000e72:	b083      	sub	sp, #12
20000e74:	af00      	add	r7, sp, #0
20000e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000e78:	687b      	ldr	r3, [r7, #4]
20000e7a:	f103 0208 	add.w	r2, r3, #8
20000e7e:	687b      	ldr	r3, [r7, #4]
20000e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20000e82:	687b      	ldr	r3, [r7, #4]
20000e84:	f04f 32ff 	mov.w	r2, #4294967295
20000e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000e8a:	687b      	ldr	r3, [r7, #4]
20000e8c:	f103 0208 	add.w	r2, r3, #8
20000e90:	687b      	ldr	r3, [r7, #4]
20000e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000e94:	687b      	ldr	r3, [r7, #4]
20000e96:	f103 0208 	add.w	r2, r3, #8
20000e9a:	687b      	ldr	r3, [r7, #4]
20000e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20000e9e:	687b      	ldr	r3, [r7, #4]
20000ea0:	2200      	movs	r2, #0
20000ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20000ea4:	bf00      	nop
20000ea6:	370c      	adds	r7, #12
20000ea8:	46bd      	mov	sp, r7
20000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
20000eae:	4770      	bx	lr

20000eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20000eb0:	b480      	push	{r7}
20000eb2:	b083      	sub	sp, #12
20000eb4:	af00      	add	r7, sp, #0
20000eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
20000eb8:	687b      	ldr	r3, [r7, #4]
20000eba:	2200      	movs	r2, #0
20000ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20000ebe:	bf00      	nop
20000ec0:	370c      	adds	r7, #12
20000ec2:	46bd      	mov	sp, r7
20000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
20000ec8:	4770      	bx	lr

20000eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000eca:	b480      	push	{r7}
20000ecc:	b085      	sub	sp, #20
20000ece:	af00      	add	r7, sp, #0
20000ed0:	6078      	str	r0, [r7, #4]
20000ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20000ed4:	687b      	ldr	r3, [r7, #4]
20000ed6:	685b      	ldr	r3, [r3, #4]
20000ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20000eda:	683b      	ldr	r3, [r7, #0]
20000edc:	68fa      	ldr	r2, [r7, #12]
20000ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
20000ee0:	68fb      	ldr	r3, [r7, #12]
20000ee2:	689a      	ldr	r2, [r3, #8]
20000ee4:	683b      	ldr	r3, [r7, #0]
20000ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20000ee8:	68fb      	ldr	r3, [r7, #12]
20000eea:	689b      	ldr	r3, [r3, #8]
20000eec:	683a      	ldr	r2, [r7, #0]
20000eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
20000ef0:	68fb      	ldr	r3, [r7, #12]
20000ef2:	683a      	ldr	r2, [r7, #0]
20000ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
20000ef6:	683b      	ldr	r3, [r7, #0]
20000ef8:	687a      	ldr	r2, [r7, #4]
20000efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20000efc:	687b      	ldr	r3, [r7, #4]
20000efe:	681b      	ldr	r3, [r3, #0]
20000f00:	1c5a      	adds	r2, r3, #1
20000f02:	687b      	ldr	r3, [r7, #4]
20000f04:	601a      	str	r2, [r3, #0]
}
20000f06:	bf00      	nop
20000f08:	3714      	adds	r7, #20
20000f0a:	46bd      	mov	sp, r7
20000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f10:	4770      	bx	lr

20000f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000f12:	b480      	push	{r7}
20000f14:	b085      	sub	sp, #20
20000f16:	af00      	add	r7, sp, #0
20000f18:	6078      	str	r0, [r7, #4]
20000f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
20000f1c:	683b      	ldr	r3, [r7, #0]
20000f1e:	681b      	ldr	r3, [r3, #0]
20000f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
20000f22:	68bb      	ldr	r3, [r7, #8]
20000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
20000f28:	d103      	bne.n	20000f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20000f2a:	687b      	ldr	r3, [r7, #4]
20000f2c:	691b      	ldr	r3, [r3, #16]
20000f2e:	60fb      	str	r3, [r7, #12]
20000f30:	e00c      	b.n	20000f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
20000f32:	687b      	ldr	r3, [r7, #4]
20000f34:	3308      	adds	r3, #8
20000f36:	60fb      	str	r3, [r7, #12]
20000f38:	e002      	b.n	20000f40 <vListInsert+0x2e>
20000f3a:	68fb      	ldr	r3, [r7, #12]
20000f3c:	685b      	ldr	r3, [r3, #4]
20000f3e:	60fb      	str	r3, [r7, #12]
20000f40:	68fb      	ldr	r3, [r7, #12]
20000f42:	685b      	ldr	r3, [r3, #4]
20000f44:	681b      	ldr	r3, [r3, #0]
20000f46:	68ba      	ldr	r2, [r7, #8]
20000f48:	429a      	cmp	r2, r3
20000f4a:	d2f6      	bcs.n	20000f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
20000f4c:	68fb      	ldr	r3, [r7, #12]
20000f4e:	685a      	ldr	r2, [r3, #4]
20000f50:	683b      	ldr	r3, [r7, #0]
20000f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20000f54:	683b      	ldr	r3, [r7, #0]
20000f56:	685b      	ldr	r3, [r3, #4]
20000f58:	683a      	ldr	r2, [r7, #0]
20000f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
20000f5c:	683b      	ldr	r3, [r7, #0]
20000f5e:	68fa      	ldr	r2, [r7, #12]
20000f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
20000f62:	68fb      	ldr	r3, [r7, #12]
20000f64:	683a      	ldr	r2, [r7, #0]
20000f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
20000f68:	683b      	ldr	r3, [r7, #0]
20000f6a:	687a      	ldr	r2, [r7, #4]
20000f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20000f6e:	687b      	ldr	r3, [r7, #4]
20000f70:	681b      	ldr	r3, [r3, #0]
20000f72:	1c5a      	adds	r2, r3, #1
20000f74:	687b      	ldr	r3, [r7, #4]
20000f76:	601a      	str	r2, [r3, #0]
}
20000f78:	bf00      	nop
20000f7a:	3714      	adds	r7, #20
20000f7c:	46bd      	mov	sp, r7
20000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f82:	4770      	bx	lr

20000f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
20000f84:	b480      	push	{r7}
20000f86:	b085      	sub	sp, #20
20000f88:	af00      	add	r7, sp, #0
20000f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
20000f8c:	687b      	ldr	r3, [r7, #4]
20000f8e:	691b      	ldr	r3, [r3, #16]
20000f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
20000f92:	687b      	ldr	r3, [r7, #4]
20000f94:	685b      	ldr	r3, [r3, #4]
20000f96:	687a      	ldr	r2, [r7, #4]
20000f98:	6892      	ldr	r2, [r2, #8]
20000f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
20000f9c:	687b      	ldr	r3, [r7, #4]
20000f9e:	689b      	ldr	r3, [r3, #8]
20000fa0:	687a      	ldr	r2, [r7, #4]
20000fa2:	6852      	ldr	r2, [r2, #4]
20000fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
20000fa6:	68fb      	ldr	r3, [r7, #12]
20000fa8:	685b      	ldr	r3, [r3, #4]
20000faa:	687a      	ldr	r2, [r7, #4]
20000fac:	429a      	cmp	r2, r3
20000fae:	d103      	bne.n	20000fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
20000fb0:	687b      	ldr	r3, [r7, #4]
20000fb2:	689a      	ldr	r2, [r3, #8]
20000fb4:	68fb      	ldr	r3, [r7, #12]
20000fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
20000fb8:	687b      	ldr	r3, [r7, #4]
20000fba:	2200      	movs	r2, #0
20000fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
20000fbe:	68fb      	ldr	r3, [r7, #12]
20000fc0:	681b      	ldr	r3, [r3, #0]
20000fc2:	1e5a      	subs	r2, r3, #1
20000fc4:	68fb      	ldr	r3, [r7, #12]
20000fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
20000fc8:	68fb      	ldr	r3, [r7, #12]
20000fca:	681b      	ldr	r3, [r3, #0]
}
20000fcc:	4618      	mov	r0, r3
20000fce:	3714      	adds	r7, #20
20000fd0:	46bd      	mov	sp, r7
20000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fd6:	4770      	bx	lr

20000fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
20000fd8:	b580      	push	{r7, lr}
20000fda:	b084      	sub	sp, #16
20000fdc:	af00      	add	r7, sp, #0
20000fde:	6078      	str	r0, [r7, #4]
20000fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
20000fe2:	687b      	ldr	r3, [r7, #4]
20000fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
20000fe6:	68fb      	ldr	r3, [r7, #12]
20000fe8:	2b00      	cmp	r3, #0
20000fea:	d10a      	bne.n	20001002 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20000fec:	f04f 0350 	mov.w	r3, #80	; 0x50
20000ff0:	f383 8811 	msr	BASEPRI, r3
20000ff4:	f3bf 8f6f 	isb	sy
20000ff8:	f3bf 8f4f 	dsb	sy
20000ffc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
20000ffe:	bf00      	nop
20001000:	e7fe      	b.n	20001000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
20001002:	f002 f967 	bl	200032d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20001006:	68fb      	ldr	r3, [r7, #12]
20001008:	681a      	ldr	r2, [r3, #0]
2000100a:	68fb      	ldr	r3, [r7, #12]
2000100c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000100e:	68f9      	ldr	r1, [r7, #12]
20001010:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001012:	fb01 f303 	mul.w	r3, r1, r3
20001016:	441a      	add	r2, r3
20001018:	68fb      	ldr	r3, [r7, #12]
2000101a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
2000101c:	68fb      	ldr	r3, [r7, #12]
2000101e:	2200      	movs	r2, #0
20001020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
20001022:	68fb      	ldr	r3, [r7, #12]
20001024:	681a      	ldr	r2, [r3, #0]
20001026:	68fb      	ldr	r3, [r7, #12]
20001028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
2000102a:	68fb      	ldr	r3, [r7, #12]
2000102c:	681a      	ldr	r2, [r3, #0]
2000102e:	68fb      	ldr	r3, [r7, #12]
20001030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001032:	3b01      	subs	r3, #1
20001034:	68f9      	ldr	r1, [r7, #12]
20001036:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001038:	fb01 f303 	mul.w	r3, r1, r3
2000103c:	441a      	add	r2, r3
2000103e:	68fb      	ldr	r3, [r7, #12]
20001040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
20001042:	68fb      	ldr	r3, [r7, #12]
20001044:	22ff      	movs	r2, #255	; 0xff
20001046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
2000104a:	68fb      	ldr	r3, [r7, #12]
2000104c:	22ff      	movs	r2, #255	; 0xff
2000104e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
20001052:	683b      	ldr	r3, [r7, #0]
20001054:	2b00      	cmp	r3, #0
20001056:	d114      	bne.n	20001082 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001058:	68fb      	ldr	r3, [r7, #12]
2000105a:	691b      	ldr	r3, [r3, #16]
2000105c:	2b00      	cmp	r3, #0
2000105e:	d01a      	beq.n	20001096 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001060:	68fb      	ldr	r3, [r7, #12]
20001062:	3310      	adds	r3, #16
20001064:	4618      	mov	r0, r3
20001066:	f001 fa1b 	bl	200024a0 <xTaskRemoveFromEventList>
2000106a:	4603      	mov	r3, r0
2000106c:	2b00      	cmp	r3, #0
2000106e:	d012      	beq.n	20001096 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
20001070:	4b0c      	ldr	r3, [pc, #48]	; (200010a4 <xQueueGenericReset+0xcc>)
20001072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001076:	601a      	str	r2, [r3, #0]
20001078:	f3bf 8f4f 	dsb	sy
2000107c:	f3bf 8f6f 	isb	sy
20001080:	e009      	b.n	20001096 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
20001082:	68fb      	ldr	r3, [r7, #12]
20001084:	3310      	adds	r3, #16
20001086:	4618      	mov	r0, r3
20001088:	f7ff fef2 	bl	20000e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
2000108c:	68fb      	ldr	r3, [r7, #12]
2000108e:	3324      	adds	r3, #36	; 0x24
20001090:	4618      	mov	r0, r3
20001092:	f7ff feed 	bl	20000e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
20001096:	f002 f94d 	bl	20003334 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
2000109a:	2301      	movs	r3, #1
}
2000109c:	4618      	mov	r0, r3
2000109e:	3710      	adds	r7, #16
200010a0:	46bd      	mov	sp, r7
200010a2:	bd80      	pop	{r7, pc}
200010a4:	e000ed04 	.word	0xe000ed04

200010a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
200010a8:	b580      	push	{r7, lr}
200010aa:	b08e      	sub	sp, #56	; 0x38
200010ac:	af02      	add	r7, sp, #8
200010ae:	60f8      	str	r0, [r7, #12]
200010b0:	60b9      	str	r1, [r7, #8]
200010b2:	607a      	str	r2, [r7, #4]
200010b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200010b6:	68fb      	ldr	r3, [r7, #12]
200010b8:	2b00      	cmp	r3, #0
200010ba:	d10a      	bne.n	200010d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
200010bc:	f04f 0350 	mov.w	r3, #80	; 0x50
200010c0:	f383 8811 	msr	BASEPRI, r3
200010c4:	f3bf 8f6f 	isb	sy
200010c8:	f3bf 8f4f 	dsb	sy
200010cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
200010ce:	bf00      	nop
200010d0:	e7fe      	b.n	200010d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
200010d2:	683b      	ldr	r3, [r7, #0]
200010d4:	2b00      	cmp	r3, #0
200010d6:	d10a      	bne.n	200010ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
200010d8:	f04f 0350 	mov.w	r3, #80	; 0x50
200010dc:	f383 8811 	msr	BASEPRI, r3
200010e0:	f3bf 8f6f 	isb	sy
200010e4:	f3bf 8f4f 	dsb	sy
200010e8:	627b      	str	r3, [r7, #36]	; 0x24
}
200010ea:	bf00      	nop
200010ec:	e7fe      	b.n	200010ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
200010ee:	687b      	ldr	r3, [r7, #4]
200010f0:	2b00      	cmp	r3, #0
200010f2:	d002      	beq.n	200010fa <xQueueGenericCreateStatic+0x52>
200010f4:	68bb      	ldr	r3, [r7, #8]
200010f6:	2b00      	cmp	r3, #0
200010f8:	d001      	beq.n	200010fe <xQueueGenericCreateStatic+0x56>
200010fa:	2301      	movs	r3, #1
200010fc:	e000      	b.n	20001100 <xQueueGenericCreateStatic+0x58>
200010fe:	2300      	movs	r3, #0
20001100:	2b00      	cmp	r3, #0
20001102:	d10a      	bne.n	2000111a <xQueueGenericCreateStatic+0x72>
	__asm volatile
20001104:	f04f 0350 	mov.w	r3, #80	; 0x50
20001108:	f383 8811 	msr	BASEPRI, r3
2000110c:	f3bf 8f6f 	isb	sy
20001110:	f3bf 8f4f 	dsb	sy
20001114:	623b      	str	r3, [r7, #32]
}
20001116:	bf00      	nop
20001118:	e7fe      	b.n	20001118 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
2000111a:	687b      	ldr	r3, [r7, #4]
2000111c:	2b00      	cmp	r3, #0
2000111e:	d102      	bne.n	20001126 <xQueueGenericCreateStatic+0x7e>
20001120:	68bb      	ldr	r3, [r7, #8]
20001122:	2b00      	cmp	r3, #0
20001124:	d101      	bne.n	2000112a <xQueueGenericCreateStatic+0x82>
20001126:	2301      	movs	r3, #1
20001128:	e000      	b.n	2000112c <xQueueGenericCreateStatic+0x84>
2000112a:	2300      	movs	r3, #0
2000112c:	2b00      	cmp	r3, #0
2000112e:	d10a      	bne.n	20001146 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
20001130:	f04f 0350 	mov.w	r3, #80	; 0x50
20001134:	f383 8811 	msr	BASEPRI, r3
20001138:	f3bf 8f6f 	isb	sy
2000113c:	f3bf 8f4f 	dsb	sy
20001140:	61fb      	str	r3, [r7, #28]
}
20001142:	bf00      	nop
20001144:	e7fe      	b.n	20001144 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
20001146:	2350      	movs	r3, #80	; 0x50
20001148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
2000114a:	697b      	ldr	r3, [r7, #20]
2000114c:	2b50      	cmp	r3, #80	; 0x50
2000114e:	d00a      	beq.n	20001166 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
20001150:	f04f 0350 	mov.w	r3, #80	; 0x50
20001154:	f383 8811 	msr	BASEPRI, r3
20001158:	f3bf 8f6f 	isb	sy
2000115c:	f3bf 8f4f 	dsb	sy
20001160:	61bb      	str	r3, [r7, #24]
}
20001162:	bf00      	nop
20001164:	e7fe      	b.n	20001164 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
20001166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20001168:	683b      	ldr	r3, [r7, #0]
2000116a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
2000116c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000116e:	2b00      	cmp	r3, #0
20001170:	d00d      	beq.n	2000118e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
20001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001174:	2201      	movs	r2, #1
20001176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
2000117a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
2000117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001180:	9300      	str	r3, [sp, #0]
20001182:	4613      	mov	r3, r2
20001184:	687a      	ldr	r2, [r7, #4]
20001186:	68b9      	ldr	r1, [r7, #8]
20001188:	68f8      	ldr	r0, [r7, #12]
2000118a:	f000 f83f 	bl	2000120c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
2000118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
20001190:	4618      	mov	r0, r3
20001192:	3730      	adds	r7, #48	; 0x30
20001194:	46bd      	mov	sp, r7
20001196:	bd80      	pop	{r7, pc}

20001198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
20001198:	b580      	push	{r7, lr}
2000119a:	b08a      	sub	sp, #40	; 0x28
2000119c:	af02      	add	r7, sp, #8
2000119e:	60f8      	str	r0, [r7, #12]
200011a0:	60b9      	str	r1, [r7, #8]
200011a2:	4613      	mov	r3, r2
200011a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200011a6:	68fb      	ldr	r3, [r7, #12]
200011a8:	2b00      	cmp	r3, #0
200011aa:	d10a      	bne.n	200011c2 <xQueueGenericCreate+0x2a>
	__asm volatile
200011ac:	f04f 0350 	mov.w	r3, #80	; 0x50
200011b0:	f383 8811 	msr	BASEPRI, r3
200011b4:	f3bf 8f6f 	isb	sy
200011b8:	f3bf 8f4f 	dsb	sy
200011bc:	613b      	str	r3, [r7, #16]
}
200011be:	bf00      	nop
200011c0:	e7fe      	b.n	200011c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200011c2:	68fb      	ldr	r3, [r7, #12]
200011c4:	68ba      	ldr	r2, [r7, #8]
200011c6:	fb02 f303 	mul.w	r3, r2, r3
200011ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
200011cc:	69fb      	ldr	r3, [r7, #28]
200011ce:	3350      	adds	r3, #80	; 0x50
200011d0:	4618      	mov	r0, r3
200011d2:	f002 f9a1 	bl	20003518 <pvPortMalloc>
200011d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
200011d8:	69bb      	ldr	r3, [r7, #24]
200011da:	2b00      	cmp	r3, #0
200011dc:	d011      	beq.n	20001202 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
200011de:	69bb      	ldr	r3, [r7, #24]
200011e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
200011e2:	697b      	ldr	r3, [r7, #20]
200011e4:	3350      	adds	r3, #80	; 0x50
200011e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
200011e8:	69bb      	ldr	r3, [r7, #24]
200011ea:	2200      	movs	r2, #0
200011ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200011f0:	79fa      	ldrb	r2, [r7, #7]
200011f2:	69bb      	ldr	r3, [r7, #24]
200011f4:	9300      	str	r3, [sp, #0]
200011f6:	4613      	mov	r3, r2
200011f8:	697a      	ldr	r2, [r7, #20]
200011fa:	68b9      	ldr	r1, [r7, #8]
200011fc:	68f8      	ldr	r0, [r7, #12]
200011fe:	f000 f805 	bl	2000120c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
20001202:	69bb      	ldr	r3, [r7, #24]
	}
20001204:	4618      	mov	r0, r3
20001206:	3720      	adds	r7, #32
20001208:	46bd      	mov	sp, r7
2000120a:	bd80      	pop	{r7, pc}

2000120c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
2000120c:	b580      	push	{r7, lr}
2000120e:	b084      	sub	sp, #16
20001210:	af00      	add	r7, sp, #0
20001212:	60f8      	str	r0, [r7, #12]
20001214:	60b9      	str	r1, [r7, #8]
20001216:	607a      	str	r2, [r7, #4]
20001218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
2000121a:	68bb      	ldr	r3, [r7, #8]
2000121c:	2b00      	cmp	r3, #0
2000121e:	d103      	bne.n	20001228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
20001220:	69bb      	ldr	r3, [r7, #24]
20001222:	69ba      	ldr	r2, [r7, #24]
20001224:	601a      	str	r2, [r3, #0]
20001226:	e002      	b.n	2000122e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001228:	69bb      	ldr	r3, [r7, #24]
2000122a:	687a      	ldr	r2, [r7, #4]
2000122c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
2000122e:	69bb      	ldr	r3, [r7, #24]
20001230:	68fa      	ldr	r2, [r7, #12]
20001232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20001234:	69bb      	ldr	r3, [r7, #24]
20001236:	68ba      	ldr	r2, [r7, #8]
20001238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
2000123a:	2101      	movs	r1, #1
2000123c:	69b8      	ldr	r0, [r7, #24]
2000123e:	f7ff fecb 	bl	20000fd8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
20001242:	69bb      	ldr	r3, [r7, #24]
20001244:	78fa      	ldrb	r2, [r7, #3]
20001246:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
2000124a:	bf00      	nop
2000124c:	3710      	adds	r7, #16
2000124e:	46bd      	mov	sp, r7
20001250:	bd80      	pop	{r7, pc}

20001252 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
20001252:	b580      	push	{r7, lr}
20001254:	b08a      	sub	sp, #40	; 0x28
20001256:	af02      	add	r7, sp, #8
20001258:	60f8      	str	r0, [r7, #12]
2000125a:	60b9      	str	r1, [r7, #8]
2000125c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
2000125e:	68fb      	ldr	r3, [r7, #12]
20001260:	2b00      	cmp	r3, #0
20001262:	d10a      	bne.n	2000127a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
20001264:	f04f 0350 	mov.w	r3, #80	; 0x50
20001268:	f383 8811 	msr	BASEPRI, r3
2000126c:	f3bf 8f6f 	isb	sy
20001270:	f3bf 8f4f 	dsb	sy
20001274:	61bb      	str	r3, [r7, #24]
}
20001276:	bf00      	nop
20001278:	e7fe      	b.n	20001278 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
2000127a:	68ba      	ldr	r2, [r7, #8]
2000127c:	68fb      	ldr	r3, [r7, #12]
2000127e:	429a      	cmp	r2, r3
20001280:	d90a      	bls.n	20001298 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
20001282:	f04f 0350 	mov.w	r3, #80	; 0x50
20001286:	f383 8811 	msr	BASEPRI, r3
2000128a:	f3bf 8f6f 	isb	sy
2000128e:	f3bf 8f4f 	dsb	sy
20001292:	617b      	str	r3, [r7, #20]
}
20001294:	bf00      	nop
20001296:	e7fe      	b.n	20001296 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001298:	2302      	movs	r3, #2
2000129a:	9300      	str	r3, [sp, #0]
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	2200      	movs	r2, #0
200012a0:	2100      	movs	r1, #0
200012a2:	68f8      	ldr	r0, [r7, #12]
200012a4:	f7ff ff00 	bl	200010a8 <xQueueGenericCreateStatic>
200012a8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
200012aa:	69fb      	ldr	r3, [r7, #28]
200012ac:	2b00      	cmp	r3, #0
200012ae:	d002      	beq.n	200012b6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
200012b0:	69fb      	ldr	r3, [r7, #28]
200012b2:	68ba      	ldr	r2, [r7, #8]
200012b4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
200012b6:	69fb      	ldr	r3, [r7, #28]
	}
200012b8:	4618      	mov	r0, r3
200012ba:	3720      	adds	r7, #32
200012bc:	46bd      	mov	sp, r7
200012be:	bd80      	pop	{r7, pc}

200012c0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
200012c0:	b580      	push	{r7, lr}
200012c2:	b086      	sub	sp, #24
200012c4:	af00      	add	r7, sp, #0
200012c6:	6078      	str	r0, [r7, #4]
200012c8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
200012ca:	687b      	ldr	r3, [r7, #4]
200012cc:	2b00      	cmp	r3, #0
200012ce:	d10a      	bne.n	200012e6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
200012d0:	f04f 0350 	mov.w	r3, #80	; 0x50
200012d4:	f383 8811 	msr	BASEPRI, r3
200012d8:	f3bf 8f6f 	isb	sy
200012dc:	f3bf 8f4f 	dsb	sy
200012e0:	613b      	str	r3, [r7, #16]
}
200012e2:	bf00      	nop
200012e4:	e7fe      	b.n	200012e4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
200012e6:	683a      	ldr	r2, [r7, #0]
200012e8:	687b      	ldr	r3, [r7, #4]
200012ea:	429a      	cmp	r2, r3
200012ec:	d90a      	bls.n	20001304 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
200012ee:	f04f 0350 	mov.w	r3, #80	; 0x50
200012f2:	f383 8811 	msr	BASEPRI, r3
200012f6:	f3bf 8f6f 	isb	sy
200012fa:	f3bf 8f4f 	dsb	sy
200012fe:	60fb      	str	r3, [r7, #12]
}
20001300:	bf00      	nop
20001302:	e7fe      	b.n	20001302 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001304:	2202      	movs	r2, #2
20001306:	2100      	movs	r1, #0
20001308:	6878      	ldr	r0, [r7, #4]
2000130a:	f7ff ff45 	bl	20001198 <xQueueGenericCreate>
2000130e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
20001310:	697b      	ldr	r3, [r7, #20]
20001312:	2b00      	cmp	r3, #0
20001314:	d002      	beq.n	2000131c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
20001316:	697b      	ldr	r3, [r7, #20]
20001318:	683a      	ldr	r2, [r7, #0]
2000131a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
2000131c:	697b      	ldr	r3, [r7, #20]
	}
2000131e:	4618      	mov	r0, r3
20001320:	3718      	adds	r7, #24
20001322:	46bd      	mov	sp, r7
20001324:	bd80      	pop	{r7, pc}
	...

20001328 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001328:	b580      	push	{r7, lr}
2000132a:	b08e      	sub	sp, #56	; 0x38
2000132c:	af00      	add	r7, sp, #0
2000132e:	60f8      	str	r0, [r7, #12]
20001330:	60b9      	str	r1, [r7, #8]
20001332:	607a      	str	r2, [r7, #4]
20001334:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
20001336:	2300      	movs	r3, #0
20001338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
2000133a:	68fb      	ldr	r3, [r7, #12]
2000133c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
2000133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001340:	2b00      	cmp	r3, #0
20001342:	d10a      	bne.n	2000135a <xQueueGenericSend+0x32>
	__asm volatile
20001344:	f04f 0350 	mov.w	r3, #80	; 0x50
20001348:	f383 8811 	msr	BASEPRI, r3
2000134c:	f3bf 8f6f 	isb	sy
20001350:	f3bf 8f4f 	dsb	sy
20001354:	62bb      	str	r3, [r7, #40]	; 0x28
}
20001356:	bf00      	nop
20001358:	e7fe      	b.n	20001358 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000135a:	68bb      	ldr	r3, [r7, #8]
2000135c:	2b00      	cmp	r3, #0
2000135e:	d103      	bne.n	20001368 <xQueueGenericSend+0x40>
20001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001364:	2b00      	cmp	r3, #0
20001366:	d101      	bne.n	2000136c <xQueueGenericSend+0x44>
20001368:	2301      	movs	r3, #1
2000136a:	e000      	b.n	2000136e <xQueueGenericSend+0x46>
2000136c:	2300      	movs	r3, #0
2000136e:	2b00      	cmp	r3, #0
20001370:	d10a      	bne.n	20001388 <xQueueGenericSend+0x60>
	__asm volatile
20001372:	f04f 0350 	mov.w	r3, #80	; 0x50
20001376:	f383 8811 	msr	BASEPRI, r3
2000137a:	f3bf 8f6f 	isb	sy
2000137e:	f3bf 8f4f 	dsb	sy
20001382:	627b      	str	r3, [r7, #36]	; 0x24
}
20001384:	bf00      	nop
20001386:	e7fe      	b.n	20001386 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001388:	683b      	ldr	r3, [r7, #0]
2000138a:	2b02      	cmp	r3, #2
2000138c:	d103      	bne.n	20001396 <xQueueGenericSend+0x6e>
2000138e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001392:	2b01      	cmp	r3, #1
20001394:	d101      	bne.n	2000139a <xQueueGenericSend+0x72>
20001396:	2301      	movs	r3, #1
20001398:	e000      	b.n	2000139c <xQueueGenericSend+0x74>
2000139a:	2300      	movs	r3, #0
2000139c:	2b00      	cmp	r3, #0
2000139e:	d10a      	bne.n	200013b6 <xQueueGenericSend+0x8e>
	__asm volatile
200013a0:	f04f 0350 	mov.w	r3, #80	; 0x50
200013a4:	f383 8811 	msr	BASEPRI, r3
200013a8:	f3bf 8f6f 	isb	sy
200013ac:	f3bf 8f4f 	dsb	sy
200013b0:	623b      	str	r3, [r7, #32]
}
200013b2:	bf00      	nop
200013b4:	e7fe      	b.n	200013b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200013b6:	f001 fa35 	bl	20002824 <xTaskGetSchedulerState>
200013ba:	4603      	mov	r3, r0
200013bc:	2b00      	cmp	r3, #0
200013be:	d102      	bne.n	200013c6 <xQueueGenericSend+0x9e>
200013c0:	687b      	ldr	r3, [r7, #4]
200013c2:	2b00      	cmp	r3, #0
200013c4:	d101      	bne.n	200013ca <xQueueGenericSend+0xa2>
200013c6:	2301      	movs	r3, #1
200013c8:	e000      	b.n	200013cc <xQueueGenericSend+0xa4>
200013ca:	2300      	movs	r3, #0
200013cc:	2b00      	cmp	r3, #0
200013ce:	d10a      	bne.n	200013e6 <xQueueGenericSend+0xbe>
	__asm volatile
200013d0:	f04f 0350 	mov.w	r3, #80	; 0x50
200013d4:	f383 8811 	msr	BASEPRI, r3
200013d8:	f3bf 8f6f 	isb	sy
200013dc:	f3bf 8f4f 	dsb	sy
200013e0:	61fb      	str	r3, [r7, #28]
}
200013e2:	bf00      	nop
200013e4:	e7fe      	b.n	200013e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200013e6:	f001 ff75 	bl	200032d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200013ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200013ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200013f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200013f2:	429a      	cmp	r2, r3
200013f4:	d302      	bcc.n	200013fc <xQueueGenericSend+0xd4>
200013f6:	683b      	ldr	r3, [r7, #0]
200013f8:	2b02      	cmp	r3, #2
200013fa:	d129      	bne.n	20001450 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
200013fc:	683a      	ldr	r2, [r7, #0]
200013fe:	68b9      	ldr	r1, [r7, #8]
20001400:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001402:	f000 fa2e 	bl	20001862 <prvCopyDataToQueue>
20001406:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000140c:	2b00      	cmp	r3, #0
2000140e:	d010      	beq.n	20001432 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001412:	3324      	adds	r3, #36	; 0x24
20001414:	4618      	mov	r0, r3
20001416:	f001 f843 	bl	200024a0 <xTaskRemoveFromEventList>
2000141a:	4603      	mov	r3, r0
2000141c:	2b00      	cmp	r3, #0
2000141e:	d013      	beq.n	20001448 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
20001420:	4b3f      	ldr	r3, [pc, #252]	; (20001520 <xQueueGenericSend+0x1f8>)
20001422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001426:	601a      	str	r2, [r3, #0]
20001428:	f3bf 8f4f 	dsb	sy
2000142c:	f3bf 8f6f 	isb	sy
20001430:	e00a      	b.n	20001448 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
20001432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001434:	2b00      	cmp	r3, #0
20001436:	d007      	beq.n	20001448 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001438:	4b39      	ldr	r3, [pc, #228]	; (20001520 <xQueueGenericSend+0x1f8>)
2000143a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000143e:	601a      	str	r2, [r3, #0]
20001440:	f3bf 8f4f 	dsb	sy
20001444:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001448:	f001 ff74 	bl	20003334 <vPortExitCritical>
				return pdPASS;
2000144c:	2301      	movs	r3, #1
2000144e:	e063      	b.n	20001518 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001450:	687b      	ldr	r3, [r7, #4]
20001452:	2b00      	cmp	r3, #0
20001454:	d103      	bne.n	2000145e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001456:	f001 ff6d 	bl	20003334 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
2000145a:	2300      	movs	r3, #0
2000145c:	e05c      	b.n	20001518 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
2000145e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001460:	2b00      	cmp	r3, #0
20001462:	d106      	bne.n	20001472 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001464:	f107 0314 	add.w	r3, r7, #20
20001468:	4618      	mov	r0, r3
2000146a:	f001 f87d 	bl	20002568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000146e:	2301      	movs	r3, #1
20001470:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001472:	f001 ff5f 	bl	20003334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001476:	f000 fde9 	bl	2000204c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
2000147a:	f001 ff2b 	bl	200032d4 <vPortEnterCritical>
2000147e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001484:	b25b      	sxtb	r3, r3
20001486:	f1b3 3fff 	cmp.w	r3, #4294967295
2000148a:	d103      	bne.n	20001494 <xQueueGenericSend+0x16c>
2000148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000148e:	2200      	movs	r2, #0
20001490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001496:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
2000149a:	b25b      	sxtb	r3, r3
2000149c:	f1b3 3fff 	cmp.w	r3, #4294967295
200014a0:	d103      	bne.n	200014aa <xQueueGenericSend+0x182>
200014a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200014a4:	2200      	movs	r2, #0
200014a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200014aa:	f001 ff43 	bl	20003334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200014ae:	1d3a      	adds	r2, r7, #4
200014b0:	f107 0314 	add.w	r3, r7, #20
200014b4:	4611      	mov	r1, r2
200014b6:	4618      	mov	r0, r3
200014b8:	f001 f86c 	bl	20002594 <xTaskCheckForTimeOut>
200014bc:	4603      	mov	r3, r0
200014be:	2b00      	cmp	r3, #0
200014c0:	d124      	bne.n	2000150c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200014c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
200014c4:	f000 fac5 	bl	20001a52 <prvIsQueueFull>
200014c8:	4603      	mov	r3, r0
200014ca:	2b00      	cmp	r3, #0
200014cc:	d018      	beq.n	20001500 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
200014ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200014d0:	3310      	adds	r3, #16
200014d2:	687a      	ldr	r2, [r7, #4]
200014d4:	4611      	mov	r1, r2
200014d6:	4618      	mov	r0, r3
200014d8:	f000 ff92 	bl	20002400 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
200014dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
200014de:	f000 fa50 	bl	20001982 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
200014e2:	f000 fdc1 	bl	20002068 <xTaskResumeAll>
200014e6:	4603      	mov	r3, r0
200014e8:	2b00      	cmp	r3, #0
200014ea:	f47f af7c 	bne.w	200013e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
200014ee:	4b0c      	ldr	r3, [pc, #48]	; (20001520 <xQueueGenericSend+0x1f8>)
200014f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200014f4:	601a      	str	r2, [r3, #0]
200014f6:	f3bf 8f4f 	dsb	sy
200014fa:	f3bf 8f6f 	isb	sy
200014fe:	e772      	b.n	200013e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
20001500:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001502:	f000 fa3e 	bl	20001982 <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001506:	f000 fdaf 	bl	20002068 <xTaskResumeAll>
2000150a:	e76c      	b.n	200013e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
2000150c:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000150e:	f000 fa38 	bl	20001982 <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001512:	f000 fda9 	bl	20002068 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001516:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
20001518:	4618      	mov	r0, r3
2000151a:	3738      	adds	r7, #56	; 0x38
2000151c:	46bd      	mov	sp, r7
2000151e:	bd80      	pop	{r7, pc}
20001520:	e000ed04 	.word	0xe000ed04

20001524 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001524:	b580      	push	{r7, lr}
20001526:	b090      	sub	sp, #64	; 0x40
20001528:	af00      	add	r7, sp, #0
2000152a:	60f8      	str	r0, [r7, #12]
2000152c:	60b9      	str	r1, [r7, #8]
2000152e:	607a      	str	r2, [r7, #4]
20001530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001532:	68fb      	ldr	r3, [r7, #12]
20001534:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
20001536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001538:	2b00      	cmp	r3, #0
2000153a:	d10a      	bne.n	20001552 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
2000153c:	f04f 0350 	mov.w	r3, #80	; 0x50
20001540:	f383 8811 	msr	BASEPRI, r3
20001544:	f3bf 8f6f 	isb	sy
20001548:	f3bf 8f4f 	dsb	sy
2000154c:	62bb      	str	r3, [r7, #40]	; 0x28
}
2000154e:	bf00      	nop
20001550:	e7fe      	b.n	20001550 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001552:	68bb      	ldr	r3, [r7, #8]
20001554:	2b00      	cmp	r3, #0
20001556:	d103      	bne.n	20001560 <xQueueGenericSendFromISR+0x3c>
20001558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000155c:	2b00      	cmp	r3, #0
2000155e:	d101      	bne.n	20001564 <xQueueGenericSendFromISR+0x40>
20001560:	2301      	movs	r3, #1
20001562:	e000      	b.n	20001566 <xQueueGenericSendFromISR+0x42>
20001564:	2300      	movs	r3, #0
20001566:	2b00      	cmp	r3, #0
20001568:	d10a      	bne.n	20001580 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
2000156a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000156e:	f383 8811 	msr	BASEPRI, r3
20001572:	f3bf 8f6f 	isb	sy
20001576:	f3bf 8f4f 	dsb	sy
2000157a:	627b      	str	r3, [r7, #36]	; 0x24
}
2000157c:	bf00      	nop
2000157e:	e7fe      	b.n	2000157e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
20001580:	683b      	ldr	r3, [r7, #0]
20001582:	2b02      	cmp	r3, #2
20001584:	d103      	bne.n	2000158e <xQueueGenericSendFromISR+0x6a>
20001586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000158a:	2b01      	cmp	r3, #1
2000158c:	d101      	bne.n	20001592 <xQueueGenericSendFromISR+0x6e>
2000158e:	2301      	movs	r3, #1
20001590:	e000      	b.n	20001594 <xQueueGenericSendFromISR+0x70>
20001592:	2300      	movs	r3, #0
20001594:	2b00      	cmp	r3, #0
20001596:	d10a      	bne.n	200015ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
20001598:	f04f 0350 	mov.w	r3, #80	; 0x50
2000159c:	f383 8811 	msr	BASEPRI, r3
200015a0:	f3bf 8f6f 	isb	sy
200015a4:	f3bf 8f4f 	dsb	sy
200015a8:	623b      	str	r3, [r7, #32]
}
200015aa:	bf00      	nop
200015ac:	e7fe      	b.n	200015ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200015ae:	f001 ff73 	bl	20003498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200015b2:	f3ef 8211 	mrs	r2, BASEPRI
200015b6:	f04f 0350 	mov.w	r3, #80	; 0x50
200015ba:	f383 8811 	msr	BASEPRI, r3
200015be:	f3bf 8f6f 	isb	sy
200015c2:	f3bf 8f4f 	dsb	sy
200015c6:	61fa      	str	r2, [r7, #28]
200015c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200015ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200015cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200015ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200015d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200015d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200015d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200015d6:	429a      	cmp	r2, r3
200015d8:	d302      	bcc.n	200015e0 <xQueueGenericSendFromISR+0xbc>
200015da:	683b      	ldr	r3, [r7, #0]
200015dc:	2b02      	cmp	r3, #2
200015de:	d12f      	bne.n	20001640 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
200015e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200015e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200015e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
200015ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
200015f0:	683a      	ldr	r2, [r7, #0]
200015f2:	68b9      	ldr	r1, [r7, #8]
200015f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
200015f6:	f000 f934 	bl	20001862 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
200015fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
200015fe:	f1b3 3fff 	cmp.w	r3, #4294967295
20001602:	d112      	bne.n	2000162a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001608:	2b00      	cmp	r3, #0
2000160a:	d016      	beq.n	2000163a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2000160c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000160e:	3324      	adds	r3, #36	; 0x24
20001610:	4618      	mov	r0, r3
20001612:	f000 ff45 	bl	200024a0 <xTaskRemoveFromEventList>
20001616:	4603      	mov	r3, r0
20001618:	2b00      	cmp	r3, #0
2000161a:	d00e      	beq.n	2000163a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
2000161c:	687b      	ldr	r3, [r7, #4]
2000161e:	2b00      	cmp	r3, #0
20001620:	d00b      	beq.n	2000163a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001622:	687b      	ldr	r3, [r7, #4]
20001624:	2201      	movs	r2, #1
20001626:	601a      	str	r2, [r3, #0]
20001628:	e007      	b.n	2000163a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
2000162a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
2000162e:	3301      	adds	r3, #1
20001630:	b2db      	uxtb	r3, r3
20001632:	b25a      	sxtb	r2, r3
20001634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
2000163a:	2301      	movs	r3, #1
2000163c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
2000163e:	e001      	b.n	20001644 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001640:	2300      	movs	r3, #0
20001642:	63fb      	str	r3, [r7, #60]	; 0x3c
20001644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001646:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001648:	697b      	ldr	r3, [r7, #20]
2000164a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
2000164e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
20001652:	4618      	mov	r0, r3
20001654:	3740      	adds	r7, #64	; 0x40
20001656:	46bd      	mov	sp, r7
20001658:	bd80      	pop	{r7, pc}
	...

2000165c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
2000165c:	b580      	push	{r7, lr}
2000165e:	b08c      	sub	sp, #48	; 0x30
20001660:	af00      	add	r7, sp, #0
20001662:	60f8      	str	r0, [r7, #12]
20001664:	60b9      	str	r1, [r7, #8]
20001666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
20001668:	2300      	movs	r3, #0
2000166a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
2000166c:	68fb      	ldr	r3, [r7, #12]
2000166e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
20001670:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001672:	2b00      	cmp	r3, #0
20001674:	d10a      	bne.n	2000168c <xQueueReceive+0x30>
	__asm volatile
20001676:	f04f 0350 	mov.w	r3, #80	; 0x50
2000167a:	f383 8811 	msr	BASEPRI, r3
2000167e:	f3bf 8f6f 	isb	sy
20001682:	f3bf 8f4f 	dsb	sy
20001686:	623b      	str	r3, [r7, #32]
}
20001688:	bf00      	nop
2000168a:	e7fe      	b.n	2000168a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000168c:	68bb      	ldr	r3, [r7, #8]
2000168e:	2b00      	cmp	r3, #0
20001690:	d103      	bne.n	2000169a <xQueueReceive+0x3e>
20001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001696:	2b00      	cmp	r3, #0
20001698:	d101      	bne.n	2000169e <xQueueReceive+0x42>
2000169a:	2301      	movs	r3, #1
2000169c:	e000      	b.n	200016a0 <xQueueReceive+0x44>
2000169e:	2300      	movs	r3, #0
200016a0:	2b00      	cmp	r3, #0
200016a2:	d10a      	bne.n	200016ba <xQueueReceive+0x5e>
	__asm volatile
200016a4:	f04f 0350 	mov.w	r3, #80	; 0x50
200016a8:	f383 8811 	msr	BASEPRI, r3
200016ac:	f3bf 8f6f 	isb	sy
200016b0:	f3bf 8f4f 	dsb	sy
200016b4:	61fb      	str	r3, [r7, #28]
}
200016b6:	bf00      	nop
200016b8:	e7fe      	b.n	200016b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200016ba:	f001 f8b3 	bl	20002824 <xTaskGetSchedulerState>
200016be:	4603      	mov	r3, r0
200016c0:	2b00      	cmp	r3, #0
200016c2:	d102      	bne.n	200016ca <xQueueReceive+0x6e>
200016c4:	687b      	ldr	r3, [r7, #4]
200016c6:	2b00      	cmp	r3, #0
200016c8:	d101      	bne.n	200016ce <xQueueReceive+0x72>
200016ca:	2301      	movs	r3, #1
200016cc:	e000      	b.n	200016d0 <xQueueReceive+0x74>
200016ce:	2300      	movs	r3, #0
200016d0:	2b00      	cmp	r3, #0
200016d2:	d10a      	bne.n	200016ea <xQueueReceive+0x8e>
	__asm volatile
200016d4:	f04f 0350 	mov.w	r3, #80	; 0x50
200016d8:	f383 8811 	msr	BASEPRI, r3
200016dc:	f3bf 8f6f 	isb	sy
200016e0:	f3bf 8f4f 	dsb	sy
200016e4:	61bb      	str	r3, [r7, #24]
}
200016e6:	bf00      	nop
200016e8:	e7fe      	b.n	200016e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
200016ea:	f001 fdf3 	bl	200032d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
200016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
200016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200016f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
200016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200016f6:	2b00      	cmp	r3, #0
200016f8:	d01f      	beq.n	2000173a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
200016fa:	68b9      	ldr	r1, [r7, #8]
200016fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200016fe:	f000 f91a 	bl	20001936 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
20001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001704:	1e5a      	subs	r2, r3, #1
20001706:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001708:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2000170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000170c:	691b      	ldr	r3, [r3, #16]
2000170e:	2b00      	cmp	r3, #0
20001710:	d00f      	beq.n	20001732 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001714:	3310      	adds	r3, #16
20001716:	4618      	mov	r0, r3
20001718:	f000 fec2 	bl	200024a0 <xTaskRemoveFromEventList>
2000171c:	4603      	mov	r3, r0
2000171e:	2b00      	cmp	r3, #0
20001720:	d007      	beq.n	20001732 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
20001722:	4b3d      	ldr	r3, [pc, #244]	; (20001818 <xQueueReceive+0x1bc>)
20001724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001728:	601a      	str	r2, [r3, #0]
2000172a:	f3bf 8f4f 	dsb	sy
2000172e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
20001732:	f001 fdff 	bl	20003334 <vPortExitCritical>
				return pdPASS;
20001736:	2301      	movs	r3, #1
20001738:	e069      	b.n	2000180e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000173a:	687b      	ldr	r3, [r7, #4]
2000173c:	2b00      	cmp	r3, #0
2000173e:	d103      	bne.n	20001748 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001740:	f001 fdf8 	bl	20003334 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001744:	2300      	movs	r3, #0
20001746:	e062      	b.n	2000180e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
20001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000174a:	2b00      	cmp	r3, #0
2000174c:	d106      	bne.n	2000175c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
2000174e:	f107 0310 	add.w	r3, r7, #16
20001752:	4618      	mov	r0, r3
20001754:	f000 ff08 	bl	20002568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001758:	2301      	movs	r3, #1
2000175a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
2000175c:	f001 fdea 	bl	20003334 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
20001760:	f000 fc74 	bl	2000204c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001764:	f001 fdb6 	bl	200032d4 <vPortEnterCritical>
20001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000176a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
2000176e:	b25b      	sxtb	r3, r3
20001770:	f1b3 3fff 	cmp.w	r3, #4294967295
20001774:	d103      	bne.n	2000177e <xQueueReceive+0x122>
20001776:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001778:	2200      	movs	r2, #0
2000177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
2000177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001784:	b25b      	sxtb	r3, r3
20001786:	f1b3 3fff 	cmp.w	r3, #4294967295
2000178a:	d103      	bne.n	20001794 <xQueueReceive+0x138>
2000178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000178e:	2200      	movs	r2, #0
20001790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001794:	f001 fdce 	bl	20003334 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001798:	1d3a      	adds	r2, r7, #4
2000179a:	f107 0310 	add.w	r3, r7, #16
2000179e:	4611      	mov	r1, r2
200017a0:	4618      	mov	r0, r3
200017a2:	f000 fef7 	bl	20002594 <xTaskCheckForTimeOut>
200017a6:	4603      	mov	r3, r0
200017a8:	2b00      	cmp	r3, #0
200017aa:	d123      	bne.n	200017f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200017ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200017ae:	f000 f93a 	bl	20001a26 <prvIsQueueEmpty>
200017b2:	4603      	mov	r3, r0
200017b4:	2b00      	cmp	r3, #0
200017b6:	d017      	beq.n	200017e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200017b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200017ba:	3324      	adds	r3, #36	; 0x24
200017bc:	687a      	ldr	r2, [r7, #4]
200017be:	4611      	mov	r1, r2
200017c0:	4618      	mov	r0, r3
200017c2:	f000 fe1d 	bl	20002400 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
200017c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200017c8:	f000 f8db 	bl	20001982 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
200017cc:	f000 fc4c 	bl	20002068 <xTaskResumeAll>
200017d0:	4603      	mov	r3, r0
200017d2:	2b00      	cmp	r3, #0
200017d4:	d189      	bne.n	200016ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
200017d6:	4b10      	ldr	r3, [pc, #64]	; (20001818 <xQueueReceive+0x1bc>)
200017d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200017dc:	601a      	str	r2, [r3, #0]
200017de:	f3bf 8f4f 	dsb	sy
200017e2:	f3bf 8f6f 	isb	sy
200017e6:	e780      	b.n	200016ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
200017e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200017ea:	f000 f8ca 	bl	20001982 <prvUnlockQueue>
				( void ) xTaskResumeAll();
200017ee:	f000 fc3b 	bl	20002068 <xTaskResumeAll>
200017f2:	e77a      	b.n	200016ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
200017f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200017f6:	f000 f8c4 	bl	20001982 <prvUnlockQueue>
			( void ) xTaskResumeAll();
200017fa:	f000 fc35 	bl	20002068 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200017fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001800:	f000 f911 	bl	20001a26 <prvIsQueueEmpty>
20001804:	4603      	mov	r3, r0
20001806:	2b00      	cmp	r3, #0
20001808:	f43f af6f 	beq.w	200016ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
2000180c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
2000180e:	4618      	mov	r0, r3
20001810:	3730      	adds	r7, #48	; 0x30
20001812:	46bd      	mov	sp, r7
20001814:	bd80      	pop	{r7, pc}
20001816:	bf00      	nop
20001818:	e000ed04 	.word	0xe000ed04

2000181c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
2000181c:	b580      	push	{r7, lr}
2000181e:	b084      	sub	sp, #16
20001820:	af00      	add	r7, sp, #0
20001822:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
20001824:	687b      	ldr	r3, [r7, #4]
20001826:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
20001828:	68fb      	ldr	r3, [r7, #12]
2000182a:	2b00      	cmp	r3, #0
2000182c:	d10a      	bne.n	20001844 <vQueueDelete+0x28>
	__asm volatile
2000182e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001832:	f383 8811 	msr	BASEPRI, r3
20001836:	f3bf 8f6f 	isb	sy
2000183a:	f3bf 8f4f 	dsb	sy
2000183e:	60bb      	str	r3, [r7, #8]
}
20001840:	bf00      	nop
20001842:	e7fe      	b.n	20001842 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
20001844:	68f8      	ldr	r0, [r7, #12]
20001846:	f000 f947 	bl	20001ad8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
2000184a:	68fb      	ldr	r3, [r7, #12]
2000184c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
20001850:	2b00      	cmp	r3, #0
20001852:	d102      	bne.n	2000185a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
20001854:	68f8      	ldr	r0, [r7, #12]
20001856:	f001 ff2b 	bl	200036b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
2000185a:	bf00      	nop
2000185c:	3710      	adds	r7, #16
2000185e:	46bd      	mov	sp, r7
20001860:	bd80      	pop	{r7, pc}

20001862 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001862:	b580      	push	{r7, lr}
20001864:	b086      	sub	sp, #24
20001866:	af00      	add	r7, sp, #0
20001868:	60f8      	str	r0, [r7, #12]
2000186a:	60b9      	str	r1, [r7, #8]
2000186c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
2000186e:	2300      	movs	r3, #0
20001870:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001872:	68fb      	ldr	r3, [r7, #12]
20001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001876:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001878:	68fb      	ldr	r3, [r7, #12]
2000187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000187c:	2b00      	cmp	r3, #0
2000187e:	d10d      	bne.n	2000189c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001880:	68fb      	ldr	r3, [r7, #12]
20001882:	681b      	ldr	r3, [r3, #0]
20001884:	2b00      	cmp	r3, #0
20001886:	d14d      	bne.n	20001924 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
20001888:	68fb      	ldr	r3, [r7, #12]
2000188a:	689b      	ldr	r3, [r3, #8]
2000188c:	4618      	mov	r0, r3
2000188e:	f000 ffe7 	bl	20002860 <xTaskPriorityDisinherit>
20001892:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
20001894:	68fb      	ldr	r3, [r7, #12]
20001896:	2200      	movs	r2, #0
20001898:	609a      	str	r2, [r3, #8]
2000189a:	e043      	b.n	20001924 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
2000189c:	687b      	ldr	r3, [r7, #4]
2000189e:	2b00      	cmp	r3, #0
200018a0:	d119      	bne.n	200018d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
200018a2:	68fb      	ldr	r3, [r7, #12]
200018a4:	6858      	ldr	r0, [r3, #4]
200018a6:	68fb      	ldr	r3, [r7, #12]
200018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200018aa:	461a      	mov	r2, r3
200018ac:	68b9      	ldr	r1, [r7, #8]
200018ae:	f004 f985 	bl	20005bbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
200018b2:	68fb      	ldr	r3, [r7, #12]
200018b4:	685a      	ldr	r2, [r3, #4]
200018b6:	68fb      	ldr	r3, [r7, #12]
200018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200018ba:	441a      	add	r2, r3
200018bc:	68fb      	ldr	r3, [r7, #12]
200018be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200018c0:	68fb      	ldr	r3, [r7, #12]
200018c2:	685a      	ldr	r2, [r3, #4]
200018c4:	68fb      	ldr	r3, [r7, #12]
200018c6:	689b      	ldr	r3, [r3, #8]
200018c8:	429a      	cmp	r2, r3
200018ca:	d32b      	bcc.n	20001924 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
200018cc:	68fb      	ldr	r3, [r7, #12]
200018ce:	681a      	ldr	r2, [r3, #0]
200018d0:	68fb      	ldr	r3, [r7, #12]
200018d2:	605a      	str	r2, [r3, #4]
200018d4:	e026      	b.n	20001924 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
200018d6:	68fb      	ldr	r3, [r7, #12]
200018d8:	68d8      	ldr	r0, [r3, #12]
200018da:	68fb      	ldr	r3, [r7, #12]
200018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200018de:	461a      	mov	r2, r3
200018e0:	68b9      	ldr	r1, [r7, #8]
200018e2:	f004 f96b 	bl	20005bbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
200018e6:	68fb      	ldr	r3, [r7, #12]
200018e8:	68da      	ldr	r2, [r3, #12]
200018ea:	68fb      	ldr	r3, [r7, #12]
200018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200018ee:	425b      	negs	r3, r3
200018f0:	441a      	add	r2, r3
200018f2:	68fb      	ldr	r3, [r7, #12]
200018f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
200018f6:	68fb      	ldr	r3, [r7, #12]
200018f8:	68da      	ldr	r2, [r3, #12]
200018fa:	68fb      	ldr	r3, [r7, #12]
200018fc:	681b      	ldr	r3, [r3, #0]
200018fe:	429a      	cmp	r2, r3
20001900:	d207      	bcs.n	20001912 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
20001902:	68fb      	ldr	r3, [r7, #12]
20001904:	689a      	ldr	r2, [r3, #8]
20001906:	68fb      	ldr	r3, [r7, #12]
20001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000190a:	425b      	negs	r3, r3
2000190c:	441a      	add	r2, r3
2000190e:	68fb      	ldr	r3, [r7, #12]
20001910:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001912:	687b      	ldr	r3, [r7, #4]
20001914:	2b02      	cmp	r3, #2
20001916:	d105      	bne.n	20001924 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001918:	693b      	ldr	r3, [r7, #16]
2000191a:	2b00      	cmp	r3, #0
2000191c:	d002      	beq.n	20001924 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
2000191e:	693b      	ldr	r3, [r7, #16]
20001920:	3b01      	subs	r3, #1
20001922:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20001924:	693b      	ldr	r3, [r7, #16]
20001926:	1c5a      	adds	r2, r3, #1
20001928:	68fb      	ldr	r3, [r7, #12]
2000192a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
2000192c:	697b      	ldr	r3, [r7, #20]
}
2000192e:	4618      	mov	r0, r3
20001930:	3718      	adds	r7, #24
20001932:	46bd      	mov	sp, r7
20001934:	bd80      	pop	{r7, pc}

20001936 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001936:	b580      	push	{r7, lr}
20001938:	b082      	sub	sp, #8
2000193a:	af00      	add	r7, sp, #0
2000193c:	6078      	str	r0, [r7, #4]
2000193e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001940:	687b      	ldr	r3, [r7, #4]
20001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001944:	2b00      	cmp	r3, #0
20001946:	d018      	beq.n	2000197a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20001948:	687b      	ldr	r3, [r7, #4]
2000194a:	68da      	ldr	r2, [r3, #12]
2000194c:	687b      	ldr	r3, [r7, #4]
2000194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001950:	441a      	add	r2, r3
20001952:	687b      	ldr	r3, [r7, #4]
20001954:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001956:	687b      	ldr	r3, [r7, #4]
20001958:	68da      	ldr	r2, [r3, #12]
2000195a:	687b      	ldr	r3, [r7, #4]
2000195c:	689b      	ldr	r3, [r3, #8]
2000195e:	429a      	cmp	r2, r3
20001960:	d303      	bcc.n	2000196a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
20001962:	687b      	ldr	r3, [r7, #4]
20001964:	681a      	ldr	r2, [r3, #0]
20001966:	687b      	ldr	r3, [r7, #4]
20001968:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
2000196a:	687b      	ldr	r3, [r7, #4]
2000196c:	68d9      	ldr	r1, [r3, #12]
2000196e:	687b      	ldr	r3, [r7, #4]
20001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001972:	461a      	mov	r2, r3
20001974:	6838      	ldr	r0, [r7, #0]
20001976:	f004 f921 	bl	20005bbc <memcpy>
	}
}
2000197a:	bf00      	nop
2000197c:	3708      	adds	r7, #8
2000197e:	46bd      	mov	sp, r7
20001980:	bd80      	pop	{r7, pc}

20001982 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001982:	b580      	push	{r7, lr}
20001984:	b084      	sub	sp, #16
20001986:	af00      	add	r7, sp, #0
20001988:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
2000198a:	f001 fca3 	bl	200032d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
2000198e:	687b      	ldr	r3, [r7, #4]
20001990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001994:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001996:	e011      	b.n	200019bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001998:	687b      	ldr	r3, [r7, #4]
2000199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000199c:	2b00      	cmp	r3, #0
2000199e:	d012      	beq.n	200019c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
200019a0:	687b      	ldr	r3, [r7, #4]
200019a2:	3324      	adds	r3, #36	; 0x24
200019a4:	4618      	mov	r0, r3
200019a6:	f000 fd7b 	bl	200024a0 <xTaskRemoveFromEventList>
200019aa:	4603      	mov	r3, r0
200019ac:	2b00      	cmp	r3, #0
200019ae:	d001      	beq.n	200019b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
200019b0:	f000 fe52 	bl	20002658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
200019b4:	7bfb      	ldrb	r3, [r7, #15]
200019b6:	3b01      	subs	r3, #1
200019b8:	b2db      	uxtb	r3, r3
200019ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
200019bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
200019c0:	2b00      	cmp	r3, #0
200019c2:	dce9      	bgt.n	20001998 <prvUnlockQueue+0x16>
200019c4:	e000      	b.n	200019c8 <prvUnlockQueue+0x46>
					break;
200019c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
200019c8:	687b      	ldr	r3, [r7, #4]
200019ca:	22ff      	movs	r2, #255	; 0xff
200019cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
200019d0:	f001 fcb0 	bl	20003334 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
200019d4:	f001 fc7e 	bl	200032d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
200019d8:	687b      	ldr	r3, [r7, #4]
200019da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200019de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
200019e0:	e011      	b.n	20001a06 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
200019e2:	687b      	ldr	r3, [r7, #4]
200019e4:	691b      	ldr	r3, [r3, #16]
200019e6:	2b00      	cmp	r3, #0
200019e8:	d012      	beq.n	20001a10 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
200019ea:	687b      	ldr	r3, [r7, #4]
200019ec:	3310      	adds	r3, #16
200019ee:	4618      	mov	r0, r3
200019f0:	f000 fd56 	bl	200024a0 <xTaskRemoveFromEventList>
200019f4:	4603      	mov	r3, r0
200019f6:	2b00      	cmp	r3, #0
200019f8:	d001      	beq.n	200019fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
200019fa:	f000 fe2d 	bl	20002658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
200019fe:	7bbb      	ldrb	r3, [r7, #14]
20001a00:	3b01      	subs	r3, #1
20001a02:	b2db      	uxtb	r3, r3
20001a04:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
20001a06:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001a0a:	2b00      	cmp	r3, #0
20001a0c:	dce9      	bgt.n	200019e2 <prvUnlockQueue+0x60>
20001a0e:	e000      	b.n	20001a12 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
20001a10:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001a12:	687b      	ldr	r3, [r7, #4]
20001a14:	22ff      	movs	r2, #255	; 0xff
20001a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001a1a:	f001 fc8b 	bl	20003334 <vPortExitCritical>
}
20001a1e:	bf00      	nop
20001a20:	3710      	adds	r7, #16
20001a22:	46bd      	mov	sp, r7
20001a24:	bd80      	pop	{r7, pc}

20001a26 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001a26:	b580      	push	{r7, lr}
20001a28:	b084      	sub	sp, #16
20001a2a:	af00      	add	r7, sp, #0
20001a2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001a2e:	f001 fc51 	bl	200032d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001a32:	687b      	ldr	r3, [r7, #4]
20001a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001a36:	2b00      	cmp	r3, #0
20001a38:	d102      	bne.n	20001a40 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
20001a3a:	2301      	movs	r3, #1
20001a3c:	60fb      	str	r3, [r7, #12]
20001a3e:	e001      	b.n	20001a44 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
20001a40:	2300      	movs	r3, #0
20001a42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001a44:	f001 fc76 	bl	20003334 <vPortExitCritical>

	return xReturn;
20001a48:	68fb      	ldr	r3, [r7, #12]
}
20001a4a:	4618      	mov	r0, r3
20001a4c:	3710      	adds	r7, #16
20001a4e:	46bd      	mov	sp, r7
20001a50:	bd80      	pop	{r7, pc}

20001a52 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001a52:	b580      	push	{r7, lr}
20001a54:	b084      	sub	sp, #16
20001a56:	af00      	add	r7, sp, #0
20001a58:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001a5a:	f001 fc3b 	bl	200032d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001a5e:	687b      	ldr	r3, [r7, #4]
20001a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001a62:	687b      	ldr	r3, [r7, #4]
20001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001a66:	429a      	cmp	r2, r3
20001a68:	d102      	bne.n	20001a70 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
20001a6a:	2301      	movs	r3, #1
20001a6c:	60fb      	str	r3, [r7, #12]
20001a6e:	e001      	b.n	20001a74 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001a70:	2300      	movs	r3, #0
20001a72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001a74:	f001 fc5e 	bl	20003334 <vPortExitCritical>

	return xReturn;
20001a78:	68fb      	ldr	r3, [r7, #12]
}
20001a7a:	4618      	mov	r0, r3
20001a7c:	3710      	adds	r7, #16
20001a7e:	46bd      	mov	sp, r7
20001a80:	bd80      	pop	{r7, pc}
	...

20001a84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20001a84:	b480      	push	{r7}
20001a86:	b085      	sub	sp, #20
20001a88:	af00      	add	r7, sp, #0
20001a8a:	6078      	str	r0, [r7, #4]
20001a8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001a8e:	2300      	movs	r3, #0
20001a90:	60fb      	str	r3, [r7, #12]
20001a92:	e014      	b.n	20001abe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
20001a94:	4a0f      	ldr	r2, [pc, #60]	; (20001ad4 <vQueueAddToRegistry+0x50>)
20001a96:	68fb      	ldr	r3, [r7, #12]
20001a98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
20001a9c:	2b00      	cmp	r3, #0
20001a9e:	d10b      	bne.n	20001ab8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
20001aa0:	490c      	ldr	r1, [pc, #48]	; (20001ad4 <vQueueAddToRegistry+0x50>)
20001aa2:	68fb      	ldr	r3, [r7, #12]
20001aa4:	683a      	ldr	r2, [r7, #0]
20001aa6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
20001aaa:	4a0a      	ldr	r2, [pc, #40]	; (20001ad4 <vQueueAddToRegistry+0x50>)
20001aac:	68fb      	ldr	r3, [r7, #12]
20001aae:	00db      	lsls	r3, r3, #3
20001ab0:	4413      	add	r3, r2
20001ab2:	687a      	ldr	r2, [r7, #4]
20001ab4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
20001ab6:	e006      	b.n	20001ac6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001ab8:	68fb      	ldr	r3, [r7, #12]
20001aba:	3301      	adds	r3, #1
20001abc:	60fb      	str	r3, [r7, #12]
20001abe:	68fb      	ldr	r3, [r7, #12]
20001ac0:	2b07      	cmp	r3, #7
20001ac2:	d9e7      	bls.n	20001a94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20001ac4:	bf00      	nop
20001ac6:	bf00      	nop
20001ac8:	3714      	adds	r7, #20
20001aca:	46bd      	mov	sp, r7
20001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ad0:	4770      	bx	lr
20001ad2:	bf00      	nop
20001ad4:	2000a40c 	.word	0x2000a40c

20001ad8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
20001ad8:	b480      	push	{r7}
20001ada:	b085      	sub	sp, #20
20001adc:	af00      	add	r7, sp, #0
20001ade:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001ae0:	2300      	movs	r3, #0
20001ae2:	60fb      	str	r3, [r7, #12]
20001ae4:	e016      	b.n	20001b14 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
20001ae6:	4a10      	ldr	r2, [pc, #64]	; (20001b28 <vQueueUnregisterQueue+0x50>)
20001ae8:	68fb      	ldr	r3, [r7, #12]
20001aea:	00db      	lsls	r3, r3, #3
20001aec:	4413      	add	r3, r2
20001aee:	685b      	ldr	r3, [r3, #4]
20001af0:	687a      	ldr	r2, [r7, #4]
20001af2:	429a      	cmp	r2, r3
20001af4:	d10b      	bne.n	20001b0e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
20001af6:	4a0c      	ldr	r2, [pc, #48]	; (20001b28 <vQueueUnregisterQueue+0x50>)
20001af8:	68fb      	ldr	r3, [r7, #12]
20001afa:	2100      	movs	r1, #0
20001afc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
20001b00:	4a09      	ldr	r2, [pc, #36]	; (20001b28 <vQueueUnregisterQueue+0x50>)
20001b02:	68fb      	ldr	r3, [r7, #12]
20001b04:	00db      	lsls	r3, r3, #3
20001b06:	4413      	add	r3, r2
20001b08:	2200      	movs	r2, #0
20001b0a:	605a      	str	r2, [r3, #4]
				break;
20001b0c:	e006      	b.n	20001b1c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20001b0e:	68fb      	ldr	r3, [r7, #12]
20001b10:	3301      	adds	r3, #1
20001b12:	60fb      	str	r3, [r7, #12]
20001b14:	68fb      	ldr	r3, [r7, #12]
20001b16:	2b07      	cmp	r3, #7
20001b18:	d9e5      	bls.n	20001ae6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
20001b1a:	bf00      	nop
20001b1c:	bf00      	nop
20001b1e:	3714      	adds	r7, #20
20001b20:	46bd      	mov	sp, r7
20001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b26:	4770      	bx	lr
20001b28:	2000a40c 	.word	0x2000a40c

20001b2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20001b2c:	b580      	push	{r7, lr}
20001b2e:	b086      	sub	sp, #24
20001b30:	af00      	add	r7, sp, #0
20001b32:	60f8      	str	r0, [r7, #12]
20001b34:	60b9      	str	r1, [r7, #8]
20001b36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
20001b38:	68fb      	ldr	r3, [r7, #12]
20001b3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
20001b3c:	f001 fbca 	bl	200032d4 <vPortEnterCritical>
20001b40:	697b      	ldr	r3, [r7, #20]
20001b42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001b46:	b25b      	sxtb	r3, r3
20001b48:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b4c:	d103      	bne.n	20001b56 <vQueueWaitForMessageRestricted+0x2a>
20001b4e:	697b      	ldr	r3, [r7, #20]
20001b50:	2200      	movs	r2, #0
20001b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001b56:	697b      	ldr	r3, [r7, #20]
20001b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001b5c:	b25b      	sxtb	r3, r3
20001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b62:	d103      	bne.n	20001b6c <vQueueWaitForMessageRestricted+0x40>
20001b64:	697b      	ldr	r3, [r7, #20]
20001b66:	2200      	movs	r2, #0
20001b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001b6c:	f001 fbe2 	bl	20003334 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
20001b70:	697b      	ldr	r3, [r7, #20]
20001b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001b74:	2b00      	cmp	r3, #0
20001b76:	d106      	bne.n	20001b86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20001b78:	697b      	ldr	r3, [r7, #20]
20001b7a:	3324      	adds	r3, #36	; 0x24
20001b7c:	687a      	ldr	r2, [r7, #4]
20001b7e:	68b9      	ldr	r1, [r7, #8]
20001b80:	4618      	mov	r0, r3
20001b82:	f000 fc61 	bl	20002448 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20001b86:	6978      	ldr	r0, [r7, #20]
20001b88:	f7ff fefb 	bl	20001982 <prvUnlockQueue>
	}
20001b8c:	bf00      	nop
20001b8e:	3718      	adds	r7, #24
20001b90:	46bd      	mov	sp, r7
20001b92:	bd80      	pop	{r7, pc}

20001b94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
20001b94:	b580      	push	{r7, lr}
20001b96:	b08e      	sub	sp, #56	; 0x38
20001b98:	af04      	add	r7, sp, #16
20001b9a:	60f8      	str	r0, [r7, #12]
20001b9c:	60b9      	str	r1, [r7, #8]
20001b9e:	607a      	str	r2, [r7, #4]
20001ba0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
20001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001ba4:	2b00      	cmp	r3, #0
20001ba6:	d10a      	bne.n	20001bbe <xTaskCreateStatic+0x2a>
	__asm volatile
20001ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
20001bac:	f383 8811 	msr	BASEPRI, r3
20001bb0:	f3bf 8f6f 	isb	sy
20001bb4:	f3bf 8f4f 	dsb	sy
20001bb8:	623b      	str	r3, [r7, #32]
}
20001bba:	bf00      	nop
20001bbc:	e7fe      	b.n	20001bbc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
20001bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001bc0:	2b00      	cmp	r3, #0
20001bc2:	d10a      	bne.n	20001bda <xTaskCreateStatic+0x46>
	__asm volatile
20001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
20001bc8:	f383 8811 	msr	BASEPRI, r3
20001bcc:	f3bf 8f6f 	isb	sy
20001bd0:	f3bf 8f4f 	dsb	sy
20001bd4:	61fb      	str	r3, [r7, #28]
}
20001bd6:	bf00      	nop
20001bd8:	e7fe      	b.n	20001bd8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
20001bda:	23bc      	movs	r3, #188	; 0xbc
20001bdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
20001bde:	693b      	ldr	r3, [r7, #16]
20001be0:	2bbc      	cmp	r3, #188	; 0xbc
20001be2:	d00a      	beq.n	20001bfa <xTaskCreateStatic+0x66>
	__asm volatile
20001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
20001be8:	f383 8811 	msr	BASEPRI, r3
20001bec:	f3bf 8f6f 	isb	sy
20001bf0:	f3bf 8f4f 	dsb	sy
20001bf4:	61bb      	str	r3, [r7, #24]
}
20001bf6:	bf00      	nop
20001bf8:	e7fe      	b.n	20001bf8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
20001bfa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
20001bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001bfe:	2b00      	cmp	r3, #0
20001c00:	d01e      	beq.n	20001c40 <xTaskCreateStatic+0xac>
20001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001c04:	2b00      	cmp	r3, #0
20001c06:	d01b      	beq.n	20001c40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20001c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001c0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
20001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20001c10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
20001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c14:	2202      	movs	r2, #2
20001c16:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
20001c1a:	2300      	movs	r3, #0
20001c1c:	9303      	str	r3, [sp, #12]
20001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001c20:	9302      	str	r3, [sp, #8]
20001c22:	f107 0314 	add.w	r3, r7, #20
20001c26:	9301      	str	r3, [sp, #4]
20001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c2a:	9300      	str	r3, [sp, #0]
20001c2c:	683b      	ldr	r3, [r7, #0]
20001c2e:	687a      	ldr	r2, [r7, #4]
20001c30:	68b9      	ldr	r1, [r7, #8]
20001c32:	68f8      	ldr	r0, [r7, #12]
20001c34:	f000 f850 	bl	20001cd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
20001c3a:	f000 f8f3 	bl	20001e24 <prvAddNewTaskToReadyList>
20001c3e:	e001      	b.n	20001c44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
20001c40:	2300      	movs	r3, #0
20001c42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
20001c44:	697b      	ldr	r3, [r7, #20]
	}
20001c46:	4618      	mov	r0, r3
20001c48:	3728      	adds	r7, #40	; 0x28
20001c4a:	46bd      	mov	sp, r7
20001c4c:	bd80      	pop	{r7, pc}

20001c4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
20001c4e:	b580      	push	{r7, lr}
20001c50:	b08c      	sub	sp, #48	; 0x30
20001c52:	af04      	add	r7, sp, #16
20001c54:	60f8      	str	r0, [r7, #12]
20001c56:	60b9      	str	r1, [r7, #8]
20001c58:	603b      	str	r3, [r7, #0]
20001c5a:	4613      	mov	r3, r2
20001c5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
20001c5e:	88fb      	ldrh	r3, [r7, #6]
20001c60:	009b      	lsls	r3, r3, #2
20001c62:	4618      	mov	r0, r3
20001c64:	f001 fc58 	bl	20003518 <pvPortMalloc>
20001c68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
20001c6a:	697b      	ldr	r3, [r7, #20]
20001c6c:	2b00      	cmp	r3, #0
20001c6e:	d00e      	beq.n	20001c8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
20001c70:	20bc      	movs	r0, #188	; 0xbc
20001c72:	f001 fc51 	bl	20003518 <pvPortMalloc>
20001c76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
20001c78:	69fb      	ldr	r3, [r7, #28]
20001c7a:	2b00      	cmp	r3, #0
20001c7c:	d003      	beq.n	20001c86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
20001c7e:	69fb      	ldr	r3, [r7, #28]
20001c80:	697a      	ldr	r2, [r7, #20]
20001c82:	631a      	str	r2, [r3, #48]	; 0x30
20001c84:	e005      	b.n	20001c92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20001c86:	6978      	ldr	r0, [r7, #20]
20001c88:	f001 fd12 	bl	200036b0 <vPortFree>
20001c8c:	e001      	b.n	20001c92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
20001c8e:	2300      	movs	r3, #0
20001c90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
20001c92:	69fb      	ldr	r3, [r7, #28]
20001c94:	2b00      	cmp	r3, #0
20001c96:	d017      	beq.n	20001cc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
20001c98:	69fb      	ldr	r3, [r7, #28]
20001c9a:	2200      	movs	r2, #0
20001c9c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
20001ca0:	88fa      	ldrh	r2, [r7, #6]
20001ca2:	2300      	movs	r3, #0
20001ca4:	9303      	str	r3, [sp, #12]
20001ca6:	69fb      	ldr	r3, [r7, #28]
20001ca8:	9302      	str	r3, [sp, #8]
20001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001cac:	9301      	str	r3, [sp, #4]
20001cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001cb0:	9300      	str	r3, [sp, #0]
20001cb2:	683b      	ldr	r3, [r7, #0]
20001cb4:	68b9      	ldr	r1, [r7, #8]
20001cb6:	68f8      	ldr	r0, [r7, #12]
20001cb8:	f000 f80e 	bl	20001cd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20001cbc:	69f8      	ldr	r0, [r7, #28]
20001cbe:	f000 f8b1 	bl	20001e24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
20001cc2:	2301      	movs	r3, #1
20001cc4:	61bb      	str	r3, [r7, #24]
20001cc6:	e002      	b.n	20001cce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20001cc8:	f04f 33ff 	mov.w	r3, #4294967295
20001ccc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
20001cce:	69bb      	ldr	r3, [r7, #24]
	}
20001cd0:	4618      	mov	r0, r3
20001cd2:	3720      	adds	r7, #32
20001cd4:	46bd      	mov	sp, r7
20001cd6:	bd80      	pop	{r7, pc}

20001cd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
20001cd8:	b580      	push	{r7, lr}
20001cda:	b088      	sub	sp, #32
20001cdc:	af00      	add	r7, sp, #0
20001cde:	60f8      	str	r0, [r7, #12]
20001ce0:	60b9      	str	r1, [r7, #8]
20001ce2:	607a      	str	r2, [r7, #4]
20001ce4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20001ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001ce8:	6b18      	ldr	r0, [r3, #48]	; 0x30
20001cea:	687b      	ldr	r3, [r7, #4]
20001cec:	009b      	lsls	r3, r3, #2
20001cee:	461a      	mov	r2, r3
20001cf0:	21a5      	movs	r1, #165	; 0xa5
20001cf2:	f003 ff71 	bl	20005bd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
20001cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20001cfa:	687b      	ldr	r3, [r7, #4]
20001cfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
20001d00:	3b01      	subs	r3, #1
20001d02:	009b      	lsls	r3, r3, #2
20001d04:	4413      	add	r3, r2
20001d06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
20001d08:	69bb      	ldr	r3, [r7, #24]
20001d0a:	f023 0307 	bic.w	r3, r3, #7
20001d0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
20001d10:	69bb      	ldr	r3, [r7, #24]
20001d12:	f003 0307 	and.w	r3, r3, #7
20001d16:	2b00      	cmp	r3, #0
20001d18:	d00a      	beq.n	20001d30 <prvInitialiseNewTask+0x58>
	__asm volatile
20001d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d1e:	f383 8811 	msr	BASEPRI, r3
20001d22:	f3bf 8f6f 	isb	sy
20001d26:	f3bf 8f4f 	dsb	sy
20001d2a:	617b      	str	r3, [r7, #20]
}
20001d2c:	bf00      	nop
20001d2e:	e7fe      	b.n	20001d2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
20001d30:	68bb      	ldr	r3, [r7, #8]
20001d32:	2b00      	cmp	r3, #0
20001d34:	d01f      	beq.n	20001d76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001d36:	2300      	movs	r3, #0
20001d38:	61fb      	str	r3, [r7, #28]
20001d3a:	e012      	b.n	20001d62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
20001d3c:	68ba      	ldr	r2, [r7, #8]
20001d3e:	69fb      	ldr	r3, [r7, #28]
20001d40:	4413      	add	r3, r2
20001d42:	7819      	ldrb	r1, [r3, #0]
20001d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001d46:	69fb      	ldr	r3, [r7, #28]
20001d48:	4413      	add	r3, r2
20001d4a:	3334      	adds	r3, #52	; 0x34
20001d4c:	460a      	mov	r2, r1
20001d4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
20001d50:	68ba      	ldr	r2, [r7, #8]
20001d52:	69fb      	ldr	r3, [r7, #28]
20001d54:	4413      	add	r3, r2
20001d56:	781b      	ldrb	r3, [r3, #0]
20001d58:	2b00      	cmp	r3, #0
20001d5a:	d006      	beq.n	20001d6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
20001d5c:	69fb      	ldr	r3, [r7, #28]
20001d5e:	3301      	adds	r3, #1
20001d60:	61fb      	str	r3, [r7, #28]
20001d62:	69fb      	ldr	r3, [r7, #28]
20001d64:	2b0f      	cmp	r3, #15
20001d66:	d9e9      	bls.n	20001d3c <prvInitialiseNewTask+0x64>
20001d68:	e000      	b.n	20001d6c <prvInitialiseNewTask+0x94>
			{
				break;
20001d6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
20001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d6e:	2200      	movs	r2, #0
20001d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20001d74:	e003      	b.n	20001d7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
20001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d78:	2200      	movs	r2, #0
20001d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
20001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d80:	2b37      	cmp	r3, #55	; 0x37
20001d82:	d901      	bls.n	20001d88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20001d84:	2337      	movs	r3, #55	; 0x37
20001d86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
20001d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
20001d92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
20001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d96:	2200      	movs	r2, #0
20001d98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d9c:	3304      	adds	r3, #4
20001d9e:	4618      	mov	r0, r3
20001da0:	f7ff f886 	bl	20000eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001da6:	3318      	adds	r3, #24
20001da8:	4618      	mov	r0, r3
20001daa:	f7ff f881 	bl	20000eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
20001dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001db2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20001db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001db6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20001dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001dbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
20001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001dc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20001dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001dc6:	2200      	movs	r2, #0
20001dc8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20001dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001dce:	2200      	movs	r2, #0
20001dd0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
20001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001dd6:	3354      	adds	r3, #84	; 0x54
20001dd8:	2260      	movs	r2, #96	; 0x60
20001dda:	2100      	movs	r1, #0
20001ddc:	4618      	mov	r0, r3
20001dde:	f003 fefb 	bl	20005bd8 <memset>
20001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001de4:	4a0c      	ldr	r2, [pc, #48]	; (20001e18 <prvInitialiseNewTask+0x140>)
20001de6:	659a      	str	r2, [r3, #88]	; 0x58
20001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001dea:	4a0c      	ldr	r2, [pc, #48]	; (20001e1c <prvInitialiseNewTask+0x144>)
20001dec:	65da      	str	r2, [r3, #92]	; 0x5c
20001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001df0:	4a0b      	ldr	r2, [pc, #44]	; (20001e20 <prvInitialiseNewTask+0x148>)
20001df2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20001df4:	683a      	ldr	r2, [r7, #0]
20001df6:	68f9      	ldr	r1, [r7, #12]
20001df8:	69b8      	ldr	r0, [r7, #24]
20001dfa:	f001 f941 	bl	20003080 <pxPortInitialiseStack>
20001dfe:	4602      	mov	r2, r0
20001e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001e02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
20001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001e06:	2b00      	cmp	r3, #0
20001e08:	d002      	beq.n	20001e10 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20001e0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001e10:	bf00      	nop
20001e12:	3720      	adds	r7, #32
20001e14:	46bd      	mov	sp, r7
20001e16:	bd80      	pop	{r7, pc}
20001e18:	20009b6c 	.word	0x20009b6c
20001e1c:	20009b8c 	.word	0x20009b8c
20001e20:	20009b4c 	.word	0x20009b4c

20001e24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
20001e24:	b580      	push	{r7, lr}
20001e26:	b082      	sub	sp, #8
20001e28:	af00      	add	r7, sp, #0
20001e2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
20001e2c:	f001 fa52 	bl	200032d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
20001e30:	4b2d      	ldr	r3, [pc, #180]	; (20001ee8 <prvAddNewTaskToReadyList+0xc4>)
20001e32:	681b      	ldr	r3, [r3, #0]
20001e34:	3301      	adds	r3, #1
20001e36:	4a2c      	ldr	r2, [pc, #176]	; (20001ee8 <prvAddNewTaskToReadyList+0xc4>)
20001e38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
20001e3a:	4b2c      	ldr	r3, [pc, #176]	; (20001eec <prvAddNewTaskToReadyList+0xc8>)
20001e3c:	681b      	ldr	r3, [r3, #0]
20001e3e:	2b00      	cmp	r3, #0
20001e40:	d109      	bne.n	20001e56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
20001e42:	4a2a      	ldr	r2, [pc, #168]	; (20001eec <prvAddNewTaskToReadyList+0xc8>)
20001e44:	687b      	ldr	r3, [r7, #4]
20001e46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
20001e48:	4b27      	ldr	r3, [pc, #156]	; (20001ee8 <prvAddNewTaskToReadyList+0xc4>)
20001e4a:	681b      	ldr	r3, [r3, #0]
20001e4c:	2b01      	cmp	r3, #1
20001e4e:	d110      	bne.n	20001e72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
20001e50:	f000 fc26 	bl	200026a0 <prvInitialiseTaskLists>
20001e54:	e00d      	b.n	20001e72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
20001e56:	4b26      	ldr	r3, [pc, #152]	; (20001ef0 <prvAddNewTaskToReadyList+0xcc>)
20001e58:	681b      	ldr	r3, [r3, #0]
20001e5a:	2b00      	cmp	r3, #0
20001e5c:	d109      	bne.n	20001e72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
20001e5e:	4b23      	ldr	r3, [pc, #140]	; (20001eec <prvAddNewTaskToReadyList+0xc8>)
20001e60:	681b      	ldr	r3, [r3, #0]
20001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e64:	687b      	ldr	r3, [r7, #4]
20001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e68:	429a      	cmp	r2, r3
20001e6a:	d802      	bhi.n	20001e72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
20001e6c:	4a1f      	ldr	r2, [pc, #124]	; (20001eec <prvAddNewTaskToReadyList+0xc8>)
20001e6e:	687b      	ldr	r3, [r7, #4]
20001e70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
20001e72:	4b20      	ldr	r3, [pc, #128]	; (20001ef4 <prvAddNewTaskToReadyList+0xd0>)
20001e74:	681b      	ldr	r3, [r3, #0]
20001e76:	3301      	adds	r3, #1
20001e78:	4a1e      	ldr	r2, [pc, #120]	; (20001ef4 <prvAddNewTaskToReadyList+0xd0>)
20001e7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20001e7c:	4b1d      	ldr	r3, [pc, #116]	; (20001ef4 <prvAddNewTaskToReadyList+0xd0>)
20001e7e:	681a      	ldr	r2, [r3, #0]
20001e80:	687b      	ldr	r3, [r7, #4]
20001e82:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20001e84:	687b      	ldr	r3, [r7, #4]
20001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e88:	4b1b      	ldr	r3, [pc, #108]	; (20001ef8 <prvAddNewTaskToReadyList+0xd4>)
20001e8a:	681b      	ldr	r3, [r3, #0]
20001e8c:	429a      	cmp	r2, r3
20001e8e:	d903      	bls.n	20001e98 <prvAddNewTaskToReadyList+0x74>
20001e90:	687b      	ldr	r3, [r7, #4]
20001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001e94:	4a18      	ldr	r2, [pc, #96]	; (20001ef8 <prvAddNewTaskToReadyList+0xd4>)
20001e96:	6013      	str	r3, [r2, #0]
20001e98:	687b      	ldr	r3, [r7, #4]
20001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001e9c:	4613      	mov	r3, r2
20001e9e:	009b      	lsls	r3, r3, #2
20001ea0:	4413      	add	r3, r2
20001ea2:	009b      	lsls	r3, r3, #2
20001ea4:	4a15      	ldr	r2, [pc, #84]	; (20001efc <prvAddNewTaskToReadyList+0xd8>)
20001ea6:	441a      	add	r2, r3
20001ea8:	687b      	ldr	r3, [r7, #4]
20001eaa:	3304      	adds	r3, #4
20001eac:	4619      	mov	r1, r3
20001eae:	4610      	mov	r0, r2
20001eb0:	f7ff f80b 	bl	20000eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20001eb4:	f001 fa3e 	bl	20003334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20001eb8:	4b0d      	ldr	r3, [pc, #52]	; (20001ef0 <prvAddNewTaskToReadyList+0xcc>)
20001eba:	681b      	ldr	r3, [r3, #0]
20001ebc:	2b00      	cmp	r3, #0
20001ebe:	d00e      	beq.n	20001ede <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
20001ec0:	4b0a      	ldr	r3, [pc, #40]	; (20001eec <prvAddNewTaskToReadyList+0xc8>)
20001ec2:	681b      	ldr	r3, [r3, #0]
20001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20001ec6:	687b      	ldr	r3, [r7, #4]
20001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001eca:	429a      	cmp	r2, r3
20001ecc:	d207      	bcs.n	20001ede <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
20001ece:	4b0c      	ldr	r3, [pc, #48]	; (20001f00 <prvAddNewTaskToReadyList+0xdc>)
20001ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001ed4:	601a      	str	r2, [r3, #0]
20001ed6:	f3bf 8f4f 	dsb	sy
20001eda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20001ede:	bf00      	nop
20001ee0:	3708      	adds	r7, #8
20001ee2:	46bd      	mov	sp, r7
20001ee4:	bd80      	pop	{r7, pc}
20001ee6:	bf00      	nop
20001ee8:	2000a920 	.word	0x2000a920
20001eec:	2000a44c 	.word	0x2000a44c
20001ef0:	2000a92c 	.word	0x2000a92c
20001ef4:	2000a93c 	.word	0x2000a93c
20001ef8:	2000a928 	.word	0x2000a928
20001efc:	2000a450 	.word	0x2000a450
20001f00:	e000ed04 	.word	0xe000ed04

20001f04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20001f04:	b580      	push	{r7, lr}
20001f06:	b084      	sub	sp, #16
20001f08:	af00      	add	r7, sp, #0
20001f0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
20001f0c:	2300      	movs	r3, #0
20001f0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
20001f10:	687b      	ldr	r3, [r7, #4]
20001f12:	2b00      	cmp	r3, #0
20001f14:	d017      	beq.n	20001f46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
20001f16:	4b13      	ldr	r3, [pc, #76]	; (20001f64 <vTaskDelay+0x60>)
20001f18:	681b      	ldr	r3, [r3, #0]
20001f1a:	2b00      	cmp	r3, #0
20001f1c:	d00a      	beq.n	20001f34 <vTaskDelay+0x30>
	__asm volatile
20001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001f22:	f383 8811 	msr	BASEPRI, r3
20001f26:	f3bf 8f6f 	isb	sy
20001f2a:	f3bf 8f4f 	dsb	sy
20001f2e:	60bb      	str	r3, [r7, #8]
}
20001f30:	bf00      	nop
20001f32:	e7fe      	b.n	20001f32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
20001f34:	f000 f88a 	bl	2000204c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
20001f38:	2100      	movs	r1, #0
20001f3a:	6878      	ldr	r0, [r7, #4]
20001f3c:	f000 fcfe 	bl	2000293c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
20001f40:	f000 f892 	bl	20002068 <xTaskResumeAll>
20001f44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
20001f46:	68fb      	ldr	r3, [r7, #12]
20001f48:	2b00      	cmp	r3, #0
20001f4a:	d107      	bne.n	20001f5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
20001f4c:	4b06      	ldr	r3, [pc, #24]	; (20001f68 <vTaskDelay+0x64>)
20001f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001f52:	601a      	str	r2, [r3, #0]
20001f54:	f3bf 8f4f 	dsb	sy
20001f58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20001f5c:	bf00      	nop
20001f5e:	3710      	adds	r7, #16
20001f60:	46bd      	mov	sp, r7
20001f62:	bd80      	pop	{r7, pc}
20001f64:	2000a948 	.word	0x2000a948
20001f68:	e000ed04 	.word	0xe000ed04

20001f6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
20001f6c:	b580      	push	{r7, lr}
20001f6e:	b08a      	sub	sp, #40	; 0x28
20001f70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
20001f72:	2300      	movs	r3, #0
20001f74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
20001f76:	2300      	movs	r3, #0
20001f78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
20001f7a:	463a      	mov	r2, r7
20001f7c:	1d39      	adds	r1, r7, #4
20001f7e:	f107 0308 	add.w	r3, r7, #8
20001f82:	4618      	mov	r0, r3
20001f84:	f7fe ff40 	bl	20000e08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
20001f88:	6839      	ldr	r1, [r7, #0]
20001f8a:	687b      	ldr	r3, [r7, #4]
20001f8c:	68ba      	ldr	r2, [r7, #8]
20001f8e:	9202      	str	r2, [sp, #8]
20001f90:	9301      	str	r3, [sp, #4]
20001f92:	2300      	movs	r3, #0
20001f94:	9300      	str	r3, [sp, #0]
20001f96:	2300      	movs	r3, #0
20001f98:	460a      	mov	r2, r1
20001f9a:	4924      	ldr	r1, [pc, #144]	; (2000202c <vTaskStartScheduler+0xc0>)
20001f9c:	4824      	ldr	r0, [pc, #144]	; (20002030 <vTaskStartScheduler+0xc4>)
20001f9e:	f7ff fdf9 	bl	20001b94 <xTaskCreateStatic>
20001fa2:	4603      	mov	r3, r0
20001fa4:	4a23      	ldr	r2, [pc, #140]	; (20002034 <vTaskStartScheduler+0xc8>)
20001fa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
20001fa8:	4b22      	ldr	r3, [pc, #136]	; (20002034 <vTaskStartScheduler+0xc8>)
20001faa:	681b      	ldr	r3, [r3, #0]
20001fac:	2b00      	cmp	r3, #0
20001fae:	d002      	beq.n	20001fb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
20001fb0:	2301      	movs	r3, #1
20001fb2:	617b      	str	r3, [r7, #20]
20001fb4:	e001      	b.n	20001fba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
20001fb6:	2300      	movs	r3, #0
20001fb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20001fba:	697b      	ldr	r3, [r7, #20]
20001fbc:	2b01      	cmp	r3, #1
20001fbe:	d102      	bne.n	20001fc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
20001fc0:	f000 fd10 	bl	200029e4 <xTimerCreateTimerTask>
20001fc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20001fc6:	697b      	ldr	r3, [r7, #20]
20001fc8:	2b01      	cmp	r3, #1
20001fca:	d11b      	bne.n	20002004 <vTaskStartScheduler+0x98>
	__asm volatile
20001fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
20001fd0:	f383 8811 	msr	BASEPRI, r3
20001fd4:	f3bf 8f6f 	isb	sy
20001fd8:	f3bf 8f4f 	dsb	sy
20001fdc:	613b      	str	r3, [r7, #16]
}
20001fde:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
20001fe0:	4b15      	ldr	r3, [pc, #84]	; (20002038 <vTaskStartScheduler+0xcc>)
20001fe2:	681b      	ldr	r3, [r3, #0]
20001fe4:	3354      	adds	r3, #84	; 0x54
20001fe6:	4a15      	ldr	r2, [pc, #84]	; (2000203c <vTaskStartScheduler+0xd0>)
20001fe8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
20001fea:	4b15      	ldr	r3, [pc, #84]	; (20002040 <vTaskStartScheduler+0xd4>)
20001fec:	f04f 32ff 	mov.w	r2, #4294967295
20001ff0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
20001ff2:	4b14      	ldr	r3, [pc, #80]	; (20002044 <vTaskStartScheduler+0xd8>)
20001ff4:	2201      	movs	r2, #1
20001ff6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
20001ff8:	4b13      	ldr	r3, [pc, #76]	; (20002048 <vTaskStartScheduler+0xdc>)
20001ffa:	2200      	movs	r2, #0
20001ffc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
20001ffe:	f001 f8c7 	bl	20003190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
20002002:	e00e      	b.n	20002022 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002004:	697b      	ldr	r3, [r7, #20]
20002006:	f1b3 3fff 	cmp.w	r3, #4294967295
2000200a:	d10a      	bne.n	20002022 <vTaskStartScheduler+0xb6>
	__asm volatile
2000200c:	f04f 0350 	mov.w	r3, #80	; 0x50
20002010:	f383 8811 	msr	BASEPRI, r3
20002014:	f3bf 8f6f 	isb	sy
20002018:	f3bf 8f4f 	dsb	sy
2000201c:	60fb      	str	r3, [r7, #12]
}
2000201e:	bf00      	nop
20002020:	e7fe      	b.n	20002020 <vTaskStartScheduler+0xb4>
}
20002022:	bf00      	nop
20002024:	3718      	adds	r7, #24
20002026:	46bd      	mov	sp, r7
20002028:	bd80      	pop	{r7, pc}
2000202a:	bf00      	nop
2000202c:	20005d84 	.word	0x20005d84
20002030:	20002671 	.word	0x20002671
20002034:	2000a944 	.word	0x2000a944
20002038:	2000a44c 	.word	0x2000a44c
2000203c:	20009c10 	.word	0x20009c10
20002040:	2000a940 	.word	0x2000a940
20002044:	2000a92c 	.word	0x2000a92c
20002048:	2000a924 	.word	0x2000a924

2000204c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
2000204c:	b480      	push	{r7}
2000204e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
20002050:	4b04      	ldr	r3, [pc, #16]	; (20002064 <vTaskSuspendAll+0x18>)
20002052:	681b      	ldr	r3, [r3, #0]
20002054:	3301      	adds	r3, #1
20002056:	4a03      	ldr	r2, [pc, #12]	; (20002064 <vTaskSuspendAll+0x18>)
20002058:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
2000205a:	bf00      	nop
2000205c:	46bd      	mov	sp, r7
2000205e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002062:	4770      	bx	lr
20002064:	2000a948 	.word	0x2000a948

20002068 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
20002068:	b580      	push	{r7, lr}
2000206a:	b084      	sub	sp, #16
2000206c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
2000206e:	2300      	movs	r3, #0
20002070:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
20002072:	2300      	movs	r3, #0
20002074:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
20002076:	4b42      	ldr	r3, [pc, #264]	; (20002180 <xTaskResumeAll+0x118>)
20002078:	681b      	ldr	r3, [r3, #0]
2000207a:	2b00      	cmp	r3, #0
2000207c:	d10a      	bne.n	20002094 <xTaskResumeAll+0x2c>
	__asm volatile
2000207e:	f04f 0350 	mov.w	r3, #80	; 0x50
20002082:	f383 8811 	msr	BASEPRI, r3
20002086:	f3bf 8f6f 	isb	sy
2000208a:	f3bf 8f4f 	dsb	sy
2000208e:	603b      	str	r3, [r7, #0]
}
20002090:	bf00      	nop
20002092:	e7fe      	b.n	20002092 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002094:	f001 f91e 	bl	200032d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20002098:	4b39      	ldr	r3, [pc, #228]	; (20002180 <xTaskResumeAll+0x118>)
2000209a:	681b      	ldr	r3, [r3, #0]
2000209c:	3b01      	subs	r3, #1
2000209e:	4a38      	ldr	r2, [pc, #224]	; (20002180 <xTaskResumeAll+0x118>)
200020a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200020a2:	4b37      	ldr	r3, [pc, #220]	; (20002180 <xTaskResumeAll+0x118>)
200020a4:	681b      	ldr	r3, [r3, #0]
200020a6:	2b00      	cmp	r3, #0
200020a8:	d162      	bne.n	20002170 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
200020aa:	4b36      	ldr	r3, [pc, #216]	; (20002184 <xTaskResumeAll+0x11c>)
200020ac:	681b      	ldr	r3, [r3, #0]
200020ae:	2b00      	cmp	r3, #0
200020b0:	d05e      	beq.n	20002170 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200020b2:	e02f      	b.n	20002114 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200020b4:	4b34      	ldr	r3, [pc, #208]	; (20002188 <xTaskResumeAll+0x120>)
200020b6:	68db      	ldr	r3, [r3, #12]
200020b8:	68db      	ldr	r3, [r3, #12]
200020ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
200020bc:	68fb      	ldr	r3, [r7, #12]
200020be:	3318      	adds	r3, #24
200020c0:	4618      	mov	r0, r3
200020c2:	f7fe ff5f 	bl	20000f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200020c6:	68fb      	ldr	r3, [r7, #12]
200020c8:	3304      	adds	r3, #4
200020ca:	4618      	mov	r0, r3
200020cc:	f7fe ff5a 	bl	20000f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
200020d0:	68fb      	ldr	r3, [r7, #12]
200020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200020d4:	4b2d      	ldr	r3, [pc, #180]	; (2000218c <xTaskResumeAll+0x124>)
200020d6:	681b      	ldr	r3, [r3, #0]
200020d8:	429a      	cmp	r2, r3
200020da:	d903      	bls.n	200020e4 <xTaskResumeAll+0x7c>
200020dc:	68fb      	ldr	r3, [r7, #12]
200020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200020e0:	4a2a      	ldr	r2, [pc, #168]	; (2000218c <xTaskResumeAll+0x124>)
200020e2:	6013      	str	r3, [r2, #0]
200020e4:	68fb      	ldr	r3, [r7, #12]
200020e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200020e8:	4613      	mov	r3, r2
200020ea:	009b      	lsls	r3, r3, #2
200020ec:	4413      	add	r3, r2
200020ee:	009b      	lsls	r3, r3, #2
200020f0:	4a27      	ldr	r2, [pc, #156]	; (20002190 <xTaskResumeAll+0x128>)
200020f2:	441a      	add	r2, r3
200020f4:	68fb      	ldr	r3, [r7, #12]
200020f6:	3304      	adds	r3, #4
200020f8:	4619      	mov	r1, r3
200020fa:	4610      	mov	r0, r2
200020fc:	f7fe fee5 	bl	20000eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002100:	68fb      	ldr	r3, [r7, #12]
20002102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002104:	4b23      	ldr	r3, [pc, #140]	; (20002194 <xTaskResumeAll+0x12c>)
20002106:	681b      	ldr	r3, [r3, #0]
20002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000210a:	429a      	cmp	r2, r3
2000210c:	d302      	bcc.n	20002114 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
2000210e:	4b22      	ldr	r3, [pc, #136]	; (20002198 <xTaskResumeAll+0x130>)
20002110:	2201      	movs	r2, #1
20002112:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
20002114:	4b1c      	ldr	r3, [pc, #112]	; (20002188 <xTaskResumeAll+0x120>)
20002116:	681b      	ldr	r3, [r3, #0]
20002118:	2b00      	cmp	r3, #0
2000211a:	d1cb      	bne.n	200020b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
2000211c:	68fb      	ldr	r3, [r7, #12]
2000211e:	2b00      	cmp	r3, #0
20002120:	d001      	beq.n	20002126 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
20002122:	f000 fb5f 	bl	200027e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
20002126:	4b1d      	ldr	r3, [pc, #116]	; (2000219c <xTaskResumeAll+0x134>)
20002128:	681b      	ldr	r3, [r3, #0]
2000212a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
2000212c:	687b      	ldr	r3, [r7, #4]
2000212e:	2b00      	cmp	r3, #0
20002130:	d010      	beq.n	20002154 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
20002132:	f000 f847 	bl	200021c4 <xTaskIncrementTick>
20002136:	4603      	mov	r3, r0
20002138:	2b00      	cmp	r3, #0
2000213a:	d002      	beq.n	20002142 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
2000213c:	4b16      	ldr	r3, [pc, #88]	; (20002198 <xTaskResumeAll+0x130>)
2000213e:	2201      	movs	r2, #1
20002140:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
20002142:	687b      	ldr	r3, [r7, #4]
20002144:	3b01      	subs	r3, #1
20002146:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
20002148:	687b      	ldr	r3, [r7, #4]
2000214a:	2b00      	cmp	r3, #0
2000214c:	d1f1      	bne.n	20002132 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
2000214e:	4b13      	ldr	r3, [pc, #76]	; (2000219c <xTaskResumeAll+0x134>)
20002150:	2200      	movs	r2, #0
20002152:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
20002154:	4b10      	ldr	r3, [pc, #64]	; (20002198 <xTaskResumeAll+0x130>)
20002156:	681b      	ldr	r3, [r3, #0]
20002158:	2b00      	cmp	r3, #0
2000215a:	d009      	beq.n	20002170 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
2000215c:	2301      	movs	r3, #1
2000215e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
20002160:	4b0f      	ldr	r3, [pc, #60]	; (200021a0 <xTaskResumeAll+0x138>)
20002162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002166:	601a      	str	r2, [r3, #0]
20002168:	f3bf 8f4f 	dsb	sy
2000216c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20002170:	f001 f8e0 	bl	20003334 <vPortExitCritical>

	return xAlreadyYielded;
20002174:	68bb      	ldr	r3, [r7, #8]
}
20002176:	4618      	mov	r0, r3
20002178:	3710      	adds	r7, #16
2000217a:	46bd      	mov	sp, r7
2000217c:	bd80      	pop	{r7, pc}
2000217e:	bf00      	nop
20002180:	2000a948 	.word	0x2000a948
20002184:	2000a920 	.word	0x2000a920
20002188:	2000a8e0 	.word	0x2000a8e0
2000218c:	2000a928 	.word	0x2000a928
20002190:	2000a450 	.word	0x2000a450
20002194:	2000a44c 	.word	0x2000a44c
20002198:	2000a934 	.word	0x2000a934
2000219c:	2000a930 	.word	0x2000a930
200021a0:	e000ed04 	.word	0xe000ed04

200021a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
200021a4:	b480      	push	{r7}
200021a6:	b083      	sub	sp, #12
200021a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
200021aa:	4b05      	ldr	r3, [pc, #20]	; (200021c0 <xTaskGetTickCount+0x1c>)
200021ac:	681b      	ldr	r3, [r3, #0]
200021ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
200021b0:	687b      	ldr	r3, [r7, #4]
}
200021b2:	4618      	mov	r0, r3
200021b4:	370c      	adds	r7, #12
200021b6:	46bd      	mov	sp, r7
200021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200021bc:	4770      	bx	lr
200021be:	bf00      	nop
200021c0:	2000a924 	.word	0x2000a924

200021c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
200021c4:	b580      	push	{r7, lr}
200021c6:	b086      	sub	sp, #24
200021c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
200021ca:	2300      	movs	r3, #0
200021cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200021ce:	4b4f      	ldr	r3, [pc, #316]	; (2000230c <xTaskIncrementTick+0x148>)
200021d0:	681b      	ldr	r3, [r3, #0]
200021d2:	2b00      	cmp	r3, #0
200021d4:	f040 808f 	bne.w	200022f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
200021d8:	4b4d      	ldr	r3, [pc, #308]	; (20002310 <xTaskIncrementTick+0x14c>)
200021da:	681b      	ldr	r3, [r3, #0]
200021dc:	3301      	adds	r3, #1
200021de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
200021e0:	4a4b      	ldr	r2, [pc, #300]	; (20002310 <xTaskIncrementTick+0x14c>)
200021e2:	693b      	ldr	r3, [r7, #16]
200021e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
200021e6:	693b      	ldr	r3, [r7, #16]
200021e8:	2b00      	cmp	r3, #0
200021ea:	d120      	bne.n	2000222e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
200021ec:	4b49      	ldr	r3, [pc, #292]	; (20002314 <xTaskIncrementTick+0x150>)
200021ee:	681b      	ldr	r3, [r3, #0]
200021f0:	681b      	ldr	r3, [r3, #0]
200021f2:	2b00      	cmp	r3, #0
200021f4:	d00a      	beq.n	2000220c <xTaskIncrementTick+0x48>
	__asm volatile
200021f6:	f04f 0350 	mov.w	r3, #80	; 0x50
200021fa:	f383 8811 	msr	BASEPRI, r3
200021fe:	f3bf 8f6f 	isb	sy
20002202:	f3bf 8f4f 	dsb	sy
20002206:	603b      	str	r3, [r7, #0]
}
20002208:	bf00      	nop
2000220a:	e7fe      	b.n	2000220a <xTaskIncrementTick+0x46>
2000220c:	4b41      	ldr	r3, [pc, #260]	; (20002314 <xTaskIncrementTick+0x150>)
2000220e:	681b      	ldr	r3, [r3, #0]
20002210:	60fb      	str	r3, [r7, #12]
20002212:	4b41      	ldr	r3, [pc, #260]	; (20002318 <xTaskIncrementTick+0x154>)
20002214:	681b      	ldr	r3, [r3, #0]
20002216:	4a3f      	ldr	r2, [pc, #252]	; (20002314 <xTaskIncrementTick+0x150>)
20002218:	6013      	str	r3, [r2, #0]
2000221a:	4a3f      	ldr	r2, [pc, #252]	; (20002318 <xTaskIncrementTick+0x154>)
2000221c:	68fb      	ldr	r3, [r7, #12]
2000221e:	6013      	str	r3, [r2, #0]
20002220:	4b3e      	ldr	r3, [pc, #248]	; (2000231c <xTaskIncrementTick+0x158>)
20002222:	681b      	ldr	r3, [r3, #0]
20002224:	3301      	adds	r3, #1
20002226:	4a3d      	ldr	r2, [pc, #244]	; (2000231c <xTaskIncrementTick+0x158>)
20002228:	6013      	str	r3, [r2, #0]
2000222a:	f000 fadb 	bl	200027e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
2000222e:	4b3c      	ldr	r3, [pc, #240]	; (20002320 <xTaskIncrementTick+0x15c>)
20002230:	681b      	ldr	r3, [r3, #0]
20002232:	693a      	ldr	r2, [r7, #16]
20002234:	429a      	cmp	r2, r3
20002236:	d349      	bcc.n	200022cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002238:	4b36      	ldr	r3, [pc, #216]	; (20002314 <xTaskIncrementTick+0x150>)
2000223a:	681b      	ldr	r3, [r3, #0]
2000223c:	681b      	ldr	r3, [r3, #0]
2000223e:	2b00      	cmp	r3, #0
20002240:	d104      	bne.n	2000224c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002242:	4b37      	ldr	r3, [pc, #220]	; (20002320 <xTaskIncrementTick+0x15c>)
20002244:	f04f 32ff 	mov.w	r2, #4294967295
20002248:	601a      	str	r2, [r3, #0]
					break;
2000224a:	e03f      	b.n	200022cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
2000224c:	4b31      	ldr	r3, [pc, #196]	; (20002314 <xTaskIncrementTick+0x150>)
2000224e:	681b      	ldr	r3, [r3, #0]
20002250:	68db      	ldr	r3, [r3, #12]
20002252:	68db      	ldr	r3, [r3, #12]
20002254:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
20002256:	68bb      	ldr	r3, [r7, #8]
20002258:	685b      	ldr	r3, [r3, #4]
2000225a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
2000225c:	693a      	ldr	r2, [r7, #16]
2000225e:	687b      	ldr	r3, [r7, #4]
20002260:	429a      	cmp	r2, r3
20002262:	d203      	bcs.n	2000226c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
20002264:	4a2e      	ldr	r2, [pc, #184]	; (20002320 <xTaskIncrementTick+0x15c>)
20002266:	687b      	ldr	r3, [r7, #4]
20002268:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
2000226a:	e02f      	b.n	200022cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2000226c:	68bb      	ldr	r3, [r7, #8]
2000226e:	3304      	adds	r3, #4
20002270:	4618      	mov	r0, r3
20002272:	f7fe fe87 	bl	20000f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002276:	68bb      	ldr	r3, [r7, #8]
20002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000227a:	2b00      	cmp	r3, #0
2000227c:	d004      	beq.n	20002288 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2000227e:	68bb      	ldr	r3, [r7, #8]
20002280:	3318      	adds	r3, #24
20002282:	4618      	mov	r0, r3
20002284:	f7fe fe7e 	bl	20000f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002288:	68bb      	ldr	r3, [r7, #8]
2000228a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000228c:	4b25      	ldr	r3, [pc, #148]	; (20002324 <xTaskIncrementTick+0x160>)
2000228e:	681b      	ldr	r3, [r3, #0]
20002290:	429a      	cmp	r2, r3
20002292:	d903      	bls.n	2000229c <xTaskIncrementTick+0xd8>
20002294:	68bb      	ldr	r3, [r7, #8]
20002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002298:	4a22      	ldr	r2, [pc, #136]	; (20002324 <xTaskIncrementTick+0x160>)
2000229a:	6013      	str	r3, [r2, #0]
2000229c:	68bb      	ldr	r3, [r7, #8]
2000229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022a0:	4613      	mov	r3, r2
200022a2:	009b      	lsls	r3, r3, #2
200022a4:	4413      	add	r3, r2
200022a6:	009b      	lsls	r3, r3, #2
200022a8:	4a1f      	ldr	r2, [pc, #124]	; (20002328 <xTaskIncrementTick+0x164>)
200022aa:	441a      	add	r2, r3
200022ac:	68bb      	ldr	r3, [r7, #8]
200022ae:	3304      	adds	r3, #4
200022b0:	4619      	mov	r1, r3
200022b2:	4610      	mov	r0, r2
200022b4:	f7fe fe09 	bl	20000eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
200022b8:	68bb      	ldr	r3, [r7, #8]
200022ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022bc:	4b1b      	ldr	r3, [pc, #108]	; (2000232c <xTaskIncrementTick+0x168>)
200022be:	681b      	ldr	r3, [r3, #0]
200022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200022c2:	429a      	cmp	r2, r3
200022c4:	d3b8      	bcc.n	20002238 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
200022c6:	2301      	movs	r3, #1
200022c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
200022ca:	e7b5      	b.n	20002238 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
200022cc:	4b17      	ldr	r3, [pc, #92]	; (2000232c <xTaskIncrementTick+0x168>)
200022ce:	681b      	ldr	r3, [r3, #0]
200022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022d2:	4915      	ldr	r1, [pc, #84]	; (20002328 <xTaskIncrementTick+0x164>)
200022d4:	4613      	mov	r3, r2
200022d6:	009b      	lsls	r3, r3, #2
200022d8:	4413      	add	r3, r2
200022da:	009b      	lsls	r3, r3, #2
200022dc:	440b      	add	r3, r1
200022de:	681b      	ldr	r3, [r3, #0]
200022e0:	2b01      	cmp	r3, #1
200022e2:	d901      	bls.n	200022e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
200022e4:	2301      	movs	r3, #1
200022e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
200022e8:	4b11      	ldr	r3, [pc, #68]	; (20002330 <xTaskIncrementTick+0x16c>)
200022ea:	681b      	ldr	r3, [r3, #0]
200022ec:	2b00      	cmp	r3, #0
200022ee:	d007      	beq.n	20002300 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
200022f0:	2301      	movs	r3, #1
200022f2:	617b      	str	r3, [r7, #20]
200022f4:	e004      	b.n	20002300 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
200022f6:	4b0f      	ldr	r3, [pc, #60]	; (20002334 <xTaskIncrementTick+0x170>)
200022f8:	681b      	ldr	r3, [r3, #0]
200022fa:	3301      	adds	r3, #1
200022fc:	4a0d      	ldr	r2, [pc, #52]	; (20002334 <xTaskIncrementTick+0x170>)
200022fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
20002300:	697b      	ldr	r3, [r7, #20]
}
20002302:	4618      	mov	r0, r3
20002304:	3718      	adds	r7, #24
20002306:	46bd      	mov	sp, r7
20002308:	bd80      	pop	{r7, pc}
2000230a:	bf00      	nop
2000230c:	2000a948 	.word	0x2000a948
20002310:	2000a924 	.word	0x2000a924
20002314:	2000a8d8 	.word	0x2000a8d8
20002318:	2000a8dc 	.word	0x2000a8dc
2000231c:	2000a938 	.word	0x2000a938
20002320:	2000a940 	.word	0x2000a940
20002324:	2000a928 	.word	0x2000a928
20002328:	2000a450 	.word	0x2000a450
2000232c:	2000a44c 	.word	0x2000a44c
20002330:	2000a934 	.word	0x2000a934
20002334:	2000a930 	.word	0x2000a930

20002338 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
20002338:	b480      	push	{r7}
2000233a:	b085      	sub	sp, #20
2000233c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2000233e:	4b2a      	ldr	r3, [pc, #168]	; (200023e8 <vTaskSwitchContext+0xb0>)
20002340:	681b      	ldr	r3, [r3, #0]
20002342:	2b00      	cmp	r3, #0
20002344:	d003      	beq.n	2000234e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
20002346:	4b29      	ldr	r3, [pc, #164]	; (200023ec <vTaskSwitchContext+0xb4>)
20002348:	2201      	movs	r2, #1
2000234a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
2000234c:	e046      	b.n	200023dc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
2000234e:	4b27      	ldr	r3, [pc, #156]	; (200023ec <vTaskSwitchContext+0xb4>)
20002350:	2200      	movs	r2, #0
20002352:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002354:	4b26      	ldr	r3, [pc, #152]	; (200023f0 <vTaskSwitchContext+0xb8>)
20002356:	681b      	ldr	r3, [r3, #0]
20002358:	60fb      	str	r3, [r7, #12]
2000235a:	e010      	b.n	2000237e <vTaskSwitchContext+0x46>
2000235c:	68fb      	ldr	r3, [r7, #12]
2000235e:	2b00      	cmp	r3, #0
20002360:	d10a      	bne.n	20002378 <vTaskSwitchContext+0x40>
	__asm volatile
20002362:	f04f 0350 	mov.w	r3, #80	; 0x50
20002366:	f383 8811 	msr	BASEPRI, r3
2000236a:	f3bf 8f6f 	isb	sy
2000236e:	f3bf 8f4f 	dsb	sy
20002372:	607b      	str	r3, [r7, #4]
}
20002374:	bf00      	nop
20002376:	e7fe      	b.n	20002376 <vTaskSwitchContext+0x3e>
20002378:	68fb      	ldr	r3, [r7, #12]
2000237a:	3b01      	subs	r3, #1
2000237c:	60fb      	str	r3, [r7, #12]
2000237e:	491d      	ldr	r1, [pc, #116]	; (200023f4 <vTaskSwitchContext+0xbc>)
20002380:	68fa      	ldr	r2, [r7, #12]
20002382:	4613      	mov	r3, r2
20002384:	009b      	lsls	r3, r3, #2
20002386:	4413      	add	r3, r2
20002388:	009b      	lsls	r3, r3, #2
2000238a:	440b      	add	r3, r1
2000238c:	681b      	ldr	r3, [r3, #0]
2000238e:	2b00      	cmp	r3, #0
20002390:	d0e4      	beq.n	2000235c <vTaskSwitchContext+0x24>
20002392:	68fa      	ldr	r2, [r7, #12]
20002394:	4613      	mov	r3, r2
20002396:	009b      	lsls	r3, r3, #2
20002398:	4413      	add	r3, r2
2000239a:	009b      	lsls	r3, r3, #2
2000239c:	4a15      	ldr	r2, [pc, #84]	; (200023f4 <vTaskSwitchContext+0xbc>)
2000239e:	4413      	add	r3, r2
200023a0:	60bb      	str	r3, [r7, #8]
200023a2:	68bb      	ldr	r3, [r7, #8]
200023a4:	685b      	ldr	r3, [r3, #4]
200023a6:	685a      	ldr	r2, [r3, #4]
200023a8:	68bb      	ldr	r3, [r7, #8]
200023aa:	605a      	str	r2, [r3, #4]
200023ac:	68bb      	ldr	r3, [r7, #8]
200023ae:	685a      	ldr	r2, [r3, #4]
200023b0:	68bb      	ldr	r3, [r7, #8]
200023b2:	3308      	adds	r3, #8
200023b4:	429a      	cmp	r2, r3
200023b6:	d104      	bne.n	200023c2 <vTaskSwitchContext+0x8a>
200023b8:	68bb      	ldr	r3, [r7, #8]
200023ba:	685b      	ldr	r3, [r3, #4]
200023bc:	685a      	ldr	r2, [r3, #4]
200023be:	68bb      	ldr	r3, [r7, #8]
200023c0:	605a      	str	r2, [r3, #4]
200023c2:	68bb      	ldr	r3, [r7, #8]
200023c4:	685b      	ldr	r3, [r3, #4]
200023c6:	68db      	ldr	r3, [r3, #12]
200023c8:	4a0b      	ldr	r2, [pc, #44]	; (200023f8 <vTaskSwitchContext+0xc0>)
200023ca:	6013      	str	r3, [r2, #0]
200023cc:	4a08      	ldr	r2, [pc, #32]	; (200023f0 <vTaskSwitchContext+0xb8>)
200023ce:	68fb      	ldr	r3, [r7, #12]
200023d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
200023d2:	4b09      	ldr	r3, [pc, #36]	; (200023f8 <vTaskSwitchContext+0xc0>)
200023d4:	681b      	ldr	r3, [r3, #0]
200023d6:	3354      	adds	r3, #84	; 0x54
200023d8:	4a08      	ldr	r2, [pc, #32]	; (200023fc <vTaskSwitchContext+0xc4>)
200023da:	6013      	str	r3, [r2, #0]
}
200023dc:	bf00      	nop
200023de:	3714      	adds	r7, #20
200023e0:	46bd      	mov	sp, r7
200023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200023e6:	4770      	bx	lr
200023e8:	2000a948 	.word	0x2000a948
200023ec:	2000a934 	.word	0x2000a934
200023f0:	2000a928 	.word	0x2000a928
200023f4:	2000a450 	.word	0x2000a450
200023f8:	2000a44c 	.word	0x2000a44c
200023fc:	20009c10 	.word	0x20009c10

20002400 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
20002400:	b580      	push	{r7, lr}
20002402:	b084      	sub	sp, #16
20002404:	af00      	add	r7, sp, #0
20002406:	6078      	str	r0, [r7, #4]
20002408:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
2000240a:	687b      	ldr	r3, [r7, #4]
2000240c:	2b00      	cmp	r3, #0
2000240e:	d10a      	bne.n	20002426 <vTaskPlaceOnEventList+0x26>
	__asm volatile
20002410:	f04f 0350 	mov.w	r3, #80	; 0x50
20002414:	f383 8811 	msr	BASEPRI, r3
20002418:	f3bf 8f6f 	isb	sy
2000241c:	f3bf 8f4f 	dsb	sy
20002420:	60fb      	str	r3, [r7, #12]
}
20002422:	bf00      	nop
20002424:	e7fe      	b.n	20002424 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002426:	4b07      	ldr	r3, [pc, #28]	; (20002444 <vTaskPlaceOnEventList+0x44>)
20002428:	681b      	ldr	r3, [r3, #0]
2000242a:	3318      	adds	r3, #24
2000242c:	4619      	mov	r1, r3
2000242e:	6878      	ldr	r0, [r7, #4]
20002430:	f7fe fd6f 	bl	20000f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
20002434:	2101      	movs	r1, #1
20002436:	6838      	ldr	r0, [r7, #0]
20002438:	f000 fa80 	bl	2000293c <prvAddCurrentTaskToDelayedList>
}
2000243c:	bf00      	nop
2000243e:	3710      	adds	r7, #16
20002440:	46bd      	mov	sp, r7
20002442:	bd80      	pop	{r7, pc}
20002444:	2000a44c 	.word	0x2000a44c

20002448 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
20002448:	b580      	push	{r7, lr}
2000244a:	b086      	sub	sp, #24
2000244c:	af00      	add	r7, sp, #0
2000244e:	60f8      	str	r0, [r7, #12]
20002450:	60b9      	str	r1, [r7, #8]
20002452:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
20002454:	68fb      	ldr	r3, [r7, #12]
20002456:	2b00      	cmp	r3, #0
20002458:	d10a      	bne.n	20002470 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
2000245a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000245e:	f383 8811 	msr	BASEPRI, r3
20002462:	f3bf 8f6f 	isb	sy
20002466:	f3bf 8f4f 	dsb	sy
2000246a:	617b      	str	r3, [r7, #20]
}
2000246c:	bf00      	nop
2000246e:	e7fe      	b.n	2000246e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
20002470:	4b0a      	ldr	r3, [pc, #40]	; (2000249c <vTaskPlaceOnEventListRestricted+0x54>)
20002472:	681b      	ldr	r3, [r3, #0]
20002474:	3318      	adds	r3, #24
20002476:	4619      	mov	r1, r3
20002478:	68f8      	ldr	r0, [r7, #12]
2000247a:	f7fe fd26 	bl	20000eca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
2000247e:	687b      	ldr	r3, [r7, #4]
20002480:	2b00      	cmp	r3, #0
20002482:	d002      	beq.n	2000248a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
20002484:	f04f 33ff 	mov.w	r3, #4294967295
20002488:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2000248a:	6879      	ldr	r1, [r7, #4]
2000248c:	68b8      	ldr	r0, [r7, #8]
2000248e:	f000 fa55 	bl	2000293c <prvAddCurrentTaskToDelayedList>
	}
20002492:	bf00      	nop
20002494:	3718      	adds	r7, #24
20002496:	46bd      	mov	sp, r7
20002498:	bd80      	pop	{r7, pc}
2000249a:	bf00      	nop
2000249c:	2000a44c 	.word	0x2000a44c

200024a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
200024a0:	b580      	push	{r7, lr}
200024a2:	b086      	sub	sp, #24
200024a4:	af00      	add	r7, sp, #0
200024a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200024a8:	687b      	ldr	r3, [r7, #4]
200024aa:	68db      	ldr	r3, [r3, #12]
200024ac:	68db      	ldr	r3, [r3, #12]
200024ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
200024b0:	693b      	ldr	r3, [r7, #16]
200024b2:	2b00      	cmp	r3, #0
200024b4:	d10a      	bne.n	200024cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
200024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
200024ba:	f383 8811 	msr	BASEPRI, r3
200024be:	f3bf 8f6f 	isb	sy
200024c2:	f3bf 8f4f 	dsb	sy
200024c6:	60fb      	str	r3, [r7, #12]
}
200024c8:	bf00      	nop
200024ca:	e7fe      	b.n	200024ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
200024cc:	693b      	ldr	r3, [r7, #16]
200024ce:	3318      	adds	r3, #24
200024d0:	4618      	mov	r0, r3
200024d2:	f7fe fd57 	bl	20000f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
200024d6:	4b1e      	ldr	r3, [pc, #120]	; (20002550 <xTaskRemoveFromEventList+0xb0>)
200024d8:	681b      	ldr	r3, [r3, #0]
200024da:	2b00      	cmp	r3, #0
200024dc:	d11d      	bne.n	2000251a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
200024de:	693b      	ldr	r3, [r7, #16]
200024e0:	3304      	adds	r3, #4
200024e2:	4618      	mov	r0, r3
200024e4:	f7fe fd4e 	bl	20000f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
200024e8:	693b      	ldr	r3, [r7, #16]
200024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200024ec:	4b19      	ldr	r3, [pc, #100]	; (20002554 <xTaskRemoveFromEventList+0xb4>)
200024ee:	681b      	ldr	r3, [r3, #0]
200024f0:	429a      	cmp	r2, r3
200024f2:	d903      	bls.n	200024fc <xTaskRemoveFromEventList+0x5c>
200024f4:	693b      	ldr	r3, [r7, #16]
200024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200024f8:	4a16      	ldr	r2, [pc, #88]	; (20002554 <xTaskRemoveFromEventList+0xb4>)
200024fa:	6013      	str	r3, [r2, #0]
200024fc:	693b      	ldr	r3, [r7, #16]
200024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002500:	4613      	mov	r3, r2
20002502:	009b      	lsls	r3, r3, #2
20002504:	4413      	add	r3, r2
20002506:	009b      	lsls	r3, r3, #2
20002508:	4a13      	ldr	r2, [pc, #76]	; (20002558 <xTaskRemoveFromEventList+0xb8>)
2000250a:	441a      	add	r2, r3
2000250c:	693b      	ldr	r3, [r7, #16]
2000250e:	3304      	adds	r3, #4
20002510:	4619      	mov	r1, r3
20002512:	4610      	mov	r0, r2
20002514:	f7fe fcd9 	bl	20000eca <vListInsertEnd>
20002518:	e005      	b.n	20002526 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2000251a:	693b      	ldr	r3, [r7, #16]
2000251c:	3318      	adds	r3, #24
2000251e:	4619      	mov	r1, r3
20002520:	480e      	ldr	r0, [pc, #56]	; (2000255c <xTaskRemoveFromEventList+0xbc>)
20002522:	f7fe fcd2 	bl	20000eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002526:	693b      	ldr	r3, [r7, #16]
20002528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000252a:	4b0d      	ldr	r3, [pc, #52]	; (20002560 <xTaskRemoveFromEventList+0xc0>)
2000252c:	681b      	ldr	r3, [r3, #0]
2000252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002530:	429a      	cmp	r2, r3
20002532:	d905      	bls.n	20002540 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002534:	2301      	movs	r3, #1
20002536:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002538:	4b0a      	ldr	r3, [pc, #40]	; (20002564 <xTaskRemoveFromEventList+0xc4>)
2000253a:	2201      	movs	r2, #1
2000253c:	601a      	str	r2, [r3, #0]
2000253e:	e001      	b.n	20002544 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
20002540:	2300      	movs	r3, #0
20002542:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
20002544:	697b      	ldr	r3, [r7, #20]
}
20002546:	4618      	mov	r0, r3
20002548:	3718      	adds	r7, #24
2000254a:	46bd      	mov	sp, r7
2000254c:	bd80      	pop	{r7, pc}
2000254e:	bf00      	nop
20002550:	2000a948 	.word	0x2000a948
20002554:	2000a928 	.word	0x2000a928
20002558:	2000a450 	.word	0x2000a450
2000255c:	2000a8e0 	.word	0x2000a8e0
20002560:	2000a44c 	.word	0x2000a44c
20002564:	2000a934 	.word	0x2000a934

20002568 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002568:	b480      	push	{r7}
2000256a:	b083      	sub	sp, #12
2000256c:	af00      	add	r7, sp, #0
2000256e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002570:	4b06      	ldr	r3, [pc, #24]	; (2000258c <vTaskInternalSetTimeOutState+0x24>)
20002572:	681a      	ldr	r2, [r3, #0]
20002574:	687b      	ldr	r3, [r7, #4]
20002576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002578:	4b05      	ldr	r3, [pc, #20]	; (20002590 <vTaskInternalSetTimeOutState+0x28>)
2000257a:	681a      	ldr	r2, [r3, #0]
2000257c:	687b      	ldr	r3, [r7, #4]
2000257e:	605a      	str	r2, [r3, #4]
}
20002580:	bf00      	nop
20002582:	370c      	adds	r7, #12
20002584:	46bd      	mov	sp, r7
20002586:	f85d 7b04 	ldr.w	r7, [sp], #4
2000258a:	4770      	bx	lr
2000258c:	2000a938 	.word	0x2000a938
20002590:	2000a924 	.word	0x2000a924

20002594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002594:	b580      	push	{r7, lr}
20002596:	b088      	sub	sp, #32
20002598:	af00      	add	r7, sp, #0
2000259a:	6078      	str	r0, [r7, #4]
2000259c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
2000259e:	687b      	ldr	r3, [r7, #4]
200025a0:	2b00      	cmp	r3, #0
200025a2:	d10a      	bne.n	200025ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
200025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
200025a8:	f383 8811 	msr	BASEPRI, r3
200025ac:	f3bf 8f6f 	isb	sy
200025b0:	f3bf 8f4f 	dsb	sy
200025b4:	613b      	str	r3, [r7, #16]
}
200025b6:	bf00      	nop
200025b8:	e7fe      	b.n	200025b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
200025ba:	683b      	ldr	r3, [r7, #0]
200025bc:	2b00      	cmp	r3, #0
200025be:	d10a      	bne.n	200025d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
200025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
200025c4:	f383 8811 	msr	BASEPRI, r3
200025c8:	f3bf 8f6f 	isb	sy
200025cc:	f3bf 8f4f 	dsb	sy
200025d0:	60fb      	str	r3, [r7, #12]
}
200025d2:	bf00      	nop
200025d4:	e7fe      	b.n	200025d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
200025d6:	f000 fe7d 	bl	200032d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
200025da:	4b1d      	ldr	r3, [pc, #116]	; (20002650 <xTaskCheckForTimeOut+0xbc>)
200025dc:	681b      	ldr	r3, [r3, #0]
200025de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
200025e0:	687b      	ldr	r3, [r7, #4]
200025e2:	685b      	ldr	r3, [r3, #4]
200025e4:	69ba      	ldr	r2, [r7, #24]
200025e6:	1ad3      	subs	r3, r2, r3
200025e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
200025ea:	683b      	ldr	r3, [r7, #0]
200025ec:	681b      	ldr	r3, [r3, #0]
200025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
200025f2:	d102      	bne.n	200025fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
200025f4:	2300      	movs	r3, #0
200025f6:	61fb      	str	r3, [r7, #28]
200025f8:	e023      	b.n	20002642 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
200025fa:	687b      	ldr	r3, [r7, #4]
200025fc:	681a      	ldr	r2, [r3, #0]
200025fe:	4b15      	ldr	r3, [pc, #84]	; (20002654 <xTaskCheckForTimeOut+0xc0>)
20002600:	681b      	ldr	r3, [r3, #0]
20002602:	429a      	cmp	r2, r3
20002604:	d007      	beq.n	20002616 <xTaskCheckForTimeOut+0x82>
20002606:	687b      	ldr	r3, [r7, #4]
20002608:	685b      	ldr	r3, [r3, #4]
2000260a:	69ba      	ldr	r2, [r7, #24]
2000260c:	429a      	cmp	r2, r3
2000260e:	d302      	bcc.n	20002616 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002610:	2301      	movs	r3, #1
20002612:	61fb      	str	r3, [r7, #28]
20002614:	e015      	b.n	20002642 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002616:	683b      	ldr	r3, [r7, #0]
20002618:	681b      	ldr	r3, [r3, #0]
2000261a:	697a      	ldr	r2, [r7, #20]
2000261c:	429a      	cmp	r2, r3
2000261e:	d20b      	bcs.n	20002638 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
20002620:	683b      	ldr	r3, [r7, #0]
20002622:	681a      	ldr	r2, [r3, #0]
20002624:	697b      	ldr	r3, [r7, #20]
20002626:	1ad2      	subs	r2, r2, r3
20002628:	683b      	ldr	r3, [r7, #0]
2000262a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
2000262c:	6878      	ldr	r0, [r7, #4]
2000262e:	f7ff ff9b 	bl	20002568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
20002632:	2300      	movs	r3, #0
20002634:	61fb      	str	r3, [r7, #28]
20002636:	e004      	b.n	20002642 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
20002638:	683b      	ldr	r3, [r7, #0]
2000263a:	2200      	movs	r2, #0
2000263c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
2000263e:	2301      	movs	r3, #1
20002640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
20002642:	f000 fe77 	bl	20003334 <vPortExitCritical>

	return xReturn;
20002646:	69fb      	ldr	r3, [r7, #28]
}
20002648:	4618      	mov	r0, r3
2000264a:	3720      	adds	r7, #32
2000264c:	46bd      	mov	sp, r7
2000264e:	bd80      	pop	{r7, pc}
20002650:	2000a924 	.word	0x2000a924
20002654:	2000a938 	.word	0x2000a938

20002658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002658:	b480      	push	{r7}
2000265a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
2000265c:	4b03      	ldr	r3, [pc, #12]	; (2000266c <vTaskMissedYield+0x14>)
2000265e:	2201      	movs	r2, #1
20002660:	601a      	str	r2, [r3, #0]
}
20002662:	bf00      	nop
20002664:	46bd      	mov	sp, r7
20002666:	f85d 7b04 	ldr.w	r7, [sp], #4
2000266a:	4770      	bx	lr
2000266c:	2000a934 	.word	0x2000a934

20002670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002670:	b580      	push	{r7, lr}
20002672:	b082      	sub	sp, #8
20002674:	af00      	add	r7, sp, #0
20002676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002678:	f000 f852 	bl	20002720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
2000267c:	4b06      	ldr	r3, [pc, #24]	; (20002698 <prvIdleTask+0x28>)
2000267e:	681b      	ldr	r3, [r3, #0]
20002680:	2b01      	cmp	r3, #1
20002682:	d9f9      	bls.n	20002678 <prvIdleTask+0x8>
			{
				taskYIELD();
20002684:	4b05      	ldr	r3, [pc, #20]	; (2000269c <prvIdleTask+0x2c>)
20002686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000268a:	601a      	str	r2, [r3, #0]
2000268c:	f3bf 8f4f 	dsb	sy
20002690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
20002694:	e7f0      	b.n	20002678 <prvIdleTask+0x8>
20002696:	bf00      	nop
20002698:	2000a450 	.word	0x2000a450
2000269c:	e000ed04 	.word	0xe000ed04

200026a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
200026a0:	b580      	push	{r7, lr}
200026a2:	b082      	sub	sp, #8
200026a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
200026a6:	2300      	movs	r3, #0
200026a8:	607b      	str	r3, [r7, #4]
200026aa:	e00c      	b.n	200026c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
200026ac:	687a      	ldr	r2, [r7, #4]
200026ae:	4613      	mov	r3, r2
200026b0:	009b      	lsls	r3, r3, #2
200026b2:	4413      	add	r3, r2
200026b4:	009b      	lsls	r3, r3, #2
200026b6:	4a12      	ldr	r2, [pc, #72]	; (20002700 <prvInitialiseTaskLists+0x60>)
200026b8:	4413      	add	r3, r2
200026ba:	4618      	mov	r0, r3
200026bc:	f7fe fbd8 	bl	20000e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
200026c0:	687b      	ldr	r3, [r7, #4]
200026c2:	3301      	adds	r3, #1
200026c4:	607b      	str	r3, [r7, #4]
200026c6:	687b      	ldr	r3, [r7, #4]
200026c8:	2b37      	cmp	r3, #55	; 0x37
200026ca:	d9ef      	bls.n	200026ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
200026cc:	480d      	ldr	r0, [pc, #52]	; (20002704 <prvInitialiseTaskLists+0x64>)
200026ce:	f7fe fbcf 	bl	20000e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
200026d2:	480d      	ldr	r0, [pc, #52]	; (20002708 <prvInitialiseTaskLists+0x68>)
200026d4:	f7fe fbcc 	bl	20000e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
200026d8:	480c      	ldr	r0, [pc, #48]	; (2000270c <prvInitialiseTaskLists+0x6c>)
200026da:	f7fe fbc9 	bl	20000e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
200026de:	480c      	ldr	r0, [pc, #48]	; (20002710 <prvInitialiseTaskLists+0x70>)
200026e0:	f7fe fbc6 	bl	20000e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
200026e4:	480b      	ldr	r0, [pc, #44]	; (20002714 <prvInitialiseTaskLists+0x74>)
200026e6:	f7fe fbc3 	bl	20000e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
200026ea:	4b0b      	ldr	r3, [pc, #44]	; (20002718 <prvInitialiseTaskLists+0x78>)
200026ec:	4a05      	ldr	r2, [pc, #20]	; (20002704 <prvInitialiseTaskLists+0x64>)
200026ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
200026f0:	4b0a      	ldr	r3, [pc, #40]	; (2000271c <prvInitialiseTaskLists+0x7c>)
200026f2:	4a05      	ldr	r2, [pc, #20]	; (20002708 <prvInitialiseTaskLists+0x68>)
200026f4:	601a      	str	r2, [r3, #0]
}
200026f6:	bf00      	nop
200026f8:	3708      	adds	r7, #8
200026fa:	46bd      	mov	sp, r7
200026fc:	bd80      	pop	{r7, pc}
200026fe:	bf00      	nop
20002700:	2000a450 	.word	0x2000a450
20002704:	2000a8b0 	.word	0x2000a8b0
20002708:	2000a8c4 	.word	0x2000a8c4
2000270c:	2000a8e0 	.word	0x2000a8e0
20002710:	2000a8f4 	.word	0x2000a8f4
20002714:	2000a90c 	.word	0x2000a90c
20002718:	2000a8d8 	.word	0x2000a8d8
2000271c:	2000a8dc 	.word	0x2000a8dc

20002720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002720:	b580      	push	{r7, lr}
20002722:	b082      	sub	sp, #8
20002724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002726:	e019      	b.n	2000275c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
20002728:	f000 fdd4 	bl	200032d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
2000272c:	4b10      	ldr	r3, [pc, #64]	; (20002770 <prvCheckTasksWaitingTermination+0x50>)
2000272e:	68db      	ldr	r3, [r3, #12]
20002730:	68db      	ldr	r3, [r3, #12]
20002732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002734:	687b      	ldr	r3, [r7, #4]
20002736:	3304      	adds	r3, #4
20002738:	4618      	mov	r0, r3
2000273a:	f7fe fc23 	bl	20000f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
2000273e:	4b0d      	ldr	r3, [pc, #52]	; (20002774 <prvCheckTasksWaitingTermination+0x54>)
20002740:	681b      	ldr	r3, [r3, #0]
20002742:	3b01      	subs	r3, #1
20002744:	4a0b      	ldr	r2, [pc, #44]	; (20002774 <prvCheckTasksWaitingTermination+0x54>)
20002746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
20002748:	4b0b      	ldr	r3, [pc, #44]	; (20002778 <prvCheckTasksWaitingTermination+0x58>)
2000274a:	681b      	ldr	r3, [r3, #0]
2000274c:	3b01      	subs	r3, #1
2000274e:	4a0a      	ldr	r2, [pc, #40]	; (20002778 <prvCheckTasksWaitingTermination+0x58>)
20002750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
20002752:	f000 fdef 	bl	20003334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
20002756:	6878      	ldr	r0, [r7, #4]
20002758:	f000 f810 	bl	2000277c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
2000275c:	4b06      	ldr	r3, [pc, #24]	; (20002778 <prvCheckTasksWaitingTermination+0x58>)
2000275e:	681b      	ldr	r3, [r3, #0]
20002760:	2b00      	cmp	r3, #0
20002762:	d1e1      	bne.n	20002728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002764:	bf00      	nop
20002766:	bf00      	nop
20002768:	3708      	adds	r7, #8
2000276a:	46bd      	mov	sp, r7
2000276c:	bd80      	pop	{r7, pc}
2000276e:	bf00      	nop
20002770:	2000a8f4 	.word	0x2000a8f4
20002774:	2000a920 	.word	0x2000a920
20002778:	2000a908 	.word	0x2000a908

2000277c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
2000277c:	b580      	push	{r7, lr}
2000277e:	b084      	sub	sp, #16
20002780:	af00      	add	r7, sp, #0
20002782:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
20002784:	687b      	ldr	r3, [r7, #4]
20002786:	3354      	adds	r3, #84	; 0x54
20002788:	4618      	mov	r0, r3
2000278a:	f003 fa3b 	bl	20005c04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
2000278e:	687b      	ldr	r3, [r7, #4]
20002790:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002794:	2b00      	cmp	r3, #0
20002796:	d108      	bne.n	200027aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
20002798:	687b      	ldr	r3, [r7, #4]
2000279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000279c:	4618      	mov	r0, r3
2000279e:	f000 ff87 	bl	200036b0 <vPortFree>
				vPortFree( pxTCB );
200027a2:	6878      	ldr	r0, [r7, #4]
200027a4:	f000 ff84 	bl	200036b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
200027a8:	e018      	b.n	200027dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
200027aa:	687b      	ldr	r3, [r7, #4]
200027ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
200027b0:	2b01      	cmp	r3, #1
200027b2:	d103      	bne.n	200027bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
200027b4:	6878      	ldr	r0, [r7, #4]
200027b6:	f000 ff7b 	bl	200036b0 <vPortFree>
	}
200027ba:	e00f      	b.n	200027dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
200027bc:	687b      	ldr	r3, [r7, #4]
200027be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
200027c2:	2b02      	cmp	r3, #2
200027c4:	d00a      	beq.n	200027dc <prvDeleteTCB+0x60>
	__asm volatile
200027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
200027ca:	f383 8811 	msr	BASEPRI, r3
200027ce:	f3bf 8f6f 	isb	sy
200027d2:	f3bf 8f4f 	dsb	sy
200027d6:	60fb      	str	r3, [r7, #12]
}
200027d8:	bf00      	nop
200027da:	e7fe      	b.n	200027da <prvDeleteTCB+0x5e>
	}
200027dc:	bf00      	nop
200027de:	3710      	adds	r7, #16
200027e0:	46bd      	mov	sp, r7
200027e2:	bd80      	pop	{r7, pc}

200027e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
200027e4:	b480      	push	{r7}
200027e6:	b083      	sub	sp, #12
200027e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
200027ea:	4b0c      	ldr	r3, [pc, #48]	; (2000281c <prvResetNextTaskUnblockTime+0x38>)
200027ec:	681b      	ldr	r3, [r3, #0]
200027ee:	681b      	ldr	r3, [r3, #0]
200027f0:	2b00      	cmp	r3, #0
200027f2:	d104      	bne.n	200027fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
200027f4:	4b0a      	ldr	r3, [pc, #40]	; (20002820 <prvResetNextTaskUnblockTime+0x3c>)
200027f6:	f04f 32ff 	mov.w	r2, #4294967295
200027fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
200027fc:	e008      	b.n	20002810 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200027fe:	4b07      	ldr	r3, [pc, #28]	; (2000281c <prvResetNextTaskUnblockTime+0x38>)
20002800:	681b      	ldr	r3, [r3, #0]
20002802:	68db      	ldr	r3, [r3, #12]
20002804:	68db      	ldr	r3, [r3, #12]
20002806:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20002808:	687b      	ldr	r3, [r7, #4]
2000280a:	685b      	ldr	r3, [r3, #4]
2000280c:	4a04      	ldr	r2, [pc, #16]	; (20002820 <prvResetNextTaskUnblockTime+0x3c>)
2000280e:	6013      	str	r3, [r2, #0]
}
20002810:	bf00      	nop
20002812:	370c      	adds	r7, #12
20002814:	46bd      	mov	sp, r7
20002816:	f85d 7b04 	ldr.w	r7, [sp], #4
2000281a:	4770      	bx	lr
2000281c:	2000a8d8 	.word	0x2000a8d8
20002820:	2000a940 	.word	0x2000a940

20002824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20002824:	b480      	push	{r7}
20002826:	b083      	sub	sp, #12
20002828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
2000282a:	4b0b      	ldr	r3, [pc, #44]	; (20002858 <xTaskGetSchedulerState+0x34>)
2000282c:	681b      	ldr	r3, [r3, #0]
2000282e:	2b00      	cmp	r3, #0
20002830:	d102      	bne.n	20002838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20002832:	2301      	movs	r3, #1
20002834:	607b      	str	r3, [r7, #4]
20002836:	e008      	b.n	2000284a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002838:	4b08      	ldr	r3, [pc, #32]	; (2000285c <xTaskGetSchedulerState+0x38>)
2000283a:	681b      	ldr	r3, [r3, #0]
2000283c:	2b00      	cmp	r3, #0
2000283e:	d102      	bne.n	20002846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002840:	2302      	movs	r3, #2
20002842:	607b      	str	r3, [r7, #4]
20002844:	e001      	b.n	2000284a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002846:	2300      	movs	r3, #0
20002848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
2000284a:	687b      	ldr	r3, [r7, #4]
	}
2000284c:	4618      	mov	r0, r3
2000284e:	370c      	adds	r7, #12
20002850:	46bd      	mov	sp, r7
20002852:	f85d 7b04 	ldr.w	r7, [sp], #4
20002856:	4770      	bx	lr
20002858:	2000a92c 	.word	0x2000a92c
2000285c:	2000a948 	.word	0x2000a948

20002860 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20002860:	b580      	push	{r7, lr}
20002862:	b086      	sub	sp, #24
20002864:	af00      	add	r7, sp, #0
20002866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
20002868:	687b      	ldr	r3, [r7, #4]
2000286a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
2000286c:	2300      	movs	r3, #0
2000286e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20002870:	687b      	ldr	r3, [r7, #4]
20002872:	2b00      	cmp	r3, #0
20002874:	d056      	beq.n	20002924 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20002876:	4b2e      	ldr	r3, [pc, #184]	; (20002930 <xTaskPriorityDisinherit+0xd0>)
20002878:	681b      	ldr	r3, [r3, #0]
2000287a:	693a      	ldr	r2, [r7, #16]
2000287c:	429a      	cmp	r2, r3
2000287e:	d00a      	beq.n	20002896 <xTaskPriorityDisinherit+0x36>
	__asm volatile
20002880:	f04f 0350 	mov.w	r3, #80	; 0x50
20002884:	f383 8811 	msr	BASEPRI, r3
20002888:	f3bf 8f6f 	isb	sy
2000288c:	f3bf 8f4f 	dsb	sy
20002890:	60fb      	str	r3, [r7, #12]
}
20002892:	bf00      	nop
20002894:	e7fe      	b.n	20002894 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
20002896:	693b      	ldr	r3, [r7, #16]
20002898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2000289a:	2b00      	cmp	r3, #0
2000289c:	d10a      	bne.n	200028b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
2000289e:	f04f 0350 	mov.w	r3, #80	; 0x50
200028a2:	f383 8811 	msr	BASEPRI, r3
200028a6:	f3bf 8f6f 	isb	sy
200028aa:	f3bf 8f4f 	dsb	sy
200028ae:	60bb      	str	r3, [r7, #8]
}
200028b0:	bf00      	nop
200028b2:	e7fe      	b.n	200028b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
200028b4:	693b      	ldr	r3, [r7, #16]
200028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200028b8:	1e5a      	subs	r2, r3, #1
200028ba:	693b      	ldr	r3, [r7, #16]
200028bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
200028be:	693b      	ldr	r3, [r7, #16]
200028c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200028c2:	693b      	ldr	r3, [r7, #16]
200028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200028c6:	429a      	cmp	r2, r3
200028c8:	d02c      	beq.n	20002924 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
200028ca:	693b      	ldr	r3, [r7, #16]
200028cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200028ce:	2b00      	cmp	r3, #0
200028d0:	d128      	bne.n	20002924 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200028d2:	693b      	ldr	r3, [r7, #16]
200028d4:	3304      	adds	r3, #4
200028d6:	4618      	mov	r0, r3
200028d8:	f7fe fb54 	bl	20000f84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
200028dc:	693b      	ldr	r3, [r7, #16]
200028de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
200028e0:	693b      	ldr	r3, [r7, #16]
200028e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200028e4:	693b      	ldr	r3, [r7, #16]
200028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200028e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
200028ec:	693b      	ldr	r3, [r7, #16]
200028ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
200028f0:	693b      	ldr	r3, [r7, #16]
200028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200028f4:	4b0f      	ldr	r3, [pc, #60]	; (20002934 <xTaskPriorityDisinherit+0xd4>)
200028f6:	681b      	ldr	r3, [r3, #0]
200028f8:	429a      	cmp	r2, r3
200028fa:	d903      	bls.n	20002904 <xTaskPriorityDisinherit+0xa4>
200028fc:	693b      	ldr	r3, [r7, #16]
200028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002900:	4a0c      	ldr	r2, [pc, #48]	; (20002934 <xTaskPriorityDisinherit+0xd4>)
20002902:	6013      	str	r3, [r2, #0]
20002904:	693b      	ldr	r3, [r7, #16]
20002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002908:	4613      	mov	r3, r2
2000290a:	009b      	lsls	r3, r3, #2
2000290c:	4413      	add	r3, r2
2000290e:	009b      	lsls	r3, r3, #2
20002910:	4a09      	ldr	r2, [pc, #36]	; (20002938 <xTaskPriorityDisinherit+0xd8>)
20002912:	441a      	add	r2, r3
20002914:	693b      	ldr	r3, [r7, #16]
20002916:	3304      	adds	r3, #4
20002918:	4619      	mov	r1, r3
2000291a:	4610      	mov	r0, r2
2000291c:	f7fe fad5 	bl	20000eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20002920:	2301      	movs	r3, #1
20002922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002924:	697b      	ldr	r3, [r7, #20]
	}
20002926:	4618      	mov	r0, r3
20002928:	3718      	adds	r7, #24
2000292a:	46bd      	mov	sp, r7
2000292c:	bd80      	pop	{r7, pc}
2000292e:	bf00      	nop
20002930:	2000a44c 	.word	0x2000a44c
20002934:	2000a928 	.word	0x2000a928
20002938:	2000a450 	.word	0x2000a450

2000293c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
2000293c:	b580      	push	{r7, lr}
2000293e:	b084      	sub	sp, #16
20002940:	af00      	add	r7, sp, #0
20002942:	6078      	str	r0, [r7, #4]
20002944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
20002946:	4b21      	ldr	r3, [pc, #132]	; (200029cc <prvAddCurrentTaskToDelayedList+0x90>)
20002948:	681b      	ldr	r3, [r3, #0]
2000294a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000294c:	4b20      	ldr	r3, [pc, #128]	; (200029d0 <prvAddCurrentTaskToDelayedList+0x94>)
2000294e:	681b      	ldr	r3, [r3, #0]
20002950:	3304      	adds	r3, #4
20002952:	4618      	mov	r0, r3
20002954:	f7fe fb16 	bl	20000f84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
20002958:	687b      	ldr	r3, [r7, #4]
2000295a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000295e:	d10a      	bne.n	20002976 <prvAddCurrentTaskToDelayedList+0x3a>
20002960:	683b      	ldr	r3, [r7, #0]
20002962:	2b00      	cmp	r3, #0
20002964:	d007      	beq.n	20002976 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
20002966:	4b1a      	ldr	r3, [pc, #104]	; (200029d0 <prvAddCurrentTaskToDelayedList+0x94>)
20002968:	681b      	ldr	r3, [r3, #0]
2000296a:	3304      	adds	r3, #4
2000296c:	4619      	mov	r1, r3
2000296e:	4819      	ldr	r0, [pc, #100]	; (200029d4 <prvAddCurrentTaskToDelayedList+0x98>)
20002970:	f7fe faab 	bl	20000eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
20002974:	e026      	b.n	200029c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
20002976:	68fa      	ldr	r2, [r7, #12]
20002978:	687b      	ldr	r3, [r7, #4]
2000297a:	4413      	add	r3, r2
2000297c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
2000297e:	4b14      	ldr	r3, [pc, #80]	; (200029d0 <prvAddCurrentTaskToDelayedList+0x94>)
20002980:	681b      	ldr	r3, [r3, #0]
20002982:	68ba      	ldr	r2, [r7, #8]
20002984:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
20002986:	68ba      	ldr	r2, [r7, #8]
20002988:	68fb      	ldr	r3, [r7, #12]
2000298a:	429a      	cmp	r2, r3
2000298c:	d209      	bcs.n	200029a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000298e:	4b12      	ldr	r3, [pc, #72]	; (200029d8 <prvAddCurrentTaskToDelayedList+0x9c>)
20002990:	681a      	ldr	r2, [r3, #0]
20002992:	4b0f      	ldr	r3, [pc, #60]	; (200029d0 <prvAddCurrentTaskToDelayedList+0x94>)
20002994:	681b      	ldr	r3, [r3, #0]
20002996:	3304      	adds	r3, #4
20002998:	4619      	mov	r1, r3
2000299a:	4610      	mov	r0, r2
2000299c:	f7fe fab9 	bl	20000f12 <vListInsert>
}
200029a0:	e010      	b.n	200029c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
200029a2:	4b0e      	ldr	r3, [pc, #56]	; (200029dc <prvAddCurrentTaskToDelayedList+0xa0>)
200029a4:	681a      	ldr	r2, [r3, #0]
200029a6:	4b0a      	ldr	r3, [pc, #40]	; (200029d0 <prvAddCurrentTaskToDelayedList+0x94>)
200029a8:	681b      	ldr	r3, [r3, #0]
200029aa:	3304      	adds	r3, #4
200029ac:	4619      	mov	r1, r3
200029ae:	4610      	mov	r0, r2
200029b0:	f7fe faaf 	bl	20000f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
200029b4:	4b0a      	ldr	r3, [pc, #40]	; (200029e0 <prvAddCurrentTaskToDelayedList+0xa4>)
200029b6:	681b      	ldr	r3, [r3, #0]
200029b8:	68ba      	ldr	r2, [r7, #8]
200029ba:	429a      	cmp	r2, r3
200029bc:	d202      	bcs.n	200029c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
200029be:	4a08      	ldr	r2, [pc, #32]	; (200029e0 <prvAddCurrentTaskToDelayedList+0xa4>)
200029c0:	68bb      	ldr	r3, [r7, #8]
200029c2:	6013      	str	r3, [r2, #0]
}
200029c4:	bf00      	nop
200029c6:	3710      	adds	r7, #16
200029c8:	46bd      	mov	sp, r7
200029ca:	bd80      	pop	{r7, pc}
200029cc:	2000a924 	.word	0x2000a924
200029d0:	2000a44c 	.word	0x2000a44c
200029d4:	2000a90c 	.word	0x2000a90c
200029d8:	2000a8dc 	.word	0x2000a8dc
200029dc:	2000a8d8 	.word	0x2000a8d8
200029e0:	2000a940 	.word	0x2000a940

200029e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
200029e4:	b580      	push	{r7, lr}
200029e6:	b08a      	sub	sp, #40	; 0x28
200029e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
200029ea:	2300      	movs	r3, #0
200029ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
200029ee:	f000 fb07 	bl	20003000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
200029f2:	4b1c      	ldr	r3, [pc, #112]	; (20002a64 <xTimerCreateTimerTask+0x80>)
200029f4:	681b      	ldr	r3, [r3, #0]
200029f6:	2b00      	cmp	r3, #0
200029f8:	d021      	beq.n	20002a3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
200029fa:	2300      	movs	r3, #0
200029fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
200029fe:	2300      	movs	r3, #0
20002a00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
20002a02:	1d3a      	adds	r2, r7, #4
20002a04:	f107 0108 	add.w	r1, r7, #8
20002a08:	f107 030c 	add.w	r3, r7, #12
20002a0c:	4618      	mov	r0, r3
20002a0e:	f7fe fa15 	bl	20000e3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
20002a12:	6879      	ldr	r1, [r7, #4]
20002a14:	68bb      	ldr	r3, [r7, #8]
20002a16:	68fa      	ldr	r2, [r7, #12]
20002a18:	9202      	str	r2, [sp, #8]
20002a1a:	9301      	str	r3, [sp, #4]
20002a1c:	2302      	movs	r3, #2
20002a1e:	9300      	str	r3, [sp, #0]
20002a20:	2300      	movs	r3, #0
20002a22:	460a      	mov	r2, r1
20002a24:	4910      	ldr	r1, [pc, #64]	; (20002a68 <xTimerCreateTimerTask+0x84>)
20002a26:	4811      	ldr	r0, [pc, #68]	; (20002a6c <xTimerCreateTimerTask+0x88>)
20002a28:	f7ff f8b4 	bl	20001b94 <xTaskCreateStatic>
20002a2c:	4603      	mov	r3, r0
20002a2e:	4a10      	ldr	r2, [pc, #64]	; (20002a70 <xTimerCreateTimerTask+0x8c>)
20002a30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
20002a32:	4b0f      	ldr	r3, [pc, #60]	; (20002a70 <xTimerCreateTimerTask+0x8c>)
20002a34:	681b      	ldr	r3, [r3, #0]
20002a36:	2b00      	cmp	r3, #0
20002a38:	d001      	beq.n	20002a3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
20002a3a:	2301      	movs	r3, #1
20002a3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
20002a3e:	697b      	ldr	r3, [r7, #20]
20002a40:	2b00      	cmp	r3, #0
20002a42:	d10a      	bne.n	20002a5a <xTimerCreateTimerTask+0x76>
	__asm volatile
20002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
20002a48:	f383 8811 	msr	BASEPRI, r3
20002a4c:	f3bf 8f6f 	isb	sy
20002a50:	f3bf 8f4f 	dsb	sy
20002a54:	613b      	str	r3, [r7, #16]
}
20002a56:	bf00      	nop
20002a58:	e7fe      	b.n	20002a58 <xTimerCreateTimerTask+0x74>
	return xReturn;
20002a5a:	697b      	ldr	r3, [r7, #20]
}
20002a5c:	4618      	mov	r0, r3
20002a5e:	3718      	adds	r7, #24
20002a60:	46bd      	mov	sp, r7
20002a62:	bd80      	pop	{r7, pc}
20002a64:	2000a97c 	.word	0x2000a97c
20002a68:	20005d8c 	.word	0x20005d8c
20002a6c:	20002ba9 	.word	0x20002ba9
20002a70:	2000a980 	.word	0x2000a980

20002a74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
20002a74:	b580      	push	{r7, lr}
20002a76:	b08a      	sub	sp, #40	; 0x28
20002a78:	af00      	add	r7, sp, #0
20002a7a:	60f8      	str	r0, [r7, #12]
20002a7c:	60b9      	str	r1, [r7, #8]
20002a7e:	607a      	str	r2, [r7, #4]
20002a80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
20002a82:	2300      	movs	r3, #0
20002a84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
20002a86:	68fb      	ldr	r3, [r7, #12]
20002a88:	2b00      	cmp	r3, #0
20002a8a:	d10a      	bne.n	20002aa2 <xTimerGenericCommand+0x2e>
	__asm volatile
20002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
20002a90:	f383 8811 	msr	BASEPRI, r3
20002a94:	f3bf 8f6f 	isb	sy
20002a98:	f3bf 8f4f 	dsb	sy
20002a9c:	623b      	str	r3, [r7, #32]
}
20002a9e:	bf00      	nop
20002aa0:	e7fe      	b.n	20002aa0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
20002aa2:	4b1a      	ldr	r3, [pc, #104]	; (20002b0c <xTimerGenericCommand+0x98>)
20002aa4:	681b      	ldr	r3, [r3, #0]
20002aa6:	2b00      	cmp	r3, #0
20002aa8:	d02a      	beq.n	20002b00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20002aaa:	68bb      	ldr	r3, [r7, #8]
20002aac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20002aae:	687b      	ldr	r3, [r7, #4]
20002ab0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
20002ab2:	68fb      	ldr	r3, [r7, #12]
20002ab4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
20002ab6:	68bb      	ldr	r3, [r7, #8]
20002ab8:	2b05      	cmp	r3, #5
20002aba:	dc18      	bgt.n	20002aee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20002abc:	f7ff feb2 	bl	20002824 <xTaskGetSchedulerState>
20002ac0:	4603      	mov	r3, r0
20002ac2:	2b02      	cmp	r3, #2
20002ac4:	d109      	bne.n	20002ada <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
20002ac6:	4b11      	ldr	r3, [pc, #68]	; (20002b0c <xTimerGenericCommand+0x98>)
20002ac8:	6818      	ldr	r0, [r3, #0]
20002aca:	f107 0110 	add.w	r1, r7, #16
20002ace:	2300      	movs	r3, #0
20002ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002ad2:	f7fe fc29 	bl	20001328 <xQueueGenericSend>
20002ad6:	6278      	str	r0, [r7, #36]	; 0x24
20002ad8:	e012      	b.n	20002b00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20002ada:	4b0c      	ldr	r3, [pc, #48]	; (20002b0c <xTimerGenericCommand+0x98>)
20002adc:	6818      	ldr	r0, [r3, #0]
20002ade:	f107 0110 	add.w	r1, r7, #16
20002ae2:	2300      	movs	r3, #0
20002ae4:	2200      	movs	r2, #0
20002ae6:	f7fe fc1f 	bl	20001328 <xQueueGenericSend>
20002aea:	6278      	str	r0, [r7, #36]	; 0x24
20002aec:	e008      	b.n	20002b00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
20002aee:	4b07      	ldr	r3, [pc, #28]	; (20002b0c <xTimerGenericCommand+0x98>)
20002af0:	6818      	ldr	r0, [r3, #0]
20002af2:	f107 0110 	add.w	r1, r7, #16
20002af6:	2300      	movs	r3, #0
20002af8:	683a      	ldr	r2, [r7, #0]
20002afa:	f7fe fd13 	bl	20001524 <xQueueGenericSendFromISR>
20002afe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
20002b02:	4618      	mov	r0, r3
20002b04:	3728      	adds	r7, #40	; 0x28
20002b06:	46bd      	mov	sp, r7
20002b08:	bd80      	pop	{r7, pc}
20002b0a:	bf00      	nop
20002b0c:	2000a97c 	.word	0x2000a97c

20002b10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20002b10:	b580      	push	{r7, lr}
20002b12:	b088      	sub	sp, #32
20002b14:	af02      	add	r7, sp, #8
20002b16:	6078      	str	r0, [r7, #4]
20002b18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002b1a:	4b22      	ldr	r3, [pc, #136]	; (20002ba4 <prvProcessExpiredTimer+0x94>)
20002b1c:	681b      	ldr	r3, [r3, #0]
20002b1e:	68db      	ldr	r3, [r3, #12]
20002b20:	68db      	ldr	r3, [r3, #12]
20002b22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20002b24:	697b      	ldr	r3, [r7, #20]
20002b26:	3304      	adds	r3, #4
20002b28:	4618      	mov	r0, r3
20002b2a:	f7fe fa2b 	bl	20000f84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20002b2e:	697b      	ldr	r3, [r7, #20]
20002b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002b34:	f003 0304 	and.w	r3, r3, #4
20002b38:	2b00      	cmp	r3, #0
20002b3a:	d022      	beq.n	20002b82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
20002b3c:	697b      	ldr	r3, [r7, #20]
20002b3e:	699a      	ldr	r2, [r3, #24]
20002b40:	687b      	ldr	r3, [r7, #4]
20002b42:	18d1      	adds	r1, r2, r3
20002b44:	687b      	ldr	r3, [r7, #4]
20002b46:	683a      	ldr	r2, [r7, #0]
20002b48:	6978      	ldr	r0, [r7, #20]
20002b4a:	f000 f8d1 	bl	20002cf0 <prvInsertTimerInActiveList>
20002b4e:	4603      	mov	r3, r0
20002b50:	2b00      	cmp	r3, #0
20002b52:	d01f      	beq.n	20002b94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20002b54:	2300      	movs	r3, #0
20002b56:	9300      	str	r3, [sp, #0]
20002b58:	2300      	movs	r3, #0
20002b5a:	687a      	ldr	r2, [r7, #4]
20002b5c:	2100      	movs	r1, #0
20002b5e:	6978      	ldr	r0, [r7, #20]
20002b60:	f7ff ff88 	bl	20002a74 <xTimerGenericCommand>
20002b64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
20002b66:	693b      	ldr	r3, [r7, #16]
20002b68:	2b00      	cmp	r3, #0
20002b6a:	d113      	bne.n	20002b94 <prvProcessExpiredTimer+0x84>
	__asm volatile
20002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
20002b70:	f383 8811 	msr	BASEPRI, r3
20002b74:	f3bf 8f6f 	isb	sy
20002b78:	f3bf 8f4f 	dsb	sy
20002b7c:	60fb      	str	r3, [r7, #12]
}
20002b7e:	bf00      	nop
20002b80:	e7fe      	b.n	20002b80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20002b82:	697b      	ldr	r3, [r7, #20]
20002b84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002b88:	f023 0301 	bic.w	r3, r3, #1
20002b8c:	b2da      	uxtb	r2, r3
20002b8e:	697b      	ldr	r3, [r7, #20]
20002b90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20002b94:	697b      	ldr	r3, [r7, #20]
20002b96:	6a1b      	ldr	r3, [r3, #32]
20002b98:	6978      	ldr	r0, [r7, #20]
20002b9a:	4798      	blx	r3
}
20002b9c:	bf00      	nop
20002b9e:	3718      	adds	r7, #24
20002ba0:	46bd      	mov	sp, r7
20002ba2:	bd80      	pop	{r7, pc}
20002ba4:	2000a974 	.word	0x2000a974

20002ba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
20002ba8:	b580      	push	{r7, lr}
20002baa:	b084      	sub	sp, #16
20002bac:	af00      	add	r7, sp, #0
20002bae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20002bb0:	f107 0308 	add.w	r3, r7, #8
20002bb4:	4618      	mov	r0, r3
20002bb6:	f000 f857 	bl	20002c68 <prvGetNextExpireTime>
20002bba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20002bbc:	68bb      	ldr	r3, [r7, #8]
20002bbe:	4619      	mov	r1, r3
20002bc0:	68f8      	ldr	r0, [r7, #12]
20002bc2:	f000 f803 	bl	20002bcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
20002bc6:	f000 f8d5 	bl	20002d74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20002bca:	e7f1      	b.n	20002bb0 <prvTimerTask+0x8>

20002bcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20002bcc:	b580      	push	{r7, lr}
20002bce:	b084      	sub	sp, #16
20002bd0:	af00      	add	r7, sp, #0
20002bd2:	6078      	str	r0, [r7, #4]
20002bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
20002bd6:	f7ff fa39 	bl	2000204c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20002bda:	f107 0308 	add.w	r3, r7, #8
20002bde:	4618      	mov	r0, r3
20002be0:	f000 f866 	bl	20002cb0 <prvSampleTimeNow>
20002be4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
20002be6:	68bb      	ldr	r3, [r7, #8]
20002be8:	2b00      	cmp	r3, #0
20002bea:	d130      	bne.n	20002c4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20002bec:	683b      	ldr	r3, [r7, #0]
20002bee:	2b00      	cmp	r3, #0
20002bf0:	d10a      	bne.n	20002c08 <prvProcessTimerOrBlockTask+0x3c>
20002bf2:	687a      	ldr	r2, [r7, #4]
20002bf4:	68fb      	ldr	r3, [r7, #12]
20002bf6:	429a      	cmp	r2, r3
20002bf8:	d806      	bhi.n	20002c08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
20002bfa:	f7ff fa35 	bl	20002068 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20002bfe:	68f9      	ldr	r1, [r7, #12]
20002c00:	6878      	ldr	r0, [r7, #4]
20002c02:	f7ff ff85 	bl	20002b10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
20002c06:	e024      	b.n	20002c52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
20002c08:	683b      	ldr	r3, [r7, #0]
20002c0a:	2b00      	cmp	r3, #0
20002c0c:	d008      	beq.n	20002c20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20002c0e:	4b13      	ldr	r3, [pc, #76]	; (20002c5c <prvProcessTimerOrBlockTask+0x90>)
20002c10:	681b      	ldr	r3, [r3, #0]
20002c12:	681b      	ldr	r3, [r3, #0]
20002c14:	2b00      	cmp	r3, #0
20002c16:	d101      	bne.n	20002c1c <prvProcessTimerOrBlockTask+0x50>
20002c18:	2301      	movs	r3, #1
20002c1a:	e000      	b.n	20002c1e <prvProcessTimerOrBlockTask+0x52>
20002c1c:	2300      	movs	r3, #0
20002c1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
20002c20:	4b0f      	ldr	r3, [pc, #60]	; (20002c60 <prvProcessTimerOrBlockTask+0x94>)
20002c22:	6818      	ldr	r0, [r3, #0]
20002c24:	687a      	ldr	r2, [r7, #4]
20002c26:	68fb      	ldr	r3, [r7, #12]
20002c28:	1ad3      	subs	r3, r2, r3
20002c2a:	683a      	ldr	r2, [r7, #0]
20002c2c:	4619      	mov	r1, r3
20002c2e:	f7fe ff7d 	bl	20001b2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
20002c32:	f7ff fa19 	bl	20002068 <xTaskResumeAll>
20002c36:	4603      	mov	r3, r0
20002c38:	2b00      	cmp	r3, #0
20002c3a:	d10a      	bne.n	20002c52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
20002c3c:	4b09      	ldr	r3, [pc, #36]	; (20002c64 <prvProcessTimerOrBlockTask+0x98>)
20002c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002c42:	601a      	str	r2, [r3, #0]
20002c44:	f3bf 8f4f 	dsb	sy
20002c48:	f3bf 8f6f 	isb	sy
}
20002c4c:	e001      	b.n	20002c52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
20002c4e:	f7ff fa0b 	bl	20002068 <xTaskResumeAll>
}
20002c52:	bf00      	nop
20002c54:	3710      	adds	r7, #16
20002c56:	46bd      	mov	sp, r7
20002c58:	bd80      	pop	{r7, pc}
20002c5a:	bf00      	nop
20002c5c:	2000a978 	.word	0x2000a978
20002c60:	2000a97c 	.word	0x2000a97c
20002c64:	e000ed04 	.word	0xe000ed04

20002c68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
20002c68:	b480      	push	{r7}
20002c6a:	b085      	sub	sp, #20
20002c6c:	af00      	add	r7, sp, #0
20002c6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
20002c70:	4b0e      	ldr	r3, [pc, #56]	; (20002cac <prvGetNextExpireTime+0x44>)
20002c72:	681b      	ldr	r3, [r3, #0]
20002c74:	681b      	ldr	r3, [r3, #0]
20002c76:	2b00      	cmp	r3, #0
20002c78:	d101      	bne.n	20002c7e <prvGetNextExpireTime+0x16>
20002c7a:	2201      	movs	r2, #1
20002c7c:	e000      	b.n	20002c80 <prvGetNextExpireTime+0x18>
20002c7e:	2200      	movs	r2, #0
20002c80:	687b      	ldr	r3, [r7, #4]
20002c82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
20002c84:	687b      	ldr	r3, [r7, #4]
20002c86:	681b      	ldr	r3, [r3, #0]
20002c88:	2b00      	cmp	r3, #0
20002c8a:	d105      	bne.n	20002c98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20002c8c:	4b07      	ldr	r3, [pc, #28]	; (20002cac <prvGetNextExpireTime+0x44>)
20002c8e:	681b      	ldr	r3, [r3, #0]
20002c90:	68db      	ldr	r3, [r3, #12]
20002c92:	681b      	ldr	r3, [r3, #0]
20002c94:	60fb      	str	r3, [r7, #12]
20002c96:	e001      	b.n	20002c9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20002c98:	2300      	movs	r3, #0
20002c9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20002c9c:	68fb      	ldr	r3, [r7, #12]
}
20002c9e:	4618      	mov	r0, r3
20002ca0:	3714      	adds	r7, #20
20002ca2:	46bd      	mov	sp, r7
20002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ca8:	4770      	bx	lr
20002caa:	bf00      	nop
20002cac:	2000a974 	.word	0x2000a974

20002cb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20002cb0:	b580      	push	{r7, lr}
20002cb2:	b084      	sub	sp, #16
20002cb4:	af00      	add	r7, sp, #0
20002cb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20002cb8:	f7ff fa74 	bl	200021a4 <xTaskGetTickCount>
20002cbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
20002cbe:	4b0b      	ldr	r3, [pc, #44]	; (20002cec <prvSampleTimeNow+0x3c>)
20002cc0:	681b      	ldr	r3, [r3, #0]
20002cc2:	68fa      	ldr	r2, [r7, #12]
20002cc4:	429a      	cmp	r2, r3
20002cc6:	d205      	bcs.n	20002cd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
20002cc8:	f000 f936 	bl	20002f38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20002ccc:	687b      	ldr	r3, [r7, #4]
20002cce:	2201      	movs	r2, #1
20002cd0:	601a      	str	r2, [r3, #0]
20002cd2:	e002      	b.n	20002cda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
20002cd4:	687b      	ldr	r3, [r7, #4]
20002cd6:	2200      	movs	r2, #0
20002cd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20002cda:	4a04      	ldr	r2, [pc, #16]	; (20002cec <prvSampleTimeNow+0x3c>)
20002cdc:	68fb      	ldr	r3, [r7, #12]
20002cde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
20002ce0:	68fb      	ldr	r3, [r7, #12]
}
20002ce2:	4618      	mov	r0, r3
20002ce4:	3710      	adds	r7, #16
20002ce6:	46bd      	mov	sp, r7
20002ce8:	bd80      	pop	{r7, pc}
20002cea:	bf00      	nop
20002cec:	2000a984 	.word	0x2000a984

20002cf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20002cf0:	b580      	push	{r7, lr}
20002cf2:	b086      	sub	sp, #24
20002cf4:	af00      	add	r7, sp, #0
20002cf6:	60f8      	str	r0, [r7, #12]
20002cf8:	60b9      	str	r1, [r7, #8]
20002cfa:	607a      	str	r2, [r7, #4]
20002cfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
20002cfe:	2300      	movs	r3, #0
20002d00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
20002d02:	68fb      	ldr	r3, [r7, #12]
20002d04:	68ba      	ldr	r2, [r7, #8]
20002d06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20002d08:	68fb      	ldr	r3, [r7, #12]
20002d0a:	68fa      	ldr	r2, [r7, #12]
20002d0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20002d0e:	68ba      	ldr	r2, [r7, #8]
20002d10:	687b      	ldr	r3, [r7, #4]
20002d12:	429a      	cmp	r2, r3
20002d14:	d812      	bhi.n	20002d3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002d16:	687a      	ldr	r2, [r7, #4]
20002d18:	683b      	ldr	r3, [r7, #0]
20002d1a:	1ad2      	subs	r2, r2, r3
20002d1c:	68fb      	ldr	r3, [r7, #12]
20002d1e:	699b      	ldr	r3, [r3, #24]
20002d20:	429a      	cmp	r2, r3
20002d22:	d302      	bcc.n	20002d2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
20002d24:	2301      	movs	r3, #1
20002d26:	617b      	str	r3, [r7, #20]
20002d28:	e01b      	b.n	20002d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
20002d2a:	4b10      	ldr	r3, [pc, #64]	; (20002d6c <prvInsertTimerInActiveList+0x7c>)
20002d2c:	681a      	ldr	r2, [r3, #0]
20002d2e:	68fb      	ldr	r3, [r7, #12]
20002d30:	3304      	adds	r3, #4
20002d32:	4619      	mov	r1, r3
20002d34:	4610      	mov	r0, r2
20002d36:	f7fe f8ec 	bl	20000f12 <vListInsert>
20002d3a:	e012      	b.n	20002d62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
20002d3c:	687a      	ldr	r2, [r7, #4]
20002d3e:	683b      	ldr	r3, [r7, #0]
20002d40:	429a      	cmp	r2, r3
20002d42:	d206      	bcs.n	20002d52 <prvInsertTimerInActiveList+0x62>
20002d44:	68ba      	ldr	r2, [r7, #8]
20002d46:	683b      	ldr	r3, [r7, #0]
20002d48:	429a      	cmp	r2, r3
20002d4a:	d302      	bcc.n	20002d52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
20002d4c:	2301      	movs	r3, #1
20002d4e:	617b      	str	r3, [r7, #20]
20002d50:	e007      	b.n	20002d62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20002d52:	4b07      	ldr	r3, [pc, #28]	; (20002d70 <prvInsertTimerInActiveList+0x80>)
20002d54:	681a      	ldr	r2, [r3, #0]
20002d56:	68fb      	ldr	r3, [r7, #12]
20002d58:	3304      	adds	r3, #4
20002d5a:	4619      	mov	r1, r3
20002d5c:	4610      	mov	r0, r2
20002d5e:	f7fe f8d8 	bl	20000f12 <vListInsert>
		}
	}

	return xProcessTimerNow;
20002d62:	697b      	ldr	r3, [r7, #20]
}
20002d64:	4618      	mov	r0, r3
20002d66:	3718      	adds	r7, #24
20002d68:	46bd      	mov	sp, r7
20002d6a:	bd80      	pop	{r7, pc}
20002d6c:	2000a978 	.word	0x2000a978
20002d70:	2000a974 	.word	0x2000a974

20002d74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
20002d74:	b580      	push	{r7, lr}
20002d76:	b08e      	sub	sp, #56	; 0x38
20002d78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20002d7a:	e0ca      	b.n	20002f12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20002d7c:	687b      	ldr	r3, [r7, #4]
20002d7e:	2b00      	cmp	r3, #0
20002d80:	da18      	bge.n	20002db4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
20002d82:	1d3b      	adds	r3, r7, #4
20002d84:	3304      	adds	r3, #4
20002d86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002d8a:	2b00      	cmp	r3, #0
20002d8c:	d10a      	bne.n	20002da4 <prvProcessReceivedCommands+0x30>
	__asm volatile
20002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
20002d92:	f383 8811 	msr	BASEPRI, r3
20002d96:	f3bf 8f6f 	isb	sy
20002d9a:	f3bf 8f4f 	dsb	sy
20002d9e:	61fb      	str	r3, [r7, #28]
}
20002da0:	bf00      	nop
20002da2:	e7fe      	b.n	20002da2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
20002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002da6:	681b      	ldr	r3, [r3, #0]
20002da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20002daa:	6850      	ldr	r0, [r2, #4]
20002dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20002dae:	6892      	ldr	r2, [r2, #8]
20002db0:	4611      	mov	r1, r2
20002db2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
20002db4:	687b      	ldr	r3, [r7, #4]
20002db6:	2b00      	cmp	r3, #0
20002db8:	f2c0 80aa 	blt.w	20002f10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20002dbc:	68fb      	ldr	r3, [r7, #12]
20002dbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
20002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002dc2:	695b      	ldr	r3, [r3, #20]
20002dc4:	2b00      	cmp	r3, #0
20002dc6:	d004      	beq.n	20002dd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002dca:	3304      	adds	r3, #4
20002dcc:	4618      	mov	r0, r3
20002dce:	f7fe f8d9 	bl	20000f84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20002dd2:	463b      	mov	r3, r7
20002dd4:	4618      	mov	r0, r3
20002dd6:	f7ff ff6b 	bl	20002cb0 <prvSampleTimeNow>
20002dda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
20002ddc:	687b      	ldr	r3, [r7, #4]
20002dde:	2b09      	cmp	r3, #9
20002de0:	f200 8097 	bhi.w	20002f12 <prvProcessReceivedCommands+0x19e>
20002de4:	a201      	add	r2, pc, #4	; (adr r2, 20002dec <prvProcessReceivedCommands+0x78>)
20002de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002dea:	bf00      	nop
20002dec:	20002e15 	.word	0x20002e15
20002df0:	20002e15 	.word	0x20002e15
20002df4:	20002e15 	.word	0x20002e15
20002df8:	20002e89 	.word	0x20002e89
20002dfc:	20002e9d 	.word	0x20002e9d
20002e00:	20002ee7 	.word	0x20002ee7
20002e04:	20002e15 	.word	0x20002e15
20002e08:	20002e15 	.word	0x20002e15
20002e0c:	20002e89 	.word	0x20002e89
20002e10:	20002e9d 	.word	0x20002e9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002e1a:	f043 0301 	orr.w	r3, r3, #1
20002e1e:	b2da      	uxtb	r2, r3
20002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
20002e26:	68ba      	ldr	r2, [r7, #8]
20002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e2a:	699b      	ldr	r3, [r3, #24]
20002e2c:	18d1      	adds	r1, r2, r3
20002e2e:	68bb      	ldr	r3, [r7, #8]
20002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002e32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002e34:	f7ff ff5c 	bl	20002cf0 <prvInsertTimerInActiveList>
20002e38:	4603      	mov	r3, r0
20002e3a:	2b00      	cmp	r3, #0
20002e3c:	d069      	beq.n	20002f12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e40:	6a1b      	ldr	r3, [r3, #32]
20002e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002e44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002e4c:	f003 0304 	and.w	r3, r3, #4
20002e50:	2b00      	cmp	r3, #0
20002e52:	d05e      	beq.n	20002f12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
20002e54:	68ba      	ldr	r2, [r7, #8]
20002e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e58:	699b      	ldr	r3, [r3, #24]
20002e5a:	441a      	add	r2, r3
20002e5c:	2300      	movs	r3, #0
20002e5e:	9300      	str	r3, [sp, #0]
20002e60:	2300      	movs	r3, #0
20002e62:	2100      	movs	r1, #0
20002e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002e66:	f7ff fe05 	bl	20002a74 <xTimerGenericCommand>
20002e6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
20002e6c:	6a3b      	ldr	r3, [r7, #32]
20002e6e:	2b00      	cmp	r3, #0
20002e70:	d14f      	bne.n	20002f12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
20002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
20002e76:	f383 8811 	msr	BASEPRI, r3
20002e7a:	f3bf 8f6f 	isb	sy
20002e7e:	f3bf 8f4f 	dsb	sy
20002e82:	61bb      	str	r3, [r7, #24]
}
20002e84:	bf00      	nop
20002e86:	e7fe      	b.n	20002e86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002e8e:	f023 0301 	bic.w	r3, r3, #1
20002e92:	b2da      	uxtb	r2, r3
20002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
20002e9a:	e03a      	b.n	20002f12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002ea2:	f043 0301 	orr.w	r3, r3, #1
20002ea6:	b2da      	uxtb	r2, r3
20002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20002eae:	68ba      	ldr	r2, [r7, #8]
20002eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002eb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
20002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002eb6:	699b      	ldr	r3, [r3, #24]
20002eb8:	2b00      	cmp	r3, #0
20002eba:	d10a      	bne.n	20002ed2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
20002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
20002ec0:	f383 8811 	msr	BASEPRI, r3
20002ec4:	f3bf 8f6f 	isb	sy
20002ec8:	f3bf 8f4f 	dsb	sy
20002ecc:	617b      	str	r3, [r7, #20]
}
20002ece:	bf00      	nop
20002ed0:	e7fe      	b.n	20002ed0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
20002ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ed4:	699a      	ldr	r2, [r3, #24]
20002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002ed8:	18d1      	adds	r1, r2, r3
20002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002ee0:	f7ff ff06 	bl	20002cf0 <prvInsertTimerInActiveList>
					break;
20002ee4:	e015      	b.n	20002f12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
20002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002eec:	f003 0302 	and.w	r3, r3, #2
20002ef0:	2b00      	cmp	r3, #0
20002ef2:	d103      	bne.n	20002efc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
20002ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20002ef6:	f000 fbdb 	bl	200036b0 <vPortFree>
20002efa:	e00a      	b.n	20002f12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002f02:	f023 0301 	bic.w	r3, r3, #1
20002f06:	b2da      	uxtb	r2, r3
20002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
20002f0e:	e000      	b.n	20002f12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
20002f10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20002f12:	4b08      	ldr	r3, [pc, #32]	; (20002f34 <prvProcessReceivedCommands+0x1c0>)
20002f14:	681b      	ldr	r3, [r3, #0]
20002f16:	1d39      	adds	r1, r7, #4
20002f18:	2200      	movs	r2, #0
20002f1a:	4618      	mov	r0, r3
20002f1c:	f7fe fb9e 	bl	2000165c <xQueueReceive>
20002f20:	4603      	mov	r3, r0
20002f22:	2b00      	cmp	r3, #0
20002f24:	f47f af2a 	bne.w	20002d7c <prvProcessReceivedCommands+0x8>
	}
}
20002f28:	bf00      	nop
20002f2a:	bf00      	nop
20002f2c:	3730      	adds	r7, #48	; 0x30
20002f2e:	46bd      	mov	sp, r7
20002f30:	bd80      	pop	{r7, pc}
20002f32:	bf00      	nop
20002f34:	2000a97c 	.word	0x2000a97c

20002f38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
20002f38:	b580      	push	{r7, lr}
20002f3a:	b088      	sub	sp, #32
20002f3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20002f3e:	e048      	b.n	20002fd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20002f40:	4b2d      	ldr	r3, [pc, #180]	; (20002ff8 <prvSwitchTimerLists+0xc0>)
20002f42:	681b      	ldr	r3, [r3, #0]
20002f44:	68db      	ldr	r3, [r3, #12]
20002f46:	681b      	ldr	r3, [r3, #0]
20002f48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002f4a:	4b2b      	ldr	r3, [pc, #172]	; (20002ff8 <prvSwitchTimerLists+0xc0>)
20002f4c:	681b      	ldr	r3, [r3, #0]
20002f4e:	68db      	ldr	r3, [r3, #12]
20002f50:	68db      	ldr	r3, [r3, #12]
20002f52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20002f54:	68fb      	ldr	r3, [r7, #12]
20002f56:	3304      	adds	r3, #4
20002f58:	4618      	mov	r0, r3
20002f5a:	f7fe f813 	bl	20000f84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
20002f5e:	68fb      	ldr	r3, [r7, #12]
20002f60:	6a1b      	ldr	r3, [r3, #32]
20002f62:	68f8      	ldr	r0, [r7, #12]
20002f64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
20002f66:	68fb      	ldr	r3, [r7, #12]
20002f68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20002f6c:	f003 0304 	and.w	r3, r3, #4
20002f70:	2b00      	cmp	r3, #0
20002f72:	d02e      	beq.n	20002fd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
20002f74:	68fb      	ldr	r3, [r7, #12]
20002f76:	699b      	ldr	r3, [r3, #24]
20002f78:	693a      	ldr	r2, [r7, #16]
20002f7a:	4413      	add	r3, r2
20002f7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
20002f7e:	68ba      	ldr	r2, [r7, #8]
20002f80:	693b      	ldr	r3, [r7, #16]
20002f82:	429a      	cmp	r2, r3
20002f84:	d90e      	bls.n	20002fa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
20002f86:	68fb      	ldr	r3, [r7, #12]
20002f88:	68ba      	ldr	r2, [r7, #8]
20002f8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20002f8c:	68fb      	ldr	r3, [r7, #12]
20002f8e:	68fa      	ldr	r2, [r7, #12]
20002f90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
20002f92:	4b19      	ldr	r3, [pc, #100]	; (20002ff8 <prvSwitchTimerLists+0xc0>)
20002f94:	681a      	ldr	r2, [r3, #0]
20002f96:	68fb      	ldr	r3, [r7, #12]
20002f98:	3304      	adds	r3, #4
20002f9a:	4619      	mov	r1, r3
20002f9c:	4610      	mov	r0, r2
20002f9e:	f7fd ffb8 	bl	20000f12 <vListInsert>
20002fa2:	e016      	b.n	20002fd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
20002fa4:	2300      	movs	r3, #0
20002fa6:	9300      	str	r3, [sp, #0]
20002fa8:	2300      	movs	r3, #0
20002faa:	693a      	ldr	r2, [r7, #16]
20002fac:	2100      	movs	r1, #0
20002fae:	68f8      	ldr	r0, [r7, #12]
20002fb0:	f7ff fd60 	bl	20002a74 <xTimerGenericCommand>
20002fb4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
20002fb6:	687b      	ldr	r3, [r7, #4]
20002fb8:	2b00      	cmp	r3, #0
20002fba:	d10a      	bne.n	20002fd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
20002fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
20002fc0:	f383 8811 	msr	BASEPRI, r3
20002fc4:	f3bf 8f6f 	isb	sy
20002fc8:	f3bf 8f4f 	dsb	sy
20002fcc:	603b      	str	r3, [r7, #0]
}
20002fce:	bf00      	nop
20002fd0:	e7fe      	b.n	20002fd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
20002fd2:	4b09      	ldr	r3, [pc, #36]	; (20002ff8 <prvSwitchTimerLists+0xc0>)
20002fd4:	681b      	ldr	r3, [r3, #0]
20002fd6:	681b      	ldr	r3, [r3, #0]
20002fd8:	2b00      	cmp	r3, #0
20002fda:	d1b1      	bne.n	20002f40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20002fdc:	4b06      	ldr	r3, [pc, #24]	; (20002ff8 <prvSwitchTimerLists+0xc0>)
20002fde:	681b      	ldr	r3, [r3, #0]
20002fe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
20002fe2:	4b06      	ldr	r3, [pc, #24]	; (20002ffc <prvSwitchTimerLists+0xc4>)
20002fe4:	681b      	ldr	r3, [r3, #0]
20002fe6:	4a04      	ldr	r2, [pc, #16]	; (20002ff8 <prvSwitchTimerLists+0xc0>)
20002fe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
20002fea:	4a04      	ldr	r2, [pc, #16]	; (20002ffc <prvSwitchTimerLists+0xc4>)
20002fec:	697b      	ldr	r3, [r7, #20]
20002fee:	6013      	str	r3, [r2, #0]
}
20002ff0:	bf00      	nop
20002ff2:	3718      	adds	r7, #24
20002ff4:	46bd      	mov	sp, r7
20002ff6:	bd80      	pop	{r7, pc}
20002ff8:	2000a974 	.word	0x2000a974
20002ffc:	2000a978 	.word	0x2000a978

20003000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003000:	b580      	push	{r7, lr}
20003002:	b082      	sub	sp, #8
20003004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
20003006:	f000 f965 	bl	200032d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
2000300a:	4b15      	ldr	r3, [pc, #84]	; (20003060 <prvCheckForValidListAndQueue+0x60>)
2000300c:	681b      	ldr	r3, [r3, #0]
2000300e:	2b00      	cmp	r3, #0
20003010:	d120      	bne.n	20003054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
20003012:	4814      	ldr	r0, [pc, #80]	; (20003064 <prvCheckForValidListAndQueue+0x64>)
20003014:	f7fd ff2c 	bl	20000e70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
20003018:	4813      	ldr	r0, [pc, #76]	; (20003068 <prvCheckForValidListAndQueue+0x68>)
2000301a:	f7fd ff29 	bl	20000e70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
2000301e:	4b13      	ldr	r3, [pc, #76]	; (2000306c <prvCheckForValidListAndQueue+0x6c>)
20003020:	4a10      	ldr	r2, [pc, #64]	; (20003064 <prvCheckForValidListAndQueue+0x64>)
20003022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
20003024:	4b12      	ldr	r3, [pc, #72]	; (20003070 <prvCheckForValidListAndQueue+0x70>)
20003026:	4a10      	ldr	r2, [pc, #64]	; (20003068 <prvCheckForValidListAndQueue+0x68>)
20003028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
2000302a:	2300      	movs	r3, #0
2000302c:	9300      	str	r3, [sp, #0]
2000302e:	4b11      	ldr	r3, [pc, #68]	; (20003074 <prvCheckForValidListAndQueue+0x74>)
20003030:	4a11      	ldr	r2, [pc, #68]	; (20003078 <prvCheckForValidListAndQueue+0x78>)
20003032:	2110      	movs	r1, #16
20003034:	200a      	movs	r0, #10
20003036:	f7fe f837 	bl	200010a8 <xQueueGenericCreateStatic>
2000303a:	4603      	mov	r3, r0
2000303c:	4a08      	ldr	r2, [pc, #32]	; (20003060 <prvCheckForValidListAndQueue+0x60>)
2000303e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
20003040:	4b07      	ldr	r3, [pc, #28]	; (20003060 <prvCheckForValidListAndQueue+0x60>)
20003042:	681b      	ldr	r3, [r3, #0]
20003044:	2b00      	cmp	r3, #0
20003046:	d005      	beq.n	20003054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
20003048:	4b05      	ldr	r3, [pc, #20]	; (20003060 <prvCheckForValidListAndQueue+0x60>)
2000304a:	681b      	ldr	r3, [r3, #0]
2000304c:	490b      	ldr	r1, [pc, #44]	; (2000307c <prvCheckForValidListAndQueue+0x7c>)
2000304e:	4618      	mov	r0, r3
20003050:	f7fe fd18 	bl	20001a84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
20003054:	f000 f96e 	bl	20003334 <vPortExitCritical>
}
20003058:	bf00      	nop
2000305a:	46bd      	mov	sp, r7
2000305c:	bd80      	pop	{r7, pc}
2000305e:	bf00      	nop
20003060:	2000a97c 	.word	0x2000a97c
20003064:	2000a94c 	.word	0x2000a94c
20003068:	2000a960 	.word	0x2000a960
2000306c:	2000a974 	.word	0x2000a974
20003070:	2000a978 	.word	0x2000a978
20003074:	2000aa28 	.word	0x2000aa28
20003078:	2000a988 	.word	0x2000a988
2000307c:	20005d94 	.word	0x20005d94

20003080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20003080:	b480      	push	{r7}
20003082:	b085      	sub	sp, #20
20003084:	af00      	add	r7, sp, #0
20003086:	60f8      	str	r0, [r7, #12]
20003088:	60b9      	str	r1, [r7, #8]
2000308a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
2000308c:	68fb      	ldr	r3, [r7, #12]
2000308e:	3b04      	subs	r3, #4
20003090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
20003092:	68fb      	ldr	r3, [r7, #12]
20003094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
2000309a:	68fb      	ldr	r3, [r7, #12]
2000309c:	3b04      	subs	r3, #4
2000309e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
200030a0:	68bb      	ldr	r3, [r7, #8]
200030a2:	f023 0201 	bic.w	r2, r3, #1
200030a6:	68fb      	ldr	r3, [r7, #12]
200030a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
200030aa:	68fb      	ldr	r3, [r7, #12]
200030ac:	3b04      	subs	r3, #4
200030ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
200030b0:	4a0c      	ldr	r2, [pc, #48]	; (200030e4 <pxPortInitialiseStack+0x64>)
200030b2:	68fb      	ldr	r3, [r7, #12]
200030b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
200030b6:	68fb      	ldr	r3, [r7, #12]
200030b8:	3b14      	subs	r3, #20
200030ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
200030bc:	687a      	ldr	r2, [r7, #4]
200030be:	68fb      	ldr	r3, [r7, #12]
200030c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
200030c2:	68fb      	ldr	r3, [r7, #12]
200030c4:	3b04      	subs	r3, #4
200030c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
200030c8:	68fb      	ldr	r3, [r7, #12]
200030ca:	f06f 0202 	mvn.w	r2, #2
200030ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
200030d0:	68fb      	ldr	r3, [r7, #12]
200030d2:	3b20      	subs	r3, #32
200030d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
200030d6:	68fb      	ldr	r3, [r7, #12]
}
200030d8:	4618      	mov	r0, r3
200030da:	3714      	adds	r7, #20
200030dc:	46bd      	mov	sp, r7
200030de:	f85d 7b04 	ldr.w	r7, [sp], #4
200030e2:	4770      	bx	lr
200030e4:	200030e9 	.word	0x200030e9

200030e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
200030e8:	b480      	push	{r7}
200030ea:	b085      	sub	sp, #20
200030ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
200030ee:	2300      	movs	r3, #0
200030f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
200030f2:	4b12      	ldr	r3, [pc, #72]	; (2000313c <prvTaskExitError+0x54>)
200030f4:	681b      	ldr	r3, [r3, #0]
200030f6:	f1b3 3fff 	cmp.w	r3, #4294967295
200030fa:	d00a      	beq.n	20003112 <prvTaskExitError+0x2a>
	__asm volatile
200030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
20003100:	f383 8811 	msr	BASEPRI, r3
20003104:	f3bf 8f6f 	isb	sy
20003108:	f3bf 8f4f 	dsb	sy
2000310c:	60fb      	str	r3, [r7, #12]
}
2000310e:	bf00      	nop
20003110:	e7fe      	b.n	20003110 <prvTaskExitError+0x28>
	__asm volatile
20003112:	f04f 0350 	mov.w	r3, #80	; 0x50
20003116:	f383 8811 	msr	BASEPRI, r3
2000311a:	f3bf 8f6f 	isb	sy
2000311e:	f3bf 8f4f 	dsb	sy
20003122:	60bb      	str	r3, [r7, #8]
}
20003124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
20003126:	bf00      	nop
20003128:	687b      	ldr	r3, [r7, #4]
2000312a:	2b00      	cmp	r3, #0
2000312c:	d0fc      	beq.n	20003128 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
2000312e:	bf00      	nop
20003130:	bf00      	nop
20003132:	3714      	adds	r7, #20
20003134:	46bd      	mov	sp, r7
20003136:	f85d 7b04 	ldr.w	r7, [sp], #4
2000313a:	4770      	bx	lr
2000313c:	20009bb4 	.word	0x20009bb4

20003140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
20003140:	4b07      	ldr	r3, [pc, #28]	; (20003160 <pxCurrentTCBConst2>)
20003142:	6819      	ldr	r1, [r3, #0]
20003144:	6808      	ldr	r0, [r1, #0]
20003146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000314a:	f380 8809 	msr	PSP, r0
2000314e:	f3bf 8f6f 	isb	sy
20003152:	f04f 0000 	mov.w	r0, #0
20003156:	f380 8811 	msr	BASEPRI, r0
2000315a:	4770      	bx	lr
2000315c:	f3af 8000 	nop.w

20003160 <pxCurrentTCBConst2>:
20003160:	2000a44c 	.word	0x2000a44c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
20003164:	bf00      	nop
20003166:	bf00      	nop

20003168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
20003168:	4808      	ldr	r0, [pc, #32]	; (2000318c <prvPortStartFirstTask+0x24>)
2000316a:	6800      	ldr	r0, [r0, #0]
2000316c:	6800      	ldr	r0, [r0, #0]
2000316e:	f380 8808 	msr	MSP, r0
20003172:	f04f 0000 	mov.w	r0, #0
20003176:	f380 8814 	msr	CONTROL, r0
2000317a:	b662      	cpsie	i
2000317c:	b661      	cpsie	f
2000317e:	f3bf 8f4f 	dsb	sy
20003182:	f3bf 8f6f 	isb	sy
20003186:	df00      	svc	0
20003188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
2000318a:	bf00      	nop
2000318c:	e000ed08 	.word	0xe000ed08

20003190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003190:	b580      	push	{r7, lr}
20003192:	b086      	sub	sp, #24
20003194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
20003196:	4b46      	ldr	r3, [pc, #280]	; (200032b0 <xPortStartScheduler+0x120>)
20003198:	681b      	ldr	r3, [r3, #0]
2000319a:	4a46      	ldr	r2, [pc, #280]	; (200032b4 <xPortStartScheduler+0x124>)
2000319c:	4293      	cmp	r3, r2
2000319e:	d10a      	bne.n	200031b6 <xPortStartScheduler+0x26>
	__asm volatile
200031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
200031a4:	f383 8811 	msr	BASEPRI, r3
200031a8:	f3bf 8f6f 	isb	sy
200031ac:	f3bf 8f4f 	dsb	sy
200031b0:	613b      	str	r3, [r7, #16]
}
200031b2:	bf00      	nop
200031b4:	e7fe      	b.n	200031b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
200031b6:	4b3e      	ldr	r3, [pc, #248]	; (200032b0 <xPortStartScheduler+0x120>)
200031b8:	681b      	ldr	r3, [r3, #0]
200031ba:	4a3f      	ldr	r2, [pc, #252]	; (200032b8 <xPortStartScheduler+0x128>)
200031bc:	4293      	cmp	r3, r2
200031be:	d10a      	bne.n	200031d6 <xPortStartScheduler+0x46>
	__asm volatile
200031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
200031c4:	f383 8811 	msr	BASEPRI, r3
200031c8:	f3bf 8f6f 	isb	sy
200031cc:	f3bf 8f4f 	dsb	sy
200031d0:	60fb      	str	r3, [r7, #12]
}
200031d2:	bf00      	nop
200031d4:	e7fe      	b.n	200031d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
200031d6:	4b39      	ldr	r3, [pc, #228]	; (200032bc <xPortStartScheduler+0x12c>)
200031d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
200031da:	697b      	ldr	r3, [r7, #20]
200031dc:	781b      	ldrb	r3, [r3, #0]
200031de:	b2db      	uxtb	r3, r3
200031e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
200031e2:	697b      	ldr	r3, [r7, #20]
200031e4:	22ff      	movs	r2, #255	; 0xff
200031e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
200031e8:	697b      	ldr	r3, [r7, #20]
200031ea:	781b      	ldrb	r3, [r3, #0]
200031ec:	b2db      	uxtb	r3, r3
200031ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
200031f0:	78fb      	ldrb	r3, [r7, #3]
200031f2:	b2db      	uxtb	r3, r3
200031f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
200031f8:	b2da      	uxtb	r2, r3
200031fa:	4b31      	ldr	r3, [pc, #196]	; (200032c0 <xPortStartScheduler+0x130>)
200031fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
200031fe:	4b31      	ldr	r3, [pc, #196]	; (200032c4 <xPortStartScheduler+0x134>)
20003200:	2207      	movs	r2, #7
20003202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003204:	e009      	b.n	2000321a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
20003206:	4b2f      	ldr	r3, [pc, #188]	; (200032c4 <xPortStartScheduler+0x134>)
20003208:	681b      	ldr	r3, [r3, #0]
2000320a:	3b01      	subs	r3, #1
2000320c:	4a2d      	ldr	r2, [pc, #180]	; (200032c4 <xPortStartScheduler+0x134>)
2000320e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
20003210:	78fb      	ldrb	r3, [r7, #3]
20003212:	b2db      	uxtb	r3, r3
20003214:	005b      	lsls	r3, r3, #1
20003216:	b2db      	uxtb	r3, r3
20003218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
2000321a:	78fb      	ldrb	r3, [r7, #3]
2000321c:	b2db      	uxtb	r3, r3
2000321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20003222:	2b80      	cmp	r3, #128	; 0x80
20003224:	d0ef      	beq.n	20003206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
20003226:	4b27      	ldr	r3, [pc, #156]	; (200032c4 <xPortStartScheduler+0x134>)
20003228:	681b      	ldr	r3, [r3, #0]
2000322a:	f1c3 0307 	rsb	r3, r3, #7
2000322e:	2b04      	cmp	r3, #4
20003230:	d00a      	beq.n	20003248 <xPortStartScheduler+0xb8>
	__asm volatile
20003232:	f04f 0350 	mov.w	r3, #80	; 0x50
20003236:	f383 8811 	msr	BASEPRI, r3
2000323a:	f3bf 8f6f 	isb	sy
2000323e:	f3bf 8f4f 	dsb	sy
20003242:	60bb      	str	r3, [r7, #8]
}
20003244:	bf00      	nop
20003246:	e7fe      	b.n	20003246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
20003248:	4b1e      	ldr	r3, [pc, #120]	; (200032c4 <xPortStartScheduler+0x134>)
2000324a:	681b      	ldr	r3, [r3, #0]
2000324c:	021b      	lsls	r3, r3, #8
2000324e:	4a1d      	ldr	r2, [pc, #116]	; (200032c4 <xPortStartScheduler+0x134>)
20003250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
20003252:	4b1c      	ldr	r3, [pc, #112]	; (200032c4 <xPortStartScheduler+0x134>)
20003254:	681b      	ldr	r3, [r3, #0]
20003256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
2000325a:	4a1a      	ldr	r2, [pc, #104]	; (200032c4 <xPortStartScheduler+0x134>)
2000325c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
2000325e:	687b      	ldr	r3, [r7, #4]
20003260:	b2da      	uxtb	r2, r3
20003262:	697b      	ldr	r3, [r7, #20]
20003264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
20003266:	4b18      	ldr	r3, [pc, #96]	; (200032c8 <xPortStartScheduler+0x138>)
20003268:	681b      	ldr	r3, [r3, #0]
2000326a:	4a17      	ldr	r2, [pc, #92]	; (200032c8 <xPortStartScheduler+0x138>)
2000326c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20003270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
20003272:	4b15      	ldr	r3, [pc, #84]	; (200032c8 <xPortStartScheduler+0x138>)
20003274:	681b      	ldr	r3, [r3, #0]
20003276:	4a14      	ldr	r2, [pc, #80]	; (200032c8 <xPortStartScheduler+0x138>)
20003278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
2000327c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
2000327e:	f000 f8dd 	bl	2000343c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20003282:	4b12      	ldr	r3, [pc, #72]	; (200032cc <xPortStartScheduler+0x13c>)
20003284:	2200      	movs	r2, #0
20003286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
20003288:	f000 f8fc 	bl	20003484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
2000328c:	4b10      	ldr	r3, [pc, #64]	; (200032d0 <xPortStartScheduler+0x140>)
2000328e:	681b      	ldr	r3, [r3, #0]
20003290:	4a0f      	ldr	r2, [pc, #60]	; (200032d0 <xPortStartScheduler+0x140>)
20003292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
20003296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003298:	f7ff ff66 	bl	20003168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
2000329c:	f7ff f84c 	bl	20002338 <vTaskSwitchContext>
	prvTaskExitError();
200032a0:	f7ff ff22 	bl	200030e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
200032a4:	2300      	movs	r3, #0
}
200032a6:	4618      	mov	r0, r3
200032a8:	3718      	adds	r7, #24
200032aa:	46bd      	mov	sp, r7
200032ac:	bd80      	pop	{r7, pc}
200032ae:	bf00      	nop
200032b0:	e000ed00 	.word	0xe000ed00
200032b4:	410fc271 	.word	0x410fc271
200032b8:	410fc270 	.word	0x410fc270
200032bc:	e000e400 	.word	0xe000e400
200032c0:	2000aa78 	.word	0x2000aa78
200032c4:	2000aa7c 	.word	0x2000aa7c
200032c8:	e000ed20 	.word	0xe000ed20
200032cc:	20009bb4 	.word	0x20009bb4
200032d0:	e000ef34 	.word	0xe000ef34

200032d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
200032d4:	b480      	push	{r7}
200032d6:	b083      	sub	sp, #12
200032d8:	af00      	add	r7, sp, #0
	__asm volatile
200032da:	f04f 0350 	mov.w	r3, #80	; 0x50
200032de:	f383 8811 	msr	BASEPRI, r3
200032e2:	f3bf 8f6f 	isb	sy
200032e6:	f3bf 8f4f 	dsb	sy
200032ea:	607b      	str	r3, [r7, #4]
}
200032ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
200032ee:	4b0f      	ldr	r3, [pc, #60]	; (2000332c <vPortEnterCritical+0x58>)
200032f0:	681b      	ldr	r3, [r3, #0]
200032f2:	3301      	adds	r3, #1
200032f4:	4a0d      	ldr	r2, [pc, #52]	; (2000332c <vPortEnterCritical+0x58>)
200032f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
200032f8:	4b0c      	ldr	r3, [pc, #48]	; (2000332c <vPortEnterCritical+0x58>)
200032fa:	681b      	ldr	r3, [r3, #0]
200032fc:	2b01      	cmp	r3, #1
200032fe:	d10f      	bne.n	20003320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003300:	4b0b      	ldr	r3, [pc, #44]	; (20003330 <vPortEnterCritical+0x5c>)
20003302:	681b      	ldr	r3, [r3, #0]
20003304:	b2db      	uxtb	r3, r3
20003306:	2b00      	cmp	r3, #0
20003308:	d00a      	beq.n	20003320 <vPortEnterCritical+0x4c>
	__asm volatile
2000330a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000330e:	f383 8811 	msr	BASEPRI, r3
20003312:	f3bf 8f6f 	isb	sy
20003316:	f3bf 8f4f 	dsb	sy
2000331a:	603b      	str	r3, [r7, #0]
}
2000331c:	bf00      	nop
2000331e:	e7fe      	b.n	2000331e <vPortEnterCritical+0x4a>
	}
}
20003320:	bf00      	nop
20003322:	370c      	adds	r7, #12
20003324:	46bd      	mov	sp, r7
20003326:	f85d 7b04 	ldr.w	r7, [sp], #4
2000332a:	4770      	bx	lr
2000332c:	20009bb4 	.word	0x20009bb4
20003330:	e000ed04 	.word	0xe000ed04

20003334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
20003334:	b480      	push	{r7}
20003336:	b083      	sub	sp, #12
20003338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
2000333a:	4b12      	ldr	r3, [pc, #72]	; (20003384 <vPortExitCritical+0x50>)
2000333c:	681b      	ldr	r3, [r3, #0]
2000333e:	2b00      	cmp	r3, #0
20003340:	d10a      	bne.n	20003358 <vPortExitCritical+0x24>
	__asm volatile
20003342:	f04f 0350 	mov.w	r3, #80	; 0x50
20003346:	f383 8811 	msr	BASEPRI, r3
2000334a:	f3bf 8f6f 	isb	sy
2000334e:	f3bf 8f4f 	dsb	sy
20003352:	607b      	str	r3, [r7, #4]
}
20003354:	bf00      	nop
20003356:	e7fe      	b.n	20003356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
20003358:	4b0a      	ldr	r3, [pc, #40]	; (20003384 <vPortExitCritical+0x50>)
2000335a:	681b      	ldr	r3, [r3, #0]
2000335c:	3b01      	subs	r3, #1
2000335e:	4a09      	ldr	r2, [pc, #36]	; (20003384 <vPortExitCritical+0x50>)
20003360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
20003362:	4b08      	ldr	r3, [pc, #32]	; (20003384 <vPortExitCritical+0x50>)
20003364:	681b      	ldr	r3, [r3, #0]
20003366:	2b00      	cmp	r3, #0
20003368:	d105      	bne.n	20003376 <vPortExitCritical+0x42>
2000336a:	2300      	movs	r3, #0
2000336c:	603b      	str	r3, [r7, #0]
	__asm volatile
2000336e:	683b      	ldr	r3, [r7, #0]
20003370:	f383 8811 	msr	BASEPRI, r3
}
20003374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
20003376:	bf00      	nop
20003378:	370c      	adds	r7, #12
2000337a:	46bd      	mov	sp, r7
2000337c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003380:	4770      	bx	lr
20003382:	bf00      	nop
20003384:	20009bb4 	.word	0x20009bb4
	...

20003390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003390:	f3ef 8009 	mrs	r0, PSP
20003394:	f3bf 8f6f 	isb	sy
20003398:	4b15      	ldr	r3, [pc, #84]	; (200033f0 <pxCurrentTCBConst>)
2000339a:	681a      	ldr	r2, [r3, #0]
2000339c:	f01e 0f10 	tst.w	lr, #16
200033a0:	bf08      	it	eq
200033a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
200033a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200033aa:	6010      	str	r0, [r2, #0]
200033ac:	e92d 0009 	stmdb	sp!, {r0, r3}
200033b0:	f04f 0050 	mov.w	r0, #80	; 0x50
200033b4:	f380 8811 	msr	BASEPRI, r0
200033b8:	f3bf 8f4f 	dsb	sy
200033bc:	f3bf 8f6f 	isb	sy
200033c0:	f7fe ffba 	bl	20002338 <vTaskSwitchContext>
200033c4:	f04f 0000 	mov.w	r0, #0
200033c8:	f380 8811 	msr	BASEPRI, r0
200033cc:	bc09      	pop	{r0, r3}
200033ce:	6819      	ldr	r1, [r3, #0]
200033d0:	6808      	ldr	r0, [r1, #0]
200033d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200033d6:	f01e 0f10 	tst.w	lr, #16
200033da:	bf08      	it	eq
200033dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
200033e0:	f380 8809 	msr	PSP, r0
200033e4:	f3bf 8f6f 	isb	sy
200033e8:	4770      	bx	lr
200033ea:	bf00      	nop
200033ec:	f3af 8000 	nop.w

200033f0 <pxCurrentTCBConst>:
200033f0:	2000a44c 	.word	0x2000a44c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
200033f4:	bf00      	nop
200033f6:	bf00      	nop

200033f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
200033f8:	b580      	push	{r7, lr}
200033fa:	b082      	sub	sp, #8
200033fc:	af00      	add	r7, sp, #0
	__asm volatile
200033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
20003402:	f383 8811 	msr	BASEPRI, r3
20003406:	f3bf 8f6f 	isb	sy
2000340a:	f3bf 8f4f 	dsb	sy
2000340e:	607b      	str	r3, [r7, #4]
}
20003410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20003412:	f7fe fed7 	bl	200021c4 <xTaskIncrementTick>
20003416:	4603      	mov	r3, r0
20003418:	2b00      	cmp	r3, #0
2000341a:	d003      	beq.n	20003424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
2000341c:	4b06      	ldr	r3, [pc, #24]	; (20003438 <xPortSysTickHandler+0x40>)
2000341e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003422:	601a      	str	r2, [r3, #0]
20003424:	2300      	movs	r3, #0
20003426:	603b      	str	r3, [r7, #0]
	__asm volatile
20003428:	683b      	ldr	r3, [r7, #0]
2000342a:	f383 8811 	msr	BASEPRI, r3
}
2000342e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
20003430:	bf00      	nop
20003432:	3708      	adds	r7, #8
20003434:	46bd      	mov	sp, r7
20003436:	bd80      	pop	{r7, pc}
20003438:	e000ed04 	.word	0xe000ed04

2000343c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
2000343c:	b480      	push	{r7}
2000343e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
20003440:	4b0b      	ldr	r3, [pc, #44]	; (20003470 <vPortSetupTimerInterrupt+0x34>)
20003442:	2200      	movs	r2, #0
20003444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
20003446:	4b0b      	ldr	r3, [pc, #44]	; (20003474 <vPortSetupTimerInterrupt+0x38>)
20003448:	2200      	movs	r2, #0
2000344a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
2000344c:	4b0a      	ldr	r3, [pc, #40]	; (20003478 <vPortSetupTimerInterrupt+0x3c>)
2000344e:	681b      	ldr	r3, [r3, #0]
20003450:	4a0a      	ldr	r2, [pc, #40]	; (2000347c <vPortSetupTimerInterrupt+0x40>)
20003452:	fba2 2303 	umull	r2, r3, r2, r3
20003456:	099b      	lsrs	r3, r3, #6
20003458:	4a09      	ldr	r2, [pc, #36]	; (20003480 <vPortSetupTimerInterrupt+0x44>)
2000345a:	3b01      	subs	r3, #1
2000345c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
2000345e:	4b04      	ldr	r3, [pc, #16]	; (20003470 <vPortSetupTimerInterrupt+0x34>)
20003460:	2207      	movs	r2, #7
20003462:	601a      	str	r2, [r3, #0]
}
20003464:	bf00      	nop
20003466:	46bd      	mov	sp, r7
20003468:	f85d 7b04 	ldr.w	r7, [sp], #4
2000346c:	4770      	bx	lr
2000346e:	bf00      	nop
20003470:	e000e010 	.word	0xe000e010
20003474:	e000e018 	.word	0xe000e018
20003478:	20009c0c 	.word	0x20009c0c
2000347c:	10624dd3 	.word	0x10624dd3
20003480:	e000e014 	.word	0xe000e014

20003484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
20003484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 20003494 <vPortEnableVFP+0x10>
20003488:	6801      	ldr	r1, [r0, #0]
2000348a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
2000348e:	6001      	str	r1, [r0, #0]
20003490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
20003492:	bf00      	nop
20003494:	e000ed88 	.word	0xe000ed88

20003498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20003498:	b480      	push	{r7}
2000349a:	b085      	sub	sp, #20
2000349c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
2000349e:	f3ef 8305 	mrs	r3, IPSR
200034a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
200034a4:	68fb      	ldr	r3, [r7, #12]
200034a6:	2b0f      	cmp	r3, #15
200034a8:	d914      	bls.n	200034d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
200034aa:	4a17      	ldr	r2, [pc, #92]	; (20003508 <vPortValidateInterruptPriority+0x70>)
200034ac:	68fb      	ldr	r3, [r7, #12]
200034ae:	4413      	add	r3, r2
200034b0:	781b      	ldrb	r3, [r3, #0]
200034b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
200034b4:	4b15      	ldr	r3, [pc, #84]	; (2000350c <vPortValidateInterruptPriority+0x74>)
200034b6:	781b      	ldrb	r3, [r3, #0]
200034b8:	7afa      	ldrb	r2, [r7, #11]
200034ba:	429a      	cmp	r2, r3
200034bc:	d20a      	bcs.n	200034d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
200034be:	f04f 0350 	mov.w	r3, #80	; 0x50
200034c2:	f383 8811 	msr	BASEPRI, r3
200034c6:	f3bf 8f6f 	isb	sy
200034ca:	f3bf 8f4f 	dsb	sy
200034ce:	607b      	str	r3, [r7, #4]
}
200034d0:	bf00      	nop
200034d2:	e7fe      	b.n	200034d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
200034d4:	4b0e      	ldr	r3, [pc, #56]	; (20003510 <vPortValidateInterruptPriority+0x78>)
200034d6:	681b      	ldr	r3, [r3, #0]
200034d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
200034dc:	4b0d      	ldr	r3, [pc, #52]	; (20003514 <vPortValidateInterruptPriority+0x7c>)
200034de:	681b      	ldr	r3, [r3, #0]
200034e0:	429a      	cmp	r2, r3
200034e2:	d90a      	bls.n	200034fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
200034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
200034e8:	f383 8811 	msr	BASEPRI, r3
200034ec:	f3bf 8f6f 	isb	sy
200034f0:	f3bf 8f4f 	dsb	sy
200034f4:	603b      	str	r3, [r7, #0]
}
200034f6:	bf00      	nop
200034f8:	e7fe      	b.n	200034f8 <vPortValidateInterruptPriority+0x60>
	}
200034fa:	bf00      	nop
200034fc:	3714      	adds	r7, #20
200034fe:	46bd      	mov	sp, r7
20003500:	f85d 7b04 	ldr.w	r7, [sp], #4
20003504:	4770      	bx	lr
20003506:	bf00      	nop
20003508:	e000e3f0 	.word	0xe000e3f0
2000350c:	2000aa78 	.word	0x2000aa78
20003510:	e000ed0c 	.word	0xe000ed0c
20003514:	2000aa7c 	.word	0x2000aa7c

20003518 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003518:	b580      	push	{r7, lr}
2000351a:	b08a      	sub	sp, #40	; 0x28
2000351c:	af00      	add	r7, sp, #0
2000351e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003520:	2300      	movs	r3, #0
20003522:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
20003524:	f7fe fd92 	bl	2000204c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003528:	4b5b      	ldr	r3, [pc, #364]	; (20003698 <pvPortMalloc+0x180>)
2000352a:	681b      	ldr	r3, [r3, #0]
2000352c:	2b00      	cmp	r3, #0
2000352e:	d101      	bne.n	20003534 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
20003530:	f000 f920 	bl	20003774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003534:	4b59      	ldr	r3, [pc, #356]	; (2000369c <pvPortMalloc+0x184>)
20003536:	681a      	ldr	r2, [r3, #0]
20003538:	687b      	ldr	r3, [r7, #4]
2000353a:	4013      	ands	r3, r2
2000353c:	2b00      	cmp	r3, #0
2000353e:	f040 8093 	bne.w	20003668 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003542:	687b      	ldr	r3, [r7, #4]
20003544:	2b00      	cmp	r3, #0
20003546:	d01d      	beq.n	20003584 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
20003548:	2208      	movs	r2, #8
2000354a:	687b      	ldr	r3, [r7, #4]
2000354c:	4413      	add	r3, r2
2000354e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003550:	687b      	ldr	r3, [r7, #4]
20003552:	f003 0307 	and.w	r3, r3, #7
20003556:	2b00      	cmp	r3, #0
20003558:	d014      	beq.n	20003584 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
2000355a:	687b      	ldr	r3, [r7, #4]
2000355c:	f023 0307 	bic.w	r3, r3, #7
20003560:	3308      	adds	r3, #8
20003562:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003564:	687b      	ldr	r3, [r7, #4]
20003566:	f003 0307 	and.w	r3, r3, #7
2000356a:	2b00      	cmp	r3, #0
2000356c:	d00a      	beq.n	20003584 <pvPortMalloc+0x6c>
	__asm volatile
2000356e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003572:	f383 8811 	msr	BASEPRI, r3
20003576:	f3bf 8f6f 	isb	sy
2000357a:	f3bf 8f4f 	dsb	sy
2000357e:	617b      	str	r3, [r7, #20]
}
20003580:	bf00      	nop
20003582:	e7fe      	b.n	20003582 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003584:	687b      	ldr	r3, [r7, #4]
20003586:	2b00      	cmp	r3, #0
20003588:	d06e      	beq.n	20003668 <pvPortMalloc+0x150>
2000358a:	4b45      	ldr	r3, [pc, #276]	; (200036a0 <pvPortMalloc+0x188>)
2000358c:	681b      	ldr	r3, [r3, #0]
2000358e:	687a      	ldr	r2, [r7, #4]
20003590:	429a      	cmp	r2, r3
20003592:	d869      	bhi.n	20003668 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003594:	4b43      	ldr	r3, [pc, #268]	; (200036a4 <pvPortMalloc+0x18c>)
20003596:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
20003598:	4b42      	ldr	r3, [pc, #264]	; (200036a4 <pvPortMalloc+0x18c>)
2000359a:	681b      	ldr	r3, [r3, #0]
2000359c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
2000359e:	e004      	b.n	200035aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
200035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200035a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
200035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200035a6:	681b      	ldr	r3, [r3, #0]
200035a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
200035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200035ac:	685b      	ldr	r3, [r3, #4]
200035ae:	687a      	ldr	r2, [r7, #4]
200035b0:	429a      	cmp	r2, r3
200035b2:	d903      	bls.n	200035bc <pvPortMalloc+0xa4>
200035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200035b6:	681b      	ldr	r3, [r3, #0]
200035b8:	2b00      	cmp	r3, #0
200035ba:	d1f1      	bne.n	200035a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
200035bc:	4b36      	ldr	r3, [pc, #216]	; (20003698 <pvPortMalloc+0x180>)
200035be:	681b      	ldr	r3, [r3, #0]
200035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200035c2:	429a      	cmp	r2, r3
200035c4:	d050      	beq.n	20003668 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
200035c6:	6a3b      	ldr	r3, [r7, #32]
200035c8:	681b      	ldr	r3, [r3, #0]
200035ca:	2208      	movs	r2, #8
200035cc:	4413      	add	r3, r2
200035ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
200035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200035d2:	681a      	ldr	r2, [r3, #0]
200035d4:	6a3b      	ldr	r3, [r7, #32]
200035d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
200035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200035da:	685a      	ldr	r2, [r3, #4]
200035dc:	687b      	ldr	r3, [r7, #4]
200035de:	1ad2      	subs	r2, r2, r3
200035e0:	2308      	movs	r3, #8
200035e2:	005b      	lsls	r3, r3, #1
200035e4:	429a      	cmp	r2, r3
200035e6:	d91f      	bls.n	20003628 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
200035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200035ea:	687b      	ldr	r3, [r7, #4]
200035ec:	4413      	add	r3, r2
200035ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
200035f0:	69bb      	ldr	r3, [r7, #24]
200035f2:	f003 0307 	and.w	r3, r3, #7
200035f6:	2b00      	cmp	r3, #0
200035f8:	d00a      	beq.n	20003610 <pvPortMalloc+0xf8>
	__asm volatile
200035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
200035fe:	f383 8811 	msr	BASEPRI, r3
20003602:	f3bf 8f6f 	isb	sy
20003606:	f3bf 8f4f 	dsb	sy
2000360a:	613b      	str	r3, [r7, #16]
}
2000360c:	bf00      	nop
2000360e:	e7fe      	b.n	2000360e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003612:	685a      	ldr	r2, [r3, #4]
20003614:	687b      	ldr	r3, [r7, #4]
20003616:	1ad2      	subs	r2, r2, r3
20003618:	69bb      	ldr	r3, [r7, #24]
2000361a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
2000361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000361e:	687a      	ldr	r2, [r7, #4]
20003620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003622:	69b8      	ldr	r0, [r7, #24]
20003624:	f000 f908 	bl	20003838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003628:	4b1d      	ldr	r3, [pc, #116]	; (200036a0 <pvPortMalloc+0x188>)
2000362a:	681a      	ldr	r2, [r3, #0]
2000362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000362e:	685b      	ldr	r3, [r3, #4]
20003630:	1ad3      	subs	r3, r2, r3
20003632:	4a1b      	ldr	r2, [pc, #108]	; (200036a0 <pvPortMalloc+0x188>)
20003634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20003636:	4b1a      	ldr	r3, [pc, #104]	; (200036a0 <pvPortMalloc+0x188>)
20003638:	681a      	ldr	r2, [r3, #0]
2000363a:	4b1b      	ldr	r3, [pc, #108]	; (200036a8 <pvPortMalloc+0x190>)
2000363c:	681b      	ldr	r3, [r3, #0]
2000363e:	429a      	cmp	r2, r3
20003640:	d203      	bcs.n	2000364a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20003642:	4b17      	ldr	r3, [pc, #92]	; (200036a0 <pvPortMalloc+0x188>)
20003644:	681b      	ldr	r3, [r3, #0]
20003646:	4a18      	ldr	r2, [pc, #96]	; (200036a8 <pvPortMalloc+0x190>)
20003648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
2000364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000364c:	685a      	ldr	r2, [r3, #4]
2000364e:	4b13      	ldr	r3, [pc, #76]	; (2000369c <pvPortMalloc+0x184>)
20003650:	681b      	ldr	r3, [r3, #0]
20003652:	431a      	orrs	r2, r3
20003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000365a:	2200      	movs	r2, #0
2000365c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
2000365e:	4b13      	ldr	r3, [pc, #76]	; (200036ac <pvPortMalloc+0x194>)
20003660:	681b      	ldr	r3, [r3, #0]
20003662:	3301      	adds	r3, #1
20003664:	4a11      	ldr	r2, [pc, #68]	; (200036ac <pvPortMalloc+0x194>)
20003666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20003668:	f7fe fcfe 	bl	20002068 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
2000366c:	69fb      	ldr	r3, [r7, #28]
2000366e:	f003 0307 	and.w	r3, r3, #7
20003672:	2b00      	cmp	r3, #0
20003674:	d00a      	beq.n	2000368c <pvPortMalloc+0x174>
	__asm volatile
20003676:	f04f 0350 	mov.w	r3, #80	; 0x50
2000367a:	f383 8811 	msr	BASEPRI, r3
2000367e:	f3bf 8f6f 	isb	sy
20003682:	f3bf 8f4f 	dsb	sy
20003686:	60fb      	str	r3, [r7, #12]
}
20003688:	bf00      	nop
2000368a:	e7fe      	b.n	2000368a <pvPortMalloc+0x172>
	return pvReturn;
2000368c:	69fb      	ldr	r3, [r7, #28]
}
2000368e:	4618      	mov	r0, r3
20003690:	3728      	adds	r7, #40	; 0x28
20003692:	46bd      	mov	sp, r7
20003694:	bd80      	pop	{r7, pc}
20003696:	bf00      	nop
20003698:	2000e688 	.word	0x2000e688
2000369c:	2000e69c 	.word	0x2000e69c
200036a0:	2000e68c 	.word	0x2000e68c
200036a4:	2000e680 	.word	0x2000e680
200036a8:	2000e690 	.word	0x2000e690
200036ac:	2000e694 	.word	0x2000e694

200036b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
200036b0:	b580      	push	{r7, lr}
200036b2:	b086      	sub	sp, #24
200036b4:	af00      	add	r7, sp, #0
200036b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
200036b8:	687b      	ldr	r3, [r7, #4]
200036ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
200036bc:	687b      	ldr	r3, [r7, #4]
200036be:	2b00      	cmp	r3, #0
200036c0:	d04d      	beq.n	2000375e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
200036c2:	2308      	movs	r3, #8
200036c4:	425b      	negs	r3, r3
200036c6:	697a      	ldr	r2, [r7, #20]
200036c8:	4413      	add	r3, r2
200036ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
200036cc:	697b      	ldr	r3, [r7, #20]
200036ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
200036d0:	693b      	ldr	r3, [r7, #16]
200036d2:	685a      	ldr	r2, [r3, #4]
200036d4:	4b24      	ldr	r3, [pc, #144]	; (20003768 <vPortFree+0xb8>)
200036d6:	681b      	ldr	r3, [r3, #0]
200036d8:	4013      	ands	r3, r2
200036da:	2b00      	cmp	r3, #0
200036dc:	d10a      	bne.n	200036f4 <vPortFree+0x44>
	__asm volatile
200036de:	f04f 0350 	mov.w	r3, #80	; 0x50
200036e2:	f383 8811 	msr	BASEPRI, r3
200036e6:	f3bf 8f6f 	isb	sy
200036ea:	f3bf 8f4f 	dsb	sy
200036ee:	60fb      	str	r3, [r7, #12]
}
200036f0:	bf00      	nop
200036f2:	e7fe      	b.n	200036f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
200036f4:	693b      	ldr	r3, [r7, #16]
200036f6:	681b      	ldr	r3, [r3, #0]
200036f8:	2b00      	cmp	r3, #0
200036fa:	d00a      	beq.n	20003712 <vPortFree+0x62>
	__asm volatile
200036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
20003700:	f383 8811 	msr	BASEPRI, r3
20003704:	f3bf 8f6f 	isb	sy
20003708:	f3bf 8f4f 	dsb	sy
2000370c:	60bb      	str	r3, [r7, #8]
}
2000370e:	bf00      	nop
20003710:	e7fe      	b.n	20003710 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003712:	693b      	ldr	r3, [r7, #16]
20003714:	685a      	ldr	r2, [r3, #4]
20003716:	4b14      	ldr	r3, [pc, #80]	; (20003768 <vPortFree+0xb8>)
20003718:	681b      	ldr	r3, [r3, #0]
2000371a:	4013      	ands	r3, r2
2000371c:	2b00      	cmp	r3, #0
2000371e:	d01e      	beq.n	2000375e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003720:	693b      	ldr	r3, [r7, #16]
20003722:	681b      	ldr	r3, [r3, #0]
20003724:	2b00      	cmp	r3, #0
20003726:	d11a      	bne.n	2000375e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003728:	693b      	ldr	r3, [r7, #16]
2000372a:	685a      	ldr	r2, [r3, #4]
2000372c:	4b0e      	ldr	r3, [pc, #56]	; (20003768 <vPortFree+0xb8>)
2000372e:	681b      	ldr	r3, [r3, #0]
20003730:	43db      	mvns	r3, r3
20003732:	401a      	ands	r2, r3
20003734:	693b      	ldr	r3, [r7, #16]
20003736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003738:	f7fe fc88 	bl	2000204c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
2000373c:	693b      	ldr	r3, [r7, #16]
2000373e:	685a      	ldr	r2, [r3, #4]
20003740:	4b0a      	ldr	r3, [pc, #40]	; (2000376c <vPortFree+0xbc>)
20003742:	681b      	ldr	r3, [r3, #0]
20003744:	4413      	add	r3, r2
20003746:	4a09      	ldr	r2, [pc, #36]	; (2000376c <vPortFree+0xbc>)
20003748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
2000374a:	6938      	ldr	r0, [r7, #16]
2000374c:	f000 f874 	bl	20003838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
20003750:	4b07      	ldr	r3, [pc, #28]	; (20003770 <vPortFree+0xc0>)
20003752:	681b      	ldr	r3, [r3, #0]
20003754:	3301      	adds	r3, #1
20003756:	4a06      	ldr	r2, [pc, #24]	; (20003770 <vPortFree+0xc0>)
20003758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
2000375a:	f7fe fc85 	bl	20002068 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
2000375e:	bf00      	nop
20003760:	3718      	adds	r7, #24
20003762:	46bd      	mov	sp, r7
20003764:	bd80      	pop	{r7, pc}
20003766:	bf00      	nop
20003768:	2000e69c 	.word	0x2000e69c
2000376c:	2000e68c 	.word	0x2000e68c
20003770:	2000e698 	.word	0x2000e698

20003774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003774:	b480      	push	{r7}
20003776:	b085      	sub	sp, #20
20003778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
2000377a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
2000377e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003780:	4b27      	ldr	r3, [pc, #156]	; (20003820 <prvHeapInit+0xac>)
20003782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003784:	68fb      	ldr	r3, [r7, #12]
20003786:	f003 0307 	and.w	r3, r3, #7
2000378a:	2b00      	cmp	r3, #0
2000378c:	d00c      	beq.n	200037a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
2000378e:	68fb      	ldr	r3, [r7, #12]
20003790:	3307      	adds	r3, #7
20003792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003794:	68fb      	ldr	r3, [r7, #12]
20003796:	f023 0307 	bic.w	r3, r3, #7
2000379a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
2000379c:	68ba      	ldr	r2, [r7, #8]
2000379e:	68fb      	ldr	r3, [r7, #12]
200037a0:	1ad3      	subs	r3, r2, r3
200037a2:	4a1f      	ldr	r2, [pc, #124]	; (20003820 <prvHeapInit+0xac>)
200037a4:	4413      	add	r3, r2
200037a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
200037a8:	68fb      	ldr	r3, [r7, #12]
200037aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
200037ac:	4a1d      	ldr	r2, [pc, #116]	; (20003824 <prvHeapInit+0xb0>)
200037ae:	687b      	ldr	r3, [r7, #4]
200037b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
200037b2:	4b1c      	ldr	r3, [pc, #112]	; (20003824 <prvHeapInit+0xb0>)
200037b4:	2200      	movs	r2, #0
200037b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
200037b8:	687b      	ldr	r3, [r7, #4]
200037ba:	68ba      	ldr	r2, [r7, #8]
200037bc:	4413      	add	r3, r2
200037be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
200037c0:	2208      	movs	r2, #8
200037c2:	68fb      	ldr	r3, [r7, #12]
200037c4:	1a9b      	subs	r3, r3, r2
200037c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
200037c8:	68fb      	ldr	r3, [r7, #12]
200037ca:	f023 0307 	bic.w	r3, r3, #7
200037ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
200037d0:	68fb      	ldr	r3, [r7, #12]
200037d2:	4a15      	ldr	r2, [pc, #84]	; (20003828 <prvHeapInit+0xb4>)
200037d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
200037d6:	4b14      	ldr	r3, [pc, #80]	; (20003828 <prvHeapInit+0xb4>)
200037d8:	681b      	ldr	r3, [r3, #0]
200037da:	2200      	movs	r2, #0
200037dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
200037de:	4b12      	ldr	r3, [pc, #72]	; (20003828 <prvHeapInit+0xb4>)
200037e0:	681b      	ldr	r3, [r3, #0]
200037e2:	2200      	movs	r2, #0
200037e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
200037e6:	687b      	ldr	r3, [r7, #4]
200037e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
200037ea:	683b      	ldr	r3, [r7, #0]
200037ec:	68fa      	ldr	r2, [r7, #12]
200037ee:	1ad2      	subs	r2, r2, r3
200037f0:	683b      	ldr	r3, [r7, #0]
200037f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
200037f4:	4b0c      	ldr	r3, [pc, #48]	; (20003828 <prvHeapInit+0xb4>)
200037f6:	681a      	ldr	r2, [r3, #0]
200037f8:	683b      	ldr	r3, [r7, #0]
200037fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
200037fc:	683b      	ldr	r3, [r7, #0]
200037fe:	685b      	ldr	r3, [r3, #4]
20003800:	4a0a      	ldr	r2, [pc, #40]	; (2000382c <prvHeapInit+0xb8>)
20003802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003804:	683b      	ldr	r3, [r7, #0]
20003806:	685b      	ldr	r3, [r3, #4]
20003808:	4a09      	ldr	r2, [pc, #36]	; (20003830 <prvHeapInit+0xbc>)
2000380a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
2000380c:	4b09      	ldr	r3, [pc, #36]	; (20003834 <prvHeapInit+0xc0>)
2000380e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20003812:	601a      	str	r2, [r3, #0]
}
20003814:	bf00      	nop
20003816:	3714      	adds	r7, #20
20003818:	46bd      	mov	sp, r7
2000381a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000381e:	4770      	bx	lr
20003820:	2000aa80 	.word	0x2000aa80
20003824:	2000e680 	.word	0x2000e680
20003828:	2000e688 	.word	0x2000e688
2000382c:	2000e690 	.word	0x2000e690
20003830:	2000e68c 	.word	0x2000e68c
20003834:	2000e69c 	.word	0x2000e69c

20003838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20003838:	b480      	push	{r7}
2000383a:	b085      	sub	sp, #20
2000383c:	af00      	add	r7, sp, #0
2000383e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20003840:	4b28      	ldr	r3, [pc, #160]	; (200038e4 <prvInsertBlockIntoFreeList+0xac>)
20003842:	60fb      	str	r3, [r7, #12]
20003844:	e002      	b.n	2000384c <prvInsertBlockIntoFreeList+0x14>
20003846:	68fb      	ldr	r3, [r7, #12]
20003848:	681b      	ldr	r3, [r3, #0]
2000384a:	60fb      	str	r3, [r7, #12]
2000384c:	68fb      	ldr	r3, [r7, #12]
2000384e:	681b      	ldr	r3, [r3, #0]
20003850:	687a      	ldr	r2, [r7, #4]
20003852:	429a      	cmp	r2, r3
20003854:	d8f7      	bhi.n	20003846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20003856:	68fb      	ldr	r3, [r7, #12]
20003858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
2000385a:	68fb      	ldr	r3, [r7, #12]
2000385c:	685b      	ldr	r3, [r3, #4]
2000385e:	68ba      	ldr	r2, [r7, #8]
20003860:	4413      	add	r3, r2
20003862:	687a      	ldr	r2, [r7, #4]
20003864:	429a      	cmp	r2, r3
20003866:	d108      	bne.n	2000387a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20003868:	68fb      	ldr	r3, [r7, #12]
2000386a:	685a      	ldr	r2, [r3, #4]
2000386c:	687b      	ldr	r3, [r7, #4]
2000386e:	685b      	ldr	r3, [r3, #4]
20003870:	441a      	add	r2, r3
20003872:	68fb      	ldr	r3, [r7, #12]
20003874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20003876:	68fb      	ldr	r3, [r7, #12]
20003878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
2000387a:	687b      	ldr	r3, [r7, #4]
2000387c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
2000387e:	687b      	ldr	r3, [r7, #4]
20003880:	685b      	ldr	r3, [r3, #4]
20003882:	68ba      	ldr	r2, [r7, #8]
20003884:	441a      	add	r2, r3
20003886:	68fb      	ldr	r3, [r7, #12]
20003888:	681b      	ldr	r3, [r3, #0]
2000388a:	429a      	cmp	r2, r3
2000388c:	d118      	bne.n	200038c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
2000388e:	68fb      	ldr	r3, [r7, #12]
20003890:	681a      	ldr	r2, [r3, #0]
20003892:	4b15      	ldr	r3, [pc, #84]	; (200038e8 <prvInsertBlockIntoFreeList+0xb0>)
20003894:	681b      	ldr	r3, [r3, #0]
20003896:	429a      	cmp	r2, r3
20003898:	d00d      	beq.n	200038b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
2000389a:	687b      	ldr	r3, [r7, #4]
2000389c:	685a      	ldr	r2, [r3, #4]
2000389e:	68fb      	ldr	r3, [r7, #12]
200038a0:	681b      	ldr	r3, [r3, #0]
200038a2:	685b      	ldr	r3, [r3, #4]
200038a4:	441a      	add	r2, r3
200038a6:	687b      	ldr	r3, [r7, #4]
200038a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
200038aa:	68fb      	ldr	r3, [r7, #12]
200038ac:	681b      	ldr	r3, [r3, #0]
200038ae:	681a      	ldr	r2, [r3, #0]
200038b0:	687b      	ldr	r3, [r7, #4]
200038b2:	601a      	str	r2, [r3, #0]
200038b4:	e008      	b.n	200038c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
200038b6:	4b0c      	ldr	r3, [pc, #48]	; (200038e8 <prvInsertBlockIntoFreeList+0xb0>)
200038b8:	681a      	ldr	r2, [r3, #0]
200038ba:	687b      	ldr	r3, [r7, #4]
200038bc:	601a      	str	r2, [r3, #0]
200038be:	e003      	b.n	200038c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
200038c0:	68fb      	ldr	r3, [r7, #12]
200038c2:	681a      	ldr	r2, [r3, #0]
200038c4:	687b      	ldr	r3, [r7, #4]
200038c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
200038c8:	68fa      	ldr	r2, [r7, #12]
200038ca:	687b      	ldr	r3, [r7, #4]
200038cc:	429a      	cmp	r2, r3
200038ce:	d002      	beq.n	200038d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
200038d0:	68fb      	ldr	r3, [r7, #12]
200038d2:	687a      	ldr	r2, [r7, #4]
200038d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
200038d6:	bf00      	nop
200038d8:	3714      	adds	r7, #20
200038da:	46bd      	mov	sp, r7
200038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200038e0:	4770      	bx	lr
200038e2:	bf00      	nop
200038e4:	2000e680 	.word	0x2000e680
200038e8:	2000e688 	.word	0x2000e688

200038ec <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
200038ec:	b480      	push	{r7}
200038ee:	b083      	sub	sp, #12
200038f0:	af00      	add	r7, sp, #0
200038f2:	6078      	str	r0, [r7, #4]
200038f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
200038f6:	687b      	ldr	r3, [r7, #4]
200038f8:	683a      	ldr	r2, [r7, #0]
200038fa:	619a      	str	r2, [r3, #24]
}
200038fc:	bf00      	nop
200038fe:	370c      	adds	r7, #12
20003900:	46bd      	mov	sp, r7
20003902:	f85d 7b04 	ldr.w	r7, [sp], #4
20003906:	4770      	bx	lr

20003908 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
20003908:	b480      	push	{r7}
2000390a:	b083      	sub	sp, #12
2000390c:	af00      	add	r7, sp, #0
2000390e:	6078      	str	r0, [r7, #4]
20003910:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
20003912:	683b      	ldr	r3, [r7, #0]
20003914:	041a      	lsls	r2, r3, #16
20003916:	687b      	ldr	r3, [r7, #4]
20003918:	619a      	str	r2, [r3, #24]
}
2000391a:	bf00      	nop
2000391c:	370c      	adds	r7, #12
2000391e:	46bd      	mov	sp, r7
20003920:	f85d 7b04 	ldr.w	r7, [sp], #4
20003924:	4770      	bx	lr

20003926 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
20003926:	b480      	push	{r7}
20003928:	b083      	sub	sp, #12
2000392a:	af00      	add	r7, sp, #0
2000392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
2000392e:	687b      	ldr	r3, [r7, #4]
20003930:	689b      	ldr	r3, [r3, #8]
20003932:	f003 0301 	and.w	r3, r3, #1
20003936:	2b01      	cmp	r3, #1
20003938:	d101      	bne.n	2000393e <LL_SPI_IsActiveFlag_RXNE+0x18>
2000393a:	2301      	movs	r3, #1
2000393c:	e000      	b.n	20003940 <LL_SPI_IsActiveFlag_RXNE+0x1a>
2000393e:	2300      	movs	r3, #0
}
20003940:	4618      	mov	r0, r3
20003942:	370c      	adds	r7, #12
20003944:	46bd      	mov	sp, r7
20003946:	f85d 7b04 	ldr.w	r7, [sp], #4
2000394a:	4770      	bx	lr

2000394c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
2000394c:	b480      	push	{r7}
2000394e:	b083      	sub	sp, #12
20003950:	af00      	add	r7, sp, #0
20003952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
20003954:	687b      	ldr	r3, [r7, #4]
20003956:	689b      	ldr	r3, [r3, #8]
20003958:	f003 0302 	and.w	r3, r3, #2
2000395c:	2b02      	cmp	r3, #2
2000395e:	d101      	bne.n	20003964 <LL_SPI_IsActiveFlag_TXE+0x18>
20003960:	2301      	movs	r3, #1
20003962:	e000      	b.n	20003966 <LL_SPI_IsActiveFlag_TXE+0x1a>
20003964:	2300      	movs	r3, #0
}
20003966:	4618      	mov	r0, r3
20003968:	370c      	adds	r7, #12
2000396a:	46bd      	mov	sp, r7
2000396c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003970:	4770      	bx	lr

20003972 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
20003972:	b480      	push	{r7}
20003974:	b083      	sub	sp, #12
20003976:	af00      	add	r7, sp, #0
20003978:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
2000397a:	687b      	ldr	r3, [r7, #4]
2000397c:	330c      	adds	r3, #12
}
2000397e:	4618      	mov	r0, r3
20003980:	370c      	adds	r7, #12
20003982:	46bd      	mov	sp, r7
20003984:	f85d 7b04 	ldr.w	r7, [sp], #4
20003988:	4770      	bx	lr

2000398a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
2000398a:	b480      	push	{r7}
2000398c:	b083      	sub	sp, #12
2000398e:	af00      	add	r7, sp, #0
20003990:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
20003992:	687b      	ldr	r3, [r7, #4]
20003994:	330c      	adds	r3, #12
20003996:	781b      	ldrb	r3, [r3, #0]
20003998:	b2db      	uxtb	r3, r3
}
2000399a:	4618      	mov	r0, r3
2000399c:	370c      	adds	r7, #12
2000399e:	46bd      	mov	sp, r7
200039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
200039a4:	4770      	bx	lr

200039a6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
200039a6:	b480      	push	{r7}
200039a8:	b085      	sub	sp, #20
200039aa:	af00      	add	r7, sp, #0
200039ac:	6078      	str	r0, [r7, #4]
200039ae:	460b      	mov	r3, r1
200039b0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
200039b2:	687b      	ldr	r3, [r7, #4]
200039b4:	330c      	adds	r3, #12
200039b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
200039b8:	68fb      	ldr	r3, [r7, #12]
200039ba:	78fa      	ldrb	r2, [r7, #3]
200039bc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
200039be:	bf00      	nop
200039c0:	3714      	adds	r7, #20
200039c2:	46bd      	mov	sp, r7
200039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200039c8:	4770      	bx	lr
	...

200039cc <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
200039cc:	b480      	push	{r7}
200039ce:	b083      	sub	sp, #12
200039d0:	af00      	add	r7, sp, #0
200039d2:	6078      	str	r0, [r7, #4]
200039d4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
200039d6:	4a0c      	ldr	r2, [pc, #48]	; (20003a08 <LL_DMA_EnableStream+0x3c>)
200039d8:	683b      	ldr	r3, [r7, #0]
200039da:	4413      	add	r3, r2
200039dc:	781b      	ldrb	r3, [r3, #0]
200039de:	461a      	mov	r2, r3
200039e0:	687b      	ldr	r3, [r7, #4]
200039e2:	4413      	add	r3, r2
200039e4:	681b      	ldr	r3, [r3, #0]
200039e6:	4908      	ldr	r1, [pc, #32]	; (20003a08 <LL_DMA_EnableStream+0x3c>)
200039e8:	683a      	ldr	r2, [r7, #0]
200039ea:	440a      	add	r2, r1
200039ec:	7812      	ldrb	r2, [r2, #0]
200039ee:	4611      	mov	r1, r2
200039f0:	687a      	ldr	r2, [r7, #4]
200039f2:	440a      	add	r2, r1
200039f4:	f043 0301 	orr.w	r3, r3, #1
200039f8:	6013      	str	r3, [r2, #0]
}
200039fa:	bf00      	nop
200039fc:	370c      	adds	r7, #12
200039fe:	46bd      	mov	sp, r7
20003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a04:	4770      	bx	lr
20003a06:	bf00      	nop
20003a08:	20005de4 	.word	0x20005de4

20003a0c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
20003a0c:	b480      	push	{r7}
20003a0e:	b083      	sub	sp, #12
20003a10:	af00      	add	r7, sp, #0
20003a12:	6078      	str	r0, [r7, #4]
20003a14:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20003a16:	4a0c      	ldr	r2, [pc, #48]	; (20003a48 <LL_DMA_DisableStream+0x3c>)
20003a18:	683b      	ldr	r3, [r7, #0]
20003a1a:	4413      	add	r3, r2
20003a1c:	781b      	ldrb	r3, [r3, #0]
20003a1e:	461a      	mov	r2, r3
20003a20:	687b      	ldr	r3, [r7, #4]
20003a22:	4413      	add	r3, r2
20003a24:	681b      	ldr	r3, [r3, #0]
20003a26:	4908      	ldr	r1, [pc, #32]	; (20003a48 <LL_DMA_DisableStream+0x3c>)
20003a28:	683a      	ldr	r2, [r7, #0]
20003a2a:	440a      	add	r2, r1
20003a2c:	7812      	ldrb	r2, [r2, #0]
20003a2e:	4611      	mov	r1, r2
20003a30:	687a      	ldr	r2, [r7, #4]
20003a32:	440a      	add	r2, r1
20003a34:	f023 0301 	bic.w	r3, r3, #1
20003a38:	6013      	str	r3, [r2, #0]
}
20003a3a:	bf00      	nop
20003a3c:	370c      	adds	r7, #12
20003a3e:	46bd      	mov	sp, r7
20003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a44:	4770      	bx	lr
20003a46:	bf00      	nop
20003a48:	20005de4 	.word	0x20005de4

20003a4c <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
20003a4c:	b480      	push	{r7}
20003a4e:	b083      	sub	sp, #12
20003a50:	af00      	add	r7, sp, #0
20003a52:	6078      	str	r0, [r7, #4]
20003a54:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
20003a56:	4a08      	ldr	r2, [pc, #32]	; (20003a78 <LL_DMA_GetDataTransferDirection+0x2c>)
20003a58:	683b      	ldr	r3, [r7, #0]
20003a5a:	4413      	add	r3, r2
20003a5c:	781b      	ldrb	r3, [r3, #0]
20003a5e:	461a      	mov	r2, r3
20003a60:	687b      	ldr	r3, [r7, #4]
20003a62:	4413      	add	r3, r2
20003a64:	681b      	ldr	r3, [r3, #0]
20003a66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
20003a6a:	4618      	mov	r0, r3
20003a6c:	370c      	adds	r7, #12
20003a6e:	46bd      	mov	sp, r7
20003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
20003a74:	4770      	bx	lr
20003a76:	bf00      	nop
20003a78:	20005de4 	.word	0x20005de4

20003a7c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
20003a7c:	b480      	push	{r7}
20003a7e:	b085      	sub	sp, #20
20003a80:	af00      	add	r7, sp, #0
20003a82:	60f8      	str	r0, [r7, #12]
20003a84:	60b9      	str	r1, [r7, #8]
20003a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
20003a88:	4a0d      	ldr	r2, [pc, #52]	; (20003ac0 <LL_DMA_SetDataLength+0x44>)
20003a8a:	68bb      	ldr	r3, [r7, #8]
20003a8c:	4413      	add	r3, r2
20003a8e:	781b      	ldrb	r3, [r3, #0]
20003a90:	461a      	mov	r2, r3
20003a92:	68fb      	ldr	r3, [r7, #12]
20003a94:	4413      	add	r3, r2
20003a96:	685b      	ldr	r3, [r3, #4]
20003a98:	0c1b      	lsrs	r3, r3, #16
20003a9a:	041b      	lsls	r3, r3, #16
20003a9c:	4908      	ldr	r1, [pc, #32]	; (20003ac0 <LL_DMA_SetDataLength+0x44>)
20003a9e:	68ba      	ldr	r2, [r7, #8]
20003aa0:	440a      	add	r2, r1
20003aa2:	7812      	ldrb	r2, [r2, #0]
20003aa4:	4611      	mov	r1, r2
20003aa6:	68fa      	ldr	r2, [r7, #12]
20003aa8:	440a      	add	r2, r1
20003aaa:	4611      	mov	r1, r2
20003aac:	687a      	ldr	r2, [r7, #4]
20003aae:	4313      	orrs	r3, r2
20003ab0:	604b      	str	r3, [r1, #4]
}
20003ab2:	bf00      	nop
20003ab4:	3714      	adds	r7, #20
20003ab6:	46bd      	mov	sp, r7
20003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003abc:	4770      	bx	lr
20003abe:	bf00      	nop
20003ac0:	20005de4 	.word	0x20005de4

20003ac4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
20003ac4:	b480      	push	{r7}
20003ac6:	b085      	sub	sp, #20
20003ac8:	af00      	add	r7, sp, #0
20003aca:	60f8      	str	r0, [r7, #12]
20003acc:	60b9      	str	r1, [r7, #8]
20003ace:	607a      	str	r2, [r7, #4]
20003ad0:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
20003ad2:	69bb      	ldr	r3, [r7, #24]
20003ad4:	2b40      	cmp	r3, #64	; 0x40
20003ad6:	d114      	bne.n	20003b02 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
20003ad8:	4a17      	ldr	r2, [pc, #92]	; (20003b38 <LL_DMA_ConfigAddresses+0x74>)
20003ada:	68bb      	ldr	r3, [r7, #8]
20003adc:	4413      	add	r3, r2
20003ade:	781b      	ldrb	r3, [r3, #0]
20003ae0:	461a      	mov	r2, r3
20003ae2:	68fb      	ldr	r3, [r7, #12]
20003ae4:	4413      	add	r3, r2
20003ae6:	461a      	mov	r2, r3
20003ae8:	687b      	ldr	r3, [r7, #4]
20003aea:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
20003aec:	4a12      	ldr	r2, [pc, #72]	; (20003b38 <LL_DMA_ConfigAddresses+0x74>)
20003aee:	68bb      	ldr	r3, [r7, #8]
20003af0:	4413      	add	r3, r2
20003af2:	781b      	ldrb	r3, [r3, #0]
20003af4:	461a      	mov	r2, r3
20003af6:	68fb      	ldr	r3, [r7, #12]
20003af8:	4413      	add	r3, r2
20003afa:	461a      	mov	r2, r3
20003afc:	683b      	ldr	r3, [r7, #0]
20003afe:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
20003b00:	e013      	b.n	20003b2a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
20003b02:	4a0d      	ldr	r2, [pc, #52]	; (20003b38 <LL_DMA_ConfigAddresses+0x74>)
20003b04:	68bb      	ldr	r3, [r7, #8]
20003b06:	4413      	add	r3, r2
20003b08:	781b      	ldrb	r3, [r3, #0]
20003b0a:	461a      	mov	r2, r3
20003b0c:	68fb      	ldr	r3, [r7, #12]
20003b0e:	4413      	add	r3, r2
20003b10:	461a      	mov	r2, r3
20003b12:	687b      	ldr	r3, [r7, #4]
20003b14:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
20003b16:	4a08      	ldr	r2, [pc, #32]	; (20003b38 <LL_DMA_ConfigAddresses+0x74>)
20003b18:	68bb      	ldr	r3, [r7, #8]
20003b1a:	4413      	add	r3, r2
20003b1c:	781b      	ldrb	r3, [r3, #0]
20003b1e:	461a      	mov	r2, r3
20003b20:	68fb      	ldr	r3, [r7, #12]
20003b22:	4413      	add	r3, r2
20003b24:	461a      	mov	r2, r3
20003b26:	683b      	ldr	r3, [r7, #0]
20003b28:	60d3      	str	r3, [r2, #12]
}
20003b2a:	bf00      	nop
20003b2c:	3714      	adds	r7, #20
20003b2e:	46bd      	mov	sp, r7
20003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
20003b34:	4770      	bx	lr
20003b36:	bf00      	nop
20003b38:	20005de4 	.word	0x20005de4

20003b3c <TFTDisplay_ILI9341_Initialization>:
static void tftDisplay_ILI9341_Reset(void);
static void tftDisplay_ILI9341_FontsInitialization(void);
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_Initialization(uint16_t screenWidth, uint16_t screeHeight)
{
20003b3c:	b580      	push	{r7, lr}
20003b3e:	b082      	sub	sp, #8
20003b40:	af00      	add	r7, sp, #0
20003b42:	4603      	mov	r3, r0
20003b44:	460a      	mov	r2, r1
20003b46:	80fb      	strh	r3, [r7, #6]
20003b48:	4613      	mov	r3, r2
20003b4a:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE();
20003b4c:	2104      	movs	r1, #4
20003b4e:	4823      	ldr	r0, [pc, #140]	; (20003bdc <TFTDisplay_ILI9341_Initialization+0xa0>)
20003b50:	f7ff feda 	bl	20003908 <LL_GPIO_ResetOutputPin>
	tftDisplay_ILI9341_Reset();
20003b54:	f000 fb8a 	bl	2000426c <tftDisplay_ILI9341_Reset>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SWRESET);
20003b58:	2001      	movs	r0, #1
20003b5a:	f000 fa6b 	bl	20004034 <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(1000);
20003b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20003b62:	f7fc ff67 	bl	20000a34 <LL_mDelay>

	tftDisplay_ILI9341_Init_PowerControl_A();
20003b66:	f000 fc21 	bl	200043ac <tftDisplay_ILI9341_Init_PowerControl_A>
	tftDisplay_ILI9341_Init_PowerControl_B();
20003b6a:	f000 fc3d 	bl	200043e8 <tftDisplay_ILI9341_Init_PowerControl_B>
	tftDisplay_ILI9341_Init_DriverTimingControl_A();
20003b6e:	f000 fc53 	bl	20004418 <tftDisplay_ILI9341_Init_DriverTimingControl_A>
	tftDisplay_ILI9341_Init_DriverTimingControl_B();
20003b72:	f000 fc69 	bl	20004448 <tftDisplay_ILI9341_Init_DriverTimingControl_B>
	tftDisplay_ILI9341_Init_PowerSequenceControl();
20003b76:	f000 fc7b 	bl	20004470 <tftDisplay_ILI9341_Init_PowerSequenceControl>
	tftDisplay_ILI9341_Init_PumpRatioControl();
20003b7a:	f000 fc93 	bl	200044a4 <tftDisplay_ILI9341_Init_PumpRatioControl>
	tftDisplay_ILI9341_Init_PowerControlVRH();
20003b7e:	f000 fca1 	bl	200044c4 <tftDisplay_ILI9341_Init_PowerControlVRH>
	tftDisplay_ILI9341_Init_PowerControlSAP();
20003b82:	f000 fcaf 	bl	200044e4 <tftDisplay_ILI9341_Init_PowerControlSAP>
	tftDisplay_ILI9341_Init_VCOMControl_1();
20003b86:	f000 fcbd 	bl	20004504 <tftDisplay_ILI9341_Init_VCOMControl_1>
	tftDisplay_ILI9341_Init_VCOMControl_2();
20003b8a:	f000 fccf 	bl	2000452c <tftDisplay_ILI9341_Init_VCOMControl_2>
	tftDisplay_ILI9341_Init_MemmoryAccessControl();
20003b8e:	f000 fcdd 	bl	2000454c <tftDisplay_ILI9341_Init_MemmoryAccessControl>
	tftDisplay_ILI9341_Init_PixelFormatSet();
20003b92:	f000 fceb 	bl	2000456c <tftDisplay_ILI9341_Init_PixelFormatSet>
	tftDisplay_ILI9341_Init_FrameRationControl();
20003b96:	f000 fcf9 	bl	2000458c <tftDisplay_ILI9341_Init_FrameRationControl>
	tftDisplay_ILI9341_Init_DisplayFunctionControl();
20003b9a:	f000 fd0b 	bl	200045b4 <tftDisplay_ILI9341_Init_DisplayFunctionControl>
	tftDisplay_ILI9341_Init_GammaSet();
20003b9e:	f000 fd19 	bl	200045d4 <tftDisplay_ILI9341_Init_GammaSet>
	tftDisplay_ILI9341_Init_PositiveGammaCorection();
20003ba2:	f000 fd27 	bl	200045f4 <tftDisplay_ILI9341_Init_PositiveGammaCorection>
	tftDisplay_ILI9341_Init_NegativeGammaCorection();
20003ba6:	f000 fd61 	bl	2000466c <tftDisplay_ILI9341_Init_NegativeGammaCorection>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SLEEP_OUT);
20003baa:	2011      	movs	r0, #17
20003bac:	f000 fa42 	bl	20004034 <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(120);
20003bb0:	2078      	movs	r0, #120	; 0x78
20003bb2:	f7fc ff3f 	bl	20000a34 <LL_mDelay>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DISPLAY_ON);
20003bb6:	2029      	movs	r0, #41	; 0x29
20003bb8:	f000 fa3c 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(TFT_ILI9341_ROTATION);
20003bbc:	2048      	movs	r0, #72	; 0x48
20003bbe:	f000 fa87 	bl	200040d0 <tftDisplay_ILI9341_SendData>
	TFTDisplay_ILI9341_WIDTH = screenWidth;
20003bc2:	4a07      	ldr	r2, [pc, #28]	; (20003be0 <TFTDisplay_ILI9341_Initialization+0xa4>)
20003bc4:	88fb      	ldrh	r3, [r7, #6]
20003bc6:	8013      	strh	r3, [r2, #0]
	TFTDisplay_ILI9341_HEIGHT = screeHeight;
20003bc8:	4a06      	ldr	r2, [pc, #24]	; (20003be4 <TFTDisplay_ILI9341_Initialization+0xa8>)
20003bca:	88bb      	ldrh	r3, [r7, #4]
20003bcc:	8013      	strh	r3, [r2, #0]
	tftDisplay_ILI9341_FontsInitialization();
20003bce:	f000 fb61 	bl	20004294 <tftDisplay_ILI9341_FontsInitialization>
}
20003bd2:	bf00      	nop
20003bd4:	3708      	adds	r7, #8
20003bd6:	46bd      	mov	sp, r7
20003bd8:	bd80      	pop	{r7, pc}
20003bda:	bf00      	nop
20003bdc:	40020800 	.word	0x40020800
20003be0:	2000e6a0 	.word	0x2000e6a0
20003be4:	2000e6a2 	.word	0x2000e6a2

20003be8 <TFTDisplay_ILI9341_DrawPixel>:
{
	TFTDisplay_ILI9341_FillRect(0, 0, TFTDisplay_ILI9341_WIDTH-1, TFTDisplay_ILI9341_HEIGHT-1, color);
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawPixel(int x, int y, uint16_t color)
{
20003be8:	b580      	push	{r7, lr}
20003bea:	b084      	sub	sp, #16
20003bec:	af00      	add	r7, sp, #0
20003bee:	60f8      	str	r0, [r7, #12]
20003bf0:	60b9      	str	r1, [r7, #8]
20003bf2:	4613      	mov	r3, r2
20003bf4:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFTDisplay_ILI9341_WIDTH)||(y>=TFTDisplay_ILI9341_HEIGHT))
20003bf6:	68fb      	ldr	r3, [r7, #12]
20003bf8:	2b00      	cmp	r3, #0
20003bfa:	db2b      	blt.n	20003c54 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20003bfc:	68bb      	ldr	r3, [r7, #8]
20003bfe:	2b00      	cmp	r3, #0
20003c00:	db28      	blt.n	20003c54 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20003c02:	4b16      	ldr	r3, [pc, #88]	; (20003c5c <TFTDisplay_ILI9341_DrawPixel+0x74>)
20003c04:	881b      	ldrh	r3, [r3, #0]
20003c06:	461a      	mov	r2, r3
20003c08:	68fb      	ldr	r3, [r7, #12]
20003c0a:	4293      	cmp	r3, r2
20003c0c:	da22      	bge.n	20003c54 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20003c0e:	4b14      	ldr	r3, [pc, #80]	; (20003c60 <TFTDisplay_ILI9341_DrawPixel+0x78>)
20003c10:	881b      	ldrh	r3, [r3, #0]
20003c12:	461a      	mov	r2, r3
20003c14:	68bb      	ldr	r3, [r7, #8]
20003c16:	4293      	cmp	r3, r2
20003c18:	da1c      	bge.n	20003c54 <TFTDisplay_ILI9341_DrawPixel+0x6c>
	{
		return;
	}

	tftDisplay_ILI9341_SetAddrWindow(x,y,x,y);
20003c1a:	68fb      	ldr	r3, [r7, #12]
20003c1c:	b298      	uxth	r0, r3
20003c1e:	68bb      	ldr	r3, [r7, #8]
20003c20:	b299      	uxth	r1, r3
20003c22:	68fb      	ldr	r3, [r7, #12]
20003c24:	b29a      	uxth	r2, r3
20003c26:	68bb      	ldr	r3, [r7, #8]
20003c28:	b29b      	uxth	r3, r3
20003c2a:	f000 fb6f 	bl	2000430c <tftDisplay_ILI9341_SetAddrWindow>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
20003c2e:	202c      	movs	r0, #44	; 0x2c
20003c30:	f000 fa00 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	DataBuffer[0] = color>>8;
20003c34:	88fb      	ldrh	r3, [r7, #6]
20003c36:	0a1b      	lsrs	r3, r3, #8
20003c38:	b29b      	uxth	r3, r3
20003c3a:	b2da      	uxtb	r2, r3
20003c3c:	4b09      	ldr	r3, [pc, #36]	; (20003c64 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20003c3e:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = color & 0xFF;
20003c40:	88fb      	ldrh	r3, [r7, #6]
20003c42:	b2da      	uxtb	r2, r3
20003c44:	4b07      	ldr	r3, [pc, #28]	; (20003c64 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20003c46:	705a      	strb	r2, [r3, #1]


	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20003c48:	2201      	movs	r2, #1
20003c4a:	2102      	movs	r1, #2
20003c4c:	4805      	ldr	r0, [pc, #20]	; (20003c64 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
20003c4e:	f000 fabd 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
20003c52:	e000      	b.n	20003c56 <TFTDisplay_ILI9341_DrawPixel+0x6e>
		return;
20003c54:	bf00      	nop
}
20003c56:	3710      	adds	r7, #16
20003c58:	46bd      	mov	sp, r7
20003c5a:	bd80      	pop	{r7, pc}
20003c5c:	2000e6a0 	.word	0x2000e6a0
20003c60:	2000e6a2 	.word	0x2000e6a2
20003c64:	2000e6a8 	.word	0x2000e6a8

20003c68 <TFTDisplay_ILI9341_DrawLine>:
//------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawLine(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
20003c68:	b590      	push	{r4, r7, lr}
20003c6a:	b08b      	sub	sp, #44	; 0x2c
20003c6c:	af00      	add	r7, sp, #0
20003c6e:	4604      	mov	r4, r0
20003c70:	4608      	mov	r0, r1
20003c72:	4611      	mov	r1, r2
20003c74:	461a      	mov	r2, r3
20003c76:	4623      	mov	r3, r4
20003c78:	80fb      	strh	r3, [r7, #6]
20003c7a:	4603      	mov	r3, r0
20003c7c:	80bb      	strh	r3, [r7, #4]
20003c7e:	460b      	mov	r3, r1
20003c80:	807b      	strh	r3, [r7, #2]
20003c82:	4613      	mov	r3, r2
20003c84:	803b      	strh	r3, [r7, #0]
    int steep = abs(y_end-y_start)>abs(x_end-x_start);
20003c86:	883a      	ldrh	r2, [r7, #0]
20003c88:	88bb      	ldrh	r3, [r7, #4]
20003c8a:	1ad3      	subs	r3, r2, r3
20003c8c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20003c90:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20003c94:	8879      	ldrh	r1, [r7, #2]
20003c96:	88fb      	ldrh	r3, [r7, #6]
20003c98:	1acb      	subs	r3, r1, r3
20003c9a:	2b00      	cmp	r3, #0
20003c9c:	bfb8      	it	lt
20003c9e:	425b      	neglt	r3, r3
20003ca0:	429a      	cmp	r2, r3
20003ca2:	bfcc      	ite	gt
20003ca4:	2301      	movgt	r3, #1
20003ca6:	2300      	movle	r3, #0
20003ca8:	b2db      	uxtb	r3, r3
20003caa:	61fb      	str	r3, [r7, #28]
    int dx=0;
20003cac:	2300      	movs	r3, #0
20003cae:	61bb      	str	r3, [r7, #24]
    int dy=0;
20003cb0:	2300      	movs	r3, #0
20003cb2:	617b      	str	r3, [r7, #20]
    int err=0;
20003cb4:	2300      	movs	r3, #0
20003cb6:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep=0;
20003cb8:	2300      	movs	r3, #0
20003cba:	623b      	str	r3, [r7, #32]

    if (steep)
20003cbc:	69fb      	ldr	r3, [r7, #28]
20003cbe:	2b00      	cmp	r3, #0
20003cc0:	d00b      	beq.n	20003cda <TFTDisplay_ILI9341_DrawLine+0x72>
    {
    	SWAP(x_start,y_start);
20003cc2:	88fb      	ldrh	r3, [r7, #6]
20003cc4:	827b      	strh	r3, [r7, #18]
20003cc6:	88bb      	ldrh	r3, [r7, #4]
20003cc8:	80fb      	strh	r3, [r7, #6]
20003cca:	8a7b      	ldrh	r3, [r7, #18]
20003ccc:	80bb      	strh	r3, [r7, #4]
    	SWAP(x_end,y_end);
20003cce:	887b      	ldrh	r3, [r7, #2]
20003cd0:	823b      	strh	r3, [r7, #16]
20003cd2:	883b      	ldrh	r3, [r7, #0]
20003cd4:	807b      	strh	r3, [r7, #2]
20003cd6:	8a3b      	ldrh	r3, [r7, #16]
20003cd8:	803b      	strh	r3, [r7, #0]
    }

    if(x_start>x_end)
20003cda:	88fa      	ldrh	r2, [r7, #6]
20003cdc:	887b      	ldrh	r3, [r7, #2]
20003cde:	429a      	cmp	r2, r3
20003ce0:	d90b      	bls.n	20003cfa <TFTDisplay_ILI9341_DrawLine+0x92>
    {
    	SWAP(x_start,x_end);
20003ce2:	88fb      	ldrh	r3, [r7, #6]
20003ce4:	81fb      	strh	r3, [r7, #14]
20003ce6:	887b      	ldrh	r3, [r7, #2]
20003ce8:	80fb      	strh	r3, [r7, #6]
20003cea:	89fb      	ldrh	r3, [r7, #14]
20003cec:	807b      	strh	r3, [r7, #2]
    	SWAP(y_start,y_end);
20003cee:	88bb      	ldrh	r3, [r7, #4]
20003cf0:	81bb      	strh	r3, [r7, #12]
20003cf2:	883b      	ldrh	r3, [r7, #0]
20003cf4:	80bb      	strh	r3, [r7, #4]
20003cf6:	89bb      	ldrh	r3, [r7, #12]
20003cf8:	803b      	strh	r3, [r7, #0]
    }

    dx=x_end-x_start;
20003cfa:	887a      	ldrh	r2, [r7, #2]
20003cfc:	88fb      	ldrh	r3, [r7, #6]
20003cfe:	1ad3      	subs	r3, r2, r3
20003d00:	61bb      	str	r3, [r7, #24]
    dy=abs(y_end-y_start);
20003d02:	883a      	ldrh	r2, [r7, #0]
20003d04:	88bb      	ldrh	r3, [r7, #4]
20003d06:	1ad3      	subs	r3, r2, r3
20003d08:	2b00      	cmp	r3, #0
20003d0a:	bfb8      	it	lt
20003d0c:	425b      	neglt	r3, r3
20003d0e:	617b      	str	r3, [r7, #20]
    err=dx/2;
20003d10:	69bb      	ldr	r3, [r7, #24]
20003d12:	0fda      	lsrs	r2, r3, #31
20003d14:	4413      	add	r3, r2
20003d16:	105b      	asrs	r3, r3, #1
20003d18:	627b      	str	r3, [r7, #36]	; 0x24

    if(y_start<y_end)
20003d1a:	88ba      	ldrh	r2, [r7, #4]
20003d1c:	883b      	ldrh	r3, [r7, #0]
20003d1e:	429a      	cmp	r2, r3
20003d20:	d202      	bcs.n	20003d28 <TFTDisplay_ILI9341_DrawLine+0xc0>
    {
        ystep = 1;
20003d22:	2301      	movs	r3, #1
20003d24:	623b      	str	r3, [r7, #32]
20003d26:	e026      	b.n	20003d76 <TFTDisplay_ILI9341_DrawLine+0x10e>
    }
    else
    {
        ystep = -1;
20003d28:	f04f 33ff 	mov.w	r3, #4294967295
20003d2c:	623b      	str	r3, [r7, #32]
    }
    for (;x_start<=x_end;x_start++)
20003d2e:	e022      	b.n	20003d76 <TFTDisplay_ILI9341_DrawLine+0x10e>
    {
       if (steep)
20003d30:	69fb      	ldr	r3, [r7, #28]
20003d32:	2b00      	cmp	r3, #0
20003d34:	d006      	beq.n	20003d44 <TFTDisplay_ILI9341_DrawLine+0xdc>
       {
    	   TFTDisplay_ILI9341_DrawPixel(y_start,x_start,color);
20003d36:	88bb      	ldrh	r3, [r7, #4]
20003d38:	88f9      	ldrh	r1, [r7, #6]
20003d3a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20003d3c:	4618      	mov	r0, r3
20003d3e:	f7ff ff53 	bl	20003be8 <TFTDisplay_ILI9341_DrawPixel>
20003d42:	e005      	b.n	20003d50 <TFTDisplay_ILI9341_DrawLine+0xe8>
       }
       else
       {
    	   TFTDisplay_ILI9341_DrawPixel(x_start,y_start,color);
20003d44:	88fb      	ldrh	r3, [r7, #6]
20003d46:	88b9      	ldrh	r1, [r7, #4]
20003d48:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
20003d4a:	4618      	mov	r0, r3
20003d4c:	f7ff ff4c 	bl	20003be8 <TFTDisplay_ILI9341_DrawPixel>
       }
       err-=dy;
20003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003d52:	697b      	ldr	r3, [r7, #20]
20003d54:	1ad3      	subs	r3, r2, r3
20003d56:	627b      	str	r3, [r7, #36]	; 0x24
       if (err<0)
20003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d5a:	2b00      	cmp	r3, #0
20003d5c:	da08      	bge.n	20003d70 <TFTDisplay_ILI9341_DrawLine+0x108>
       {
        y_start += ystep;
20003d5e:	6a3b      	ldr	r3, [r7, #32]
20003d60:	b29a      	uxth	r2, r3
20003d62:	88bb      	ldrh	r3, [r7, #4]
20003d64:	4413      	add	r3, r2
20003d66:	80bb      	strh	r3, [r7, #4]
        err+=dx;
20003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003d6a:	69bb      	ldr	r3, [r7, #24]
20003d6c:	4413      	add	r3, r2
20003d6e:	627b      	str	r3, [r7, #36]	; 0x24
    for (;x_start<=x_end;x_start++)
20003d70:	88fb      	ldrh	r3, [r7, #6]
20003d72:	3301      	adds	r3, #1
20003d74:	80fb      	strh	r3, [r7, #6]
20003d76:	88fa      	ldrh	r2, [r7, #6]
20003d78:	887b      	ldrh	r3, [r7, #2]
20003d7a:	429a      	cmp	r2, r3
20003d7c:	d9d8      	bls.n	20003d30 <TFTDisplay_ILI9341_DrawLine+0xc8>
       }
    }
}
20003d7e:	bf00      	nop
20003d80:	bf00      	nop
20003d82:	372c      	adds	r7, #44	; 0x2c
20003d84:	46bd      	mov	sp, r7
20003d86:	bd90      	pop	{r4, r7, pc}

20003d88 <TFTDisplay_ILI9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
20003d88:	b590      	push	{r4, r7, lr}
20003d8a:	b08b      	sub	sp, #44	; 0x2c
20003d8c:	af00      	add	r7, sp, #0
20003d8e:	4603      	mov	r3, r0
20003d90:	80fb      	strh	r3, [r7, #6]
20003d92:	460b      	mov	r3, r1
20003d94:	80bb      	strh	r3, [r7, #4]
20003d96:	4613      	mov	r3, r2
20003d98:	70fb      	strb	r3, [r7, #3]
	if(led_inited){
20003d9a:	4b76      	ldr	r3, [pc, #472]	; (20003f74 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
20003d9c:	781b      	ldrb	r3, [r3, #0]
20003d9e:	2b00      	cmp	r3, #0
20003da0:	f000 80e4 	beq.w	20003f6c <TFTDisplay_ILI9341_DrawChar+0x1e4>
		uint32_t i = 0, j = 0;
20003da4:	2300      	movs	r3, #0
20003da6:	627b      	str	r3, [r7, #36]	; 0x24
20003da8:	2300      	movs	r3, #0
20003daa:	623b      	str	r3, [r7, #32]
		uint16_t height, width;
		uint16_t y_cur = y;
20003dac:	88bb      	ldrh	r3, [r7, #4]
20003dae:	83fb      	strh	r3, [r7, #30]
		uint8_t offset;
		uint8_t *c_t;
		uint8_t *pchar;
		uint32_t line=0;
20003db0:	2300      	movs	r3, #0
20003db2:	61bb      	str	r3, [r7, #24]
		height = lcdprop.pFont->Height;
20003db4:	4b70      	ldr	r3, [pc, #448]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003db6:	685b      	ldr	r3, [r3, #4]
20003db8:	88db      	ldrh	r3, [r3, #6]
20003dba:	82fb      	strh	r3, [r7, #22]
		width  = lcdprop.pFont->Width;
20003dbc:	4b6e      	ldr	r3, [pc, #440]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003dbe:	685b      	ldr	r3, [r3, #4]
20003dc0:	889b      	ldrh	r3, [r3, #4]
20003dc2:	82bb      	strh	r3, [r7, #20]
		offset = 8 *((width + 7)/8) -  width ;
20003dc4:	8abb      	ldrh	r3, [r7, #20]
20003dc6:	3307      	adds	r3, #7
20003dc8:	2b00      	cmp	r3, #0
20003dca:	da00      	bge.n	20003dce <TFTDisplay_ILI9341_DrawChar+0x46>
20003dcc:	3307      	adds	r3, #7
20003dce:	10db      	asrs	r3, r3, #3
20003dd0:	b2db      	uxtb	r3, r3
20003dd2:	00db      	lsls	r3, r3, #3
20003dd4:	b2da      	uxtb	r2, r3
20003dd6:	8abb      	ldrh	r3, [r7, #20]
20003dd8:	b2db      	uxtb	r3, r3
20003dda:	1ad3      	subs	r3, r2, r3
20003ddc:	74fb      	strb	r3, [r7, #19]
		c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
20003dde:	4b66      	ldr	r3, [pc, #408]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003de0:	685b      	ldr	r3, [r3, #4]
20003de2:	681a      	ldr	r2, [r3, #0]
20003de4:	78fb      	ldrb	r3, [r7, #3]
20003de6:	3b20      	subs	r3, #32
20003de8:	4963      	ldr	r1, [pc, #396]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003dea:	6849      	ldr	r1, [r1, #4]
20003dec:	88c9      	ldrh	r1, [r1, #6]
20003dee:	fb03 f101 	mul.w	r1, r3, r1
20003df2:	4b61      	ldr	r3, [pc, #388]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003df4:	685b      	ldr	r3, [r3, #4]
20003df6:	889b      	ldrh	r3, [r3, #4]
20003df8:	3307      	adds	r3, #7
20003dfa:	2b00      	cmp	r3, #0
20003dfc:	da00      	bge.n	20003e00 <TFTDisplay_ILI9341_DrawChar+0x78>
20003dfe:	3307      	adds	r3, #7
20003e00:	10db      	asrs	r3, r3, #3
20003e02:	fb01 f303 	mul.w	r3, r1, r3
20003e06:	4413      	add	r3, r2
20003e08:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < height; i++)
20003e0a:	2300      	movs	r3, #0
20003e0c:	627b      	str	r3, [r7, #36]	; 0x24
20003e0e:	e087      	b.n	20003f20 <TFTDisplay_ILI9341_DrawChar+0x198>
		{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
20003e10:	8abb      	ldrh	r3, [r7, #20]
20003e12:	3307      	adds	r3, #7
20003e14:	2b00      	cmp	r3, #0
20003e16:	da00      	bge.n	20003e1a <TFTDisplay_ILI9341_DrawChar+0x92>
20003e18:	3307      	adds	r3, #7
20003e1a:	10db      	asrs	r3, r3, #3
20003e1c:	461a      	mov	r2, r3
20003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003e20:	fb02 f303 	mul.w	r3, r2, r3
20003e24:	68fa      	ldr	r2, [r7, #12]
20003e26:	4413      	add	r3, r2
20003e28:	60bb      	str	r3, [r7, #8]
		switch(((width + 7)/8))
20003e2a:	8abb      	ldrh	r3, [r7, #20]
20003e2c:	3307      	adds	r3, #7
20003e2e:	2b00      	cmp	r3, #0
20003e30:	da00      	bge.n	20003e34 <TFTDisplay_ILI9341_DrawChar+0xac>
20003e32:	3307      	adds	r3, #7
20003e34:	10db      	asrs	r3, r3, #3
20003e36:	2b01      	cmp	r3, #1
20003e38:	d002      	beq.n	20003e40 <TFTDisplay_ILI9341_DrawChar+0xb8>
20003e3a:	2b02      	cmp	r3, #2
20003e3c:	d004      	beq.n	20003e48 <TFTDisplay_ILI9341_DrawChar+0xc0>
20003e3e:	e00c      	b.n	20003e5a <TFTDisplay_ILI9341_DrawChar+0xd2>
		{
		  case 1:
			  line =  pchar[0];
20003e40:	68bb      	ldr	r3, [r7, #8]
20003e42:	781b      	ldrb	r3, [r3, #0]
20003e44:	61bb      	str	r3, [r7, #24]
			  break;
20003e46:	e016      	b.n	20003e76 <TFTDisplay_ILI9341_DrawChar+0xee>
		  case 2:
			  line =  (pchar[0]<< 8) | pchar[1];
20003e48:	68bb      	ldr	r3, [r7, #8]
20003e4a:	781b      	ldrb	r3, [r3, #0]
20003e4c:	021b      	lsls	r3, r3, #8
20003e4e:	68ba      	ldr	r2, [r7, #8]
20003e50:	3201      	adds	r2, #1
20003e52:	7812      	ldrb	r2, [r2, #0]
20003e54:	4313      	orrs	r3, r2
20003e56:	61bb      	str	r3, [r7, #24]
			  break;
20003e58:	e00d      	b.n	20003e76 <TFTDisplay_ILI9341_DrawChar+0xee>
		  case 3:
		  default:
			line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
20003e5a:	68bb      	ldr	r3, [r7, #8]
20003e5c:	781b      	ldrb	r3, [r3, #0]
20003e5e:	041a      	lsls	r2, r3, #16
20003e60:	68bb      	ldr	r3, [r7, #8]
20003e62:	3301      	adds	r3, #1
20003e64:	781b      	ldrb	r3, [r3, #0]
20003e66:	021b      	lsls	r3, r3, #8
20003e68:	4313      	orrs	r3, r2
20003e6a:	68ba      	ldr	r2, [r7, #8]
20003e6c:	3202      	adds	r2, #2
20003e6e:	7812      	ldrb	r2, [r2, #0]
20003e70:	4313      	orrs	r3, r2
20003e72:	61bb      	str	r3, [r7, #24]
			break;
20003e74:	bf00      	nop
		}
		for (j = 0; j < width; j++)
20003e76:	2300      	movs	r3, #0
20003e78:	623b      	str	r3, [r7, #32]
20003e7a:	e047      	b.n	20003f0c <TFTDisplay_ILI9341_DrawChar+0x184>
		{
		  if(line & (1 << (width- j + offset- 1)))
20003e7c:	8aba      	ldrh	r2, [r7, #20]
20003e7e:	6a3b      	ldr	r3, [r7, #32]
20003e80:	1ad2      	subs	r2, r2, r3
20003e82:	7cfb      	ldrb	r3, [r7, #19]
20003e84:	4413      	add	r3, r2
20003e86:	3b01      	subs	r3, #1
20003e88:	2201      	movs	r2, #1
20003e8a:	fa02 f303 	lsl.w	r3, r2, r3
20003e8e:	461a      	mov	r2, r3
20003e90:	69bb      	ldr	r3, [r7, #24]
20003e92:	4013      	ands	r3, r2
20003e94:	2b00      	cmp	r3, #0
20003e96:	d01b      	beq.n	20003ed0 <TFTDisplay_ILI9341_DrawChar+0x148>
		  {
			DataBuffer[(i*width + j) * 2] = lcdprop.TextColor >> 8;
20003e98:	4b37      	ldr	r3, [pc, #220]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003e9a:	881b      	ldrh	r3, [r3, #0]
20003e9c:	0a1b      	lsrs	r3, r3, #8
20003e9e:	b299      	uxth	r1, r3
20003ea0:	8abb      	ldrh	r3, [r7, #20]
20003ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003ea4:	fb03 f202 	mul.w	r2, r3, r2
20003ea8:	6a3b      	ldr	r3, [r7, #32]
20003eaa:	4413      	add	r3, r2
20003eac:	005b      	lsls	r3, r3, #1
20003eae:	b2c9      	uxtb	r1, r1
20003eb0:	4a32      	ldr	r2, [pc, #200]	; (20003f7c <TFTDisplay_ILI9341_DrawChar+0x1f4>)
20003eb2:	54d1      	strb	r1, [r2, r3]
			DataBuffer[(i*width + j)*2+1] = lcdprop.TextColor & 0xFF;
20003eb4:	4b30      	ldr	r3, [pc, #192]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003eb6:	8819      	ldrh	r1, [r3, #0]
20003eb8:	8abb      	ldrh	r3, [r7, #20]
20003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003ebc:	fb03 f202 	mul.w	r2, r3, r2
20003ec0:	6a3b      	ldr	r3, [r7, #32]
20003ec2:	4413      	add	r3, r2
20003ec4:	005b      	lsls	r3, r3, #1
20003ec6:	3301      	adds	r3, #1
20003ec8:	b2c9      	uxtb	r1, r1
20003eca:	4a2c      	ldr	r2, [pc, #176]	; (20003f7c <TFTDisplay_ILI9341_DrawChar+0x1f4>)
20003ecc:	54d1      	strb	r1, [r2, r3]
20003ece:	e01a      	b.n	20003f06 <TFTDisplay_ILI9341_DrawChar+0x17e>
		  }
		  else
		  {
			DataBuffer[(i*width + j)*2] = lcdprop.BackColor >> 8;
20003ed0:	4b29      	ldr	r3, [pc, #164]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003ed2:	885b      	ldrh	r3, [r3, #2]
20003ed4:	0a1b      	lsrs	r3, r3, #8
20003ed6:	b299      	uxth	r1, r3
20003ed8:	8abb      	ldrh	r3, [r7, #20]
20003eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003edc:	fb03 f202 	mul.w	r2, r3, r2
20003ee0:	6a3b      	ldr	r3, [r7, #32]
20003ee2:	4413      	add	r3, r2
20003ee4:	005b      	lsls	r3, r3, #1
20003ee6:	b2c9      	uxtb	r1, r1
20003ee8:	4a24      	ldr	r2, [pc, #144]	; (20003f7c <TFTDisplay_ILI9341_DrawChar+0x1f4>)
20003eea:	54d1      	strb	r1, [r2, r3]
			DataBuffer[(i*width + j)*2+1] = lcdprop.BackColor & 0xFF;
20003eec:	4b22      	ldr	r3, [pc, #136]	; (20003f78 <TFTDisplay_ILI9341_DrawChar+0x1f0>)
20003eee:	8859      	ldrh	r1, [r3, #2]
20003ef0:	8abb      	ldrh	r3, [r7, #20]
20003ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003ef4:	fb03 f202 	mul.w	r2, r3, r2
20003ef8:	6a3b      	ldr	r3, [r7, #32]
20003efa:	4413      	add	r3, r2
20003efc:	005b      	lsls	r3, r3, #1
20003efe:	3301      	adds	r3, #1
20003f00:	b2c9      	uxtb	r1, r1
20003f02:	4a1e      	ldr	r2, [pc, #120]	; (20003f7c <TFTDisplay_ILI9341_DrawChar+0x1f4>)
20003f04:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
20003f06:	6a3b      	ldr	r3, [r7, #32]
20003f08:	3301      	adds	r3, #1
20003f0a:	623b      	str	r3, [r7, #32]
20003f0c:	8abb      	ldrh	r3, [r7, #20]
20003f0e:	6a3a      	ldr	r2, [r7, #32]
20003f10:	429a      	cmp	r2, r3
20003f12:	d3b3      	bcc.n	20003e7c <TFTDisplay_ILI9341_DrawChar+0xf4>
		  }
		}
		y_cur++;
20003f14:	8bfb      	ldrh	r3, [r7, #30]
20003f16:	3301      	adds	r3, #1
20003f18:	83fb      	strh	r3, [r7, #30]
		for(i = 0; i < height; i++)
20003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003f1c:	3301      	adds	r3, #1
20003f1e:	627b      	str	r3, [r7, #36]	; 0x24
20003f20:	8afb      	ldrh	r3, [r7, #22]
20003f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003f24:	429a      	cmp	r2, r3
20003f26:	f4ff af73 	bcc.w	20003e10 <TFTDisplay_ILI9341_DrawChar+0x88>
		}

		DmaSpiCnt = 1;
20003f2a:	4b15      	ldr	r3, [pc, #84]	; (20003f80 <TFTDisplay_ILI9341_DrawChar+0x1f8>)
20003f2c:	2201      	movs	r2, #1
20003f2e:	601a      	str	r2, [r3, #0]
		tftDisplay_ILI9341_SetAddrWindow(x, y, x+width-1, y+height-1);
20003f30:	88fa      	ldrh	r2, [r7, #6]
20003f32:	8abb      	ldrh	r3, [r7, #20]
20003f34:	4413      	add	r3, r2
20003f36:	b29b      	uxth	r3, r3
20003f38:	3b01      	subs	r3, #1
20003f3a:	b29c      	uxth	r4, r3
20003f3c:	88ba      	ldrh	r2, [r7, #4]
20003f3e:	8afb      	ldrh	r3, [r7, #22]
20003f40:	4413      	add	r3, r2
20003f42:	b29b      	uxth	r3, r3
20003f44:	3b01      	subs	r3, #1
20003f46:	b29b      	uxth	r3, r3
20003f48:	88b9      	ldrh	r1, [r7, #4]
20003f4a:	88f8      	ldrh	r0, [r7, #6]
20003f4c:	4622      	mov	r2, r4
20003f4e:	f000 f9dd 	bl	2000430c <tftDisplay_ILI9341_SetAddrWindow>
		tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], width * height * 2, DmaSpiCnt);
20003f52:	8abb      	ldrh	r3, [r7, #20]
20003f54:	8afa      	ldrh	r2, [r7, #22]
20003f56:	fb02 f303 	mul.w	r3, r2, r3
20003f5a:	005b      	lsls	r3, r3, #1
20003f5c:	4619      	mov	r1, r3
20003f5e:	4b08      	ldr	r3, [pc, #32]	; (20003f80 <TFTDisplay_ILI9341_DrawChar+0x1f8>)
20003f60:	681b      	ldr	r3, [r3, #0]
20003f62:	b2db      	uxtb	r3, r3
20003f64:	461a      	mov	r2, r3
20003f66:	4805      	ldr	r0, [pc, #20]	; (20003f7c <TFTDisplay_ILI9341_DrawChar+0x1f4>)
20003f68:	f000 f930 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
	}
}
20003f6c:	bf00      	nop
20003f6e:	372c      	adds	r7, #44	; 0x2c
20003f70:	46bd      	mov	sp, r7
20003f72:	bd90      	pop	{r4, r7, pc}
20003f74:	2000e6a4 	.word	0x2000e6a4
20003f78:	2001e6a8 	.word	0x2001e6a8
20003f7c:	2000e6a8 	.word	0x2000e6a8
20003f80:	20009be4 	.word	0x20009be4

20003f84 <TFTDisplay_ILI9341_SetRotation>:
      (void)*str++;
  }
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_SetRotation(uint8_t RotationSelectVal)
{
20003f84:	b580      	push	{r7, lr}
20003f86:	b082      	sub	sp, #8
20003f88:	af00      	add	r7, sp, #0
20003f8a:	4603      	mov	r3, r0
20003f8c:	71fb      	strb	r3, [r7, #7]
  tftDisplay_ILI9341_SendCommand(0x36);
20003f8e:	2036      	movs	r0, #54	; 0x36
20003f90:	f000 f850 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
  switch(RotationSelectVal)
20003f94:	79fb      	ldrb	r3, [r7, #7]
20003f96:	2b03      	cmp	r3, #3
20003f98:	d842      	bhi.n	20004020 <TFTDisplay_ILI9341_SetRotation+0x9c>
20003f9a:	a201      	add	r2, pc, #4	; (adr r2, 20003fa0 <TFTDisplay_ILI9341_SetRotation+0x1c>)
20003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003fa0:	20003fb1 	.word	0x20003fb1
20003fa4:	20003fcd 	.word	0x20003fcd
20003fa8:	20003fe9 	.word	0x20003fe9
20003fac:	20004005 	.word	0x20004005
  {
    case 0:
      DataBuffer[0] = ORIENTATION_PORTRAIT;
20003fb0:	4b1d      	ldr	r3, [pc, #116]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20003fb2:	2248      	movs	r2, #72	; 0x48
20003fb4:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20003fb6:	481c      	ldr	r0, [pc, #112]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20003fb8:	f000 f8bc 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20003fbc:	4b1b      	ldr	r3, [pc, #108]	; (2000402c <TFTDisplay_ILI9341_SetRotation+0xa8>)
20003fbe:	22f0      	movs	r2, #240	; 0xf0
20003fc0:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
20003fc2:	4b1b      	ldr	r3, [pc, #108]	; (20004030 <TFTDisplay_ILI9341_SetRotation+0xac>)
20003fc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
20003fc8:	801a      	strh	r2, [r3, #0]
      break;
20003fca:	e029      	b.n	20004020 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 1:
      DataBuffer[0] = ORIENTATION_LANDSCAPE;
20003fcc:	4b16      	ldr	r3, [pc, #88]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20003fce:	2228      	movs	r2, #40	; 0x28
20003fd0:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20003fd2:	4815      	ldr	r0, [pc, #84]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20003fd4:	f000 f8ae 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20003fd8:	4b14      	ldr	r3, [pc, #80]	; (2000402c <TFTDisplay_ILI9341_SetRotation+0xa8>)
20003fda:	f44f 72a0 	mov.w	r2, #320	; 0x140
20003fde:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
20003fe0:	4b13      	ldr	r3, [pc, #76]	; (20004030 <TFTDisplay_ILI9341_SetRotation+0xac>)
20003fe2:	22f0      	movs	r2, #240	; 0xf0
20003fe4:	801a      	strh	r2, [r3, #0]
      break;
20003fe6:	e01b      	b.n	20004020 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 2:
      DataBuffer[0] = ORIENTATION_PORTRAIT_MIRROR;
20003fe8:	4b0f      	ldr	r3, [pc, #60]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20003fea:	2288      	movs	r2, #136	; 0x88
20003fec:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20003fee:	480e      	ldr	r0, [pc, #56]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20003ff0:	f000 f8a0 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20003ff4:	4b0d      	ldr	r3, [pc, #52]	; (2000402c <TFTDisplay_ILI9341_SetRotation+0xa8>)
20003ff6:	22f0      	movs	r2, #240	; 0xf0
20003ff8:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
20003ffa:	4b0d      	ldr	r3, [pc, #52]	; (20004030 <TFTDisplay_ILI9341_SetRotation+0xac>)
20003ffc:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004000:	801a      	strh	r2, [r3, #0]
      break;
20004002:	e00d      	b.n	20004020 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 3:
      DataBuffer[0] = ORIENTATION_LANDSCAPE_MIRROR;
20004004:	4b08      	ldr	r3, [pc, #32]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004006:	22e8      	movs	r2, #232	; 0xe8
20004008:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000400a:	4807      	ldr	r0, [pc, #28]	; (20004028 <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000400c:	f000 f892 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20004010:	4b06      	ldr	r3, [pc, #24]	; (2000402c <TFTDisplay_ILI9341_SetRotation+0xa8>)
20004012:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004016:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
20004018:	4b05      	ldr	r3, [pc, #20]	; (20004030 <TFTDisplay_ILI9341_SetRotation+0xac>)
2000401a:	22f0      	movs	r2, #240	; 0xf0
2000401c:	801a      	strh	r2, [r3, #0]
      break;
2000401e:	bf00      	nop
  }
}
20004020:	bf00      	nop
20004022:	3708      	adds	r7, #8
20004024:	46bd      	mov	sp, r7
20004026:	bd80      	pop	{r7, pc}
20004028:	2000e6a8 	.word	0x2000e6a8
2000402c:	2000e6a0 	.word	0x2000e6a0
20004030:	2000e6a2 	.word	0x2000e6a2

20004034 <tftDisplay_ILI9341_SendCommand>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void tftDisplay_ILI9341_SendCommand(uint8_t command)
{
20004034:	b5b0      	push	{r4, r5, r7, lr}
20004036:	b084      	sub	sp, #16
20004038:	af02      	add	r7, sp, #8
2000403a:	4603      	mov	r3, r0
2000403c:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
2000403e:	2104      	movs	r1, #4
20004040:	481d      	ldr	r0, [pc, #116]	; (200040b8 <tftDisplay_ILI9341_SendCommand+0x84>)
20004042:	f7ff fc61 	bl	20003908 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_COMMAND();
20004046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000404a:	481c      	ldr	r0, [pc, #112]	; (200040bc <tftDisplay_ILI9341_SendCommand+0x88>)
2000404c:	f7ff fc5c 	bl	20003908 <LL_GPIO_ResetOutputPin>
	DmaSpiCnt = 1;
20004050:	4b1b      	ldr	r3, [pc, #108]	; (200040c0 <tftDisplay_ILI9341_SendCommand+0x8c>)
20004052:	2201      	movs	r2, #1
20004054:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20004056:	2104      	movs	r1, #4
20004058:	481a      	ldr	r0, [pc, #104]	; (200040c4 <tftDisplay_ILI9341_SendCommand+0x90>)
2000405a:	f7ff fcd7 	bl	20003a0c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
2000405e:	2201      	movs	r2, #1
20004060:	2104      	movs	r1, #4
20004062:	4818      	ldr	r0, [pc, #96]	; (200040c4 <tftDisplay_ILI9341_SendCommand+0x90>)
20004064:	f7ff fd0a 	bl	20003a7c <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4, (uint32_t)&command,
20004068:	1dfc      	adds	r4, r7, #7
2000406a:	4817      	ldr	r0, [pc, #92]	; (200040c8 <tftDisplay_ILI9341_SendCommand+0x94>)
2000406c:	f7ff fc81 	bl	20003972 <LL_SPI_DMA_GetRegAddr>
20004070:	4605      	mov	r5, r0
20004072:	2104      	movs	r1, #4
20004074:	4813      	ldr	r0, [pc, #76]	; (200040c4 <tftDisplay_ILI9341_SendCommand+0x90>)
20004076:	f7ff fce9 	bl	20003a4c <LL_DMA_GetDataTransferDirection>
2000407a:	4603      	mov	r3, r0
2000407c:	9300      	str	r3, [sp, #0]
2000407e:	462b      	mov	r3, r5
20004080:	4622      	mov	r2, r4
20004082:	2104      	movs	r1, #4
20004084:	480f      	ldr	r0, [pc, #60]	; (200040c4 <tftDisplay_ILI9341_SendCommand+0x90>)
20004086:	f7ff fd1d 	bl	20003ac4 <LL_DMA_ConfigAddresses>
			LL_SPI_DMA_GetRegAddr(SPI5), LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
2000408a:	2104      	movs	r1, #4
2000408c:	480d      	ldr	r0, [pc, #52]	; (200040c4 <tftDisplay_ILI9341_SendCommand+0x90>)
2000408e:	f7ff fc9d 	bl	200039cc <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20004092:	bf00      	nop
20004094:	4b0d      	ldr	r3, [pc, #52]	; (200040cc <tftDisplay_ILI9341_SendCommand+0x98>)
20004096:	681b      	ldr	r3, [r3, #0]
20004098:	f003 0301 	and.w	r3, r3, #1
2000409c:	2b00      	cmp	r3, #0
2000409e:	d1f9      	bne.n	20004094 <tftDisplay_ILI9341_SendCommand+0x60>
200040a0:	4b08      	ldr	r3, [pc, #32]	; (200040c4 <tftDisplay_ILI9341_SendCommand+0x90>)
200040a2:	685b      	ldr	r3, [r3, #4]
200040a4:	f003 0320 	and.w	r3, r3, #32
200040a8:	2b00      	cmp	r3, #0
200040aa:	d1f3      	bne.n	20004094 <tftDisplay_ILI9341_SendCommand+0x60>
}
200040ac:	bf00      	nop
200040ae:	bf00      	nop
200040b0:	3708      	adds	r7, #8
200040b2:	46bd      	mov	sp, r7
200040b4:	bdb0      	pop	{r4, r5, r7, pc}
200040b6:	bf00      	nop
200040b8:	40020800 	.word	0x40020800
200040bc:	40020c00 	.word	0x40020c00
200040c0:	20009be4 	.word	0x20009be4
200040c4:	40026400 	.word	0x40026400
200040c8:	40015000 	.word	0x40015000
200040cc:	40026470 	.word	0x40026470

200040d0 <tftDisplay_ILI9341_SendData>:
static void tftDisplay_ILI9341_SendData(uint8_t data)
{
200040d0:	b580      	push	{r7, lr}
200040d2:	b082      	sub	sp, #8
200040d4:	af00      	add	r7, sp, #0
200040d6:	4603      	mov	r3, r0
200040d8:	71fb      	strb	r3, [r7, #7]
//	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
//
//	  while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
//	  //CS_DESELECT();

	CS_ACTIVE();
200040da:	2104      	movs	r1, #4
200040dc:	4812      	ldr	r0, [pc, #72]	; (20004128 <tftDisplay_ILI9341_SendData+0x58>)
200040de:	f7ff fc13 	bl	20003908 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200040e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200040e6:	4811      	ldr	r0, [pc, #68]	; (2000412c <tftDisplay_ILI9341_SendData+0x5c>)
200040e8:	f7ff fc00 	bl	200038ec <LL_GPIO_SetOutputPin>
    while(!LL_SPI_IsActiveFlag_TXE(SPI5)) {}
200040ec:	bf00      	nop
200040ee:	4810      	ldr	r0, [pc, #64]	; (20004130 <tftDisplay_ILI9341_SendData+0x60>)
200040f0:	f7ff fc2c 	bl	2000394c <LL_SPI_IsActiveFlag_TXE>
200040f4:	4603      	mov	r3, r0
200040f6:	2b00      	cmp	r3, #0
200040f8:	d0f9      	beq.n	200040ee <tftDisplay_ILI9341_SendData+0x1e>
	LL_SPI_TransmitData8 (SPI5, data);
200040fa:	79fb      	ldrb	r3, [r7, #7]
200040fc:	4619      	mov	r1, r3
200040fe:	480c      	ldr	r0, [pc, #48]	; (20004130 <tftDisplay_ILI9341_SendData+0x60>)
20004100:	f7ff fc51 	bl	200039a6 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI5)) {}
20004104:	bf00      	nop
20004106:	480a      	ldr	r0, [pc, #40]	; (20004130 <tftDisplay_ILI9341_SendData+0x60>)
20004108:	f7ff fc0d 	bl	20003926 <LL_SPI_IsActiveFlag_RXNE>
2000410c:	4603      	mov	r3, r0
2000410e:	2b00      	cmp	r3, #0
20004110:	d0f9      	beq.n	20004106 <tftDisplay_ILI9341_SendData+0x36>
	LL_SPI_ReceiveData8(SPI5);
20004112:	4807      	ldr	r0, [pc, #28]	; (20004130 <tftDisplay_ILI9341_SendData+0x60>)
20004114:	f7ff fc39 	bl	2000398a <LL_SPI_ReceiveData8>
	CS_DESELECT();
20004118:	2104      	movs	r1, #4
2000411a:	4803      	ldr	r0, [pc, #12]	; (20004128 <tftDisplay_ILI9341_SendData+0x58>)
2000411c:	f7ff fbe6 	bl	200038ec <LL_GPIO_SetOutputPin>
}
20004120:	bf00      	nop
20004122:	3708      	adds	r7, #8
20004124:	46bd      	mov	sp, r7
20004126:	bd80      	pop	{r7, pc}
20004128:	40020800 	.word	0x40020800
2000412c:	40020c00 	.word	0x40020c00
20004130:	40015000 	.word	0x40015000

20004134 <tftDisplay_ILI9341_SendSingleData>:

static void tftDisplay_ILI9341_SendSingleData(uint32_t* BufferPtr)
{
20004134:	b5b0      	push	{r4, r5, r7, lr}
20004136:	b084      	sub	sp, #16
20004138:	af02      	add	r7, sp, #8
2000413a:	6078      	str	r0, [r7, #4]
	CS_ACTIVE();
2000413c:	2104      	movs	r1, #4
2000413e:	481d      	ldr	r0, [pc, #116]	; (200041b4 <tftDisplay_ILI9341_SendSingleData+0x80>)
20004140:	f7ff fbe2 	bl	20003908 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
20004144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20004148:	481b      	ldr	r0, [pc, #108]	; (200041b8 <tftDisplay_ILI9341_SendSingleData+0x84>)
2000414a:	f7ff fbcf 	bl	200038ec <LL_GPIO_SetOutputPin>
	DmaSpiCnt = 1;
2000414e:	4b1b      	ldr	r3, [pc, #108]	; (200041bc <tftDisplay_ILI9341_SendSingleData+0x88>)
20004150:	2201      	movs	r2, #1
20004152:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20004154:	2104      	movs	r1, #4
20004156:	481a      	ldr	r0, [pc, #104]	; (200041c0 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004158:	f7ff fc58 	bl	20003a0c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
2000415c:	2201      	movs	r2, #1
2000415e:	2104      	movs	r1, #4
20004160:	4817      	ldr	r0, [pc, #92]	; (200041c0 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004162:	f7ff fc8b 	bl	20003a7c <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
20004166:	687c      	ldr	r4, [r7, #4]
20004168:	4816      	ldr	r0, [pc, #88]	; (200041c4 <tftDisplay_ILI9341_SendSingleData+0x90>)
2000416a:	f7ff fc02 	bl	20003972 <LL_SPI_DMA_GetRegAddr>
2000416e:	4605      	mov	r5, r0
20004170:	2104      	movs	r1, #4
20004172:	4813      	ldr	r0, [pc, #76]	; (200041c0 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004174:	f7ff fc6a 	bl	20003a4c <LL_DMA_GetDataTransferDirection>
20004178:	4603      	mov	r3, r0
2000417a:	9300      	str	r3, [sp, #0]
2000417c:	462b      	mov	r3, r5
2000417e:	4622      	mov	r2, r4
20004180:	2104      	movs	r1, #4
20004182:	480f      	ldr	r0, [pc, #60]	; (200041c0 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004184:	f7ff fc9e 	bl	20003ac4 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
20004188:	2104      	movs	r1, #4
2000418a:	480d      	ldr	r0, [pc, #52]	; (200041c0 <tftDisplay_ILI9341_SendSingleData+0x8c>)
2000418c:	f7ff fc1e 	bl	200039cc <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20004190:	bf00      	nop
20004192:	4b0d      	ldr	r3, [pc, #52]	; (200041c8 <tftDisplay_ILI9341_SendSingleData+0x94>)
20004194:	681b      	ldr	r3, [r3, #0]
20004196:	f003 0301 	and.w	r3, r3, #1
2000419a:	2b00      	cmp	r3, #0
2000419c:	d1f9      	bne.n	20004192 <tftDisplay_ILI9341_SendSingleData+0x5e>
2000419e:	4b08      	ldr	r3, [pc, #32]	; (200041c0 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200041a0:	685b      	ldr	r3, [r3, #4]
200041a2:	f003 0320 	and.w	r3, r3, #32
200041a6:	2b00      	cmp	r3, #0
200041a8:	d1f3      	bne.n	20004192 <tftDisplay_ILI9341_SendSingleData+0x5e>
}
200041aa:	bf00      	nop
200041ac:	bf00      	nop
200041ae:	3708      	adds	r7, #8
200041b0:	46bd      	mov	sp, r7
200041b2:	bdb0      	pop	{r4, r5, r7, pc}
200041b4:	40020800 	.word	0x40020800
200041b8:	40020c00 	.word	0x40020c00
200041bc:	20009be4 	.word	0x20009be4
200041c0:	40026400 	.word	0x40026400
200041c4:	40015000 	.word	0x40015000
200041c8:	40026470 	.word	0x40026470

200041cc <tftDisplay_ILI9341_WriteMultipleData>:

static void tftDisplay_ILI9341_WriteMultipleData(uint32_t* BufferPtr, uint32_t BufferSize, uint8_t DmaCount)
{
200041cc:	b5b0      	push	{r4, r5, r7, lr}
200041ce:	b086      	sub	sp, #24
200041d0:	af02      	add	r7, sp, #8
200041d2:	60f8      	str	r0, [r7, #12]
200041d4:	60b9      	str	r1, [r7, #8]
200041d6:	4613      	mov	r3, r2
200041d8:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
200041da:	2104      	movs	r1, #4
200041dc:	481d      	ldr	r0, [pc, #116]	; (20004254 <tftDisplay_ILI9341_WriteMultipleData+0x88>)
200041de:	f7ff fb93 	bl	20003908 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200041e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200041e6:	481c      	ldr	r0, [pc, #112]	; (20004258 <tftDisplay_ILI9341_WriteMultipleData+0x8c>)
200041e8:	f7ff fb80 	bl	200038ec <LL_GPIO_SetOutputPin>
	DmaSpiCnt = DmaCount;
200041ec:	79fb      	ldrb	r3, [r7, #7]
200041ee:	4a1b      	ldr	r2, [pc, #108]	; (2000425c <tftDisplay_ILI9341_WriteMultipleData+0x90>)
200041f0:	6013      	str	r3, [r2, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200041f2:	2104      	movs	r1, #4
200041f4:	481a      	ldr	r0, [pc, #104]	; (20004260 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200041f6:	f7ff fc09 	bl	20003a0c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, BufferSize);
200041fa:	68ba      	ldr	r2, [r7, #8]
200041fc:	2104      	movs	r1, #4
200041fe:	4818      	ldr	r0, [pc, #96]	; (20004260 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20004200:	f7ff fc3c 	bl	20003a7c <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
20004204:	68fc      	ldr	r4, [r7, #12]
20004206:	4817      	ldr	r0, [pc, #92]	; (20004264 <tftDisplay_ILI9341_WriteMultipleData+0x98>)
20004208:	f7ff fbb3 	bl	20003972 <LL_SPI_DMA_GetRegAddr>
2000420c:	4605      	mov	r5, r0
2000420e:	2104      	movs	r1, #4
20004210:	4813      	ldr	r0, [pc, #76]	; (20004260 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20004212:	f7ff fc1b 	bl	20003a4c <LL_DMA_GetDataTransferDirection>
20004216:	4603      	mov	r3, r0
20004218:	9300      	str	r3, [sp, #0]
2000421a:	462b      	mov	r3, r5
2000421c:	4622      	mov	r2, r4
2000421e:	2104      	movs	r1, #4
20004220:	480f      	ldr	r0, [pc, #60]	; (20004260 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20004222:	f7ff fc4f 	bl	20003ac4 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
20004226:	2104      	movs	r1, #4
20004228:	480d      	ldr	r0, [pc, #52]	; (20004260 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000422a:	f7ff fbcf 	bl	200039cc <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
2000422e:	bf00      	nop
20004230:	4b0d      	ldr	r3, [pc, #52]	; (20004268 <tftDisplay_ILI9341_WriteMultipleData+0x9c>)
20004232:	681b      	ldr	r3, [r3, #0]
20004234:	f003 0301 	and.w	r3, r3, #1
20004238:	2b00      	cmp	r3, #0
2000423a:	d1f9      	bne.n	20004230 <tftDisplay_ILI9341_WriteMultipleData+0x64>
2000423c:	4b08      	ldr	r3, [pc, #32]	; (20004260 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000423e:	685b      	ldr	r3, [r3, #4]
20004240:	f003 0320 	and.w	r3, r3, #32
20004244:	2b00      	cmp	r3, #0
20004246:	d1f3      	bne.n	20004230 <tftDisplay_ILI9341_WriteMultipleData+0x64>
}
20004248:	bf00      	nop
2000424a:	bf00      	nop
2000424c:	3710      	adds	r7, #16
2000424e:	46bd      	mov	sp, r7
20004250:	bdb0      	pop	{r4, r5, r7, pc}
20004252:	bf00      	nop
20004254:	40020800 	.word	0x40020800
20004258:	40020c00 	.word	0x40020c00
2000425c:	20009be4 	.word	0x20009be4
20004260:	40026400 	.word	0x40026400
20004264:	40015000 	.word	0x40015000
20004268:	40026470 	.word	0x40026470

2000426c <tftDisplay_ILI9341_Reset>:
static void tftDisplay_ILI9341_Reset(void)
{
2000426c:	b580      	push	{r7, lr}
2000426e:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
20004270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20004274:	4806      	ldr	r0, [pc, #24]	; (20004290 <tftDisplay_ILI9341_Reset+0x24>)
20004276:	f7ff fb47 	bl	20003908 <LL_GPIO_ResetOutputPin>
	LL_mDelay(5);
2000427a:	2005      	movs	r0, #5
2000427c:	f7fc fbda 	bl	20000a34 <LL_mDelay>
	RESET_IDLE();
20004280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20004284:	4802      	ldr	r0, [pc, #8]	; (20004290 <tftDisplay_ILI9341_Reset+0x24>)
20004286:	f7ff fb31 	bl	200038ec <LL_GPIO_SetOutputPin>
}
2000428a:	bf00      	nop
2000428c:	bd80      	pop	{r7, pc}
2000428e:	bf00      	nop
20004290:	40020c00 	.word	0x40020c00

20004294 <tftDisplay_ILI9341_FontsInitialization>:
static void tftDisplay_ILI9341_FontsInitialization(void)
{
20004294:	b480      	push	{r7}
20004296:	af00      	add	r7, sp, #0
  Font8.Height = 8;
20004298:	4b16      	ldr	r3, [pc, #88]	; (200042f4 <tftDisplay_ILI9341_FontsInitialization+0x60>)
2000429a:	2208      	movs	r2, #8
2000429c:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
2000429e:	4b15      	ldr	r3, [pc, #84]	; (200042f4 <tftDisplay_ILI9341_FontsInitialization+0x60>)
200042a0:	2205      	movs	r2, #5
200042a2:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
200042a4:	4b14      	ldr	r3, [pc, #80]	; (200042f8 <tftDisplay_ILI9341_FontsInitialization+0x64>)
200042a6:	220c      	movs	r2, #12
200042a8:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
200042aa:	4b13      	ldr	r3, [pc, #76]	; (200042f8 <tftDisplay_ILI9341_FontsInitialization+0x64>)
200042ac:	2207      	movs	r2, #7
200042ae:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
200042b0:	4b12      	ldr	r3, [pc, #72]	; (200042fc <tftDisplay_ILI9341_FontsInitialization+0x68>)
200042b2:	2210      	movs	r2, #16
200042b4:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
200042b6:	4b11      	ldr	r3, [pc, #68]	; (200042fc <tftDisplay_ILI9341_FontsInitialization+0x68>)
200042b8:	220b      	movs	r2, #11
200042ba:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
200042bc:	4b10      	ldr	r3, [pc, #64]	; (20004300 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
200042be:	2214      	movs	r2, #20
200042c0:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
200042c2:	4b0f      	ldr	r3, [pc, #60]	; (20004300 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
200042c4:	220e      	movs	r2, #14
200042c6:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
200042c8:	4b0e      	ldr	r3, [pc, #56]	; (20004304 <tftDisplay_ILI9341_FontsInitialization+0x70>)
200042ca:	2218      	movs	r2, #24
200042cc:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
200042ce:	4b0d      	ldr	r3, [pc, #52]	; (20004304 <tftDisplay_ILI9341_FontsInitialization+0x70>)
200042d0:	2211      	movs	r2, #17
200042d2:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT_COLOR_ILI9341_BLACK;
200042d4:	4b0c      	ldr	r3, [pc, #48]	; (20004308 <tftDisplay_ILI9341_FontsInitialization+0x74>)
200042d6:	2200      	movs	r2, #0
200042d8:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT_COLOR_ILI9341_GREEN;
200042da:	4b0b      	ldr	r3, [pc, #44]	; (20004308 <tftDisplay_ILI9341_FontsInitialization+0x74>)
200042dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
200042e0:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
200042e2:	4b09      	ldr	r3, [pc, #36]	; (20004308 <tftDisplay_ILI9341_FontsInitialization+0x74>)
200042e4:	4a05      	ldr	r2, [pc, #20]	; (200042fc <tftDisplay_ILI9341_FontsInitialization+0x68>)
200042e6:	605a      	str	r2, [r3, #4]
}
200042e8:	bf00      	nop
200042ea:	46bd      	mov	sp, r7
200042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200042f0:	4770      	bx	lr
200042f2:	bf00      	nop
200042f4:	20009bd8 	.word	0x20009bd8
200042f8:	20009bd0 	.word	0x20009bd0
200042fc:	20009bc8 	.word	0x20009bc8
20004300:	20009bc0 	.word	0x20009bc0
20004304:	20009bb8 	.word	0x20009bb8
20004308:	2001e6a8 	.word	0x2001e6a8

2000430c <tftDisplay_ILI9341_SetAddrWindow>:
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
2000430c:	b590      	push	{r4, r7, lr}
2000430e:	b083      	sub	sp, #12
20004310:	af00      	add	r7, sp, #0
20004312:	4604      	mov	r4, r0
20004314:	4608      	mov	r0, r1
20004316:	4611      	mov	r1, r2
20004318:	461a      	mov	r2, r3
2000431a:	4623      	mov	r3, r4
2000431c:	80fb      	strh	r3, [r7, #6]
2000431e:	4603      	mov	r3, r0
20004320:	80bb      	strh	r3, [r7, #4]
20004322:	460b      	mov	r3, r1
20004324:	807b      	strh	r3, [r7, #2]
20004326:	4613      	mov	r3, r2
20004328:	803b      	strh	r3, [r7, #0]
  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_COLUMN_ADDR);
2000432a:	202a      	movs	r0, #42	; 0x2a
2000432c:	f7ff fe82 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (x0 >> 8) & 0xFF;
20004330:	88fb      	ldrh	r3, [r7, #6]
20004332:	0a1b      	lsrs	r3, r3, #8
20004334:	b29b      	uxth	r3, r3
20004336:	b2da      	uxtb	r2, r3
20004338:	4b1b      	ldr	r3, [pc, #108]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000433a:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = x0 & 0xFF;
2000433c:	88fb      	ldrh	r3, [r7, #6]
2000433e:	b2da      	uxtb	r2, r3
20004340:	4b19      	ldr	r3, [pc, #100]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004342:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (x1 >> 8) & 0xFF;
20004344:	887b      	ldrh	r3, [r7, #2]
20004346:	0a1b      	lsrs	r3, r3, #8
20004348:	b29b      	uxth	r3, r3
2000434a:	b2da      	uxtb	r2, r3
2000434c:	4b16      	ldr	r3, [pc, #88]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000434e:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = x1 & 0xFF;
20004350:	887b      	ldrh	r3, [r7, #2]
20004352:	b2da      	uxtb	r2, r3
20004354:	4b14      	ldr	r3, [pc, #80]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004356:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004358:	2201      	movs	r2, #1
2000435a:	2104      	movs	r1, #4
2000435c:	4812      	ldr	r0, [pc, #72]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000435e:	f7ff ff35 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PAGE_ADDR);
20004362:	202b      	movs	r0, #43	; 0x2b
20004364:	f7ff fe66 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (y0 >> 8) & 0xFF;
20004368:	88bb      	ldrh	r3, [r7, #4]
2000436a:	0a1b      	lsrs	r3, r3, #8
2000436c:	b29b      	uxth	r3, r3
2000436e:	b2da      	uxtb	r2, r3
20004370:	4b0d      	ldr	r3, [pc, #52]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004372:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = y0 & 0xFF;
20004374:	88bb      	ldrh	r3, [r7, #4]
20004376:	b2da      	uxtb	r2, r3
20004378:	4b0b      	ldr	r3, [pc, #44]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000437a:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (y1 >> 8) & 0xFF;
2000437c:	883b      	ldrh	r3, [r7, #0]
2000437e:	0a1b      	lsrs	r3, r3, #8
20004380:	b29b      	uxth	r3, r3
20004382:	b2da      	uxtb	r2, r3
20004384:	4b08      	ldr	r3, [pc, #32]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004386:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = y1 & 0xFF;
20004388:	883b      	ldrh	r3, [r7, #0]
2000438a:	b2da      	uxtb	r2, r3
2000438c:	4b06      	ldr	r3, [pc, #24]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
2000438e:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004390:	2201      	movs	r2, #1
20004392:	2104      	movs	r1, #4
20004394:	4804      	ldr	r0, [pc, #16]	; (200043a8 <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004396:	f7ff ff19 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
2000439a:	202c      	movs	r0, #44	; 0x2c
2000439c:	f7ff fe4a 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
}
200043a0:	bf00      	nop
200043a2:	370c      	adds	r7, #12
200043a4:	46bd      	mov	sp, r7
200043a6:	bd90      	pop	{r4, r7, pc}
200043a8:	2000e6a8 	.word	0x2000e6a8

200043ac <tftDisplay_ILI9341_Init_PowerControl_A>:
//------------------------------------------------------------------
/* Initialization static functions */
static void tftDisplay_ILI9341_Init_PowerControl_A()
{
200043ac:	b580      	push	{r7, lr}
200043ae:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x39;
200043b0:	4b0c      	ldr	r3, [pc, #48]	; (200043e4 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200043b2:	2239      	movs	r2, #57	; 0x39
200043b4:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x2C;
200043b6:	4b0b      	ldr	r3, [pc, #44]	; (200043e4 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200043b8:	222c      	movs	r2, #44	; 0x2c
200043ba:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x00;
200043bc:	4b09      	ldr	r3, [pc, #36]	; (200043e4 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200043be:	2200      	movs	r2, #0
200043c0:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x34;
200043c2:	4b08      	ldr	r3, [pc, #32]	; (200043e4 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200043c4:	2234      	movs	r2, #52	; 0x34
200043c6:	70da      	strb	r2, [r3, #3]
	DataBuffer[4] = 0x02;
200043c8:	4b06      	ldr	r3, [pc, #24]	; (200043e4 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200043ca:	2202      	movs	r2, #2
200043cc:	711a      	strb	r2, [r3, #4]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERA);
200043ce:	20cb      	movs	r0, #203	; 0xcb
200043d0:	f7ff fe30 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 5, 1);
200043d4:	2201      	movs	r2, #1
200043d6:	2105      	movs	r1, #5
200043d8:	4802      	ldr	r0, [pc, #8]	; (200043e4 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
200043da:	f7ff fef7 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
200043de:	bf00      	nop
200043e0:	bd80      	pop	{r7, pc}
200043e2:	bf00      	nop
200043e4:	2000e6a8 	.word	0x2000e6a8

200043e8 <tftDisplay_ILI9341_Init_PowerControl_B>:

static void tftDisplay_ILI9341_Init_PowerControl_B()
{
200043e8:	b580      	push	{r7, lr}
200043ea:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
200043ec:	4b09      	ldr	r3, [pc, #36]	; (20004414 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
200043ee:	2200      	movs	r2, #0
200043f0:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0xC1;
200043f2:	4b08      	ldr	r3, [pc, #32]	; (20004414 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
200043f4:	22c1      	movs	r2, #193	; 0xc1
200043f6:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x30;
200043f8:	4b06      	ldr	r3, [pc, #24]	; (20004414 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
200043fa:	2230      	movs	r2, #48	; 0x30
200043fc:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERB);
200043fe:	20cf      	movs	r0, #207	; 0xcf
20004400:	f7ff fe18 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20004404:	2201      	movs	r2, #1
20004406:	2103      	movs	r1, #3
20004408:	4802      	ldr	r0, [pc, #8]	; (20004414 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
2000440a:	f7ff fedf 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
2000440e:	bf00      	nop
20004410:	bd80      	pop	{r7, pc}
20004412:	bf00      	nop
20004414:	2000e6a8 	.word	0x2000e6a8

20004418 <tftDisplay_ILI9341_Init_DriverTimingControl_A>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_A()
{
20004418:	b580      	push	{r7, lr}
2000441a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x85;
2000441c:	4b09      	ldr	r3, [pc, #36]	; (20004444 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
2000441e:	2285      	movs	r2, #133	; 0x85
20004420:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
20004422:	4b08      	ldr	r3, [pc, #32]	; (20004444 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004424:	2200      	movs	r2, #0
20004426:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x78;
20004428:	4b06      	ldr	r3, [pc, #24]	; (20004444 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
2000442a:	2278      	movs	r2, #120	; 0x78
2000442c:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
2000442e:	20ea      	movs	r0, #234	; 0xea
20004430:	f7ff fe00 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20004434:	2201      	movs	r2, #1
20004436:	2103      	movs	r1, #3
20004438:	4802      	ldr	r0, [pc, #8]	; (20004444 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
2000443a:	f7ff fec7 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
2000443e:	bf00      	nop
20004440:	bd80      	pop	{r7, pc}
20004442:	bf00      	nop
20004444:	2000e6a8 	.word	0x2000e6a8

20004448 <tftDisplay_ILI9341_Init_DriverTimingControl_B>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_B()
{
20004448:	b580      	push	{r7, lr}
2000444a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
2000444c:	4b07      	ldr	r3, [pc, #28]	; (2000446c <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
2000444e:	2200      	movs	r2, #0
20004450:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
20004452:	4b06      	ldr	r3, [pc, #24]	; (2000446c <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004454:	2200      	movs	r2, #0
20004456:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20004458:	20ea      	movs	r0, #234	; 0xea
2000445a:	f7ff fdeb 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
2000445e:	2201      	movs	r2, #1
20004460:	2102      	movs	r1, #2
20004462:	4802      	ldr	r0, [pc, #8]	; (2000446c <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004464:	f7ff feb2 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
20004468:	bf00      	nop
2000446a:	bd80      	pop	{r7, pc}
2000446c:	2000e6a8 	.word	0x2000e6a8

20004470 <tftDisplay_ILI9341_Init_PowerSequenceControl>:

static void tftDisplay_ILI9341_Init_PowerSequenceControl()
{
20004470:	b580      	push	{r7, lr}
20004472:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x64;
20004474:	4b0a      	ldr	r3, [pc, #40]	; (200044a0 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004476:	2264      	movs	r2, #100	; 0x64
20004478:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x03;
2000447a:	4b09      	ldr	r3, [pc, #36]	; (200044a0 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
2000447c:	2203      	movs	r2, #3
2000447e:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x12;
20004480:	4b07      	ldr	r3, [pc, #28]	; (200044a0 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004482:	2212      	movs	r2, #18
20004484:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x81;
20004486:	4b06      	ldr	r3, [pc, #24]	; (200044a0 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004488:	2281      	movs	r2, #129	; 0x81
2000448a:	70da      	strb	r2, [r3, #3]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER_SEQ);
2000448c:	20ed      	movs	r0, #237	; 0xed
2000448e:	f7ff fdd1 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004492:	2201      	movs	r2, #1
20004494:	2104      	movs	r1, #4
20004496:	4802      	ldr	r0, [pc, #8]	; (200044a0 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004498:	f7ff fe98 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
2000449c:	bf00      	nop
2000449e:	bd80      	pop	{r7, pc}
200044a0:	2000e6a8 	.word	0x2000e6a8

200044a4 <tftDisplay_ILI9341_Init_PumpRatioControl>:

static void tftDisplay_ILI9341_Init_PumpRatioControl()
{
200044a4:	b580      	push	{r7, lr}
200044a6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x20;
200044a8:	4b05      	ldr	r3, [pc, #20]	; (200044c0 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
200044aa:	2220      	movs	r2, #32
200044ac:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PRC);
200044ae:	20f7      	movs	r0, #247	; 0xf7
200044b0:	f7ff fdc0 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200044b4:	4802      	ldr	r0, [pc, #8]	; (200044c0 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
200044b6:	f7ff fe3d 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
200044ba:	bf00      	nop
200044bc:	bd80      	pop	{r7, pc}
200044be:	bf00      	nop
200044c0:	2000e6a8 	.word	0x2000e6a8

200044c4 <tftDisplay_ILI9341_Init_PowerControlVRH>:

static void tftDisplay_ILI9341_Init_PowerControlVRH()
{
200044c4:	b580      	push	{r7, lr}
200044c6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
200044c8:	4b05      	ldr	r3, [pc, #20]	; (200044e0 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
200044ca:	2210      	movs	r2, #16
200044cc:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER1);
200044ce:	20c0      	movs	r0, #192	; 0xc0
200044d0:	f7ff fdb0 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200044d4:	4802      	ldr	r0, [pc, #8]	; (200044e0 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
200044d6:	f7ff fe2d 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
200044da:	bf00      	nop
200044dc:	bd80      	pop	{r7, pc}
200044de:	bf00      	nop
200044e0:	2000e6a8 	.word	0x2000e6a8

200044e4 <tftDisplay_ILI9341_Init_PowerControlSAP>:

static void tftDisplay_ILI9341_Init_PowerControlSAP()
{
200044e4:	b580      	push	{r7, lr}
200044e6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
200044e8:	4b05      	ldr	r3, [pc, #20]	; (20004500 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
200044ea:	2210      	movs	r2, #16
200044ec:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER2);
200044ee:	20c1      	movs	r0, #193	; 0xc1
200044f0:	f7ff fda0 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200044f4:	4802      	ldr	r0, [pc, #8]	; (20004500 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
200044f6:	f7ff fe1d 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
200044fa:	bf00      	nop
200044fc:	bd80      	pop	{r7, pc}
200044fe:	bf00      	nop
20004500:	2000e6a8 	.word	0x2000e6a8

20004504 <tftDisplay_ILI9341_Init_VCOMControl_1>:

static void tftDisplay_ILI9341_Init_VCOMControl_1()
{
20004504:	b580      	push	{r7, lr}
20004506:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x3E;
20004508:	4b07      	ldr	r3, [pc, #28]	; (20004528 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
2000450a:	223e      	movs	r2, #62	; 0x3e
2000450c:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x28;
2000450e:	4b06      	ldr	r3, [pc, #24]	; (20004528 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004510:	2228      	movs	r2, #40	; 0x28
20004512:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM1);
20004514:	20c5      	movs	r0, #197	; 0xc5
20004516:	f7ff fd8d 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
2000451a:	2201      	movs	r2, #1
2000451c:	2102      	movs	r1, #2
2000451e:	4802      	ldr	r0, [pc, #8]	; (20004528 <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004520:	f7ff fe54 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
20004524:	bf00      	nop
20004526:	bd80      	pop	{r7, pc}
20004528:	2000e6a8 	.word	0x2000e6a8

2000452c <tftDisplay_ILI9341_Init_VCOMControl_2>:

static void tftDisplay_ILI9341_Init_VCOMControl_2()
{
2000452c:	b580      	push	{r7, lr}
2000452e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x86;
20004530:	4b05      	ldr	r3, [pc, #20]	; (20004548 <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20004532:	2286      	movs	r2, #134	; 0x86
20004534:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM2);
20004536:	20c7      	movs	r0, #199	; 0xc7
20004538:	f7ff fd7c 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000453c:	4802      	ldr	r0, [pc, #8]	; (20004548 <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
2000453e:	f7ff fdf9 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
20004542:	bf00      	nop
20004544:	bd80      	pop	{r7, pc}
20004546:	bf00      	nop
20004548:	2000e6a8 	.word	0x2000e6a8

2000454c <tftDisplay_ILI9341_Init_MemmoryAccessControl>:

static void tftDisplay_ILI9341_Init_MemmoryAccessControl()
{
2000454c:	b580      	push	{r7, lr}
2000454e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x48;
20004550:	4b05      	ldr	r3, [pc, #20]	; (20004568 <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20004552:	2248      	movs	r2, #72	; 0x48
20004554:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_MAC);
20004556:	2036      	movs	r0, #54	; 0x36
20004558:	f7ff fd6c 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000455c:	4802      	ldr	r0, [pc, #8]	; (20004568 <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
2000455e:	f7ff fde9 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
20004562:	bf00      	nop
20004564:	bd80      	pop	{r7, pc}
20004566:	bf00      	nop
20004568:	2000e6a8 	.word	0x2000e6a8

2000456c <tftDisplay_ILI9341_Init_PixelFormatSet>:

static void tftDisplay_ILI9341_Init_PixelFormatSet()
{
2000456c:	b580      	push	{r7, lr}
2000456e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x55;
20004570:	4b05      	ldr	r3, [pc, #20]	; (20004588 <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20004572:	2255      	movs	r2, #85	; 0x55
20004574:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PIXEL_FORMAT);
20004576:	203a      	movs	r0, #58	; 0x3a
20004578:	f7ff fd5c 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000457c:	4802      	ldr	r0, [pc, #8]	; (20004588 <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
2000457e:	f7ff fdd9 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
20004582:	bf00      	nop
20004584:	bd80      	pop	{r7, pc}
20004586:	bf00      	nop
20004588:	2000e6a8 	.word	0x2000e6a8

2000458c <tftDisplay_ILI9341_Init_FrameRationControl>:

static void tftDisplay_ILI9341_Init_FrameRationControl()
{
2000458c:	b580      	push	{r7, lr}
2000458e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004590:	4b07      	ldr	r3, [pc, #28]	; (200045b0 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004592:	2200      	movs	r2, #0
20004594:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x18;
20004596:	4b06      	ldr	r3, [pc, #24]	; (200045b0 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004598:	2218      	movs	r2, #24
2000459a:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_FRMCTR1);
2000459c:	20b1      	movs	r0, #177	; 0xb1
2000459e:	f7ff fd49 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
200045a2:	2201      	movs	r2, #1
200045a4:	2102      	movs	r1, #2
200045a6:	4802      	ldr	r0, [pc, #8]	; (200045b0 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
200045a8:	f7ff fe10 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
200045ac:	bf00      	nop
200045ae:	bd80      	pop	{r7, pc}
200045b0:	2000e6a8 	.word	0x2000e6a8

200045b4 <tftDisplay_ILI9341_Init_DisplayFunctionControl>:

static void tftDisplay_ILI9341_Init_DisplayFunctionControl()
{
200045b4:	b580      	push	{r7, lr}
200045b6:	af00      	add	r7, sp, #0
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DFC);
200045b8:	20b6      	movs	r0, #182	; 0xb6
200045ba:	f7ff fd3b 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(0x08);
200045be:	2008      	movs	r0, #8
200045c0:	f7ff fd86 	bl	200040d0 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x82);
200045c4:	2082      	movs	r0, #130	; 0x82
200045c6:	f7ff fd83 	bl	200040d0 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x27);
200045ca:	2027      	movs	r0, #39	; 0x27
200045cc:	f7ff fd80 	bl	200040d0 <tftDisplay_ILI9341_SendData>
}
200045d0:	bf00      	nop
200045d2:	bd80      	pop	{r7, pc}

200045d4 <tftDisplay_ILI9341_Init_GammaSet>:

static void tftDisplay_ILI9341_Init_GammaSet()
{
200045d4:	b580      	push	{r7, lr}
200045d6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x01;
200045d8:	4b05      	ldr	r3, [pc, #20]	; (200045f0 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
200045da:	2201      	movs	r2, #1
200045dc:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GAMMA);
200045de:	2026      	movs	r0, #38	; 0x26
200045e0:	f7ff fd28 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
200045e4:	4802      	ldr	r0, [pc, #8]	; (200045f0 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
200045e6:	f7ff fda5 	bl	20004134 <tftDisplay_ILI9341_SendSingleData>
}
200045ea:	bf00      	nop
200045ec:	bd80      	pop	{r7, pc}
200045ee:	bf00      	nop
200045f0:	2000e6a8 	.word	0x2000e6a8

200045f4 <tftDisplay_ILI9341_Init_PositiveGammaCorection>:

static void tftDisplay_ILI9341_Init_PositiveGammaCorection()
{
200045f4:	b580      	push	{r7, lr}
200045f6:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x0F;
200045f8:	4b1b      	ldr	r3, [pc, #108]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
200045fa:	220f      	movs	r2, #15
200045fc:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x31;
200045fe:	4b1a      	ldr	r3, [pc, #104]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004600:	2231      	movs	r2, #49	; 0x31
20004602:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x2B;
20004604:	4b18      	ldr	r3, [pc, #96]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004606:	222b      	movs	r2, #43	; 0x2b
20004608:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x0C;
2000460a:	4b17      	ldr	r3, [pc, #92]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000460c:	220c      	movs	r2, #12
2000460e:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x0E;
20004610:	4b15      	ldr	r3, [pc, #84]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004612:	220e      	movs	r2, #14
20004614:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x08;
20004616:	4b14      	ldr	r3, [pc, #80]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004618:	2208      	movs	r2, #8
2000461a:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x4E;
2000461c:	4b12      	ldr	r3, [pc, #72]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000461e:	224e      	movs	r2, #78	; 0x4e
20004620:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xF1;
20004622:	4b11      	ldr	r3, [pc, #68]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004624:	22f1      	movs	r2, #241	; 0xf1
20004626:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x37;
20004628:	4b0f      	ldr	r3, [pc, #60]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000462a:	2237      	movs	r2, #55	; 0x37
2000462c:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x07;
2000462e:	4b0e      	ldr	r3, [pc, #56]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004630:	2207      	movs	r2, #7
20004632:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x10;
20004634:	4b0c      	ldr	r3, [pc, #48]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004636:	2210      	movs	r2, #16
20004638:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x03;
2000463a:	4b0b      	ldr	r3, [pc, #44]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000463c:	2203      	movs	r2, #3
2000463e:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x0E;
20004640:	4b09      	ldr	r3, [pc, #36]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004642:	220e      	movs	r2, #14
20004644:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x09;
20004646:	4b08      	ldr	r3, [pc, #32]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004648:	2209      	movs	r2, #9
2000464a:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x00;
2000464c:	4b06      	ldr	r3, [pc, #24]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000464e:	2200      	movs	r2, #0
20004650:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PGAMMA);
20004652:	20e0      	movs	r0, #224	; 0xe0
20004654:	f7ff fcee 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20004658:	2201      	movs	r2, #1
2000465a:	210f      	movs	r1, #15
2000465c:	4802      	ldr	r0, [pc, #8]	; (20004668 <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
2000465e:	f7ff fdb5 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
20004662:	bf00      	nop
20004664:	bd80      	pop	{r7, pc}
20004666:	bf00      	nop
20004668:	2000e6a8 	.word	0x2000e6a8

2000466c <tftDisplay_ILI9341_Init_NegativeGammaCorection>:

static void tftDisplay_ILI9341_Init_NegativeGammaCorection()
{
2000466c:	b580      	push	{r7, lr}
2000466e:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x00;
20004670:	4b1b      	ldr	r3, [pc, #108]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004672:	2200      	movs	r2, #0
20004674:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x0E;
20004676:	4b1a      	ldr	r3, [pc, #104]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004678:	220e      	movs	r2, #14
2000467a:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x14;
2000467c:	4b18      	ldr	r3, [pc, #96]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000467e:	2214      	movs	r2, #20
20004680:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x03;
20004682:	4b17      	ldr	r3, [pc, #92]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004684:	2203      	movs	r2, #3
20004686:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x11;
20004688:	4b15      	ldr	r3, [pc, #84]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000468a:	2211      	movs	r2, #17
2000468c:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x07;
2000468e:	4b14      	ldr	r3, [pc, #80]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004690:	2207      	movs	r2, #7
20004692:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x31;
20004694:	4b12      	ldr	r3, [pc, #72]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004696:	2231      	movs	r2, #49	; 0x31
20004698:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xC1;
2000469a:	4b11      	ldr	r3, [pc, #68]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
2000469c:	22c1      	movs	r2, #193	; 0xc1
2000469e:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x48;
200046a0:	4b0f      	ldr	r3, [pc, #60]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046a2:	2248      	movs	r2, #72	; 0x48
200046a4:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x08;
200046a6:	4b0e      	ldr	r3, [pc, #56]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046a8:	2208      	movs	r2, #8
200046aa:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x0F;
200046ac:	4b0c      	ldr	r3, [pc, #48]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046ae:	220f      	movs	r2, #15
200046b0:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x0C;
200046b2:	4b0b      	ldr	r3, [pc, #44]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046b4:	220c      	movs	r2, #12
200046b6:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x31;
200046b8:	4b09      	ldr	r3, [pc, #36]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046ba:	2231      	movs	r2, #49	; 0x31
200046bc:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x36;
200046be:	4b08      	ldr	r3, [pc, #32]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046c0:	2236      	movs	r2, #54	; 0x36
200046c2:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x0F;
200046c4:	4b06      	ldr	r3, [pc, #24]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046c6:	220f      	movs	r2, #15
200046c8:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_NGAMMA);
200046ca:	20e1      	movs	r0, #225	; 0xe1
200046cc:	f7ff fcb2 	bl	20004034 <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
200046d0:	2201      	movs	r2, #1
200046d2:	210f      	movs	r1, #15
200046d4:	4802      	ldr	r0, [pc, #8]	; (200046e0 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
200046d6:	f7ff fd79 	bl	200041cc <tftDisplay_ILI9341_WriteMultipleData>
}
200046da:	bf00      	nop
200046dc:	bd80      	pop	{r7, pc}
200046de:	bf00      	nop
200046e0:	2000e6a8 	.word	0x2000e6a8

200046e4 <__NVIC_SetPriorityGrouping>:
{
200046e4:	b480      	push	{r7}
200046e6:	b085      	sub	sp, #20
200046e8:	af00      	add	r7, sp, #0
200046ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
200046ec:	687b      	ldr	r3, [r7, #4]
200046ee:	f003 0307 	and.w	r3, r3, #7
200046f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200046f4:	4b0c      	ldr	r3, [pc, #48]	; (20004728 <__NVIC_SetPriorityGrouping+0x44>)
200046f6:	68db      	ldr	r3, [r3, #12]
200046f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200046fa:	68ba      	ldr	r2, [r7, #8]
200046fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20004700:	4013      	ands	r3, r2
20004702:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20004704:	68fb      	ldr	r3, [r7, #12]
20004706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20004708:	68bb      	ldr	r3, [r7, #8]
2000470a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000470c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20004710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20004714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20004716:	4a04      	ldr	r2, [pc, #16]	; (20004728 <__NVIC_SetPriorityGrouping+0x44>)
20004718:	68bb      	ldr	r3, [r7, #8]
2000471a:	60d3      	str	r3, [r2, #12]
}
2000471c:	bf00      	nop
2000471e:	3714      	adds	r7, #20
20004720:	46bd      	mov	sp, r7
20004722:	f85d 7b04 	ldr.w	r7, [sp], #4
20004726:	4770      	bx	lr
20004728:	e000ed00 	.word	0xe000ed00

2000472c <__NVIC_GetPriorityGrouping>:
{
2000472c:	b480      	push	{r7}
2000472e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20004730:	4b04      	ldr	r3, [pc, #16]	; (20004744 <__NVIC_GetPriorityGrouping+0x18>)
20004732:	68db      	ldr	r3, [r3, #12]
20004734:	0a1b      	lsrs	r3, r3, #8
20004736:	f003 0307 	and.w	r3, r3, #7
}
2000473a:	4618      	mov	r0, r3
2000473c:	46bd      	mov	sp, r7
2000473e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004742:	4770      	bx	lr
20004744:	e000ed00 	.word	0xe000ed00

20004748 <__NVIC_EnableIRQ>:
{
20004748:	b480      	push	{r7}
2000474a:	b083      	sub	sp, #12
2000474c:	af00      	add	r7, sp, #0
2000474e:	4603      	mov	r3, r0
20004750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004756:	2b00      	cmp	r3, #0
20004758:	db0b      	blt.n	20004772 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000475a:	79fb      	ldrb	r3, [r7, #7]
2000475c:	f003 021f 	and.w	r2, r3, #31
20004760:	4907      	ldr	r1, [pc, #28]	; (20004780 <__NVIC_EnableIRQ+0x38>)
20004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004766:	095b      	lsrs	r3, r3, #5
20004768:	2001      	movs	r0, #1
2000476a:	fa00 f202 	lsl.w	r2, r0, r2
2000476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
20004772:	bf00      	nop
20004774:	370c      	adds	r7, #12
20004776:	46bd      	mov	sp, r7
20004778:	f85d 7b04 	ldr.w	r7, [sp], #4
2000477c:	4770      	bx	lr
2000477e:	bf00      	nop
20004780:	e000e100 	.word	0xe000e100

20004784 <__NVIC_SetPriority>:
{
20004784:	b480      	push	{r7}
20004786:	b083      	sub	sp, #12
20004788:	af00      	add	r7, sp, #0
2000478a:	4603      	mov	r3, r0
2000478c:	6039      	str	r1, [r7, #0]
2000478e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004794:	2b00      	cmp	r3, #0
20004796:	db0a      	blt.n	200047ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004798:	683b      	ldr	r3, [r7, #0]
2000479a:	b2da      	uxtb	r2, r3
2000479c:	490c      	ldr	r1, [pc, #48]	; (200047d0 <__NVIC_SetPriority+0x4c>)
2000479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
200047a2:	0112      	lsls	r2, r2, #4
200047a4:	b2d2      	uxtb	r2, r2
200047a6:	440b      	add	r3, r1
200047a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
200047ac:	e00a      	b.n	200047c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
200047ae:	683b      	ldr	r3, [r7, #0]
200047b0:	b2da      	uxtb	r2, r3
200047b2:	4908      	ldr	r1, [pc, #32]	; (200047d4 <__NVIC_SetPriority+0x50>)
200047b4:	79fb      	ldrb	r3, [r7, #7]
200047b6:	f003 030f 	and.w	r3, r3, #15
200047ba:	3b04      	subs	r3, #4
200047bc:	0112      	lsls	r2, r2, #4
200047be:	b2d2      	uxtb	r2, r2
200047c0:	440b      	add	r3, r1
200047c2:	761a      	strb	r2, [r3, #24]
}
200047c4:	bf00      	nop
200047c6:	370c      	adds	r7, #12
200047c8:	46bd      	mov	sp, r7
200047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200047ce:	4770      	bx	lr
200047d0:	e000e100 	.word	0xe000e100
200047d4:	e000ed00 	.word	0xe000ed00

200047d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
200047d8:	b480      	push	{r7}
200047da:	b089      	sub	sp, #36	; 0x24
200047dc:	af00      	add	r7, sp, #0
200047de:	60f8      	str	r0, [r7, #12]
200047e0:	60b9      	str	r1, [r7, #8]
200047e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200047e4:	68fb      	ldr	r3, [r7, #12]
200047e6:	f003 0307 	and.w	r3, r3, #7
200047ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200047ec:	69fb      	ldr	r3, [r7, #28]
200047ee:	f1c3 0307 	rsb	r3, r3, #7
200047f2:	2b04      	cmp	r3, #4
200047f4:	bf28      	it	cs
200047f6:	2304      	movcs	r3, #4
200047f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200047fa:	69fb      	ldr	r3, [r7, #28]
200047fc:	3304      	adds	r3, #4
200047fe:	2b06      	cmp	r3, #6
20004800:	d902      	bls.n	20004808 <NVIC_EncodePriority+0x30>
20004802:	69fb      	ldr	r3, [r7, #28]
20004804:	3b03      	subs	r3, #3
20004806:	e000      	b.n	2000480a <NVIC_EncodePriority+0x32>
20004808:	2300      	movs	r3, #0
2000480a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000480c:	f04f 32ff 	mov.w	r2, #4294967295
20004810:	69bb      	ldr	r3, [r7, #24]
20004812:	fa02 f303 	lsl.w	r3, r2, r3
20004816:	43da      	mvns	r2, r3
20004818:	68bb      	ldr	r3, [r7, #8]
2000481a:	401a      	ands	r2, r3
2000481c:	697b      	ldr	r3, [r7, #20]
2000481e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20004820:	f04f 31ff 	mov.w	r1, #4294967295
20004824:	697b      	ldr	r3, [r7, #20]
20004826:	fa01 f303 	lsl.w	r3, r1, r3
2000482a:	43d9      	mvns	r1, r3
2000482c:	687b      	ldr	r3, [r7, #4]
2000482e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004830:	4313      	orrs	r3, r2
         );
}
20004832:	4618      	mov	r0, r3
20004834:	3724      	adds	r7, #36	; 0x24
20004836:	46bd      	mov	sp, r7
20004838:	f85d 7b04 	ldr.w	r7, [sp], #4
2000483c:	4770      	bx	lr
	...

20004840 <LL_DMA_DisableStream>:
{
20004840:	b480      	push	{r7}
20004842:	b083      	sub	sp, #12
20004844:	af00      	add	r7, sp, #0
20004846:	6078      	str	r0, [r7, #4]
20004848:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
2000484a:	4a0c      	ldr	r2, [pc, #48]	; (2000487c <LL_DMA_DisableStream+0x3c>)
2000484c:	683b      	ldr	r3, [r7, #0]
2000484e:	4413      	add	r3, r2
20004850:	781b      	ldrb	r3, [r3, #0]
20004852:	461a      	mov	r2, r3
20004854:	687b      	ldr	r3, [r7, #4]
20004856:	4413      	add	r3, r2
20004858:	681b      	ldr	r3, [r3, #0]
2000485a:	4908      	ldr	r1, [pc, #32]	; (2000487c <LL_DMA_DisableStream+0x3c>)
2000485c:	683a      	ldr	r2, [r7, #0]
2000485e:	440a      	add	r2, r1
20004860:	7812      	ldrb	r2, [r2, #0]
20004862:	4611      	mov	r1, r2
20004864:	687a      	ldr	r2, [r7, #4]
20004866:	440a      	add	r2, r1
20004868:	f023 0301 	bic.w	r3, r3, #1
2000486c:	6013      	str	r3, [r2, #0]
}
2000486e:	bf00      	nop
20004870:	370c      	adds	r7, #12
20004872:	46bd      	mov	sp, r7
20004874:	f85d 7b04 	ldr.w	r7, [sp], #4
20004878:	4770      	bx	lr
2000487a:	bf00      	nop
2000487c:	20009ac8 	.word	0x20009ac8

20004880 <LL_DMA_SetDataTransferDirection>:
{
20004880:	b480      	push	{r7}
20004882:	b085      	sub	sp, #20
20004884:	af00      	add	r7, sp, #0
20004886:	60f8      	str	r0, [r7, #12]
20004888:	60b9      	str	r1, [r7, #8]
2000488a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
2000488c:	4a0d      	ldr	r2, [pc, #52]	; (200048c4 <LL_DMA_SetDataTransferDirection+0x44>)
2000488e:	68bb      	ldr	r3, [r7, #8]
20004890:	4413      	add	r3, r2
20004892:	781b      	ldrb	r3, [r3, #0]
20004894:	461a      	mov	r2, r3
20004896:	68fb      	ldr	r3, [r7, #12]
20004898:	4413      	add	r3, r2
2000489a:	681b      	ldr	r3, [r3, #0]
2000489c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
200048a0:	4908      	ldr	r1, [pc, #32]	; (200048c4 <LL_DMA_SetDataTransferDirection+0x44>)
200048a2:	68bb      	ldr	r3, [r7, #8]
200048a4:	440b      	add	r3, r1
200048a6:	781b      	ldrb	r3, [r3, #0]
200048a8:	4619      	mov	r1, r3
200048aa:	68fb      	ldr	r3, [r7, #12]
200048ac:	440b      	add	r3, r1
200048ae:	4619      	mov	r1, r3
200048b0:	687b      	ldr	r3, [r7, #4]
200048b2:	4313      	orrs	r3, r2
200048b4:	600b      	str	r3, [r1, #0]
}
200048b6:	bf00      	nop
200048b8:	3714      	adds	r7, #20
200048ba:	46bd      	mov	sp, r7
200048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200048c0:	4770      	bx	lr
200048c2:	bf00      	nop
200048c4:	20009ac8 	.word	0x20009ac8

200048c8 <LL_DMA_SetMode>:
{
200048c8:	b480      	push	{r7}
200048ca:	b085      	sub	sp, #20
200048cc:	af00      	add	r7, sp, #0
200048ce:	60f8      	str	r0, [r7, #12]
200048d0:	60b9      	str	r1, [r7, #8]
200048d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
200048d4:	4a0d      	ldr	r2, [pc, #52]	; (2000490c <LL_DMA_SetMode+0x44>)
200048d6:	68bb      	ldr	r3, [r7, #8]
200048d8:	4413      	add	r3, r2
200048da:	781b      	ldrb	r3, [r3, #0]
200048dc:	461a      	mov	r2, r3
200048de:	68fb      	ldr	r3, [r7, #12]
200048e0:	4413      	add	r3, r2
200048e2:	681b      	ldr	r3, [r3, #0]
200048e4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
200048e8:	4908      	ldr	r1, [pc, #32]	; (2000490c <LL_DMA_SetMode+0x44>)
200048ea:	68bb      	ldr	r3, [r7, #8]
200048ec:	440b      	add	r3, r1
200048ee:	781b      	ldrb	r3, [r3, #0]
200048f0:	4619      	mov	r1, r3
200048f2:	68fb      	ldr	r3, [r7, #12]
200048f4:	440b      	add	r3, r1
200048f6:	4619      	mov	r1, r3
200048f8:	687b      	ldr	r3, [r7, #4]
200048fa:	4313      	orrs	r3, r2
200048fc:	600b      	str	r3, [r1, #0]
}
200048fe:	bf00      	nop
20004900:	3714      	adds	r7, #20
20004902:	46bd      	mov	sp, r7
20004904:	f85d 7b04 	ldr.w	r7, [sp], #4
20004908:	4770      	bx	lr
2000490a:	bf00      	nop
2000490c:	20009ac8 	.word	0x20009ac8

20004910 <LL_DMA_SetPeriphIncMode>:
{
20004910:	b480      	push	{r7}
20004912:	b085      	sub	sp, #20
20004914:	af00      	add	r7, sp, #0
20004916:	60f8      	str	r0, [r7, #12]
20004918:	60b9      	str	r1, [r7, #8]
2000491a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
2000491c:	4a0d      	ldr	r2, [pc, #52]	; (20004954 <LL_DMA_SetPeriphIncMode+0x44>)
2000491e:	68bb      	ldr	r3, [r7, #8]
20004920:	4413      	add	r3, r2
20004922:	781b      	ldrb	r3, [r3, #0]
20004924:	461a      	mov	r2, r3
20004926:	68fb      	ldr	r3, [r7, #12]
20004928:	4413      	add	r3, r2
2000492a:	681b      	ldr	r3, [r3, #0]
2000492c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
20004930:	4908      	ldr	r1, [pc, #32]	; (20004954 <LL_DMA_SetPeriphIncMode+0x44>)
20004932:	68bb      	ldr	r3, [r7, #8]
20004934:	440b      	add	r3, r1
20004936:	781b      	ldrb	r3, [r3, #0]
20004938:	4619      	mov	r1, r3
2000493a:	68fb      	ldr	r3, [r7, #12]
2000493c:	440b      	add	r3, r1
2000493e:	4619      	mov	r1, r3
20004940:	687b      	ldr	r3, [r7, #4]
20004942:	4313      	orrs	r3, r2
20004944:	600b      	str	r3, [r1, #0]
}
20004946:	bf00      	nop
20004948:	3714      	adds	r7, #20
2000494a:	46bd      	mov	sp, r7
2000494c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004950:	4770      	bx	lr
20004952:	bf00      	nop
20004954:	20009ac8 	.word	0x20009ac8

20004958 <LL_DMA_SetMemoryIncMode>:
{
20004958:	b480      	push	{r7}
2000495a:	b085      	sub	sp, #20
2000495c:	af00      	add	r7, sp, #0
2000495e:	60f8      	str	r0, [r7, #12]
20004960:	60b9      	str	r1, [r7, #8]
20004962:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
20004964:	4a0d      	ldr	r2, [pc, #52]	; (2000499c <LL_DMA_SetMemoryIncMode+0x44>)
20004966:	68bb      	ldr	r3, [r7, #8]
20004968:	4413      	add	r3, r2
2000496a:	781b      	ldrb	r3, [r3, #0]
2000496c:	461a      	mov	r2, r3
2000496e:	68fb      	ldr	r3, [r7, #12]
20004970:	4413      	add	r3, r2
20004972:	681b      	ldr	r3, [r3, #0]
20004974:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
20004978:	4908      	ldr	r1, [pc, #32]	; (2000499c <LL_DMA_SetMemoryIncMode+0x44>)
2000497a:	68bb      	ldr	r3, [r7, #8]
2000497c:	440b      	add	r3, r1
2000497e:	781b      	ldrb	r3, [r3, #0]
20004980:	4619      	mov	r1, r3
20004982:	68fb      	ldr	r3, [r7, #12]
20004984:	440b      	add	r3, r1
20004986:	4619      	mov	r1, r3
20004988:	687b      	ldr	r3, [r7, #4]
2000498a:	4313      	orrs	r3, r2
2000498c:	600b      	str	r3, [r1, #0]
}
2000498e:	bf00      	nop
20004990:	3714      	adds	r7, #20
20004992:	46bd      	mov	sp, r7
20004994:	f85d 7b04 	ldr.w	r7, [sp], #4
20004998:	4770      	bx	lr
2000499a:	bf00      	nop
2000499c:	20009ac8 	.word	0x20009ac8

200049a0 <LL_DMA_SetPeriphSize>:
{
200049a0:	b480      	push	{r7}
200049a2:	b085      	sub	sp, #20
200049a4:	af00      	add	r7, sp, #0
200049a6:	60f8      	str	r0, [r7, #12]
200049a8:	60b9      	str	r1, [r7, #8]
200049aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
200049ac:	4a0d      	ldr	r2, [pc, #52]	; (200049e4 <LL_DMA_SetPeriphSize+0x44>)
200049ae:	68bb      	ldr	r3, [r7, #8]
200049b0:	4413      	add	r3, r2
200049b2:	781b      	ldrb	r3, [r3, #0]
200049b4:	461a      	mov	r2, r3
200049b6:	68fb      	ldr	r3, [r7, #12]
200049b8:	4413      	add	r3, r2
200049ba:	681b      	ldr	r3, [r3, #0]
200049bc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
200049c0:	4908      	ldr	r1, [pc, #32]	; (200049e4 <LL_DMA_SetPeriphSize+0x44>)
200049c2:	68bb      	ldr	r3, [r7, #8]
200049c4:	440b      	add	r3, r1
200049c6:	781b      	ldrb	r3, [r3, #0]
200049c8:	4619      	mov	r1, r3
200049ca:	68fb      	ldr	r3, [r7, #12]
200049cc:	440b      	add	r3, r1
200049ce:	4619      	mov	r1, r3
200049d0:	687b      	ldr	r3, [r7, #4]
200049d2:	4313      	orrs	r3, r2
200049d4:	600b      	str	r3, [r1, #0]
}
200049d6:	bf00      	nop
200049d8:	3714      	adds	r7, #20
200049da:	46bd      	mov	sp, r7
200049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200049e0:	4770      	bx	lr
200049e2:	bf00      	nop
200049e4:	20009ac8 	.word	0x20009ac8

200049e8 <LL_DMA_SetMemorySize>:
{
200049e8:	b480      	push	{r7}
200049ea:	b085      	sub	sp, #20
200049ec:	af00      	add	r7, sp, #0
200049ee:	60f8      	str	r0, [r7, #12]
200049f0:	60b9      	str	r1, [r7, #8]
200049f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
200049f4:	4a0d      	ldr	r2, [pc, #52]	; (20004a2c <LL_DMA_SetMemorySize+0x44>)
200049f6:	68bb      	ldr	r3, [r7, #8]
200049f8:	4413      	add	r3, r2
200049fa:	781b      	ldrb	r3, [r3, #0]
200049fc:	461a      	mov	r2, r3
200049fe:	68fb      	ldr	r3, [r7, #12]
20004a00:	4413      	add	r3, r2
20004a02:	681b      	ldr	r3, [r3, #0]
20004a04:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
20004a08:	4908      	ldr	r1, [pc, #32]	; (20004a2c <LL_DMA_SetMemorySize+0x44>)
20004a0a:	68bb      	ldr	r3, [r7, #8]
20004a0c:	440b      	add	r3, r1
20004a0e:	781b      	ldrb	r3, [r3, #0]
20004a10:	4619      	mov	r1, r3
20004a12:	68fb      	ldr	r3, [r7, #12]
20004a14:	440b      	add	r3, r1
20004a16:	4619      	mov	r1, r3
20004a18:	687b      	ldr	r3, [r7, #4]
20004a1a:	4313      	orrs	r3, r2
20004a1c:	600b      	str	r3, [r1, #0]
}
20004a1e:	bf00      	nop
20004a20:	3714      	adds	r7, #20
20004a22:	46bd      	mov	sp, r7
20004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a28:	4770      	bx	lr
20004a2a:	bf00      	nop
20004a2c:	20009ac8 	.word	0x20009ac8

20004a30 <LL_DMA_SetStreamPriorityLevel>:
{
20004a30:	b480      	push	{r7}
20004a32:	b085      	sub	sp, #20
20004a34:	af00      	add	r7, sp, #0
20004a36:	60f8      	str	r0, [r7, #12]
20004a38:	60b9      	str	r1, [r7, #8]
20004a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
20004a3c:	4a0d      	ldr	r2, [pc, #52]	; (20004a74 <LL_DMA_SetStreamPriorityLevel+0x44>)
20004a3e:	68bb      	ldr	r3, [r7, #8]
20004a40:	4413      	add	r3, r2
20004a42:	781b      	ldrb	r3, [r3, #0]
20004a44:	461a      	mov	r2, r3
20004a46:	68fb      	ldr	r3, [r7, #12]
20004a48:	4413      	add	r3, r2
20004a4a:	681b      	ldr	r3, [r3, #0]
20004a4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
20004a50:	4908      	ldr	r1, [pc, #32]	; (20004a74 <LL_DMA_SetStreamPriorityLevel+0x44>)
20004a52:	68bb      	ldr	r3, [r7, #8]
20004a54:	440b      	add	r3, r1
20004a56:	781b      	ldrb	r3, [r3, #0]
20004a58:	4619      	mov	r1, r3
20004a5a:	68fb      	ldr	r3, [r7, #12]
20004a5c:	440b      	add	r3, r1
20004a5e:	4619      	mov	r1, r3
20004a60:	687b      	ldr	r3, [r7, #4]
20004a62:	4313      	orrs	r3, r2
20004a64:	600b      	str	r3, [r1, #0]
}
20004a66:	bf00      	nop
20004a68:	3714      	adds	r7, #20
20004a6a:	46bd      	mov	sp, r7
20004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a70:	4770      	bx	lr
20004a72:	bf00      	nop
20004a74:	20009ac8 	.word	0x20009ac8

20004a78 <LL_DMA_SetChannelSelection>:
{
20004a78:	b480      	push	{r7}
20004a7a:	b085      	sub	sp, #20
20004a7c:	af00      	add	r7, sp, #0
20004a7e:	60f8      	str	r0, [r7, #12]
20004a80:	60b9      	str	r1, [r7, #8]
20004a82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
20004a84:	4a0d      	ldr	r2, [pc, #52]	; (20004abc <LL_DMA_SetChannelSelection+0x44>)
20004a86:	68bb      	ldr	r3, [r7, #8]
20004a88:	4413      	add	r3, r2
20004a8a:	781b      	ldrb	r3, [r3, #0]
20004a8c:	461a      	mov	r2, r3
20004a8e:	68fb      	ldr	r3, [r7, #12]
20004a90:	4413      	add	r3, r2
20004a92:	681b      	ldr	r3, [r3, #0]
20004a94:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
20004a98:	4908      	ldr	r1, [pc, #32]	; (20004abc <LL_DMA_SetChannelSelection+0x44>)
20004a9a:	68bb      	ldr	r3, [r7, #8]
20004a9c:	440b      	add	r3, r1
20004a9e:	781b      	ldrb	r3, [r3, #0]
20004aa0:	4619      	mov	r1, r3
20004aa2:	68fb      	ldr	r3, [r7, #12]
20004aa4:	440b      	add	r3, r1
20004aa6:	4619      	mov	r1, r3
20004aa8:	687b      	ldr	r3, [r7, #4]
20004aaa:	4313      	orrs	r3, r2
20004aac:	600b      	str	r3, [r1, #0]
}
20004aae:	bf00      	nop
20004ab0:	3714      	adds	r7, #20
20004ab2:	46bd      	mov	sp, r7
20004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ab8:	4770      	bx	lr
20004aba:	bf00      	nop
20004abc:	20009ac8 	.word	0x20009ac8

20004ac0 <LL_DMA_DisableFifoMode>:
{
20004ac0:	b480      	push	{r7}
20004ac2:	b083      	sub	sp, #12
20004ac4:	af00      	add	r7, sp, #0
20004ac6:	6078      	str	r0, [r7, #4]
20004ac8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
20004aca:	4a0c      	ldr	r2, [pc, #48]	; (20004afc <LL_DMA_DisableFifoMode+0x3c>)
20004acc:	683b      	ldr	r3, [r7, #0]
20004ace:	4413      	add	r3, r2
20004ad0:	781b      	ldrb	r3, [r3, #0]
20004ad2:	461a      	mov	r2, r3
20004ad4:	687b      	ldr	r3, [r7, #4]
20004ad6:	4413      	add	r3, r2
20004ad8:	695b      	ldr	r3, [r3, #20]
20004ada:	4908      	ldr	r1, [pc, #32]	; (20004afc <LL_DMA_DisableFifoMode+0x3c>)
20004adc:	683a      	ldr	r2, [r7, #0]
20004ade:	440a      	add	r2, r1
20004ae0:	7812      	ldrb	r2, [r2, #0]
20004ae2:	4611      	mov	r1, r2
20004ae4:	687a      	ldr	r2, [r7, #4]
20004ae6:	440a      	add	r2, r1
20004ae8:	f023 0304 	bic.w	r3, r3, #4
20004aec:	6153      	str	r3, [r2, #20]
}
20004aee:	bf00      	nop
20004af0:	370c      	adds	r7, #12
20004af2:	46bd      	mov	sp, r7
20004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004af8:	4770      	bx	lr
20004afa:	bf00      	nop
20004afc:	20009ac8 	.word	0x20009ac8

20004b00 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
20004b00:	b480      	push	{r7}
20004b02:	b083      	sub	sp, #12
20004b04:	af00      	add	r7, sp, #0
20004b06:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
20004b08:	687b      	ldr	r3, [r7, #4]
20004b0a:	2220      	movs	r2, #32
20004b0c:	60da      	str	r2, [r3, #12]
}
20004b0e:	bf00      	nop
20004b10:	370c      	adds	r7, #12
20004b12:	46bd      	mov	sp, r7
20004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b18:	4770      	bx	lr

20004b1a <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
20004b1a:	b480      	push	{r7}
20004b1c:	b083      	sub	sp, #12
20004b1e:	af00      	add	r7, sp, #0
20004b20:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
20004b22:	687b      	ldr	r3, [r7, #4]
20004b24:	2208      	movs	r2, #8
20004b26:	60da      	str	r2, [r3, #12]
}
20004b28:	bf00      	nop
20004b2a:	370c      	adds	r7, #12
20004b2c:	46bd      	mov	sp, r7
20004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b32:	4770      	bx	lr

20004b34 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
20004b34:	b480      	push	{r7}
20004b36:	b083      	sub	sp, #12
20004b38:	af00      	add	r7, sp, #0
20004b3a:	6078      	str	r0, [r7, #4]
20004b3c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
20004b3e:	4a0c      	ldr	r2, [pc, #48]	; (20004b70 <LL_DMA_EnableIT_TE+0x3c>)
20004b40:	683b      	ldr	r3, [r7, #0]
20004b42:	4413      	add	r3, r2
20004b44:	781b      	ldrb	r3, [r3, #0]
20004b46:	461a      	mov	r2, r3
20004b48:	687b      	ldr	r3, [r7, #4]
20004b4a:	4413      	add	r3, r2
20004b4c:	681b      	ldr	r3, [r3, #0]
20004b4e:	4908      	ldr	r1, [pc, #32]	; (20004b70 <LL_DMA_EnableIT_TE+0x3c>)
20004b50:	683a      	ldr	r2, [r7, #0]
20004b52:	440a      	add	r2, r1
20004b54:	7812      	ldrb	r2, [r2, #0]
20004b56:	4611      	mov	r1, r2
20004b58:	687a      	ldr	r2, [r7, #4]
20004b5a:	440a      	add	r2, r1
20004b5c:	f043 0304 	orr.w	r3, r3, #4
20004b60:	6013      	str	r3, [r2, #0]
}
20004b62:	bf00      	nop
20004b64:	370c      	adds	r7, #12
20004b66:	46bd      	mov	sp, r7
20004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b6c:	4770      	bx	lr
20004b6e:	bf00      	nop
20004b70:	20009ac8 	.word	0x20009ac8

20004b74 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
20004b74:	b480      	push	{r7}
20004b76:	b083      	sub	sp, #12
20004b78:	af00      	add	r7, sp, #0
20004b7a:	6078      	str	r0, [r7, #4]
20004b7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
20004b7e:	4a0c      	ldr	r2, [pc, #48]	; (20004bb0 <LL_DMA_EnableIT_TC+0x3c>)
20004b80:	683b      	ldr	r3, [r7, #0]
20004b82:	4413      	add	r3, r2
20004b84:	781b      	ldrb	r3, [r3, #0]
20004b86:	461a      	mov	r2, r3
20004b88:	687b      	ldr	r3, [r7, #4]
20004b8a:	4413      	add	r3, r2
20004b8c:	681b      	ldr	r3, [r3, #0]
20004b8e:	4908      	ldr	r1, [pc, #32]	; (20004bb0 <LL_DMA_EnableIT_TC+0x3c>)
20004b90:	683a      	ldr	r2, [r7, #0]
20004b92:	440a      	add	r2, r1
20004b94:	7812      	ldrb	r2, [r2, #0]
20004b96:	4611      	mov	r1, r2
20004b98:	687a      	ldr	r2, [r7, #4]
20004b9a:	440a      	add	r2, r1
20004b9c:	f043 0310 	orr.w	r3, r3, #16
20004ba0:	6013      	str	r3, [r2, #0]
}
20004ba2:	bf00      	nop
20004ba4:	370c      	adds	r7, #12
20004ba6:	46bd      	mov	sp, r7
20004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bac:	4770      	bx	lr
20004bae:	bf00      	nop
20004bb0:	20009ac8 	.word	0x20009ac8

20004bb4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
20004bb4:	b480      	push	{r7}
20004bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
20004bb8:	4b05      	ldr	r3, [pc, #20]	; (20004bd0 <LL_RCC_HSE_Enable+0x1c>)
20004bba:	681b      	ldr	r3, [r3, #0]
20004bbc:	4a04      	ldr	r2, [pc, #16]	; (20004bd0 <LL_RCC_HSE_Enable+0x1c>)
20004bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20004bc2:	6013      	str	r3, [r2, #0]
}
20004bc4:	bf00      	nop
20004bc6:	46bd      	mov	sp, r7
20004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bcc:	4770      	bx	lr
20004bce:	bf00      	nop
20004bd0:	40023800 	.word	0x40023800

20004bd4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
20004bd4:	b480      	push	{r7}
20004bd6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
20004bd8:	4b07      	ldr	r3, [pc, #28]	; (20004bf8 <LL_RCC_HSE_IsReady+0x24>)
20004bda:	681b      	ldr	r3, [r3, #0]
20004bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20004be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20004be4:	bf0c      	ite	eq
20004be6:	2301      	moveq	r3, #1
20004be8:	2300      	movne	r3, #0
20004bea:	b2db      	uxtb	r3, r3
}
20004bec:	4618      	mov	r0, r3
20004bee:	46bd      	mov	sp, r7
20004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bf4:	4770      	bx	lr
20004bf6:	bf00      	nop
20004bf8:	40023800 	.word	0x40023800

20004bfc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
20004bfc:	b480      	push	{r7}
20004bfe:	b083      	sub	sp, #12
20004c00:	af00      	add	r7, sp, #0
20004c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
20004c04:	4b06      	ldr	r3, [pc, #24]	; (20004c20 <LL_RCC_SetSysClkSource+0x24>)
20004c06:	689b      	ldr	r3, [r3, #8]
20004c08:	f023 0203 	bic.w	r2, r3, #3
20004c0c:	4904      	ldr	r1, [pc, #16]	; (20004c20 <LL_RCC_SetSysClkSource+0x24>)
20004c0e:	687b      	ldr	r3, [r7, #4]
20004c10:	4313      	orrs	r3, r2
20004c12:	608b      	str	r3, [r1, #8]
}
20004c14:	bf00      	nop
20004c16:	370c      	adds	r7, #12
20004c18:	46bd      	mov	sp, r7
20004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c1e:	4770      	bx	lr
20004c20:	40023800 	.word	0x40023800

20004c24 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
20004c24:	b480      	push	{r7}
20004c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
20004c28:	4b04      	ldr	r3, [pc, #16]	; (20004c3c <LL_RCC_GetSysClkSource+0x18>)
20004c2a:	689b      	ldr	r3, [r3, #8]
20004c2c:	f003 030c 	and.w	r3, r3, #12
}
20004c30:	4618      	mov	r0, r3
20004c32:	46bd      	mov	sp, r7
20004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c38:	4770      	bx	lr
20004c3a:	bf00      	nop
20004c3c:	40023800 	.word	0x40023800

20004c40 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
20004c40:	b480      	push	{r7}
20004c42:	b083      	sub	sp, #12
20004c44:	af00      	add	r7, sp, #0
20004c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
20004c48:	4b06      	ldr	r3, [pc, #24]	; (20004c64 <LL_RCC_SetAHBPrescaler+0x24>)
20004c4a:	689b      	ldr	r3, [r3, #8]
20004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20004c50:	4904      	ldr	r1, [pc, #16]	; (20004c64 <LL_RCC_SetAHBPrescaler+0x24>)
20004c52:	687b      	ldr	r3, [r7, #4]
20004c54:	4313      	orrs	r3, r2
20004c56:	608b      	str	r3, [r1, #8]
}
20004c58:	bf00      	nop
20004c5a:	370c      	adds	r7, #12
20004c5c:	46bd      	mov	sp, r7
20004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c62:	4770      	bx	lr
20004c64:	40023800 	.word	0x40023800

20004c68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
20004c68:	b480      	push	{r7}
20004c6a:	b083      	sub	sp, #12
20004c6c:	af00      	add	r7, sp, #0
20004c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
20004c70:	4b06      	ldr	r3, [pc, #24]	; (20004c8c <LL_RCC_SetAPB1Prescaler+0x24>)
20004c72:	689b      	ldr	r3, [r3, #8]
20004c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20004c78:	4904      	ldr	r1, [pc, #16]	; (20004c8c <LL_RCC_SetAPB1Prescaler+0x24>)
20004c7a:	687b      	ldr	r3, [r7, #4]
20004c7c:	4313      	orrs	r3, r2
20004c7e:	608b      	str	r3, [r1, #8]
}
20004c80:	bf00      	nop
20004c82:	370c      	adds	r7, #12
20004c84:	46bd      	mov	sp, r7
20004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c8a:	4770      	bx	lr
20004c8c:	40023800 	.word	0x40023800

20004c90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
20004c90:	b480      	push	{r7}
20004c92:	b083      	sub	sp, #12
20004c94:	af00      	add	r7, sp, #0
20004c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
20004c98:	4b06      	ldr	r3, [pc, #24]	; (20004cb4 <LL_RCC_SetAPB2Prescaler+0x24>)
20004c9a:	689b      	ldr	r3, [r3, #8]
20004c9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20004ca0:	4904      	ldr	r1, [pc, #16]	; (20004cb4 <LL_RCC_SetAPB2Prescaler+0x24>)
20004ca2:	687b      	ldr	r3, [r7, #4]
20004ca4:	4313      	orrs	r3, r2
20004ca6:	608b      	str	r3, [r1, #8]
}
20004ca8:	bf00      	nop
20004caa:	370c      	adds	r7, #12
20004cac:	46bd      	mov	sp, r7
20004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cb2:	4770      	bx	lr
20004cb4:	40023800 	.word	0x40023800

20004cb8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
20004cb8:	b480      	push	{r7}
20004cba:	b083      	sub	sp, #12
20004cbc:	af00      	add	r7, sp, #0
20004cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
20004cc0:	4b07      	ldr	r3, [pc, #28]	; (20004ce0 <LL_RCC_SetTIMPrescaler+0x28>)
20004cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
20004cc6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
20004cca:	4905      	ldr	r1, [pc, #20]	; (20004ce0 <LL_RCC_SetTIMPrescaler+0x28>)
20004ccc:	687b      	ldr	r3, [r7, #4]
20004cce:	4313      	orrs	r3, r2
20004cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
20004cd4:	bf00      	nop
20004cd6:	370c      	adds	r7, #12
20004cd8:	46bd      	mov	sp, r7
20004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cde:	4770      	bx	lr
20004ce0:	40023800 	.word	0x40023800

20004ce4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
20004ce4:	b480      	push	{r7}
20004ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
20004ce8:	4b05      	ldr	r3, [pc, #20]	; (20004d00 <LL_RCC_PLL_Enable+0x1c>)
20004cea:	681b      	ldr	r3, [r3, #0]
20004cec:	4a04      	ldr	r2, [pc, #16]	; (20004d00 <LL_RCC_PLL_Enable+0x1c>)
20004cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20004cf2:	6013      	str	r3, [r2, #0]
}
20004cf4:	bf00      	nop
20004cf6:	46bd      	mov	sp, r7
20004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cfc:	4770      	bx	lr
20004cfe:	bf00      	nop
20004d00:	40023800 	.word	0x40023800

20004d04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
20004d04:	b480      	push	{r7}
20004d06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
20004d08:	4b07      	ldr	r3, [pc, #28]	; (20004d28 <LL_RCC_PLL_IsReady+0x24>)
20004d0a:	681b      	ldr	r3, [r3, #0]
20004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20004d14:	bf0c      	ite	eq
20004d16:	2301      	moveq	r3, #1
20004d18:	2300      	movne	r3, #0
20004d1a:	b2db      	uxtb	r3, r3
}
20004d1c:	4618      	mov	r0, r3
20004d1e:	46bd      	mov	sp, r7
20004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d24:	4770      	bx	lr
20004d26:	bf00      	nop
20004d28:	40023800 	.word	0x40023800

20004d2c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
20004d2c:	b480      	push	{r7}
20004d2e:	b085      	sub	sp, #20
20004d30:	af00      	add	r7, sp, #0
20004d32:	60f8      	str	r0, [r7, #12]
20004d34:	60b9      	str	r1, [r7, #8]
20004d36:	607a      	str	r2, [r7, #4]
20004d38:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
20004d3a:	4b0d      	ldr	r3, [pc, #52]	; (20004d70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20004d3c:	685a      	ldr	r2, [r3, #4]
20004d3e:	4b0d      	ldr	r3, [pc, #52]	; (20004d74 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
20004d40:	4013      	ands	r3, r2
20004d42:	68f9      	ldr	r1, [r7, #12]
20004d44:	68ba      	ldr	r2, [r7, #8]
20004d46:	4311      	orrs	r1, r2
20004d48:	687a      	ldr	r2, [r7, #4]
20004d4a:	0192      	lsls	r2, r2, #6
20004d4c:	430a      	orrs	r2, r1
20004d4e:	4908      	ldr	r1, [pc, #32]	; (20004d70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20004d50:	4313      	orrs	r3, r2
20004d52:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
20004d54:	4b06      	ldr	r3, [pc, #24]	; (20004d70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20004d56:	685b      	ldr	r3, [r3, #4]
20004d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
20004d5c:	4904      	ldr	r1, [pc, #16]	; (20004d70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
20004d5e:	683b      	ldr	r3, [r7, #0]
20004d60:	4313      	orrs	r3, r2
20004d62:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
20004d64:	bf00      	nop
20004d66:	3714      	adds	r7, #20
20004d68:	46bd      	mov	sp, r7
20004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004d6e:	4770      	bx	lr
20004d70:	40023800 	.word	0x40023800
20004d74:	ffbf8000 	.word	0xffbf8000

20004d78 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
20004d78:	b480      	push	{r7}
20004d7a:	b085      	sub	sp, #20
20004d7c:	af00      	add	r7, sp, #0
20004d7e:	60f8      	str	r0, [r7, #12]
20004d80:	60b9      	str	r1, [r7, #8]
20004d82:	607a      	str	r2, [r7, #4]
20004d84:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
20004d86:	4b0a      	ldr	r3, [pc, #40]	; (20004db0 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20004d88:	685a      	ldr	r2, [r3, #4]
20004d8a:	4b0a      	ldr	r3, [pc, #40]	; (20004db4 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
20004d8c:	4013      	ands	r3, r2
20004d8e:	68f9      	ldr	r1, [r7, #12]
20004d90:	68ba      	ldr	r2, [r7, #8]
20004d92:	4311      	orrs	r1, r2
20004d94:	687a      	ldr	r2, [r7, #4]
20004d96:	0192      	lsls	r2, r2, #6
20004d98:	4311      	orrs	r1, r2
20004d9a:	683a      	ldr	r2, [r7, #0]
20004d9c:	430a      	orrs	r2, r1
20004d9e:	4904      	ldr	r1, [pc, #16]	; (20004db0 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20004da0:	4313      	orrs	r3, r2
20004da2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
20004da4:	bf00      	nop
20004da6:	3714      	adds	r7, #20
20004da8:	46bd      	mov	sp, r7
20004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dae:	4770      	bx	lr
20004db0:	40023800 	.word	0x40023800
20004db4:	f0bf8000 	.word	0xf0bf8000

20004db8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
20004db8:	b480      	push	{r7}
20004dba:	b085      	sub	sp, #20
20004dbc:	af00      	add	r7, sp, #0
20004dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
20004dc0:	4b08      	ldr	r3, [pc, #32]	; (20004de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
20004dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20004dc4:	4907      	ldr	r1, [pc, #28]	; (20004de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
20004dc6:	687b      	ldr	r3, [r7, #4]
20004dc8:	4313      	orrs	r3, r2
20004dca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20004dcc:	4b05      	ldr	r3, [pc, #20]	; (20004de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
20004dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20004dd0:	687b      	ldr	r3, [r7, #4]
20004dd2:	4013      	ands	r3, r2
20004dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20004dd6:	68fb      	ldr	r3, [r7, #12]
}
20004dd8:	bf00      	nop
20004dda:	3714      	adds	r7, #20
20004ddc:	46bd      	mov	sp, r7
20004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
20004de2:	4770      	bx	lr
20004de4:	40023800 	.word	0x40023800

20004de8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
20004de8:	b480      	push	{r7}
20004dea:	b085      	sub	sp, #20
20004dec:	af00      	add	r7, sp, #0
20004dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
20004df0:	4b08      	ldr	r3, [pc, #32]	; (20004e14 <LL_AHB2_GRP1_EnableClock+0x2c>)
20004df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20004df4:	4907      	ldr	r1, [pc, #28]	; (20004e14 <LL_AHB2_GRP1_EnableClock+0x2c>)
20004df6:	687b      	ldr	r3, [r7, #4]
20004df8:	4313      	orrs	r3, r2
20004dfa:	634b      	str	r3, [r1, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
20004dfc:	4b05      	ldr	r3, [pc, #20]	; (20004e14 <LL_AHB2_GRP1_EnableClock+0x2c>)
20004dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20004e00:	687b      	ldr	r3, [r7, #4]
20004e02:	4013      	ands	r3, r2
20004e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20004e06:	68fb      	ldr	r3, [r7, #12]
}
20004e08:	bf00      	nop
20004e0a:	3714      	adds	r7, #20
20004e0c:	46bd      	mov	sp, r7
20004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e12:	4770      	bx	lr
20004e14:	40023800 	.word	0x40023800

20004e18 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
20004e18:	b480      	push	{r7}
20004e1a:	b085      	sub	sp, #20
20004e1c:	af00      	add	r7, sp, #0
20004e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
20004e20:	4b08      	ldr	r3, [pc, #32]	; (20004e44 <LL_APB1_GRP1_EnableClock+0x2c>)
20004e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20004e24:	4907      	ldr	r1, [pc, #28]	; (20004e44 <LL_APB1_GRP1_EnableClock+0x2c>)
20004e26:	687b      	ldr	r3, [r7, #4]
20004e28:	4313      	orrs	r3, r2
20004e2a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
20004e2c:	4b05      	ldr	r3, [pc, #20]	; (20004e44 <LL_APB1_GRP1_EnableClock+0x2c>)
20004e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
20004e30:	687b      	ldr	r3, [r7, #4]
20004e32:	4013      	ands	r3, r2
20004e34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20004e36:	68fb      	ldr	r3, [r7, #12]
}
20004e38:	bf00      	nop
20004e3a:	3714      	adds	r7, #20
20004e3c:	46bd      	mov	sp, r7
20004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e42:	4770      	bx	lr
20004e44:	40023800 	.word	0x40023800

20004e48 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
20004e48:	b480      	push	{r7}
20004e4a:	b085      	sub	sp, #20
20004e4c:	af00      	add	r7, sp, #0
20004e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
20004e50:	4b08      	ldr	r3, [pc, #32]	; (20004e74 <LL_APB2_GRP1_EnableClock+0x2c>)
20004e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20004e54:	4907      	ldr	r1, [pc, #28]	; (20004e74 <LL_APB2_GRP1_EnableClock+0x2c>)
20004e56:	687b      	ldr	r3, [r7, #4]
20004e58:	4313      	orrs	r3, r2
20004e5a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
20004e5c:	4b05      	ldr	r3, [pc, #20]	; (20004e74 <LL_APB2_GRP1_EnableClock+0x2c>)
20004e5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
20004e60:	687b      	ldr	r3, [r7, #4]
20004e62:	4013      	ands	r3, r2
20004e64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
20004e66:	68fb      	ldr	r3, [r7, #12]
}
20004e68:	bf00      	nop
20004e6a:	3714      	adds	r7, #20
20004e6c:	46bd      	mov	sp, r7
20004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e72:	4770      	bx	lr
20004e74:	40023800 	.word	0x40023800

20004e78 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
20004e78:	b480      	push	{r7}
20004e7a:	b083      	sub	sp, #12
20004e7c:	af00      	add	r7, sp, #0
20004e7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
20004e80:	4b06      	ldr	r3, [pc, #24]	; (20004e9c <LL_FLASH_SetLatency+0x24>)
20004e82:	681b      	ldr	r3, [r3, #0]
20004e84:	f023 020f 	bic.w	r2, r3, #15
20004e88:	4904      	ldr	r1, [pc, #16]	; (20004e9c <LL_FLASH_SetLatency+0x24>)
20004e8a:	687b      	ldr	r3, [r7, #4]
20004e8c:	4313      	orrs	r3, r2
20004e8e:	600b      	str	r3, [r1, #0]
}
20004e90:	bf00      	nop
20004e92:	370c      	adds	r7, #12
20004e94:	46bd      	mov	sp, r7
20004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e9a:	4770      	bx	lr
20004e9c:	40023c00 	.word	0x40023c00

20004ea0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
20004ea0:	b480      	push	{r7}
20004ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
20004ea4:	4b04      	ldr	r3, [pc, #16]	; (20004eb8 <LL_FLASH_GetLatency+0x18>)
20004ea6:	681b      	ldr	r3, [r3, #0]
20004ea8:	f003 030f 	and.w	r3, r3, #15
}
20004eac:	4618      	mov	r0, r3
20004eae:	46bd      	mov	sp, r7
20004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004eb4:	4770      	bx	lr
20004eb6:	bf00      	nop
20004eb8:	40023c00 	.word	0x40023c00

20004ebc <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
20004ebc:	b480      	push	{r7}
20004ebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
20004ec0:	4b05      	ldr	r3, [pc, #20]	; (20004ed8 <LL_PWR_EnableOverDriveMode+0x1c>)
20004ec2:	681b      	ldr	r3, [r3, #0]
20004ec4:	4a04      	ldr	r2, [pc, #16]	; (20004ed8 <LL_PWR_EnableOverDriveMode+0x1c>)
20004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20004eca:	6013      	str	r3, [r2, #0]
}
20004ecc:	bf00      	nop
20004ece:	46bd      	mov	sp, r7
20004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ed4:	4770      	bx	lr
20004ed6:	bf00      	nop
20004ed8:	40007000 	.word	0x40007000

20004edc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
20004edc:	b480      	push	{r7}
20004ede:	b083      	sub	sp, #12
20004ee0:	af00      	add	r7, sp, #0
20004ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
20004ee4:	4b06      	ldr	r3, [pc, #24]	; (20004f00 <LL_PWR_SetRegulVoltageScaling+0x24>)
20004ee6:	681b      	ldr	r3, [r3, #0]
20004ee8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20004eec:	4904      	ldr	r1, [pc, #16]	; (20004f00 <LL_PWR_SetRegulVoltageScaling+0x24>)
20004eee:	687b      	ldr	r3, [r7, #4]
20004ef0:	4313      	orrs	r3, r2
20004ef2:	600b      	str	r3, [r1, #0]
}
20004ef4:	bf00      	nop
20004ef6:	370c      	adds	r7, #12
20004ef8:	46bd      	mov	sp, r7
20004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004efe:	4770      	bx	lr
20004f00:	40007000 	.word	0x40007000

20004f04 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
20004f04:	b480      	push	{r7}
20004f06:	b083      	sub	sp, #12
20004f08:	af00      	add	r7, sp, #0
20004f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
20004f0c:	687b      	ldr	r3, [r7, #4]
20004f0e:	681b      	ldr	r3, [r3, #0]
20004f10:	f043 0204 	orr.w	r2, r3, #4
20004f14:	687b      	ldr	r3, [r7, #4]
20004f16:	601a      	str	r2, [r3, #0]
}
20004f18:	bf00      	nop
20004f1a:	370c      	adds	r7, #12
20004f1c:	46bd      	mov	sp, r7
20004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f22:	4770      	bx	lr

20004f24 <LL_SPI_Enable>:
{
20004f24:	b480      	push	{r7}
20004f26:	b083      	sub	sp, #12
20004f28:	af00      	add	r7, sp, #0
20004f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
20004f2c:	687b      	ldr	r3, [r7, #4]
20004f2e:	681b      	ldr	r3, [r3, #0]
20004f30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20004f34:	687b      	ldr	r3, [r7, #4]
20004f36:	601a      	str	r2, [r3, #0]
}
20004f38:	bf00      	nop
20004f3a:	370c      	adds	r7, #12
20004f3c:	46bd      	mov	sp, r7
20004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f42:	4770      	bx	lr

20004f44 <LL_SPI_SetStandard>:
{
20004f44:	b480      	push	{r7}
20004f46:	b083      	sub	sp, #12
20004f48:	af00      	add	r7, sp, #0
20004f4a:	6078      	str	r0, [r7, #4]
20004f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
20004f4e:	687b      	ldr	r3, [r7, #4]
20004f50:	685b      	ldr	r3, [r3, #4]
20004f52:	f023 0210 	bic.w	r2, r3, #16
20004f56:	683b      	ldr	r3, [r7, #0]
20004f58:	431a      	orrs	r2, r3
20004f5a:	687b      	ldr	r3, [r7, #4]
20004f5c:	605a      	str	r2, [r3, #4]
}
20004f5e:	bf00      	nop
20004f60:	370c      	adds	r7, #12
20004f62:	46bd      	mov	sp, r7
20004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f68:	4770      	bx	lr

20004f6a <LL_SPI_EnableDMAReq_TX>:
{
20004f6a:	b480      	push	{r7}
20004f6c:	b083      	sub	sp, #12
20004f6e:	af00      	add	r7, sp, #0
20004f70:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
20004f72:	687b      	ldr	r3, [r7, #4]
20004f74:	685b      	ldr	r3, [r3, #4]
20004f76:	f043 0202 	orr.w	r2, r3, #2
20004f7a:	687b      	ldr	r3, [r7, #4]
20004f7c:	605a      	str	r2, [r3, #4]
}
20004f7e:	bf00      	nop
20004f80:	370c      	adds	r7, #12
20004f82:	46bd      	mov	sp, r7
20004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f88:	4770      	bx	lr

20004f8a <LL_GPIO_SetOutputPin>:
{
20004f8a:	b480      	push	{r7}
20004f8c:	b083      	sub	sp, #12
20004f8e:	af00      	add	r7, sp, #0
20004f90:	6078      	str	r0, [r7, #4]
20004f92:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20004f94:	687b      	ldr	r3, [r7, #4]
20004f96:	683a      	ldr	r2, [r7, #0]
20004f98:	619a      	str	r2, [r3, #24]
}
20004f9a:	bf00      	nop
20004f9c:	370c      	adds	r7, #12
20004f9e:	46bd      	mov	sp, r7
20004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fa4:	4770      	bx	lr

20004fa6 <LL_GPIO_ResetOutputPin>:
{
20004fa6:	b480      	push	{r7}
20004fa8:	b083      	sub	sp, #12
20004faa:	af00      	add	r7, sp, #0
20004fac:	6078      	str	r0, [r7, #4]
20004fae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
20004fb0:	683b      	ldr	r3, [r7, #0]
20004fb2:	041a      	lsls	r2, r3, #16
20004fb4:	687b      	ldr	r3, [r7, #4]
20004fb6:	619a      	str	r2, [r3, #24]
}
20004fb8:	bf00      	nop
20004fba:	370c      	adds	r7, #12
20004fbc:	46bd      	mov	sp, r7
20004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fc2:	4770      	bx	lr

20004fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20004fc4:	b580      	push	{r7, lr}
20004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	ptr = napis;
20004fc8:	4b38      	ldr	r3, [pc, #224]	; (200050ac <main+0xe8>)
20004fca:	4a39      	ldr	r2, [pc, #228]	; (200050b0 <main+0xec>)
20004fcc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
20004fce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
20004fd2:	f7ff ff39 	bl	20004e48 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
20004fd6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
20004fda:	f7ff ff1d 	bl	20004e18 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20004fde:	2003      	movs	r0, #3
20004fe0:	f7ff fb80 	bl	200046e4 <__NVIC_SetPriorityGrouping>

  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
20004fe4:	f7ff fba2 	bl	2000472c <__NVIC_GetPriorityGrouping>
20004fe8:	4603      	mov	r3, r0
20004fea:	2200      	movs	r2, #0
20004fec:	210f      	movs	r1, #15
20004fee:	4618      	mov	r0, r3
20004ff0:	f7ff fbf2 	bl	200047d8 <NVIC_EncodePriority>
20004ff4:	4603      	mov	r3, r0
20004ff6:	4619      	mov	r1, r3
20004ff8:	f06f 0001 	mvn.w	r0, #1
20004ffc:	f7ff fbc2 	bl	20004784 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
20005000:	f7ff fb94 	bl	2000472c <__NVIC_GetPriorityGrouping>
20005004:	4603      	mov	r3, r0
20005006:	2200      	movs	r2, #0
20005008:	210f      	movs	r1, #15
2000500a:	4618      	mov	r0, r3
2000500c:	f7ff fbe4 	bl	200047d8 <NVIC_EncodePriority>
20005010:	4603      	mov	r3, r0
20005012:	4619      	mov	r1, r3
20005014:	f04f 30ff 	mov.w	r0, #4294967295
20005018:	f7ff fbb4 	bl	20004784 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000501c:	f000 f864 	bl	200050e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20005020:	f000 f95c 	bl	200052dc <MX_GPIO_Init>
  MX_DMA_Init();
20005024:	f000 f942 	bl	200052ac <MX_DMA_Init>
  MX_RNG_Init();
20005028:	f000 f8b0 	bl	2000518c <MX_RNG_Init>
  MX_SPI5_Init();
2000502c:	f000 f8ba 	bl	200051a4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005030:	2104      	movs	r1, #4
20005032:	4820      	ldr	r0, [pc, #128]	; (200050b4 <main+0xf0>)
20005034:	f7ff fc04 	bl	20004840 <LL_DMA_DisableStream>
  LL_DMA_ClearFlag_TC4(DMA2);
20005038:	481e      	ldr	r0, [pc, #120]	; (200050b4 <main+0xf0>)
2000503a:	f7ff fd61 	bl	20004b00 <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA2);
2000503e:	481d      	ldr	r0, [pc, #116]	; (200050b4 <main+0xf0>)
20005040:	f7ff fd6b 	bl	20004b1a <LL_DMA_ClearFlag_TE4>
  LL_SPI_EnableDMAReq_TX(SPI5);
20005044:	481c      	ldr	r0, [pc, #112]	; (200050b8 <main+0xf4>)
20005046:	f7ff ff90 	bl	20004f6a <LL_SPI_EnableDMAReq_TX>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_4);
2000504a:	2104      	movs	r1, #4
2000504c:	4819      	ldr	r0, [pc, #100]	; (200050b4 <main+0xf0>)
2000504e:	f7ff fd91 	bl	20004b74 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_4);
20005052:	2104      	movs	r1, #4
20005054:	4817      	ldr	r0, [pc, #92]	; (200050b4 <main+0xf0>)
20005056:	f7ff fd6d 	bl	20004b34 <LL_DMA_EnableIT_TE>
  LL_SPI_Enable(SPI5);
2000505a:	4817      	ldr	r0, [pc, #92]	; (200050b8 <main+0xf4>)
2000505c:	f7ff ff62 	bl	20004f24 <LL_SPI_Enable>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
20005060:	f7fb fd52 	bl	20000b08 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
20005064:	4a15      	ldr	r2, [pc, #84]	; (200050bc <main+0xf8>)
20005066:	2101      	movs	r1, #1
20005068:	2001      	movs	r0, #1
2000506a:	f7fb fe44 	bl	20000cf6 <osSemaphoreNew>
2000506e:	4603      	mov	r3, r0
20005070:	4a13      	ldr	r2, [pc, #76]	; (200050c0 <main+0xfc>)
20005072:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(StartLCDTask, NULL, &LCD_Task_attributes);
20005074:	4a13      	ldr	r2, [pc, #76]	; (200050c4 <main+0x100>)
20005076:	2100      	movs	r1, #0
20005078:	4813      	ldr	r0, [pc, #76]	; (200050c8 <main+0x104>)
2000507a:	f7fb fd8f 	bl	20000b9c <osThreadNew>
2000507e:	4603      	mov	r3, r0
20005080:	4a12      	ldr	r2, [pc, #72]	; (200050cc <main+0x108>)
20005082:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
20005084:	4a12      	ldr	r2, [pc, #72]	; (200050d0 <main+0x10c>)
20005086:	2100      	movs	r1, #0
20005088:	4812      	ldr	r0, [pc, #72]	; (200050d4 <main+0x110>)
2000508a:	f7fb fd87 	bl	20000b9c <osThreadNew>
2000508e:	4603      	mov	r3, r0
20005090:	4a11      	ldr	r2, [pc, #68]	; (200050d8 <main+0x114>)
20005092:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
20005094:	4a11      	ldr	r2, [pc, #68]	; (200050dc <main+0x118>)
20005096:	2100      	movs	r1, #0
20005098:	4811      	ldr	r0, [pc, #68]	; (200050e0 <main+0x11c>)
2000509a:	f7fb fd7f 	bl	20000b9c <osThreadNew>
2000509e:	4603      	mov	r3, r0
200050a0:	4a10      	ldr	r2, [pc, #64]	; (200050e4 <main+0x120>)
200050a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
200050a4:	f7fb fd54 	bl	20000b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
200050a8:	e7fe      	b.n	200050a8 <main+0xe4>
200050aa:	bf00      	nop
200050ac:	2001e714 	.word	0x2001e714
200050b0:	20009be8 	.word	0x20009be8
200050b4:	40026400 	.word	0x40026400
200050b8:	40015000 	.word	0x40015000
200050bc:	20009b3c 	.word	0x20009b3c
200050c0:	2001e710 	.word	0x2001e710
200050c4:	20009ad0 	.word	0x20009ad0
200050c8:	2000541d 	.word	0x2000541d
200050cc:	2001e704 	.word	0x2001e704
200050d0:	20009af4 	.word	0x20009af4
200050d4:	200054f9 	.word	0x200054f9
200050d8:	2001e708 	.word	0x2001e708
200050dc:	20009b18 	.word	0x20009b18
200050e0:	200055b9 	.word	0x200055b9
200050e4:	2001e70c 	.word	0x2001e70c

200050e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200050e8:	b580      	push	{r7, lr}
200050ea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
200050ec:	2005      	movs	r0, #5
200050ee:	f7ff fec3 	bl	20004e78 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
200050f2:	bf00      	nop
200050f4:	f7ff fed4 	bl	20004ea0 <LL_FLASH_GetLatency>
200050f8:	4603      	mov	r3, r0
200050fa:	2b05      	cmp	r3, #5
200050fc:	d1fa      	bne.n	200050f4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
200050fe:	f44f 4040 	mov.w	r0, #49152	; 0xc000
20005102:	f7ff feeb 	bl	20004edc <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
20005106:	f7ff fed9 	bl	20004ebc <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
2000510a:	f7ff fd53 	bl	20004bb4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
2000510e:	bf00      	nop
20005110:	f7ff fd60 	bl	20004bd4 <LL_RCC_HSE_IsReady>
20005114:	4603      	mov	r3, r0
20005116:	2b01      	cmp	r3, #1
20005118:	d1fa      	bne.n	20005110 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
2000511a:	2300      	movs	r3, #0
2000511c:	22b4      	movs	r2, #180	; 0xb4
2000511e:	2104      	movs	r1, #4
20005120:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005124:	f7ff fe02 	bl	20004d2c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
20005128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000512c:	22b4      	movs	r2, #180	; 0xb4
2000512e:	2104      	movs	r1, #4
20005130:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005134:	f7ff fe20 	bl	20004d78 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
20005138:	f7ff fdd4 	bl	20004ce4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
2000513c:	bf00      	nop
2000513e:	f7ff fde1 	bl	20004d04 <LL_RCC_PLL_IsReady>
20005142:	4603      	mov	r3, r0
20005144:	2b01      	cmp	r3, #1
20005146:	d1fa      	bne.n	2000513e <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
20005148:	2000      	movs	r0, #0
2000514a:	f7ff fd79 	bl	20004c40 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
2000514e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
20005152:	f7ff fd89 	bl	20004c68 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
20005156:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2000515a:	f7ff fd99 	bl	20004c90 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
2000515e:	2002      	movs	r0, #2
20005160:	f7ff fd4c 	bl	20004bfc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
20005164:	bf00      	nop
20005166:	f7ff fd5d 	bl	20004c24 <LL_RCC_GetSysClkSource>
2000516a:	4603      	mov	r3, r0
2000516c:	2b08      	cmp	r3, #8
2000516e:	d1fa      	bne.n	20005166 <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
20005170:	4805      	ldr	r0, [pc, #20]	; (20005188 <SystemClock_Config+0xa0>)
20005172:	f7fb fc51 	bl	20000a18 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
20005176:	4804      	ldr	r0, [pc, #16]	; (20005188 <SystemClock_Config+0xa0>)
20005178:	f7fb fc82 	bl	20000a80 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
2000517c:	2000      	movs	r0, #0
2000517e:	f7ff fd9b 	bl	20004cb8 <LL_RCC_SetTIMPrescaler>
}
20005182:	bf00      	nop
20005184:	bd80      	pop	{r7, pc}
20005186:	bf00      	nop
20005188:	0aba9500 	.word	0x0aba9500

2000518c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
2000518c:	b580      	push	{r7, lr}
2000518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
20005190:	2040      	movs	r0, #64	; 0x40
20005192:	f7ff fe29 	bl	20004de8 <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  LL_RNG_Enable(RNG);
20005196:	4802      	ldr	r0, [pc, #8]	; (200051a0 <MX_RNG_Init+0x14>)
20005198:	f7ff feb4 	bl	20004f04 <LL_RNG_Enable>
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
2000519c:	bf00      	nop
2000519e:	bd80      	pop	{r7, pc}
200051a0:	50060800 	.word	0x50060800

200051a4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
200051a4:	b580      	push	{r7, lr}
200051a6:	b090      	sub	sp, #64	; 0x40
200051a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
200051aa:	f107 0318 	add.w	r3, r7, #24
200051ae:	2228      	movs	r2, #40	; 0x28
200051b0:	2100      	movs	r1, #0
200051b2:	4618      	mov	r0, r3
200051b4:	f000 fd10 	bl	20005bd8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
200051b8:	463b      	mov	r3, r7
200051ba:	2200      	movs	r2, #0
200051bc:	601a      	str	r2, [r3, #0]
200051be:	605a      	str	r2, [r3, #4]
200051c0:	609a      	str	r2, [r3, #8]
200051c2:	60da      	str	r2, [r3, #12]
200051c4:	611a      	str	r2, [r3, #16]
200051c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
200051c8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
200051cc:	f7ff fe3c 	bl	20004e48 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
200051d0:	2020      	movs	r0, #32
200051d2:	f7ff fdf1 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>
  /**SPI5 GPIO Configuration
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
200051d6:	f44f 7360 	mov.w	r3, #896	; 0x380
200051da:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
200051dc:	2302      	movs	r3, #2
200051de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
200051e0:	2303      	movs	r3, #3
200051e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200051e4:	2300      	movs	r3, #0
200051e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200051e8:	2300      	movs	r3, #0
200051ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
200051ec:	2305      	movs	r3, #5
200051ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
200051f0:	463b      	mov	r3, r7
200051f2:	4619      	mov	r1, r3
200051f4:	482a      	ldr	r0, [pc, #168]	; (200052a0 <MX_SPI5_Init+0xfc>)
200051f6:	f7fb fb0c 	bl	20000812 <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
200051fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
200051fe:	2104      	movs	r1, #4
20005200:	4828      	ldr	r0, [pc, #160]	; (200052a4 <MX_SPI5_Init+0x100>)
20005202:	f7ff fc39 	bl	20004a78 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
20005206:	2240      	movs	r2, #64	; 0x40
20005208:	2104      	movs	r1, #4
2000520a:	4826      	ldr	r0, [pc, #152]	; (200052a4 <MX_SPI5_Init+0x100>)
2000520c:	f7ff fb38 	bl	20004880 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
20005210:	2200      	movs	r2, #0
20005212:	2104      	movs	r1, #4
20005214:	4823      	ldr	r0, [pc, #140]	; (200052a4 <MX_SPI5_Init+0x100>)
20005216:	f7ff fc0b 	bl	20004a30 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_CIRCULAR);
2000521a:	f44f 7280 	mov.w	r2, #256	; 0x100
2000521e:	2104      	movs	r1, #4
20005220:	4820      	ldr	r0, [pc, #128]	; (200052a4 <MX_SPI5_Init+0x100>)
20005222:	f7ff fb51 	bl	200048c8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
20005226:	2200      	movs	r2, #0
20005228:	2104      	movs	r1, #4
2000522a:	481e      	ldr	r0, [pc, #120]	; (200052a4 <MX_SPI5_Init+0x100>)
2000522c:	f7ff fb70 	bl	20004910 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
20005230:	f44f 6280 	mov.w	r2, #1024	; 0x400
20005234:	2104      	movs	r1, #4
20005236:	481b      	ldr	r0, [pc, #108]	; (200052a4 <MX_SPI5_Init+0x100>)
20005238:	f7ff fb8e 	bl	20004958 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
2000523c:	2200      	movs	r2, #0
2000523e:	2104      	movs	r1, #4
20005240:	4818      	ldr	r0, [pc, #96]	; (200052a4 <MX_SPI5_Init+0x100>)
20005242:	f7ff fbad 	bl	200049a0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
20005246:	2200      	movs	r2, #0
20005248:	2104      	movs	r1, #4
2000524a:	4816      	ldr	r0, [pc, #88]	; (200052a4 <MX_SPI5_Init+0x100>)
2000524c:	f7ff fbcc 	bl	200049e8 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
20005250:	2104      	movs	r1, #4
20005252:	4814      	ldr	r0, [pc, #80]	; (200052a4 <MX_SPI5_Init+0x100>)
20005254:	f7ff fc34 	bl	20004ac0 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
20005258:	2300      	movs	r3, #0
2000525a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
2000525c:	f44f 7382 	mov.w	r3, #260	; 0x104
20005260:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
20005262:	2300      	movs	r3, #0
20005264:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
20005266:	2300      	movs	r3, #0
20005268:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
2000526a:	2300      	movs	r3, #0
2000526c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
2000526e:	f44f 7300 	mov.w	r3, #512	; 0x200
20005272:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
20005274:	2300      	movs	r3, #0
20005276:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
20005278:	2300      	movs	r3, #0
2000527a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
2000527c:	2300      	movs	r3, #0
2000527e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
20005280:	230a      	movs	r3, #10
20005282:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
20005284:	f107 0318 	add.w	r3, r7, #24
20005288:	4619      	mov	r1, r3
2000528a:	4807      	ldr	r0, [pc, #28]	; (200052a8 <MX_SPI5_Init+0x104>)
2000528c:	f7fb fb57 	bl	2000093e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
20005290:	2100      	movs	r1, #0
20005292:	4805      	ldr	r0, [pc, #20]	; (200052a8 <MX_SPI5_Init+0x104>)
20005294:	f7ff fe56 	bl	20004f44 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
20005298:	bf00      	nop
2000529a:	3740      	adds	r7, #64	; 0x40
2000529c:	46bd      	mov	sp, r7
2000529e:	bd80      	pop	{r7, pc}
200052a0:	40021400 	.word	0x40021400
200052a4:	40026400 	.word	0x40026400
200052a8:	40015000 	.word	0x40015000

200052ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
200052ac:	b580      	push	{r7, lr}
200052ae:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
200052b0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
200052b4:	f7ff fd80 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
200052b8:	f7ff fa38 	bl	2000472c <__NVIC_GetPriorityGrouping>
200052bc:	4603      	mov	r3, r0
200052be:	2200      	movs	r2, #0
200052c0:	2105      	movs	r1, #5
200052c2:	4618      	mov	r0, r3
200052c4:	f7ff fa88 	bl	200047d8 <NVIC_EncodePriority>
200052c8:	4603      	mov	r3, r0
200052ca:	4619      	mov	r1, r3
200052cc:	203c      	movs	r0, #60	; 0x3c
200052ce:	f7ff fa59 	bl	20004784 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
200052d2:	203c      	movs	r0, #60	; 0x3c
200052d4:	f7ff fa38 	bl	20004748 <__NVIC_EnableIRQ>

}
200052d8:	bf00      	nop
200052da:	bd80      	pop	{r7, pc}

200052dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
200052dc:	b580      	push	{r7, lr}
200052de:	b086      	sub	sp, #24
200052e0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
200052e2:	463b      	mov	r3, r7
200052e4:	2200      	movs	r2, #0
200052e6:	601a      	str	r2, [r3, #0]
200052e8:	605a      	str	r2, [r3, #4]
200052ea:	609a      	str	r2, [r3, #8]
200052ec:	60da      	str	r2, [r3, #12]
200052ee:	611a      	str	r2, [r3, #16]
200052f0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
200052f2:	2004      	movs	r0, #4
200052f4:	f7ff fd60 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
200052f8:	2020      	movs	r0, #32
200052fa:	f7ff fd5d 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
200052fe:	2080      	movs	r0, #128	; 0x80
20005300:	f7ff fd5a 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
20005304:	2001      	movs	r0, #1
20005306:	f7ff fd57 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
2000530a:	2008      	movs	r0, #8
2000530c:	f7ff fd54 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
20005310:	2040      	movs	r0, #64	; 0x40
20005312:	f7ff fd51 	bl	20004db8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
20005316:	2104      	movs	r1, #4
20005318:	482b      	ldr	r0, [pc, #172]	; (200053c8 <MX_GPIO_Init+0xec>)
2000531a:	f7ff fe44 	bl	20004fa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13);
2000531e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
20005322:	482a      	ldr	r0, [pc, #168]	; (200053cc <MX_GPIO_Init+0xf0>)
20005324:	f7ff fe3f 	bl	20004fa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LL_GPIO_PIN_13|LL_GPIO_PIN_14);
20005328:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
2000532c:	4828      	ldr	r0, [pc, #160]	; (200053d0 <MX_GPIO_Init+0xf4>)
2000532e:	f7ff fe3a 	bl	20004fa6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
20005332:	f44f 5360 	mov.w	r3, #14336	; 0x3800
20005336:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
20005338:	2300      	movs	r3, #0
2000533a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
2000533c:	2301      	movs	r3, #1
2000533e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20005340:	463b      	mov	r3, r7
20005342:	4619      	mov	r1, r3
20005344:	4820      	ldr	r0, [pc, #128]	; (200053c8 <MX_GPIO_Init+0xec>)
20005346:	f7fb fa64 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
2000534a:	2304      	movs	r3, #4
2000534c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
2000534e:	2301      	movs	r3, #1
20005350:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20005352:	2303      	movs	r3, #3
20005354:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005356:	2300      	movs	r3, #0
20005358:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
2000535a:	2300      	movs	r3, #0
2000535c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2000535e:	463b      	mov	r3, r7
20005360:	4619      	mov	r1, r3
20005362:	4819      	ldr	r0, [pc, #100]	; (200053c8 <MX_GPIO_Init+0xec>)
20005364:	f7fb fa55 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
20005368:	2301      	movs	r3, #1
2000536a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
2000536c:	2300      	movs	r3, #0
2000536e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005370:	2300      	movs	r3, #0
20005372:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20005374:	463b      	mov	r3, r7
20005376:	4619      	mov	r1, r3
20005378:	4816      	ldr	r0, [pc, #88]	; (200053d4 <MX_GPIO_Init+0xf8>)
2000537a:	f7fb fa4a 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
2000537e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
20005382:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005384:	2301      	movs	r3, #1
20005386:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20005388:	2303      	movs	r3, #3
2000538a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
2000538c:	2300      	movs	r3, #0
2000538e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005390:	2300      	movs	r3, #0
20005392:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20005394:	463b      	mov	r3, r7
20005396:	4619      	mov	r1, r3
20005398:	480c      	ldr	r0, [pc, #48]	; (200053cc <MX_GPIO_Init+0xf0>)
2000539a:	f7fb fa3a 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
2000539e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
200053a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
200053a4:	2301      	movs	r3, #1
200053a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
200053a8:	2300      	movs	r3, #0
200053aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200053ac:	2300      	movs	r3, #0
200053ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200053b0:	2300      	movs	r3, #0
200053b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
200053b4:	463b      	mov	r3, r7
200053b6:	4619      	mov	r1, r3
200053b8:	4805      	ldr	r0, [pc, #20]	; (200053d0 <MX_GPIO_Init+0xf4>)
200053ba:	f7fb fa2a 	bl	20000812 <LL_GPIO_Init>

}
200053be:	bf00      	nop
200053c0:	3718      	adds	r7, #24
200053c2:	46bd      	mov	sp, r7
200053c4:	bd80      	pop	{r7, pc}
200053c6:	bf00      	nop
200053c8:	40020800 	.word	0x40020800
200053cc:	40020c00 	.word	0x40020c00
200053d0:	40021800 	.word	0x40021800
200053d4:	40020000 	.word	0x40020000

200053d8 <DMA1_Stream4_TransferComplete>:

/* USER CODE BEGIN 4 */
void DMA1_Stream4_TransferComplete(void)
{
200053d8:	b580      	push	{r7, lr}
200053da:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC4(DMA2);
200053dc:	480c      	ldr	r0, [pc, #48]	; (20005410 <DMA1_Stream4_TransferComplete+0x38>)
200053de:	f7ff fb8f 	bl	20004b00 <LL_DMA_ClearFlag_TC4>
  DmaSpiCnt--;
200053e2:	4b0c      	ldr	r3, [pc, #48]	; (20005414 <DMA1_Stream4_TransferComplete+0x3c>)
200053e4:	781b      	ldrb	r3, [r3, #0]
200053e6:	3b01      	subs	r3, #1
200053e8:	b2da      	uxtb	r2, r3
200053ea:	4b0a      	ldr	r3, [pc, #40]	; (20005414 <DMA1_Stream4_TransferComplete+0x3c>)
200053ec:	701a      	strb	r2, [r3, #0]

  if(DmaSpiCnt == 0)
200053ee:	4b09      	ldr	r3, [pc, #36]	; (20005414 <DMA1_Stream4_TransferComplete+0x3c>)
200053f0:	781b      	ldrb	r3, [r3, #0]
200053f2:	2b00      	cmp	r3, #0
200053f4:	d10a      	bne.n	2000540c <DMA1_Stream4_TransferComplete+0x34>
  {
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200053f6:	2104      	movs	r1, #4
200053f8:	4805      	ldr	r0, [pc, #20]	; (20005410 <DMA1_Stream4_TransferComplete+0x38>)
200053fa:	f7ff fa21 	bl	20004840 <LL_DMA_DisableStream>
    DmaSpiCnt=1;
200053fe:	4b05      	ldr	r3, [pc, #20]	; (20005414 <DMA1_Stream4_TransferComplete+0x3c>)
20005400:	2201      	movs	r2, #1
20005402:	701a      	strb	r2, [r3, #0]
    CS_DESELECT();
20005404:	2104      	movs	r1, #4
20005406:	4804      	ldr	r0, [pc, #16]	; (20005418 <DMA1_Stream4_TransferComplete+0x40>)
20005408:	f7ff fdbf 	bl	20004f8a <LL_GPIO_SetOutputPin>
  }
}
2000540c:	bf00      	nop
2000540e:	bd80      	pop	{r7, pc}
20005410:	40026400 	.word	0x40026400
20005414:	20009be4 	.word	0x20009be4
20005418:	40020800 	.word	0x40020800

2000541c <StartLCDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
2000541c:	b580      	push	{r7, lr}
2000541e:	b086      	sub	sp, #24
20005420:	af02      	add	r7, sp, #8
20005422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  TFTDisplay_ILI9341_Initialization(240, 320);
20005424:	f44f 71a0 	mov.w	r1, #320	; 0x140
20005428:	20f0      	movs	r0, #240	; 0xf0
2000542a:	f7fe fb87 	bl	20003b3c <TFTDisplay_ILI9341_Initialization>
    TFTDisplay_ILI9341_SetRotation(2);
2000542e:	2002      	movs	r0, #2
20005430:	f7fe fda8 	bl	20003f84 <TFTDisplay_ILI9341_SetRotation>
    led_inited = true;
20005434:	4b29      	ldr	r3, [pc, #164]	; (200054dc <StartLCDTask+0xc0>)
20005436:	2201      	movs	r2, #1
20005438:	701a      	strb	r2, [r3, #0]

	  for (int i=0; i < dl_n; i++){
2000543a:	2300      	movs	r3, #0
2000543c:	60fb      	str	r3, [r7, #12]
2000543e:	e018      	b.n	20005472 <StartLCDTask+0x56>
		  TFTDisplay_ILI9341_DrawChar (nx, ny, *ptr);
20005440:	4b27      	ldr	r3, [pc, #156]	; (200054e0 <StartLCDTask+0xc4>)
20005442:	681b      	ldr	r3, [r3, #0]
20005444:	b298      	uxth	r0, r3
20005446:	4b27      	ldr	r3, [pc, #156]	; (200054e4 <StartLCDTask+0xc8>)
20005448:	681b      	ldr	r3, [r3, #0]
2000544a:	b299      	uxth	r1, r3
2000544c:	4b26      	ldr	r3, [pc, #152]	; (200054e8 <StartLCDTask+0xcc>)
2000544e:	681b      	ldr	r3, [r3, #0]
20005450:	781b      	ldrb	r3, [r3, #0]
20005452:	461a      	mov	r2, r3
20005454:	f7fe fc98 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
		  nx= nx +10;
20005458:	4b21      	ldr	r3, [pc, #132]	; (200054e0 <StartLCDTask+0xc4>)
2000545a:	681b      	ldr	r3, [r3, #0]
2000545c:	330a      	adds	r3, #10
2000545e:	4a20      	ldr	r2, [pc, #128]	; (200054e0 <StartLCDTask+0xc4>)
20005460:	6013      	str	r3, [r2, #0]
		  ptr++;
20005462:	4b21      	ldr	r3, [pc, #132]	; (200054e8 <StartLCDTask+0xcc>)
20005464:	681b      	ldr	r3, [r3, #0]
20005466:	3301      	adds	r3, #1
20005468:	4a1f      	ldr	r2, [pc, #124]	; (200054e8 <StartLCDTask+0xcc>)
2000546a:	6013      	str	r3, [r2, #0]
	  for (int i=0; i < dl_n; i++){
2000546c:	68fb      	ldr	r3, [r7, #12]
2000546e:	3301      	adds	r3, #1
20005470:	60fb      	str	r3, [r7, #12]
20005472:	4b1e      	ldr	r3, [pc, #120]	; (200054ec <StartLCDTask+0xd0>)
20005474:	681b      	ldr	r3, [r3, #0]
20005476:	68fa      	ldr	r2, [r7, #12]
20005478:	429a      	cmp	r2, r3
2000547a:	dbe1      	blt.n	20005440 <StartLCDTask+0x24>

	  }


	  TFTDisplay_ILI9341_DrawLine(0, 0, 240, 240, TFT_COLOR_ILI9341_RED);
2000547c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
20005480:	9300      	str	r3, [sp, #0]
20005482:	23f0      	movs	r3, #240	; 0xf0
20005484:	22f0      	movs	r2, #240	; 0xf0
20005486:	2100      	movs	r1, #0
20005488:	2000      	movs	r0, #0
2000548a:	f7fe fbed 	bl	20003c68 <TFTDisplay_ILI9341_DrawLine>


	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
2000548e:	e002      	b.n	20005496 <StartLCDTask+0x7a>
		{
		osDelay(2);					//aby nie blokować innych tasków
20005490:	2002      	movs	r0, #2
20005492:	f7fb fc15 	bl	20000cc0 <osDelay>
	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
20005496:	4b16      	ldr	r3, [pc, #88]	; (200054f0 <StartLCDTask+0xd4>)
20005498:	691b      	ldr	r3, [r3, #16]
2000549a:	f003 0301 	and.w	r3, r3, #1
2000549e:	2b00      	cmp	r3, #0
200054a0:	d0f6      	beq.n	20005490 <StartLCDTask+0x74>
		}

	/* Infinite loop */
	for(;;)
	{
		for(int i=0; i< 10; i++)
200054a2:	2300      	movs	r3, #0
200054a4:	60bb      	str	r3, [r7, #8]
200054a6:	e014      	b.n	200054d2 <StartLCDTask+0xb6>
		  {
			  TFTDisplay_ILI9341_DrawChar(100, 100, 0x30 + i);
200054a8:	68bb      	ldr	r3, [r7, #8]
200054aa:	b2db      	uxtb	r3, r3
200054ac:	3330      	adds	r3, #48	; 0x30
200054ae:	b2db      	uxtb	r3, r3
200054b0:	461a      	mov	r2, r3
200054b2:	2164      	movs	r1, #100	; 0x64
200054b4:	2064      	movs	r0, #100	; 0x64
200054b6:	f7fe fc67 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
			  TFTDisplay_ILI9341_DrawChar(100, 120, 0x31); //według fizyki czarnej dziury tu to działa
200054ba:	2231      	movs	r2, #49	; 0x31
200054bc:	2178      	movs	r1, #120	; 0x78
200054be:	2064      	movs	r0, #100	; 0x64
200054c0:	f7fe fc62 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
//			  int real_temp = (int)output;
//			  int exp_temp = (int)expected;
//			  bool window = false;
//			  Draw_info((int)in4.output * 10, (int)pid.expected * 10, true);
			  osDelay(500);
200054c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
200054c8:	f7fb fbfa 	bl	20000cc0 <osDelay>
		for(int i=0; i< 10; i++)
200054cc:	68bb      	ldr	r3, [r7, #8]
200054ce:	3301      	adds	r3, #1
200054d0:	60bb      	str	r3, [r7, #8]
200054d2:	68bb      	ldr	r3, [r7, #8]
200054d4:	2b09      	cmp	r3, #9
200054d6:	dde7      	ble.n	200054a8 <StartLCDTask+0x8c>
200054d8:	e7e3      	b.n	200054a2 <StartLCDTask+0x86>
200054da:	bf00      	nop
200054dc:	2000e6a4 	.word	0x2000e6a4
200054e0:	2001e718 	.word	0x2001e718
200054e4:	20009c08 	.word	0x20009c08
200054e8:	2001e714 	.word	0x2001e714
200054ec:	20009c04 	.word	0x20009c04
200054f0:	40020000 	.word	0x40020000
200054f4:	00000000 	.word	0x00000000

200054f8 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
200054f8:	b580      	push	{r7, lr}
200054fa:	b082      	sub	sp, #8
200054fc:	af00      	add	r7, sp, #0
200054fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */

  /* Infinite loop */
  for(;;)
  {
	    if(!(GPIOC -> IDR & 0x0800)){
20005500:	4b2b      	ldr	r3, [pc, #172]	; (200055b0 <StartTask04+0xb8>)
20005502:	691b      	ldr	r3, [r3, #16]
20005504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20005508:	2b00      	cmp	r3, #0
2000550a:	d11a      	bne.n	20005542 <StartTask04+0x4a>
	        pid.expected += 0.1;
2000550c:	4b29      	ldr	r3, [pc, #164]	; (200055b4 <StartTask04+0xbc>)
2000550e:	69db      	ldr	r3, [r3, #28]
20005510:	4618      	mov	r0, r3
20005512:	f7fa ffd1 	bl	200004b8 <__aeabi_f2d>
20005516:	a324      	add	r3, pc, #144	; (adr r3, 200055a8 <StartTask04+0xb0>)
20005518:	e9d3 2300 	ldrd	r2, r3, [r3]
2000551c:	f7fa fe6e 	bl	200001fc <__adddf3>
20005520:	4602      	mov	r2, r0
20005522:	460b      	mov	r3, r1
20005524:	4610      	mov	r0, r2
20005526:	4619      	mov	r1, r3
20005528:	f7fb f81e 	bl	20000568 <__aeabi_d2f>
2000552c:	4603      	mov	r3, r0
2000552e:	4a21      	ldr	r2, [pc, #132]	; (200055b4 <StartTask04+0xbc>)
20005530:	61d3      	str	r3, [r2, #28]
	        TFTDisplay_ILI9341_DrawChar(100, 150, 0x31);
20005532:	2231      	movs	r2, #49	; 0x31
20005534:	2196      	movs	r1, #150	; 0x96
20005536:	2064      	movs	r0, #100	; 0x64
20005538:	f7fe fc26 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
	        osDelay(190);
2000553c:	20be      	movs	r0, #190	; 0xbe
2000553e:	f7fb fbbf 	bl	20000cc0 <osDelay>
	    }
	    if(!(GPIOC -> IDR & 0x1000)){
20005542:	4b1b      	ldr	r3, [pc, #108]	; (200055b0 <StartTask04+0xb8>)
20005544:	691b      	ldr	r3, [r3, #16]
20005546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2000554a:	2b00      	cmp	r3, #0
2000554c:	d11a      	bne.n	20005584 <StartTask04+0x8c>
	        pid.expected -= 0.1;
2000554e:	4b19      	ldr	r3, [pc, #100]	; (200055b4 <StartTask04+0xbc>)
20005550:	69db      	ldr	r3, [r3, #28]
20005552:	4618      	mov	r0, r3
20005554:	f7fa ffb0 	bl	200004b8 <__aeabi_f2d>
20005558:	a313      	add	r3, pc, #76	; (adr r3, 200055a8 <StartTask04+0xb0>)
2000555a:	e9d3 2300 	ldrd	r2, r3, [r3]
2000555e:	f7fa fe4b 	bl	200001f8 <__aeabi_dsub>
20005562:	4602      	mov	r2, r0
20005564:	460b      	mov	r3, r1
20005566:	4610      	mov	r0, r2
20005568:	4619      	mov	r1, r3
2000556a:	f7fa fffd 	bl	20000568 <__aeabi_d2f>
2000556e:	4603      	mov	r3, r0
20005570:	4a10      	ldr	r2, [pc, #64]	; (200055b4 <StartTask04+0xbc>)
20005572:	61d3      	str	r3, [r2, #28]
	        TFTDisplay_ILI9341_DrawChar(100, 150, 0x32);
20005574:	2232      	movs	r2, #50	; 0x32
20005576:	2196      	movs	r1, #150	; 0x96
20005578:	2064      	movs	r0, #100	; 0x64
2000557a:	f7fe fc05 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
	        osDelay(190);
2000557e:	20be      	movs	r0, #190	; 0xbe
20005580:	f7fb fb9e 	bl	20000cc0 <osDelay>
	    }
	    if(!(GPIOC -> IDR & 0x2000)){
20005584:	4b0a      	ldr	r3, [pc, #40]	; (200055b0 <StartTask04+0xb8>)
20005586:	691b      	ldr	r3, [r3, #16]
20005588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
2000558c:	2b00      	cmp	r3, #0
2000558e:	d104      	bne.n	2000559a <StartTask04+0xa2>
	    	TFTDisplay_ILI9341_DrawChar(100, 150, 0x30);
20005590:	2230      	movs	r2, #48	; 0x30
20005592:	2196      	movs	r1, #150	; 0x96
20005594:	2064      	movs	r0, #100	; 0x64
20005596:	f7fe fbf7 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
	    }
//	    if (lcdprop.pFont != NULL && lcdprop.pFont->table != NULL) { //chat idea
//	        TFTDisplay_ILI9341_DrawChar(100, 120, 0x31);
//	    }
//		TFTDisplay_ILI9341_DrawChar(100, 120, 0x31); //według fizyki czarnej dziury tu to nie działa
	    osDelay(10);
2000559a:	200a      	movs	r0, #10
2000559c:	f7fb fb90 	bl	20000cc0 <osDelay>
	    if(!(GPIOC -> IDR & 0x0800)){
200055a0:	e7ae      	b.n	20005500 <StartTask04+0x8>
200055a2:	bf00      	nop
200055a4:	f3af 8000 	nop.w
200055a8:	9999999a 	.word	0x9999999a
200055ac:	3fb99999 	.word	0x3fb99999
200055b0:	40020800 	.word	0x40020800
200055b4:	2001e6b0 	.word	0x2001e6b0

200055b8 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
200055b8:	b580      	push	{r7, lr}
200055ba:	b082      	sub	sp, #8
200055bc:	af00      	add	r7, sp, #0
200055be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
    PID_s_init(&pid, 10, 3, 0.9, tp);
200055c0:	4b2e      	ldr	r3, [pc, #184]	; (2000567c <StartTask05+0xc4>)
200055c2:	edd3 7a00 	vldr	s15, [r3]
200055c6:	eef0 1a67 	vmov.f32	s3, s15
200055ca:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 20005680 <StartTask05+0xc8>
200055ce:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
200055d2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
200055d6:	482b      	ldr	r0, [pc, #172]	; (20005684 <StartTask05+0xcc>)
200055d8:	f000 f928 	bl	2000582c <PID_s_init>
    Inercja_s_init(&in3, 1, tp, 5);
200055dc:	4b27      	ldr	r3, [pc, #156]	; (2000567c <StartTask05+0xc4>)
200055de:	edd3 7a00 	vldr	s15, [r3]
200055e2:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
200055e6:	eef0 0a67 	vmov.f32	s1, s15
200055ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
200055ee:	4826      	ldr	r0, [pc, #152]	; (20005688 <StartTask05+0xd0>)
200055f0:	f000 f9b0 	bl	20005954 <Inercja_s_init>
    Inercja_s_init(&in4, 2, tp, 3);
200055f4:	4b21      	ldr	r3, [pc, #132]	; (2000567c <StartTask05+0xc4>)
200055f6:	edd3 7a00 	vldr	s15, [r3]
200055fa:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
200055fe:	eef0 0a67 	vmov.f32	s1, s15
20005602:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
20005606:	4821      	ldr	r0, [pc, #132]	; (2000568c <StartTask05+0xd4>)
20005608:	f000 f9a4 	bl	20005954 <Inercja_s_init>
    pid.expected = 18;
2000560c:	4b1d      	ldr	r3, [pc, #116]	; (20005684 <StartTask05+0xcc>)
2000560e:	4a20      	ldr	r2, [pc, #128]	; (20005690 <StartTask05+0xd8>)
20005610:	61da      	str	r2, [r3, #28]
    in4.output = 17;
20005612:	4b1e      	ldr	r3, [pc, #120]	; (2000568c <StartTask05+0xd4>)
20005614:	4a1f      	ldr	r2, [pc, #124]	; (20005694 <StartTask05+0xdc>)
20005616:	611a      	str	r2, [r3, #16]
  /* Infinite loop */
  for(;;)
  {
	    pid.input = in4.output;
20005618:	4b1c      	ldr	r3, [pc, #112]	; (2000568c <StartTask05+0xd4>)
2000561a:	691b      	ldr	r3, [r3, #16]
2000561c:	4a19      	ldr	r2, [pc, #100]	; (20005684 <StartTask05+0xcc>)
2000561e:	6193      	str	r3, [r2, #24]
	    Reg_s_step(&pid);
20005620:	4818      	ldr	r0, [pc, #96]	; (20005684 <StartTask05+0xcc>)
20005622:	f000 f929 	bl	20005878 <Reg_s_step>
	    //output = pid.output;
	    in3.input = pid.output;
20005626:	4b17      	ldr	r3, [pc, #92]	; (20005684 <StartTask05+0xcc>)
20005628:	6a1b      	ldr	r3, [r3, #32]
2000562a:	4a17      	ldr	r2, [pc, #92]	; (20005688 <StartTask05+0xd0>)
2000562c:	6153      	str	r3, [r2, #20]
	    Inercja_s_step(&in3);
2000562e:	4816      	ldr	r0, [pc, #88]	; (20005688 <StartTask05+0xd0>)
20005630:	f000 f9ad 	bl	2000598e <Inercja_s_step>
	    in4.input = in3.output;
20005634:	4b14      	ldr	r3, [pc, #80]	; (20005688 <StartTask05+0xd0>)
20005636:	691b      	ldr	r3, [r3, #16]
20005638:	4a14      	ldr	r2, [pc, #80]	; (2000568c <StartTask05+0xd4>)
2000563a:	6153      	str	r3, [r2, #20]
	    Inercja_s_step(&in4);
2000563c:	4813      	ldr	r0, [pc, #76]	; (2000568c <StartTask05+0xd4>)
2000563e:	f000 f9a6 	bl	2000598e <Inercja_s_step>
	    Draw_info((int)(in3.output * 10), (int) (pid.expected * 10), false);
20005642:	4b11      	ldr	r3, [pc, #68]	; (20005688 <StartTask05+0xd0>)
20005644:	edd3 7a04 	vldr	s15, [r3, #16]
20005648:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
2000564c:	ee67 7a87 	vmul.f32	s15, s15, s14
20005650:	eefd 6ae7 	vcvt.s32.f32	s13, s15
20005654:	4b0b      	ldr	r3, [pc, #44]	; (20005684 <StartTask05+0xcc>)
20005656:	edd3 7a07 	vldr	s15, [r3, #28]
2000565a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
2000565e:	ee67 7a87 	vmul.f32	s15, s15, s14
20005662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
20005666:	2200      	movs	r2, #0
20005668:	ee17 1a90 	vmov	r1, s15
2000566c:	ee16 0a90 	vmov	r0, s13
20005670:	f000 f812 	bl	20005698 <Draw_info>
//	    Draw_info(104, 152, false);

	    osDelay(50);
20005674:	2032      	movs	r0, #50	; 0x32
20005676:	f7fb fb23 	bl	20000cc0 <osDelay>
	    pid.input = in4.output;
2000567a:	e7cd      	b.n	20005618 <StartTask05+0x60>
2000567c:	20009be0 	.word	0x20009be0
20005680:	3f666666 	.word	0x3f666666
20005684:	2001e6b0 	.word	0x2001e6b0
20005688:	2001e6d4 	.word	0x2001e6d4
2000568c:	2001e6ec 	.word	0x2001e6ec
20005690:	41900000 	.word	0x41900000
20005694:	41880000 	.word	0x41880000

20005698 <Draw_info>:
#include "ll_spi_ili9341.h"

unsigned short int *const LCD_FB = (unsigned short int*) 0xD0000000;
unsigned short int *const LCD_BUF = (unsigned short int*) 0xD0100000;

void Draw_info(int real_temp, int exp_temp, bool window){
20005698:	b5b0      	push	{r4, r5, r7, lr}
2000569a:	b08e      	sub	sp, #56	; 0x38
2000569c:	af02      	add	r7, sp, #8
2000569e:	60f8      	str	r0, [r7, #12]
200056a0:	60b9      	str	r1, [r7, #8]
200056a2:	4613      	mov	r3, r2
200056a4:	71fb      	strb	r3, [r7, #7]
    unsigned char data[]= "Temp:  .  Set:  .  Okno";
200056a6:	4b5e      	ldr	r3, [pc, #376]	; (20005820 <Draw_info+0x188>)
200056a8:	f107 0414 	add.w	r4, r7, #20
200056ac:	461d      	mov	r5, r3
200056ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
200056b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
200056b2:	e895 0003 	ldmia.w	r5, {r0, r1}
200056b6:	e884 0003 	stmia.w	r4, {r0, r1}
    if(real_temp > 500) real_temp = 500;
200056ba:	68fb      	ldr	r3, [r7, #12]
200056bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
200056c0:	dd02      	ble.n	200056c8 <Draw_info+0x30>
200056c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
200056c6:	60fb      	str	r3, [r7, #12]
    data[5] = real_temp / 100 + '0';
200056c8:	68fb      	ldr	r3, [r7, #12]
200056ca:	4a56      	ldr	r2, [pc, #344]	; (20005824 <Draw_info+0x18c>)
200056cc:	fb82 1203 	smull	r1, r2, r2, r3
200056d0:	1152      	asrs	r2, r2, #5
200056d2:	17db      	asrs	r3, r3, #31
200056d4:	1ad3      	subs	r3, r2, r3
200056d6:	b2db      	uxtb	r3, r3
200056d8:	3330      	adds	r3, #48	; 0x30
200056da:	b2db      	uxtb	r3, r3
200056dc:	767b      	strb	r3, [r7, #25]
    data[6] = ((real_temp / 10) - (real_temp / 100 * 10)) + '0';
200056de:	68fb      	ldr	r3, [r7, #12]
200056e0:	4a51      	ldr	r2, [pc, #324]	; (20005828 <Draw_info+0x190>)
200056e2:	fb82 1203 	smull	r1, r2, r2, r3
200056e6:	1092      	asrs	r2, r2, #2
200056e8:	17db      	asrs	r3, r3, #31
200056ea:	1ad3      	subs	r3, r2, r3
200056ec:	b2da      	uxtb	r2, r3
200056ee:	68fb      	ldr	r3, [r7, #12]
200056f0:	494c      	ldr	r1, [pc, #304]	; (20005824 <Draw_info+0x18c>)
200056f2:	fb81 0103 	smull	r0, r1, r1, r3
200056f6:	1149      	asrs	r1, r1, #5
200056f8:	17db      	asrs	r3, r3, #31
200056fa:	1a5b      	subs	r3, r3, r1
200056fc:	b2db      	uxtb	r3, r3
200056fe:	4619      	mov	r1, r3
20005700:	0089      	lsls	r1, r1, #2
20005702:	440b      	add	r3, r1
20005704:	005b      	lsls	r3, r3, #1
20005706:	b2db      	uxtb	r3, r3
20005708:	4413      	add	r3, r2
2000570a:	b2db      	uxtb	r3, r3
2000570c:	3330      	adds	r3, #48	; 0x30
2000570e:	b2db      	uxtb	r3, r3
20005710:	76bb      	strb	r3, [r7, #26]
    data[8] = real_temp % 10 + '0';
20005712:	68fa      	ldr	r2, [r7, #12]
20005714:	4b44      	ldr	r3, [pc, #272]	; (20005828 <Draw_info+0x190>)
20005716:	fb83 1302 	smull	r1, r3, r3, r2
2000571a:	1099      	asrs	r1, r3, #2
2000571c:	17d3      	asrs	r3, r2, #31
2000571e:	1ac9      	subs	r1, r1, r3
20005720:	460b      	mov	r3, r1
20005722:	009b      	lsls	r3, r3, #2
20005724:	440b      	add	r3, r1
20005726:	005b      	lsls	r3, r3, #1
20005728:	1ad1      	subs	r1, r2, r3
2000572a:	b2cb      	uxtb	r3, r1
2000572c:	3330      	adds	r3, #48	; 0x30
2000572e:	b2db      	uxtb	r3, r3
20005730:	773b      	strb	r3, [r7, #28]
    data[14] = exp_temp / 100 + '0';
20005732:	68bb      	ldr	r3, [r7, #8]
20005734:	4a3b      	ldr	r2, [pc, #236]	; (20005824 <Draw_info+0x18c>)
20005736:	fb82 1203 	smull	r1, r2, r2, r3
2000573a:	1152      	asrs	r2, r2, #5
2000573c:	17db      	asrs	r3, r3, #31
2000573e:	1ad3      	subs	r3, r2, r3
20005740:	b2db      	uxtb	r3, r3
20005742:	3330      	adds	r3, #48	; 0x30
20005744:	b2db      	uxtb	r3, r3
20005746:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    data[15] = ((exp_temp / 10) - (exp_temp / 100 * 10)) + '0';
2000574a:	68bb      	ldr	r3, [r7, #8]
2000574c:	4a36      	ldr	r2, [pc, #216]	; (20005828 <Draw_info+0x190>)
2000574e:	fb82 1203 	smull	r1, r2, r2, r3
20005752:	1092      	asrs	r2, r2, #2
20005754:	17db      	asrs	r3, r3, #31
20005756:	1ad3      	subs	r3, r2, r3
20005758:	b2da      	uxtb	r2, r3
2000575a:	68bb      	ldr	r3, [r7, #8]
2000575c:	4931      	ldr	r1, [pc, #196]	; (20005824 <Draw_info+0x18c>)
2000575e:	fb81 0103 	smull	r0, r1, r1, r3
20005762:	1149      	asrs	r1, r1, #5
20005764:	17db      	asrs	r3, r3, #31
20005766:	1a5b      	subs	r3, r3, r1
20005768:	b2db      	uxtb	r3, r3
2000576a:	4619      	mov	r1, r3
2000576c:	0089      	lsls	r1, r1, #2
2000576e:	440b      	add	r3, r1
20005770:	005b      	lsls	r3, r3, #1
20005772:	b2db      	uxtb	r3, r3
20005774:	4413      	add	r3, r2
20005776:	b2db      	uxtb	r3, r3
20005778:	3330      	adds	r3, #48	; 0x30
2000577a:	b2db      	uxtb	r3, r3
2000577c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    data[17] = exp_temp % 10 + '0';
20005780:	68ba      	ldr	r2, [r7, #8]
20005782:	4b29      	ldr	r3, [pc, #164]	; (20005828 <Draw_info+0x190>)
20005784:	fb83 1302 	smull	r1, r3, r3, r2
20005788:	1099      	asrs	r1, r3, #2
2000578a:	17d3      	asrs	r3, r2, #31
2000578c:	1ac9      	subs	r1, r1, r3
2000578e:	460b      	mov	r3, r1
20005790:	009b      	lsls	r3, r3, #2
20005792:	440b      	add	r3, r1
20005794:	005b      	lsls	r3, r3, #1
20005796:	1ad1      	subs	r1, r2, r3
20005798:	b2cb      	uxtb	r3, r1
2000579a:	3330      	adds	r3, #48	; 0x30
2000579c:	b2db      	uxtb	r3, r3
2000579e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    for(int i = 0; i < 23; i++){
200057a2:	2300      	movs	r3, #0
200057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
200057a6:	e012      	b.n	200057ce <Draw_info+0x136>
    	TFTDisplay_ILI9341_DrawChar(i * 10, 2, data[i]); //nie działa
200057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200057aa:	b29b      	uxth	r3, r3
200057ac:	461a      	mov	r2, r3
200057ae:	0092      	lsls	r2, r2, #2
200057b0:	4413      	add	r3, r2
200057b2:	005b      	lsls	r3, r3, #1
200057b4:	b298      	uxth	r0, r3
200057b6:	f107 0214 	add.w	r2, r7, #20
200057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200057bc:	4413      	add	r3, r2
200057be:	781b      	ldrb	r3, [r3, #0]
200057c0:	461a      	mov	r2, r3
200057c2:	2102      	movs	r1, #2
200057c4:	f7fe fae0 	bl	20003d88 <TFTDisplay_ILI9341_DrawChar>
    for(int i = 0; i < 23; i++){
200057c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200057ca:	3301      	adds	r3, #1
200057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
200057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200057d0:	2b16      	cmp	r3, #22
200057d2:	dde9      	ble.n	200057a8 <Draw_info+0x110>
    }
    if(!window){
200057d4:	79fb      	ldrb	r3, [r7, #7]
200057d6:	f083 0301 	eor.w	r3, r3, #1
200057da:	b2db      	uxtb	r3, r3
200057dc:	2b00      	cmp	r3, #0
200057de:	d01a      	beq.n	20005816 <Draw_info+0x17e>
        TFTDisplay_ILI9341_DrawLine(190, 9, 230, 9, 0x07E0);
200057e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
200057e4:	9300      	str	r3, [sp, #0]
200057e6:	2309      	movs	r3, #9
200057e8:	22e6      	movs	r2, #230	; 0xe6
200057ea:	2109      	movs	r1, #9
200057ec:	20be      	movs	r0, #190	; 0xbe
200057ee:	f7fe fa3b 	bl	20003c68 <TFTDisplay_ILI9341_DrawLine>
        TFTDisplay_ILI9341_DrawLine(190, 8, 230, 8, 0x07E0);
200057f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
200057f6:	9300      	str	r3, [sp, #0]
200057f8:	2308      	movs	r3, #8
200057fa:	22e6      	movs	r2, #230	; 0xe6
200057fc:	2108      	movs	r1, #8
200057fe:	20be      	movs	r0, #190	; 0xbe
20005800:	f7fe fa32 	bl	20003c68 <TFTDisplay_ILI9341_DrawLine>
        TFTDisplay_ILI9341_DrawLine(190, 7, 230, 7, 0x07E0);
20005804:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
20005808:	9300      	str	r3, [sp, #0]
2000580a:	2307      	movs	r3, #7
2000580c:	22e6      	movs	r2, #230	; 0xe6
2000580e:	2107      	movs	r1, #7
20005810:	20be      	movs	r0, #190	; 0xbe
20005812:	f7fe fa29 	bl	20003c68 <TFTDisplay_ILI9341_DrawLine>
    }
}
20005816:	bf00      	nop
20005818:	3730      	adds	r7, #48	; 0x30
2000581a:	46bd      	mov	sp, r7
2000581c:	bdb0      	pop	{r4, r5, r7, pc}
2000581e:	bf00      	nop
20005820:	20005dcc 	.word	0x20005dcc
20005824:	51eb851f 	.word	0x51eb851f
20005828:	66666667 	.word	0x66666667

2000582c <PID_s_init>:
#include "reg2.h"

void PID_s_init(PID_s* reg, float kp, float ti, float td, float t){
2000582c:	b480      	push	{r7}
2000582e:	b087      	sub	sp, #28
20005830:	af00      	add	r7, sp, #0
20005832:	6178      	str	r0, [r7, #20]
20005834:	ed87 0a04 	vstr	s0, [r7, #16]
20005838:	edc7 0a03 	vstr	s1, [r7, #12]
2000583c:	ed87 1a02 	vstr	s2, [r7, #8]
20005840:	edc7 1a01 	vstr	s3, [r7, #4]
    reg->Kp = kp;
20005844:	697b      	ldr	r3, [r7, #20]
20005846:	693a      	ldr	r2, [r7, #16]
20005848:	601a      	str	r2, [r3, #0]
    reg->Ti = ti;
2000584a:	697b      	ldr	r3, [r7, #20]
2000584c:	68fa      	ldr	r2, [r7, #12]
2000584e:	605a      	str	r2, [r3, #4]
    reg->Td = td;
20005850:	697b      	ldr	r3, [r7, #20]
20005852:	68ba      	ldr	r2, [r7, #8]
20005854:	609a      	str	r2, [r3, #8]
    reg->Ts = t;
20005856:	697b      	ldr	r3, [r7, #20]
20005858:	687a      	ldr	r2, [r7, #4]
2000585a:	60da      	str	r2, [r3, #12]
    reg->last_i = 0;
2000585c:	697b      	ldr	r3, [r7, #20]
2000585e:	f04f 0200 	mov.w	r2, #0
20005862:	611a      	str	r2, [r3, #16]
    reg->last_input = 0;
20005864:	697b      	ldr	r3, [r7, #20]
20005866:	f04f 0200 	mov.w	r2, #0
2000586a:	615a      	str	r2, [r3, #20]
}
2000586c:	bf00      	nop
2000586e:	371c      	adds	r7, #28
20005870:	46bd      	mov	sp, r7
20005872:	f85d 7b04 	ldr.w	r7, [sp], #4
20005876:	4770      	bx	lr

20005878 <Reg_s_step>:

void Reg_s_step(PID_s* reg){
20005878:	b480      	push	{r7}
2000587a:	b087      	sub	sp, #28
2000587c:	af00      	add	r7, sp, #0
2000587e:	6078      	str	r0, [r7, #4]
    //printf("(input: %f, expected: %f)",input, expected);
    float P = reg->Kp * (reg->expected - reg->input);
20005880:	687b      	ldr	r3, [r7, #4]
20005882:	ed93 7a00 	vldr	s14, [r3]
20005886:	687b      	ldr	r3, [r7, #4]
20005888:	edd3 6a07 	vldr	s13, [r3, #28]
2000588c:	687b      	ldr	r3, [r7, #4]
2000588e:	edd3 7a06 	vldr	s15, [r3, #24]
20005892:	ee76 7ae7 	vsub.f32	s15, s13, s15
20005896:	ee67 7a27 	vmul.f32	s15, s14, s15
2000589a:	edc7 7a05 	vstr	s15, [r7, #20]
    float I = (reg->Kp /reg->Ti * reg->Ts * (reg->expected - reg->input)) + reg->last_i;        
2000589e:	687b      	ldr	r3, [r7, #4]
200058a0:	edd3 6a00 	vldr	s13, [r3]
200058a4:	687b      	ldr	r3, [r7, #4]
200058a6:	edd3 7a01 	vldr	s15, [r3, #4]
200058aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200058ae:	687b      	ldr	r3, [r7, #4]
200058b0:	edd3 7a03 	vldr	s15, [r3, #12]
200058b4:	ee27 7a27 	vmul.f32	s14, s14, s15
200058b8:	687b      	ldr	r3, [r7, #4]
200058ba:	edd3 6a07 	vldr	s13, [r3, #28]
200058be:	687b      	ldr	r3, [r7, #4]
200058c0:	edd3 7a06 	vldr	s15, [r3, #24]
200058c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
200058c8:	ee27 7a27 	vmul.f32	s14, s14, s15
200058cc:	687b      	ldr	r3, [r7, #4]
200058ce:	edd3 7a04 	vldr	s15, [r3, #16]
200058d2:	ee77 7a27 	vadd.f32	s15, s14, s15
200058d6:	edc7 7a04 	vstr	s15, [r7, #16]
    float D = reg->Kp * ((reg->expected - reg->input) - (reg->expected - reg->last_input))/reg->Ts * reg->Td;
200058da:	687b      	ldr	r3, [r7, #4]
200058dc:	ed93 7a00 	vldr	s14, [r3]
200058e0:	687b      	ldr	r3, [r7, #4]
200058e2:	edd3 6a07 	vldr	s13, [r3, #28]
200058e6:	687b      	ldr	r3, [r7, #4]
200058e8:	edd3 7a06 	vldr	s15, [r3, #24]
200058ec:	ee76 6ae7 	vsub.f32	s13, s13, s15
200058f0:	687b      	ldr	r3, [r7, #4]
200058f2:	ed93 6a07 	vldr	s12, [r3, #28]
200058f6:	687b      	ldr	r3, [r7, #4]
200058f8:	edd3 7a05 	vldr	s15, [r3, #20]
200058fc:	ee76 7a67 	vsub.f32	s15, s12, s15
20005900:	ee76 7ae7 	vsub.f32	s15, s13, s15
20005904:	ee67 6a27 	vmul.f32	s13, s14, s15
20005908:	687b      	ldr	r3, [r7, #4]
2000590a:	edd3 7a03 	vldr	s15, [r3, #12]
2000590e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20005912:	687b      	ldr	r3, [r7, #4]
20005914:	edd3 7a02 	vldr	s15, [r3, #8]
20005918:	ee67 7a27 	vmul.f32	s15, s14, s15
2000591c:	edc7 7a03 	vstr	s15, [r7, #12]
    //printf("P: %.2f \t", P);
    reg->last_i = I;
20005920:	687b      	ldr	r3, [r7, #4]
20005922:	693a      	ldr	r2, [r7, #16]
20005924:	611a      	str	r2, [r3, #16]
    reg->last_input = reg->input;
20005926:	687b      	ldr	r3, [r7, #4]
20005928:	699a      	ldr	r2, [r3, #24]
2000592a:	687b      	ldr	r3, [r7, #4]
2000592c:	615a      	str	r2, [r3, #20]
    reg->output = P + I + D;
2000592e:	ed97 7a05 	vldr	s14, [r7, #20]
20005932:	edd7 7a04 	vldr	s15, [r7, #16]
20005936:	ee37 7a27 	vadd.f32	s14, s14, s15
2000593a:	edd7 7a03 	vldr	s15, [r7, #12]
2000593e:	ee77 7a27 	vadd.f32	s15, s14, s15
20005942:	687b      	ldr	r3, [r7, #4]
20005944:	edc3 7a08 	vstr	s15, [r3, #32]
}
20005948:	bf00      	nop
2000594a:	371c      	adds	r7, #28
2000594c:	46bd      	mov	sp, r7
2000594e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005952:	4770      	bx	lr

20005954 <Inercja_s_init>:

void Inercja_s_init(Inercja_s* in,float  k, float t, float ti){
20005954:	b480      	push	{r7}
20005956:	b085      	sub	sp, #20
20005958:	af00      	add	r7, sp, #0
2000595a:	60f8      	str	r0, [r7, #12]
2000595c:	ed87 0a02 	vstr	s0, [r7, #8]
20005960:	edc7 0a01 	vstr	s1, [r7, #4]
20005964:	ed87 1a00 	vstr	s2, [r7]
    in->last_input = 0;
20005968:	68fb      	ldr	r3, [r7, #12]
2000596a:	f04f 0200 	mov.w	r2, #0
2000596e:	601a      	str	r2, [r3, #0]
    in->kp = k;
20005970:	68fb      	ldr	r3, [r7, #12]
20005972:	68ba      	ldr	r2, [r7, #8]
20005974:	605a      	str	r2, [r3, #4]
    in->ts = t;
20005976:	68fb      	ldr	r3, [r7, #12]
20005978:	687a      	ldr	r2, [r7, #4]
2000597a:	60da      	str	r2, [r3, #12]
    in->tin = ti;
2000597c:	68fb      	ldr	r3, [r7, #12]
2000597e:	683a      	ldr	r2, [r7, #0]
20005980:	609a      	str	r2, [r3, #8]
}
20005982:	bf00      	nop
20005984:	3714      	adds	r7, #20
20005986:	46bd      	mov	sp, r7
20005988:	f85d 7b04 	ldr.w	r7, [sp], #4
2000598c:	4770      	bx	lr

2000598e <Inercja_s_step>:

void Inercja_s_step(Inercja_s* in){
2000598e:	b480      	push	{r7}
20005990:	b083      	sub	sp, #12
20005992:	af00      	add	r7, sp, #0
20005994:	6078      	str	r0, [r7, #4]
    //local out =  (Tp / (5 + Tp)) * enter + (5 / (5 + Tp)) * last           -- 1/(5s+1)
    //local out = ((Tp / (3 + Tp)) * enter + (3 / (3 + Tp)) * last/2)*2     -- 2/(3s+1)
    in->output = ((in->ts / (in->tin + in->ts)) * in->input + (in->tin / (in->tin + in->ts)) * in->last_input/in->kp)*in->kp;
20005996:	687b      	ldr	r3, [r7, #4]
20005998:	edd3 6a03 	vldr	s13, [r3, #12]
2000599c:	687b      	ldr	r3, [r7, #4]
2000599e:	ed93 7a02 	vldr	s14, [r3, #8]
200059a2:	687b      	ldr	r3, [r7, #4]
200059a4:	edd3 7a03 	vldr	s15, [r3, #12]
200059a8:	ee77 7a27 	vadd.f32	s15, s14, s15
200059ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200059b0:	687b      	ldr	r3, [r7, #4]
200059b2:	edd3 7a05 	vldr	s15, [r3, #20]
200059b6:	ee27 7a27 	vmul.f32	s14, s14, s15
200059ba:	687b      	ldr	r3, [r7, #4]
200059bc:	ed93 6a02 	vldr	s12, [r3, #8]
200059c0:	687b      	ldr	r3, [r7, #4]
200059c2:	edd3 6a02 	vldr	s13, [r3, #8]
200059c6:	687b      	ldr	r3, [r7, #4]
200059c8:	edd3 7a03 	vldr	s15, [r3, #12]
200059cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
200059d0:	eec6 6a27 	vdiv.f32	s13, s12, s15
200059d4:	687b      	ldr	r3, [r7, #4]
200059d6:	edd3 7a00 	vldr	s15, [r3]
200059da:	ee26 6aa7 	vmul.f32	s12, s13, s15
200059de:	687b      	ldr	r3, [r7, #4]
200059e0:	edd3 6a01 	vldr	s13, [r3, #4]
200059e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
200059e8:	ee37 7a27 	vadd.f32	s14, s14, s15
200059ec:	687b      	ldr	r3, [r7, #4]
200059ee:	edd3 7a01 	vldr	s15, [r3, #4]
200059f2:	ee67 7a27 	vmul.f32	s15, s14, s15
200059f6:	687b      	ldr	r3, [r7, #4]
200059f8:	edc3 7a04 	vstr	s15, [r3, #16]
    in->last_input = in->input;
200059fc:	687b      	ldr	r3, [r7, #4]
200059fe:	695a      	ldr	r2, [r3, #20]
20005a00:	687b      	ldr	r3, [r7, #4]
20005a02:	601a      	str	r2, [r3, #0]
20005a04:	bf00      	nop
20005a06:	370c      	adds	r7, #12
20005a08:	46bd      	mov	sp, r7
20005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a0e:	4770      	bx	lr

20005a10 <LL_DMA_IsActiveFlag_TC4>:
{
20005a10:	b480      	push	{r7}
20005a12:	b083      	sub	sp, #12
20005a14:	af00      	add	r7, sp, #0
20005a16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
20005a18:	687b      	ldr	r3, [r7, #4]
20005a1a:	685b      	ldr	r3, [r3, #4]
20005a1c:	f003 0320 	and.w	r3, r3, #32
20005a20:	2b20      	cmp	r3, #32
20005a22:	bf0c      	ite	eq
20005a24:	2301      	moveq	r3, #1
20005a26:	2300      	movne	r3, #0
20005a28:	b2db      	uxtb	r3, r3
}
20005a2a:	4618      	mov	r0, r3
20005a2c:	370c      	adds	r7, #12
20005a2e:	46bd      	mov	sp, r7
20005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a34:	4770      	bx	lr

20005a36 <LL_DMA_IsActiveFlag_TE4>:
{
20005a36:	b480      	push	{r7}
20005a38:	b083      	sub	sp, #12
20005a3a:	af00      	add	r7, sp, #0
20005a3c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
20005a3e:	687b      	ldr	r3, [r7, #4]
20005a40:	685b      	ldr	r3, [r3, #4]
20005a42:	f003 0308 	and.w	r3, r3, #8
20005a46:	2b08      	cmp	r3, #8
20005a48:	bf0c      	ite	eq
20005a4a:	2301      	moveq	r3, #1
20005a4c:	2300      	movne	r3, #0
20005a4e:	b2db      	uxtb	r3, r3
}
20005a50:	4618      	mov	r0, r3
20005a52:	370c      	adds	r7, #12
20005a54:	46bd      	mov	sp, r7
20005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a5a:	4770      	bx	lr

20005a5c <LL_DMA_ClearFlag_TE4>:
{
20005a5c:	b480      	push	{r7}
20005a5e:	b083      	sub	sp, #12
20005a60:	af00      	add	r7, sp, #0
20005a62:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
20005a64:	687b      	ldr	r3, [r7, #4]
20005a66:	2208      	movs	r2, #8
20005a68:	60da      	str	r2, [r3, #12]
}
20005a6a:	bf00      	nop
20005a6c:	370c      	adds	r7, #12
20005a6e:	46bd      	mov	sp, r7
20005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a74:	4770      	bx	lr

20005a76 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20005a76:	b480      	push	{r7}
20005a78:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
20005a7a:	bf00      	nop
20005a7c:	46bd      	mov	sp, r7
20005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a82:	4770      	bx	lr

20005a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20005a84:	b480      	push	{r7}
20005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20005a88:	e7fe      	b.n	20005a88 <HardFault_Handler+0x4>

20005a8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20005a8a:	b480      	push	{r7}
20005a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20005a8e:	e7fe      	b.n	20005a8e <MemManage_Handler+0x4>

20005a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20005a90:	b480      	push	{r7}
20005a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20005a94:	e7fe      	b.n	20005a94 <BusFault_Handler+0x4>

20005a96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20005a96:	b480      	push	{r7}
20005a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20005a9a:	e7fe      	b.n	20005a9a <UsageFault_Handler+0x4>

20005a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20005a9c:	b480      	push	{r7}
20005a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20005aa0:	bf00      	nop
20005aa2:	46bd      	mov	sp, r7
20005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005aa8:	4770      	bx	lr

20005aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20005aaa:	b580      	push	{r7, lr}
20005aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
20005aae:	f7fc feb9 	bl	20002824 <xTaskGetSchedulerState>
20005ab2:	4603      	mov	r3, r0
20005ab4:	2b01      	cmp	r3, #1
20005ab6:	d001      	beq.n	20005abc <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
20005ab8:	f7fd fc9e 	bl	200033f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20005abc:	bf00      	nop
20005abe:	bd80      	pop	{r7, pc}

20005ac0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
20005ac0:	b580      	push	{r7, lr}
20005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC4(DMA2) == 1)
20005ac4:	4809      	ldr	r0, [pc, #36]	; (20005aec <DMA2_Stream4_IRQHandler+0x2c>)
20005ac6:	f7ff ffa3 	bl	20005a10 <LL_DMA_IsActiveFlag_TC4>
20005aca:	4603      	mov	r3, r0
20005acc:	2b01      	cmp	r3, #1
20005ace:	d102      	bne.n	20005ad6 <DMA2_Stream4_IRQHandler+0x16>
  {
    DMA1_Stream4_TransferComplete();
20005ad0:	f7ff fc82 	bl	200053d8 <DMA1_Stream4_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
  {
    LL_DMA_ClearFlag_TE4(DMA2);
  }
  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
20005ad4:	e008      	b.n	20005ae8 <DMA2_Stream4_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
20005ad6:	4805      	ldr	r0, [pc, #20]	; (20005aec <DMA2_Stream4_IRQHandler+0x2c>)
20005ad8:	f7ff ffad 	bl	20005a36 <LL_DMA_IsActiveFlag_TE4>
20005adc:	4603      	mov	r3, r0
20005ade:	2b01      	cmp	r3, #1
20005ae0:	d102      	bne.n	20005ae8 <DMA2_Stream4_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE4(DMA2);
20005ae2:	4802      	ldr	r0, [pc, #8]	; (20005aec <DMA2_Stream4_IRQHandler+0x2c>)
20005ae4:	f7ff ffba 	bl	20005a5c <LL_DMA_ClearFlag_TE4>
}
20005ae8:	bf00      	nop
20005aea:	bd80      	pop	{r7, pc}
20005aec:	40026400 	.word	0x40026400

20005af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20005af0:	b480      	push	{r7}
20005af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20005af4:	4b08      	ldr	r3, [pc, #32]	; (20005b18 <SystemInit+0x28>)
20005af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20005afa:	4a07      	ldr	r2, [pc, #28]	; (20005b18 <SystemInit+0x28>)
20005afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20005b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
20005b04:	4b04      	ldr	r3, [pc, #16]	; (20005b18 <SystemInit+0x28>)
20005b06:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
20005b0a:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
20005b0c:	bf00      	nop
20005b0e:	46bd      	mov	sp, r7
20005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b14:	4770      	bx	lr
20005b16:	bf00      	nop
20005b18:	e000ed00 	.word	0xe000ed00

20005b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
20005b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 20005b54 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
20005b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
20005b22:	e003      	b.n	20005b2c <LoopCopyDataInit>

20005b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
20005b24:	4b0c      	ldr	r3, [pc, #48]	; (20005b58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
20005b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
20005b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
20005b2a:	3104      	adds	r1, #4

20005b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
20005b2c:	480b      	ldr	r0, [pc, #44]	; (20005b5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
20005b2e:	4b0c      	ldr	r3, [pc, #48]	; (20005b60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
20005b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
20005b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
20005b34:	d3f6      	bcc.n	20005b24 <CopyDataInit>
  ldr  r2, =_sbss
20005b36:	4a0b      	ldr	r2, [pc, #44]	; (20005b64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
20005b38:	e002      	b.n	20005b40 <LoopFillZerobss>

20005b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
20005b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
20005b3c:	f842 3b04 	str.w	r3, [r2], #4

20005b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
20005b40:	4b09      	ldr	r3, [pc, #36]	; (20005b68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
20005b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
20005b44:	d3f9      	bcc.n	20005b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
20005b46:	f7ff ffd3 	bl	20005af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20005b4a:	f000 f811 	bl	20005b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20005b4e:	f7ff fa39 	bl	20004fc4 <main>
  bx  lr    
20005b52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
20005b54:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
20005b58:	20009bb4 	.word	0x20009bb4
  ldr  r0, =_sdata
20005b5c:	20009bb4 	.word	0x20009bb4
  ldr  r3, =_edata
20005b60:	20009c74 	.word	0x20009c74
  ldr  r2, =_sbss
20005b64:	20009c74 	.word	0x20009c74
  ldr  r3, = _ebss
20005b68:	2001e724 	.word	0x2001e724

20005b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20005b6c:	e7fe      	b.n	20005b6c <ADC_IRQHandler>
	...

20005b70 <__libc_init_array>:
20005b70:	b570      	push	{r4, r5, r6, lr}
20005b72:	4d0d      	ldr	r5, [pc, #52]	; (20005ba8 <__libc_init_array+0x38>)
20005b74:	4c0d      	ldr	r4, [pc, #52]	; (20005bac <__libc_init_array+0x3c>)
20005b76:	1b64      	subs	r4, r4, r5
20005b78:	10a4      	asrs	r4, r4, #2
20005b7a:	2600      	movs	r6, #0
20005b7c:	42a6      	cmp	r6, r4
20005b7e:	d109      	bne.n	20005b94 <__libc_init_array+0x24>
20005b80:	4d0b      	ldr	r5, [pc, #44]	; (20005bb0 <__libc_init_array+0x40>)
20005b82:	4c0c      	ldr	r4, [pc, #48]	; (20005bb4 <__libc_init_array+0x44>)
20005b84:	f000 f8f2 	bl	20005d6c <_init>
20005b88:	1b64      	subs	r4, r4, r5
20005b8a:	10a4      	asrs	r4, r4, #2
20005b8c:	2600      	movs	r6, #0
20005b8e:	42a6      	cmp	r6, r4
20005b90:	d105      	bne.n	20005b9e <__libc_init_array+0x2e>
20005b92:	bd70      	pop	{r4, r5, r6, pc}
20005b94:	f855 3b04 	ldr.w	r3, [r5], #4
20005b98:	4798      	blx	r3
20005b9a:	3601      	adds	r6, #1
20005b9c:	e7ee      	b.n	20005b7c <__libc_init_array+0xc>
20005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
20005ba2:	4798      	blx	r3
20005ba4:	3601      	adds	r6, #1
20005ba6:	e7f2      	b.n	20005b8e <__libc_init_array+0x1e>
20005ba8:	20009bac 	.word	0x20009bac
20005bac:	20009bac 	.word	0x20009bac
20005bb0:	20009bac 	.word	0x20009bac
20005bb4:	20009bb0 	.word	0x20009bb0

20005bb8 <__retarget_lock_acquire_recursive>:
20005bb8:	4770      	bx	lr

20005bba <__retarget_lock_release_recursive>:
20005bba:	4770      	bx	lr

20005bbc <memcpy>:
20005bbc:	440a      	add	r2, r1
20005bbe:	4291      	cmp	r1, r2
20005bc0:	f100 33ff 	add.w	r3, r0, #4294967295
20005bc4:	d100      	bne.n	20005bc8 <memcpy+0xc>
20005bc6:	4770      	bx	lr
20005bc8:	b510      	push	{r4, lr}
20005bca:	f811 4b01 	ldrb.w	r4, [r1], #1
20005bce:	f803 4f01 	strb.w	r4, [r3, #1]!
20005bd2:	4291      	cmp	r1, r2
20005bd4:	d1f9      	bne.n	20005bca <memcpy+0xe>
20005bd6:	bd10      	pop	{r4, pc}

20005bd8 <memset>:
20005bd8:	4402      	add	r2, r0
20005bda:	4603      	mov	r3, r0
20005bdc:	4293      	cmp	r3, r2
20005bde:	d100      	bne.n	20005be2 <memset+0xa>
20005be0:	4770      	bx	lr
20005be2:	f803 1b01 	strb.w	r1, [r3], #1
20005be6:	e7f9      	b.n	20005bdc <memset+0x4>

20005be8 <cleanup_glue>:
20005be8:	b538      	push	{r3, r4, r5, lr}
20005bea:	460c      	mov	r4, r1
20005bec:	6809      	ldr	r1, [r1, #0]
20005bee:	4605      	mov	r5, r0
20005bf0:	b109      	cbz	r1, 20005bf6 <cleanup_glue+0xe>
20005bf2:	f7ff fff9 	bl	20005be8 <cleanup_glue>
20005bf6:	4621      	mov	r1, r4
20005bf8:	4628      	mov	r0, r5
20005bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
20005bfe:	f000 b869 	b.w	20005cd4 <_free_r>
	...

20005c04 <_reclaim_reent>:
20005c04:	4b2c      	ldr	r3, [pc, #176]	; (20005cb8 <_reclaim_reent+0xb4>)
20005c06:	681b      	ldr	r3, [r3, #0]
20005c08:	4283      	cmp	r3, r0
20005c0a:	b570      	push	{r4, r5, r6, lr}
20005c0c:	4604      	mov	r4, r0
20005c0e:	d051      	beq.n	20005cb4 <_reclaim_reent+0xb0>
20005c10:	6a43      	ldr	r3, [r0, #36]	; 0x24
20005c12:	b143      	cbz	r3, 20005c26 <_reclaim_reent+0x22>
20005c14:	68db      	ldr	r3, [r3, #12]
20005c16:	2b00      	cmp	r3, #0
20005c18:	d14a      	bne.n	20005cb0 <_reclaim_reent+0xac>
20005c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
20005c1c:	6819      	ldr	r1, [r3, #0]
20005c1e:	b111      	cbz	r1, 20005c26 <_reclaim_reent+0x22>
20005c20:	4620      	mov	r0, r4
20005c22:	f000 f857 	bl	20005cd4 <_free_r>
20005c26:	6961      	ldr	r1, [r4, #20]
20005c28:	b111      	cbz	r1, 20005c30 <_reclaim_reent+0x2c>
20005c2a:	4620      	mov	r0, r4
20005c2c:	f000 f852 	bl	20005cd4 <_free_r>
20005c30:	6a61      	ldr	r1, [r4, #36]	; 0x24
20005c32:	b111      	cbz	r1, 20005c3a <_reclaim_reent+0x36>
20005c34:	4620      	mov	r0, r4
20005c36:	f000 f84d 	bl	20005cd4 <_free_r>
20005c3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
20005c3c:	b111      	cbz	r1, 20005c44 <_reclaim_reent+0x40>
20005c3e:	4620      	mov	r0, r4
20005c40:	f000 f848 	bl	20005cd4 <_free_r>
20005c44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
20005c46:	b111      	cbz	r1, 20005c4e <_reclaim_reent+0x4a>
20005c48:	4620      	mov	r0, r4
20005c4a:	f000 f843 	bl	20005cd4 <_free_r>
20005c4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
20005c50:	b111      	cbz	r1, 20005c58 <_reclaim_reent+0x54>
20005c52:	4620      	mov	r0, r4
20005c54:	f000 f83e 	bl	20005cd4 <_free_r>
20005c58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20005c5a:	b111      	cbz	r1, 20005c62 <_reclaim_reent+0x5e>
20005c5c:	4620      	mov	r0, r4
20005c5e:	f000 f839 	bl	20005cd4 <_free_r>
20005c62:	6da1      	ldr	r1, [r4, #88]	; 0x58
20005c64:	b111      	cbz	r1, 20005c6c <_reclaim_reent+0x68>
20005c66:	4620      	mov	r0, r4
20005c68:	f000 f834 	bl	20005cd4 <_free_r>
20005c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
20005c6e:	b111      	cbz	r1, 20005c76 <_reclaim_reent+0x72>
20005c70:	4620      	mov	r0, r4
20005c72:	f000 f82f 	bl	20005cd4 <_free_r>
20005c76:	69a3      	ldr	r3, [r4, #24]
20005c78:	b1e3      	cbz	r3, 20005cb4 <_reclaim_reent+0xb0>
20005c7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20005c7c:	4620      	mov	r0, r4
20005c7e:	4798      	blx	r3
20005c80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
20005c82:	b1b9      	cbz	r1, 20005cb4 <_reclaim_reent+0xb0>
20005c84:	4620      	mov	r0, r4
20005c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20005c8a:	f7ff bfad 	b.w	20005be8 <cleanup_glue>
20005c8e:	5949      	ldr	r1, [r1, r5]
20005c90:	b941      	cbnz	r1, 20005ca4 <_reclaim_reent+0xa0>
20005c92:	3504      	adds	r5, #4
20005c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
20005c96:	2d80      	cmp	r5, #128	; 0x80
20005c98:	68d9      	ldr	r1, [r3, #12]
20005c9a:	d1f8      	bne.n	20005c8e <_reclaim_reent+0x8a>
20005c9c:	4620      	mov	r0, r4
20005c9e:	f000 f819 	bl	20005cd4 <_free_r>
20005ca2:	e7ba      	b.n	20005c1a <_reclaim_reent+0x16>
20005ca4:	680e      	ldr	r6, [r1, #0]
20005ca6:	4620      	mov	r0, r4
20005ca8:	f000 f814 	bl	20005cd4 <_free_r>
20005cac:	4631      	mov	r1, r6
20005cae:	e7ef      	b.n	20005c90 <_reclaim_reent+0x8c>
20005cb0:	2500      	movs	r5, #0
20005cb2:	e7ef      	b.n	20005c94 <_reclaim_reent+0x90>
20005cb4:	bd70      	pop	{r4, r5, r6, pc}
20005cb6:	bf00      	nop
20005cb8:	20009c10 	.word	0x20009c10

20005cbc <__malloc_lock>:
20005cbc:	4801      	ldr	r0, [pc, #4]	; (20005cc4 <__malloc_lock+0x8>)
20005cbe:	f7ff bf7b 	b.w	20005bb8 <__retarget_lock_acquire_recursive>
20005cc2:	bf00      	nop
20005cc4:	2001e71c 	.word	0x2001e71c

20005cc8 <__malloc_unlock>:
20005cc8:	4801      	ldr	r0, [pc, #4]	; (20005cd0 <__malloc_unlock+0x8>)
20005cca:	f7ff bf76 	b.w	20005bba <__retarget_lock_release_recursive>
20005cce:	bf00      	nop
20005cd0:	2001e71c 	.word	0x2001e71c

20005cd4 <_free_r>:
20005cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
20005cd6:	2900      	cmp	r1, #0
20005cd8:	d044      	beq.n	20005d64 <_free_r+0x90>
20005cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
20005cde:	9001      	str	r0, [sp, #4]
20005ce0:	2b00      	cmp	r3, #0
20005ce2:	f1a1 0404 	sub.w	r4, r1, #4
20005ce6:	bfb8      	it	lt
20005ce8:	18e4      	addlt	r4, r4, r3
20005cea:	f7ff ffe7 	bl	20005cbc <__malloc_lock>
20005cee:	4a1e      	ldr	r2, [pc, #120]	; (20005d68 <_free_r+0x94>)
20005cf0:	9801      	ldr	r0, [sp, #4]
20005cf2:	6813      	ldr	r3, [r2, #0]
20005cf4:	b933      	cbnz	r3, 20005d04 <_free_r+0x30>
20005cf6:	6063      	str	r3, [r4, #4]
20005cf8:	6014      	str	r4, [r2, #0]
20005cfa:	b003      	add	sp, #12
20005cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
20005d00:	f7ff bfe2 	b.w	20005cc8 <__malloc_unlock>
20005d04:	42a3      	cmp	r3, r4
20005d06:	d908      	bls.n	20005d1a <_free_r+0x46>
20005d08:	6825      	ldr	r5, [r4, #0]
20005d0a:	1961      	adds	r1, r4, r5
20005d0c:	428b      	cmp	r3, r1
20005d0e:	bf01      	itttt	eq
20005d10:	6819      	ldreq	r1, [r3, #0]
20005d12:	685b      	ldreq	r3, [r3, #4]
20005d14:	1949      	addeq	r1, r1, r5
20005d16:	6021      	streq	r1, [r4, #0]
20005d18:	e7ed      	b.n	20005cf6 <_free_r+0x22>
20005d1a:	461a      	mov	r2, r3
20005d1c:	685b      	ldr	r3, [r3, #4]
20005d1e:	b10b      	cbz	r3, 20005d24 <_free_r+0x50>
20005d20:	42a3      	cmp	r3, r4
20005d22:	d9fa      	bls.n	20005d1a <_free_r+0x46>
20005d24:	6811      	ldr	r1, [r2, #0]
20005d26:	1855      	adds	r5, r2, r1
20005d28:	42a5      	cmp	r5, r4
20005d2a:	d10b      	bne.n	20005d44 <_free_r+0x70>
20005d2c:	6824      	ldr	r4, [r4, #0]
20005d2e:	4421      	add	r1, r4
20005d30:	1854      	adds	r4, r2, r1
20005d32:	42a3      	cmp	r3, r4
20005d34:	6011      	str	r1, [r2, #0]
20005d36:	d1e0      	bne.n	20005cfa <_free_r+0x26>
20005d38:	681c      	ldr	r4, [r3, #0]
20005d3a:	685b      	ldr	r3, [r3, #4]
20005d3c:	6053      	str	r3, [r2, #4]
20005d3e:	4421      	add	r1, r4
20005d40:	6011      	str	r1, [r2, #0]
20005d42:	e7da      	b.n	20005cfa <_free_r+0x26>
20005d44:	d902      	bls.n	20005d4c <_free_r+0x78>
20005d46:	230c      	movs	r3, #12
20005d48:	6003      	str	r3, [r0, #0]
20005d4a:	e7d6      	b.n	20005cfa <_free_r+0x26>
20005d4c:	6825      	ldr	r5, [r4, #0]
20005d4e:	1961      	adds	r1, r4, r5
20005d50:	428b      	cmp	r3, r1
20005d52:	bf04      	itt	eq
20005d54:	6819      	ldreq	r1, [r3, #0]
20005d56:	685b      	ldreq	r3, [r3, #4]
20005d58:	6063      	str	r3, [r4, #4]
20005d5a:	bf04      	itt	eq
20005d5c:	1949      	addeq	r1, r1, r5
20005d5e:	6021      	streq	r1, [r4, #0]
20005d60:	6054      	str	r4, [r2, #4]
20005d62:	e7ca      	b.n	20005cfa <_free_r+0x26>
20005d64:	b003      	add	sp, #12
20005d66:	bd30      	pop	{r4, r5, pc}
20005d68:	2001e720 	.word	0x2001e720

20005d6c <_init>:
20005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20005d6e:	bf00      	nop
20005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
20005d72:	bc08      	pop	{r3}
20005d74:	469e      	mov	lr, r3
20005d76:	4770      	bx	lr

20005d78 <_fini>:
20005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20005d7a:	bf00      	nop
20005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20005d7e:	bc08      	pop	{r3}
20005d80:	469e      	mov	lr, r3
20005d82:	4770      	bx	lr
