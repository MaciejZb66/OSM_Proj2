
Bazowy_OSM_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  20000000  20000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b0  200001b0  200001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e8c  20006560  20006560  00016560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000a3ec  2000a3ec  0001a4b4  2**0
                  CONTENTS
  4 .ARM          00000000  2000a3ec  2000a3ec  0001a4b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  2000a3ec  2000a4b4  0001a4b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000a3ec  2000a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000a3f0  2000a3f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  2000a3f4  2000a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ab4  2000a4b4  2000a4b4  0001a4b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001ef68  2001ef68  0001a4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a4b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c66  00000000  00000000  0001a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f3  00000000  00000000  0002b14a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0002d840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  0002e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005859  00000000  00000000  0002f4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0fa  00000000  00000000  00034d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4ac9  00000000  00000000  00041e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6914  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000f6964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200001b0 <__do_global_dtors_aux>:
200001b0:	b510      	push	{r4, lr}
200001b2:	4c05      	ldr	r4, [pc, #20]	; (200001c8 <__do_global_dtors_aux+0x18>)
200001b4:	7823      	ldrb	r3, [r4, #0]
200001b6:	b933      	cbnz	r3, 200001c6 <__do_global_dtors_aux+0x16>
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <__do_global_dtors_aux+0x1c>)
200001ba:	b113      	cbz	r3, 200001c2 <__do_global_dtors_aux+0x12>
200001bc:	4804      	ldr	r0, [pc, #16]	; (200001d0 <__do_global_dtors_aux+0x20>)
200001be:	f3af 8000 	nop.w
200001c2:	2301      	movs	r3, #1
200001c4:	7023      	strb	r3, [r4, #0]
200001c6:	bd10      	pop	{r4, pc}
200001c8:	2000a4b4 	.word	0x2000a4b4
200001cc:	00000000 	.word	0x00000000
200001d0:	20006548 	.word	0x20006548

200001d4 <frame_dummy>:
200001d4:	b508      	push	{r3, lr}
200001d6:	4b03      	ldr	r3, [pc, #12]	; (200001e4 <frame_dummy+0x10>)
200001d8:	b11b      	cbz	r3, 200001e2 <frame_dummy+0xe>
200001da:	4903      	ldr	r1, [pc, #12]	; (200001e8 <frame_dummy+0x14>)
200001dc:	4803      	ldr	r0, [pc, #12]	; (200001ec <frame_dummy+0x18>)
200001de:	f3af 8000 	nop.w
200001e2:	bd08      	pop	{r3, pc}
200001e4:	00000000 	.word	0x00000000
200001e8:	2000a4b8 	.word	0x2000a4b8
200001ec:	20006548 	.word	0x20006548

200001f0 <__aeabi_drsub>:
200001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
200001f4:	e002      	b.n	200001fc <__adddf3>
200001f6:	bf00      	nop

200001f8 <__aeabi_dsub>:
200001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

200001fc <__adddf3>:
200001fc:	b530      	push	{r4, r5, lr}
200001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
20000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
20000206:	ea94 0f05 	teq	r4, r5
2000020a:	bf08      	it	eq
2000020c:	ea90 0f02 	teqeq	r0, r2
20000210:	bf1f      	itttt	ne
20000212:	ea54 0c00 	orrsne.w	ip, r4, r0
20000216:	ea55 0c02 	orrsne.w	ip, r5, r2
2000021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
2000021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
20000222:	f000 80e2 	beq.w	200003ea <__adddf3+0x1ee>
20000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
2000022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
2000022e:	bfb8      	it	lt
20000230:	426d      	neglt	r5, r5
20000232:	dd0c      	ble.n	2000024e <__adddf3+0x52>
20000234:	442c      	add	r4, r5
20000236:	ea80 0202 	eor.w	r2, r0, r2
2000023a:	ea81 0303 	eor.w	r3, r1, r3
2000023e:	ea82 0000 	eor.w	r0, r2, r0
20000242:	ea83 0101 	eor.w	r1, r3, r1
20000246:	ea80 0202 	eor.w	r2, r0, r2
2000024a:	ea81 0303 	eor.w	r3, r1, r3
2000024e:	2d36      	cmp	r5, #54	; 0x36
20000250:	bf88      	it	hi
20000252:	bd30      	pophi	{r4, r5, pc}
20000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
20000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
2000025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
20000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
20000264:	d002      	beq.n	2000026c <__adddf3+0x70>
20000266:	4240      	negs	r0, r0
20000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
2000026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
20000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
20000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
20000278:	d002      	beq.n	20000280 <__adddf3+0x84>
2000027a:	4252      	negs	r2, r2
2000027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
20000280:	ea94 0f05 	teq	r4, r5
20000284:	f000 80a7 	beq.w	200003d6 <__adddf3+0x1da>
20000288:	f1a4 0401 	sub.w	r4, r4, #1
2000028c:	f1d5 0e20 	rsbs	lr, r5, #32
20000290:	db0d      	blt.n	200002ae <__adddf3+0xb2>
20000292:	fa02 fc0e 	lsl.w	ip, r2, lr
20000296:	fa22 f205 	lsr.w	r2, r2, r5
2000029a:	1880      	adds	r0, r0, r2
2000029c:	f141 0100 	adc.w	r1, r1, #0
200002a0:	fa03 f20e 	lsl.w	r2, r3, lr
200002a4:	1880      	adds	r0, r0, r2
200002a6:	fa43 f305 	asr.w	r3, r3, r5
200002aa:	4159      	adcs	r1, r3
200002ac:	e00e      	b.n	200002cc <__adddf3+0xd0>
200002ae:	f1a5 0520 	sub.w	r5, r5, #32
200002b2:	f10e 0e20 	add.w	lr, lr, #32
200002b6:	2a01      	cmp	r2, #1
200002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
200002bc:	bf28      	it	cs
200002be:	f04c 0c02 	orrcs.w	ip, ip, #2
200002c2:	fa43 f305 	asr.w	r3, r3, r5
200002c6:	18c0      	adds	r0, r0, r3
200002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
200002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200002d0:	d507      	bpl.n	200002e2 <__adddf3+0xe6>
200002d2:	f04f 0e00 	mov.w	lr, #0
200002d6:	f1dc 0c00 	rsbs	ip, ip, #0
200002da:	eb7e 0000 	sbcs.w	r0, lr, r0
200002de:	eb6e 0101 	sbc.w	r1, lr, r1
200002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
200002e6:	d31b      	bcc.n	20000320 <__adddf3+0x124>
200002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
200002ec:	d30c      	bcc.n	20000308 <__adddf3+0x10c>
200002ee:	0849      	lsrs	r1, r1, #1
200002f0:	ea5f 0030 	movs.w	r0, r0, rrx
200002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
200002f8:	f104 0401 	add.w	r4, r4, #1
200002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
20000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
20000304:	f080 809a 	bcs.w	2000043c <__adddf3+0x240>
20000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
2000030c:	bf08      	it	eq
2000030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
20000312:	f150 0000 	adcs.w	r0, r0, #0
20000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
2000031a:	ea41 0105 	orr.w	r1, r1, r5
2000031e:	bd30      	pop	{r4, r5, pc}
20000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
20000324:	4140      	adcs	r0, r0
20000326:	eb41 0101 	adc.w	r1, r1, r1
2000032a:	3c01      	subs	r4, #1
2000032c:	bf28      	it	cs
2000032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
20000332:	d2e9      	bcs.n	20000308 <__adddf3+0x10c>
20000334:	f091 0f00 	teq	r1, #0
20000338:	bf04      	itt	eq
2000033a:	4601      	moveq	r1, r0
2000033c:	2000      	moveq	r0, #0
2000033e:	fab1 f381 	clz	r3, r1
20000342:	bf08      	it	eq
20000344:	3320      	addeq	r3, #32
20000346:	f1a3 030b 	sub.w	r3, r3, #11
2000034a:	f1b3 0220 	subs.w	r2, r3, #32
2000034e:	da0c      	bge.n	2000036a <__adddf3+0x16e>
20000350:	320c      	adds	r2, #12
20000352:	dd08      	ble.n	20000366 <__adddf3+0x16a>
20000354:	f102 0c14 	add.w	ip, r2, #20
20000358:	f1c2 020c 	rsb	r2, r2, #12
2000035c:	fa01 f00c 	lsl.w	r0, r1, ip
20000360:	fa21 f102 	lsr.w	r1, r1, r2
20000364:	e00c      	b.n	20000380 <__adddf3+0x184>
20000366:	f102 0214 	add.w	r2, r2, #20
2000036a:	bfd8      	it	le
2000036c:	f1c2 0c20 	rsble	ip, r2, #32
20000370:	fa01 f102 	lsl.w	r1, r1, r2
20000374:	fa20 fc0c 	lsr.w	ip, r0, ip
20000378:	bfdc      	itt	le
2000037a:	ea41 010c 	orrle.w	r1, r1, ip
2000037e:	4090      	lslle	r0, r2
20000380:	1ae4      	subs	r4, r4, r3
20000382:	bfa2      	ittt	ge
20000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
20000388:	4329      	orrge	r1, r5
2000038a:	bd30      	popge	{r4, r5, pc}
2000038c:	ea6f 0404 	mvn.w	r4, r4
20000390:	3c1f      	subs	r4, #31
20000392:	da1c      	bge.n	200003ce <__adddf3+0x1d2>
20000394:	340c      	adds	r4, #12
20000396:	dc0e      	bgt.n	200003b6 <__adddf3+0x1ba>
20000398:	f104 0414 	add.w	r4, r4, #20
2000039c:	f1c4 0220 	rsb	r2, r4, #32
200003a0:	fa20 f004 	lsr.w	r0, r0, r4
200003a4:	fa01 f302 	lsl.w	r3, r1, r2
200003a8:	ea40 0003 	orr.w	r0, r0, r3
200003ac:	fa21 f304 	lsr.w	r3, r1, r4
200003b0:	ea45 0103 	orr.w	r1, r5, r3
200003b4:	bd30      	pop	{r4, r5, pc}
200003b6:	f1c4 040c 	rsb	r4, r4, #12
200003ba:	f1c4 0220 	rsb	r2, r4, #32
200003be:	fa20 f002 	lsr.w	r0, r0, r2
200003c2:	fa01 f304 	lsl.w	r3, r1, r4
200003c6:	ea40 0003 	orr.w	r0, r0, r3
200003ca:	4629      	mov	r1, r5
200003cc:	bd30      	pop	{r4, r5, pc}
200003ce:	fa21 f004 	lsr.w	r0, r1, r4
200003d2:	4629      	mov	r1, r5
200003d4:	bd30      	pop	{r4, r5, pc}
200003d6:	f094 0f00 	teq	r4, #0
200003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
200003de:	bf06      	itte	eq
200003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
200003e4:	3401      	addeq	r4, #1
200003e6:	3d01      	subne	r5, #1
200003e8:	e74e      	b.n	20000288 <__adddf3+0x8c>
200003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
200003ee:	bf18      	it	ne
200003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
200003f4:	d029      	beq.n	2000044a <__adddf3+0x24e>
200003f6:	ea94 0f05 	teq	r4, r5
200003fa:	bf08      	it	eq
200003fc:	ea90 0f02 	teqeq	r0, r2
20000400:	d005      	beq.n	2000040e <__adddf3+0x212>
20000402:	ea54 0c00 	orrs.w	ip, r4, r0
20000406:	bf04      	itt	eq
20000408:	4619      	moveq	r1, r3
2000040a:	4610      	moveq	r0, r2
2000040c:	bd30      	pop	{r4, r5, pc}
2000040e:	ea91 0f03 	teq	r1, r3
20000412:	bf1e      	ittt	ne
20000414:	2100      	movne	r1, #0
20000416:	2000      	movne	r0, #0
20000418:	bd30      	popne	{r4, r5, pc}
2000041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
2000041e:	d105      	bne.n	2000042c <__adddf3+0x230>
20000420:	0040      	lsls	r0, r0, #1
20000422:	4149      	adcs	r1, r1
20000424:	bf28      	it	cs
20000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
2000042a:	bd30      	pop	{r4, r5, pc}
2000042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
20000430:	bf3c      	itt	cc
20000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
20000436:	bd30      	popcc	{r4, r5, pc}
20000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
2000043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
20000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20000444:	f04f 0000 	mov.w	r0, #0
20000448:	bd30      	pop	{r4, r5, pc}
2000044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
2000044e:	bf1a      	itte	ne
20000450:	4619      	movne	r1, r3
20000452:	4610      	movne	r0, r2
20000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
20000458:	bf1c      	itt	ne
2000045a:	460b      	movne	r3, r1
2000045c:	4602      	movne	r2, r0
2000045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
20000462:	bf06      	itte	eq
20000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
20000468:	ea91 0f03 	teqeq	r1, r3
2000046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
20000470:	bd30      	pop	{r4, r5, pc}
20000472:	bf00      	nop

20000474 <__aeabi_ui2d>:
20000474:	f090 0f00 	teq	r0, #0
20000478:	bf04      	itt	eq
2000047a:	2100      	moveq	r1, #0
2000047c:	4770      	bxeq	lr
2000047e:	b530      	push	{r4, r5, lr}
20000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
20000488:	f04f 0500 	mov.w	r5, #0
2000048c:	f04f 0100 	mov.w	r1, #0
20000490:	e750      	b.n	20000334 <__adddf3+0x138>
20000492:	bf00      	nop

20000494 <__aeabi_i2d>:
20000494:	f090 0f00 	teq	r0, #0
20000498:	bf04      	itt	eq
2000049a:	2100      	moveq	r1, #0
2000049c:	4770      	bxeq	lr
2000049e:	b530      	push	{r4, r5, lr}
200004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
200004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
200004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
200004ac:	bf48      	it	mi
200004ae:	4240      	negmi	r0, r0
200004b0:	f04f 0100 	mov.w	r1, #0
200004b4:	e73e      	b.n	20000334 <__adddf3+0x138>
200004b6:	bf00      	nop

200004b8 <__aeabi_f2d>:
200004b8:	0042      	lsls	r2, r0, #1
200004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
200004be:	ea4f 0131 	mov.w	r1, r1, rrx
200004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
200004c6:	bf1f      	itttt	ne
200004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
200004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
200004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
200004d4:	4770      	bxne	lr
200004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
200004da:	bf08      	it	eq
200004dc:	4770      	bxeq	lr
200004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
200004e2:	bf04      	itt	eq
200004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
200004e8:	4770      	bxeq	lr
200004ea:	b530      	push	{r4, r5, lr}
200004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
200004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
200004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
200004f8:	e71c      	b.n	20000334 <__adddf3+0x138>
200004fa:	bf00      	nop

200004fc <__aeabi_ul2d>:
200004fc:	ea50 0201 	orrs.w	r2, r0, r1
20000500:	bf08      	it	eq
20000502:	4770      	bxeq	lr
20000504:	b530      	push	{r4, r5, lr}
20000506:	f04f 0500 	mov.w	r5, #0
2000050a:	e00a      	b.n	20000522 <__aeabi_l2d+0x16>

2000050c <__aeabi_l2d>:
2000050c:	ea50 0201 	orrs.w	r2, r0, r1
20000510:	bf08      	it	eq
20000512:	4770      	bxeq	lr
20000514:	b530      	push	{r4, r5, lr}
20000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
2000051a:	d502      	bpl.n	20000522 <__aeabi_l2d+0x16>
2000051c:	4240      	negs	r0, r0
2000051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
20000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
20000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
2000052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
2000052e:	f43f aed8 	beq.w	200002e2 <__adddf3+0xe6>
20000532:	f04f 0203 	mov.w	r2, #3
20000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
2000053a:	bf18      	it	ne
2000053c:	3203      	addne	r2, #3
2000053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
20000542:	bf18      	it	ne
20000544:	3203      	addne	r2, #3
20000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
2000054a:	f1c2 0320 	rsb	r3, r2, #32
2000054e:	fa00 fc03 	lsl.w	ip, r0, r3
20000552:	fa20 f002 	lsr.w	r0, r0, r2
20000556:	fa01 fe03 	lsl.w	lr, r1, r3
2000055a:	ea40 000e 	orr.w	r0, r0, lr
2000055e:	fa21 f102 	lsr.w	r1, r1, r2
20000562:	4414      	add	r4, r2
20000564:	e6bd      	b.n	200002e2 <__adddf3+0xe6>
20000566:	bf00      	nop

20000568 <__aeabi_d2f>:
20000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
2000056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
20000570:	bf24      	itt	cs
20000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
20000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
2000057a:	d90d      	bls.n	20000598 <__aeabi_d2f+0x30>
2000057c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
20000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
20000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
20000588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
2000058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
20000590:	bf08      	it	eq
20000592:	f020 0001 	biceq.w	r0, r0, #1
20000596:	4770      	bx	lr
20000598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
2000059c:	d121      	bne.n	200005e2 <__aeabi_d2f+0x7a>
2000059e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
200005a2:	bfbc      	itt	lt
200005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
200005a8:	4770      	bxlt	lr
200005aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
200005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
200005b2:	f1c2 0218 	rsb	r2, r2, #24
200005b6:	f1c2 0c20 	rsb	ip, r2, #32
200005ba:	fa10 f30c 	lsls.w	r3, r0, ip
200005be:	fa20 f002 	lsr.w	r0, r0, r2
200005c2:	bf18      	it	ne
200005c4:	f040 0001 	orrne.w	r0, r0, #1
200005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
200005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
200005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
200005d4:	ea40 000c 	orr.w	r0, r0, ip
200005d8:	fa23 f302 	lsr.w	r3, r3, r2
200005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
200005e0:	e7cc      	b.n	2000057c <__aeabi_d2f+0x14>
200005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
200005e6:	d107      	bne.n	200005f8 <__aeabi_d2f+0x90>
200005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
200005ec:	bf1e      	ittt	ne
200005ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
200005f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
200005f6:	4770      	bxne	lr
200005f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
200005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
20000600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
20000604:	4770      	bx	lr
20000606:	bf00      	nop

20000608 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
20000608:	b480      	push	{r7}
2000060a:	b089      	sub	sp, #36	; 0x24
2000060c:	af00      	add	r7, sp, #0
2000060e:	60f8      	str	r0, [r7, #12]
20000610:	60b9      	str	r1, [r7, #8]
20000612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
20000614:	68fb      	ldr	r3, [r7, #12]
20000616:	681a      	ldr	r2, [r3, #0]
20000618:	68bb      	ldr	r3, [r7, #8]
2000061a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000061c:	697b      	ldr	r3, [r7, #20]
2000061e:	fa93 f3a3 	rbit	r3, r3
20000622:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
20000624:	693b      	ldr	r3, [r7, #16]
20000626:	fab3 f383 	clz	r3, r3
2000062a:	b2db      	uxtb	r3, r3
2000062c:	005b      	lsls	r3, r3, #1
2000062e:	2103      	movs	r1, #3
20000630:	fa01 f303 	lsl.w	r3, r1, r3
20000634:	43db      	mvns	r3, r3
20000636:	401a      	ands	r2, r3
20000638:	68bb      	ldr	r3, [r7, #8]
2000063a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000063c:	69fb      	ldr	r3, [r7, #28]
2000063e:	fa93 f3a3 	rbit	r3, r3
20000642:	61bb      	str	r3, [r7, #24]
  return result;
20000644:	69bb      	ldr	r3, [r7, #24]
20000646:	fab3 f383 	clz	r3, r3
2000064a:	b2db      	uxtb	r3, r3
2000064c:	005b      	lsls	r3, r3, #1
2000064e:	6879      	ldr	r1, [r7, #4]
20000650:	fa01 f303 	lsl.w	r3, r1, r3
20000654:	431a      	orrs	r2, r3
20000656:	68fb      	ldr	r3, [r7, #12]
20000658:	601a      	str	r2, [r3, #0]
}
2000065a:	bf00      	nop
2000065c:	3724      	adds	r7, #36	; 0x24
2000065e:	46bd      	mov	sp, r7
20000660:	f85d 7b04 	ldr.w	r7, [sp], #4
20000664:	4770      	bx	lr

20000666 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
20000666:	b480      	push	{r7}
20000668:	b085      	sub	sp, #20
2000066a:	af00      	add	r7, sp, #0
2000066c:	60f8      	str	r0, [r7, #12]
2000066e:	60b9      	str	r1, [r7, #8]
20000670:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	685a      	ldr	r2, [r3, #4]
20000676:	68bb      	ldr	r3, [r7, #8]
20000678:	43db      	mvns	r3, r3
2000067a:	401a      	ands	r2, r3
2000067c:	68bb      	ldr	r3, [r7, #8]
2000067e:	6879      	ldr	r1, [r7, #4]
20000680:	fb01 f303 	mul.w	r3, r1, r3
20000684:	431a      	orrs	r2, r3
20000686:	68fb      	ldr	r3, [r7, #12]
20000688:	605a      	str	r2, [r3, #4]
}
2000068a:	bf00      	nop
2000068c:	3714      	adds	r7, #20
2000068e:	46bd      	mov	sp, r7
20000690:	f85d 7b04 	ldr.w	r7, [sp], #4
20000694:	4770      	bx	lr

20000696 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
20000696:	b480      	push	{r7}
20000698:	b089      	sub	sp, #36	; 0x24
2000069a:	af00      	add	r7, sp, #0
2000069c:	60f8      	str	r0, [r7, #12]
2000069e:	60b9      	str	r1, [r7, #8]
200006a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
200006a2:	68fb      	ldr	r3, [r7, #12]
200006a4:	689a      	ldr	r2, [r3, #8]
200006a6:	68bb      	ldr	r3, [r7, #8]
200006a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200006aa:	697b      	ldr	r3, [r7, #20]
200006ac:	fa93 f3a3 	rbit	r3, r3
200006b0:	613b      	str	r3, [r7, #16]
  return result;
200006b2:	693b      	ldr	r3, [r7, #16]
200006b4:	fab3 f383 	clz	r3, r3
200006b8:	b2db      	uxtb	r3, r3
200006ba:	005b      	lsls	r3, r3, #1
200006bc:	2103      	movs	r1, #3
200006be:	fa01 f303 	lsl.w	r3, r1, r3
200006c2:	43db      	mvns	r3, r3
200006c4:	401a      	ands	r2, r3
200006c6:	68bb      	ldr	r3, [r7, #8]
200006c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200006ca:	69fb      	ldr	r3, [r7, #28]
200006cc:	fa93 f3a3 	rbit	r3, r3
200006d0:	61bb      	str	r3, [r7, #24]
  return result;
200006d2:	69bb      	ldr	r3, [r7, #24]
200006d4:	fab3 f383 	clz	r3, r3
200006d8:	b2db      	uxtb	r3, r3
200006da:	005b      	lsls	r3, r3, #1
200006dc:	6879      	ldr	r1, [r7, #4]
200006de:	fa01 f303 	lsl.w	r3, r1, r3
200006e2:	431a      	orrs	r2, r3
200006e4:	68fb      	ldr	r3, [r7, #12]
200006e6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
200006e8:	bf00      	nop
200006ea:	3724      	adds	r7, #36	; 0x24
200006ec:	46bd      	mov	sp, r7
200006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200006f2:	4770      	bx	lr

200006f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
200006f4:	b480      	push	{r7}
200006f6:	b089      	sub	sp, #36	; 0x24
200006f8:	af00      	add	r7, sp, #0
200006fa:	60f8      	str	r0, [r7, #12]
200006fc:	60b9      	str	r1, [r7, #8]
200006fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
20000700:	68fb      	ldr	r3, [r7, #12]
20000702:	68da      	ldr	r2, [r3, #12]
20000704:	68bb      	ldr	r3, [r7, #8]
20000706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000708:	697b      	ldr	r3, [r7, #20]
2000070a:	fa93 f3a3 	rbit	r3, r3
2000070e:	613b      	str	r3, [r7, #16]
  return result;
20000710:	693b      	ldr	r3, [r7, #16]
20000712:	fab3 f383 	clz	r3, r3
20000716:	b2db      	uxtb	r3, r3
20000718:	005b      	lsls	r3, r3, #1
2000071a:	2103      	movs	r1, #3
2000071c:	fa01 f303 	lsl.w	r3, r1, r3
20000720:	43db      	mvns	r3, r3
20000722:	401a      	ands	r2, r3
20000724:	68bb      	ldr	r3, [r7, #8]
20000726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000728:	69fb      	ldr	r3, [r7, #28]
2000072a:	fa93 f3a3 	rbit	r3, r3
2000072e:	61bb      	str	r3, [r7, #24]
  return result;
20000730:	69bb      	ldr	r3, [r7, #24]
20000732:	fab3 f383 	clz	r3, r3
20000736:	b2db      	uxtb	r3, r3
20000738:	005b      	lsls	r3, r3, #1
2000073a:	6879      	ldr	r1, [r7, #4]
2000073c:	fa01 f303 	lsl.w	r3, r1, r3
20000740:	431a      	orrs	r2, r3
20000742:	68fb      	ldr	r3, [r7, #12]
20000744:	60da      	str	r2, [r3, #12]
}
20000746:	bf00      	nop
20000748:	3724      	adds	r7, #36	; 0x24
2000074a:	46bd      	mov	sp, r7
2000074c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000750:	4770      	bx	lr

20000752 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
20000752:	b480      	push	{r7}
20000754:	b089      	sub	sp, #36	; 0x24
20000756:	af00      	add	r7, sp, #0
20000758:	60f8      	str	r0, [r7, #12]
2000075a:	60b9      	str	r1, [r7, #8]
2000075c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	6a1a      	ldr	r2, [r3, #32]
20000762:	68bb      	ldr	r3, [r7, #8]
20000764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000766:	697b      	ldr	r3, [r7, #20]
20000768:	fa93 f3a3 	rbit	r3, r3
2000076c:	613b      	str	r3, [r7, #16]
  return result;
2000076e:	693b      	ldr	r3, [r7, #16]
20000770:	fab3 f383 	clz	r3, r3
20000774:	b2db      	uxtb	r3, r3
20000776:	009b      	lsls	r3, r3, #2
20000778:	210f      	movs	r1, #15
2000077a:	fa01 f303 	lsl.w	r3, r1, r3
2000077e:	43db      	mvns	r3, r3
20000780:	401a      	ands	r2, r3
20000782:	68bb      	ldr	r3, [r7, #8]
20000784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
20000786:	69fb      	ldr	r3, [r7, #28]
20000788:	fa93 f3a3 	rbit	r3, r3
2000078c:	61bb      	str	r3, [r7, #24]
  return result;
2000078e:	69bb      	ldr	r3, [r7, #24]
20000790:	fab3 f383 	clz	r3, r3
20000794:	b2db      	uxtb	r3, r3
20000796:	009b      	lsls	r3, r3, #2
20000798:	6879      	ldr	r1, [r7, #4]
2000079a:	fa01 f303 	lsl.w	r3, r1, r3
2000079e:	431a      	orrs	r2, r3
200007a0:	68fb      	ldr	r3, [r7, #12]
200007a2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
200007a4:	bf00      	nop
200007a6:	3724      	adds	r7, #36	; 0x24
200007a8:	46bd      	mov	sp, r7
200007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200007ae:	4770      	bx	lr

200007b0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
200007b0:	b480      	push	{r7}
200007b2:	b089      	sub	sp, #36	; 0x24
200007b4:	af00      	add	r7, sp, #0
200007b6:	60f8      	str	r0, [r7, #12]
200007b8:	60b9      	str	r1, [r7, #8]
200007ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
200007bc:	68fb      	ldr	r3, [r7, #12]
200007be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
200007c0:	68bb      	ldr	r3, [r7, #8]
200007c2:	0a1b      	lsrs	r3, r3, #8
200007c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200007c6:	697b      	ldr	r3, [r7, #20]
200007c8:	fa93 f3a3 	rbit	r3, r3
200007cc:	613b      	str	r3, [r7, #16]
  return result;
200007ce:	693b      	ldr	r3, [r7, #16]
200007d0:	fab3 f383 	clz	r3, r3
200007d4:	b2db      	uxtb	r3, r3
200007d6:	009b      	lsls	r3, r3, #2
200007d8:	210f      	movs	r1, #15
200007da:	fa01 f303 	lsl.w	r3, r1, r3
200007de:	43db      	mvns	r3, r3
200007e0:	401a      	ands	r2, r3
200007e2:	68bb      	ldr	r3, [r7, #8]
200007e4:	0a1b      	lsrs	r3, r3, #8
200007e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
200007e8:	69fb      	ldr	r3, [r7, #28]
200007ea:	fa93 f3a3 	rbit	r3, r3
200007ee:	61bb      	str	r3, [r7, #24]
  return result;
200007f0:	69bb      	ldr	r3, [r7, #24]
200007f2:	fab3 f383 	clz	r3, r3
200007f6:	b2db      	uxtb	r3, r3
200007f8:	009b      	lsls	r3, r3, #2
200007fa:	6879      	ldr	r1, [r7, #4]
200007fc:	fa01 f303 	lsl.w	r3, r1, r3
20000800:	431a      	orrs	r2, r3
20000802:	68fb      	ldr	r3, [r7, #12]
20000804:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
20000806:	bf00      	nop
20000808:	3724      	adds	r7, #36	; 0x24
2000080a:	46bd      	mov	sp, r7
2000080c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000810:	4770      	bx	lr

20000812 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
20000812:	b580      	push	{r7, lr}
20000814:	b088      	sub	sp, #32
20000816:	af00      	add	r7, sp, #0
20000818:	6078      	str	r0, [r7, #4]
2000081a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
2000081c:	2300      	movs	r3, #0
2000081e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
20000820:	2300      	movs	r3, #0
20000822:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
20000824:	683b      	ldr	r3, [r7, #0]
20000826:	681b      	ldr	r3, [r3, #0]
20000828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000082a:	697b      	ldr	r3, [r7, #20]
2000082c:	fa93 f3a3 	rbit	r3, r3
20000830:	613b      	str	r3, [r7, #16]
  return result;
20000832:	693b      	ldr	r3, [r7, #16]
20000834:	fab3 f383 	clz	r3, r3
20000838:	b2db      	uxtb	r3, r3
2000083a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
2000083c:	e050      	b.n	200008e0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
2000083e:	683b      	ldr	r3, [r7, #0]
20000840:	681a      	ldr	r2, [r3, #0]
20000842:	2101      	movs	r1, #1
20000844:	69fb      	ldr	r3, [r7, #28]
20000846:	fa01 f303 	lsl.w	r3, r1, r3
2000084a:	4013      	ands	r3, r2
2000084c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
2000084e:	69bb      	ldr	r3, [r7, #24]
20000850:	2b00      	cmp	r3, #0
20000852:	d042      	beq.n	200008da <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
20000854:	683b      	ldr	r3, [r7, #0]
20000856:	685b      	ldr	r3, [r3, #4]
20000858:	2b01      	cmp	r3, #1
2000085a:	d003      	beq.n	20000864 <LL_GPIO_Init+0x52>
2000085c:	683b      	ldr	r3, [r7, #0]
2000085e:	685b      	ldr	r3, [r3, #4]
20000860:	2b02      	cmp	r3, #2
20000862:	d10d      	bne.n	20000880 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
20000864:	683b      	ldr	r3, [r7, #0]
20000866:	689b      	ldr	r3, [r3, #8]
20000868:	461a      	mov	r2, r3
2000086a:	69b9      	ldr	r1, [r7, #24]
2000086c:	6878      	ldr	r0, [r7, #4]
2000086e:	f7ff ff12 	bl	20000696 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
20000872:	683b      	ldr	r3, [r7, #0]
20000874:	68db      	ldr	r3, [r3, #12]
20000876:	461a      	mov	r2, r3
20000878:	69b9      	ldr	r1, [r7, #24]
2000087a:	6878      	ldr	r0, [r7, #4]
2000087c:	f7ff fef3 	bl	20000666 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
20000880:	683b      	ldr	r3, [r7, #0]
20000882:	691b      	ldr	r3, [r3, #16]
20000884:	461a      	mov	r2, r3
20000886:	69b9      	ldr	r1, [r7, #24]
20000888:	6878      	ldr	r0, [r7, #4]
2000088a:	f7ff ff33 	bl	200006f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
2000088e:	683b      	ldr	r3, [r7, #0]
20000890:	685b      	ldr	r3, [r3, #4]
20000892:	2b02      	cmp	r3, #2
20000894:	d11a      	bne.n	200008cc <LL_GPIO_Init+0xba>
20000896:	69bb      	ldr	r3, [r7, #24]
20000898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
2000089a:	68fb      	ldr	r3, [r7, #12]
2000089c:	fa93 f3a3 	rbit	r3, r3
200008a0:	60bb      	str	r3, [r7, #8]
  return result;
200008a2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
200008a4:	fab3 f383 	clz	r3, r3
200008a8:	b2db      	uxtb	r3, r3
200008aa:	2b07      	cmp	r3, #7
200008ac:	d807      	bhi.n	200008be <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200008ae:	683b      	ldr	r3, [r7, #0]
200008b0:	695b      	ldr	r3, [r3, #20]
200008b2:	461a      	mov	r2, r3
200008b4:	69b9      	ldr	r1, [r7, #24]
200008b6:	6878      	ldr	r0, [r7, #4]
200008b8:	f7ff ff4b 	bl	20000752 <LL_GPIO_SetAFPin_0_7>
200008bc:	e006      	b.n	200008cc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
200008be:	683b      	ldr	r3, [r7, #0]
200008c0:	695b      	ldr	r3, [r3, #20]
200008c2:	461a      	mov	r2, r3
200008c4:	69b9      	ldr	r1, [r7, #24]
200008c6:	6878      	ldr	r0, [r7, #4]
200008c8:	f7ff ff72 	bl	200007b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
200008cc:	683b      	ldr	r3, [r7, #0]
200008ce:	685b      	ldr	r3, [r3, #4]
200008d0:	461a      	mov	r2, r3
200008d2:	69b9      	ldr	r1, [r7, #24]
200008d4:	6878      	ldr	r0, [r7, #4]
200008d6:	f7ff fe97 	bl	20000608 <LL_GPIO_SetPinMode>
    }
    pinpos++;
200008da:	69fb      	ldr	r3, [r7, #28]
200008dc:	3301      	adds	r3, #1
200008de:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
200008e0:	683b      	ldr	r3, [r7, #0]
200008e2:	681a      	ldr	r2, [r3, #0]
200008e4:	69fb      	ldr	r3, [r7, #28]
200008e6:	fa22 f303 	lsr.w	r3, r2, r3
200008ea:	2b00      	cmp	r3, #0
200008ec:	d1a7      	bne.n	2000083e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
200008ee:	2300      	movs	r3, #0
}
200008f0:	4618      	mov	r0, r3
200008f2:	3720      	adds	r7, #32
200008f4:	46bd      	mov	sp, r7
200008f6:	bd80      	pop	{r7, pc}

200008f8 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
200008f8:	b480      	push	{r7}
200008fa:	b083      	sub	sp, #12
200008fc:	af00      	add	r7, sp, #0
200008fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
20000900:	687b      	ldr	r3, [r7, #4]
20000902:	681b      	ldr	r3, [r3, #0]
20000904:	f003 0340 	and.w	r3, r3, #64	; 0x40
20000908:	2b40      	cmp	r3, #64	; 0x40
2000090a:	d101      	bne.n	20000910 <LL_SPI_IsEnabled+0x18>
2000090c:	2301      	movs	r3, #1
2000090e:	e000      	b.n	20000912 <LL_SPI_IsEnabled+0x1a>
20000910:	2300      	movs	r3, #0
}
20000912:	4618      	mov	r0, r3
20000914:	370c      	adds	r7, #12
20000916:	46bd      	mov	sp, r7
20000918:	f85d 7b04 	ldr.w	r7, [sp], #4
2000091c:	4770      	bx	lr

2000091e <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
2000091e:	b480      	push	{r7}
20000920:	b083      	sub	sp, #12
20000922:	af00      	add	r7, sp, #0
20000924:	6078      	str	r0, [r7, #4]
20000926:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
20000928:	683b      	ldr	r3, [r7, #0]
2000092a:	b29b      	uxth	r3, r3
2000092c:	461a      	mov	r2, r3
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	611a      	str	r2, [r3, #16]
}
20000932:	bf00      	nop
20000934:	370c      	adds	r7, #12
20000936:	46bd      	mov	sp, r7
20000938:	f85d 7b04 	ldr.w	r7, [sp], #4
2000093c:	4770      	bx	lr

2000093e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
2000093e:	b580      	push	{r7, lr}
20000940:	b084      	sub	sp, #16
20000942:	af00      	add	r7, sp, #0
20000944:	6078      	str	r0, [r7, #4]
20000946:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
20000948:	2301      	movs	r3, #1
2000094a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
2000094c:	6878      	ldr	r0, [r7, #4]
2000094e:	f7ff ffd3 	bl	200008f8 <LL_SPI_IsEnabled>
20000952:	4603      	mov	r3, r0
20000954:	2b00      	cmp	r3, #0
20000956:	d139      	bne.n	200009cc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
20000958:	687b      	ldr	r3, [r7, #4]
2000095a:	681b      	ldr	r3, [r3, #0]
2000095c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
20000960:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
20000964:	683a      	ldr	r2, [r7, #0]
20000966:	6811      	ldr	r1, [r2, #0]
20000968:	683a      	ldr	r2, [r7, #0]
2000096a:	6852      	ldr	r2, [r2, #4]
2000096c:	4311      	orrs	r1, r2
2000096e:	683a      	ldr	r2, [r7, #0]
20000970:	6892      	ldr	r2, [r2, #8]
20000972:	4311      	orrs	r1, r2
20000974:	683a      	ldr	r2, [r7, #0]
20000976:	68d2      	ldr	r2, [r2, #12]
20000978:	4311      	orrs	r1, r2
2000097a:	683a      	ldr	r2, [r7, #0]
2000097c:	6912      	ldr	r2, [r2, #16]
2000097e:	4311      	orrs	r1, r2
20000980:	683a      	ldr	r2, [r7, #0]
20000982:	6952      	ldr	r2, [r2, #20]
20000984:	4311      	orrs	r1, r2
20000986:	683a      	ldr	r2, [r7, #0]
20000988:	6992      	ldr	r2, [r2, #24]
2000098a:	4311      	orrs	r1, r2
2000098c:	683a      	ldr	r2, [r7, #0]
2000098e:	69d2      	ldr	r2, [r2, #28]
20000990:	4311      	orrs	r1, r2
20000992:	683a      	ldr	r2, [r7, #0]
20000994:	6a12      	ldr	r2, [r2, #32]
20000996:	430a      	orrs	r2, r1
20000998:	431a      	orrs	r2, r3
2000099a:	687b      	ldr	r3, [r7, #4]
2000099c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
2000099e:	687b      	ldr	r3, [r7, #4]
200009a0:	685b      	ldr	r3, [r3, #4]
200009a2:	f023 0204 	bic.w	r2, r3, #4
200009a6:	683b      	ldr	r3, [r7, #0]
200009a8:	695b      	ldr	r3, [r3, #20]
200009aa:	0c1b      	lsrs	r3, r3, #16
200009ac:	431a      	orrs	r2, r3
200009ae:	687b      	ldr	r3, [r7, #4]
200009b0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
200009b2:	683b      	ldr	r3, [r7, #0]
200009b4:	6a1b      	ldr	r3, [r3, #32]
200009b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200009ba:	d105      	bne.n	200009c8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
200009bc:	683b      	ldr	r3, [r7, #0]
200009be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200009c0:	4619      	mov	r1, r3
200009c2:	6878      	ldr	r0, [r7, #4]
200009c4:	f7ff ffab 	bl	2000091e <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
200009c8:	2300      	movs	r3, #0
200009ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
200009cc:	687b      	ldr	r3, [r7, #4]
200009ce:	69db      	ldr	r3, [r3, #28]
200009d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
200009d4:	687b      	ldr	r3, [r7, #4]
200009d6:	61da      	str	r2, [r3, #28]
  return status;
200009d8:	7bfb      	ldrb	r3, [r7, #15]
}
200009da:	4618      	mov	r0, r3
200009dc:	3710      	adds	r7, #16
200009de:	46bd      	mov	sp, r7
200009e0:	bd80      	pop	{r7, pc}
	...

200009e4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
200009e4:	b480      	push	{r7}
200009e6:	b083      	sub	sp, #12
200009e8:	af00      	add	r7, sp, #0
200009ea:	6078      	str	r0, [r7, #4]
200009ec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
200009ee:	687a      	ldr	r2, [r7, #4]
200009f0:	683b      	ldr	r3, [r7, #0]
200009f2:	fbb2 f3f3 	udiv	r3, r2, r3
200009f6:	4a07      	ldr	r2, [pc, #28]	; (20000a14 <LL_InitTick+0x30>)
200009f8:	3b01      	subs	r3, #1
200009fa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
200009fc:	4b05      	ldr	r3, [pc, #20]	; (20000a14 <LL_InitTick+0x30>)
200009fe:	2200      	movs	r2, #0
20000a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20000a02:	4b04      	ldr	r3, [pc, #16]	; (20000a14 <LL_InitTick+0x30>)
20000a04:	2205      	movs	r2, #5
20000a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
20000a08:	bf00      	nop
20000a0a:	370c      	adds	r7, #12
20000a0c:	46bd      	mov	sp, r7
20000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a12:	4770      	bx	lr
20000a14:	e000e010 	.word	0xe000e010

20000a18 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
20000a18:	b580      	push	{r7, lr}
20000a1a:	b082      	sub	sp, #8
20000a1c:	af00      	add	r7, sp, #0
20000a1e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
20000a20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
20000a24:	6878      	ldr	r0, [r7, #4]
20000a26:	f7ff ffdd 	bl	200009e4 <LL_InitTick>
}
20000a2a:	bf00      	nop
20000a2c:	3708      	adds	r7, #8
20000a2e:	46bd      	mov	sp, r7
20000a30:	bd80      	pop	{r7, pc}
	...

20000a34 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
20000a34:	b480      	push	{r7}
20000a36:	b085      	sub	sp, #20
20000a38:	af00      	add	r7, sp, #0
20000a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
20000a3c:	4b0f      	ldr	r3, [pc, #60]	; (20000a7c <LL_mDelay+0x48>)
20000a3e:	681b      	ldr	r3, [r3, #0]
20000a40:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
20000a42:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
20000a44:	687b      	ldr	r3, [r7, #4]
20000a46:	f1b3 3fff 	cmp.w	r3, #4294967295
20000a4a:	d00c      	beq.n	20000a66 <LL_mDelay+0x32>
  {
    Delay++;
20000a4c:	687b      	ldr	r3, [r7, #4]
20000a4e:	3301      	adds	r3, #1
20000a50:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
20000a52:	e008      	b.n	20000a66 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
20000a54:	4b09      	ldr	r3, [pc, #36]	; (20000a7c <LL_mDelay+0x48>)
20000a56:	681b      	ldr	r3, [r3, #0]
20000a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000a5c:	2b00      	cmp	r3, #0
20000a5e:	d002      	beq.n	20000a66 <LL_mDelay+0x32>
    {
      Delay--;
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	3b01      	subs	r3, #1
20000a64:	607b      	str	r3, [r7, #4]
  while (Delay)
20000a66:	687b      	ldr	r3, [r7, #4]
20000a68:	2b00      	cmp	r3, #0
20000a6a:	d1f3      	bne.n	20000a54 <LL_mDelay+0x20>
    }
  }
}
20000a6c:	bf00      	nop
20000a6e:	bf00      	nop
20000a70:	3714      	adds	r7, #20
20000a72:	46bd      	mov	sp, r7
20000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a78:	4770      	bx	lr
20000a7a:	bf00      	nop
20000a7c:	e000e010 	.word	0xe000e010

20000a80 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
20000a80:	b480      	push	{r7}
20000a82:	b083      	sub	sp, #12
20000a84:	af00      	add	r7, sp, #0
20000a86:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
20000a88:	4a04      	ldr	r2, [pc, #16]	; (20000a9c <LL_SetSystemCoreClock+0x1c>)
20000a8a:	687b      	ldr	r3, [r7, #4]
20000a8c:	6013      	str	r3, [r2, #0]
}
20000a8e:	bf00      	nop
20000a90:	370c      	adds	r7, #12
20000a92:	46bd      	mov	sp, r7
20000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a98:	4770      	bx	lr
20000a9a:	bf00      	nop
20000a9c:	2000a44c 	.word	0x2000a44c

20000aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20000aa0:	b480      	push	{r7}
20000aa2:	b083      	sub	sp, #12
20000aa4:	af00      	add	r7, sp, #0
20000aa6:	4603      	mov	r3, r0
20000aa8:	6039      	str	r1, [r7, #0]
20000aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20000aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000ab0:	2b00      	cmp	r3, #0
20000ab2:	db0a      	blt.n	20000aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000ab4:	683b      	ldr	r3, [r7, #0]
20000ab6:	b2da      	uxtb	r2, r3
20000ab8:	490c      	ldr	r1, [pc, #48]	; (20000aec <__NVIC_SetPriority+0x4c>)
20000aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
20000abe:	0112      	lsls	r2, r2, #4
20000ac0:	b2d2      	uxtb	r2, r2
20000ac2:	440b      	add	r3, r1
20000ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20000ac8:	e00a      	b.n	20000ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20000aca:	683b      	ldr	r3, [r7, #0]
20000acc:	b2da      	uxtb	r2, r3
20000ace:	4908      	ldr	r1, [pc, #32]	; (20000af0 <__NVIC_SetPriority+0x50>)
20000ad0:	79fb      	ldrb	r3, [r7, #7]
20000ad2:	f003 030f 	and.w	r3, r3, #15
20000ad6:	3b04      	subs	r3, #4
20000ad8:	0112      	lsls	r2, r2, #4
20000ada:	b2d2      	uxtb	r2, r2
20000adc:	440b      	add	r3, r1
20000ade:	761a      	strb	r2, [r3, #24]
}
20000ae0:	bf00      	nop
20000ae2:	370c      	adds	r7, #12
20000ae4:	46bd      	mov	sp, r7
20000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000aea:	4770      	bx	lr
20000aec:	e000e100 	.word	0xe000e100
20000af0:	e000ed00 	.word	0xe000ed00

20000af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
20000af4:	b580      	push	{r7, lr}
20000af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
20000af8:	2100      	movs	r1, #0
20000afa:	f06f 0004 	mvn.w	r0, #4
20000afe:	f7ff ffcf 	bl	20000aa0 <__NVIC_SetPriority>
#endif
}
20000b02:	bf00      	nop
20000b04:	bd80      	pop	{r7, pc}
	...

20000b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
20000b08:	b480      	push	{r7}
20000b0a:	b083      	sub	sp, #12
20000b0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000b0e:	f3ef 8305 	mrs	r3, IPSR
20000b12:	603b      	str	r3, [r7, #0]
  return(result);
20000b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000b16:	2b00      	cmp	r3, #0
20000b18:	d003      	beq.n	20000b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
20000b1a:	f06f 0305 	mvn.w	r3, #5
20000b1e:	607b      	str	r3, [r7, #4]
20000b20:	e00c      	b.n	20000b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
20000b22:	4b0a      	ldr	r3, [pc, #40]	; (20000b4c <osKernelInitialize+0x44>)
20000b24:	681b      	ldr	r3, [r3, #0]
20000b26:	2b00      	cmp	r3, #0
20000b28:	d105      	bne.n	20000b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
20000b2a:	4b08      	ldr	r3, [pc, #32]	; (20000b4c <osKernelInitialize+0x44>)
20000b2c:	2201      	movs	r2, #1
20000b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
20000b30:	2300      	movs	r3, #0
20000b32:	607b      	str	r3, [r7, #4]
20000b34:	e002      	b.n	20000b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
20000b36:	f04f 33ff 	mov.w	r3, #4294967295
20000b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000b3c:	687b      	ldr	r3, [r7, #4]
}
20000b3e:	4618      	mov	r0, r3
20000b40:	370c      	adds	r7, #12
20000b42:	46bd      	mov	sp, r7
20000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
20000b48:	4770      	bx	lr
20000b4a:	bf00      	nop
20000b4c:	2000a4d0 	.word	0x2000a4d0

20000b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
20000b50:	b580      	push	{r7, lr}
20000b52:	b082      	sub	sp, #8
20000b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000b56:	f3ef 8305 	mrs	r3, IPSR
20000b5a:	603b      	str	r3, [r7, #0]
  return(result);
20000b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
20000b5e:	2b00      	cmp	r3, #0
20000b60:	d003      	beq.n	20000b6a <osKernelStart+0x1a>
    stat = osErrorISR;
20000b62:	f06f 0305 	mvn.w	r3, #5
20000b66:	607b      	str	r3, [r7, #4]
20000b68:	e010      	b.n	20000b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
20000b6a:	4b0b      	ldr	r3, [pc, #44]	; (20000b98 <osKernelStart+0x48>)
20000b6c:	681b      	ldr	r3, [r3, #0]
20000b6e:	2b01      	cmp	r3, #1
20000b70:	d109      	bne.n	20000b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
20000b72:	f7ff ffbf 	bl	20000af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
20000b76:	4b08      	ldr	r3, [pc, #32]	; (20000b98 <osKernelStart+0x48>)
20000b78:	2202      	movs	r2, #2
20000b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
20000b7c:	f001 fcbc 	bl	200024f8 <vTaskStartScheduler>
      stat = osOK;
20000b80:	2300      	movs	r3, #0
20000b82:	607b      	str	r3, [r7, #4]
20000b84:	e002      	b.n	20000b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
20000b86:	f04f 33ff 	mov.w	r3, #4294967295
20000b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
20000b8c:	687b      	ldr	r3, [r7, #4]
}
20000b8e:	4618      	mov	r0, r3
20000b90:	3708      	adds	r7, #8
20000b92:	46bd      	mov	sp, r7
20000b94:	bd80      	pop	{r7, pc}
20000b96:	bf00      	nop
20000b98:	2000a4d0 	.word	0x2000a4d0

20000b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
20000b9c:	b580      	push	{r7, lr}
20000b9e:	b08e      	sub	sp, #56	; 0x38
20000ba0:	af04      	add	r7, sp, #16
20000ba2:	60f8      	str	r0, [r7, #12]
20000ba4:	60b9      	str	r1, [r7, #8]
20000ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
20000ba8:	2300      	movs	r3, #0
20000baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000bac:	f3ef 8305 	mrs	r3, IPSR
20000bb0:	617b      	str	r3, [r7, #20]
  return(result);
20000bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
20000bb4:	2b00      	cmp	r3, #0
20000bb6:	d17e      	bne.n	20000cb6 <osThreadNew+0x11a>
20000bb8:	68fb      	ldr	r3, [r7, #12]
20000bba:	2b00      	cmp	r3, #0
20000bbc:	d07b      	beq.n	20000cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
20000bbe:	2380      	movs	r3, #128	; 0x80
20000bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
20000bc2:	2318      	movs	r3, #24
20000bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
20000bc6:	2300      	movs	r3, #0
20000bc8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
20000bca:	f04f 33ff 	mov.w	r3, #4294967295
20000bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
20000bd0:	687b      	ldr	r3, [r7, #4]
20000bd2:	2b00      	cmp	r3, #0
20000bd4:	d045      	beq.n	20000c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
20000bd6:	687b      	ldr	r3, [r7, #4]
20000bd8:	681b      	ldr	r3, [r3, #0]
20000bda:	2b00      	cmp	r3, #0
20000bdc:	d002      	beq.n	20000be4 <osThreadNew+0x48>
        name = attr->name;
20000bde:	687b      	ldr	r3, [r7, #4]
20000be0:	681b      	ldr	r3, [r3, #0]
20000be2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
20000be4:	687b      	ldr	r3, [r7, #4]
20000be6:	699b      	ldr	r3, [r3, #24]
20000be8:	2b00      	cmp	r3, #0
20000bea:	d002      	beq.n	20000bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
20000bec:	687b      	ldr	r3, [r7, #4]
20000bee:	699b      	ldr	r3, [r3, #24]
20000bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
20000bf2:	69fb      	ldr	r3, [r7, #28]
20000bf4:	2b00      	cmp	r3, #0
20000bf6:	d008      	beq.n	20000c0a <osThreadNew+0x6e>
20000bf8:	69fb      	ldr	r3, [r7, #28]
20000bfa:	2b38      	cmp	r3, #56	; 0x38
20000bfc:	d805      	bhi.n	20000c0a <osThreadNew+0x6e>
20000bfe:	687b      	ldr	r3, [r7, #4]
20000c00:	685b      	ldr	r3, [r3, #4]
20000c02:	f003 0301 	and.w	r3, r3, #1
20000c06:	2b00      	cmp	r3, #0
20000c08:	d001      	beq.n	20000c0e <osThreadNew+0x72>
        return (NULL);
20000c0a:	2300      	movs	r3, #0
20000c0c:	e054      	b.n	20000cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
20000c0e:	687b      	ldr	r3, [r7, #4]
20000c10:	695b      	ldr	r3, [r3, #20]
20000c12:	2b00      	cmp	r3, #0
20000c14:	d003      	beq.n	20000c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
20000c16:	687b      	ldr	r3, [r7, #4]
20000c18:	695b      	ldr	r3, [r3, #20]
20000c1a:	089b      	lsrs	r3, r3, #2
20000c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20000c1e:	687b      	ldr	r3, [r7, #4]
20000c20:	689b      	ldr	r3, [r3, #8]
20000c22:	2b00      	cmp	r3, #0
20000c24:	d00e      	beq.n	20000c44 <osThreadNew+0xa8>
20000c26:	687b      	ldr	r3, [r7, #4]
20000c28:	68db      	ldr	r3, [r3, #12]
20000c2a:	2bbb      	cmp	r3, #187	; 0xbb
20000c2c:	d90a      	bls.n	20000c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20000c2e:	687b      	ldr	r3, [r7, #4]
20000c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
20000c32:	2b00      	cmp	r3, #0
20000c34:	d006      	beq.n	20000c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
20000c36:	687b      	ldr	r3, [r7, #4]
20000c38:	695b      	ldr	r3, [r3, #20]
20000c3a:	2b00      	cmp	r3, #0
20000c3c:	d002      	beq.n	20000c44 <osThreadNew+0xa8>
        mem = 1;
20000c3e:	2301      	movs	r3, #1
20000c40:	61bb      	str	r3, [r7, #24]
20000c42:	e010      	b.n	20000c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
20000c44:	687b      	ldr	r3, [r7, #4]
20000c46:	689b      	ldr	r3, [r3, #8]
20000c48:	2b00      	cmp	r3, #0
20000c4a:	d10c      	bne.n	20000c66 <osThreadNew+0xca>
20000c4c:	687b      	ldr	r3, [r7, #4]
20000c4e:	68db      	ldr	r3, [r3, #12]
20000c50:	2b00      	cmp	r3, #0
20000c52:	d108      	bne.n	20000c66 <osThreadNew+0xca>
20000c54:	687b      	ldr	r3, [r7, #4]
20000c56:	691b      	ldr	r3, [r3, #16]
20000c58:	2b00      	cmp	r3, #0
20000c5a:	d104      	bne.n	20000c66 <osThreadNew+0xca>
          mem = 0;
20000c5c:	2300      	movs	r3, #0
20000c5e:	61bb      	str	r3, [r7, #24]
20000c60:	e001      	b.n	20000c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
20000c62:	2300      	movs	r3, #0
20000c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
20000c66:	69bb      	ldr	r3, [r7, #24]
20000c68:	2b01      	cmp	r3, #1
20000c6a:	d110      	bne.n	20000c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20000c6c:	687b      	ldr	r3, [r7, #4]
20000c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
20000c70:	687a      	ldr	r2, [r7, #4]
20000c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
20000c74:	9202      	str	r2, [sp, #8]
20000c76:	9301      	str	r3, [sp, #4]
20000c78:	69fb      	ldr	r3, [r7, #28]
20000c7a:	9300      	str	r3, [sp, #0]
20000c7c:	68bb      	ldr	r3, [r7, #8]
20000c7e:	6a3a      	ldr	r2, [r7, #32]
20000c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000c82:	68f8      	ldr	r0, [r7, #12]
20000c84:	f001 fa4c 	bl	20002120 <xTaskCreateStatic>
20000c88:	4603      	mov	r3, r0
20000c8a:	613b      	str	r3, [r7, #16]
20000c8c:	e013      	b.n	20000cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
20000c8e:	69bb      	ldr	r3, [r7, #24]
20000c90:	2b00      	cmp	r3, #0
20000c92:	d110      	bne.n	20000cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
20000c94:	6a3b      	ldr	r3, [r7, #32]
20000c96:	b29a      	uxth	r2, r3
20000c98:	f107 0310 	add.w	r3, r7, #16
20000c9c:	9301      	str	r3, [sp, #4]
20000c9e:	69fb      	ldr	r3, [r7, #28]
20000ca0:	9300      	str	r3, [sp, #0]
20000ca2:	68bb      	ldr	r3, [r7, #8]
20000ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
20000ca6:	68f8      	ldr	r0, [r7, #12]
20000ca8:	f001 fa97 	bl	200021da <xTaskCreate>
20000cac:	4603      	mov	r3, r0
20000cae:	2b01      	cmp	r3, #1
20000cb0:	d001      	beq.n	20000cb6 <osThreadNew+0x11a>
            hTask = NULL;
20000cb2:	2300      	movs	r3, #0
20000cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
20000cb6:	693b      	ldr	r3, [r7, #16]
}
20000cb8:	4618      	mov	r0, r3
20000cba:	3728      	adds	r7, #40	; 0x28
20000cbc:	46bd      	mov	sp, r7
20000cbe:	bd80      	pop	{r7, pc}

20000cc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
20000cc0:	b580      	push	{r7, lr}
20000cc2:	b084      	sub	sp, #16
20000cc4:	af00      	add	r7, sp, #0
20000cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000cc8:	f3ef 8305 	mrs	r3, IPSR
20000ccc:	60bb      	str	r3, [r7, #8]
  return(result);
20000cce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
20000cd0:	2b00      	cmp	r3, #0
20000cd2:	d003      	beq.n	20000cdc <osDelay+0x1c>
    stat = osErrorISR;
20000cd4:	f06f 0305 	mvn.w	r3, #5
20000cd8:	60fb      	str	r3, [r7, #12]
20000cda:	e007      	b.n	20000cec <osDelay+0x2c>
  }
  else {
    stat = osOK;
20000cdc:	2300      	movs	r3, #0
20000cde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
20000ce0:	687b      	ldr	r3, [r7, #4]
20000ce2:	2b00      	cmp	r3, #0
20000ce4:	d002      	beq.n	20000cec <osDelay+0x2c>
      vTaskDelay(ticks);
20000ce6:	6878      	ldr	r0, [r7, #4]
20000ce8:	f001 fbd2 	bl	20002490 <vTaskDelay>
    }
  }

  return (stat);
20000cec:	68fb      	ldr	r3, [r7, #12]
}
20000cee:	4618      	mov	r0, r3
20000cf0:	3710      	adds	r7, #16
20000cf2:	46bd      	mov	sp, r7
20000cf4:	bd80      	pop	{r7, pc}

20000cf6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
20000cf6:	b580      	push	{r7, lr}
20000cf8:	b08a      	sub	sp, #40	; 0x28
20000cfa:	af02      	add	r7, sp, #8
20000cfc:	60f8      	str	r0, [r7, #12]
20000cfe:	60b9      	str	r1, [r7, #8]
20000d00:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
20000d02:	2300      	movs	r3, #0
20000d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000d06:	f3ef 8305 	mrs	r3, IPSR
20000d0a:	613b      	str	r3, [r7, #16]
  return(result);
20000d0c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
20000d0e:	2b00      	cmp	r3, #0
20000d10:	d175      	bne.n	20000dfe <osSemaphoreNew+0x108>
20000d12:	68fb      	ldr	r3, [r7, #12]
20000d14:	2b00      	cmp	r3, #0
20000d16:	d072      	beq.n	20000dfe <osSemaphoreNew+0x108>
20000d18:	68ba      	ldr	r2, [r7, #8]
20000d1a:	68fb      	ldr	r3, [r7, #12]
20000d1c:	429a      	cmp	r2, r3
20000d1e:	d86e      	bhi.n	20000dfe <osSemaphoreNew+0x108>
    mem = -1;
20000d20:	f04f 33ff 	mov.w	r3, #4294967295
20000d24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
20000d26:	687b      	ldr	r3, [r7, #4]
20000d28:	2b00      	cmp	r3, #0
20000d2a:	d015      	beq.n	20000d58 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
20000d2c:	687b      	ldr	r3, [r7, #4]
20000d2e:	689b      	ldr	r3, [r3, #8]
20000d30:	2b00      	cmp	r3, #0
20000d32:	d006      	beq.n	20000d42 <osSemaphoreNew+0x4c>
20000d34:	687b      	ldr	r3, [r7, #4]
20000d36:	68db      	ldr	r3, [r3, #12]
20000d38:	2b4f      	cmp	r3, #79	; 0x4f
20000d3a:	d902      	bls.n	20000d42 <osSemaphoreNew+0x4c>
        mem = 1;
20000d3c:	2301      	movs	r3, #1
20000d3e:	61bb      	str	r3, [r7, #24]
20000d40:	e00c      	b.n	20000d5c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
20000d42:	687b      	ldr	r3, [r7, #4]
20000d44:	689b      	ldr	r3, [r3, #8]
20000d46:	2b00      	cmp	r3, #0
20000d48:	d108      	bne.n	20000d5c <osSemaphoreNew+0x66>
20000d4a:	687b      	ldr	r3, [r7, #4]
20000d4c:	68db      	ldr	r3, [r3, #12]
20000d4e:	2b00      	cmp	r3, #0
20000d50:	d104      	bne.n	20000d5c <osSemaphoreNew+0x66>
          mem = 0;
20000d52:	2300      	movs	r3, #0
20000d54:	61bb      	str	r3, [r7, #24]
20000d56:	e001      	b.n	20000d5c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
20000d58:	2300      	movs	r3, #0
20000d5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
20000d5c:	69bb      	ldr	r3, [r7, #24]
20000d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
20000d62:	d04c      	beq.n	20000dfe <osSemaphoreNew+0x108>
      if (max_count == 1U) {
20000d64:	68fb      	ldr	r3, [r7, #12]
20000d66:	2b01      	cmp	r3, #1
20000d68:	d128      	bne.n	20000dbc <osSemaphoreNew+0xc6>
        if (mem == 1) {
20000d6a:	69bb      	ldr	r3, [r7, #24]
20000d6c:	2b01      	cmp	r3, #1
20000d6e:	d10a      	bne.n	20000d86 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	689b      	ldr	r3, [r3, #8]
20000d74:	2203      	movs	r2, #3
20000d76:	9200      	str	r2, [sp, #0]
20000d78:	2200      	movs	r2, #0
20000d7a:	2100      	movs	r1, #0
20000d7c:	2001      	movs	r0, #1
20000d7e:	f000 fa29 	bl	200011d4 <xQueueGenericCreateStatic>
20000d82:	61f8      	str	r0, [r7, #28]
20000d84:	e005      	b.n	20000d92 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
20000d86:	2203      	movs	r2, #3
20000d88:	2100      	movs	r1, #0
20000d8a:	2001      	movs	r0, #1
20000d8c:	f000 fa9a 	bl	200012c4 <xQueueGenericCreate>
20000d90:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
20000d92:	69fb      	ldr	r3, [r7, #28]
20000d94:	2b00      	cmp	r3, #0
20000d96:	d022      	beq.n	20000dde <osSemaphoreNew+0xe8>
20000d98:	68bb      	ldr	r3, [r7, #8]
20000d9a:	2b00      	cmp	r3, #0
20000d9c:	d01f      	beq.n	20000dde <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
20000d9e:	2300      	movs	r3, #0
20000da0:	2200      	movs	r2, #0
20000da2:	2100      	movs	r1, #0
20000da4:	69f8      	ldr	r0, [r7, #28]
20000da6:	f000 fb55 	bl	20001454 <xQueueGenericSend>
20000daa:	4603      	mov	r3, r0
20000dac:	2b01      	cmp	r3, #1
20000dae:	d016      	beq.n	20000dde <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
20000db0:	69f8      	ldr	r0, [r7, #28]
20000db2:	f000 ffe1 	bl	20001d78 <vQueueDelete>
            hSemaphore = NULL;
20000db6:	2300      	movs	r3, #0
20000db8:	61fb      	str	r3, [r7, #28]
20000dba:	e010      	b.n	20000dde <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
20000dbc:	69bb      	ldr	r3, [r7, #24]
20000dbe:	2b01      	cmp	r3, #1
20000dc0:	d108      	bne.n	20000dd4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
20000dc2:	687b      	ldr	r3, [r7, #4]
20000dc4:	689b      	ldr	r3, [r3, #8]
20000dc6:	461a      	mov	r2, r3
20000dc8:	68b9      	ldr	r1, [r7, #8]
20000dca:	68f8      	ldr	r0, [r7, #12]
20000dcc:	f000 fad7 	bl	2000137e <xQueueCreateCountingSemaphoreStatic>
20000dd0:	61f8      	str	r0, [r7, #28]
20000dd2:	e004      	b.n	20000dde <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
20000dd4:	68b9      	ldr	r1, [r7, #8]
20000dd6:	68f8      	ldr	r0, [r7, #12]
20000dd8:	f000 fb08 	bl	200013ec <xQueueCreateCountingSemaphore>
20000ddc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
20000dde:	69fb      	ldr	r3, [r7, #28]
20000de0:	2b00      	cmp	r3, #0
20000de2:	d00c      	beq.n	20000dfe <osSemaphoreNew+0x108>
        if (attr != NULL) {
20000de4:	687b      	ldr	r3, [r7, #4]
20000de6:	2b00      	cmp	r3, #0
20000de8:	d003      	beq.n	20000df2 <osSemaphoreNew+0xfc>
          name = attr->name;
20000dea:	687b      	ldr	r3, [r7, #4]
20000dec:	681b      	ldr	r3, [r3, #0]
20000dee:	617b      	str	r3, [r7, #20]
20000df0:	e001      	b.n	20000df6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
20000df2:	2300      	movs	r3, #0
20000df4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
20000df6:	6979      	ldr	r1, [r7, #20]
20000df8:	69f8      	ldr	r0, [r7, #28]
20000dfa:	f001 f909 	bl	20002010 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
20000dfe:	69fb      	ldr	r3, [r7, #28]
}
20000e00:	4618      	mov	r0, r3
20000e02:	3720      	adds	r7, #32
20000e04:	46bd      	mov	sp, r7
20000e06:	bd80      	pop	{r7, pc}

20000e08 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
20000e08:	b580      	push	{r7, lr}
20000e0a:	b086      	sub	sp, #24
20000e0c:	af00      	add	r7, sp, #0
20000e0e:	6078      	str	r0, [r7, #4]
20000e10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
20000e12:	687b      	ldr	r3, [r7, #4]
20000e14:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
20000e16:	2300      	movs	r3, #0
20000e18:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
20000e1a:	693b      	ldr	r3, [r7, #16]
20000e1c:	2b00      	cmp	r3, #0
20000e1e:	d103      	bne.n	20000e28 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
20000e20:	f06f 0303 	mvn.w	r3, #3
20000e24:	617b      	str	r3, [r7, #20]
20000e26:	e039      	b.n	20000e9c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000e28:	f3ef 8305 	mrs	r3, IPSR
20000e2c:	60fb      	str	r3, [r7, #12]
  return(result);
20000e2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
20000e30:	2b00      	cmp	r3, #0
20000e32:	d022      	beq.n	20000e7a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
20000e34:	683b      	ldr	r3, [r7, #0]
20000e36:	2b00      	cmp	r3, #0
20000e38:	d003      	beq.n	20000e42 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
20000e3a:	f06f 0303 	mvn.w	r3, #3
20000e3e:	617b      	str	r3, [r7, #20]
20000e40:	e02c      	b.n	20000e9c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
20000e42:	2300      	movs	r3, #0
20000e44:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
20000e46:	f107 0308 	add.w	r3, r7, #8
20000e4a:	461a      	mov	r2, r3
20000e4c:	2100      	movs	r1, #0
20000e4e:	6938      	ldr	r0, [r7, #16]
20000e50:	f000 ff12 	bl	20001c78 <xQueueReceiveFromISR>
20000e54:	4603      	mov	r3, r0
20000e56:	2b01      	cmp	r3, #1
20000e58:	d003      	beq.n	20000e62 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
20000e5a:	f06f 0302 	mvn.w	r3, #2
20000e5e:	617b      	str	r3, [r7, #20]
20000e60:	e01c      	b.n	20000e9c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
20000e62:	68bb      	ldr	r3, [r7, #8]
20000e64:	2b00      	cmp	r3, #0
20000e66:	d019      	beq.n	20000e9c <osSemaphoreAcquire+0x94>
20000e68:	4b0f      	ldr	r3, [pc, #60]	; (20000ea8 <osSemaphoreAcquire+0xa0>)
20000e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20000e6e:	601a      	str	r2, [r3, #0]
20000e70:	f3bf 8f4f 	dsb	sy
20000e74:	f3bf 8f6f 	isb	sy
20000e78:	e010      	b.n	20000e9c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
20000e7a:	6839      	ldr	r1, [r7, #0]
20000e7c:	6938      	ldr	r0, [r7, #16]
20000e7e:	f000 fdef 	bl	20001a60 <xQueueSemaphoreTake>
20000e82:	4603      	mov	r3, r0
20000e84:	2b01      	cmp	r3, #1
20000e86:	d009      	beq.n	20000e9c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
20000e88:	683b      	ldr	r3, [r7, #0]
20000e8a:	2b00      	cmp	r3, #0
20000e8c:	d003      	beq.n	20000e96 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
20000e8e:	f06f 0301 	mvn.w	r3, #1
20000e92:	617b      	str	r3, [r7, #20]
20000e94:	e002      	b.n	20000e9c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
20000e96:	f06f 0302 	mvn.w	r3, #2
20000e9a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
20000e9c:	697b      	ldr	r3, [r7, #20]
}
20000e9e:	4618      	mov	r0, r3
20000ea0:	3718      	adds	r7, #24
20000ea2:	46bd      	mov	sp, r7
20000ea4:	bd80      	pop	{r7, pc}
20000ea6:	bf00      	nop
20000ea8:	e000ed04 	.word	0xe000ed04

20000eac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
20000eac:	b580      	push	{r7, lr}
20000eae:	b086      	sub	sp, #24
20000eb0:	af00      	add	r7, sp, #0
20000eb2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
20000eb4:	687b      	ldr	r3, [r7, #4]
20000eb6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
20000eb8:	2300      	movs	r3, #0
20000eba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
20000ebc:	693b      	ldr	r3, [r7, #16]
20000ebe:	2b00      	cmp	r3, #0
20000ec0:	d103      	bne.n	20000eca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
20000ec2:	f06f 0303 	mvn.w	r3, #3
20000ec6:	617b      	str	r3, [r7, #20]
20000ec8:	e02c      	b.n	20000f24 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
20000eca:	f3ef 8305 	mrs	r3, IPSR
20000ece:	60fb      	str	r3, [r7, #12]
  return(result);
20000ed0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
20000ed2:	2b00      	cmp	r3, #0
20000ed4:	d01a      	beq.n	20000f0c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
20000ed6:	2300      	movs	r3, #0
20000ed8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
20000eda:	f107 0308 	add.w	r3, r7, #8
20000ede:	4619      	mov	r1, r3
20000ee0:	6938      	ldr	r0, [r7, #16]
20000ee2:	f000 fc50 	bl	20001786 <xQueueGiveFromISR>
20000ee6:	4603      	mov	r3, r0
20000ee8:	2b01      	cmp	r3, #1
20000eea:	d003      	beq.n	20000ef4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
20000eec:	f06f 0302 	mvn.w	r3, #2
20000ef0:	617b      	str	r3, [r7, #20]
20000ef2:	e017      	b.n	20000f24 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
20000ef4:	68bb      	ldr	r3, [r7, #8]
20000ef6:	2b00      	cmp	r3, #0
20000ef8:	d014      	beq.n	20000f24 <osSemaphoreRelease+0x78>
20000efa:	4b0d      	ldr	r3, [pc, #52]	; (20000f30 <osSemaphoreRelease+0x84>)
20000efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20000f00:	601a      	str	r2, [r3, #0]
20000f02:	f3bf 8f4f 	dsb	sy
20000f06:	f3bf 8f6f 	isb	sy
20000f0a:	e00b      	b.n	20000f24 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
20000f0c:	2300      	movs	r3, #0
20000f0e:	2200      	movs	r2, #0
20000f10:	2100      	movs	r1, #0
20000f12:	6938      	ldr	r0, [r7, #16]
20000f14:	f000 fa9e 	bl	20001454 <xQueueGenericSend>
20000f18:	4603      	mov	r3, r0
20000f1a:	2b01      	cmp	r3, #1
20000f1c:	d002      	beq.n	20000f24 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
20000f1e:	f06f 0302 	mvn.w	r3, #2
20000f22:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
20000f24:	697b      	ldr	r3, [r7, #20]
}
20000f26:	4618      	mov	r0, r3
20000f28:	3718      	adds	r7, #24
20000f2a:	46bd      	mov	sp, r7
20000f2c:	bd80      	pop	{r7, pc}
20000f2e:	bf00      	nop
20000f30:	e000ed04 	.word	0xe000ed04

20000f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
20000f34:	b480      	push	{r7}
20000f36:	b085      	sub	sp, #20
20000f38:	af00      	add	r7, sp, #0
20000f3a:	60f8      	str	r0, [r7, #12]
20000f3c:	60b9      	str	r1, [r7, #8]
20000f3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
20000f40:	68fb      	ldr	r3, [r7, #12]
20000f42:	4a07      	ldr	r2, [pc, #28]	; (20000f60 <vApplicationGetIdleTaskMemory+0x2c>)
20000f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
20000f46:	68bb      	ldr	r3, [r7, #8]
20000f48:	4a06      	ldr	r2, [pc, #24]	; (20000f64 <vApplicationGetIdleTaskMemory+0x30>)
20000f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
20000f4c:	687b      	ldr	r3, [r7, #4]
20000f4e:	2280      	movs	r2, #128	; 0x80
20000f50:	601a      	str	r2, [r3, #0]
}
20000f52:	bf00      	nop
20000f54:	3714      	adds	r7, #20
20000f56:	46bd      	mov	sp, r7
20000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f5c:	4770      	bx	lr
20000f5e:	bf00      	nop
20000f60:	2000a4d4 	.word	0x2000a4d4
20000f64:	2000a590 	.word	0x2000a590

20000f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
20000f68:	b480      	push	{r7}
20000f6a:	b085      	sub	sp, #20
20000f6c:	af00      	add	r7, sp, #0
20000f6e:	60f8      	str	r0, [r7, #12]
20000f70:	60b9      	str	r1, [r7, #8]
20000f72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
20000f74:	68fb      	ldr	r3, [r7, #12]
20000f76:	4a07      	ldr	r2, [pc, #28]	; (20000f94 <vApplicationGetTimerTaskMemory+0x2c>)
20000f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
20000f7a:	68bb      	ldr	r3, [r7, #8]
20000f7c:	4a06      	ldr	r2, [pc, #24]	; (20000f98 <vApplicationGetTimerTaskMemory+0x30>)
20000f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
20000f80:	687b      	ldr	r3, [r7, #4]
20000f82:	f44f 7280 	mov.w	r2, #256	; 0x100
20000f86:	601a      	str	r2, [r3, #0]
}
20000f88:	bf00      	nop
20000f8a:	3714      	adds	r7, #20
20000f8c:	46bd      	mov	sp, r7
20000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000f92:	4770      	bx	lr
20000f94:	2000a790 	.word	0x2000a790
20000f98:	2000a84c 	.word	0x2000a84c

20000f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
20000f9c:	b480      	push	{r7}
20000f9e:	b083      	sub	sp, #12
20000fa0:	af00      	add	r7, sp, #0
20000fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fa4:	687b      	ldr	r3, [r7, #4]
20000fa6:	f103 0208 	add.w	r2, r3, #8
20000faa:	687b      	ldr	r3, [r7, #4]
20000fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
20000fae:	687b      	ldr	r3, [r7, #4]
20000fb0:	f04f 32ff 	mov.w	r2, #4294967295
20000fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fb6:	687b      	ldr	r3, [r7, #4]
20000fb8:	f103 0208 	add.w	r2, r3, #8
20000fbc:	687b      	ldr	r3, [r7, #4]
20000fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
20000fc0:	687b      	ldr	r3, [r7, #4]
20000fc2:	f103 0208 	add.w	r2, r3, #8
20000fc6:	687b      	ldr	r3, [r7, #4]
20000fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
20000fca:	687b      	ldr	r3, [r7, #4]
20000fcc:	2200      	movs	r2, #0
20000fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
20000fd0:	bf00      	nop
20000fd2:	370c      	adds	r7, #12
20000fd4:	46bd      	mov	sp, r7
20000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fda:	4770      	bx	lr

20000fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
20000fdc:	b480      	push	{r7}
20000fde:	b083      	sub	sp, #12
20000fe0:	af00      	add	r7, sp, #0
20000fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
20000fe4:	687b      	ldr	r3, [r7, #4]
20000fe6:	2200      	movs	r2, #0
20000fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
20000fea:	bf00      	nop
20000fec:	370c      	adds	r7, #12
20000fee:	46bd      	mov	sp, r7
20000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
20000ff4:	4770      	bx	lr

20000ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
20000ff6:	b480      	push	{r7}
20000ff8:	b085      	sub	sp, #20
20000ffa:	af00      	add	r7, sp, #0
20000ffc:	6078      	str	r0, [r7, #4]
20000ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
20001000:	687b      	ldr	r3, [r7, #4]
20001002:	685b      	ldr	r3, [r3, #4]
20001004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
20001006:	683b      	ldr	r3, [r7, #0]
20001008:	68fa      	ldr	r2, [r7, #12]
2000100a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
2000100c:	68fb      	ldr	r3, [r7, #12]
2000100e:	689a      	ldr	r2, [r3, #8]
20001010:	683b      	ldr	r3, [r7, #0]
20001012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
20001014:	68fb      	ldr	r3, [r7, #12]
20001016:	689b      	ldr	r3, [r3, #8]
20001018:	683a      	ldr	r2, [r7, #0]
2000101a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
2000101c:	68fb      	ldr	r3, [r7, #12]
2000101e:	683a      	ldr	r2, [r7, #0]
20001020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
20001022:	683b      	ldr	r3, [r7, #0]
20001024:	687a      	ldr	r2, [r7, #4]
20001026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
20001028:	687b      	ldr	r3, [r7, #4]
2000102a:	681b      	ldr	r3, [r3, #0]
2000102c:	1c5a      	adds	r2, r3, #1
2000102e:	687b      	ldr	r3, [r7, #4]
20001030:	601a      	str	r2, [r3, #0]
}
20001032:	bf00      	nop
20001034:	3714      	adds	r7, #20
20001036:	46bd      	mov	sp, r7
20001038:	f85d 7b04 	ldr.w	r7, [sp], #4
2000103c:	4770      	bx	lr

2000103e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
2000103e:	b480      	push	{r7}
20001040:	b085      	sub	sp, #20
20001042:	af00      	add	r7, sp, #0
20001044:	6078      	str	r0, [r7, #4]
20001046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
20001048:	683b      	ldr	r3, [r7, #0]
2000104a:	681b      	ldr	r3, [r3, #0]
2000104c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
2000104e:	68bb      	ldr	r3, [r7, #8]
20001050:	f1b3 3fff 	cmp.w	r3, #4294967295
20001054:	d103      	bne.n	2000105e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
20001056:	687b      	ldr	r3, [r7, #4]
20001058:	691b      	ldr	r3, [r3, #16]
2000105a:	60fb      	str	r3, [r7, #12]
2000105c:	e00c      	b.n	20001078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
2000105e:	687b      	ldr	r3, [r7, #4]
20001060:	3308      	adds	r3, #8
20001062:	60fb      	str	r3, [r7, #12]
20001064:	e002      	b.n	2000106c <vListInsert+0x2e>
20001066:	68fb      	ldr	r3, [r7, #12]
20001068:	685b      	ldr	r3, [r3, #4]
2000106a:	60fb      	str	r3, [r7, #12]
2000106c:	68fb      	ldr	r3, [r7, #12]
2000106e:	685b      	ldr	r3, [r3, #4]
20001070:	681b      	ldr	r3, [r3, #0]
20001072:	68ba      	ldr	r2, [r7, #8]
20001074:	429a      	cmp	r2, r3
20001076:	d2f6      	bcs.n	20001066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
20001078:	68fb      	ldr	r3, [r7, #12]
2000107a:	685a      	ldr	r2, [r3, #4]
2000107c:	683b      	ldr	r3, [r7, #0]
2000107e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
20001080:	683b      	ldr	r3, [r7, #0]
20001082:	685b      	ldr	r3, [r3, #4]
20001084:	683a      	ldr	r2, [r7, #0]
20001086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
20001088:	683b      	ldr	r3, [r7, #0]
2000108a:	68fa      	ldr	r2, [r7, #12]
2000108c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
2000108e:	68fb      	ldr	r3, [r7, #12]
20001090:	683a      	ldr	r2, [r7, #0]
20001092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
20001094:	683b      	ldr	r3, [r7, #0]
20001096:	687a      	ldr	r2, [r7, #4]
20001098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
2000109a:	687b      	ldr	r3, [r7, #4]
2000109c:	681b      	ldr	r3, [r3, #0]
2000109e:	1c5a      	adds	r2, r3, #1
200010a0:	687b      	ldr	r3, [r7, #4]
200010a2:	601a      	str	r2, [r3, #0]
}
200010a4:	bf00      	nop
200010a6:	3714      	adds	r7, #20
200010a8:	46bd      	mov	sp, r7
200010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200010ae:	4770      	bx	lr

200010b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
200010b0:	b480      	push	{r7}
200010b2:	b085      	sub	sp, #20
200010b4:	af00      	add	r7, sp, #0
200010b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
200010b8:	687b      	ldr	r3, [r7, #4]
200010ba:	691b      	ldr	r3, [r3, #16]
200010bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
200010be:	687b      	ldr	r3, [r7, #4]
200010c0:	685b      	ldr	r3, [r3, #4]
200010c2:	687a      	ldr	r2, [r7, #4]
200010c4:	6892      	ldr	r2, [r2, #8]
200010c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
200010c8:	687b      	ldr	r3, [r7, #4]
200010ca:	689b      	ldr	r3, [r3, #8]
200010cc:	687a      	ldr	r2, [r7, #4]
200010ce:	6852      	ldr	r2, [r2, #4]
200010d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
200010d2:	68fb      	ldr	r3, [r7, #12]
200010d4:	685b      	ldr	r3, [r3, #4]
200010d6:	687a      	ldr	r2, [r7, #4]
200010d8:	429a      	cmp	r2, r3
200010da:	d103      	bne.n	200010e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
200010dc:	687b      	ldr	r3, [r7, #4]
200010de:	689a      	ldr	r2, [r3, #8]
200010e0:	68fb      	ldr	r3, [r7, #12]
200010e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
200010e4:	687b      	ldr	r3, [r7, #4]
200010e6:	2200      	movs	r2, #0
200010e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
200010ea:	68fb      	ldr	r3, [r7, #12]
200010ec:	681b      	ldr	r3, [r3, #0]
200010ee:	1e5a      	subs	r2, r3, #1
200010f0:	68fb      	ldr	r3, [r7, #12]
200010f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
200010f4:	68fb      	ldr	r3, [r7, #12]
200010f6:	681b      	ldr	r3, [r3, #0]
}
200010f8:	4618      	mov	r0, r3
200010fa:	3714      	adds	r7, #20
200010fc:	46bd      	mov	sp, r7
200010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
20001102:	4770      	bx	lr

20001104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
20001104:	b580      	push	{r7, lr}
20001106:	b084      	sub	sp, #16
20001108:	af00      	add	r7, sp, #0
2000110a:	6078      	str	r0, [r7, #4]
2000110c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
2000110e:	687b      	ldr	r3, [r7, #4]
20001110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
20001112:	68fb      	ldr	r3, [r7, #12]
20001114:	2b00      	cmp	r3, #0
20001116:	d10a      	bne.n	2000112e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
20001118:	f04f 0350 	mov.w	r3, #80	; 0x50
2000111c:	f383 8811 	msr	BASEPRI, r3
20001120:	f3bf 8f6f 	isb	sy
20001124:	f3bf 8f4f 	dsb	sy
20001128:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
2000112a:	bf00      	nop
2000112c:	e7fe      	b.n	2000112c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
2000112e:	f002 fc99 	bl	20003a64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20001132:	68fb      	ldr	r3, [r7, #12]
20001134:	681a      	ldr	r2, [r3, #0]
20001136:	68fb      	ldr	r3, [r7, #12]
20001138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000113a:	68f9      	ldr	r1, [r7, #12]
2000113c:	6c09      	ldr	r1, [r1, #64]	; 0x40
2000113e:	fb01 f303 	mul.w	r3, r1, r3
20001142:	441a      	add	r2, r3
20001144:	68fb      	ldr	r3, [r7, #12]
20001146:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
20001148:	68fb      	ldr	r3, [r7, #12]
2000114a:	2200      	movs	r2, #0
2000114c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
2000114e:	68fb      	ldr	r3, [r7, #12]
20001150:	681a      	ldr	r2, [r3, #0]
20001152:	68fb      	ldr	r3, [r7, #12]
20001154:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
20001156:	68fb      	ldr	r3, [r7, #12]
20001158:	681a      	ldr	r2, [r3, #0]
2000115a:	68fb      	ldr	r3, [r7, #12]
2000115c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000115e:	3b01      	subs	r3, #1
20001160:	68f9      	ldr	r1, [r7, #12]
20001162:	6c09      	ldr	r1, [r1, #64]	; 0x40
20001164:	fb01 f303 	mul.w	r3, r1, r3
20001168:	441a      	add	r2, r3
2000116a:	68fb      	ldr	r3, [r7, #12]
2000116c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
2000116e:	68fb      	ldr	r3, [r7, #12]
20001170:	22ff      	movs	r2, #255	; 0xff
20001172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
20001176:	68fb      	ldr	r3, [r7, #12]
20001178:	22ff      	movs	r2, #255	; 0xff
2000117a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
2000117e:	683b      	ldr	r3, [r7, #0]
20001180:	2b00      	cmp	r3, #0
20001182:	d114      	bne.n	200011ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001184:	68fb      	ldr	r3, [r7, #12]
20001186:	691b      	ldr	r3, [r3, #16]
20001188:	2b00      	cmp	r3, #0
2000118a:	d01a      	beq.n	200011c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2000118c:	68fb      	ldr	r3, [r7, #12]
2000118e:	3310      	adds	r3, #16
20001190:	4618      	mov	r0, r3
20001192:	f001 fc4b 	bl	20002a2c <xTaskRemoveFromEventList>
20001196:	4603      	mov	r3, r0
20001198:	2b00      	cmp	r3, #0
2000119a:	d012      	beq.n	200011c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
2000119c:	4b0c      	ldr	r3, [pc, #48]	; (200011d0 <xQueueGenericReset+0xcc>)
2000119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200011a2:	601a      	str	r2, [r3, #0]
200011a4:	f3bf 8f4f 	dsb	sy
200011a8:	f3bf 8f6f 	isb	sy
200011ac:	e009      	b.n	200011c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
200011ae:	68fb      	ldr	r3, [r7, #12]
200011b0:	3310      	adds	r3, #16
200011b2:	4618      	mov	r0, r3
200011b4:	f7ff fef2 	bl	20000f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
200011b8:	68fb      	ldr	r3, [r7, #12]
200011ba:	3324      	adds	r3, #36	; 0x24
200011bc:	4618      	mov	r0, r3
200011be:	f7ff feed 	bl	20000f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
200011c2:	f002 fc7f 	bl	20003ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
200011c6:	2301      	movs	r3, #1
}
200011c8:	4618      	mov	r0, r3
200011ca:	3710      	adds	r7, #16
200011cc:	46bd      	mov	sp, r7
200011ce:	bd80      	pop	{r7, pc}
200011d0:	e000ed04 	.word	0xe000ed04

200011d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
200011d4:	b580      	push	{r7, lr}
200011d6:	b08e      	sub	sp, #56	; 0x38
200011d8:	af02      	add	r7, sp, #8
200011da:	60f8      	str	r0, [r7, #12]
200011dc:	60b9      	str	r1, [r7, #8]
200011de:	607a      	str	r2, [r7, #4]
200011e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200011e2:	68fb      	ldr	r3, [r7, #12]
200011e4:	2b00      	cmp	r3, #0
200011e6:	d10a      	bne.n	200011fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
200011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
200011ec:	f383 8811 	msr	BASEPRI, r3
200011f0:	f3bf 8f6f 	isb	sy
200011f4:	f3bf 8f4f 	dsb	sy
200011f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
200011fa:	bf00      	nop
200011fc:	e7fe      	b.n	200011fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
200011fe:	683b      	ldr	r3, [r7, #0]
20001200:	2b00      	cmp	r3, #0
20001202:	d10a      	bne.n	2000121a <xQueueGenericCreateStatic+0x46>
	__asm volatile
20001204:	f04f 0350 	mov.w	r3, #80	; 0x50
20001208:	f383 8811 	msr	BASEPRI, r3
2000120c:	f3bf 8f6f 	isb	sy
20001210:	f3bf 8f4f 	dsb	sy
20001214:	627b      	str	r3, [r7, #36]	; 0x24
}
20001216:	bf00      	nop
20001218:	e7fe      	b.n	20001218 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
2000121a:	687b      	ldr	r3, [r7, #4]
2000121c:	2b00      	cmp	r3, #0
2000121e:	d002      	beq.n	20001226 <xQueueGenericCreateStatic+0x52>
20001220:	68bb      	ldr	r3, [r7, #8]
20001222:	2b00      	cmp	r3, #0
20001224:	d001      	beq.n	2000122a <xQueueGenericCreateStatic+0x56>
20001226:	2301      	movs	r3, #1
20001228:	e000      	b.n	2000122c <xQueueGenericCreateStatic+0x58>
2000122a:	2300      	movs	r3, #0
2000122c:	2b00      	cmp	r3, #0
2000122e:	d10a      	bne.n	20001246 <xQueueGenericCreateStatic+0x72>
	__asm volatile
20001230:	f04f 0350 	mov.w	r3, #80	; 0x50
20001234:	f383 8811 	msr	BASEPRI, r3
20001238:	f3bf 8f6f 	isb	sy
2000123c:	f3bf 8f4f 	dsb	sy
20001240:	623b      	str	r3, [r7, #32]
}
20001242:	bf00      	nop
20001244:	e7fe      	b.n	20001244 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
20001246:	687b      	ldr	r3, [r7, #4]
20001248:	2b00      	cmp	r3, #0
2000124a:	d102      	bne.n	20001252 <xQueueGenericCreateStatic+0x7e>
2000124c:	68bb      	ldr	r3, [r7, #8]
2000124e:	2b00      	cmp	r3, #0
20001250:	d101      	bne.n	20001256 <xQueueGenericCreateStatic+0x82>
20001252:	2301      	movs	r3, #1
20001254:	e000      	b.n	20001258 <xQueueGenericCreateStatic+0x84>
20001256:	2300      	movs	r3, #0
20001258:	2b00      	cmp	r3, #0
2000125a:	d10a      	bne.n	20001272 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
2000125c:	f04f 0350 	mov.w	r3, #80	; 0x50
20001260:	f383 8811 	msr	BASEPRI, r3
20001264:	f3bf 8f6f 	isb	sy
20001268:	f3bf 8f4f 	dsb	sy
2000126c:	61fb      	str	r3, [r7, #28]
}
2000126e:	bf00      	nop
20001270:	e7fe      	b.n	20001270 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
20001272:	2350      	movs	r3, #80	; 0x50
20001274:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
20001276:	697b      	ldr	r3, [r7, #20]
20001278:	2b50      	cmp	r3, #80	; 0x50
2000127a:	d00a      	beq.n	20001292 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
2000127c:	f04f 0350 	mov.w	r3, #80	; 0x50
20001280:	f383 8811 	msr	BASEPRI, r3
20001284:	f3bf 8f6f 	isb	sy
20001288:	f3bf 8f4f 	dsb	sy
2000128c:	61bb      	str	r3, [r7, #24]
}
2000128e:	bf00      	nop
20001290:	e7fe      	b.n	20001290 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
20001292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20001294:	683b      	ldr	r3, [r7, #0]
20001296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
20001298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000129a:	2b00      	cmp	r3, #0
2000129c:	d00d      	beq.n	200012ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
2000129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200012a0:	2201      	movs	r2, #1
200012a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
200012a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
200012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200012ac:	9300      	str	r3, [sp, #0]
200012ae:	4613      	mov	r3, r2
200012b0:	687a      	ldr	r2, [r7, #4]
200012b2:	68b9      	ldr	r1, [r7, #8]
200012b4:	68f8      	ldr	r0, [r7, #12]
200012b6:	f000 f83f 	bl	20001338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
200012ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
200012bc:	4618      	mov	r0, r3
200012be:	3730      	adds	r7, #48	; 0x30
200012c0:	46bd      	mov	sp, r7
200012c2:	bd80      	pop	{r7, pc}

200012c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
200012c4:	b580      	push	{r7, lr}
200012c6:	b08a      	sub	sp, #40	; 0x28
200012c8:	af02      	add	r7, sp, #8
200012ca:	60f8      	str	r0, [r7, #12]
200012cc:	60b9      	str	r1, [r7, #8]
200012ce:	4613      	mov	r3, r2
200012d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
200012d2:	68fb      	ldr	r3, [r7, #12]
200012d4:	2b00      	cmp	r3, #0
200012d6:	d10a      	bne.n	200012ee <xQueueGenericCreate+0x2a>
	__asm volatile
200012d8:	f04f 0350 	mov.w	r3, #80	; 0x50
200012dc:	f383 8811 	msr	BASEPRI, r3
200012e0:	f3bf 8f6f 	isb	sy
200012e4:	f3bf 8f4f 	dsb	sy
200012e8:	613b      	str	r3, [r7, #16]
}
200012ea:	bf00      	nop
200012ec:	e7fe      	b.n	200012ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200012ee:	68fb      	ldr	r3, [r7, #12]
200012f0:	68ba      	ldr	r2, [r7, #8]
200012f2:	fb02 f303 	mul.w	r3, r2, r3
200012f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
200012f8:	69fb      	ldr	r3, [r7, #28]
200012fa:	3350      	adds	r3, #80	; 0x50
200012fc:	4618      	mov	r0, r3
200012fe:	f002 fcd3 	bl	20003ca8 <pvPortMalloc>
20001302:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
20001304:	69bb      	ldr	r3, [r7, #24]
20001306:	2b00      	cmp	r3, #0
20001308:	d011      	beq.n	2000132e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
2000130a:	69bb      	ldr	r3, [r7, #24]
2000130c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
2000130e:	697b      	ldr	r3, [r7, #20]
20001310:	3350      	adds	r3, #80	; 0x50
20001312:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
20001314:	69bb      	ldr	r3, [r7, #24]
20001316:	2200      	movs	r2, #0
20001318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
2000131c:	79fa      	ldrb	r2, [r7, #7]
2000131e:	69bb      	ldr	r3, [r7, #24]
20001320:	9300      	str	r3, [sp, #0]
20001322:	4613      	mov	r3, r2
20001324:	697a      	ldr	r2, [r7, #20]
20001326:	68b9      	ldr	r1, [r7, #8]
20001328:	68f8      	ldr	r0, [r7, #12]
2000132a:	f000 f805 	bl	20001338 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
2000132e:	69bb      	ldr	r3, [r7, #24]
	}
20001330:	4618      	mov	r0, r3
20001332:	3720      	adds	r7, #32
20001334:	46bd      	mov	sp, r7
20001336:	bd80      	pop	{r7, pc}

20001338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
20001338:	b580      	push	{r7, lr}
2000133a:	b084      	sub	sp, #16
2000133c:	af00      	add	r7, sp, #0
2000133e:	60f8      	str	r0, [r7, #12]
20001340:	60b9      	str	r1, [r7, #8]
20001342:	607a      	str	r2, [r7, #4]
20001344:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
20001346:	68bb      	ldr	r3, [r7, #8]
20001348:	2b00      	cmp	r3, #0
2000134a:	d103      	bne.n	20001354 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
2000134c:	69bb      	ldr	r3, [r7, #24]
2000134e:	69ba      	ldr	r2, [r7, #24]
20001350:	601a      	str	r2, [r3, #0]
20001352:	e002      	b.n	2000135a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
20001354:	69bb      	ldr	r3, [r7, #24]
20001356:	687a      	ldr	r2, [r7, #4]
20001358:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
2000135a:	69bb      	ldr	r3, [r7, #24]
2000135c:	68fa      	ldr	r2, [r7, #12]
2000135e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
20001360:	69bb      	ldr	r3, [r7, #24]
20001362:	68ba      	ldr	r2, [r7, #8]
20001364:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
20001366:	2101      	movs	r1, #1
20001368:	69b8      	ldr	r0, [r7, #24]
2000136a:	f7ff fecb 	bl	20001104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
2000136e:	69bb      	ldr	r3, [r7, #24]
20001370:	78fa      	ldrb	r2, [r7, #3]
20001372:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
20001376:	bf00      	nop
20001378:	3710      	adds	r7, #16
2000137a:	46bd      	mov	sp, r7
2000137c:	bd80      	pop	{r7, pc}

2000137e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
2000137e:	b580      	push	{r7, lr}
20001380:	b08a      	sub	sp, #40	; 0x28
20001382:	af02      	add	r7, sp, #8
20001384:	60f8      	str	r0, [r7, #12]
20001386:	60b9      	str	r1, [r7, #8]
20001388:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
2000138a:	68fb      	ldr	r3, [r7, #12]
2000138c:	2b00      	cmp	r3, #0
2000138e:	d10a      	bne.n	200013a6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
20001390:	f04f 0350 	mov.w	r3, #80	; 0x50
20001394:	f383 8811 	msr	BASEPRI, r3
20001398:	f3bf 8f6f 	isb	sy
2000139c:	f3bf 8f4f 	dsb	sy
200013a0:	61bb      	str	r3, [r7, #24]
}
200013a2:	bf00      	nop
200013a4:	e7fe      	b.n	200013a4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
200013a6:	68ba      	ldr	r2, [r7, #8]
200013a8:	68fb      	ldr	r3, [r7, #12]
200013aa:	429a      	cmp	r2, r3
200013ac:	d90a      	bls.n	200013c4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
200013ae:	f04f 0350 	mov.w	r3, #80	; 0x50
200013b2:	f383 8811 	msr	BASEPRI, r3
200013b6:	f3bf 8f6f 	isb	sy
200013ba:	f3bf 8f4f 	dsb	sy
200013be:	617b      	str	r3, [r7, #20]
}
200013c0:	bf00      	nop
200013c2:	e7fe      	b.n	200013c2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
200013c4:	2302      	movs	r3, #2
200013c6:	9300      	str	r3, [sp, #0]
200013c8:	687b      	ldr	r3, [r7, #4]
200013ca:	2200      	movs	r2, #0
200013cc:	2100      	movs	r1, #0
200013ce:	68f8      	ldr	r0, [r7, #12]
200013d0:	f7ff ff00 	bl	200011d4 <xQueueGenericCreateStatic>
200013d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
200013d6:	69fb      	ldr	r3, [r7, #28]
200013d8:	2b00      	cmp	r3, #0
200013da:	d002      	beq.n	200013e2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
200013dc:	69fb      	ldr	r3, [r7, #28]
200013de:	68ba      	ldr	r2, [r7, #8]
200013e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
200013e2:	69fb      	ldr	r3, [r7, #28]
	}
200013e4:	4618      	mov	r0, r3
200013e6:	3720      	adds	r7, #32
200013e8:	46bd      	mov	sp, r7
200013ea:	bd80      	pop	{r7, pc}

200013ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
200013ec:	b580      	push	{r7, lr}
200013ee:	b086      	sub	sp, #24
200013f0:	af00      	add	r7, sp, #0
200013f2:	6078      	str	r0, [r7, #4]
200013f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
200013f6:	687b      	ldr	r3, [r7, #4]
200013f8:	2b00      	cmp	r3, #0
200013fa:	d10a      	bne.n	20001412 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
200013fc:	f04f 0350 	mov.w	r3, #80	; 0x50
20001400:	f383 8811 	msr	BASEPRI, r3
20001404:	f3bf 8f6f 	isb	sy
20001408:	f3bf 8f4f 	dsb	sy
2000140c:	613b      	str	r3, [r7, #16]
}
2000140e:	bf00      	nop
20001410:	e7fe      	b.n	20001410 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
20001412:	683a      	ldr	r2, [r7, #0]
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	429a      	cmp	r2, r3
20001418:	d90a      	bls.n	20001430 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
2000141a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000141e:	f383 8811 	msr	BASEPRI, r3
20001422:	f3bf 8f6f 	isb	sy
20001426:	f3bf 8f4f 	dsb	sy
2000142a:	60fb      	str	r3, [r7, #12]
}
2000142c:	bf00      	nop
2000142e:	e7fe      	b.n	2000142e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
20001430:	2202      	movs	r2, #2
20001432:	2100      	movs	r1, #0
20001434:	6878      	ldr	r0, [r7, #4]
20001436:	f7ff ff45 	bl	200012c4 <xQueueGenericCreate>
2000143a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
2000143c:	697b      	ldr	r3, [r7, #20]
2000143e:	2b00      	cmp	r3, #0
20001440:	d002      	beq.n	20001448 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
20001442:	697b      	ldr	r3, [r7, #20]
20001444:	683a      	ldr	r2, [r7, #0]
20001446:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
20001448:	697b      	ldr	r3, [r7, #20]
	}
2000144a:	4618      	mov	r0, r3
2000144c:	3718      	adds	r7, #24
2000144e:	46bd      	mov	sp, r7
20001450:	bd80      	pop	{r7, pc}
	...

20001454 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
20001454:	b580      	push	{r7, lr}
20001456:	b08e      	sub	sp, #56	; 0x38
20001458:	af00      	add	r7, sp, #0
2000145a:	60f8      	str	r0, [r7, #12]
2000145c:	60b9      	str	r1, [r7, #8]
2000145e:	607a      	str	r2, [r7, #4]
20001460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
20001462:	2300      	movs	r3, #0
20001464:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001466:	68fb      	ldr	r3, [r7, #12]
20001468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
2000146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000146c:	2b00      	cmp	r3, #0
2000146e:	d10a      	bne.n	20001486 <xQueueGenericSend+0x32>
	__asm volatile
20001470:	f04f 0350 	mov.w	r3, #80	; 0x50
20001474:	f383 8811 	msr	BASEPRI, r3
20001478:	f3bf 8f6f 	isb	sy
2000147c:	f3bf 8f4f 	dsb	sy
20001480:	62bb      	str	r3, [r7, #40]	; 0x28
}
20001482:	bf00      	nop
20001484:	e7fe      	b.n	20001484 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001486:	68bb      	ldr	r3, [r7, #8]
20001488:	2b00      	cmp	r3, #0
2000148a:	d103      	bne.n	20001494 <xQueueGenericSend+0x40>
2000148c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001490:	2b00      	cmp	r3, #0
20001492:	d101      	bne.n	20001498 <xQueueGenericSend+0x44>
20001494:	2301      	movs	r3, #1
20001496:	e000      	b.n	2000149a <xQueueGenericSend+0x46>
20001498:	2300      	movs	r3, #0
2000149a:	2b00      	cmp	r3, #0
2000149c:	d10a      	bne.n	200014b4 <xQueueGenericSend+0x60>
	__asm volatile
2000149e:	f04f 0350 	mov.w	r3, #80	; 0x50
200014a2:	f383 8811 	msr	BASEPRI, r3
200014a6:	f3bf 8f6f 	isb	sy
200014aa:	f3bf 8f4f 	dsb	sy
200014ae:	627b      	str	r3, [r7, #36]	; 0x24
}
200014b0:	bf00      	nop
200014b2:	e7fe      	b.n	200014b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200014b4:	683b      	ldr	r3, [r7, #0]
200014b6:	2b02      	cmp	r3, #2
200014b8:	d103      	bne.n	200014c2 <xQueueGenericSend+0x6e>
200014ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200014bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200014be:	2b01      	cmp	r3, #1
200014c0:	d101      	bne.n	200014c6 <xQueueGenericSend+0x72>
200014c2:	2301      	movs	r3, #1
200014c4:	e000      	b.n	200014c8 <xQueueGenericSend+0x74>
200014c6:	2300      	movs	r3, #0
200014c8:	2b00      	cmp	r3, #0
200014ca:	d10a      	bne.n	200014e2 <xQueueGenericSend+0x8e>
	__asm volatile
200014cc:	f04f 0350 	mov.w	r3, #80	; 0x50
200014d0:	f383 8811 	msr	BASEPRI, r3
200014d4:	f3bf 8f6f 	isb	sy
200014d8:	f3bf 8f4f 	dsb	sy
200014dc:	623b      	str	r3, [r7, #32]
}
200014de:	bf00      	nop
200014e0:	e7fe      	b.n	200014e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200014e2:	f001 fc65 	bl	20002db0 <xTaskGetSchedulerState>
200014e6:	4603      	mov	r3, r0
200014e8:	2b00      	cmp	r3, #0
200014ea:	d102      	bne.n	200014f2 <xQueueGenericSend+0x9e>
200014ec:	687b      	ldr	r3, [r7, #4]
200014ee:	2b00      	cmp	r3, #0
200014f0:	d101      	bne.n	200014f6 <xQueueGenericSend+0xa2>
200014f2:	2301      	movs	r3, #1
200014f4:	e000      	b.n	200014f8 <xQueueGenericSend+0xa4>
200014f6:	2300      	movs	r3, #0
200014f8:	2b00      	cmp	r3, #0
200014fa:	d10a      	bne.n	20001512 <xQueueGenericSend+0xbe>
	__asm volatile
200014fc:	f04f 0350 	mov.w	r3, #80	; 0x50
20001500:	f383 8811 	msr	BASEPRI, r3
20001504:	f3bf 8f6f 	isb	sy
20001508:	f3bf 8f4f 	dsb	sy
2000150c:	61fb      	str	r3, [r7, #28]
}
2000150e:	bf00      	nop
20001510:	e7fe      	b.n	20001510 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001512:	f002 faa7 	bl	20003a64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
20001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000151c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2000151e:	429a      	cmp	r2, r3
20001520:	d302      	bcc.n	20001528 <xQueueGenericSend+0xd4>
20001522:	683b      	ldr	r3, [r7, #0]
20001524:	2b02      	cmp	r3, #2
20001526:	d129      	bne.n	2000157c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
20001528:	683a      	ldr	r2, [r7, #0]
2000152a:	68b9      	ldr	r1, [r7, #8]
2000152c:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000152e:	f000 fc5e 	bl	20001dee <prvCopyDataToQueue>
20001532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001538:	2b00      	cmp	r3, #0
2000153a:	d010      	beq.n	2000155e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2000153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000153e:	3324      	adds	r3, #36	; 0x24
20001540:	4618      	mov	r0, r3
20001542:	f001 fa73 	bl	20002a2c <xTaskRemoveFromEventList>
20001546:	4603      	mov	r3, r0
20001548:	2b00      	cmp	r3, #0
2000154a:	d013      	beq.n	20001574 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
2000154c:	4b3f      	ldr	r3, [pc, #252]	; (2000164c <xQueueGenericSend+0x1f8>)
2000154e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001552:	601a      	str	r2, [r3, #0]
20001554:	f3bf 8f4f 	dsb	sy
20001558:	f3bf 8f6f 	isb	sy
2000155c:	e00a      	b.n	20001574 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
2000155e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001560:	2b00      	cmp	r3, #0
20001562:	d007      	beq.n	20001574 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
20001564:	4b39      	ldr	r3, [pc, #228]	; (2000164c <xQueueGenericSend+0x1f8>)
20001566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000156a:	601a      	str	r2, [r3, #0]
2000156c:	f3bf 8f4f 	dsb	sy
20001570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
20001574:	f002 faa6 	bl	20003ac4 <vPortExitCritical>
				return pdPASS;
20001578:	2301      	movs	r3, #1
2000157a:	e063      	b.n	20001644 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000157c:	687b      	ldr	r3, [r7, #4]
2000157e:	2b00      	cmp	r3, #0
20001580:	d103      	bne.n	2000158a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001582:	f002 fa9f 	bl	20003ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
20001586:	2300      	movs	r3, #0
20001588:	e05c      	b.n	20001644 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
2000158a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000158c:	2b00      	cmp	r3, #0
2000158e:	d106      	bne.n	2000159e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001590:	f107 0314 	add.w	r3, r7, #20
20001594:	4618      	mov	r0, r3
20001596:	f001 faad 	bl	20002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000159a:	2301      	movs	r3, #1
2000159c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
2000159e:	f002 fa91 	bl	20003ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
200015a2:	f001 f819 	bl	200025d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
200015a6:	f002 fa5d 	bl	20003a64 <vPortEnterCritical>
200015aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200015ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200015b0:	b25b      	sxtb	r3, r3
200015b2:	f1b3 3fff 	cmp.w	r3, #4294967295
200015b6:	d103      	bne.n	200015c0 <xQueueGenericSend+0x16c>
200015b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200015ba:	2200      	movs	r2, #0
200015bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200015c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200015c6:	b25b      	sxtb	r3, r3
200015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
200015cc:	d103      	bne.n	200015d6 <xQueueGenericSend+0x182>
200015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200015d0:	2200      	movs	r2, #0
200015d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200015d6:	f002 fa75 	bl	20003ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200015da:	1d3a      	adds	r2, r7, #4
200015dc:	f107 0314 	add.w	r3, r7, #20
200015e0:	4611      	mov	r1, r2
200015e2:	4618      	mov	r0, r3
200015e4:	f001 fa9c 	bl	20002b20 <xTaskCheckForTimeOut>
200015e8:	4603      	mov	r3, r0
200015ea:	2b00      	cmp	r3, #0
200015ec:	d124      	bne.n	20001638 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
200015ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
200015f0:	f000 fcf5 	bl	20001fde <prvIsQueueFull>
200015f4:	4603      	mov	r3, r0
200015f6:	2b00      	cmp	r3, #0
200015f8:	d018      	beq.n	2000162c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
200015fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200015fc:	3310      	adds	r3, #16
200015fe:	687a      	ldr	r2, [r7, #4]
20001600:	4611      	mov	r1, r2
20001602:	4618      	mov	r0, r3
20001604:	f001 f9c2 	bl	2000298c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
20001608:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000160a:	f000 fc80 	bl	20001f0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
2000160e:	f000 fff1 	bl	200025f4 <xTaskResumeAll>
20001612:	4603      	mov	r3, r0
20001614:	2b00      	cmp	r3, #0
20001616:	f47f af7c 	bne.w	20001512 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
2000161a:	4b0c      	ldr	r3, [pc, #48]	; (2000164c <xQueueGenericSend+0x1f8>)
2000161c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001620:	601a      	str	r2, [r3, #0]
20001622:	f3bf 8f4f 	dsb	sy
20001626:	f3bf 8f6f 	isb	sy
2000162a:	e772      	b.n	20001512 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
2000162c:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000162e:	f000 fc6e 	bl	20001f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001632:	f000 ffdf 	bl	200025f4 <xTaskResumeAll>
20001636:	e76c      	b.n	20001512 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
20001638:	6b38      	ldr	r0, [r7, #48]	; 0x30
2000163a:	f000 fc68 	bl	20001f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
2000163e:	f000 ffd9 	bl	200025f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
20001642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
20001644:	4618      	mov	r0, r3
20001646:	3738      	adds	r7, #56	; 0x38
20001648:	46bd      	mov	sp, r7
2000164a:	bd80      	pop	{r7, pc}
2000164c:	e000ed04 	.word	0xe000ed04

20001650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
20001650:	b580      	push	{r7, lr}
20001652:	b090      	sub	sp, #64	; 0x40
20001654:	af00      	add	r7, sp, #0
20001656:	60f8      	str	r0, [r7, #12]
20001658:	60b9      	str	r1, [r7, #8]
2000165a:	607a      	str	r2, [r7, #4]
2000165c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
2000165e:	68fb      	ldr	r3, [r7, #12]
20001660:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
20001662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001664:	2b00      	cmp	r3, #0
20001666:	d10a      	bne.n	2000167e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
20001668:	f04f 0350 	mov.w	r3, #80	; 0x50
2000166c:	f383 8811 	msr	BASEPRI, r3
20001670:	f3bf 8f6f 	isb	sy
20001674:	f3bf 8f4f 	dsb	sy
20001678:	62bb      	str	r3, [r7, #40]	; 0x28
}
2000167a:	bf00      	nop
2000167c:	e7fe      	b.n	2000167c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
2000167e:	68bb      	ldr	r3, [r7, #8]
20001680:	2b00      	cmp	r3, #0
20001682:	d103      	bne.n	2000168c <xQueueGenericSendFromISR+0x3c>
20001684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001688:	2b00      	cmp	r3, #0
2000168a:	d101      	bne.n	20001690 <xQueueGenericSendFromISR+0x40>
2000168c:	2301      	movs	r3, #1
2000168e:	e000      	b.n	20001692 <xQueueGenericSendFromISR+0x42>
20001690:	2300      	movs	r3, #0
20001692:	2b00      	cmp	r3, #0
20001694:	d10a      	bne.n	200016ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
20001696:	f04f 0350 	mov.w	r3, #80	; 0x50
2000169a:	f383 8811 	msr	BASEPRI, r3
2000169e:	f3bf 8f6f 	isb	sy
200016a2:	f3bf 8f4f 	dsb	sy
200016a6:	627b      	str	r3, [r7, #36]	; 0x24
}
200016a8:	bf00      	nop
200016aa:	e7fe      	b.n	200016aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
200016ac:	683b      	ldr	r3, [r7, #0]
200016ae:	2b02      	cmp	r3, #2
200016b0:	d103      	bne.n	200016ba <xQueueGenericSendFromISR+0x6a>
200016b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200016b6:	2b01      	cmp	r3, #1
200016b8:	d101      	bne.n	200016be <xQueueGenericSendFromISR+0x6e>
200016ba:	2301      	movs	r3, #1
200016bc:	e000      	b.n	200016c0 <xQueueGenericSendFromISR+0x70>
200016be:	2300      	movs	r3, #0
200016c0:	2b00      	cmp	r3, #0
200016c2:	d10a      	bne.n	200016da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
200016c4:	f04f 0350 	mov.w	r3, #80	; 0x50
200016c8:	f383 8811 	msr	BASEPRI, r3
200016cc:	f3bf 8f6f 	isb	sy
200016d0:	f3bf 8f4f 	dsb	sy
200016d4:	623b      	str	r3, [r7, #32]
}
200016d6:	bf00      	nop
200016d8:	e7fe      	b.n	200016d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200016da:	f002 faa5 	bl	20003c28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
200016de:	f3ef 8211 	mrs	r2, BASEPRI
200016e2:	f04f 0350 	mov.w	r3, #80	; 0x50
200016e6:	f383 8811 	msr	BASEPRI, r3
200016ea:	f3bf 8f6f 	isb	sy
200016ee:	f3bf 8f4f 	dsb	sy
200016f2:	61fa      	str	r2, [r7, #28]
200016f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
200016f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
200016f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
200016fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200016fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200016fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001702:	429a      	cmp	r2, r3
20001704:	d302      	bcc.n	2000170c <xQueueGenericSendFromISR+0xbc>
20001706:	683b      	ldr	r3, [r7, #0]
20001708:	2b02      	cmp	r3, #2
2000170a:	d12f      	bne.n	2000176c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
2000170c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000170e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
20001716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000171a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
2000171c:	683a      	ldr	r2, [r7, #0]
2000171e:	68b9      	ldr	r1, [r7, #8]
20001720:	6bb8      	ldr	r0, [r7, #56]	; 0x38
20001722:	f000 fb64 	bl	20001dee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001726:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
2000172a:	f1b3 3fff 	cmp.w	r3, #4294967295
2000172e:	d112      	bne.n	20001756 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001734:	2b00      	cmp	r3, #0
20001736:	d016      	beq.n	20001766 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000173a:	3324      	adds	r3, #36	; 0x24
2000173c:	4618      	mov	r0, r3
2000173e:	f001 f975 	bl	20002a2c <xTaskRemoveFromEventList>
20001742:	4603      	mov	r3, r0
20001744:	2b00      	cmp	r3, #0
20001746:	d00e      	beq.n	20001766 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001748:	687b      	ldr	r3, [r7, #4]
2000174a:	2b00      	cmp	r3, #0
2000174c:	d00b      	beq.n	20001766 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
2000174e:	687b      	ldr	r3, [r7, #4]
20001750:	2201      	movs	r2, #1
20001752:	601a      	str	r2, [r3, #0]
20001754:	e007      	b.n	20001766 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001756:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
2000175a:	3301      	adds	r3, #1
2000175c:	b2db      	uxtb	r3, r3
2000175e:	b25a      	sxtb	r2, r3
20001760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20001762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
20001766:	2301      	movs	r3, #1
20001768:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
2000176a:	e001      	b.n	20001770 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
2000176c:	2300      	movs	r3, #0
2000176e:	63fb      	str	r3, [r7, #60]	; 0x3c
20001770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001772:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
20001774:	697b      	ldr	r3, [r7, #20]
20001776:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
2000177a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
2000177c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
2000177e:	4618      	mov	r0, r3
20001780:	3740      	adds	r7, #64	; 0x40
20001782:	46bd      	mov	sp, r7
20001784:	bd80      	pop	{r7, pc}

20001786 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
20001786:	b580      	push	{r7, lr}
20001788:	b08e      	sub	sp, #56	; 0x38
2000178a:	af00      	add	r7, sp, #0
2000178c:	6078      	str	r0, [r7, #4]
2000178e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001790:	687b      	ldr	r3, [r7, #4]
20001792:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
20001794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001796:	2b00      	cmp	r3, #0
20001798:	d10a      	bne.n	200017b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
2000179a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000179e:	f383 8811 	msr	BASEPRI, r3
200017a2:	f3bf 8f6f 	isb	sy
200017a6:	f3bf 8f4f 	dsb	sy
200017aa:	623b      	str	r3, [r7, #32]
}
200017ac:	bf00      	nop
200017ae:	e7fe      	b.n	200017ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
200017b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200017b4:	2b00      	cmp	r3, #0
200017b6:	d00a      	beq.n	200017ce <xQueueGiveFromISR+0x48>
	__asm volatile
200017b8:	f04f 0350 	mov.w	r3, #80	; 0x50
200017bc:	f383 8811 	msr	BASEPRI, r3
200017c0:	f3bf 8f6f 	isb	sy
200017c4:	f3bf 8f4f 	dsb	sy
200017c8:	61fb      	str	r3, [r7, #28]
}
200017ca:	bf00      	nop
200017cc:	e7fe      	b.n	200017cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
200017ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200017d0:	681b      	ldr	r3, [r3, #0]
200017d2:	2b00      	cmp	r3, #0
200017d4:	d103      	bne.n	200017de <xQueueGiveFromISR+0x58>
200017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200017d8:	689b      	ldr	r3, [r3, #8]
200017da:	2b00      	cmp	r3, #0
200017dc:	d101      	bne.n	200017e2 <xQueueGiveFromISR+0x5c>
200017de:	2301      	movs	r3, #1
200017e0:	e000      	b.n	200017e4 <xQueueGiveFromISR+0x5e>
200017e2:	2300      	movs	r3, #0
200017e4:	2b00      	cmp	r3, #0
200017e6:	d10a      	bne.n	200017fe <xQueueGiveFromISR+0x78>
	__asm volatile
200017e8:	f04f 0350 	mov.w	r3, #80	; 0x50
200017ec:	f383 8811 	msr	BASEPRI, r3
200017f0:	f3bf 8f6f 	isb	sy
200017f4:	f3bf 8f4f 	dsb	sy
200017f8:	61bb      	str	r3, [r7, #24]
}
200017fa:	bf00      	nop
200017fc:	e7fe      	b.n	200017fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
200017fe:	f002 fa13 	bl	20003c28 <vPortValidateInterruptPriority>
	__asm volatile
20001802:	f3ef 8211 	mrs	r2, BASEPRI
20001806:	f04f 0350 	mov.w	r3, #80	; 0x50
2000180a:	f383 8811 	msr	BASEPRI, r3
2000180e:	f3bf 8f6f 	isb	sy
20001812:	f3bf 8f4f 	dsb	sy
20001816:	617a      	str	r2, [r7, #20]
20001818:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
2000181a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2000181c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2000181e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001822:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
20001824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001828:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000182a:	429a      	cmp	r2, r3
2000182c:	d22b      	bcs.n	20001886 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
2000182e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20001838:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000183a:	1c5a      	adds	r2, r3, #1
2000183c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000183e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
20001840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
20001844:	f1b3 3fff 	cmp.w	r3, #4294967295
20001848:	d112      	bne.n	20001870 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2000184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000184e:	2b00      	cmp	r3, #0
20001850:	d016      	beq.n	20001880 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001854:	3324      	adds	r3, #36	; 0x24
20001856:	4618      	mov	r0, r3
20001858:	f001 f8e8 	bl	20002a2c <xTaskRemoveFromEventList>
2000185c:	4603      	mov	r3, r0
2000185e:	2b00      	cmp	r3, #0
20001860:	d00e      	beq.n	20001880 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
20001862:	683b      	ldr	r3, [r7, #0]
20001864:	2b00      	cmp	r3, #0
20001866:	d00b      	beq.n	20001880 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
20001868:	683b      	ldr	r3, [r7, #0]
2000186a:	2201      	movs	r2, #1
2000186c:	601a      	str	r2, [r3, #0]
2000186e:	e007      	b.n	20001880 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
20001870:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001874:	3301      	adds	r3, #1
20001876:	b2db      	uxtb	r3, r3
20001878:	b25a      	sxtb	r2, r3
2000187a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000187c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
20001880:	2301      	movs	r3, #1
20001882:	637b      	str	r3, [r7, #52]	; 0x34
20001884:	e001      	b.n	2000188a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
20001886:	2300      	movs	r3, #0
20001888:	637b      	str	r3, [r7, #52]	; 0x34
2000188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000188c:	60fb      	str	r3, [r7, #12]
	__asm volatile
2000188e:	68fb      	ldr	r3, [r7, #12]
20001890:	f383 8811 	msr	BASEPRI, r3
}
20001894:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
20001898:	4618      	mov	r0, r3
2000189a:	3738      	adds	r7, #56	; 0x38
2000189c:	46bd      	mov	sp, r7
2000189e:	bd80      	pop	{r7, pc}

200018a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
200018a0:	b580      	push	{r7, lr}
200018a2:	b08c      	sub	sp, #48	; 0x30
200018a4:	af00      	add	r7, sp, #0
200018a6:	60f8      	str	r0, [r7, #12]
200018a8:	60b9      	str	r1, [r7, #8]
200018aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
200018ac:	2300      	movs	r3, #0
200018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
200018b0:	68fb      	ldr	r3, [r7, #12]
200018b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
200018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
200018b6:	2b00      	cmp	r3, #0
200018b8:	d10a      	bne.n	200018d0 <xQueueReceive+0x30>
	__asm volatile
200018ba:	f04f 0350 	mov.w	r3, #80	; 0x50
200018be:	f383 8811 	msr	BASEPRI, r3
200018c2:	f3bf 8f6f 	isb	sy
200018c6:	f3bf 8f4f 	dsb	sy
200018ca:	623b      	str	r3, [r7, #32]
}
200018cc:	bf00      	nop
200018ce:	e7fe      	b.n	200018ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
200018d0:	68bb      	ldr	r3, [r7, #8]
200018d2:	2b00      	cmp	r3, #0
200018d4:	d103      	bne.n	200018de <xQueueReceive+0x3e>
200018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200018da:	2b00      	cmp	r3, #0
200018dc:	d101      	bne.n	200018e2 <xQueueReceive+0x42>
200018de:	2301      	movs	r3, #1
200018e0:	e000      	b.n	200018e4 <xQueueReceive+0x44>
200018e2:	2300      	movs	r3, #0
200018e4:	2b00      	cmp	r3, #0
200018e6:	d10a      	bne.n	200018fe <xQueueReceive+0x5e>
	__asm volatile
200018e8:	f04f 0350 	mov.w	r3, #80	; 0x50
200018ec:	f383 8811 	msr	BASEPRI, r3
200018f0:	f3bf 8f6f 	isb	sy
200018f4:	f3bf 8f4f 	dsb	sy
200018f8:	61fb      	str	r3, [r7, #28]
}
200018fa:	bf00      	nop
200018fc:	e7fe      	b.n	200018fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
200018fe:	f001 fa57 	bl	20002db0 <xTaskGetSchedulerState>
20001902:	4603      	mov	r3, r0
20001904:	2b00      	cmp	r3, #0
20001906:	d102      	bne.n	2000190e <xQueueReceive+0x6e>
20001908:	687b      	ldr	r3, [r7, #4]
2000190a:	2b00      	cmp	r3, #0
2000190c:	d101      	bne.n	20001912 <xQueueReceive+0x72>
2000190e:	2301      	movs	r3, #1
20001910:	e000      	b.n	20001914 <xQueueReceive+0x74>
20001912:	2300      	movs	r3, #0
20001914:	2b00      	cmp	r3, #0
20001916:	d10a      	bne.n	2000192e <xQueueReceive+0x8e>
	__asm volatile
20001918:	f04f 0350 	mov.w	r3, #80	; 0x50
2000191c:	f383 8811 	msr	BASEPRI, r3
20001920:	f3bf 8f6f 	isb	sy
20001924:	f3bf 8f4f 	dsb	sy
20001928:	61bb      	str	r3, [r7, #24]
}
2000192a:	bf00      	nop
2000192c:	e7fe      	b.n	2000192c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
2000192e:	f002 f899 	bl	20003a64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000193a:	2b00      	cmp	r3, #0
2000193c:	d01f      	beq.n	2000197e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
2000193e:	68b9      	ldr	r1, [r7, #8]
20001940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001942:	f000 fabe 	bl	20001ec2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
20001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001948:	1e5a      	subs	r2, r3, #1
2000194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000194c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2000194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001950:	691b      	ldr	r3, [r3, #16]
20001952:	2b00      	cmp	r3, #0
20001954:	d00f      	beq.n	20001976 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001956:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001958:	3310      	adds	r3, #16
2000195a:	4618      	mov	r0, r3
2000195c:	f001 f866 	bl	20002a2c <xTaskRemoveFromEventList>
20001960:	4603      	mov	r3, r0
20001962:	2b00      	cmp	r3, #0
20001964:	d007      	beq.n	20001976 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
20001966:	4b3d      	ldr	r3, [pc, #244]	; (20001a5c <xQueueReceive+0x1bc>)
20001968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
2000196c:	601a      	str	r2, [r3, #0]
2000196e:	f3bf 8f4f 	dsb	sy
20001972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
20001976:	f002 f8a5 	bl	20003ac4 <vPortExitCritical>
				return pdPASS;
2000197a:	2301      	movs	r3, #1
2000197c:	e069      	b.n	20001a52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
2000197e:	687b      	ldr	r3, [r7, #4]
20001980:	2b00      	cmp	r3, #0
20001982:	d103      	bne.n	2000198c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
20001984:	f002 f89e 	bl	20003ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001988:	2300      	movs	r3, #0
2000198a:	e062      	b.n	20001a52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
2000198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000198e:	2b00      	cmp	r3, #0
20001990:	d106      	bne.n	200019a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001992:	f107 0310 	add.w	r3, r7, #16
20001996:	4618      	mov	r0, r3
20001998:	f001 f8ac 	bl	20002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
2000199c:	2301      	movs	r3, #1
2000199e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
200019a0:	f002 f890 	bl	20003ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
200019a4:	f000 fe18 	bl	200025d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
200019a8:	f002 f85c 	bl	20003a64 <vPortEnterCritical>
200019ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
200019ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200019b2:	b25b      	sxtb	r3, r3
200019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
200019b8:	d103      	bne.n	200019c2 <xQueueReceive+0x122>
200019ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
200019bc:	2200      	movs	r2, #0
200019be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200019c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
200019c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200019c8:	b25b      	sxtb	r3, r3
200019ca:	f1b3 3fff 	cmp.w	r3, #4294967295
200019ce:	d103      	bne.n	200019d8 <xQueueReceive+0x138>
200019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200019d2:	2200      	movs	r2, #0
200019d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200019d8:	f002 f874 	bl	20003ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
200019dc:	1d3a      	adds	r2, r7, #4
200019de:	f107 0310 	add.w	r3, r7, #16
200019e2:	4611      	mov	r1, r2
200019e4:	4618      	mov	r0, r3
200019e6:	f001 f89b 	bl	20002b20 <xTaskCheckForTimeOut>
200019ea:	4603      	mov	r3, r0
200019ec:	2b00      	cmp	r3, #0
200019ee:	d123      	bne.n	20001a38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
200019f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200019f2:	f000 fade 	bl	20001fb2 <prvIsQueueEmpty>
200019f6:	4603      	mov	r3, r0
200019f8:	2b00      	cmp	r3, #0
200019fa:	d017      	beq.n	20001a2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
200019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
200019fe:	3324      	adds	r3, #36	; 0x24
20001a00:	687a      	ldr	r2, [r7, #4]
20001a02:	4611      	mov	r1, r2
20001a04:	4618      	mov	r0, r3
20001a06:	f000 ffc1 	bl	2000298c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001a0c:	f000 fa7f 	bl	20001f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001a10:	f000 fdf0 	bl	200025f4 <xTaskResumeAll>
20001a14:	4603      	mov	r3, r0
20001a16:	2b00      	cmp	r3, #0
20001a18:	d189      	bne.n	2000192e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
20001a1a:	4b10      	ldr	r3, [pc, #64]	; (20001a5c <xQueueReceive+0x1bc>)
20001a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001a20:	601a      	str	r2, [r3, #0]
20001a22:	f3bf 8f4f 	dsb	sy
20001a26:	f3bf 8f6f 	isb	sy
20001a2a:	e780      	b.n	2000192e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
20001a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001a2e:	f000 fa6e 	bl	20001f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001a32:	f000 fddf 	bl	200025f4 <xTaskResumeAll>
20001a36:	e77a      	b.n	2000192e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
20001a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001a3a:	f000 fa68 	bl	20001f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001a3e:	f000 fdd9 	bl	200025f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20001a44:	f000 fab5 	bl	20001fb2 <prvIsQueueEmpty>
20001a48:	4603      	mov	r3, r0
20001a4a:	2b00      	cmp	r3, #0
20001a4c:	f43f af6f 	beq.w	2000192e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
20001a52:	4618      	mov	r0, r3
20001a54:	3730      	adds	r7, #48	; 0x30
20001a56:	46bd      	mov	sp, r7
20001a58:	bd80      	pop	{r7, pc}
20001a5a:	bf00      	nop
20001a5c:	e000ed04 	.word	0xe000ed04

20001a60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
20001a60:	b580      	push	{r7, lr}
20001a62:	b08e      	sub	sp, #56	; 0x38
20001a64:	af00      	add	r7, sp, #0
20001a66:	6078      	str	r0, [r7, #4]
20001a68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
20001a6a:	2300      	movs	r3, #0
20001a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
20001a6e:	687b      	ldr	r3, [r7, #4]
20001a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
20001a72:	2300      	movs	r3, #0
20001a74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
20001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001a78:	2b00      	cmp	r3, #0
20001a7a:	d10a      	bne.n	20001a92 <xQueueSemaphoreTake+0x32>
	__asm volatile
20001a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
20001a80:	f383 8811 	msr	BASEPRI, r3
20001a84:	f3bf 8f6f 	isb	sy
20001a88:	f3bf 8f4f 	dsb	sy
20001a8c:	623b      	str	r3, [r7, #32]
}
20001a8e:	bf00      	nop
20001a90:	e7fe      	b.n	20001a90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
20001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001a96:	2b00      	cmp	r3, #0
20001a98:	d00a      	beq.n	20001ab0 <xQueueSemaphoreTake+0x50>
	__asm volatile
20001a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
20001a9e:	f383 8811 	msr	BASEPRI, r3
20001aa2:	f3bf 8f6f 	isb	sy
20001aa6:	f3bf 8f4f 	dsb	sy
20001aaa:	61fb      	str	r3, [r7, #28]
}
20001aac:	bf00      	nop
20001aae:	e7fe      	b.n	20001aae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
20001ab0:	f001 f97e 	bl	20002db0 <xTaskGetSchedulerState>
20001ab4:	4603      	mov	r3, r0
20001ab6:	2b00      	cmp	r3, #0
20001ab8:	d102      	bne.n	20001ac0 <xQueueSemaphoreTake+0x60>
20001aba:	683b      	ldr	r3, [r7, #0]
20001abc:	2b00      	cmp	r3, #0
20001abe:	d101      	bne.n	20001ac4 <xQueueSemaphoreTake+0x64>
20001ac0:	2301      	movs	r3, #1
20001ac2:	e000      	b.n	20001ac6 <xQueueSemaphoreTake+0x66>
20001ac4:	2300      	movs	r3, #0
20001ac6:	2b00      	cmp	r3, #0
20001ac8:	d10a      	bne.n	20001ae0 <xQueueSemaphoreTake+0x80>
	__asm volatile
20001aca:	f04f 0350 	mov.w	r3, #80	; 0x50
20001ace:	f383 8811 	msr	BASEPRI, r3
20001ad2:	f3bf 8f6f 	isb	sy
20001ad6:	f3bf 8f4f 	dsb	sy
20001ada:	61bb      	str	r3, [r7, #24]
}
20001adc:	bf00      	nop
20001ade:	e7fe      	b.n	20001ade <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
20001ae0:	f001 ffc0 	bl	20003a64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
20001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001ae8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
20001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001aec:	2b00      	cmp	r3, #0
20001aee:	d024      	beq.n	20001b3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
20001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001af2:	1e5a      	subs	r2, r3, #1
20001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001af6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001afa:	681b      	ldr	r3, [r3, #0]
20001afc:	2b00      	cmp	r3, #0
20001afe:	d104      	bne.n	20001b0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
20001b00:	f001 facc 	bl	2000309c <pvTaskIncrementMutexHeldCount>
20001b04:	4602      	mov	r2, r0
20001b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001b08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001b0c:	691b      	ldr	r3, [r3, #16]
20001b0e:	2b00      	cmp	r3, #0
20001b10:	d00f      	beq.n	20001b32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001b14:	3310      	adds	r3, #16
20001b16:	4618      	mov	r0, r3
20001b18:	f000 ff88 	bl	20002a2c <xTaskRemoveFromEventList>
20001b1c:	4603      	mov	r3, r0
20001b1e:	2b00      	cmp	r3, #0
20001b20:	d007      	beq.n	20001b32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
20001b22:	4b54      	ldr	r3, [pc, #336]	; (20001c74 <xQueueSemaphoreTake+0x214>)
20001b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001b28:	601a      	str	r2, [r3, #0]
20001b2a:	f3bf 8f4f 	dsb	sy
20001b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
20001b32:	f001 ffc7 	bl	20003ac4 <vPortExitCritical>
				return pdPASS;
20001b36:	2301      	movs	r3, #1
20001b38:	e097      	b.n	20001c6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
20001b3a:	683b      	ldr	r3, [r7, #0]
20001b3c:	2b00      	cmp	r3, #0
20001b3e:	d111      	bne.n	20001b64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
20001b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001b42:	2b00      	cmp	r3, #0
20001b44:	d00a      	beq.n	20001b5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
20001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
20001b4a:	f383 8811 	msr	BASEPRI, r3
20001b4e:	f3bf 8f6f 	isb	sy
20001b52:	f3bf 8f4f 	dsb	sy
20001b56:	617b      	str	r3, [r7, #20]
}
20001b58:	bf00      	nop
20001b5a:	e7fe      	b.n	20001b5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
20001b5c:	f001 ffb2 	bl	20003ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
20001b60:	2300      	movs	r3, #0
20001b62:	e082      	b.n	20001c6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
20001b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20001b66:	2b00      	cmp	r3, #0
20001b68:	d106      	bne.n	20001b78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
20001b6a:	f107 030c 	add.w	r3, r7, #12
20001b6e:	4618      	mov	r0, r3
20001b70:	f000 ffc0 	bl	20002af4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
20001b74:	2301      	movs	r3, #1
20001b76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
20001b78:	f001 ffa4 	bl	20003ac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
20001b7c:	f000 fd2c 	bl	200025d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
20001b80:	f001 ff70 	bl	20003a64 <vPortEnterCritical>
20001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001b8a:	b25b      	sxtb	r3, r3
20001b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001b90:	d103      	bne.n	20001b9a <xQueueSemaphoreTake+0x13a>
20001b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001b94:	2200      	movs	r2, #0
20001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
20001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001ba0:	b25b      	sxtb	r3, r3
20001ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
20001ba6:	d103      	bne.n	20001bb0 <xQueueSemaphoreTake+0x150>
20001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001baa:	2200      	movs	r2, #0
20001bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
20001bb0:	f001 ff88 	bl	20003ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
20001bb4:	463a      	mov	r2, r7
20001bb6:	f107 030c 	add.w	r3, r7, #12
20001bba:	4611      	mov	r1, r2
20001bbc:	4618      	mov	r0, r3
20001bbe:	f000 ffaf 	bl	20002b20 <xTaskCheckForTimeOut>
20001bc2:	4603      	mov	r3, r0
20001bc4:	2b00      	cmp	r3, #0
20001bc6:	d132      	bne.n	20001c2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001bca:	f000 f9f2 	bl	20001fb2 <prvIsQueueEmpty>
20001bce:	4603      	mov	r3, r0
20001bd0:	2b00      	cmp	r3, #0
20001bd2:	d026      	beq.n	20001c22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001bd6:	681b      	ldr	r3, [r3, #0]
20001bd8:	2b00      	cmp	r3, #0
20001bda:	d109      	bne.n	20001bf0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
20001bdc:	f001 ff42 	bl	20003a64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
20001be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001be2:	689b      	ldr	r3, [r3, #8]
20001be4:	4618      	mov	r0, r3
20001be6:	f001 f901 	bl	20002dec <xTaskPriorityInherit>
20001bea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
20001bec:	f001 ff6a 	bl	20003ac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
20001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001bf2:	3324      	adds	r3, #36	; 0x24
20001bf4:	683a      	ldr	r2, [r7, #0]
20001bf6:	4611      	mov	r1, r2
20001bf8:	4618      	mov	r0, r3
20001bfa:	f000 fec7 	bl	2000298c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
20001bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001c00:	f000 f985 	bl	20001f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
20001c04:	f000 fcf6 	bl	200025f4 <xTaskResumeAll>
20001c08:	4603      	mov	r3, r0
20001c0a:	2b00      	cmp	r3, #0
20001c0c:	f47f af68 	bne.w	20001ae0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
20001c10:	4b18      	ldr	r3, [pc, #96]	; (20001c74 <xQueueSemaphoreTake+0x214>)
20001c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20001c16:	601a      	str	r2, [r3, #0]
20001c18:	f3bf 8f4f 	dsb	sy
20001c1c:	f3bf 8f6f 	isb	sy
20001c20:	e75e      	b.n	20001ae0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
20001c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001c24:	f000 f973 	bl	20001f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
20001c28:	f000 fce4 	bl	200025f4 <xTaskResumeAll>
20001c2c:	e758      	b.n	20001ae0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
20001c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001c30:	f000 f96d 	bl	20001f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
20001c34:	f000 fcde 	bl	200025f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
20001c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001c3a:	f000 f9ba 	bl	20001fb2 <prvIsQueueEmpty>
20001c3e:	4603      	mov	r3, r0
20001c40:	2b00      	cmp	r3, #0
20001c42:	f43f af4d 	beq.w	20001ae0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
20001c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c48:	2b00      	cmp	r3, #0
20001c4a:	d00d      	beq.n	20001c68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
20001c4c:	f001 ff0a 	bl	20003a64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
20001c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
20001c52:	f000 f8b4 	bl	20001dbe <prvGetDisinheritPriorityAfterTimeout>
20001c56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
20001c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001c5a:	689b      	ldr	r3, [r3, #8]
20001c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
20001c5e:	4618      	mov	r0, r3
20001c60:	f001 f99a 	bl	20002f98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
20001c64:	f001 ff2e 	bl	20003ac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
20001c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
20001c6a:	4618      	mov	r0, r3
20001c6c:	3738      	adds	r7, #56	; 0x38
20001c6e:	46bd      	mov	sp, r7
20001c70:	bd80      	pop	{r7, pc}
20001c72:	bf00      	nop
20001c74:	e000ed04 	.word	0xe000ed04

20001c78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
20001c78:	b580      	push	{r7, lr}
20001c7a:	b08e      	sub	sp, #56	; 0x38
20001c7c:	af00      	add	r7, sp, #0
20001c7e:	60f8      	str	r0, [r7, #12]
20001c80:	60b9      	str	r1, [r7, #8]
20001c82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
20001c84:	68fb      	ldr	r3, [r7, #12]
20001c86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
20001c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001c8a:	2b00      	cmp	r3, #0
20001c8c:	d10a      	bne.n	20001ca4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
20001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
20001c92:	f383 8811 	msr	BASEPRI, r3
20001c96:	f3bf 8f6f 	isb	sy
20001c9a:	f3bf 8f4f 	dsb	sy
20001c9e:	623b      	str	r3, [r7, #32]
}
20001ca0:	bf00      	nop
20001ca2:	e7fe      	b.n	20001ca2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
20001ca4:	68bb      	ldr	r3, [r7, #8]
20001ca6:	2b00      	cmp	r3, #0
20001ca8:	d103      	bne.n	20001cb2 <xQueueReceiveFromISR+0x3a>
20001caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001cae:	2b00      	cmp	r3, #0
20001cb0:	d101      	bne.n	20001cb6 <xQueueReceiveFromISR+0x3e>
20001cb2:	2301      	movs	r3, #1
20001cb4:	e000      	b.n	20001cb8 <xQueueReceiveFromISR+0x40>
20001cb6:	2300      	movs	r3, #0
20001cb8:	2b00      	cmp	r3, #0
20001cba:	d10a      	bne.n	20001cd2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
20001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
20001cc0:	f383 8811 	msr	BASEPRI, r3
20001cc4:	f3bf 8f6f 	isb	sy
20001cc8:	f3bf 8f4f 	dsb	sy
20001ccc:	61fb      	str	r3, [r7, #28]
}
20001cce:	bf00      	nop
20001cd0:	e7fe      	b.n	20001cd0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
20001cd2:	f001 ffa9 	bl	20003c28 <vPortValidateInterruptPriority>
	__asm volatile
20001cd6:	f3ef 8211 	mrs	r2, BASEPRI
20001cda:	f04f 0350 	mov.w	r3, #80	; 0x50
20001cde:	f383 8811 	msr	BASEPRI, r3
20001ce2:	f3bf 8f6f 	isb	sy
20001ce6:	f3bf 8f4f 	dsb	sy
20001cea:	61ba      	str	r2, [r7, #24]
20001cec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
20001cee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
20001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001cfa:	2b00      	cmp	r3, #0
20001cfc:	d02f      	beq.n	20001d5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
20001cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
20001d08:	68b9      	ldr	r1, [r7, #8]
20001d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
20001d0c:	f000 f8d9 	bl	20001ec2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
20001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
20001d12:	1e5a      	subs	r2, r3, #1
20001d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
20001d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
20001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001d20:	d112      	bne.n	20001d48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d24:	691b      	ldr	r3, [r3, #16]
20001d26:	2b00      	cmp	r3, #0
20001d28:	d016      	beq.n	20001d58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d2c:	3310      	adds	r3, #16
20001d2e:	4618      	mov	r0, r3
20001d30:	f000 fe7c 	bl	20002a2c <xTaskRemoveFromEventList>
20001d34:	4603      	mov	r3, r0
20001d36:	2b00      	cmp	r3, #0
20001d38:	d00e      	beq.n	20001d58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
20001d3a:	687b      	ldr	r3, [r7, #4]
20001d3c:	2b00      	cmp	r3, #0
20001d3e:	d00b      	beq.n	20001d58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
20001d40:	687b      	ldr	r3, [r7, #4]
20001d42:	2201      	movs	r2, #1
20001d44:	601a      	str	r2, [r3, #0]
20001d46:	e007      	b.n	20001d58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
20001d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20001d4c:	3301      	adds	r3, #1
20001d4e:	b2db      	uxtb	r3, r3
20001d50:	b25a      	sxtb	r2, r3
20001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
20001d58:	2301      	movs	r3, #1
20001d5a:	637b      	str	r3, [r7, #52]	; 0x34
20001d5c:	e001      	b.n	20001d62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
20001d5e:	2300      	movs	r3, #0
20001d60:	637b      	str	r3, [r7, #52]	; 0x34
20001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20001d64:	613b      	str	r3, [r7, #16]
	__asm volatile
20001d66:	693b      	ldr	r3, [r7, #16]
20001d68:	f383 8811 	msr	BASEPRI, r3
}
20001d6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
20001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
20001d70:	4618      	mov	r0, r3
20001d72:	3738      	adds	r7, #56	; 0x38
20001d74:	46bd      	mov	sp, r7
20001d76:	bd80      	pop	{r7, pc}

20001d78 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
20001d78:	b580      	push	{r7, lr}
20001d7a:	b084      	sub	sp, #16
20001d7c:	af00      	add	r7, sp, #0
20001d7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
20001d80:	687b      	ldr	r3, [r7, #4]
20001d82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
20001d84:	68fb      	ldr	r3, [r7, #12]
20001d86:	2b00      	cmp	r3, #0
20001d88:	d10a      	bne.n	20001da0 <vQueueDelete+0x28>
	__asm volatile
20001d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
20001d8e:	f383 8811 	msr	BASEPRI, r3
20001d92:	f3bf 8f6f 	isb	sy
20001d96:	f3bf 8f4f 	dsb	sy
20001d9a:	60bb      	str	r3, [r7, #8]
}
20001d9c:	bf00      	nop
20001d9e:	e7fe      	b.n	20001d9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
20001da0:	68f8      	ldr	r0, [r7, #12]
20001da2:	f000 f95f 	bl	20002064 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
20001da6:	68fb      	ldr	r3, [r7, #12]
20001da8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
20001dac:	2b00      	cmp	r3, #0
20001dae:	d102      	bne.n	20001db6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
20001db0:	68f8      	ldr	r0, [r7, #12]
20001db2:	f002 f845 	bl	20003e40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
20001db6:	bf00      	nop
20001db8:	3710      	adds	r7, #16
20001dba:	46bd      	mov	sp, r7
20001dbc:	bd80      	pop	{r7, pc}

20001dbe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
20001dbe:	b480      	push	{r7}
20001dc0:	b085      	sub	sp, #20
20001dc2:	af00      	add	r7, sp, #0
20001dc4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
20001dc6:	687b      	ldr	r3, [r7, #4]
20001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001dca:	2b00      	cmp	r3, #0
20001dcc:	d006      	beq.n	20001ddc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
20001dce:	687b      	ldr	r3, [r7, #4]
20001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001dd2:	681b      	ldr	r3, [r3, #0]
20001dd4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
20001dd8:	60fb      	str	r3, [r7, #12]
20001dda:	e001      	b.n	20001de0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
20001ddc:	2300      	movs	r3, #0
20001dde:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
20001de0:	68fb      	ldr	r3, [r7, #12]
	}
20001de2:	4618      	mov	r0, r3
20001de4:	3714      	adds	r7, #20
20001de6:	46bd      	mov	sp, r7
20001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dec:	4770      	bx	lr

20001dee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
20001dee:	b580      	push	{r7, lr}
20001df0:	b086      	sub	sp, #24
20001df2:	af00      	add	r7, sp, #0
20001df4:	60f8      	str	r0, [r7, #12]
20001df6:	60b9      	str	r1, [r7, #8]
20001df8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
20001dfa:	2300      	movs	r3, #0
20001dfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
20001dfe:	68fb      	ldr	r3, [r7, #12]
20001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001e02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
20001e04:	68fb      	ldr	r3, [r7, #12]
20001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e08:	2b00      	cmp	r3, #0
20001e0a:	d10d      	bne.n	20001e28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
20001e0c:	68fb      	ldr	r3, [r7, #12]
20001e0e:	681b      	ldr	r3, [r3, #0]
20001e10:	2b00      	cmp	r3, #0
20001e12:	d14d      	bne.n	20001eb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
20001e14:	68fb      	ldr	r3, [r7, #12]
20001e16:	689b      	ldr	r3, [r3, #8]
20001e18:	4618      	mov	r0, r3
20001e1a:	f001 f84f 	bl	20002ebc <xTaskPriorityDisinherit>
20001e1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
20001e20:	68fb      	ldr	r3, [r7, #12]
20001e22:	2200      	movs	r2, #0
20001e24:	609a      	str	r2, [r3, #8]
20001e26:	e043      	b.n	20001eb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
20001e28:	687b      	ldr	r3, [r7, #4]
20001e2a:	2b00      	cmp	r3, #0
20001e2c:	d119      	bne.n	20001e62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
20001e2e:	68fb      	ldr	r3, [r7, #12]
20001e30:	6858      	ldr	r0, [r3, #4]
20001e32:	68fb      	ldr	r3, [r7, #12]
20001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e36:	461a      	mov	r2, r3
20001e38:	68b9      	ldr	r1, [r7, #8]
20001e3a:	f004 faad 	bl	20006398 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20001e3e:	68fb      	ldr	r3, [r7, #12]
20001e40:	685a      	ldr	r2, [r3, #4]
20001e42:	68fb      	ldr	r3, [r7, #12]
20001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e46:	441a      	add	r2, r3
20001e48:	68fb      	ldr	r3, [r7, #12]
20001e4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001e4c:	68fb      	ldr	r3, [r7, #12]
20001e4e:	685a      	ldr	r2, [r3, #4]
20001e50:	68fb      	ldr	r3, [r7, #12]
20001e52:	689b      	ldr	r3, [r3, #8]
20001e54:	429a      	cmp	r2, r3
20001e56:	d32b      	bcc.n	20001eb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
20001e58:	68fb      	ldr	r3, [r7, #12]
20001e5a:	681a      	ldr	r2, [r3, #0]
20001e5c:	68fb      	ldr	r3, [r7, #12]
20001e5e:	605a      	str	r2, [r3, #4]
20001e60:	e026      	b.n	20001eb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
20001e62:	68fb      	ldr	r3, [r7, #12]
20001e64:	68d8      	ldr	r0, [r3, #12]
20001e66:	68fb      	ldr	r3, [r7, #12]
20001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e6a:	461a      	mov	r2, r3
20001e6c:	68b9      	ldr	r1, [r7, #8]
20001e6e:	f004 fa93 	bl	20006398 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
20001e72:	68fb      	ldr	r3, [r7, #12]
20001e74:	68da      	ldr	r2, [r3, #12]
20001e76:	68fb      	ldr	r3, [r7, #12]
20001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e7a:	425b      	negs	r3, r3
20001e7c:	441a      	add	r2, r3
20001e7e:	68fb      	ldr	r3, [r7, #12]
20001e80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
20001e82:	68fb      	ldr	r3, [r7, #12]
20001e84:	68da      	ldr	r2, [r3, #12]
20001e86:	68fb      	ldr	r3, [r7, #12]
20001e88:	681b      	ldr	r3, [r3, #0]
20001e8a:	429a      	cmp	r2, r3
20001e8c:	d207      	bcs.n	20001e9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
20001e8e:	68fb      	ldr	r3, [r7, #12]
20001e90:	689a      	ldr	r2, [r3, #8]
20001e92:	68fb      	ldr	r3, [r7, #12]
20001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001e96:	425b      	negs	r3, r3
20001e98:	441a      	add	r2, r3
20001e9a:	68fb      	ldr	r3, [r7, #12]
20001e9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
20001e9e:	687b      	ldr	r3, [r7, #4]
20001ea0:	2b02      	cmp	r3, #2
20001ea2:	d105      	bne.n	20001eb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
20001ea4:	693b      	ldr	r3, [r7, #16]
20001ea6:	2b00      	cmp	r3, #0
20001ea8:	d002      	beq.n	20001eb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
20001eaa:	693b      	ldr	r3, [r7, #16]
20001eac:	3b01      	subs	r3, #1
20001eae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
20001eb0:	693b      	ldr	r3, [r7, #16]
20001eb2:	1c5a      	adds	r2, r3, #1
20001eb4:	68fb      	ldr	r3, [r7, #12]
20001eb6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
20001eb8:	697b      	ldr	r3, [r7, #20]
}
20001eba:	4618      	mov	r0, r3
20001ebc:	3718      	adds	r7, #24
20001ebe:	46bd      	mov	sp, r7
20001ec0:	bd80      	pop	{r7, pc}

20001ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
20001ec2:	b580      	push	{r7, lr}
20001ec4:	b082      	sub	sp, #8
20001ec6:	af00      	add	r7, sp, #0
20001ec8:	6078      	str	r0, [r7, #4]
20001eca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
20001ecc:	687b      	ldr	r3, [r7, #4]
20001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001ed0:	2b00      	cmp	r3, #0
20001ed2:	d018      	beq.n	20001f06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
20001ed4:	687b      	ldr	r3, [r7, #4]
20001ed6:	68da      	ldr	r2, [r3, #12]
20001ed8:	687b      	ldr	r3, [r7, #4]
20001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001edc:	441a      	add	r2, r3
20001ede:	687b      	ldr	r3, [r7, #4]
20001ee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
20001ee2:	687b      	ldr	r3, [r7, #4]
20001ee4:	68da      	ldr	r2, [r3, #12]
20001ee6:	687b      	ldr	r3, [r7, #4]
20001ee8:	689b      	ldr	r3, [r3, #8]
20001eea:	429a      	cmp	r2, r3
20001eec:	d303      	bcc.n	20001ef6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
20001eee:	687b      	ldr	r3, [r7, #4]
20001ef0:	681a      	ldr	r2, [r3, #0]
20001ef2:	687b      	ldr	r3, [r7, #4]
20001ef4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
20001ef6:	687b      	ldr	r3, [r7, #4]
20001ef8:	68d9      	ldr	r1, [r3, #12]
20001efa:	687b      	ldr	r3, [r7, #4]
20001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001efe:	461a      	mov	r2, r3
20001f00:	6838      	ldr	r0, [r7, #0]
20001f02:	f004 fa49 	bl	20006398 <memcpy>
	}
}
20001f06:	bf00      	nop
20001f08:	3708      	adds	r7, #8
20001f0a:	46bd      	mov	sp, r7
20001f0c:	bd80      	pop	{r7, pc}

20001f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
20001f0e:	b580      	push	{r7, lr}
20001f10:	b084      	sub	sp, #16
20001f12:	af00      	add	r7, sp, #0
20001f14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
20001f16:	f001 fda5 	bl	20003a64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
20001f1a:	687b      	ldr	r3, [r7, #4]
20001f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
20001f20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001f22:	e011      	b.n	20001f48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
20001f24:	687b      	ldr	r3, [r7, #4]
20001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001f28:	2b00      	cmp	r3, #0
20001f2a:	d012      	beq.n	20001f52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
20001f2c:	687b      	ldr	r3, [r7, #4]
20001f2e:	3324      	adds	r3, #36	; 0x24
20001f30:	4618      	mov	r0, r3
20001f32:	f000 fd7b 	bl	20002a2c <xTaskRemoveFromEventList>
20001f36:	4603      	mov	r3, r0
20001f38:	2b00      	cmp	r3, #0
20001f3a:	d001      	beq.n	20001f40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
20001f3c:	f000 fe52 	bl	20002be4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
20001f40:	7bfb      	ldrb	r3, [r7, #15]
20001f42:	3b01      	subs	r3, #1
20001f44:	b2db      	uxtb	r3, r3
20001f46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
20001f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001f4c:	2b00      	cmp	r3, #0
20001f4e:	dce9      	bgt.n	20001f24 <prvUnlockQueue+0x16>
20001f50:	e000      	b.n	20001f54 <prvUnlockQueue+0x46>
					break;
20001f52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
20001f54:	687b      	ldr	r3, [r7, #4]
20001f56:	22ff      	movs	r2, #255	; 0xff
20001f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
20001f5c:	f001 fdb2 	bl	20003ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
20001f60:	f001 fd80 	bl	20003a64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
20001f64:	687b      	ldr	r3, [r7, #4]
20001f66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
20001f6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f6c:	e011      	b.n	20001f92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
20001f6e:	687b      	ldr	r3, [r7, #4]
20001f70:	691b      	ldr	r3, [r3, #16]
20001f72:	2b00      	cmp	r3, #0
20001f74:	d012      	beq.n	20001f9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
20001f76:	687b      	ldr	r3, [r7, #4]
20001f78:	3310      	adds	r3, #16
20001f7a:	4618      	mov	r0, r3
20001f7c:	f000 fd56 	bl	20002a2c <xTaskRemoveFromEventList>
20001f80:	4603      	mov	r3, r0
20001f82:	2b00      	cmp	r3, #0
20001f84:	d001      	beq.n	20001f8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
20001f86:	f000 fe2d 	bl	20002be4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
20001f8a:	7bbb      	ldrb	r3, [r7, #14]
20001f8c:	3b01      	subs	r3, #1
20001f8e:	b2db      	uxtb	r3, r3
20001f90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
20001f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
20001f96:	2b00      	cmp	r3, #0
20001f98:	dce9      	bgt.n	20001f6e <prvUnlockQueue+0x60>
20001f9a:	e000      	b.n	20001f9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
20001f9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
20001f9e:	687b      	ldr	r3, [r7, #4]
20001fa0:	22ff      	movs	r2, #255	; 0xff
20001fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
20001fa6:	f001 fd8d 	bl	20003ac4 <vPortExitCritical>
}
20001faa:	bf00      	nop
20001fac:	3710      	adds	r7, #16
20001fae:	46bd      	mov	sp, r7
20001fb0:	bd80      	pop	{r7, pc}

20001fb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
20001fb2:	b580      	push	{r7, lr}
20001fb4:	b084      	sub	sp, #16
20001fb6:	af00      	add	r7, sp, #0
20001fb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001fba:	f001 fd53 	bl	20003a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
20001fbe:	687b      	ldr	r3, [r7, #4]
20001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20001fc2:	2b00      	cmp	r3, #0
20001fc4:	d102      	bne.n	20001fcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
20001fc6:	2301      	movs	r3, #1
20001fc8:	60fb      	str	r3, [r7, #12]
20001fca:	e001      	b.n	20001fd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
20001fcc:	2300      	movs	r3, #0
20001fce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20001fd0:	f001 fd78 	bl	20003ac4 <vPortExitCritical>

	return xReturn;
20001fd4:	68fb      	ldr	r3, [r7, #12]
}
20001fd6:	4618      	mov	r0, r3
20001fd8:	3710      	adds	r7, #16
20001fda:	46bd      	mov	sp, r7
20001fdc:	bd80      	pop	{r7, pc}

20001fde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
20001fde:	b580      	push	{r7, lr}
20001fe0:	b084      	sub	sp, #16
20001fe2:	af00      	add	r7, sp, #0
20001fe4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
20001fe6:	f001 fd3d 	bl	20003a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
20001fea:	687b      	ldr	r3, [r7, #4]
20001fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20001fee:	687b      	ldr	r3, [r7, #4]
20001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20001ff2:	429a      	cmp	r2, r3
20001ff4:	d102      	bne.n	20001ffc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
20001ff6:	2301      	movs	r3, #1
20001ff8:	60fb      	str	r3, [r7, #12]
20001ffa:	e001      	b.n	20002000 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
20001ffc:	2300      	movs	r3, #0
20001ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
20002000:	f001 fd60 	bl	20003ac4 <vPortExitCritical>

	return xReturn;
20002004:	68fb      	ldr	r3, [r7, #12]
}
20002006:	4618      	mov	r0, r3
20002008:	3710      	adds	r7, #16
2000200a:	46bd      	mov	sp, r7
2000200c:	bd80      	pop	{r7, pc}
	...

20002010 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
20002010:	b480      	push	{r7}
20002012:	b085      	sub	sp, #20
20002014:	af00      	add	r7, sp, #0
20002016:	6078      	str	r0, [r7, #4]
20002018:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2000201a:	2300      	movs	r3, #0
2000201c:	60fb      	str	r3, [r7, #12]
2000201e:	e014      	b.n	2000204a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
20002020:	4a0f      	ldr	r2, [pc, #60]	; (20002060 <vQueueAddToRegistry+0x50>)
20002022:	68fb      	ldr	r3, [r7, #12]
20002024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
20002028:	2b00      	cmp	r3, #0
2000202a:	d10b      	bne.n	20002044 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2000202c:	490c      	ldr	r1, [pc, #48]	; (20002060 <vQueueAddToRegistry+0x50>)
2000202e:	68fb      	ldr	r3, [r7, #12]
20002030:	683a      	ldr	r2, [r7, #0]
20002032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
20002036:	4a0a      	ldr	r2, [pc, #40]	; (20002060 <vQueueAddToRegistry+0x50>)
20002038:	68fb      	ldr	r3, [r7, #12]
2000203a:	00db      	lsls	r3, r3, #3
2000203c:	4413      	add	r3, r2
2000203e:	687a      	ldr	r2, [r7, #4]
20002040:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
20002042:	e006      	b.n	20002052 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
20002044:	68fb      	ldr	r3, [r7, #12]
20002046:	3301      	adds	r3, #1
20002048:	60fb      	str	r3, [r7, #12]
2000204a:	68fb      	ldr	r3, [r7, #12]
2000204c:	2b07      	cmp	r3, #7
2000204e:	d9e7      	bls.n	20002020 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
20002050:	bf00      	nop
20002052:	bf00      	nop
20002054:	3714      	adds	r7, #20
20002056:	46bd      	mov	sp, r7
20002058:	f85d 7b04 	ldr.w	r7, [sp], #4
2000205c:	4770      	bx	lr
2000205e:	bf00      	nop
20002060:	2000ac4c 	.word	0x2000ac4c

20002064 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
20002064:	b480      	push	{r7}
20002066:	b085      	sub	sp, #20
20002068:	af00      	add	r7, sp, #0
2000206a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2000206c:	2300      	movs	r3, #0
2000206e:	60fb      	str	r3, [r7, #12]
20002070:	e016      	b.n	200020a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
20002072:	4a10      	ldr	r2, [pc, #64]	; (200020b4 <vQueueUnregisterQueue+0x50>)
20002074:	68fb      	ldr	r3, [r7, #12]
20002076:	00db      	lsls	r3, r3, #3
20002078:	4413      	add	r3, r2
2000207a:	685b      	ldr	r3, [r3, #4]
2000207c:	687a      	ldr	r2, [r7, #4]
2000207e:	429a      	cmp	r2, r3
20002080:	d10b      	bne.n	2000209a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
20002082:	4a0c      	ldr	r2, [pc, #48]	; (200020b4 <vQueueUnregisterQueue+0x50>)
20002084:	68fb      	ldr	r3, [r7, #12]
20002086:	2100      	movs	r1, #0
20002088:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2000208c:	4a09      	ldr	r2, [pc, #36]	; (200020b4 <vQueueUnregisterQueue+0x50>)
2000208e:	68fb      	ldr	r3, [r7, #12]
20002090:	00db      	lsls	r3, r3, #3
20002092:	4413      	add	r3, r2
20002094:	2200      	movs	r2, #0
20002096:	605a      	str	r2, [r3, #4]
				break;
20002098:	e006      	b.n	200020a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
2000209a:	68fb      	ldr	r3, [r7, #12]
2000209c:	3301      	adds	r3, #1
2000209e:	60fb      	str	r3, [r7, #12]
200020a0:	68fb      	ldr	r3, [r7, #12]
200020a2:	2b07      	cmp	r3, #7
200020a4:	d9e5      	bls.n	20002072 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
200020a6:	bf00      	nop
200020a8:	bf00      	nop
200020aa:	3714      	adds	r7, #20
200020ac:	46bd      	mov	sp, r7
200020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200020b2:	4770      	bx	lr
200020b4:	2000ac4c 	.word	0x2000ac4c

200020b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
200020b8:	b580      	push	{r7, lr}
200020ba:	b086      	sub	sp, #24
200020bc:	af00      	add	r7, sp, #0
200020be:	60f8      	str	r0, [r7, #12]
200020c0:	60b9      	str	r1, [r7, #8]
200020c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
200020c4:	68fb      	ldr	r3, [r7, #12]
200020c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
200020c8:	f001 fccc 	bl	20003a64 <vPortEnterCritical>
200020cc:	697b      	ldr	r3, [r7, #20]
200020ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
200020d2:	b25b      	sxtb	r3, r3
200020d4:	f1b3 3fff 	cmp.w	r3, #4294967295
200020d8:	d103      	bne.n	200020e2 <vQueueWaitForMessageRestricted+0x2a>
200020da:	697b      	ldr	r3, [r7, #20]
200020dc:	2200      	movs	r2, #0
200020de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
200020e2:	697b      	ldr	r3, [r7, #20]
200020e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
200020e8:	b25b      	sxtb	r3, r3
200020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
200020ee:	d103      	bne.n	200020f8 <vQueueWaitForMessageRestricted+0x40>
200020f0:	697b      	ldr	r3, [r7, #20]
200020f2:	2200      	movs	r2, #0
200020f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
200020f8:	f001 fce4 	bl	20003ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
200020fc:	697b      	ldr	r3, [r7, #20]
200020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002100:	2b00      	cmp	r3, #0
20002102:	d106      	bne.n	20002112 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
20002104:	697b      	ldr	r3, [r7, #20]
20002106:	3324      	adds	r3, #36	; 0x24
20002108:	687a      	ldr	r2, [r7, #4]
2000210a:	68b9      	ldr	r1, [r7, #8]
2000210c:	4618      	mov	r0, r3
2000210e:	f000 fc61 	bl	200029d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
20002112:	6978      	ldr	r0, [r7, #20]
20002114:	f7ff fefb 	bl	20001f0e <prvUnlockQueue>
	}
20002118:	bf00      	nop
2000211a:	3718      	adds	r7, #24
2000211c:	46bd      	mov	sp, r7
2000211e:	bd80      	pop	{r7, pc}

20002120 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
20002120:	b580      	push	{r7, lr}
20002122:	b08e      	sub	sp, #56	; 0x38
20002124:	af04      	add	r7, sp, #16
20002126:	60f8      	str	r0, [r7, #12]
20002128:	60b9      	str	r1, [r7, #8]
2000212a:	607a      	str	r2, [r7, #4]
2000212c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
2000212e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002130:	2b00      	cmp	r3, #0
20002132:	d10a      	bne.n	2000214a <xTaskCreateStatic+0x2a>
	__asm volatile
20002134:	f04f 0350 	mov.w	r3, #80	; 0x50
20002138:	f383 8811 	msr	BASEPRI, r3
2000213c:	f3bf 8f6f 	isb	sy
20002140:	f3bf 8f4f 	dsb	sy
20002144:	623b      	str	r3, [r7, #32]
}
20002146:	bf00      	nop
20002148:	e7fe      	b.n	20002148 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
2000214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000214c:	2b00      	cmp	r3, #0
2000214e:	d10a      	bne.n	20002166 <xTaskCreateStatic+0x46>
	__asm volatile
20002150:	f04f 0350 	mov.w	r3, #80	; 0x50
20002154:	f383 8811 	msr	BASEPRI, r3
20002158:	f3bf 8f6f 	isb	sy
2000215c:	f3bf 8f4f 	dsb	sy
20002160:	61fb      	str	r3, [r7, #28]
}
20002162:	bf00      	nop
20002164:	e7fe      	b.n	20002164 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
20002166:	23bc      	movs	r3, #188	; 0xbc
20002168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
2000216a:	693b      	ldr	r3, [r7, #16]
2000216c:	2bbc      	cmp	r3, #188	; 0xbc
2000216e:	d00a      	beq.n	20002186 <xTaskCreateStatic+0x66>
	__asm volatile
20002170:	f04f 0350 	mov.w	r3, #80	; 0x50
20002174:	f383 8811 	msr	BASEPRI, r3
20002178:	f3bf 8f6f 	isb	sy
2000217c:	f3bf 8f4f 	dsb	sy
20002180:	61bb      	str	r3, [r7, #24]
}
20002182:	bf00      	nop
20002184:	e7fe      	b.n	20002184 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
20002186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
20002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000218a:	2b00      	cmp	r3, #0
2000218c:	d01e      	beq.n	200021cc <xTaskCreateStatic+0xac>
2000218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20002190:	2b00      	cmp	r3, #0
20002192:	d01b      	beq.n	200021cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
20002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20002196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
20002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000219a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
2000219c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
2000219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200021a0:	2202      	movs	r2, #2
200021a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
200021a6:	2300      	movs	r3, #0
200021a8:	9303      	str	r3, [sp, #12]
200021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200021ac:	9302      	str	r3, [sp, #8]
200021ae:	f107 0314 	add.w	r3, r7, #20
200021b2:	9301      	str	r3, [sp, #4]
200021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200021b6:	9300      	str	r3, [sp, #0]
200021b8:	683b      	ldr	r3, [r7, #0]
200021ba:	687a      	ldr	r2, [r7, #4]
200021bc:	68b9      	ldr	r1, [r7, #8]
200021be:	68f8      	ldr	r0, [r7, #12]
200021c0:	f000 f850 	bl	20002264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
200021c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
200021c6:	f000 f8f3 	bl	200023b0 <prvAddNewTaskToReadyList>
200021ca:	e001      	b.n	200021d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
200021cc:	2300      	movs	r3, #0
200021ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
200021d0:	697b      	ldr	r3, [r7, #20]
	}
200021d2:	4618      	mov	r0, r3
200021d4:	3728      	adds	r7, #40	; 0x28
200021d6:	46bd      	mov	sp, r7
200021d8:	bd80      	pop	{r7, pc}

200021da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
200021da:	b580      	push	{r7, lr}
200021dc:	b08c      	sub	sp, #48	; 0x30
200021de:	af04      	add	r7, sp, #16
200021e0:	60f8      	str	r0, [r7, #12]
200021e2:	60b9      	str	r1, [r7, #8]
200021e4:	603b      	str	r3, [r7, #0]
200021e6:	4613      	mov	r3, r2
200021e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
200021ea:	88fb      	ldrh	r3, [r7, #6]
200021ec:	009b      	lsls	r3, r3, #2
200021ee:	4618      	mov	r0, r3
200021f0:	f001 fd5a 	bl	20003ca8 <pvPortMalloc>
200021f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
200021f6:	697b      	ldr	r3, [r7, #20]
200021f8:	2b00      	cmp	r3, #0
200021fa:	d00e      	beq.n	2000221a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
200021fc:	20bc      	movs	r0, #188	; 0xbc
200021fe:	f001 fd53 	bl	20003ca8 <pvPortMalloc>
20002202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
20002204:	69fb      	ldr	r3, [r7, #28]
20002206:	2b00      	cmp	r3, #0
20002208:	d003      	beq.n	20002212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
2000220a:	69fb      	ldr	r3, [r7, #28]
2000220c:	697a      	ldr	r2, [r7, #20]
2000220e:	631a      	str	r2, [r3, #48]	; 0x30
20002210:	e005      	b.n	2000221e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
20002212:	6978      	ldr	r0, [r7, #20]
20002214:	f001 fe14 	bl	20003e40 <vPortFree>
20002218:	e001      	b.n	2000221e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
2000221a:	2300      	movs	r3, #0
2000221c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
2000221e:	69fb      	ldr	r3, [r7, #28]
20002220:	2b00      	cmp	r3, #0
20002222:	d017      	beq.n	20002254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
20002224:	69fb      	ldr	r3, [r7, #28]
20002226:	2200      	movs	r2, #0
20002228:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
2000222c:	88fa      	ldrh	r2, [r7, #6]
2000222e:	2300      	movs	r3, #0
20002230:	9303      	str	r3, [sp, #12]
20002232:	69fb      	ldr	r3, [r7, #28]
20002234:	9302      	str	r3, [sp, #8]
20002236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002238:	9301      	str	r3, [sp, #4]
2000223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000223c:	9300      	str	r3, [sp, #0]
2000223e:	683b      	ldr	r3, [r7, #0]
20002240:	68b9      	ldr	r1, [r7, #8]
20002242:	68f8      	ldr	r0, [r7, #12]
20002244:	f000 f80e 	bl	20002264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
20002248:	69f8      	ldr	r0, [r7, #28]
2000224a:	f000 f8b1 	bl	200023b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
2000224e:	2301      	movs	r3, #1
20002250:	61bb      	str	r3, [r7, #24]
20002252:	e002      	b.n	2000225a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
20002254:	f04f 33ff 	mov.w	r3, #4294967295
20002258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
2000225a:	69bb      	ldr	r3, [r7, #24]
	}
2000225c:	4618      	mov	r0, r3
2000225e:	3720      	adds	r7, #32
20002260:	46bd      	mov	sp, r7
20002262:	bd80      	pop	{r7, pc}

20002264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
20002264:	b580      	push	{r7, lr}
20002266:	b088      	sub	sp, #32
20002268:	af00      	add	r7, sp, #0
2000226a:	60f8      	str	r0, [r7, #12]
2000226c:	60b9      	str	r1, [r7, #8]
2000226e:	607a      	str	r2, [r7, #4]
20002270:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
20002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002274:	6b18      	ldr	r0, [r3, #48]	; 0x30
20002276:	687b      	ldr	r3, [r7, #4]
20002278:	009b      	lsls	r3, r3, #2
2000227a:	461a      	mov	r2, r3
2000227c:	21a5      	movs	r1, #165	; 0xa5
2000227e:	f004 f899 	bl	200063b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
20002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20002286:	687b      	ldr	r3, [r7, #4]
20002288:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
2000228c:	3b01      	subs	r3, #1
2000228e:	009b      	lsls	r3, r3, #2
20002290:	4413      	add	r3, r2
20002292:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
20002294:	69bb      	ldr	r3, [r7, #24]
20002296:	f023 0307 	bic.w	r3, r3, #7
2000229a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
2000229c:	69bb      	ldr	r3, [r7, #24]
2000229e:	f003 0307 	and.w	r3, r3, #7
200022a2:	2b00      	cmp	r3, #0
200022a4:	d00a      	beq.n	200022bc <prvInitialiseNewTask+0x58>
	__asm volatile
200022a6:	f04f 0350 	mov.w	r3, #80	; 0x50
200022aa:	f383 8811 	msr	BASEPRI, r3
200022ae:	f3bf 8f6f 	isb	sy
200022b2:	f3bf 8f4f 	dsb	sy
200022b6:	617b      	str	r3, [r7, #20]
}
200022b8:	bf00      	nop
200022ba:	e7fe      	b.n	200022ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
200022bc:	68bb      	ldr	r3, [r7, #8]
200022be:	2b00      	cmp	r3, #0
200022c0:	d01f      	beq.n	20002302 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
200022c2:	2300      	movs	r3, #0
200022c4:	61fb      	str	r3, [r7, #28]
200022c6:	e012      	b.n	200022ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
200022c8:	68ba      	ldr	r2, [r7, #8]
200022ca:	69fb      	ldr	r3, [r7, #28]
200022cc:	4413      	add	r3, r2
200022ce:	7819      	ldrb	r1, [r3, #0]
200022d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200022d2:	69fb      	ldr	r3, [r7, #28]
200022d4:	4413      	add	r3, r2
200022d6:	3334      	adds	r3, #52	; 0x34
200022d8:	460a      	mov	r2, r1
200022da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
200022dc:	68ba      	ldr	r2, [r7, #8]
200022de:	69fb      	ldr	r3, [r7, #28]
200022e0:	4413      	add	r3, r2
200022e2:	781b      	ldrb	r3, [r3, #0]
200022e4:	2b00      	cmp	r3, #0
200022e6:	d006      	beq.n	200022f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
200022e8:	69fb      	ldr	r3, [r7, #28]
200022ea:	3301      	adds	r3, #1
200022ec:	61fb      	str	r3, [r7, #28]
200022ee:	69fb      	ldr	r3, [r7, #28]
200022f0:	2b0f      	cmp	r3, #15
200022f2:	d9e9      	bls.n	200022c8 <prvInitialiseNewTask+0x64>
200022f4:	e000      	b.n	200022f8 <prvInitialiseNewTask+0x94>
			{
				break;
200022f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
200022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
200022fa:	2200      	movs	r2, #0
200022fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
20002300:	e003      	b.n	2000230a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
20002302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002304:	2200      	movs	r2, #0
20002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
2000230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000230c:	2b37      	cmp	r3, #55	; 0x37
2000230e:	d901      	bls.n	20002314 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
20002310:	2337      	movs	r3, #55	; 0x37
20002312:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
20002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002316:	6aba      	ldr	r2, [r7, #40]	; 0x28
20002318:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
2000231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000231c:	6aba      	ldr	r2, [r7, #40]	; 0x28
2000231e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
20002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002322:	2200      	movs	r2, #0
20002324:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
20002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002328:	3304      	adds	r3, #4
2000232a:	4618      	mov	r0, r3
2000232c:	f7fe fe56 	bl	20000fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
20002330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002332:	3318      	adds	r3, #24
20002334:	4618      	mov	r0, r3
20002336:	f7fe fe51 	bl	20000fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
2000233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000233c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000233e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002342:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002348:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
2000234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000234e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
20002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002352:	2200      	movs	r2, #0
20002354:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
20002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000235a:	2200      	movs	r2, #0
2000235c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
20002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002362:	3354      	adds	r3, #84	; 0x54
20002364:	2260      	movs	r2, #96	; 0x60
20002366:	2100      	movs	r1, #0
20002368:	4618      	mov	r0, r3
2000236a:	f004 f823 	bl	200063b4 <memset>
2000236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002370:	4a0c      	ldr	r2, [pc, #48]	; (200023a4 <prvInitialiseNewTask+0x140>)
20002372:	659a      	str	r2, [r3, #88]	; 0x58
20002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002376:	4a0c      	ldr	r2, [pc, #48]	; (200023a8 <prvInitialiseNewTask+0x144>)
20002378:	65da      	str	r2, [r3, #92]	; 0x5c
2000237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000237c:	4a0b      	ldr	r2, [pc, #44]	; (200023ac <prvInitialiseNewTask+0x148>)
2000237e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
20002380:	683a      	ldr	r2, [r7, #0]
20002382:	68f9      	ldr	r1, [r7, #12]
20002384:	69b8      	ldr	r0, [r7, #24]
20002386:	f001 fa3f 	bl	20003808 <pxPortInitialiseStack>
2000238a:	4602      	mov	r2, r0
2000238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2000238e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
20002390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002392:	2b00      	cmp	r3, #0
20002394:	d002      	beq.n	2000239c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
20002396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20002398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000239a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
2000239c:	bf00      	nop
2000239e:	3720      	adds	r7, #32
200023a0:	46bd      	mov	sp, r7
200023a2:	bd80      	pop	{r7, pc}
200023a4:	2000a3ac 	.word	0x2000a3ac
200023a8:	2000a3cc 	.word	0x2000a3cc
200023ac:	2000a38c 	.word	0x2000a38c

200023b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
200023b0:	b580      	push	{r7, lr}
200023b2:	b082      	sub	sp, #8
200023b4:	af00      	add	r7, sp, #0
200023b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
200023b8:	f001 fb54 	bl	20003a64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
200023bc:	4b2d      	ldr	r3, [pc, #180]	; (20002474 <prvAddNewTaskToReadyList+0xc4>)
200023be:	681b      	ldr	r3, [r3, #0]
200023c0:	3301      	adds	r3, #1
200023c2:	4a2c      	ldr	r2, [pc, #176]	; (20002474 <prvAddNewTaskToReadyList+0xc4>)
200023c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
200023c6:	4b2c      	ldr	r3, [pc, #176]	; (20002478 <prvAddNewTaskToReadyList+0xc8>)
200023c8:	681b      	ldr	r3, [r3, #0]
200023ca:	2b00      	cmp	r3, #0
200023cc:	d109      	bne.n	200023e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
200023ce:	4a2a      	ldr	r2, [pc, #168]	; (20002478 <prvAddNewTaskToReadyList+0xc8>)
200023d0:	687b      	ldr	r3, [r7, #4]
200023d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
200023d4:	4b27      	ldr	r3, [pc, #156]	; (20002474 <prvAddNewTaskToReadyList+0xc4>)
200023d6:	681b      	ldr	r3, [r3, #0]
200023d8:	2b01      	cmp	r3, #1
200023da:	d110      	bne.n	200023fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
200023dc:	f000 fc26 	bl	20002c2c <prvInitialiseTaskLists>
200023e0:	e00d      	b.n	200023fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
200023e2:	4b26      	ldr	r3, [pc, #152]	; (2000247c <prvAddNewTaskToReadyList+0xcc>)
200023e4:	681b      	ldr	r3, [r3, #0]
200023e6:	2b00      	cmp	r3, #0
200023e8:	d109      	bne.n	200023fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
200023ea:	4b23      	ldr	r3, [pc, #140]	; (20002478 <prvAddNewTaskToReadyList+0xc8>)
200023ec:	681b      	ldr	r3, [r3, #0]
200023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200023f4:	429a      	cmp	r2, r3
200023f6:	d802      	bhi.n	200023fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
200023f8:	4a1f      	ldr	r2, [pc, #124]	; (20002478 <prvAddNewTaskToReadyList+0xc8>)
200023fa:	687b      	ldr	r3, [r7, #4]
200023fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
200023fe:	4b20      	ldr	r3, [pc, #128]	; (20002480 <prvAddNewTaskToReadyList+0xd0>)
20002400:	681b      	ldr	r3, [r3, #0]
20002402:	3301      	adds	r3, #1
20002404:	4a1e      	ldr	r2, [pc, #120]	; (20002480 <prvAddNewTaskToReadyList+0xd0>)
20002406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
20002408:	4b1d      	ldr	r3, [pc, #116]	; (20002480 <prvAddNewTaskToReadyList+0xd0>)
2000240a:	681a      	ldr	r2, [r3, #0]
2000240c:	687b      	ldr	r3, [r7, #4]
2000240e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
20002410:	687b      	ldr	r3, [r7, #4]
20002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002414:	4b1b      	ldr	r3, [pc, #108]	; (20002484 <prvAddNewTaskToReadyList+0xd4>)
20002416:	681b      	ldr	r3, [r3, #0]
20002418:	429a      	cmp	r2, r3
2000241a:	d903      	bls.n	20002424 <prvAddNewTaskToReadyList+0x74>
2000241c:	687b      	ldr	r3, [r7, #4]
2000241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002420:	4a18      	ldr	r2, [pc, #96]	; (20002484 <prvAddNewTaskToReadyList+0xd4>)
20002422:	6013      	str	r3, [r2, #0]
20002424:	687b      	ldr	r3, [r7, #4]
20002426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002428:	4613      	mov	r3, r2
2000242a:	009b      	lsls	r3, r3, #2
2000242c:	4413      	add	r3, r2
2000242e:	009b      	lsls	r3, r3, #2
20002430:	4a15      	ldr	r2, [pc, #84]	; (20002488 <prvAddNewTaskToReadyList+0xd8>)
20002432:	441a      	add	r2, r3
20002434:	687b      	ldr	r3, [r7, #4]
20002436:	3304      	adds	r3, #4
20002438:	4619      	mov	r1, r3
2000243a:	4610      	mov	r0, r2
2000243c:	f7fe fddb 	bl	20000ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
20002440:	f001 fb40 	bl	20003ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
20002444:	4b0d      	ldr	r3, [pc, #52]	; (2000247c <prvAddNewTaskToReadyList+0xcc>)
20002446:	681b      	ldr	r3, [r3, #0]
20002448:	2b00      	cmp	r3, #0
2000244a:	d00e      	beq.n	2000246a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
2000244c:	4b0a      	ldr	r3, [pc, #40]	; (20002478 <prvAddNewTaskToReadyList+0xc8>)
2000244e:	681b      	ldr	r3, [r3, #0]
20002450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002452:	687b      	ldr	r3, [r7, #4]
20002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002456:	429a      	cmp	r2, r3
20002458:	d207      	bcs.n	2000246a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
2000245a:	4b0c      	ldr	r3, [pc, #48]	; (2000248c <prvAddNewTaskToReadyList+0xdc>)
2000245c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002460:	601a      	str	r2, [r3, #0]
20002462:	f3bf 8f4f 	dsb	sy
20002466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
2000246a:	bf00      	nop
2000246c:	3708      	adds	r7, #8
2000246e:	46bd      	mov	sp, r7
20002470:	bd80      	pop	{r7, pc}
20002472:	bf00      	nop
20002474:	2000b160 	.word	0x2000b160
20002478:	2000ac8c 	.word	0x2000ac8c
2000247c:	2000b16c 	.word	0x2000b16c
20002480:	2000b17c 	.word	0x2000b17c
20002484:	2000b168 	.word	0x2000b168
20002488:	2000ac90 	.word	0x2000ac90
2000248c:	e000ed04 	.word	0xe000ed04

20002490 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
20002490:	b580      	push	{r7, lr}
20002492:	b084      	sub	sp, #16
20002494:	af00      	add	r7, sp, #0
20002496:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
20002498:	2300      	movs	r3, #0
2000249a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
2000249c:	687b      	ldr	r3, [r7, #4]
2000249e:	2b00      	cmp	r3, #0
200024a0:	d017      	beq.n	200024d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
200024a2:	4b13      	ldr	r3, [pc, #76]	; (200024f0 <vTaskDelay+0x60>)
200024a4:	681b      	ldr	r3, [r3, #0]
200024a6:	2b00      	cmp	r3, #0
200024a8:	d00a      	beq.n	200024c0 <vTaskDelay+0x30>
	__asm volatile
200024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
200024ae:	f383 8811 	msr	BASEPRI, r3
200024b2:	f3bf 8f6f 	isb	sy
200024b6:	f3bf 8f4f 	dsb	sy
200024ba:	60bb      	str	r3, [r7, #8]
}
200024bc:	bf00      	nop
200024be:	e7fe      	b.n	200024be <vTaskDelay+0x2e>
			vTaskSuspendAll();
200024c0:	f000 f88a 	bl	200025d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
200024c4:	2100      	movs	r1, #0
200024c6:	6878      	ldr	r0, [r7, #4]
200024c8:	f000 fdfc 	bl	200030c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
200024cc:	f000 f892 	bl	200025f4 <xTaskResumeAll>
200024d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
200024d2:	68fb      	ldr	r3, [r7, #12]
200024d4:	2b00      	cmp	r3, #0
200024d6:	d107      	bne.n	200024e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
200024d8:	4b06      	ldr	r3, [pc, #24]	; (200024f4 <vTaskDelay+0x64>)
200024da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200024de:	601a      	str	r2, [r3, #0]
200024e0:	f3bf 8f4f 	dsb	sy
200024e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
200024e8:	bf00      	nop
200024ea:	3710      	adds	r7, #16
200024ec:	46bd      	mov	sp, r7
200024ee:	bd80      	pop	{r7, pc}
200024f0:	2000b188 	.word	0x2000b188
200024f4:	e000ed04 	.word	0xe000ed04

200024f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
200024f8:	b580      	push	{r7, lr}
200024fa:	b08a      	sub	sp, #40	; 0x28
200024fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
200024fe:	2300      	movs	r3, #0
20002500:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
20002502:	2300      	movs	r3, #0
20002504:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
20002506:	463a      	mov	r2, r7
20002508:	1d39      	adds	r1, r7, #4
2000250a:	f107 0308 	add.w	r3, r7, #8
2000250e:	4618      	mov	r0, r3
20002510:	f7fe fd10 	bl	20000f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
20002514:	6839      	ldr	r1, [r7, #0]
20002516:	687b      	ldr	r3, [r7, #4]
20002518:	68ba      	ldr	r2, [r7, #8]
2000251a:	9202      	str	r2, [sp, #8]
2000251c:	9301      	str	r3, [sp, #4]
2000251e:	2300      	movs	r3, #0
20002520:	9300      	str	r3, [sp, #0]
20002522:	2300      	movs	r3, #0
20002524:	460a      	mov	r2, r1
20002526:	4924      	ldr	r1, [pc, #144]	; (200025b8 <vTaskStartScheduler+0xc0>)
20002528:	4824      	ldr	r0, [pc, #144]	; (200025bc <vTaskStartScheduler+0xc4>)
2000252a:	f7ff fdf9 	bl	20002120 <xTaskCreateStatic>
2000252e:	4603      	mov	r3, r0
20002530:	4a23      	ldr	r2, [pc, #140]	; (200025c0 <vTaskStartScheduler+0xc8>)
20002532:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
20002534:	4b22      	ldr	r3, [pc, #136]	; (200025c0 <vTaskStartScheduler+0xc8>)
20002536:	681b      	ldr	r3, [r3, #0]
20002538:	2b00      	cmp	r3, #0
2000253a:	d002      	beq.n	20002542 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
2000253c:	2301      	movs	r3, #1
2000253e:	617b      	str	r3, [r7, #20]
20002540:	e001      	b.n	20002546 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
20002542:	2300      	movs	r3, #0
20002544:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
20002546:	697b      	ldr	r3, [r7, #20]
20002548:	2b01      	cmp	r3, #1
2000254a:	d102      	bne.n	20002552 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
2000254c:	f000 fe0e 	bl	2000316c <xTimerCreateTimerTask>
20002550:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
20002552:	697b      	ldr	r3, [r7, #20]
20002554:	2b01      	cmp	r3, #1
20002556:	d11b      	bne.n	20002590 <vTaskStartScheduler+0x98>
	__asm volatile
20002558:	f04f 0350 	mov.w	r3, #80	; 0x50
2000255c:	f383 8811 	msr	BASEPRI, r3
20002560:	f3bf 8f6f 	isb	sy
20002564:	f3bf 8f4f 	dsb	sy
20002568:	613b      	str	r3, [r7, #16]
}
2000256a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2000256c:	4b15      	ldr	r3, [pc, #84]	; (200025c4 <vTaskStartScheduler+0xcc>)
2000256e:	681b      	ldr	r3, [r3, #0]
20002570:	3354      	adds	r3, #84	; 0x54
20002572:	4a15      	ldr	r2, [pc, #84]	; (200025c8 <vTaskStartScheduler+0xd0>)
20002574:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
20002576:	4b15      	ldr	r3, [pc, #84]	; (200025cc <vTaskStartScheduler+0xd4>)
20002578:	f04f 32ff 	mov.w	r2, #4294967295
2000257c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
2000257e:	4b14      	ldr	r3, [pc, #80]	; (200025d0 <vTaskStartScheduler+0xd8>)
20002580:	2201      	movs	r2, #1
20002582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
20002584:	4b13      	ldr	r3, [pc, #76]	; (200025d4 <vTaskStartScheduler+0xdc>)
20002586:	2200      	movs	r2, #0
20002588:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
2000258a:	f001 f9c9 	bl	20003920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
2000258e:	e00e      	b.n	200025ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
20002590:	697b      	ldr	r3, [r7, #20]
20002592:	f1b3 3fff 	cmp.w	r3, #4294967295
20002596:	d10a      	bne.n	200025ae <vTaskStartScheduler+0xb6>
	__asm volatile
20002598:	f04f 0350 	mov.w	r3, #80	; 0x50
2000259c:	f383 8811 	msr	BASEPRI, r3
200025a0:	f3bf 8f6f 	isb	sy
200025a4:	f3bf 8f4f 	dsb	sy
200025a8:	60fb      	str	r3, [r7, #12]
}
200025aa:	bf00      	nop
200025ac:	e7fe      	b.n	200025ac <vTaskStartScheduler+0xb4>
}
200025ae:	bf00      	nop
200025b0:	3718      	adds	r7, #24
200025b2:	46bd      	mov	sp, r7
200025b4:	bd80      	pop	{r7, pc}
200025b6:	bf00      	nop
200025b8:	20006560 	.word	0x20006560
200025bc:	20002bfd 	.word	0x20002bfd
200025c0:	2000b184 	.word	0x2000b184
200025c4:	2000ac8c 	.word	0x2000ac8c
200025c8:	2000a450 	.word	0x2000a450
200025cc:	2000b180 	.word	0x2000b180
200025d0:	2000b16c 	.word	0x2000b16c
200025d4:	2000b164 	.word	0x2000b164

200025d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
200025d8:	b480      	push	{r7}
200025da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
200025dc:	4b04      	ldr	r3, [pc, #16]	; (200025f0 <vTaskSuspendAll+0x18>)
200025de:	681b      	ldr	r3, [r3, #0]
200025e0:	3301      	adds	r3, #1
200025e2:	4a03      	ldr	r2, [pc, #12]	; (200025f0 <vTaskSuspendAll+0x18>)
200025e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
200025e6:	bf00      	nop
200025e8:	46bd      	mov	sp, r7
200025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200025ee:	4770      	bx	lr
200025f0:	2000b188 	.word	0x2000b188

200025f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
200025f4:	b580      	push	{r7, lr}
200025f6:	b084      	sub	sp, #16
200025f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
200025fa:	2300      	movs	r3, #0
200025fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
200025fe:	2300      	movs	r3, #0
20002600:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
20002602:	4b42      	ldr	r3, [pc, #264]	; (2000270c <xTaskResumeAll+0x118>)
20002604:	681b      	ldr	r3, [r3, #0]
20002606:	2b00      	cmp	r3, #0
20002608:	d10a      	bne.n	20002620 <xTaskResumeAll+0x2c>
	__asm volatile
2000260a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000260e:	f383 8811 	msr	BASEPRI, r3
20002612:	f3bf 8f6f 	isb	sy
20002616:	f3bf 8f4f 	dsb	sy
2000261a:	603b      	str	r3, [r7, #0]
}
2000261c:	bf00      	nop
2000261e:	e7fe      	b.n	2000261e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
20002620:	f001 fa20 	bl	20003a64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
20002624:	4b39      	ldr	r3, [pc, #228]	; (2000270c <xTaskResumeAll+0x118>)
20002626:	681b      	ldr	r3, [r3, #0]
20002628:	3b01      	subs	r3, #1
2000262a:	4a38      	ldr	r2, [pc, #224]	; (2000270c <xTaskResumeAll+0x118>)
2000262c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000262e:	4b37      	ldr	r3, [pc, #220]	; (2000270c <xTaskResumeAll+0x118>)
20002630:	681b      	ldr	r3, [r3, #0]
20002632:	2b00      	cmp	r3, #0
20002634:	d162      	bne.n	200026fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
20002636:	4b36      	ldr	r3, [pc, #216]	; (20002710 <xTaskResumeAll+0x11c>)
20002638:	681b      	ldr	r3, [r3, #0]
2000263a:	2b00      	cmp	r3, #0
2000263c:	d05e      	beq.n	200026fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2000263e:	e02f      	b.n	200026a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002640:	4b34      	ldr	r3, [pc, #208]	; (20002714 <xTaskResumeAll+0x120>)
20002642:	68db      	ldr	r3, [r3, #12]
20002644:	68db      	ldr	r3, [r3, #12]
20002646:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
20002648:	68fb      	ldr	r3, [r7, #12]
2000264a:	3318      	adds	r3, #24
2000264c:	4618      	mov	r0, r3
2000264e:	f7fe fd2f 	bl	200010b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002652:	68fb      	ldr	r3, [r7, #12]
20002654:	3304      	adds	r3, #4
20002656:	4618      	mov	r0, r3
20002658:	f7fe fd2a 	bl	200010b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
2000265c:	68fb      	ldr	r3, [r7, #12]
2000265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002660:	4b2d      	ldr	r3, [pc, #180]	; (20002718 <xTaskResumeAll+0x124>)
20002662:	681b      	ldr	r3, [r3, #0]
20002664:	429a      	cmp	r2, r3
20002666:	d903      	bls.n	20002670 <xTaskResumeAll+0x7c>
20002668:	68fb      	ldr	r3, [r7, #12]
2000266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000266c:	4a2a      	ldr	r2, [pc, #168]	; (20002718 <xTaskResumeAll+0x124>)
2000266e:	6013      	str	r3, [r2, #0]
20002670:	68fb      	ldr	r3, [r7, #12]
20002672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002674:	4613      	mov	r3, r2
20002676:	009b      	lsls	r3, r3, #2
20002678:	4413      	add	r3, r2
2000267a:	009b      	lsls	r3, r3, #2
2000267c:	4a27      	ldr	r2, [pc, #156]	; (2000271c <xTaskResumeAll+0x128>)
2000267e:	441a      	add	r2, r3
20002680:	68fb      	ldr	r3, [r7, #12]
20002682:	3304      	adds	r3, #4
20002684:	4619      	mov	r1, r3
20002686:	4610      	mov	r0, r2
20002688:	f7fe fcb5 	bl	20000ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2000268c:	68fb      	ldr	r3, [r7, #12]
2000268e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002690:	4b23      	ldr	r3, [pc, #140]	; (20002720 <xTaskResumeAll+0x12c>)
20002692:	681b      	ldr	r3, [r3, #0]
20002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002696:	429a      	cmp	r2, r3
20002698:	d302      	bcc.n	200026a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
2000269a:	4b22      	ldr	r3, [pc, #136]	; (20002724 <xTaskResumeAll+0x130>)
2000269c:	2201      	movs	r2, #1
2000269e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
200026a0:	4b1c      	ldr	r3, [pc, #112]	; (20002714 <xTaskResumeAll+0x120>)
200026a2:	681b      	ldr	r3, [r3, #0]
200026a4:	2b00      	cmp	r3, #0
200026a6:	d1cb      	bne.n	20002640 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
200026a8:	68fb      	ldr	r3, [r7, #12]
200026aa:	2b00      	cmp	r3, #0
200026ac:	d001      	beq.n	200026b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
200026ae:	f000 fb5f 	bl	20002d70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
200026b2:	4b1d      	ldr	r3, [pc, #116]	; (20002728 <xTaskResumeAll+0x134>)
200026b4:	681b      	ldr	r3, [r3, #0]
200026b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
200026b8:	687b      	ldr	r3, [r7, #4]
200026ba:	2b00      	cmp	r3, #0
200026bc:	d010      	beq.n	200026e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
200026be:	f000 f847 	bl	20002750 <xTaskIncrementTick>
200026c2:	4603      	mov	r3, r0
200026c4:	2b00      	cmp	r3, #0
200026c6:	d002      	beq.n	200026ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
200026c8:	4b16      	ldr	r3, [pc, #88]	; (20002724 <xTaskResumeAll+0x130>)
200026ca:	2201      	movs	r2, #1
200026cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
200026ce:	687b      	ldr	r3, [r7, #4]
200026d0:	3b01      	subs	r3, #1
200026d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
200026d4:	687b      	ldr	r3, [r7, #4]
200026d6:	2b00      	cmp	r3, #0
200026d8:	d1f1      	bne.n	200026be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
200026da:	4b13      	ldr	r3, [pc, #76]	; (20002728 <xTaskResumeAll+0x134>)
200026dc:	2200      	movs	r2, #0
200026de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
200026e0:	4b10      	ldr	r3, [pc, #64]	; (20002724 <xTaskResumeAll+0x130>)
200026e2:	681b      	ldr	r3, [r3, #0]
200026e4:	2b00      	cmp	r3, #0
200026e6:	d009      	beq.n	200026fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
200026e8:	2301      	movs	r3, #1
200026ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
200026ec:	4b0f      	ldr	r3, [pc, #60]	; (2000272c <xTaskResumeAll+0x138>)
200026ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200026f2:	601a      	str	r2, [r3, #0]
200026f4:	f3bf 8f4f 	dsb	sy
200026f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
200026fc:	f001 f9e2 	bl	20003ac4 <vPortExitCritical>

	return xAlreadyYielded;
20002700:	68bb      	ldr	r3, [r7, #8]
}
20002702:	4618      	mov	r0, r3
20002704:	3710      	adds	r7, #16
20002706:	46bd      	mov	sp, r7
20002708:	bd80      	pop	{r7, pc}
2000270a:	bf00      	nop
2000270c:	2000b188 	.word	0x2000b188
20002710:	2000b160 	.word	0x2000b160
20002714:	2000b120 	.word	0x2000b120
20002718:	2000b168 	.word	0x2000b168
2000271c:	2000ac90 	.word	0x2000ac90
20002720:	2000ac8c 	.word	0x2000ac8c
20002724:	2000b174 	.word	0x2000b174
20002728:	2000b170 	.word	0x2000b170
2000272c:	e000ed04 	.word	0xe000ed04

20002730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
20002730:	b480      	push	{r7}
20002732:	b083      	sub	sp, #12
20002734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
20002736:	4b05      	ldr	r3, [pc, #20]	; (2000274c <xTaskGetTickCount+0x1c>)
20002738:	681b      	ldr	r3, [r3, #0]
2000273a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
2000273c:	687b      	ldr	r3, [r7, #4]
}
2000273e:	4618      	mov	r0, r3
20002740:	370c      	adds	r7, #12
20002742:	46bd      	mov	sp, r7
20002744:	f85d 7b04 	ldr.w	r7, [sp], #4
20002748:	4770      	bx	lr
2000274a:	bf00      	nop
2000274c:	2000b164 	.word	0x2000b164

20002750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
20002750:	b580      	push	{r7, lr}
20002752:	b086      	sub	sp, #24
20002754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
20002756:	2300      	movs	r3, #0
20002758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2000275a:	4b4f      	ldr	r3, [pc, #316]	; (20002898 <xTaskIncrementTick+0x148>)
2000275c:	681b      	ldr	r3, [r3, #0]
2000275e:	2b00      	cmp	r3, #0
20002760:	f040 808f 	bne.w	20002882 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
20002764:	4b4d      	ldr	r3, [pc, #308]	; (2000289c <xTaskIncrementTick+0x14c>)
20002766:	681b      	ldr	r3, [r3, #0]
20002768:	3301      	adds	r3, #1
2000276a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
2000276c:	4a4b      	ldr	r2, [pc, #300]	; (2000289c <xTaskIncrementTick+0x14c>)
2000276e:	693b      	ldr	r3, [r7, #16]
20002770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
20002772:	693b      	ldr	r3, [r7, #16]
20002774:	2b00      	cmp	r3, #0
20002776:	d120      	bne.n	200027ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
20002778:	4b49      	ldr	r3, [pc, #292]	; (200028a0 <xTaskIncrementTick+0x150>)
2000277a:	681b      	ldr	r3, [r3, #0]
2000277c:	681b      	ldr	r3, [r3, #0]
2000277e:	2b00      	cmp	r3, #0
20002780:	d00a      	beq.n	20002798 <xTaskIncrementTick+0x48>
	__asm volatile
20002782:	f04f 0350 	mov.w	r3, #80	; 0x50
20002786:	f383 8811 	msr	BASEPRI, r3
2000278a:	f3bf 8f6f 	isb	sy
2000278e:	f3bf 8f4f 	dsb	sy
20002792:	603b      	str	r3, [r7, #0]
}
20002794:	bf00      	nop
20002796:	e7fe      	b.n	20002796 <xTaskIncrementTick+0x46>
20002798:	4b41      	ldr	r3, [pc, #260]	; (200028a0 <xTaskIncrementTick+0x150>)
2000279a:	681b      	ldr	r3, [r3, #0]
2000279c:	60fb      	str	r3, [r7, #12]
2000279e:	4b41      	ldr	r3, [pc, #260]	; (200028a4 <xTaskIncrementTick+0x154>)
200027a0:	681b      	ldr	r3, [r3, #0]
200027a2:	4a3f      	ldr	r2, [pc, #252]	; (200028a0 <xTaskIncrementTick+0x150>)
200027a4:	6013      	str	r3, [r2, #0]
200027a6:	4a3f      	ldr	r2, [pc, #252]	; (200028a4 <xTaskIncrementTick+0x154>)
200027a8:	68fb      	ldr	r3, [r7, #12]
200027aa:	6013      	str	r3, [r2, #0]
200027ac:	4b3e      	ldr	r3, [pc, #248]	; (200028a8 <xTaskIncrementTick+0x158>)
200027ae:	681b      	ldr	r3, [r3, #0]
200027b0:	3301      	adds	r3, #1
200027b2:	4a3d      	ldr	r2, [pc, #244]	; (200028a8 <xTaskIncrementTick+0x158>)
200027b4:	6013      	str	r3, [r2, #0]
200027b6:	f000 fadb 	bl	20002d70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
200027ba:	4b3c      	ldr	r3, [pc, #240]	; (200028ac <xTaskIncrementTick+0x15c>)
200027bc:	681b      	ldr	r3, [r3, #0]
200027be:	693a      	ldr	r2, [r7, #16]
200027c0:	429a      	cmp	r2, r3
200027c2:	d349      	bcc.n	20002858 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
200027c4:	4b36      	ldr	r3, [pc, #216]	; (200028a0 <xTaskIncrementTick+0x150>)
200027c6:	681b      	ldr	r3, [r3, #0]
200027c8:	681b      	ldr	r3, [r3, #0]
200027ca:	2b00      	cmp	r3, #0
200027cc:	d104      	bne.n	200027d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
200027ce:	4b37      	ldr	r3, [pc, #220]	; (200028ac <xTaskIncrementTick+0x15c>)
200027d0:	f04f 32ff 	mov.w	r2, #4294967295
200027d4:	601a      	str	r2, [r3, #0]
					break;
200027d6:	e03f      	b.n	20002858 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200027d8:	4b31      	ldr	r3, [pc, #196]	; (200028a0 <xTaskIncrementTick+0x150>)
200027da:	681b      	ldr	r3, [r3, #0]
200027dc:	68db      	ldr	r3, [r3, #12]
200027de:	68db      	ldr	r3, [r3, #12]
200027e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
200027e2:	68bb      	ldr	r3, [r7, #8]
200027e4:	685b      	ldr	r3, [r3, #4]
200027e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
200027e8:	693a      	ldr	r2, [r7, #16]
200027ea:	687b      	ldr	r3, [r7, #4]
200027ec:	429a      	cmp	r2, r3
200027ee:	d203      	bcs.n	200027f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
200027f0:	4a2e      	ldr	r2, [pc, #184]	; (200028ac <xTaskIncrementTick+0x15c>)
200027f2:	687b      	ldr	r3, [r7, #4]
200027f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
200027f6:	e02f      	b.n	20002858 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
200027f8:	68bb      	ldr	r3, [r7, #8]
200027fa:	3304      	adds	r3, #4
200027fc:	4618      	mov	r0, r3
200027fe:	f7fe fc57 	bl	200010b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
20002802:	68bb      	ldr	r3, [r7, #8]
20002804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002806:	2b00      	cmp	r3, #0
20002808:	d004      	beq.n	20002814 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2000280a:	68bb      	ldr	r3, [r7, #8]
2000280c:	3318      	adds	r3, #24
2000280e:	4618      	mov	r0, r3
20002810:	f7fe fc4e 	bl	200010b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
20002814:	68bb      	ldr	r3, [r7, #8]
20002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002818:	4b25      	ldr	r3, [pc, #148]	; (200028b0 <xTaskIncrementTick+0x160>)
2000281a:	681b      	ldr	r3, [r3, #0]
2000281c:	429a      	cmp	r2, r3
2000281e:	d903      	bls.n	20002828 <xTaskIncrementTick+0xd8>
20002820:	68bb      	ldr	r3, [r7, #8]
20002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002824:	4a22      	ldr	r2, [pc, #136]	; (200028b0 <xTaskIncrementTick+0x160>)
20002826:	6013      	str	r3, [r2, #0]
20002828:	68bb      	ldr	r3, [r7, #8]
2000282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000282c:	4613      	mov	r3, r2
2000282e:	009b      	lsls	r3, r3, #2
20002830:	4413      	add	r3, r2
20002832:	009b      	lsls	r3, r3, #2
20002834:	4a1f      	ldr	r2, [pc, #124]	; (200028b4 <xTaskIncrementTick+0x164>)
20002836:	441a      	add	r2, r3
20002838:	68bb      	ldr	r3, [r7, #8]
2000283a:	3304      	adds	r3, #4
2000283c:	4619      	mov	r1, r3
2000283e:	4610      	mov	r0, r2
20002840:	f7fe fbd9 	bl	20000ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
20002844:	68bb      	ldr	r3, [r7, #8]
20002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002848:	4b1b      	ldr	r3, [pc, #108]	; (200028b8 <xTaskIncrementTick+0x168>)
2000284a:	681b      	ldr	r3, [r3, #0]
2000284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000284e:	429a      	cmp	r2, r3
20002850:	d3b8      	bcc.n	200027c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
20002852:	2301      	movs	r3, #1
20002854:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002856:	e7b5      	b.n	200027c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
20002858:	4b17      	ldr	r3, [pc, #92]	; (200028b8 <xTaskIncrementTick+0x168>)
2000285a:	681b      	ldr	r3, [r3, #0]
2000285c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000285e:	4915      	ldr	r1, [pc, #84]	; (200028b4 <xTaskIncrementTick+0x164>)
20002860:	4613      	mov	r3, r2
20002862:	009b      	lsls	r3, r3, #2
20002864:	4413      	add	r3, r2
20002866:	009b      	lsls	r3, r3, #2
20002868:	440b      	add	r3, r1
2000286a:	681b      	ldr	r3, [r3, #0]
2000286c:	2b01      	cmp	r3, #1
2000286e:	d901      	bls.n	20002874 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
20002870:	2301      	movs	r3, #1
20002872:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
20002874:	4b11      	ldr	r3, [pc, #68]	; (200028bc <xTaskIncrementTick+0x16c>)
20002876:	681b      	ldr	r3, [r3, #0]
20002878:	2b00      	cmp	r3, #0
2000287a:	d007      	beq.n	2000288c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
2000287c:	2301      	movs	r3, #1
2000287e:	617b      	str	r3, [r7, #20]
20002880:	e004      	b.n	2000288c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
20002882:	4b0f      	ldr	r3, [pc, #60]	; (200028c0 <xTaskIncrementTick+0x170>)
20002884:	681b      	ldr	r3, [r3, #0]
20002886:	3301      	adds	r3, #1
20002888:	4a0d      	ldr	r2, [pc, #52]	; (200028c0 <xTaskIncrementTick+0x170>)
2000288a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
2000288c:	697b      	ldr	r3, [r7, #20]
}
2000288e:	4618      	mov	r0, r3
20002890:	3718      	adds	r7, #24
20002892:	46bd      	mov	sp, r7
20002894:	bd80      	pop	{r7, pc}
20002896:	bf00      	nop
20002898:	2000b188 	.word	0x2000b188
2000289c:	2000b164 	.word	0x2000b164
200028a0:	2000b118 	.word	0x2000b118
200028a4:	2000b11c 	.word	0x2000b11c
200028a8:	2000b178 	.word	0x2000b178
200028ac:	2000b180 	.word	0x2000b180
200028b0:	2000b168 	.word	0x2000b168
200028b4:	2000ac90 	.word	0x2000ac90
200028b8:	2000ac8c 	.word	0x2000ac8c
200028bc:	2000b174 	.word	0x2000b174
200028c0:	2000b170 	.word	0x2000b170

200028c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
200028c4:	b480      	push	{r7}
200028c6:	b085      	sub	sp, #20
200028c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
200028ca:	4b2a      	ldr	r3, [pc, #168]	; (20002974 <vTaskSwitchContext+0xb0>)
200028cc:	681b      	ldr	r3, [r3, #0]
200028ce:	2b00      	cmp	r3, #0
200028d0:	d003      	beq.n	200028da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
200028d2:	4b29      	ldr	r3, [pc, #164]	; (20002978 <vTaskSwitchContext+0xb4>)
200028d4:	2201      	movs	r2, #1
200028d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
200028d8:	e046      	b.n	20002968 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
200028da:	4b27      	ldr	r3, [pc, #156]	; (20002978 <vTaskSwitchContext+0xb4>)
200028dc:	2200      	movs	r2, #0
200028de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200028e0:	4b26      	ldr	r3, [pc, #152]	; (2000297c <vTaskSwitchContext+0xb8>)
200028e2:	681b      	ldr	r3, [r3, #0]
200028e4:	60fb      	str	r3, [r7, #12]
200028e6:	e010      	b.n	2000290a <vTaskSwitchContext+0x46>
200028e8:	68fb      	ldr	r3, [r7, #12]
200028ea:	2b00      	cmp	r3, #0
200028ec:	d10a      	bne.n	20002904 <vTaskSwitchContext+0x40>
	__asm volatile
200028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
200028f2:	f383 8811 	msr	BASEPRI, r3
200028f6:	f3bf 8f6f 	isb	sy
200028fa:	f3bf 8f4f 	dsb	sy
200028fe:	607b      	str	r3, [r7, #4]
}
20002900:	bf00      	nop
20002902:	e7fe      	b.n	20002902 <vTaskSwitchContext+0x3e>
20002904:	68fb      	ldr	r3, [r7, #12]
20002906:	3b01      	subs	r3, #1
20002908:	60fb      	str	r3, [r7, #12]
2000290a:	491d      	ldr	r1, [pc, #116]	; (20002980 <vTaskSwitchContext+0xbc>)
2000290c:	68fa      	ldr	r2, [r7, #12]
2000290e:	4613      	mov	r3, r2
20002910:	009b      	lsls	r3, r3, #2
20002912:	4413      	add	r3, r2
20002914:	009b      	lsls	r3, r3, #2
20002916:	440b      	add	r3, r1
20002918:	681b      	ldr	r3, [r3, #0]
2000291a:	2b00      	cmp	r3, #0
2000291c:	d0e4      	beq.n	200028e8 <vTaskSwitchContext+0x24>
2000291e:	68fa      	ldr	r2, [r7, #12]
20002920:	4613      	mov	r3, r2
20002922:	009b      	lsls	r3, r3, #2
20002924:	4413      	add	r3, r2
20002926:	009b      	lsls	r3, r3, #2
20002928:	4a15      	ldr	r2, [pc, #84]	; (20002980 <vTaskSwitchContext+0xbc>)
2000292a:	4413      	add	r3, r2
2000292c:	60bb      	str	r3, [r7, #8]
2000292e:	68bb      	ldr	r3, [r7, #8]
20002930:	685b      	ldr	r3, [r3, #4]
20002932:	685a      	ldr	r2, [r3, #4]
20002934:	68bb      	ldr	r3, [r7, #8]
20002936:	605a      	str	r2, [r3, #4]
20002938:	68bb      	ldr	r3, [r7, #8]
2000293a:	685a      	ldr	r2, [r3, #4]
2000293c:	68bb      	ldr	r3, [r7, #8]
2000293e:	3308      	adds	r3, #8
20002940:	429a      	cmp	r2, r3
20002942:	d104      	bne.n	2000294e <vTaskSwitchContext+0x8a>
20002944:	68bb      	ldr	r3, [r7, #8]
20002946:	685b      	ldr	r3, [r3, #4]
20002948:	685a      	ldr	r2, [r3, #4]
2000294a:	68bb      	ldr	r3, [r7, #8]
2000294c:	605a      	str	r2, [r3, #4]
2000294e:	68bb      	ldr	r3, [r7, #8]
20002950:	685b      	ldr	r3, [r3, #4]
20002952:	68db      	ldr	r3, [r3, #12]
20002954:	4a0b      	ldr	r2, [pc, #44]	; (20002984 <vTaskSwitchContext+0xc0>)
20002956:	6013      	str	r3, [r2, #0]
20002958:	4a08      	ldr	r2, [pc, #32]	; (2000297c <vTaskSwitchContext+0xb8>)
2000295a:	68fb      	ldr	r3, [r7, #12]
2000295c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2000295e:	4b09      	ldr	r3, [pc, #36]	; (20002984 <vTaskSwitchContext+0xc0>)
20002960:	681b      	ldr	r3, [r3, #0]
20002962:	3354      	adds	r3, #84	; 0x54
20002964:	4a08      	ldr	r2, [pc, #32]	; (20002988 <vTaskSwitchContext+0xc4>)
20002966:	6013      	str	r3, [r2, #0]
}
20002968:	bf00      	nop
2000296a:	3714      	adds	r7, #20
2000296c:	46bd      	mov	sp, r7
2000296e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002972:	4770      	bx	lr
20002974:	2000b188 	.word	0x2000b188
20002978:	2000b174 	.word	0x2000b174
2000297c:	2000b168 	.word	0x2000b168
20002980:	2000ac90 	.word	0x2000ac90
20002984:	2000ac8c 	.word	0x2000ac8c
20002988:	2000a450 	.word	0x2000a450

2000298c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
2000298c:	b580      	push	{r7, lr}
2000298e:	b084      	sub	sp, #16
20002990:	af00      	add	r7, sp, #0
20002992:	6078      	str	r0, [r7, #4]
20002994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
20002996:	687b      	ldr	r3, [r7, #4]
20002998:	2b00      	cmp	r3, #0
2000299a:	d10a      	bne.n	200029b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
2000299c:	f04f 0350 	mov.w	r3, #80	; 0x50
200029a0:	f383 8811 	msr	BASEPRI, r3
200029a4:	f3bf 8f6f 	isb	sy
200029a8:	f3bf 8f4f 	dsb	sy
200029ac:	60fb      	str	r3, [r7, #12]
}
200029ae:	bf00      	nop
200029b0:	e7fe      	b.n	200029b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
200029b2:	4b07      	ldr	r3, [pc, #28]	; (200029d0 <vTaskPlaceOnEventList+0x44>)
200029b4:	681b      	ldr	r3, [r3, #0]
200029b6:	3318      	adds	r3, #24
200029b8:	4619      	mov	r1, r3
200029ba:	6878      	ldr	r0, [r7, #4]
200029bc:	f7fe fb3f 	bl	2000103e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
200029c0:	2101      	movs	r1, #1
200029c2:	6838      	ldr	r0, [r7, #0]
200029c4:	f000 fb7e 	bl	200030c4 <prvAddCurrentTaskToDelayedList>
}
200029c8:	bf00      	nop
200029ca:	3710      	adds	r7, #16
200029cc:	46bd      	mov	sp, r7
200029ce:	bd80      	pop	{r7, pc}
200029d0:	2000ac8c 	.word	0x2000ac8c

200029d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
200029d4:	b580      	push	{r7, lr}
200029d6:	b086      	sub	sp, #24
200029d8:	af00      	add	r7, sp, #0
200029da:	60f8      	str	r0, [r7, #12]
200029dc:	60b9      	str	r1, [r7, #8]
200029de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
200029e0:	68fb      	ldr	r3, [r7, #12]
200029e2:	2b00      	cmp	r3, #0
200029e4:	d10a      	bne.n	200029fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
200029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
200029ea:	f383 8811 	msr	BASEPRI, r3
200029ee:	f3bf 8f6f 	isb	sy
200029f2:	f3bf 8f4f 	dsb	sy
200029f6:	617b      	str	r3, [r7, #20]
}
200029f8:	bf00      	nop
200029fa:	e7fe      	b.n	200029fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
200029fc:	4b0a      	ldr	r3, [pc, #40]	; (20002a28 <vTaskPlaceOnEventListRestricted+0x54>)
200029fe:	681b      	ldr	r3, [r3, #0]
20002a00:	3318      	adds	r3, #24
20002a02:	4619      	mov	r1, r3
20002a04:	68f8      	ldr	r0, [r7, #12]
20002a06:	f7fe faf6 	bl	20000ff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
20002a0a:	687b      	ldr	r3, [r7, #4]
20002a0c:	2b00      	cmp	r3, #0
20002a0e:	d002      	beq.n	20002a16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
20002a10:	f04f 33ff 	mov.w	r3, #4294967295
20002a14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
20002a16:	6879      	ldr	r1, [r7, #4]
20002a18:	68b8      	ldr	r0, [r7, #8]
20002a1a:	f000 fb53 	bl	200030c4 <prvAddCurrentTaskToDelayedList>
	}
20002a1e:	bf00      	nop
20002a20:	3718      	adds	r7, #24
20002a22:	46bd      	mov	sp, r7
20002a24:	bd80      	pop	{r7, pc}
20002a26:	bf00      	nop
20002a28:	2000ac8c 	.word	0x2000ac8c

20002a2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
20002a2c:	b580      	push	{r7, lr}
20002a2e:	b086      	sub	sp, #24
20002a30:	af00      	add	r7, sp, #0
20002a32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002a34:	687b      	ldr	r3, [r7, #4]
20002a36:	68db      	ldr	r3, [r3, #12]
20002a38:	68db      	ldr	r3, [r3, #12]
20002a3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
20002a3c:	693b      	ldr	r3, [r7, #16]
20002a3e:	2b00      	cmp	r3, #0
20002a40:	d10a      	bne.n	20002a58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
20002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
20002a46:	f383 8811 	msr	BASEPRI, r3
20002a4a:	f3bf 8f6f 	isb	sy
20002a4e:	f3bf 8f4f 	dsb	sy
20002a52:	60fb      	str	r3, [r7, #12]
}
20002a54:	bf00      	nop
20002a56:	e7fe      	b.n	20002a56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
20002a58:	693b      	ldr	r3, [r7, #16]
20002a5a:	3318      	adds	r3, #24
20002a5c:	4618      	mov	r0, r3
20002a5e:	f7fe fb27 	bl	200010b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002a62:	4b1e      	ldr	r3, [pc, #120]	; (20002adc <xTaskRemoveFromEventList+0xb0>)
20002a64:	681b      	ldr	r3, [r3, #0]
20002a66:	2b00      	cmp	r3, #0
20002a68:	d11d      	bne.n	20002aa6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
20002a6a:	693b      	ldr	r3, [r7, #16]
20002a6c:	3304      	adds	r3, #4
20002a6e:	4618      	mov	r0, r3
20002a70:	f7fe fb1e 	bl	200010b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
20002a74:	693b      	ldr	r3, [r7, #16]
20002a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a78:	4b19      	ldr	r3, [pc, #100]	; (20002ae0 <xTaskRemoveFromEventList+0xb4>)
20002a7a:	681b      	ldr	r3, [r3, #0]
20002a7c:	429a      	cmp	r2, r3
20002a7e:	d903      	bls.n	20002a88 <xTaskRemoveFromEventList+0x5c>
20002a80:	693b      	ldr	r3, [r7, #16]
20002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002a84:	4a16      	ldr	r2, [pc, #88]	; (20002ae0 <xTaskRemoveFromEventList+0xb4>)
20002a86:	6013      	str	r3, [r2, #0]
20002a88:	693b      	ldr	r3, [r7, #16]
20002a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002a8c:	4613      	mov	r3, r2
20002a8e:	009b      	lsls	r3, r3, #2
20002a90:	4413      	add	r3, r2
20002a92:	009b      	lsls	r3, r3, #2
20002a94:	4a13      	ldr	r2, [pc, #76]	; (20002ae4 <xTaskRemoveFromEventList+0xb8>)
20002a96:	441a      	add	r2, r3
20002a98:	693b      	ldr	r3, [r7, #16]
20002a9a:	3304      	adds	r3, #4
20002a9c:	4619      	mov	r1, r3
20002a9e:	4610      	mov	r0, r2
20002aa0:	f7fe faa9 	bl	20000ff6 <vListInsertEnd>
20002aa4:	e005      	b.n	20002ab2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
20002aa6:	693b      	ldr	r3, [r7, #16]
20002aa8:	3318      	adds	r3, #24
20002aaa:	4619      	mov	r1, r3
20002aac:	480e      	ldr	r0, [pc, #56]	; (20002ae8 <xTaskRemoveFromEventList+0xbc>)
20002aae:	f7fe faa2 	bl	20000ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
20002ab2:	693b      	ldr	r3, [r7, #16]
20002ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002ab6:	4b0d      	ldr	r3, [pc, #52]	; (20002aec <xTaskRemoveFromEventList+0xc0>)
20002ab8:	681b      	ldr	r3, [r3, #0]
20002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002abc:	429a      	cmp	r2, r3
20002abe:	d905      	bls.n	20002acc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
20002ac0:	2301      	movs	r3, #1
20002ac2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
20002ac4:	4b0a      	ldr	r3, [pc, #40]	; (20002af0 <xTaskRemoveFromEventList+0xc4>)
20002ac6:	2201      	movs	r2, #1
20002ac8:	601a      	str	r2, [r3, #0]
20002aca:	e001      	b.n	20002ad0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
20002acc:	2300      	movs	r3, #0
20002ace:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
20002ad0:	697b      	ldr	r3, [r7, #20]
}
20002ad2:	4618      	mov	r0, r3
20002ad4:	3718      	adds	r7, #24
20002ad6:	46bd      	mov	sp, r7
20002ad8:	bd80      	pop	{r7, pc}
20002ada:	bf00      	nop
20002adc:	2000b188 	.word	0x2000b188
20002ae0:	2000b168 	.word	0x2000b168
20002ae4:	2000ac90 	.word	0x2000ac90
20002ae8:	2000b120 	.word	0x2000b120
20002aec:	2000ac8c 	.word	0x2000ac8c
20002af0:	2000b174 	.word	0x2000b174

20002af4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
20002af4:	b480      	push	{r7}
20002af6:	b083      	sub	sp, #12
20002af8:	af00      	add	r7, sp, #0
20002afa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
20002afc:	4b06      	ldr	r3, [pc, #24]	; (20002b18 <vTaskInternalSetTimeOutState+0x24>)
20002afe:	681a      	ldr	r2, [r3, #0]
20002b00:	687b      	ldr	r3, [r7, #4]
20002b02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
20002b04:	4b05      	ldr	r3, [pc, #20]	; (20002b1c <vTaskInternalSetTimeOutState+0x28>)
20002b06:	681a      	ldr	r2, [r3, #0]
20002b08:	687b      	ldr	r3, [r7, #4]
20002b0a:	605a      	str	r2, [r3, #4]
}
20002b0c:	bf00      	nop
20002b0e:	370c      	adds	r7, #12
20002b10:	46bd      	mov	sp, r7
20002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
20002b16:	4770      	bx	lr
20002b18:	2000b178 	.word	0x2000b178
20002b1c:	2000b164 	.word	0x2000b164

20002b20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
20002b20:	b580      	push	{r7, lr}
20002b22:	b088      	sub	sp, #32
20002b24:	af00      	add	r7, sp, #0
20002b26:	6078      	str	r0, [r7, #4]
20002b28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
20002b2a:	687b      	ldr	r3, [r7, #4]
20002b2c:	2b00      	cmp	r3, #0
20002b2e:	d10a      	bne.n	20002b46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
20002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
20002b34:	f383 8811 	msr	BASEPRI, r3
20002b38:	f3bf 8f6f 	isb	sy
20002b3c:	f3bf 8f4f 	dsb	sy
20002b40:	613b      	str	r3, [r7, #16]
}
20002b42:	bf00      	nop
20002b44:	e7fe      	b.n	20002b44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
20002b46:	683b      	ldr	r3, [r7, #0]
20002b48:	2b00      	cmp	r3, #0
20002b4a:	d10a      	bne.n	20002b62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
20002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
20002b50:	f383 8811 	msr	BASEPRI, r3
20002b54:	f3bf 8f6f 	isb	sy
20002b58:	f3bf 8f4f 	dsb	sy
20002b5c:	60fb      	str	r3, [r7, #12]
}
20002b5e:	bf00      	nop
20002b60:	e7fe      	b.n	20002b60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
20002b62:	f000 ff7f 	bl	20003a64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
20002b66:	4b1d      	ldr	r3, [pc, #116]	; (20002bdc <xTaskCheckForTimeOut+0xbc>)
20002b68:	681b      	ldr	r3, [r3, #0]
20002b6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
20002b6c:	687b      	ldr	r3, [r7, #4]
20002b6e:	685b      	ldr	r3, [r3, #4]
20002b70:	69ba      	ldr	r2, [r7, #24]
20002b72:	1ad3      	subs	r3, r2, r3
20002b74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
20002b76:	683b      	ldr	r3, [r7, #0]
20002b78:	681b      	ldr	r3, [r3, #0]
20002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
20002b7e:	d102      	bne.n	20002b86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
20002b80:	2300      	movs	r3, #0
20002b82:	61fb      	str	r3, [r7, #28]
20002b84:	e023      	b.n	20002bce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
20002b86:	687b      	ldr	r3, [r7, #4]
20002b88:	681a      	ldr	r2, [r3, #0]
20002b8a:	4b15      	ldr	r3, [pc, #84]	; (20002be0 <xTaskCheckForTimeOut+0xc0>)
20002b8c:	681b      	ldr	r3, [r3, #0]
20002b8e:	429a      	cmp	r2, r3
20002b90:	d007      	beq.n	20002ba2 <xTaskCheckForTimeOut+0x82>
20002b92:	687b      	ldr	r3, [r7, #4]
20002b94:	685b      	ldr	r3, [r3, #4]
20002b96:	69ba      	ldr	r2, [r7, #24]
20002b98:	429a      	cmp	r2, r3
20002b9a:	d302      	bcc.n	20002ba2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
20002b9c:	2301      	movs	r3, #1
20002b9e:	61fb      	str	r3, [r7, #28]
20002ba0:	e015      	b.n	20002bce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
20002ba2:	683b      	ldr	r3, [r7, #0]
20002ba4:	681b      	ldr	r3, [r3, #0]
20002ba6:	697a      	ldr	r2, [r7, #20]
20002ba8:	429a      	cmp	r2, r3
20002baa:	d20b      	bcs.n	20002bc4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
20002bac:	683b      	ldr	r3, [r7, #0]
20002bae:	681a      	ldr	r2, [r3, #0]
20002bb0:	697b      	ldr	r3, [r7, #20]
20002bb2:	1ad2      	subs	r2, r2, r3
20002bb4:	683b      	ldr	r3, [r7, #0]
20002bb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
20002bb8:	6878      	ldr	r0, [r7, #4]
20002bba:	f7ff ff9b 	bl	20002af4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
20002bbe:	2300      	movs	r3, #0
20002bc0:	61fb      	str	r3, [r7, #28]
20002bc2:	e004      	b.n	20002bce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
20002bc4:	683b      	ldr	r3, [r7, #0]
20002bc6:	2200      	movs	r2, #0
20002bc8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
20002bca:	2301      	movs	r3, #1
20002bcc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
20002bce:	f000 ff79 	bl	20003ac4 <vPortExitCritical>

	return xReturn;
20002bd2:	69fb      	ldr	r3, [r7, #28]
}
20002bd4:	4618      	mov	r0, r3
20002bd6:	3720      	adds	r7, #32
20002bd8:	46bd      	mov	sp, r7
20002bda:	bd80      	pop	{r7, pc}
20002bdc:	2000b164 	.word	0x2000b164
20002be0:	2000b178 	.word	0x2000b178

20002be4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
20002be4:	b480      	push	{r7}
20002be6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
20002be8:	4b03      	ldr	r3, [pc, #12]	; (20002bf8 <vTaskMissedYield+0x14>)
20002bea:	2201      	movs	r2, #1
20002bec:	601a      	str	r2, [r3, #0]
}
20002bee:	bf00      	nop
20002bf0:	46bd      	mov	sp, r7
20002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
20002bf6:	4770      	bx	lr
20002bf8:	2000b174 	.word	0x2000b174

20002bfc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
20002bfc:	b580      	push	{r7, lr}
20002bfe:	b082      	sub	sp, #8
20002c00:	af00      	add	r7, sp, #0
20002c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
20002c04:	f000 f852 	bl	20002cac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
20002c08:	4b06      	ldr	r3, [pc, #24]	; (20002c24 <prvIdleTask+0x28>)
20002c0a:	681b      	ldr	r3, [r3, #0]
20002c0c:	2b01      	cmp	r3, #1
20002c0e:	d9f9      	bls.n	20002c04 <prvIdleTask+0x8>
			{
				taskYIELD();
20002c10:	4b05      	ldr	r3, [pc, #20]	; (20002c28 <prvIdleTask+0x2c>)
20002c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20002c16:	601a      	str	r2, [r3, #0]
20002c18:	f3bf 8f4f 	dsb	sy
20002c1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
20002c20:	e7f0      	b.n	20002c04 <prvIdleTask+0x8>
20002c22:	bf00      	nop
20002c24:	2000ac90 	.word	0x2000ac90
20002c28:	e000ed04 	.word	0xe000ed04

20002c2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
20002c2c:	b580      	push	{r7, lr}
20002c2e:	b082      	sub	sp, #8
20002c30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002c32:	2300      	movs	r3, #0
20002c34:	607b      	str	r3, [r7, #4]
20002c36:	e00c      	b.n	20002c52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
20002c38:	687a      	ldr	r2, [r7, #4]
20002c3a:	4613      	mov	r3, r2
20002c3c:	009b      	lsls	r3, r3, #2
20002c3e:	4413      	add	r3, r2
20002c40:	009b      	lsls	r3, r3, #2
20002c42:	4a12      	ldr	r2, [pc, #72]	; (20002c8c <prvInitialiseTaskLists+0x60>)
20002c44:	4413      	add	r3, r2
20002c46:	4618      	mov	r0, r3
20002c48:	f7fe f9a8 	bl	20000f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
20002c4c:	687b      	ldr	r3, [r7, #4]
20002c4e:	3301      	adds	r3, #1
20002c50:	607b      	str	r3, [r7, #4]
20002c52:	687b      	ldr	r3, [r7, #4]
20002c54:	2b37      	cmp	r3, #55	; 0x37
20002c56:	d9ef      	bls.n	20002c38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
20002c58:	480d      	ldr	r0, [pc, #52]	; (20002c90 <prvInitialiseTaskLists+0x64>)
20002c5a:	f7fe f99f 	bl	20000f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
20002c5e:	480d      	ldr	r0, [pc, #52]	; (20002c94 <prvInitialiseTaskLists+0x68>)
20002c60:	f7fe f99c 	bl	20000f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
20002c64:	480c      	ldr	r0, [pc, #48]	; (20002c98 <prvInitialiseTaskLists+0x6c>)
20002c66:	f7fe f999 	bl	20000f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
20002c6a:	480c      	ldr	r0, [pc, #48]	; (20002c9c <prvInitialiseTaskLists+0x70>)
20002c6c:	f7fe f996 	bl	20000f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
20002c70:	480b      	ldr	r0, [pc, #44]	; (20002ca0 <prvInitialiseTaskLists+0x74>)
20002c72:	f7fe f993 	bl	20000f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
20002c76:	4b0b      	ldr	r3, [pc, #44]	; (20002ca4 <prvInitialiseTaskLists+0x78>)
20002c78:	4a05      	ldr	r2, [pc, #20]	; (20002c90 <prvInitialiseTaskLists+0x64>)
20002c7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
20002c7c:	4b0a      	ldr	r3, [pc, #40]	; (20002ca8 <prvInitialiseTaskLists+0x7c>)
20002c7e:	4a05      	ldr	r2, [pc, #20]	; (20002c94 <prvInitialiseTaskLists+0x68>)
20002c80:	601a      	str	r2, [r3, #0]
}
20002c82:	bf00      	nop
20002c84:	3708      	adds	r7, #8
20002c86:	46bd      	mov	sp, r7
20002c88:	bd80      	pop	{r7, pc}
20002c8a:	bf00      	nop
20002c8c:	2000ac90 	.word	0x2000ac90
20002c90:	2000b0f0 	.word	0x2000b0f0
20002c94:	2000b104 	.word	0x2000b104
20002c98:	2000b120 	.word	0x2000b120
20002c9c:	2000b134 	.word	0x2000b134
20002ca0:	2000b14c 	.word	0x2000b14c
20002ca4:	2000b118 	.word	0x2000b118
20002ca8:	2000b11c 	.word	0x2000b11c

20002cac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
20002cac:	b580      	push	{r7, lr}
20002cae:	b082      	sub	sp, #8
20002cb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002cb2:	e019      	b.n	20002ce8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
20002cb4:	f000 fed6 	bl	20003a64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002cb8:	4b10      	ldr	r3, [pc, #64]	; (20002cfc <prvCheckTasksWaitingTermination+0x50>)
20002cba:	68db      	ldr	r3, [r3, #12]
20002cbc:	68db      	ldr	r3, [r3, #12]
20002cbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
20002cc0:	687b      	ldr	r3, [r7, #4]
20002cc2:	3304      	adds	r3, #4
20002cc4:	4618      	mov	r0, r3
20002cc6:	f7fe f9f3 	bl	200010b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
20002cca:	4b0d      	ldr	r3, [pc, #52]	; (20002d00 <prvCheckTasksWaitingTermination+0x54>)
20002ccc:	681b      	ldr	r3, [r3, #0]
20002cce:	3b01      	subs	r3, #1
20002cd0:	4a0b      	ldr	r2, [pc, #44]	; (20002d00 <prvCheckTasksWaitingTermination+0x54>)
20002cd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
20002cd4:	4b0b      	ldr	r3, [pc, #44]	; (20002d04 <prvCheckTasksWaitingTermination+0x58>)
20002cd6:	681b      	ldr	r3, [r3, #0]
20002cd8:	3b01      	subs	r3, #1
20002cda:	4a0a      	ldr	r2, [pc, #40]	; (20002d04 <prvCheckTasksWaitingTermination+0x58>)
20002cdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
20002cde:	f000 fef1 	bl	20003ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
20002ce2:	6878      	ldr	r0, [r7, #4]
20002ce4:	f000 f810 	bl	20002d08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
20002ce8:	4b06      	ldr	r3, [pc, #24]	; (20002d04 <prvCheckTasksWaitingTermination+0x58>)
20002cea:	681b      	ldr	r3, [r3, #0]
20002cec:	2b00      	cmp	r3, #0
20002cee:	d1e1      	bne.n	20002cb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
20002cf0:	bf00      	nop
20002cf2:	bf00      	nop
20002cf4:	3708      	adds	r7, #8
20002cf6:	46bd      	mov	sp, r7
20002cf8:	bd80      	pop	{r7, pc}
20002cfa:	bf00      	nop
20002cfc:	2000b134 	.word	0x2000b134
20002d00:	2000b160 	.word	0x2000b160
20002d04:	2000b148 	.word	0x2000b148

20002d08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
20002d08:	b580      	push	{r7, lr}
20002d0a:	b084      	sub	sp, #16
20002d0c:	af00      	add	r7, sp, #0
20002d0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
20002d10:	687b      	ldr	r3, [r7, #4]
20002d12:	3354      	adds	r3, #84	; 0x54
20002d14:	4618      	mov	r0, r3
20002d16:	f003 fb63 	bl	200063e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
20002d1a:	687b      	ldr	r3, [r7, #4]
20002d1c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002d20:	2b00      	cmp	r3, #0
20002d22:	d108      	bne.n	20002d36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
20002d24:	687b      	ldr	r3, [r7, #4]
20002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002d28:	4618      	mov	r0, r3
20002d2a:	f001 f889 	bl	20003e40 <vPortFree>
				vPortFree( pxTCB );
20002d2e:	6878      	ldr	r0, [r7, #4]
20002d30:	f001 f886 	bl	20003e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
20002d34:	e018      	b.n	20002d68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
20002d36:	687b      	ldr	r3, [r7, #4]
20002d38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002d3c:	2b01      	cmp	r3, #1
20002d3e:	d103      	bne.n	20002d48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
20002d40:	6878      	ldr	r0, [r7, #4]
20002d42:	f001 f87d 	bl	20003e40 <vPortFree>
	}
20002d46:	e00f      	b.n	20002d68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
20002d48:	687b      	ldr	r3, [r7, #4]
20002d4a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
20002d4e:	2b02      	cmp	r3, #2
20002d50:	d00a      	beq.n	20002d68 <prvDeleteTCB+0x60>
	__asm volatile
20002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
20002d56:	f383 8811 	msr	BASEPRI, r3
20002d5a:	f3bf 8f6f 	isb	sy
20002d5e:	f3bf 8f4f 	dsb	sy
20002d62:	60fb      	str	r3, [r7, #12]
}
20002d64:	bf00      	nop
20002d66:	e7fe      	b.n	20002d66 <prvDeleteTCB+0x5e>
	}
20002d68:	bf00      	nop
20002d6a:	3710      	adds	r7, #16
20002d6c:	46bd      	mov	sp, r7
20002d6e:	bd80      	pop	{r7, pc}

20002d70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
20002d70:	b480      	push	{r7}
20002d72:	b083      	sub	sp, #12
20002d74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
20002d76:	4b0c      	ldr	r3, [pc, #48]	; (20002da8 <prvResetNextTaskUnblockTime+0x38>)
20002d78:	681b      	ldr	r3, [r3, #0]
20002d7a:	681b      	ldr	r3, [r3, #0]
20002d7c:	2b00      	cmp	r3, #0
20002d7e:	d104      	bne.n	20002d8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
20002d80:	4b0a      	ldr	r3, [pc, #40]	; (20002dac <prvResetNextTaskUnblockTime+0x3c>)
20002d82:	f04f 32ff 	mov.w	r2, #4294967295
20002d86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
20002d88:	e008      	b.n	20002d9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
20002d8a:	4b07      	ldr	r3, [pc, #28]	; (20002da8 <prvResetNextTaskUnblockTime+0x38>)
20002d8c:	681b      	ldr	r3, [r3, #0]
20002d8e:	68db      	ldr	r3, [r3, #12]
20002d90:	68db      	ldr	r3, [r3, #12]
20002d92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
20002d94:	687b      	ldr	r3, [r7, #4]
20002d96:	685b      	ldr	r3, [r3, #4]
20002d98:	4a04      	ldr	r2, [pc, #16]	; (20002dac <prvResetNextTaskUnblockTime+0x3c>)
20002d9a:	6013      	str	r3, [r2, #0]
}
20002d9c:	bf00      	nop
20002d9e:	370c      	adds	r7, #12
20002da0:	46bd      	mov	sp, r7
20002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
20002da6:	4770      	bx	lr
20002da8:	2000b118 	.word	0x2000b118
20002dac:	2000b180 	.word	0x2000b180

20002db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
20002db0:	b480      	push	{r7}
20002db2:	b083      	sub	sp, #12
20002db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
20002db6:	4b0b      	ldr	r3, [pc, #44]	; (20002de4 <xTaskGetSchedulerState+0x34>)
20002db8:	681b      	ldr	r3, [r3, #0]
20002dba:	2b00      	cmp	r3, #0
20002dbc:	d102      	bne.n	20002dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
20002dbe:	2301      	movs	r3, #1
20002dc0:	607b      	str	r3, [r7, #4]
20002dc2:	e008      	b.n	20002dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
20002dc4:	4b08      	ldr	r3, [pc, #32]	; (20002de8 <xTaskGetSchedulerState+0x38>)
20002dc6:	681b      	ldr	r3, [r3, #0]
20002dc8:	2b00      	cmp	r3, #0
20002dca:	d102      	bne.n	20002dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
20002dcc:	2302      	movs	r3, #2
20002dce:	607b      	str	r3, [r7, #4]
20002dd0:	e001      	b.n	20002dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
20002dd2:	2300      	movs	r3, #0
20002dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
20002dd6:	687b      	ldr	r3, [r7, #4]
	}
20002dd8:	4618      	mov	r0, r3
20002dda:	370c      	adds	r7, #12
20002ddc:	46bd      	mov	sp, r7
20002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
20002de2:	4770      	bx	lr
20002de4:	2000b16c 	.word	0x2000b16c
20002de8:	2000b188 	.word	0x2000b188

20002dec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
20002dec:	b580      	push	{r7, lr}
20002dee:	b084      	sub	sp, #16
20002df0:	af00      	add	r7, sp, #0
20002df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
20002df4:	687b      	ldr	r3, [r7, #4]
20002df6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
20002df8:	2300      	movs	r3, #0
20002dfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
20002dfc:	687b      	ldr	r3, [r7, #4]
20002dfe:	2b00      	cmp	r3, #0
20002e00:	d051      	beq.n	20002ea6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
20002e02:	68bb      	ldr	r3, [r7, #8]
20002e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e06:	4b2a      	ldr	r3, [pc, #168]	; (20002eb0 <xTaskPriorityInherit+0xc4>)
20002e08:	681b      	ldr	r3, [r3, #0]
20002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e0c:	429a      	cmp	r2, r3
20002e0e:	d241      	bcs.n	20002e94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20002e10:	68bb      	ldr	r3, [r7, #8]
20002e12:	699b      	ldr	r3, [r3, #24]
20002e14:	2b00      	cmp	r3, #0
20002e16:	db06      	blt.n	20002e26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002e18:	4b25      	ldr	r3, [pc, #148]	; (20002eb0 <xTaskPriorityInherit+0xc4>)
20002e1a:	681b      	ldr	r3, [r3, #0]
20002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20002e22:	68bb      	ldr	r3, [r7, #8]
20002e24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
20002e26:	68bb      	ldr	r3, [r7, #8]
20002e28:	6959      	ldr	r1, [r3, #20]
20002e2a:	68bb      	ldr	r3, [r7, #8]
20002e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e2e:	4613      	mov	r3, r2
20002e30:	009b      	lsls	r3, r3, #2
20002e32:	4413      	add	r3, r2
20002e34:	009b      	lsls	r3, r3, #2
20002e36:	4a1f      	ldr	r2, [pc, #124]	; (20002eb4 <xTaskPriorityInherit+0xc8>)
20002e38:	4413      	add	r3, r2
20002e3a:	4299      	cmp	r1, r3
20002e3c:	d122      	bne.n	20002e84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002e3e:	68bb      	ldr	r3, [r7, #8]
20002e40:	3304      	adds	r3, #4
20002e42:	4618      	mov	r0, r3
20002e44:	f7fe f934 	bl	200010b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
20002e48:	4b19      	ldr	r3, [pc, #100]	; (20002eb0 <xTaskPriorityInherit+0xc4>)
20002e4a:	681b      	ldr	r3, [r3, #0]
20002e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e4e:	68bb      	ldr	r3, [r7, #8]
20002e50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
20002e52:	68bb      	ldr	r3, [r7, #8]
20002e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e56:	4b18      	ldr	r3, [pc, #96]	; (20002eb8 <xTaskPriorityInherit+0xcc>)
20002e58:	681b      	ldr	r3, [r3, #0]
20002e5a:	429a      	cmp	r2, r3
20002e5c:	d903      	bls.n	20002e66 <xTaskPriorityInherit+0x7a>
20002e5e:	68bb      	ldr	r3, [r7, #8]
20002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e62:	4a15      	ldr	r2, [pc, #84]	; (20002eb8 <xTaskPriorityInherit+0xcc>)
20002e64:	6013      	str	r3, [r2, #0]
20002e66:	68bb      	ldr	r3, [r7, #8]
20002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e6a:	4613      	mov	r3, r2
20002e6c:	009b      	lsls	r3, r3, #2
20002e6e:	4413      	add	r3, r2
20002e70:	009b      	lsls	r3, r3, #2
20002e72:	4a10      	ldr	r2, [pc, #64]	; (20002eb4 <xTaskPriorityInherit+0xc8>)
20002e74:	441a      	add	r2, r3
20002e76:	68bb      	ldr	r3, [r7, #8]
20002e78:	3304      	adds	r3, #4
20002e7a:	4619      	mov	r1, r3
20002e7c:	4610      	mov	r0, r2
20002e7e:	f7fe f8ba 	bl	20000ff6 <vListInsertEnd>
20002e82:	e004      	b.n	20002e8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
20002e84:	4b0a      	ldr	r3, [pc, #40]	; (20002eb0 <xTaskPriorityInherit+0xc4>)
20002e86:	681b      	ldr	r3, [r3, #0]
20002e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002e8a:	68bb      	ldr	r3, [r7, #8]
20002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
20002e8e:	2301      	movs	r3, #1
20002e90:	60fb      	str	r3, [r7, #12]
20002e92:	e008      	b.n	20002ea6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
20002e94:	68bb      	ldr	r3, [r7, #8]
20002e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002e98:	4b05      	ldr	r3, [pc, #20]	; (20002eb0 <xTaskPriorityInherit+0xc4>)
20002e9a:	681b      	ldr	r3, [r3, #0]
20002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e9e:	429a      	cmp	r2, r3
20002ea0:	d201      	bcs.n	20002ea6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
20002ea2:	2301      	movs	r3, #1
20002ea4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002ea6:	68fb      	ldr	r3, [r7, #12]
	}
20002ea8:	4618      	mov	r0, r3
20002eaa:	3710      	adds	r7, #16
20002eac:	46bd      	mov	sp, r7
20002eae:	bd80      	pop	{r7, pc}
20002eb0:	2000ac8c 	.word	0x2000ac8c
20002eb4:	2000ac90 	.word	0x2000ac90
20002eb8:	2000b168 	.word	0x2000b168

20002ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
20002ebc:	b580      	push	{r7, lr}
20002ebe:	b086      	sub	sp, #24
20002ec0:	af00      	add	r7, sp, #0
20002ec2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
20002ec4:	687b      	ldr	r3, [r7, #4]
20002ec6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
20002ec8:	2300      	movs	r3, #0
20002eca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20002ecc:	687b      	ldr	r3, [r7, #4]
20002ece:	2b00      	cmp	r3, #0
20002ed0:	d056      	beq.n	20002f80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
20002ed2:	4b2e      	ldr	r3, [pc, #184]	; (20002f8c <xTaskPriorityDisinherit+0xd0>)
20002ed4:	681b      	ldr	r3, [r3, #0]
20002ed6:	693a      	ldr	r2, [r7, #16]
20002ed8:	429a      	cmp	r2, r3
20002eda:	d00a      	beq.n	20002ef2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
20002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
20002ee0:	f383 8811 	msr	BASEPRI, r3
20002ee4:	f3bf 8f6f 	isb	sy
20002ee8:	f3bf 8f4f 	dsb	sy
20002eec:	60fb      	str	r3, [r7, #12]
}
20002eee:	bf00      	nop
20002ef0:	e7fe      	b.n	20002ef0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
20002ef2:	693b      	ldr	r3, [r7, #16]
20002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002ef6:	2b00      	cmp	r3, #0
20002ef8:	d10a      	bne.n	20002f10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
20002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
20002efe:	f383 8811 	msr	BASEPRI, r3
20002f02:	f3bf 8f6f 	isb	sy
20002f06:	f3bf 8f4f 	dsb	sy
20002f0a:	60bb      	str	r3, [r7, #8]
}
20002f0c:	bf00      	nop
20002f0e:	e7fe      	b.n	20002f0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
20002f10:	693b      	ldr	r3, [r7, #16]
20002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002f14:	1e5a      	subs	r2, r3, #1
20002f16:	693b      	ldr	r3, [r7, #16]
20002f18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
20002f1a:	693b      	ldr	r3, [r7, #16]
20002f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002f1e:	693b      	ldr	r3, [r7, #16]
20002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002f22:	429a      	cmp	r2, r3
20002f24:	d02c      	beq.n	20002f80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
20002f26:	693b      	ldr	r3, [r7, #16]
20002f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002f2a:	2b00      	cmp	r3, #0
20002f2c:	d128      	bne.n	20002f80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
20002f2e:	693b      	ldr	r3, [r7, #16]
20002f30:	3304      	adds	r3, #4
20002f32:	4618      	mov	r0, r3
20002f34:	f7fe f8bc 	bl	200010b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
20002f38:	693b      	ldr	r3, [r7, #16]
20002f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
20002f3c:	693b      	ldr	r3, [r7, #16]
20002f3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
20002f40:	693b      	ldr	r3, [r7, #16]
20002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002f44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20002f48:	693b      	ldr	r3, [r7, #16]
20002f4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
20002f4c:	693b      	ldr	r3, [r7, #16]
20002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002f50:	4b0f      	ldr	r3, [pc, #60]	; (20002f90 <xTaskPriorityDisinherit+0xd4>)
20002f52:	681b      	ldr	r3, [r3, #0]
20002f54:	429a      	cmp	r2, r3
20002f56:	d903      	bls.n	20002f60 <xTaskPriorityDisinherit+0xa4>
20002f58:	693b      	ldr	r3, [r7, #16]
20002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002f5c:	4a0c      	ldr	r2, [pc, #48]	; (20002f90 <xTaskPriorityDisinherit+0xd4>)
20002f5e:	6013      	str	r3, [r2, #0]
20002f60:	693b      	ldr	r3, [r7, #16]
20002f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002f64:	4613      	mov	r3, r2
20002f66:	009b      	lsls	r3, r3, #2
20002f68:	4413      	add	r3, r2
20002f6a:	009b      	lsls	r3, r3, #2
20002f6c:	4a09      	ldr	r2, [pc, #36]	; (20002f94 <xTaskPriorityDisinherit+0xd8>)
20002f6e:	441a      	add	r2, r3
20002f70:	693b      	ldr	r3, [r7, #16]
20002f72:	3304      	adds	r3, #4
20002f74:	4619      	mov	r1, r3
20002f76:	4610      	mov	r0, r2
20002f78:	f7fe f83d 	bl	20000ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
20002f7c:	2301      	movs	r3, #1
20002f7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
20002f80:	697b      	ldr	r3, [r7, #20]
	}
20002f82:	4618      	mov	r0, r3
20002f84:	3718      	adds	r7, #24
20002f86:	46bd      	mov	sp, r7
20002f88:	bd80      	pop	{r7, pc}
20002f8a:	bf00      	nop
20002f8c:	2000ac8c 	.word	0x2000ac8c
20002f90:	2000b168 	.word	0x2000b168
20002f94:	2000ac90 	.word	0x2000ac90

20002f98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
20002f98:	b580      	push	{r7, lr}
20002f9a:	b088      	sub	sp, #32
20002f9c:	af00      	add	r7, sp, #0
20002f9e:	6078      	str	r0, [r7, #4]
20002fa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
20002fa2:	687b      	ldr	r3, [r7, #4]
20002fa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
20002fa6:	2301      	movs	r3, #1
20002fa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
20002faa:	687b      	ldr	r3, [r7, #4]
20002fac:	2b00      	cmp	r3, #0
20002fae:	d06a      	beq.n	20003086 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
20002fb0:	69bb      	ldr	r3, [r7, #24]
20002fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002fb4:	2b00      	cmp	r3, #0
20002fb6:	d10a      	bne.n	20002fce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
20002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
20002fbc:	f383 8811 	msr	BASEPRI, r3
20002fc0:	f3bf 8f6f 	isb	sy
20002fc4:	f3bf 8f4f 	dsb	sy
20002fc8:	60fb      	str	r3, [r7, #12]
}
20002fca:	bf00      	nop
20002fcc:	e7fe      	b.n	20002fcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
20002fce:	69bb      	ldr	r3, [r7, #24]
20002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002fd2:	683a      	ldr	r2, [r7, #0]
20002fd4:	429a      	cmp	r2, r3
20002fd6:	d902      	bls.n	20002fde <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
20002fd8:	683b      	ldr	r3, [r7, #0]
20002fda:	61fb      	str	r3, [r7, #28]
20002fdc:	e002      	b.n	20002fe4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
20002fde:	69bb      	ldr	r3, [r7, #24]
20002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002fe2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
20002fe4:	69bb      	ldr	r3, [r7, #24]
20002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002fe8:	69fa      	ldr	r2, [r7, #28]
20002fea:	429a      	cmp	r2, r3
20002fec:	d04b      	beq.n	20003086 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
20002fee:	69bb      	ldr	r3, [r7, #24]
20002ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002ff2:	697a      	ldr	r2, [r7, #20]
20002ff4:	429a      	cmp	r2, r3
20002ff6:	d146      	bne.n	20003086 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
20002ff8:	4b25      	ldr	r3, [pc, #148]	; (20003090 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
20002ffa:	681b      	ldr	r3, [r3, #0]
20002ffc:	69ba      	ldr	r2, [r7, #24]
20002ffe:	429a      	cmp	r2, r3
20003000:	d10a      	bne.n	20003018 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
20003002:	f04f 0350 	mov.w	r3, #80	; 0x50
20003006:	f383 8811 	msr	BASEPRI, r3
2000300a:	f3bf 8f6f 	isb	sy
2000300e:	f3bf 8f4f 	dsb	sy
20003012:	60bb      	str	r3, [r7, #8]
}
20003014:	bf00      	nop
20003016:	e7fe      	b.n	20003016 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
20003018:	69bb      	ldr	r3, [r7, #24]
2000301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000301c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
2000301e:	69bb      	ldr	r3, [r7, #24]
20003020:	69fa      	ldr	r2, [r7, #28]
20003022:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
20003024:	69bb      	ldr	r3, [r7, #24]
20003026:	699b      	ldr	r3, [r3, #24]
20003028:	2b00      	cmp	r3, #0
2000302a:	db04      	blt.n	20003036 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000302c:	69fb      	ldr	r3, [r7, #28]
2000302e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
20003032:	69bb      	ldr	r3, [r7, #24]
20003034:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
20003036:	69bb      	ldr	r3, [r7, #24]
20003038:	6959      	ldr	r1, [r3, #20]
2000303a:	693a      	ldr	r2, [r7, #16]
2000303c:	4613      	mov	r3, r2
2000303e:	009b      	lsls	r3, r3, #2
20003040:	4413      	add	r3, r2
20003042:	009b      	lsls	r3, r3, #2
20003044:	4a13      	ldr	r2, [pc, #76]	; (20003094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
20003046:	4413      	add	r3, r2
20003048:	4299      	cmp	r1, r3
2000304a:	d11c      	bne.n	20003086 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
2000304c:	69bb      	ldr	r3, [r7, #24]
2000304e:	3304      	adds	r3, #4
20003050:	4618      	mov	r0, r3
20003052:	f7fe f82d 	bl	200010b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
20003056:	69bb      	ldr	r3, [r7, #24]
20003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000305a:	4b0f      	ldr	r3, [pc, #60]	; (20003098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
2000305c:	681b      	ldr	r3, [r3, #0]
2000305e:	429a      	cmp	r2, r3
20003060:	d903      	bls.n	2000306a <vTaskPriorityDisinheritAfterTimeout+0xd2>
20003062:	69bb      	ldr	r3, [r7, #24]
20003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003066:	4a0c      	ldr	r2, [pc, #48]	; (20003098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
20003068:	6013      	str	r3, [r2, #0]
2000306a:	69bb      	ldr	r3, [r7, #24]
2000306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
2000306e:	4613      	mov	r3, r2
20003070:	009b      	lsls	r3, r3, #2
20003072:	4413      	add	r3, r2
20003074:	009b      	lsls	r3, r3, #2
20003076:	4a07      	ldr	r2, [pc, #28]	; (20003094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
20003078:	441a      	add	r2, r3
2000307a:	69bb      	ldr	r3, [r7, #24]
2000307c:	3304      	adds	r3, #4
2000307e:	4619      	mov	r1, r3
20003080:	4610      	mov	r0, r2
20003082:	f7fd ffb8 	bl	20000ff6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
20003086:	bf00      	nop
20003088:	3720      	adds	r7, #32
2000308a:	46bd      	mov	sp, r7
2000308c:	bd80      	pop	{r7, pc}
2000308e:	bf00      	nop
20003090:	2000ac8c 	.word	0x2000ac8c
20003094:	2000ac90 	.word	0x2000ac90
20003098:	2000b168 	.word	0x2000b168

2000309c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
2000309c:	b480      	push	{r7}
2000309e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
200030a0:	4b07      	ldr	r3, [pc, #28]	; (200030c0 <pvTaskIncrementMutexHeldCount+0x24>)
200030a2:	681b      	ldr	r3, [r3, #0]
200030a4:	2b00      	cmp	r3, #0
200030a6:	d004      	beq.n	200030b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
200030a8:	4b05      	ldr	r3, [pc, #20]	; (200030c0 <pvTaskIncrementMutexHeldCount+0x24>)
200030aa:	681b      	ldr	r3, [r3, #0]
200030ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
200030ae:	3201      	adds	r2, #1
200030b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
200030b2:	4b03      	ldr	r3, [pc, #12]	; (200030c0 <pvTaskIncrementMutexHeldCount+0x24>)
200030b4:	681b      	ldr	r3, [r3, #0]
	}
200030b6:	4618      	mov	r0, r3
200030b8:	46bd      	mov	sp, r7
200030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
200030be:	4770      	bx	lr
200030c0:	2000ac8c 	.word	0x2000ac8c

200030c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
200030c4:	b580      	push	{r7, lr}
200030c6:	b084      	sub	sp, #16
200030c8:	af00      	add	r7, sp, #0
200030ca:	6078      	str	r0, [r7, #4]
200030cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
200030ce:	4b21      	ldr	r3, [pc, #132]	; (20003154 <prvAddCurrentTaskToDelayedList+0x90>)
200030d0:	681b      	ldr	r3, [r3, #0]
200030d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
200030d4:	4b20      	ldr	r3, [pc, #128]	; (20003158 <prvAddCurrentTaskToDelayedList+0x94>)
200030d6:	681b      	ldr	r3, [r3, #0]
200030d8:	3304      	adds	r3, #4
200030da:	4618      	mov	r0, r3
200030dc:	f7fd ffe8 	bl	200010b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
200030e0:	687b      	ldr	r3, [r7, #4]
200030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
200030e6:	d10a      	bne.n	200030fe <prvAddCurrentTaskToDelayedList+0x3a>
200030e8:	683b      	ldr	r3, [r7, #0]
200030ea:	2b00      	cmp	r3, #0
200030ec:	d007      	beq.n	200030fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
200030ee:	4b1a      	ldr	r3, [pc, #104]	; (20003158 <prvAddCurrentTaskToDelayedList+0x94>)
200030f0:	681b      	ldr	r3, [r3, #0]
200030f2:	3304      	adds	r3, #4
200030f4:	4619      	mov	r1, r3
200030f6:	4819      	ldr	r0, [pc, #100]	; (2000315c <prvAddCurrentTaskToDelayedList+0x98>)
200030f8:	f7fd ff7d 	bl	20000ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
200030fc:	e026      	b.n	2000314c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
200030fe:	68fa      	ldr	r2, [r7, #12]
20003100:	687b      	ldr	r3, [r7, #4]
20003102:	4413      	add	r3, r2
20003104:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
20003106:	4b14      	ldr	r3, [pc, #80]	; (20003158 <prvAddCurrentTaskToDelayedList+0x94>)
20003108:	681b      	ldr	r3, [r3, #0]
2000310a:	68ba      	ldr	r2, [r7, #8]
2000310c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
2000310e:	68ba      	ldr	r2, [r7, #8]
20003110:	68fb      	ldr	r3, [r7, #12]
20003112:	429a      	cmp	r2, r3
20003114:	d209      	bcs.n	2000312a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
20003116:	4b12      	ldr	r3, [pc, #72]	; (20003160 <prvAddCurrentTaskToDelayedList+0x9c>)
20003118:	681a      	ldr	r2, [r3, #0]
2000311a:	4b0f      	ldr	r3, [pc, #60]	; (20003158 <prvAddCurrentTaskToDelayedList+0x94>)
2000311c:	681b      	ldr	r3, [r3, #0]
2000311e:	3304      	adds	r3, #4
20003120:	4619      	mov	r1, r3
20003122:	4610      	mov	r0, r2
20003124:	f7fd ff8b 	bl	2000103e <vListInsert>
}
20003128:	e010      	b.n	2000314c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
2000312a:	4b0e      	ldr	r3, [pc, #56]	; (20003164 <prvAddCurrentTaskToDelayedList+0xa0>)
2000312c:	681a      	ldr	r2, [r3, #0]
2000312e:	4b0a      	ldr	r3, [pc, #40]	; (20003158 <prvAddCurrentTaskToDelayedList+0x94>)
20003130:	681b      	ldr	r3, [r3, #0]
20003132:	3304      	adds	r3, #4
20003134:	4619      	mov	r1, r3
20003136:	4610      	mov	r0, r2
20003138:	f7fd ff81 	bl	2000103e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
2000313c:	4b0a      	ldr	r3, [pc, #40]	; (20003168 <prvAddCurrentTaskToDelayedList+0xa4>)
2000313e:	681b      	ldr	r3, [r3, #0]
20003140:	68ba      	ldr	r2, [r7, #8]
20003142:	429a      	cmp	r2, r3
20003144:	d202      	bcs.n	2000314c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
20003146:	4a08      	ldr	r2, [pc, #32]	; (20003168 <prvAddCurrentTaskToDelayedList+0xa4>)
20003148:	68bb      	ldr	r3, [r7, #8]
2000314a:	6013      	str	r3, [r2, #0]
}
2000314c:	bf00      	nop
2000314e:	3710      	adds	r7, #16
20003150:	46bd      	mov	sp, r7
20003152:	bd80      	pop	{r7, pc}
20003154:	2000b164 	.word	0x2000b164
20003158:	2000ac8c 	.word	0x2000ac8c
2000315c:	2000b14c 	.word	0x2000b14c
20003160:	2000b11c 	.word	0x2000b11c
20003164:	2000b118 	.word	0x2000b118
20003168:	2000b180 	.word	0x2000b180

2000316c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
2000316c:	b580      	push	{r7, lr}
2000316e:	b08a      	sub	sp, #40	; 0x28
20003170:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
20003172:	2300      	movs	r3, #0
20003174:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
20003176:	f000 fb07 	bl	20003788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
2000317a:	4b1c      	ldr	r3, [pc, #112]	; (200031ec <xTimerCreateTimerTask+0x80>)
2000317c:	681b      	ldr	r3, [r3, #0]
2000317e:	2b00      	cmp	r3, #0
20003180:	d021      	beq.n	200031c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
20003182:	2300      	movs	r3, #0
20003184:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
20003186:	2300      	movs	r3, #0
20003188:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
2000318a:	1d3a      	adds	r2, r7, #4
2000318c:	f107 0108 	add.w	r1, r7, #8
20003190:	f107 030c 	add.w	r3, r7, #12
20003194:	4618      	mov	r0, r3
20003196:	f7fd fee7 	bl	20000f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
2000319a:	6879      	ldr	r1, [r7, #4]
2000319c:	68bb      	ldr	r3, [r7, #8]
2000319e:	68fa      	ldr	r2, [r7, #12]
200031a0:	9202      	str	r2, [sp, #8]
200031a2:	9301      	str	r3, [sp, #4]
200031a4:	2302      	movs	r3, #2
200031a6:	9300      	str	r3, [sp, #0]
200031a8:	2300      	movs	r3, #0
200031aa:	460a      	mov	r2, r1
200031ac:	4910      	ldr	r1, [pc, #64]	; (200031f0 <xTimerCreateTimerTask+0x84>)
200031ae:	4811      	ldr	r0, [pc, #68]	; (200031f4 <xTimerCreateTimerTask+0x88>)
200031b0:	f7fe ffb6 	bl	20002120 <xTaskCreateStatic>
200031b4:	4603      	mov	r3, r0
200031b6:	4a10      	ldr	r2, [pc, #64]	; (200031f8 <xTimerCreateTimerTask+0x8c>)
200031b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
200031ba:	4b0f      	ldr	r3, [pc, #60]	; (200031f8 <xTimerCreateTimerTask+0x8c>)
200031bc:	681b      	ldr	r3, [r3, #0]
200031be:	2b00      	cmp	r3, #0
200031c0:	d001      	beq.n	200031c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
200031c2:	2301      	movs	r3, #1
200031c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
200031c6:	697b      	ldr	r3, [r7, #20]
200031c8:	2b00      	cmp	r3, #0
200031ca:	d10a      	bne.n	200031e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
200031cc:	f04f 0350 	mov.w	r3, #80	; 0x50
200031d0:	f383 8811 	msr	BASEPRI, r3
200031d4:	f3bf 8f6f 	isb	sy
200031d8:	f3bf 8f4f 	dsb	sy
200031dc:	613b      	str	r3, [r7, #16]
}
200031de:	bf00      	nop
200031e0:	e7fe      	b.n	200031e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
200031e2:	697b      	ldr	r3, [r7, #20]
}
200031e4:	4618      	mov	r0, r3
200031e6:	3718      	adds	r7, #24
200031e8:	46bd      	mov	sp, r7
200031ea:	bd80      	pop	{r7, pc}
200031ec:	2000b1bc 	.word	0x2000b1bc
200031f0:	20006568 	.word	0x20006568
200031f4:	20003331 	.word	0x20003331
200031f8:	2000b1c0 	.word	0x2000b1c0

200031fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
200031fc:	b580      	push	{r7, lr}
200031fe:	b08a      	sub	sp, #40	; 0x28
20003200:	af00      	add	r7, sp, #0
20003202:	60f8      	str	r0, [r7, #12]
20003204:	60b9      	str	r1, [r7, #8]
20003206:	607a      	str	r2, [r7, #4]
20003208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
2000320a:	2300      	movs	r3, #0
2000320c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
2000320e:	68fb      	ldr	r3, [r7, #12]
20003210:	2b00      	cmp	r3, #0
20003212:	d10a      	bne.n	2000322a <xTimerGenericCommand+0x2e>
	__asm volatile
20003214:	f04f 0350 	mov.w	r3, #80	; 0x50
20003218:	f383 8811 	msr	BASEPRI, r3
2000321c:	f3bf 8f6f 	isb	sy
20003220:	f3bf 8f4f 	dsb	sy
20003224:	623b      	str	r3, [r7, #32]
}
20003226:	bf00      	nop
20003228:	e7fe      	b.n	20003228 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
2000322a:	4b1a      	ldr	r3, [pc, #104]	; (20003294 <xTimerGenericCommand+0x98>)
2000322c:	681b      	ldr	r3, [r3, #0]
2000322e:	2b00      	cmp	r3, #0
20003230:	d02a      	beq.n	20003288 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
20003232:	68bb      	ldr	r3, [r7, #8]
20003234:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
20003236:	687b      	ldr	r3, [r7, #4]
20003238:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
2000323a:	68fb      	ldr	r3, [r7, #12]
2000323c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
2000323e:	68bb      	ldr	r3, [r7, #8]
20003240:	2b05      	cmp	r3, #5
20003242:	dc18      	bgt.n	20003276 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
20003244:	f7ff fdb4 	bl	20002db0 <xTaskGetSchedulerState>
20003248:	4603      	mov	r3, r0
2000324a:	2b02      	cmp	r3, #2
2000324c:	d109      	bne.n	20003262 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
2000324e:	4b11      	ldr	r3, [pc, #68]	; (20003294 <xTimerGenericCommand+0x98>)
20003250:	6818      	ldr	r0, [r3, #0]
20003252:	f107 0110 	add.w	r1, r7, #16
20003256:	2300      	movs	r3, #0
20003258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
2000325a:	f7fe f8fb 	bl	20001454 <xQueueGenericSend>
2000325e:	6278      	str	r0, [r7, #36]	; 0x24
20003260:	e012      	b.n	20003288 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
20003262:	4b0c      	ldr	r3, [pc, #48]	; (20003294 <xTimerGenericCommand+0x98>)
20003264:	6818      	ldr	r0, [r3, #0]
20003266:	f107 0110 	add.w	r1, r7, #16
2000326a:	2300      	movs	r3, #0
2000326c:	2200      	movs	r2, #0
2000326e:	f7fe f8f1 	bl	20001454 <xQueueGenericSend>
20003272:	6278      	str	r0, [r7, #36]	; 0x24
20003274:	e008      	b.n	20003288 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
20003276:	4b07      	ldr	r3, [pc, #28]	; (20003294 <xTimerGenericCommand+0x98>)
20003278:	6818      	ldr	r0, [r3, #0]
2000327a:	f107 0110 	add.w	r1, r7, #16
2000327e:	2300      	movs	r3, #0
20003280:	683a      	ldr	r2, [r7, #0]
20003282:	f7fe f9e5 	bl	20001650 <xQueueGenericSendFromISR>
20003286:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
20003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
2000328a:	4618      	mov	r0, r3
2000328c:	3728      	adds	r7, #40	; 0x28
2000328e:	46bd      	mov	sp, r7
20003290:	bd80      	pop	{r7, pc}
20003292:	bf00      	nop
20003294:	2000b1bc 	.word	0x2000b1bc

20003298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
20003298:	b580      	push	{r7, lr}
2000329a:	b088      	sub	sp, #32
2000329c:	af02      	add	r7, sp, #8
2000329e:	6078      	str	r0, [r7, #4]
200032a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200032a2:	4b22      	ldr	r3, [pc, #136]	; (2000332c <prvProcessExpiredTimer+0x94>)
200032a4:	681b      	ldr	r3, [r3, #0]
200032a6:	68db      	ldr	r3, [r3, #12]
200032a8:	68db      	ldr	r3, [r3, #12]
200032aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200032ac:	697b      	ldr	r3, [r7, #20]
200032ae:	3304      	adds	r3, #4
200032b0:	4618      	mov	r0, r3
200032b2:	f7fd fefd 	bl	200010b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
200032b6:	697b      	ldr	r3, [r7, #20]
200032b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200032bc:	f003 0304 	and.w	r3, r3, #4
200032c0:	2b00      	cmp	r3, #0
200032c2:	d022      	beq.n	2000330a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
200032c4:	697b      	ldr	r3, [r7, #20]
200032c6:	699a      	ldr	r2, [r3, #24]
200032c8:	687b      	ldr	r3, [r7, #4]
200032ca:	18d1      	adds	r1, r2, r3
200032cc:	687b      	ldr	r3, [r7, #4]
200032ce:	683a      	ldr	r2, [r7, #0]
200032d0:	6978      	ldr	r0, [r7, #20]
200032d2:	f000 f8d1 	bl	20003478 <prvInsertTimerInActiveList>
200032d6:	4603      	mov	r3, r0
200032d8:	2b00      	cmp	r3, #0
200032da:	d01f      	beq.n	2000331c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
200032dc:	2300      	movs	r3, #0
200032de:	9300      	str	r3, [sp, #0]
200032e0:	2300      	movs	r3, #0
200032e2:	687a      	ldr	r2, [r7, #4]
200032e4:	2100      	movs	r1, #0
200032e6:	6978      	ldr	r0, [r7, #20]
200032e8:	f7ff ff88 	bl	200031fc <xTimerGenericCommand>
200032ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
200032ee:	693b      	ldr	r3, [r7, #16]
200032f0:	2b00      	cmp	r3, #0
200032f2:	d113      	bne.n	2000331c <prvProcessExpiredTimer+0x84>
	__asm volatile
200032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
200032f8:	f383 8811 	msr	BASEPRI, r3
200032fc:	f3bf 8f6f 	isb	sy
20003300:	f3bf 8f4f 	dsb	sy
20003304:	60fb      	str	r3, [r7, #12]
}
20003306:	bf00      	nop
20003308:	e7fe      	b.n	20003308 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
2000330a:	697b      	ldr	r3, [r7, #20]
2000330c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003310:	f023 0301 	bic.w	r3, r3, #1
20003314:	b2da      	uxtb	r2, r3
20003316:	697b      	ldr	r3, [r7, #20]
20003318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
2000331c:	697b      	ldr	r3, [r7, #20]
2000331e:	6a1b      	ldr	r3, [r3, #32]
20003320:	6978      	ldr	r0, [r7, #20]
20003322:	4798      	blx	r3
}
20003324:	bf00      	nop
20003326:	3718      	adds	r7, #24
20003328:	46bd      	mov	sp, r7
2000332a:	bd80      	pop	{r7, pc}
2000332c:	2000b1b4 	.word	0x2000b1b4

20003330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
20003330:	b580      	push	{r7, lr}
20003332:	b084      	sub	sp, #16
20003334:	af00      	add	r7, sp, #0
20003336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003338:	f107 0308 	add.w	r3, r7, #8
2000333c:	4618      	mov	r0, r3
2000333e:	f000 f857 	bl	200033f0 <prvGetNextExpireTime>
20003342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
20003344:	68bb      	ldr	r3, [r7, #8]
20003346:	4619      	mov	r1, r3
20003348:	68f8      	ldr	r0, [r7, #12]
2000334a:	f000 f803 	bl	20003354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
2000334e:	f000 f8d5 	bl	200034fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
20003352:	e7f1      	b.n	20003338 <prvTimerTask+0x8>

20003354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
20003354:	b580      	push	{r7, lr}
20003356:	b084      	sub	sp, #16
20003358:	af00      	add	r7, sp, #0
2000335a:	6078      	str	r0, [r7, #4]
2000335c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
2000335e:	f7ff f93b 	bl	200025d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
20003362:	f107 0308 	add.w	r3, r7, #8
20003366:	4618      	mov	r0, r3
20003368:	f000 f866 	bl	20003438 <prvSampleTimeNow>
2000336c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
2000336e:	68bb      	ldr	r3, [r7, #8]
20003370:	2b00      	cmp	r3, #0
20003372:	d130      	bne.n	200033d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
20003374:	683b      	ldr	r3, [r7, #0]
20003376:	2b00      	cmp	r3, #0
20003378:	d10a      	bne.n	20003390 <prvProcessTimerOrBlockTask+0x3c>
2000337a:	687a      	ldr	r2, [r7, #4]
2000337c:	68fb      	ldr	r3, [r7, #12]
2000337e:	429a      	cmp	r2, r3
20003380:	d806      	bhi.n	20003390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
20003382:	f7ff f937 	bl	200025f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
20003386:	68f9      	ldr	r1, [r7, #12]
20003388:	6878      	ldr	r0, [r7, #4]
2000338a:	f7ff ff85 	bl	20003298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
2000338e:	e024      	b.n	200033da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
20003390:	683b      	ldr	r3, [r7, #0]
20003392:	2b00      	cmp	r3, #0
20003394:	d008      	beq.n	200033a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
20003396:	4b13      	ldr	r3, [pc, #76]	; (200033e4 <prvProcessTimerOrBlockTask+0x90>)
20003398:	681b      	ldr	r3, [r3, #0]
2000339a:	681b      	ldr	r3, [r3, #0]
2000339c:	2b00      	cmp	r3, #0
2000339e:	d101      	bne.n	200033a4 <prvProcessTimerOrBlockTask+0x50>
200033a0:	2301      	movs	r3, #1
200033a2:	e000      	b.n	200033a6 <prvProcessTimerOrBlockTask+0x52>
200033a4:	2300      	movs	r3, #0
200033a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
200033a8:	4b0f      	ldr	r3, [pc, #60]	; (200033e8 <prvProcessTimerOrBlockTask+0x94>)
200033aa:	6818      	ldr	r0, [r3, #0]
200033ac:	687a      	ldr	r2, [r7, #4]
200033ae:	68fb      	ldr	r3, [r7, #12]
200033b0:	1ad3      	subs	r3, r2, r3
200033b2:	683a      	ldr	r2, [r7, #0]
200033b4:	4619      	mov	r1, r3
200033b6:	f7fe fe7f 	bl	200020b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
200033ba:	f7ff f91b 	bl	200025f4 <xTaskResumeAll>
200033be:	4603      	mov	r3, r0
200033c0:	2b00      	cmp	r3, #0
200033c2:	d10a      	bne.n	200033da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
200033c4:	4b09      	ldr	r3, [pc, #36]	; (200033ec <prvProcessTimerOrBlockTask+0x98>)
200033c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
200033ca:	601a      	str	r2, [r3, #0]
200033cc:	f3bf 8f4f 	dsb	sy
200033d0:	f3bf 8f6f 	isb	sy
}
200033d4:	e001      	b.n	200033da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
200033d6:	f7ff f90d 	bl	200025f4 <xTaskResumeAll>
}
200033da:	bf00      	nop
200033dc:	3710      	adds	r7, #16
200033de:	46bd      	mov	sp, r7
200033e0:	bd80      	pop	{r7, pc}
200033e2:	bf00      	nop
200033e4:	2000b1b8 	.word	0x2000b1b8
200033e8:	2000b1bc 	.word	0x2000b1bc
200033ec:	e000ed04 	.word	0xe000ed04

200033f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
200033f0:	b480      	push	{r7}
200033f2:	b085      	sub	sp, #20
200033f4:	af00      	add	r7, sp, #0
200033f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
200033f8:	4b0e      	ldr	r3, [pc, #56]	; (20003434 <prvGetNextExpireTime+0x44>)
200033fa:	681b      	ldr	r3, [r3, #0]
200033fc:	681b      	ldr	r3, [r3, #0]
200033fe:	2b00      	cmp	r3, #0
20003400:	d101      	bne.n	20003406 <prvGetNextExpireTime+0x16>
20003402:	2201      	movs	r2, #1
20003404:	e000      	b.n	20003408 <prvGetNextExpireTime+0x18>
20003406:	2200      	movs	r2, #0
20003408:	687b      	ldr	r3, [r7, #4]
2000340a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
2000340c:	687b      	ldr	r3, [r7, #4]
2000340e:	681b      	ldr	r3, [r3, #0]
20003410:	2b00      	cmp	r3, #0
20003412:	d105      	bne.n	20003420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
20003414:	4b07      	ldr	r3, [pc, #28]	; (20003434 <prvGetNextExpireTime+0x44>)
20003416:	681b      	ldr	r3, [r3, #0]
20003418:	68db      	ldr	r3, [r3, #12]
2000341a:	681b      	ldr	r3, [r3, #0]
2000341c:	60fb      	str	r3, [r7, #12]
2000341e:	e001      	b.n	20003424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
20003420:	2300      	movs	r3, #0
20003422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
20003424:	68fb      	ldr	r3, [r7, #12]
}
20003426:	4618      	mov	r0, r3
20003428:	3714      	adds	r7, #20
2000342a:	46bd      	mov	sp, r7
2000342c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003430:	4770      	bx	lr
20003432:	bf00      	nop
20003434:	2000b1b4 	.word	0x2000b1b4

20003438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
20003438:	b580      	push	{r7, lr}
2000343a:	b084      	sub	sp, #16
2000343c:	af00      	add	r7, sp, #0
2000343e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
20003440:	f7ff f976 	bl	20002730 <xTaskGetTickCount>
20003444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
20003446:	4b0b      	ldr	r3, [pc, #44]	; (20003474 <prvSampleTimeNow+0x3c>)
20003448:	681b      	ldr	r3, [r3, #0]
2000344a:	68fa      	ldr	r2, [r7, #12]
2000344c:	429a      	cmp	r2, r3
2000344e:	d205      	bcs.n	2000345c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
20003450:	f000 f936 	bl	200036c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
20003454:	687b      	ldr	r3, [r7, #4]
20003456:	2201      	movs	r2, #1
20003458:	601a      	str	r2, [r3, #0]
2000345a:	e002      	b.n	20003462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
2000345c:	687b      	ldr	r3, [r7, #4]
2000345e:	2200      	movs	r2, #0
20003460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
20003462:	4a04      	ldr	r2, [pc, #16]	; (20003474 <prvSampleTimeNow+0x3c>)
20003464:	68fb      	ldr	r3, [r7, #12]
20003466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
20003468:	68fb      	ldr	r3, [r7, #12]
}
2000346a:	4618      	mov	r0, r3
2000346c:	3710      	adds	r7, #16
2000346e:	46bd      	mov	sp, r7
20003470:	bd80      	pop	{r7, pc}
20003472:	bf00      	nop
20003474:	2000b1c4 	.word	0x2000b1c4

20003478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
20003478:	b580      	push	{r7, lr}
2000347a:	b086      	sub	sp, #24
2000347c:	af00      	add	r7, sp, #0
2000347e:	60f8      	str	r0, [r7, #12]
20003480:	60b9      	str	r1, [r7, #8]
20003482:	607a      	str	r2, [r7, #4]
20003484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
20003486:	2300      	movs	r3, #0
20003488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
2000348a:	68fb      	ldr	r3, [r7, #12]
2000348c:	68ba      	ldr	r2, [r7, #8]
2000348e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003490:	68fb      	ldr	r3, [r7, #12]
20003492:	68fa      	ldr	r2, [r7, #12]
20003494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
20003496:	68ba      	ldr	r2, [r7, #8]
20003498:	687b      	ldr	r3, [r7, #4]
2000349a:	429a      	cmp	r2, r3
2000349c:	d812      	bhi.n	200034c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
2000349e:	687a      	ldr	r2, [r7, #4]
200034a0:	683b      	ldr	r3, [r7, #0]
200034a2:	1ad2      	subs	r2, r2, r3
200034a4:	68fb      	ldr	r3, [r7, #12]
200034a6:	699b      	ldr	r3, [r3, #24]
200034a8:	429a      	cmp	r2, r3
200034aa:	d302      	bcc.n	200034b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
200034ac:	2301      	movs	r3, #1
200034ae:	617b      	str	r3, [r7, #20]
200034b0:	e01b      	b.n	200034ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
200034b2:	4b10      	ldr	r3, [pc, #64]	; (200034f4 <prvInsertTimerInActiveList+0x7c>)
200034b4:	681a      	ldr	r2, [r3, #0]
200034b6:	68fb      	ldr	r3, [r7, #12]
200034b8:	3304      	adds	r3, #4
200034ba:	4619      	mov	r1, r3
200034bc:	4610      	mov	r0, r2
200034be:	f7fd fdbe 	bl	2000103e <vListInsert>
200034c2:	e012      	b.n	200034ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
200034c4:	687a      	ldr	r2, [r7, #4]
200034c6:	683b      	ldr	r3, [r7, #0]
200034c8:	429a      	cmp	r2, r3
200034ca:	d206      	bcs.n	200034da <prvInsertTimerInActiveList+0x62>
200034cc:	68ba      	ldr	r2, [r7, #8]
200034ce:	683b      	ldr	r3, [r7, #0]
200034d0:	429a      	cmp	r2, r3
200034d2:	d302      	bcc.n	200034da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
200034d4:	2301      	movs	r3, #1
200034d6:	617b      	str	r3, [r7, #20]
200034d8:	e007      	b.n	200034ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
200034da:	4b07      	ldr	r3, [pc, #28]	; (200034f8 <prvInsertTimerInActiveList+0x80>)
200034dc:	681a      	ldr	r2, [r3, #0]
200034de:	68fb      	ldr	r3, [r7, #12]
200034e0:	3304      	adds	r3, #4
200034e2:	4619      	mov	r1, r3
200034e4:	4610      	mov	r0, r2
200034e6:	f7fd fdaa 	bl	2000103e <vListInsert>
		}
	}

	return xProcessTimerNow;
200034ea:	697b      	ldr	r3, [r7, #20]
}
200034ec:	4618      	mov	r0, r3
200034ee:	3718      	adds	r7, #24
200034f0:	46bd      	mov	sp, r7
200034f2:	bd80      	pop	{r7, pc}
200034f4:	2000b1b8 	.word	0x2000b1b8
200034f8:	2000b1b4 	.word	0x2000b1b4

200034fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
200034fc:	b580      	push	{r7, lr}
200034fe:	b08e      	sub	sp, #56	; 0x38
20003500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
20003502:	e0ca      	b.n	2000369a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
20003504:	687b      	ldr	r3, [r7, #4]
20003506:	2b00      	cmp	r3, #0
20003508:	da18      	bge.n	2000353c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
2000350a:	1d3b      	adds	r3, r7, #4
2000350c:	3304      	adds	r3, #4
2000350e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
20003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20003512:	2b00      	cmp	r3, #0
20003514:	d10a      	bne.n	2000352c <prvProcessReceivedCommands+0x30>
	__asm volatile
20003516:	f04f 0350 	mov.w	r3, #80	; 0x50
2000351a:	f383 8811 	msr	BASEPRI, r3
2000351e:	f3bf 8f6f 	isb	sy
20003522:	f3bf 8f4f 	dsb	sy
20003526:	61fb      	str	r3, [r7, #28]
}
20003528:	bf00      	nop
2000352a:	e7fe      	b.n	2000352a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
2000352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000352e:	681b      	ldr	r3, [r3, #0]
20003530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20003532:	6850      	ldr	r0, [r2, #4]
20003534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20003536:	6892      	ldr	r2, [r2, #8]
20003538:	4611      	mov	r1, r2
2000353a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
2000353c:	687b      	ldr	r3, [r7, #4]
2000353e:	2b00      	cmp	r3, #0
20003540:	f2c0 80aa 	blt.w	20003698 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
20003544:	68fb      	ldr	r3, [r7, #12]
20003546:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
20003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000354a:	695b      	ldr	r3, [r3, #20]
2000354c:	2b00      	cmp	r3, #0
2000354e:	d004      	beq.n	2000355a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
20003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003552:	3304      	adds	r3, #4
20003554:	4618      	mov	r0, r3
20003556:	f7fd fdab 	bl	200010b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
2000355a:	463b      	mov	r3, r7
2000355c:	4618      	mov	r0, r3
2000355e:	f7ff ff6b 	bl	20003438 <prvSampleTimeNow>
20003562:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
20003564:	687b      	ldr	r3, [r7, #4]
20003566:	2b09      	cmp	r3, #9
20003568:	f200 8097 	bhi.w	2000369a <prvProcessReceivedCommands+0x19e>
2000356c:	a201      	add	r2, pc, #4	; (adr r2, 20003574 <prvProcessReceivedCommands+0x78>)
2000356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003572:	bf00      	nop
20003574:	2000359d 	.word	0x2000359d
20003578:	2000359d 	.word	0x2000359d
2000357c:	2000359d 	.word	0x2000359d
20003580:	20003611 	.word	0x20003611
20003584:	20003625 	.word	0x20003625
20003588:	2000366f 	.word	0x2000366f
2000358c:	2000359d 	.word	0x2000359d
20003590:	2000359d 	.word	0x2000359d
20003594:	20003611 	.word	0x20003611
20003598:	20003625 	.word	0x20003625
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
2000359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000359e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200035a2:	f043 0301 	orr.w	r3, r3, #1
200035a6:	b2da      	uxtb	r2, r3
200035a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
200035ae:	68ba      	ldr	r2, [r7, #8]
200035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035b2:	699b      	ldr	r3, [r3, #24]
200035b4:	18d1      	adds	r1, r2, r3
200035b6:	68bb      	ldr	r3, [r7, #8]
200035b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200035ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200035bc:	f7ff ff5c 	bl	20003478 <prvInsertTimerInActiveList>
200035c0:	4603      	mov	r3, r0
200035c2:	2b00      	cmp	r3, #0
200035c4:	d069      	beq.n	2000369a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035c8:	6a1b      	ldr	r3, [r3, #32]
200035ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200035cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
200035ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200035d4:	f003 0304 	and.w	r3, r3, #4
200035d8:	2b00      	cmp	r3, #0
200035da:	d05e      	beq.n	2000369a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
200035dc:	68ba      	ldr	r2, [r7, #8]
200035de:	6abb      	ldr	r3, [r7, #40]	; 0x28
200035e0:	699b      	ldr	r3, [r3, #24]
200035e2:	441a      	add	r2, r3
200035e4:	2300      	movs	r3, #0
200035e6:	9300      	str	r3, [sp, #0]
200035e8:	2300      	movs	r3, #0
200035ea:	2100      	movs	r1, #0
200035ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
200035ee:	f7ff fe05 	bl	200031fc <xTimerGenericCommand>
200035f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
200035f4:	6a3b      	ldr	r3, [r7, #32]
200035f6:	2b00      	cmp	r3, #0
200035f8:	d14f      	bne.n	2000369a <prvProcessReceivedCommands+0x19e>
	__asm volatile
200035fa:	f04f 0350 	mov.w	r3, #80	; 0x50
200035fe:	f383 8811 	msr	BASEPRI, r3
20003602:	f3bf 8f6f 	isb	sy
20003606:	f3bf 8f4f 	dsb	sy
2000360a:	61bb      	str	r3, [r7, #24]
}
2000360c:	bf00      	nop
2000360e:	e7fe      	b.n	2000360e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003612:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003616:	f023 0301 	bic.w	r3, r3, #1
2000361a:	b2da      	uxtb	r2, r3
2000361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000361e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
20003622:	e03a      	b.n	2000369a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
20003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003626:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000362a:	f043 0301 	orr.w	r3, r3, #1
2000362e:	b2da      	uxtb	r2, r3
20003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
20003636:	68ba      	ldr	r2, [r7, #8]
20003638:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000363a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
2000363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000363e:	699b      	ldr	r3, [r3, #24]
20003640:	2b00      	cmp	r3, #0
20003642:	d10a      	bne.n	2000365a <prvProcessReceivedCommands+0x15e>
	__asm volatile
20003644:	f04f 0350 	mov.w	r3, #80	; 0x50
20003648:	f383 8811 	msr	BASEPRI, r3
2000364c:	f3bf 8f6f 	isb	sy
20003650:	f3bf 8f4f 	dsb	sy
20003654:	617b      	str	r3, [r7, #20]
}
20003656:	bf00      	nop
20003658:	e7fe      	b.n	20003658 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
2000365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000365c:	699a      	ldr	r2, [r3, #24]
2000365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003660:	18d1      	adds	r1, r2, r3
20003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
20003668:	f7ff ff06 	bl	20003478 <prvInsertTimerInActiveList>
					break;
2000366c:	e015      	b.n	2000369a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
2000366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
20003674:	f003 0302 	and.w	r3, r3, #2
20003678:	2b00      	cmp	r3, #0
2000367a:	d103      	bne.n	20003684 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
2000367c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
2000367e:	f000 fbdf 	bl	20003e40 <vPortFree>
20003682:	e00a      	b.n	2000369a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
20003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
2000368a:	f023 0301 	bic.w	r3, r3, #1
2000368e:	b2da      	uxtb	r2, r3
20003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
20003692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
20003696:	e000      	b.n	2000369a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
20003698:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
2000369a:	4b08      	ldr	r3, [pc, #32]	; (200036bc <prvProcessReceivedCommands+0x1c0>)
2000369c:	681b      	ldr	r3, [r3, #0]
2000369e:	1d39      	adds	r1, r7, #4
200036a0:	2200      	movs	r2, #0
200036a2:	4618      	mov	r0, r3
200036a4:	f7fe f8fc 	bl	200018a0 <xQueueReceive>
200036a8:	4603      	mov	r3, r0
200036aa:	2b00      	cmp	r3, #0
200036ac:	f47f af2a 	bne.w	20003504 <prvProcessReceivedCommands+0x8>
	}
}
200036b0:	bf00      	nop
200036b2:	bf00      	nop
200036b4:	3730      	adds	r7, #48	; 0x30
200036b6:	46bd      	mov	sp, r7
200036b8:	bd80      	pop	{r7, pc}
200036ba:	bf00      	nop
200036bc:	2000b1bc 	.word	0x2000b1bc

200036c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
200036c0:	b580      	push	{r7, lr}
200036c2:	b088      	sub	sp, #32
200036c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
200036c6:	e048      	b.n	2000375a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
200036c8:	4b2d      	ldr	r3, [pc, #180]	; (20003780 <prvSwitchTimerLists+0xc0>)
200036ca:	681b      	ldr	r3, [r3, #0]
200036cc:	68db      	ldr	r3, [r3, #12]
200036ce:	681b      	ldr	r3, [r3, #0]
200036d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
200036d2:	4b2b      	ldr	r3, [pc, #172]	; (20003780 <prvSwitchTimerLists+0xc0>)
200036d4:	681b      	ldr	r3, [r3, #0]
200036d6:	68db      	ldr	r3, [r3, #12]
200036d8:	68db      	ldr	r3, [r3, #12]
200036da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
200036dc:	68fb      	ldr	r3, [r7, #12]
200036de:	3304      	adds	r3, #4
200036e0:	4618      	mov	r0, r3
200036e2:	f7fd fce5 	bl	200010b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
200036e6:	68fb      	ldr	r3, [r7, #12]
200036e8:	6a1b      	ldr	r3, [r3, #32]
200036ea:	68f8      	ldr	r0, [r7, #12]
200036ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
200036ee:	68fb      	ldr	r3, [r7, #12]
200036f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
200036f4:	f003 0304 	and.w	r3, r3, #4
200036f8:	2b00      	cmp	r3, #0
200036fa:	d02e      	beq.n	2000375a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
200036fc:	68fb      	ldr	r3, [r7, #12]
200036fe:	699b      	ldr	r3, [r3, #24]
20003700:	693a      	ldr	r2, [r7, #16]
20003702:	4413      	add	r3, r2
20003704:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
20003706:	68ba      	ldr	r2, [r7, #8]
20003708:	693b      	ldr	r3, [r7, #16]
2000370a:	429a      	cmp	r2, r3
2000370c:	d90e      	bls.n	2000372c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
2000370e:	68fb      	ldr	r3, [r7, #12]
20003710:	68ba      	ldr	r2, [r7, #8]
20003712:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
20003714:	68fb      	ldr	r3, [r7, #12]
20003716:	68fa      	ldr	r2, [r7, #12]
20003718:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
2000371a:	4b19      	ldr	r3, [pc, #100]	; (20003780 <prvSwitchTimerLists+0xc0>)
2000371c:	681a      	ldr	r2, [r3, #0]
2000371e:	68fb      	ldr	r3, [r7, #12]
20003720:	3304      	adds	r3, #4
20003722:	4619      	mov	r1, r3
20003724:	4610      	mov	r0, r2
20003726:	f7fd fc8a 	bl	2000103e <vListInsert>
2000372a:	e016      	b.n	2000375a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
2000372c:	2300      	movs	r3, #0
2000372e:	9300      	str	r3, [sp, #0]
20003730:	2300      	movs	r3, #0
20003732:	693a      	ldr	r2, [r7, #16]
20003734:	2100      	movs	r1, #0
20003736:	68f8      	ldr	r0, [r7, #12]
20003738:	f7ff fd60 	bl	200031fc <xTimerGenericCommand>
2000373c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
2000373e:	687b      	ldr	r3, [r7, #4]
20003740:	2b00      	cmp	r3, #0
20003742:	d10a      	bne.n	2000375a <prvSwitchTimerLists+0x9a>
	__asm volatile
20003744:	f04f 0350 	mov.w	r3, #80	; 0x50
20003748:	f383 8811 	msr	BASEPRI, r3
2000374c:	f3bf 8f6f 	isb	sy
20003750:	f3bf 8f4f 	dsb	sy
20003754:	603b      	str	r3, [r7, #0]
}
20003756:	bf00      	nop
20003758:	e7fe      	b.n	20003758 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
2000375a:	4b09      	ldr	r3, [pc, #36]	; (20003780 <prvSwitchTimerLists+0xc0>)
2000375c:	681b      	ldr	r3, [r3, #0]
2000375e:	681b      	ldr	r3, [r3, #0]
20003760:	2b00      	cmp	r3, #0
20003762:	d1b1      	bne.n	200036c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
20003764:	4b06      	ldr	r3, [pc, #24]	; (20003780 <prvSwitchTimerLists+0xc0>)
20003766:	681b      	ldr	r3, [r3, #0]
20003768:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
2000376a:	4b06      	ldr	r3, [pc, #24]	; (20003784 <prvSwitchTimerLists+0xc4>)
2000376c:	681b      	ldr	r3, [r3, #0]
2000376e:	4a04      	ldr	r2, [pc, #16]	; (20003780 <prvSwitchTimerLists+0xc0>)
20003770:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
20003772:	4a04      	ldr	r2, [pc, #16]	; (20003784 <prvSwitchTimerLists+0xc4>)
20003774:	697b      	ldr	r3, [r7, #20]
20003776:	6013      	str	r3, [r2, #0]
}
20003778:	bf00      	nop
2000377a:	3718      	adds	r7, #24
2000377c:	46bd      	mov	sp, r7
2000377e:	bd80      	pop	{r7, pc}
20003780:	2000b1b4 	.word	0x2000b1b4
20003784:	2000b1b8 	.word	0x2000b1b8

20003788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
20003788:	b580      	push	{r7, lr}
2000378a:	b082      	sub	sp, #8
2000378c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
2000378e:	f000 f969 	bl	20003a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
20003792:	4b15      	ldr	r3, [pc, #84]	; (200037e8 <prvCheckForValidListAndQueue+0x60>)
20003794:	681b      	ldr	r3, [r3, #0]
20003796:	2b00      	cmp	r3, #0
20003798:	d120      	bne.n	200037dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
2000379a:	4814      	ldr	r0, [pc, #80]	; (200037ec <prvCheckForValidListAndQueue+0x64>)
2000379c:	f7fd fbfe 	bl	20000f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
200037a0:	4813      	ldr	r0, [pc, #76]	; (200037f0 <prvCheckForValidListAndQueue+0x68>)
200037a2:	f7fd fbfb 	bl	20000f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
200037a6:	4b13      	ldr	r3, [pc, #76]	; (200037f4 <prvCheckForValidListAndQueue+0x6c>)
200037a8:	4a10      	ldr	r2, [pc, #64]	; (200037ec <prvCheckForValidListAndQueue+0x64>)
200037aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
200037ac:	4b12      	ldr	r3, [pc, #72]	; (200037f8 <prvCheckForValidListAndQueue+0x70>)
200037ae:	4a10      	ldr	r2, [pc, #64]	; (200037f0 <prvCheckForValidListAndQueue+0x68>)
200037b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
200037b2:	2300      	movs	r3, #0
200037b4:	9300      	str	r3, [sp, #0]
200037b6:	4b11      	ldr	r3, [pc, #68]	; (200037fc <prvCheckForValidListAndQueue+0x74>)
200037b8:	4a11      	ldr	r2, [pc, #68]	; (20003800 <prvCheckForValidListAndQueue+0x78>)
200037ba:	2110      	movs	r1, #16
200037bc:	200a      	movs	r0, #10
200037be:	f7fd fd09 	bl	200011d4 <xQueueGenericCreateStatic>
200037c2:	4603      	mov	r3, r0
200037c4:	4a08      	ldr	r2, [pc, #32]	; (200037e8 <prvCheckForValidListAndQueue+0x60>)
200037c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
200037c8:	4b07      	ldr	r3, [pc, #28]	; (200037e8 <prvCheckForValidListAndQueue+0x60>)
200037ca:	681b      	ldr	r3, [r3, #0]
200037cc:	2b00      	cmp	r3, #0
200037ce:	d005      	beq.n	200037dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
200037d0:	4b05      	ldr	r3, [pc, #20]	; (200037e8 <prvCheckForValidListAndQueue+0x60>)
200037d2:	681b      	ldr	r3, [r3, #0]
200037d4:	490b      	ldr	r1, [pc, #44]	; (20003804 <prvCheckForValidListAndQueue+0x7c>)
200037d6:	4618      	mov	r0, r3
200037d8:	f7fe fc1a 	bl	20002010 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
200037dc:	f000 f972 	bl	20003ac4 <vPortExitCritical>
}
200037e0:	bf00      	nop
200037e2:	46bd      	mov	sp, r7
200037e4:	bd80      	pop	{r7, pc}
200037e6:	bf00      	nop
200037e8:	2000b1bc 	.word	0x2000b1bc
200037ec:	2000b18c 	.word	0x2000b18c
200037f0:	2000b1a0 	.word	0x2000b1a0
200037f4:	2000b1b4 	.word	0x2000b1b4
200037f8:	2000b1b8 	.word	0x2000b1b8
200037fc:	2000b268 	.word	0x2000b268
20003800:	2000b1c8 	.word	0x2000b1c8
20003804:	20006570 	.word	0x20006570

20003808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
20003808:	b480      	push	{r7}
2000380a:	b085      	sub	sp, #20
2000380c:	af00      	add	r7, sp, #0
2000380e:	60f8      	str	r0, [r7, #12]
20003810:	60b9      	str	r1, [r7, #8]
20003812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
20003814:	68fb      	ldr	r3, [r7, #12]
20003816:	3b04      	subs	r3, #4
20003818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
2000381a:	68fb      	ldr	r3, [r7, #12]
2000381c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
20003820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003822:	68fb      	ldr	r3, [r7, #12]
20003824:	3b04      	subs	r3, #4
20003826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
20003828:	68bb      	ldr	r3, [r7, #8]
2000382a:	f023 0201 	bic.w	r2, r3, #1
2000382e:	68fb      	ldr	r3, [r7, #12]
20003830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
20003832:	68fb      	ldr	r3, [r7, #12]
20003834:	3b04      	subs	r3, #4
20003836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
20003838:	4a0c      	ldr	r2, [pc, #48]	; (2000386c <pxPortInitialiseStack+0x64>)
2000383a:	68fb      	ldr	r3, [r7, #12]
2000383c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
2000383e:	68fb      	ldr	r3, [r7, #12]
20003840:	3b14      	subs	r3, #20
20003842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
20003844:	687a      	ldr	r2, [r7, #4]
20003846:	68fb      	ldr	r3, [r7, #12]
20003848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
2000384a:	68fb      	ldr	r3, [r7, #12]
2000384c:	3b04      	subs	r3, #4
2000384e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
20003850:	68fb      	ldr	r3, [r7, #12]
20003852:	f06f 0202 	mvn.w	r2, #2
20003856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
20003858:	68fb      	ldr	r3, [r7, #12]
2000385a:	3b20      	subs	r3, #32
2000385c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
2000385e:	68fb      	ldr	r3, [r7, #12]
}
20003860:	4618      	mov	r0, r3
20003862:	3714      	adds	r7, #20
20003864:	46bd      	mov	sp, r7
20003866:	f85d 7b04 	ldr.w	r7, [sp], #4
2000386a:	4770      	bx	lr
2000386c:	20003871 	.word	0x20003871

20003870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
20003870:	b480      	push	{r7}
20003872:	b085      	sub	sp, #20
20003874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
20003876:	2300      	movs	r3, #0
20003878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
2000387a:	4b12      	ldr	r3, [pc, #72]	; (200038c4 <prvTaskExitError+0x54>)
2000387c:	681b      	ldr	r3, [r3, #0]
2000387e:	f1b3 3fff 	cmp.w	r3, #4294967295
20003882:	d00a      	beq.n	2000389a <prvTaskExitError+0x2a>
	__asm volatile
20003884:	f04f 0350 	mov.w	r3, #80	; 0x50
20003888:	f383 8811 	msr	BASEPRI, r3
2000388c:	f3bf 8f6f 	isb	sy
20003890:	f3bf 8f4f 	dsb	sy
20003894:	60fb      	str	r3, [r7, #12]
}
20003896:	bf00      	nop
20003898:	e7fe      	b.n	20003898 <prvTaskExitError+0x28>
	__asm volatile
2000389a:	f04f 0350 	mov.w	r3, #80	; 0x50
2000389e:	f383 8811 	msr	BASEPRI, r3
200038a2:	f3bf 8f6f 	isb	sy
200038a6:	f3bf 8f4f 	dsb	sy
200038aa:	60bb      	str	r3, [r7, #8]
}
200038ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
200038ae:	bf00      	nop
200038b0:	687b      	ldr	r3, [r7, #4]
200038b2:	2b00      	cmp	r3, #0
200038b4:	d0fc      	beq.n	200038b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
200038b6:	bf00      	nop
200038b8:	bf00      	nop
200038ba:	3714      	adds	r7, #20
200038bc:	46bd      	mov	sp, r7
200038be:	f85d 7b04 	ldr.w	r7, [sp], #4
200038c2:	4770      	bx	lr
200038c4:	2000a3f4 	.word	0x2000a3f4
	...

200038d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
200038d0:	4b07      	ldr	r3, [pc, #28]	; (200038f0 <pxCurrentTCBConst2>)
200038d2:	6819      	ldr	r1, [r3, #0]
200038d4:	6808      	ldr	r0, [r1, #0]
200038d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200038da:	f380 8809 	msr	PSP, r0
200038de:	f3bf 8f6f 	isb	sy
200038e2:	f04f 0000 	mov.w	r0, #0
200038e6:	f380 8811 	msr	BASEPRI, r0
200038ea:	4770      	bx	lr
200038ec:	f3af 8000 	nop.w

200038f0 <pxCurrentTCBConst2>:
200038f0:	2000ac8c 	.word	0x2000ac8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
200038f4:	bf00      	nop
200038f6:	bf00      	nop

200038f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
200038f8:	4808      	ldr	r0, [pc, #32]	; (2000391c <prvPortStartFirstTask+0x24>)
200038fa:	6800      	ldr	r0, [r0, #0]
200038fc:	6800      	ldr	r0, [r0, #0]
200038fe:	f380 8808 	msr	MSP, r0
20003902:	f04f 0000 	mov.w	r0, #0
20003906:	f380 8814 	msr	CONTROL, r0
2000390a:	b662      	cpsie	i
2000390c:	b661      	cpsie	f
2000390e:	f3bf 8f4f 	dsb	sy
20003912:	f3bf 8f6f 	isb	sy
20003916:	df00      	svc	0
20003918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
2000391a:	bf00      	nop
2000391c:	e000ed08 	.word	0xe000ed08

20003920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
20003920:	b580      	push	{r7, lr}
20003922:	b086      	sub	sp, #24
20003924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
20003926:	4b46      	ldr	r3, [pc, #280]	; (20003a40 <xPortStartScheduler+0x120>)
20003928:	681b      	ldr	r3, [r3, #0]
2000392a:	4a46      	ldr	r2, [pc, #280]	; (20003a44 <xPortStartScheduler+0x124>)
2000392c:	4293      	cmp	r3, r2
2000392e:	d10a      	bne.n	20003946 <xPortStartScheduler+0x26>
	__asm volatile
20003930:	f04f 0350 	mov.w	r3, #80	; 0x50
20003934:	f383 8811 	msr	BASEPRI, r3
20003938:	f3bf 8f6f 	isb	sy
2000393c:	f3bf 8f4f 	dsb	sy
20003940:	613b      	str	r3, [r7, #16]
}
20003942:	bf00      	nop
20003944:	e7fe      	b.n	20003944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
20003946:	4b3e      	ldr	r3, [pc, #248]	; (20003a40 <xPortStartScheduler+0x120>)
20003948:	681b      	ldr	r3, [r3, #0]
2000394a:	4a3f      	ldr	r2, [pc, #252]	; (20003a48 <xPortStartScheduler+0x128>)
2000394c:	4293      	cmp	r3, r2
2000394e:	d10a      	bne.n	20003966 <xPortStartScheduler+0x46>
	__asm volatile
20003950:	f04f 0350 	mov.w	r3, #80	; 0x50
20003954:	f383 8811 	msr	BASEPRI, r3
20003958:	f3bf 8f6f 	isb	sy
2000395c:	f3bf 8f4f 	dsb	sy
20003960:	60fb      	str	r3, [r7, #12]
}
20003962:	bf00      	nop
20003964:	e7fe      	b.n	20003964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
20003966:	4b39      	ldr	r3, [pc, #228]	; (20003a4c <xPortStartScheduler+0x12c>)
20003968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
2000396a:	697b      	ldr	r3, [r7, #20]
2000396c:	781b      	ldrb	r3, [r3, #0]
2000396e:	b2db      	uxtb	r3, r3
20003970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
20003972:	697b      	ldr	r3, [r7, #20]
20003974:	22ff      	movs	r2, #255	; 0xff
20003976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
20003978:	697b      	ldr	r3, [r7, #20]
2000397a:	781b      	ldrb	r3, [r3, #0]
2000397c:	b2db      	uxtb	r3, r3
2000397e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
20003980:	78fb      	ldrb	r3, [r7, #3]
20003982:	b2db      	uxtb	r3, r3
20003984:	f003 0350 	and.w	r3, r3, #80	; 0x50
20003988:	b2da      	uxtb	r2, r3
2000398a:	4b31      	ldr	r3, [pc, #196]	; (20003a50 <xPortStartScheduler+0x130>)
2000398c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
2000398e:	4b31      	ldr	r3, [pc, #196]	; (20003a54 <xPortStartScheduler+0x134>)
20003990:	2207      	movs	r2, #7
20003992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
20003994:	e009      	b.n	200039aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
20003996:	4b2f      	ldr	r3, [pc, #188]	; (20003a54 <xPortStartScheduler+0x134>)
20003998:	681b      	ldr	r3, [r3, #0]
2000399a:	3b01      	subs	r3, #1
2000399c:	4a2d      	ldr	r2, [pc, #180]	; (20003a54 <xPortStartScheduler+0x134>)
2000399e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
200039a0:	78fb      	ldrb	r3, [r7, #3]
200039a2:	b2db      	uxtb	r3, r3
200039a4:	005b      	lsls	r3, r3, #1
200039a6:	b2db      	uxtb	r3, r3
200039a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
200039aa:	78fb      	ldrb	r3, [r7, #3]
200039ac:	b2db      	uxtb	r3, r3
200039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
200039b2:	2b80      	cmp	r3, #128	; 0x80
200039b4:	d0ef      	beq.n	20003996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
200039b6:	4b27      	ldr	r3, [pc, #156]	; (20003a54 <xPortStartScheduler+0x134>)
200039b8:	681b      	ldr	r3, [r3, #0]
200039ba:	f1c3 0307 	rsb	r3, r3, #7
200039be:	2b04      	cmp	r3, #4
200039c0:	d00a      	beq.n	200039d8 <xPortStartScheduler+0xb8>
	__asm volatile
200039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
200039c6:	f383 8811 	msr	BASEPRI, r3
200039ca:	f3bf 8f6f 	isb	sy
200039ce:	f3bf 8f4f 	dsb	sy
200039d2:	60bb      	str	r3, [r7, #8]
}
200039d4:	bf00      	nop
200039d6:	e7fe      	b.n	200039d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
200039d8:	4b1e      	ldr	r3, [pc, #120]	; (20003a54 <xPortStartScheduler+0x134>)
200039da:	681b      	ldr	r3, [r3, #0]
200039dc:	021b      	lsls	r3, r3, #8
200039de:	4a1d      	ldr	r2, [pc, #116]	; (20003a54 <xPortStartScheduler+0x134>)
200039e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
200039e2:	4b1c      	ldr	r3, [pc, #112]	; (20003a54 <xPortStartScheduler+0x134>)
200039e4:	681b      	ldr	r3, [r3, #0]
200039e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
200039ea:	4a1a      	ldr	r2, [pc, #104]	; (20003a54 <xPortStartScheduler+0x134>)
200039ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
200039ee:	687b      	ldr	r3, [r7, #4]
200039f0:	b2da      	uxtb	r2, r3
200039f2:	697b      	ldr	r3, [r7, #20]
200039f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
200039f6:	4b18      	ldr	r3, [pc, #96]	; (20003a58 <xPortStartScheduler+0x138>)
200039f8:	681b      	ldr	r3, [r3, #0]
200039fa:	4a17      	ldr	r2, [pc, #92]	; (20003a58 <xPortStartScheduler+0x138>)
200039fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20003a00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
20003a02:	4b15      	ldr	r3, [pc, #84]	; (20003a58 <xPortStartScheduler+0x138>)
20003a04:	681b      	ldr	r3, [r3, #0]
20003a06:	4a14      	ldr	r2, [pc, #80]	; (20003a58 <xPortStartScheduler+0x138>)
20003a08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
20003a0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
20003a0e:	f000 f8dd 	bl	20003bcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
20003a12:	4b12      	ldr	r3, [pc, #72]	; (20003a5c <xPortStartScheduler+0x13c>)
20003a14:	2200      	movs	r2, #0
20003a16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
20003a18:	f000 f8fc 	bl	20003c14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
20003a1c:	4b10      	ldr	r3, [pc, #64]	; (20003a60 <xPortStartScheduler+0x140>)
20003a1e:	681b      	ldr	r3, [r3, #0]
20003a20:	4a0f      	ldr	r2, [pc, #60]	; (20003a60 <xPortStartScheduler+0x140>)
20003a22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
20003a26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
20003a28:	f7ff ff66 	bl	200038f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
20003a2c:	f7fe ff4a 	bl	200028c4 <vTaskSwitchContext>
	prvTaskExitError();
20003a30:	f7ff ff1e 	bl	20003870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
20003a34:	2300      	movs	r3, #0
}
20003a36:	4618      	mov	r0, r3
20003a38:	3718      	adds	r7, #24
20003a3a:	46bd      	mov	sp, r7
20003a3c:	bd80      	pop	{r7, pc}
20003a3e:	bf00      	nop
20003a40:	e000ed00 	.word	0xe000ed00
20003a44:	410fc271 	.word	0x410fc271
20003a48:	410fc270 	.word	0x410fc270
20003a4c:	e000e400 	.word	0xe000e400
20003a50:	2000b2b8 	.word	0x2000b2b8
20003a54:	2000b2bc 	.word	0x2000b2bc
20003a58:	e000ed20 	.word	0xe000ed20
20003a5c:	2000a3f4 	.word	0x2000a3f4
20003a60:	e000ef34 	.word	0xe000ef34

20003a64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
20003a64:	b480      	push	{r7}
20003a66:	b083      	sub	sp, #12
20003a68:	af00      	add	r7, sp, #0
	__asm volatile
20003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
20003a6e:	f383 8811 	msr	BASEPRI, r3
20003a72:	f3bf 8f6f 	isb	sy
20003a76:	f3bf 8f4f 	dsb	sy
20003a7a:	607b      	str	r3, [r7, #4]
}
20003a7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
20003a7e:	4b0f      	ldr	r3, [pc, #60]	; (20003abc <vPortEnterCritical+0x58>)
20003a80:	681b      	ldr	r3, [r3, #0]
20003a82:	3301      	adds	r3, #1
20003a84:	4a0d      	ldr	r2, [pc, #52]	; (20003abc <vPortEnterCritical+0x58>)
20003a86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
20003a88:	4b0c      	ldr	r3, [pc, #48]	; (20003abc <vPortEnterCritical+0x58>)
20003a8a:	681b      	ldr	r3, [r3, #0]
20003a8c:	2b01      	cmp	r3, #1
20003a8e:	d10f      	bne.n	20003ab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
20003a90:	4b0b      	ldr	r3, [pc, #44]	; (20003ac0 <vPortEnterCritical+0x5c>)
20003a92:	681b      	ldr	r3, [r3, #0]
20003a94:	b2db      	uxtb	r3, r3
20003a96:	2b00      	cmp	r3, #0
20003a98:	d00a      	beq.n	20003ab0 <vPortEnterCritical+0x4c>
	__asm volatile
20003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
20003a9e:	f383 8811 	msr	BASEPRI, r3
20003aa2:	f3bf 8f6f 	isb	sy
20003aa6:	f3bf 8f4f 	dsb	sy
20003aaa:	603b      	str	r3, [r7, #0]
}
20003aac:	bf00      	nop
20003aae:	e7fe      	b.n	20003aae <vPortEnterCritical+0x4a>
	}
}
20003ab0:	bf00      	nop
20003ab2:	370c      	adds	r7, #12
20003ab4:	46bd      	mov	sp, r7
20003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
20003aba:	4770      	bx	lr
20003abc:	2000a3f4 	.word	0x2000a3f4
20003ac0:	e000ed04 	.word	0xe000ed04

20003ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
20003ac4:	b480      	push	{r7}
20003ac6:	b083      	sub	sp, #12
20003ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
20003aca:	4b12      	ldr	r3, [pc, #72]	; (20003b14 <vPortExitCritical+0x50>)
20003acc:	681b      	ldr	r3, [r3, #0]
20003ace:	2b00      	cmp	r3, #0
20003ad0:	d10a      	bne.n	20003ae8 <vPortExitCritical+0x24>
	__asm volatile
20003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
20003ad6:	f383 8811 	msr	BASEPRI, r3
20003ada:	f3bf 8f6f 	isb	sy
20003ade:	f3bf 8f4f 	dsb	sy
20003ae2:	607b      	str	r3, [r7, #4]
}
20003ae4:	bf00      	nop
20003ae6:	e7fe      	b.n	20003ae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
20003ae8:	4b0a      	ldr	r3, [pc, #40]	; (20003b14 <vPortExitCritical+0x50>)
20003aea:	681b      	ldr	r3, [r3, #0]
20003aec:	3b01      	subs	r3, #1
20003aee:	4a09      	ldr	r2, [pc, #36]	; (20003b14 <vPortExitCritical+0x50>)
20003af0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
20003af2:	4b08      	ldr	r3, [pc, #32]	; (20003b14 <vPortExitCritical+0x50>)
20003af4:	681b      	ldr	r3, [r3, #0]
20003af6:	2b00      	cmp	r3, #0
20003af8:	d105      	bne.n	20003b06 <vPortExitCritical+0x42>
20003afa:	2300      	movs	r3, #0
20003afc:	603b      	str	r3, [r7, #0]
	__asm volatile
20003afe:	683b      	ldr	r3, [r7, #0]
20003b00:	f383 8811 	msr	BASEPRI, r3
}
20003b04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
20003b06:	bf00      	nop
20003b08:	370c      	adds	r7, #12
20003b0a:	46bd      	mov	sp, r7
20003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003b10:	4770      	bx	lr
20003b12:	bf00      	nop
20003b14:	2000a3f4 	.word	0x2000a3f4
	...

20003b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
20003b20:	f3ef 8009 	mrs	r0, PSP
20003b24:	f3bf 8f6f 	isb	sy
20003b28:	4b15      	ldr	r3, [pc, #84]	; (20003b80 <pxCurrentTCBConst>)
20003b2a:	681a      	ldr	r2, [r3, #0]
20003b2c:	f01e 0f10 	tst.w	lr, #16
20003b30:	bf08      	it	eq
20003b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
20003b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003b3a:	6010      	str	r0, [r2, #0]
20003b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
20003b40:	f04f 0050 	mov.w	r0, #80	; 0x50
20003b44:	f380 8811 	msr	BASEPRI, r0
20003b48:	f3bf 8f4f 	dsb	sy
20003b4c:	f3bf 8f6f 	isb	sy
20003b50:	f7fe feb8 	bl	200028c4 <vTaskSwitchContext>
20003b54:	f04f 0000 	mov.w	r0, #0
20003b58:	f380 8811 	msr	BASEPRI, r0
20003b5c:	bc09      	pop	{r0, r3}
20003b5e:	6819      	ldr	r1, [r3, #0]
20003b60:	6808      	ldr	r0, [r1, #0]
20003b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20003b66:	f01e 0f10 	tst.w	lr, #16
20003b6a:	bf08      	it	eq
20003b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
20003b70:	f380 8809 	msr	PSP, r0
20003b74:	f3bf 8f6f 	isb	sy
20003b78:	4770      	bx	lr
20003b7a:	bf00      	nop
20003b7c:	f3af 8000 	nop.w

20003b80 <pxCurrentTCBConst>:
20003b80:	2000ac8c 	.word	0x2000ac8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
20003b84:	bf00      	nop
20003b86:	bf00      	nop

20003b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
20003b88:	b580      	push	{r7, lr}
20003b8a:	b082      	sub	sp, #8
20003b8c:	af00      	add	r7, sp, #0
	__asm volatile
20003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003b92:	f383 8811 	msr	BASEPRI, r3
20003b96:	f3bf 8f6f 	isb	sy
20003b9a:	f3bf 8f4f 	dsb	sy
20003b9e:	607b      	str	r3, [r7, #4]
}
20003ba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
20003ba2:	f7fe fdd5 	bl	20002750 <xTaskIncrementTick>
20003ba6:	4603      	mov	r3, r0
20003ba8:	2b00      	cmp	r3, #0
20003baa:	d003      	beq.n	20003bb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
20003bac:	4b06      	ldr	r3, [pc, #24]	; (20003bc8 <xPortSysTickHandler+0x40>)
20003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
20003bb2:	601a      	str	r2, [r3, #0]
20003bb4:	2300      	movs	r3, #0
20003bb6:	603b      	str	r3, [r7, #0]
	__asm volatile
20003bb8:	683b      	ldr	r3, [r7, #0]
20003bba:	f383 8811 	msr	BASEPRI, r3
}
20003bbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
20003bc0:	bf00      	nop
20003bc2:	3708      	adds	r7, #8
20003bc4:	46bd      	mov	sp, r7
20003bc6:	bd80      	pop	{r7, pc}
20003bc8:	e000ed04 	.word	0xe000ed04

20003bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
20003bcc:	b480      	push	{r7}
20003bce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
20003bd0:	4b0b      	ldr	r3, [pc, #44]	; (20003c00 <vPortSetupTimerInterrupt+0x34>)
20003bd2:	2200      	movs	r2, #0
20003bd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
20003bd6:	4b0b      	ldr	r3, [pc, #44]	; (20003c04 <vPortSetupTimerInterrupt+0x38>)
20003bd8:	2200      	movs	r2, #0
20003bda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
20003bdc:	4b0a      	ldr	r3, [pc, #40]	; (20003c08 <vPortSetupTimerInterrupt+0x3c>)
20003bde:	681b      	ldr	r3, [r3, #0]
20003be0:	4a0a      	ldr	r2, [pc, #40]	; (20003c0c <vPortSetupTimerInterrupt+0x40>)
20003be2:	fba2 2303 	umull	r2, r3, r2, r3
20003be6:	099b      	lsrs	r3, r3, #6
20003be8:	4a09      	ldr	r2, [pc, #36]	; (20003c10 <vPortSetupTimerInterrupt+0x44>)
20003bea:	3b01      	subs	r3, #1
20003bec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
20003bee:	4b04      	ldr	r3, [pc, #16]	; (20003c00 <vPortSetupTimerInterrupt+0x34>)
20003bf0:	2207      	movs	r2, #7
20003bf2:	601a      	str	r2, [r3, #0]
}
20003bf4:	bf00      	nop
20003bf6:	46bd      	mov	sp, r7
20003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
20003bfc:	4770      	bx	lr
20003bfe:	bf00      	nop
20003c00:	e000e010 	.word	0xe000e010
20003c04:	e000e018 	.word	0xe000e018
20003c08:	2000a44c 	.word	0x2000a44c
20003c0c:	10624dd3 	.word	0x10624dd3
20003c10:	e000e014 	.word	0xe000e014

20003c14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
20003c14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 20003c24 <vPortEnableVFP+0x10>
20003c18:	6801      	ldr	r1, [r0, #0]
20003c1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
20003c1e:	6001      	str	r1, [r0, #0]
20003c20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
20003c22:	bf00      	nop
20003c24:	e000ed88 	.word	0xe000ed88

20003c28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
20003c28:	b480      	push	{r7}
20003c2a:	b085      	sub	sp, #20
20003c2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
20003c2e:	f3ef 8305 	mrs	r3, IPSR
20003c32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
20003c34:	68fb      	ldr	r3, [r7, #12]
20003c36:	2b0f      	cmp	r3, #15
20003c38:	d914      	bls.n	20003c64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
20003c3a:	4a17      	ldr	r2, [pc, #92]	; (20003c98 <vPortValidateInterruptPriority+0x70>)
20003c3c:	68fb      	ldr	r3, [r7, #12]
20003c3e:	4413      	add	r3, r2
20003c40:	781b      	ldrb	r3, [r3, #0]
20003c42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
20003c44:	4b15      	ldr	r3, [pc, #84]	; (20003c9c <vPortValidateInterruptPriority+0x74>)
20003c46:	781b      	ldrb	r3, [r3, #0]
20003c48:	7afa      	ldrb	r2, [r7, #11]
20003c4a:	429a      	cmp	r2, r3
20003c4c:	d20a      	bcs.n	20003c64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
20003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003c52:	f383 8811 	msr	BASEPRI, r3
20003c56:	f3bf 8f6f 	isb	sy
20003c5a:	f3bf 8f4f 	dsb	sy
20003c5e:	607b      	str	r3, [r7, #4]
}
20003c60:	bf00      	nop
20003c62:	e7fe      	b.n	20003c62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
20003c64:	4b0e      	ldr	r3, [pc, #56]	; (20003ca0 <vPortValidateInterruptPriority+0x78>)
20003c66:	681b      	ldr	r3, [r3, #0]
20003c68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
20003c6c:	4b0d      	ldr	r3, [pc, #52]	; (20003ca4 <vPortValidateInterruptPriority+0x7c>)
20003c6e:	681b      	ldr	r3, [r3, #0]
20003c70:	429a      	cmp	r2, r3
20003c72:	d90a      	bls.n	20003c8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
20003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
20003c78:	f383 8811 	msr	BASEPRI, r3
20003c7c:	f3bf 8f6f 	isb	sy
20003c80:	f3bf 8f4f 	dsb	sy
20003c84:	603b      	str	r3, [r7, #0]
}
20003c86:	bf00      	nop
20003c88:	e7fe      	b.n	20003c88 <vPortValidateInterruptPriority+0x60>
	}
20003c8a:	bf00      	nop
20003c8c:	3714      	adds	r7, #20
20003c8e:	46bd      	mov	sp, r7
20003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
20003c94:	4770      	bx	lr
20003c96:	bf00      	nop
20003c98:	e000e3f0 	.word	0xe000e3f0
20003c9c:	2000b2b8 	.word	0x2000b2b8
20003ca0:	e000ed0c 	.word	0xe000ed0c
20003ca4:	2000b2bc 	.word	0x2000b2bc

20003ca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
20003ca8:	b580      	push	{r7, lr}
20003caa:	b08a      	sub	sp, #40	; 0x28
20003cac:	af00      	add	r7, sp, #0
20003cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
20003cb0:	2300      	movs	r3, #0
20003cb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
20003cb4:	f7fe fc90 	bl	200025d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
20003cb8:	4b5b      	ldr	r3, [pc, #364]	; (20003e28 <pvPortMalloc+0x180>)
20003cba:	681b      	ldr	r3, [r3, #0]
20003cbc:	2b00      	cmp	r3, #0
20003cbe:	d101      	bne.n	20003cc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
20003cc0:	f000 f920 	bl	20003f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
20003cc4:	4b59      	ldr	r3, [pc, #356]	; (20003e2c <pvPortMalloc+0x184>)
20003cc6:	681a      	ldr	r2, [r3, #0]
20003cc8:	687b      	ldr	r3, [r7, #4]
20003cca:	4013      	ands	r3, r2
20003ccc:	2b00      	cmp	r3, #0
20003cce:	f040 8093 	bne.w	20003df8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
20003cd2:	687b      	ldr	r3, [r7, #4]
20003cd4:	2b00      	cmp	r3, #0
20003cd6:	d01d      	beq.n	20003d14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
20003cd8:	2208      	movs	r2, #8
20003cda:	687b      	ldr	r3, [r7, #4]
20003cdc:	4413      	add	r3, r2
20003cde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
20003ce0:	687b      	ldr	r3, [r7, #4]
20003ce2:	f003 0307 	and.w	r3, r3, #7
20003ce6:	2b00      	cmp	r3, #0
20003ce8:	d014      	beq.n	20003d14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
20003cea:	687b      	ldr	r3, [r7, #4]
20003cec:	f023 0307 	bic.w	r3, r3, #7
20003cf0:	3308      	adds	r3, #8
20003cf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
20003cf4:	687b      	ldr	r3, [r7, #4]
20003cf6:	f003 0307 	and.w	r3, r3, #7
20003cfa:	2b00      	cmp	r3, #0
20003cfc:	d00a      	beq.n	20003d14 <pvPortMalloc+0x6c>
	__asm volatile
20003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
20003d02:	f383 8811 	msr	BASEPRI, r3
20003d06:	f3bf 8f6f 	isb	sy
20003d0a:	f3bf 8f4f 	dsb	sy
20003d0e:	617b      	str	r3, [r7, #20]
}
20003d10:	bf00      	nop
20003d12:	e7fe      	b.n	20003d12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
20003d14:	687b      	ldr	r3, [r7, #4]
20003d16:	2b00      	cmp	r3, #0
20003d18:	d06e      	beq.n	20003df8 <pvPortMalloc+0x150>
20003d1a:	4b45      	ldr	r3, [pc, #276]	; (20003e30 <pvPortMalloc+0x188>)
20003d1c:	681b      	ldr	r3, [r3, #0]
20003d1e:	687a      	ldr	r2, [r7, #4]
20003d20:	429a      	cmp	r2, r3
20003d22:	d869      	bhi.n	20003df8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
20003d24:	4b43      	ldr	r3, [pc, #268]	; (20003e34 <pvPortMalloc+0x18c>)
20003d26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
20003d28:	4b42      	ldr	r3, [pc, #264]	; (20003e34 <pvPortMalloc+0x18c>)
20003d2a:	681b      	ldr	r3, [r3, #0]
20003d2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003d2e:	e004      	b.n	20003d3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
20003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
20003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d36:	681b      	ldr	r3, [r3, #0]
20003d38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
20003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d3c:	685b      	ldr	r3, [r3, #4]
20003d3e:	687a      	ldr	r2, [r7, #4]
20003d40:	429a      	cmp	r2, r3
20003d42:	d903      	bls.n	20003d4c <pvPortMalloc+0xa4>
20003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d46:	681b      	ldr	r3, [r3, #0]
20003d48:	2b00      	cmp	r3, #0
20003d4a:	d1f1      	bne.n	20003d30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
20003d4c:	4b36      	ldr	r3, [pc, #216]	; (20003e28 <pvPortMalloc+0x180>)
20003d4e:	681b      	ldr	r3, [r3, #0]
20003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003d52:	429a      	cmp	r2, r3
20003d54:	d050      	beq.n	20003df8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
20003d56:	6a3b      	ldr	r3, [r7, #32]
20003d58:	681b      	ldr	r3, [r3, #0]
20003d5a:	2208      	movs	r2, #8
20003d5c:	4413      	add	r3, r2
20003d5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
20003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d62:	681a      	ldr	r2, [r3, #0]
20003d64:	6a3b      	ldr	r3, [r7, #32]
20003d66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
20003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003d6a:	685a      	ldr	r2, [r3, #4]
20003d6c:	687b      	ldr	r3, [r7, #4]
20003d6e:	1ad2      	subs	r2, r2, r3
20003d70:	2308      	movs	r3, #8
20003d72:	005b      	lsls	r3, r3, #1
20003d74:	429a      	cmp	r2, r3
20003d76:	d91f      	bls.n	20003db8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
20003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20003d7a:	687b      	ldr	r3, [r7, #4]
20003d7c:	4413      	add	r3, r2
20003d7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
20003d80:	69bb      	ldr	r3, [r7, #24]
20003d82:	f003 0307 	and.w	r3, r3, #7
20003d86:	2b00      	cmp	r3, #0
20003d88:	d00a      	beq.n	20003da0 <pvPortMalloc+0xf8>
	__asm volatile
20003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
20003d8e:	f383 8811 	msr	BASEPRI, r3
20003d92:	f3bf 8f6f 	isb	sy
20003d96:	f3bf 8f4f 	dsb	sy
20003d9a:	613b      	str	r3, [r7, #16]
}
20003d9c:	bf00      	nop
20003d9e:	e7fe      	b.n	20003d9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
20003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003da2:	685a      	ldr	r2, [r3, #4]
20003da4:	687b      	ldr	r3, [r7, #4]
20003da6:	1ad2      	subs	r2, r2, r3
20003da8:	69bb      	ldr	r3, [r7, #24]
20003daa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
20003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003dae:	687a      	ldr	r2, [r7, #4]
20003db0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
20003db2:	69b8      	ldr	r0, [r7, #24]
20003db4:	f000 f908 	bl	20003fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
20003db8:	4b1d      	ldr	r3, [pc, #116]	; (20003e30 <pvPortMalloc+0x188>)
20003dba:	681a      	ldr	r2, [r3, #0]
20003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003dbe:	685b      	ldr	r3, [r3, #4]
20003dc0:	1ad3      	subs	r3, r2, r3
20003dc2:	4a1b      	ldr	r2, [pc, #108]	; (20003e30 <pvPortMalloc+0x188>)
20003dc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
20003dc6:	4b1a      	ldr	r3, [pc, #104]	; (20003e30 <pvPortMalloc+0x188>)
20003dc8:	681a      	ldr	r2, [r3, #0]
20003dca:	4b1b      	ldr	r3, [pc, #108]	; (20003e38 <pvPortMalloc+0x190>)
20003dcc:	681b      	ldr	r3, [r3, #0]
20003dce:	429a      	cmp	r2, r3
20003dd0:	d203      	bcs.n	20003dda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
20003dd2:	4b17      	ldr	r3, [pc, #92]	; (20003e30 <pvPortMalloc+0x188>)
20003dd4:	681b      	ldr	r3, [r3, #0]
20003dd6:	4a18      	ldr	r2, [pc, #96]	; (20003e38 <pvPortMalloc+0x190>)
20003dd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
20003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003ddc:	685a      	ldr	r2, [r3, #4]
20003dde:	4b13      	ldr	r3, [pc, #76]	; (20003e2c <pvPortMalloc+0x184>)
20003de0:	681b      	ldr	r3, [r3, #0]
20003de2:	431a      	orrs	r2, r3
20003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003de6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
20003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20003dea:	2200      	movs	r2, #0
20003dec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
20003dee:	4b13      	ldr	r3, [pc, #76]	; (20003e3c <pvPortMalloc+0x194>)
20003df0:	681b      	ldr	r3, [r3, #0]
20003df2:	3301      	adds	r3, #1
20003df4:	4a11      	ldr	r2, [pc, #68]	; (20003e3c <pvPortMalloc+0x194>)
20003df6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
20003df8:	f7fe fbfc 	bl	200025f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
20003dfc:	69fb      	ldr	r3, [r7, #28]
20003dfe:	f003 0307 	and.w	r3, r3, #7
20003e02:	2b00      	cmp	r3, #0
20003e04:	d00a      	beq.n	20003e1c <pvPortMalloc+0x174>
	__asm volatile
20003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
20003e0a:	f383 8811 	msr	BASEPRI, r3
20003e0e:	f3bf 8f6f 	isb	sy
20003e12:	f3bf 8f4f 	dsb	sy
20003e16:	60fb      	str	r3, [r7, #12]
}
20003e18:	bf00      	nop
20003e1a:	e7fe      	b.n	20003e1a <pvPortMalloc+0x172>
	return pvReturn;
20003e1c:	69fb      	ldr	r3, [r7, #28]
}
20003e1e:	4618      	mov	r0, r3
20003e20:	3728      	adds	r7, #40	; 0x28
20003e22:	46bd      	mov	sp, r7
20003e24:	bd80      	pop	{r7, pc}
20003e26:	bf00      	nop
20003e28:	2000eec8 	.word	0x2000eec8
20003e2c:	2000eedc 	.word	0x2000eedc
20003e30:	2000eecc 	.word	0x2000eecc
20003e34:	2000eec0 	.word	0x2000eec0
20003e38:	2000eed0 	.word	0x2000eed0
20003e3c:	2000eed4 	.word	0x2000eed4

20003e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
20003e40:	b580      	push	{r7, lr}
20003e42:	b086      	sub	sp, #24
20003e44:	af00      	add	r7, sp, #0
20003e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
20003e48:	687b      	ldr	r3, [r7, #4]
20003e4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
20003e4c:	687b      	ldr	r3, [r7, #4]
20003e4e:	2b00      	cmp	r3, #0
20003e50:	d04d      	beq.n	20003eee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
20003e52:	2308      	movs	r3, #8
20003e54:	425b      	negs	r3, r3
20003e56:	697a      	ldr	r2, [r7, #20]
20003e58:	4413      	add	r3, r2
20003e5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
20003e5c:	697b      	ldr	r3, [r7, #20]
20003e5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
20003e60:	693b      	ldr	r3, [r7, #16]
20003e62:	685a      	ldr	r2, [r3, #4]
20003e64:	4b24      	ldr	r3, [pc, #144]	; (20003ef8 <vPortFree+0xb8>)
20003e66:	681b      	ldr	r3, [r3, #0]
20003e68:	4013      	ands	r3, r2
20003e6a:	2b00      	cmp	r3, #0
20003e6c:	d10a      	bne.n	20003e84 <vPortFree+0x44>
	__asm volatile
20003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
20003e72:	f383 8811 	msr	BASEPRI, r3
20003e76:	f3bf 8f6f 	isb	sy
20003e7a:	f3bf 8f4f 	dsb	sy
20003e7e:	60fb      	str	r3, [r7, #12]
}
20003e80:	bf00      	nop
20003e82:	e7fe      	b.n	20003e82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
20003e84:	693b      	ldr	r3, [r7, #16]
20003e86:	681b      	ldr	r3, [r3, #0]
20003e88:	2b00      	cmp	r3, #0
20003e8a:	d00a      	beq.n	20003ea2 <vPortFree+0x62>
	__asm volatile
20003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
20003e90:	f383 8811 	msr	BASEPRI, r3
20003e94:	f3bf 8f6f 	isb	sy
20003e98:	f3bf 8f4f 	dsb	sy
20003e9c:	60bb      	str	r3, [r7, #8]
}
20003e9e:	bf00      	nop
20003ea0:	e7fe      	b.n	20003ea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
20003ea2:	693b      	ldr	r3, [r7, #16]
20003ea4:	685a      	ldr	r2, [r3, #4]
20003ea6:	4b14      	ldr	r3, [pc, #80]	; (20003ef8 <vPortFree+0xb8>)
20003ea8:	681b      	ldr	r3, [r3, #0]
20003eaa:	4013      	ands	r3, r2
20003eac:	2b00      	cmp	r3, #0
20003eae:	d01e      	beq.n	20003eee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
20003eb0:	693b      	ldr	r3, [r7, #16]
20003eb2:	681b      	ldr	r3, [r3, #0]
20003eb4:	2b00      	cmp	r3, #0
20003eb6:	d11a      	bne.n	20003eee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
20003eb8:	693b      	ldr	r3, [r7, #16]
20003eba:	685a      	ldr	r2, [r3, #4]
20003ebc:	4b0e      	ldr	r3, [pc, #56]	; (20003ef8 <vPortFree+0xb8>)
20003ebe:	681b      	ldr	r3, [r3, #0]
20003ec0:	43db      	mvns	r3, r3
20003ec2:	401a      	ands	r2, r3
20003ec4:	693b      	ldr	r3, [r7, #16]
20003ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
20003ec8:	f7fe fb86 	bl	200025d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
20003ecc:	693b      	ldr	r3, [r7, #16]
20003ece:	685a      	ldr	r2, [r3, #4]
20003ed0:	4b0a      	ldr	r3, [pc, #40]	; (20003efc <vPortFree+0xbc>)
20003ed2:	681b      	ldr	r3, [r3, #0]
20003ed4:	4413      	add	r3, r2
20003ed6:	4a09      	ldr	r2, [pc, #36]	; (20003efc <vPortFree+0xbc>)
20003ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
20003eda:	6938      	ldr	r0, [r7, #16]
20003edc:	f000 f874 	bl	20003fc8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
20003ee0:	4b07      	ldr	r3, [pc, #28]	; (20003f00 <vPortFree+0xc0>)
20003ee2:	681b      	ldr	r3, [r3, #0]
20003ee4:	3301      	adds	r3, #1
20003ee6:	4a06      	ldr	r2, [pc, #24]	; (20003f00 <vPortFree+0xc0>)
20003ee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
20003eea:	f7fe fb83 	bl	200025f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
20003eee:	bf00      	nop
20003ef0:	3718      	adds	r7, #24
20003ef2:	46bd      	mov	sp, r7
20003ef4:	bd80      	pop	{r7, pc}
20003ef6:	bf00      	nop
20003ef8:	2000eedc 	.word	0x2000eedc
20003efc:	2000eecc 	.word	0x2000eecc
20003f00:	2000eed8 	.word	0x2000eed8

20003f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
20003f04:	b480      	push	{r7}
20003f06:	b085      	sub	sp, #20
20003f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
20003f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
20003f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
20003f10:	4b27      	ldr	r3, [pc, #156]	; (20003fb0 <prvHeapInit+0xac>)
20003f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
20003f14:	68fb      	ldr	r3, [r7, #12]
20003f16:	f003 0307 	and.w	r3, r3, #7
20003f1a:	2b00      	cmp	r3, #0
20003f1c:	d00c      	beq.n	20003f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
20003f1e:	68fb      	ldr	r3, [r7, #12]
20003f20:	3307      	adds	r3, #7
20003f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003f24:	68fb      	ldr	r3, [r7, #12]
20003f26:	f023 0307 	bic.w	r3, r3, #7
20003f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
20003f2c:	68ba      	ldr	r2, [r7, #8]
20003f2e:	68fb      	ldr	r3, [r7, #12]
20003f30:	1ad3      	subs	r3, r2, r3
20003f32:	4a1f      	ldr	r2, [pc, #124]	; (20003fb0 <prvHeapInit+0xac>)
20003f34:	4413      	add	r3, r2
20003f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
20003f38:	68fb      	ldr	r3, [r7, #12]
20003f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
20003f3c:	4a1d      	ldr	r2, [pc, #116]	; (20003fb4 <prvHeapInit+0xb0>)
20003f3e:	687b      	ldr	r3, [r7, #4]
20003f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
20003f42:	4b1c      	ldr	r3, [pc, #112]	; (20003fb4 <prvHeapInit+0xb0>)
20003f44:	2200      	movs	r2, #0
20003f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
20003f48:	687b      	ldr	r3, [r7, #4]
20003f4a:	68ba      	ldr	r2, [r7, #8]
20003f4c:	4413      	add	r3, r2
20003f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
20003f50:	2208      	movs	r2, #8
20003f52:	68fb      	ldr	r3, [r7, #12]
20003f54:	1a9b      	subs	r3, r3, r2
20003f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
20003f58:	68fb      	ldr	r3, [r7, #12]
20003f5a:	f023 0307 	bic.w	r3, r3, #7
20003f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
20003f60:	68fb      	ldr	r3, [r7, #12]
20003f62:	4a15      	ldr	r2, [pc, #84]	; (20003fb8 <prvHeapInit+0xb4>)
20003f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
20003f66:	4b14      	ldr	r3, [pc, #80]	; (20003fb8 <prvHeapInit+0xb4>)
20003f68:	681b      	ldr	r3, [r3, #0]
20003f6a:	2200      	movs	r2, #0
20003f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
20003f6e:	4b12      	ldr	r3, [pc, #72]	; (20003fb8 <prvHeapInit+0xb4>)
20003f70:	681b      	ldr	r3, [r3, #0]
20003f72:	2200      	movs	r2, #0
20003f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
20003f76:	687b      	ldr	r3, [r7, #4]
20003f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
20003f7a:	683b      	ldr	r3, [r7, #0]
20003f7c:	68fa      	ldr	r2, [r7, #12]
20003f7e:	1ad2      	subs	r2, r2, r3
20003f80:	683b      	ldr	r3, [r7, #0]
20003f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
20003f84:	4b0c      	ldr	r3, [pc, #48]	; (20003fb8 <prvHeapInit+0xb4>)
20003f86:	681a      	ldr	r2, [r3, #0]
20003f88:	683b      	ldr	r3, [r7, #0]
20003f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003f8c:	683b      	ldr	r3, [r7, #0]
20003f8e:	685b      	ldr	r3, [r3, #4]
20003f90:	4a0a      	ldr	r2, [pc, #40]	; (20003fbc <prvHeapInit+0xb8>)
20003f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
20003f94:	683b      	ldr	r3, [r7, #0]
20003f96:	685b      	ldr	r3, [r3, #4]
20003f98:	4a09      	ldr	r2, [pc, #36]	; (20003fc0 <prvHeapInit+0xbc>)
20003f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
20003f9c:	4b09      	ldr	r3, [pc, #36]	; (20003fc4 <prvHeapInit+0xc0>)
20003f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
20003fa2:	601a      	str	r2, [r3, #0]
}
20003fa4:	bf00      	nop
20003fa6:	3714      	adds	r7, #20
20003fa8:	46bd      	mov	sp, r7
20003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
20003fae:	4770      	bx	lr
20003fb0:	2000b2c0 	.word	0x2000b2c0
20003fb4:	2000eec0 	.word	0x2000eec0
20003fb8:	2000eec8 	.word	0x2000eec8
20003fbc:	2000eed0 	.word	0x2000eed0
20003fc0:	2000eecc 	.word	0x2000eecc
20003fc4:	2000eedc 	.word	0x2000eedc

20003fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
20003fc8:	b480      	push	{r7}
20003fca:	b085      	sub	sp, #20
20003fcc:	af00      	add	r7, sp, #0
20003fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
20003fd0:	4b28      	ldr	r3, [pc, #160]	; (20004074 <prvInsertBlockIntoFreeList+0xac>)
20003fd2:	60fb      	str	r3, [r7, #12]
20003fd4:	e002      	b.n	20003fdc <prvInsertBlockIntoFreeList+0x14>
20003fd6:	68fb      	ldr	r3, [r7, #12]
20003fd8:	681b      	ldr	r3, [r3, #0]
20003fda:	60fb      	str	r3, [r7, #12]
20003fdc:	68fb      	ldr	r3, [r7, #12]
20003fde:	681b      	ldr	r3, [r3, #0]
20003fe0:	687a      	ldr	r2, [r7, #4]
20003fe2:	429a      	cmp	r2, r3
20003fe4:	d8f7      	bhi.n	20003fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
20003fe6:	68fb      	ldr	r3, [r7, #12]
20003fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
20003fea:	68fb      	ldr	r3, [r7, #12]
20003fec:	685b      	ldr	r3, [r3, #4]
20003fee:	68ba      	ldr	r2, [r7, #8]
20003ff0:	4413      	add	r3, r2
20003ff2:	687a      	ldr	r2, [r7, #4]
20003ff4:	429a      	cmp	r2, r3
20003ff6:	d108      	bne.n	2000400a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
20003ff8:	68fb      	ldr	r3, [r7, #12]
20003ffa:	685a      	ldr	r2, [r3, #4]
20003ffc:	687b      	ldr	r3, [r7, #4]
20003ffe:	685b      	ldr	r3, [r3, #4]
20004000:	441a      	add	r2, r3
20004002:	68fb      	ldr	r3, [r7, #12]
20004004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
20004006:	68fb      	ldr	r3, [r7, #12]
20004008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
2000400a:	687b      	ldr	r3, [r7, #4]
2000400c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
2000400e:	687b      	ldr	r3, [r7, #4]
20004010:	685b      	ldr	r3, [r3, #4]
20004012:	68ba      	ldr	r2, [r7, #8]
20004014:	441a      	add	r2, r3
20004016:	68fb      	ldr	r3, [r7, #12]
20004018:	681b      	ldr	r3, [r3, #0]
2000401a:	429a      	cmp	r2, r3
2000401c:	d118      	bne.n	20004050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
2000401e:	68fb      	ldr	r3, [r7, #12]
20004020:	681a      	ldr	r2, [r3, #0]
20004022:	4b15      	ldr	r3, [pc, #84]	; (20004078 <prvInsertBlockIntoFreeList+0xb0>)
20004024:	681b      	ldr	r3, [r3, #0]
20004026:	429a      	cmp	r2, r3
20004028:	d00d      	beq.n	20004046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
2000402a:	687b      	ldr	r3, [r7, #4]
2000402c:	685a      	ldr	r2, [r3, #4]
2000402e:	68fb      	ldr	r3, [r7, #12]
20004030:	681b      	ldr	r3, [r3, #0]
20004032:	685b      	ldr	r3, [r3, #4]
20004034:	441a      	add	r2, r3
20004036:	687b      	ldr	r3, [r7, #4]
20004038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
2000403a:	68fb      	ldr	r3, [r7, #12]
2000403c:	681b      	ldr	r3, [r3, #0]
2000403e:	681a      	ldr	r2, [r3, #0]
20004040:	687b      	ldr	r3, [r7, #4]
20004042:	601a      	str	r2, [r3, #0]
20004044:	e008      	b.n	20004058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
20004046:	4b0c      	ldr	r3, [pc, #48]	; (20004078 <prvInsertBlockIntoFreeList+0xb0>)
20004048:	681a      	ldr	r2, [r3, #0]
2000404a:	687b      	ldr	r3, [r7, #4]
2000404c:	601a      	str	r2, [r3, #0]
2000404e:	e003      	b.n	20004058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
20004050:	68fb      	ldr	r3, [r7, #12]
20004052:	681a      	ldr	r2, [r3, #0]
20004054:	687b      	ldr	r3, [r7, #4]
20004056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
20004058:	68fa      	ldr	r2, [r7, #12]
2000405a:	687b      	ldr	r3, [r7, #4]
2000405c:	429a      	cmp	r2, r3
2000405e:	d002      	beq.n	20004066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
20004060:	68fb      	ldr	r3, [r7, #12]
20004062:	687a      	ldr	r2, [r7, #4]
20004064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
20004066:	bf00      	nop
20004068:	3714      	adds	r7, #20
2000406a:	46bd      	mov	sp, r7
2000406c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004070:	4770      	bx	lr
20004072:	bf00      	nop
20004074:	2000eec0 	.word	0x2000eec0
20004078:	2000eec8 	.word	0x2000eec8

2000407c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
2000407c:	b480      	push	{r7}
2000407e:	b083      	sub	sp, #12
20004080:	af00      	add	r7, sp, #0
20004082:	6078      	str	r0, [r7, #4]
20004084:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20004086:	687b      	ldr	r3, [r7, #4]
20004088:	683a      	ldr	r2, [r7, #0]
2000408a:	619a      	str	r2, [r3, #24]
}
2000408c:	bf00      	nop
2000408e:	370c      	adds	r7, #12
20004090:	46bd      	mov	sp, r7
20004092:	f85d 7b04 	ldr.w	r7, [sp], #4
20004096:	4770      	bx	lr

20004098 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
20004098:	b480      	push	{r7}
2000409a:	b083      	sub	sp, #12
2000409c:	af00      	add	r7, sp, #0
2000409e:	6078      	str	r0, [r7, #4]
200040a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
200040a2:	683b      	ldr	r3, [r7, #0]
200040a4:	041a      	lsls	r2, r3, #16
200040a6:	687b      	ldr	r3, [r7, #4]
200040a8:	619a      	str	r2, [r3, #24]
}
200040aa:	bf00      	nop
200040ac:	370c      	adds	r7, #12
200040ae:	46bd      	mov	sp, r7
200040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200040b4:	4770      	bx	lr

200040b6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
200040b6:	b480      	push	{r7}
200040b8:	b083      	sub	sp, #12
200040ba:	af00      	add	r7, sp, #0
200040bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
200040be:	687b      	ldr	r3, [r7, #4]
200040c0:	689b      	ldr	r3, [r3, #8]
200040c2:	f003 0301 	and.w	r3, r3, #1
200040c6:	2b01      	cmp	r3, #1
200040c8:	d101      	bne.n	200040ce <LL_SPI_IsActiveFlag_RXNE+0x18>
200040ca:	2301      	movs	r3, #1
200040cc:	e000      	b.n	200040d0 <LL_SPI_IsActiveFlag_RXNE+0x1a>
200040ce:	2300      	movs	r3, #0
}
200040d0:	4618      	mov	r0, r3
200040d2:	370c      	adds	r7, #12
200040d4:	46bd      	mov	sp, r7
200040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200040da:	4770      	bx	lr

200040dc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
200040dc:	b480      	push	{r7}
200040de:	b083      	sub	sp, #12
200040e0:	af00      	add	r7, sp, #0
200040e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
200040e4:	687b      	ldr	r3, [r7, #4]
200040e6:	689b      	ldr	r3, [r3, #8]
200040e8:	f003 0302 	and.w	r3, r3, #2
200040ec:	2b02      	cmp	r3, #2
200040ee:	d101      	bne.n	200040f4 <LL_SPI_IsActiveFlag_TXE+0x18>
200040f0:	2301      	movs	r3, #1
200040f2:	e000      	b.n	200040f6 <LL_SPI_IsActiveFlag_TXE+0x1a>
200040f4:	2300      	movs	r3, #0
}
200040f6:	4618      	mov	r0, r3
200040f8:	370c      	adds	r7, #12
200040fa:	46bd      	mov	sp, r7
200040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004100:	4770      	bx	lr

20004102 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
20004102:	b480      	push	{r7}
20004104:	b083      	sub	sp, #12
20004106:	af00      	add	r7, sp, #0
20004108:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
2000410a:	687b      	ldr	r3, [r7, #4]
2000410c:	330c      	adds	r3, #12
}
2000410e:	4618      	mov	r0, r3
20004110:	370c      	adds	r7, #12
20004112:	46bd      	mov	sp, r7
20004114:	f85d 7b04 	ldr.w	r7, [sp], #4
20004118:	4770      	bx	lr

2000411a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
2000411a:	b480      	push	{r7}
2000411c:	b083      	sub	sp, #12
2000411e:	af00      	add	r7, sp, #0
20004120:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
20004122:	687b      	ldr	r3, [r7, #4]
20004124:	330c      	adds	r3, #12
20004126:	781b      	ldrb	r3, [r3, #0]
20004128:	b2db      	uxtb	r3, r3
}
2000412a:	4618      	mov	r0, r3
2000412c:	370c      	adds	r7, #12
2000412e:	46bd      	mov	sp, r7
20004130:	f85d 7b04 	ldr.w	r7, [sp], #4
20004134:	4770      	bx	lr

20004136 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
20004136:	b480      	push	{r7}
20004138:	b085      	sub	sp, #20
2000413a:	af00      	add	r7, sp, #0
2000413c:	6078      	str	r0, [r7, #4]
2000413e:	460b      	mov	r3, r1
20004140:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
20004142:	687b      	ldr	r3, [r7, #4]
20004144:	330c      	adds	r3, #12
20004146:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
20004148:	68fb      	ldr	r3, [r7, #12]
2000414a:	78fa      	ldrb	r2, [r7, #3]
2000414c:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
2000414e:	bf00      	nop
20004150:	3714      	adds	r7, #20
20004152:	46bd      	mov	sp, r7
20004154:	f85d 7b04 	ldr.w	r7, [sp], #4
20004158:	4770      	bx	lr
	...

2000415c <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
2000415c:	b480      	push	{r7}
2000415e:	b083      	sub	sp, #12
20004160:	af00      	add	r7, sp, #0
20004162:	6078      	str	r0, [r7, #4]
20004164:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20004166:	4a0c      	ldr	r2, [pc, #48]	; (20004198 <LL_DMA_EnableStream+0x3c>)
20004168:	683b      	ldr	r3, [r7, #0]
2000416a:	4413      	add	r3, r2
2000416c:	781b      	ldrb	r3, [r3, #0]
2000416e:	461a      	mov	r2, r3
20004170:	687b      	ldr	r3, [r7, #4]
20004172:	4413      	add	r3, r2
20004174:	681b      	ldr	r3, [r3, #0]
20004176:	4908      	ldr	r1, [pc, #32]	; (20004198 <LL_DMA_EnableStream+0x3c>)
20004178:	683a      	ldr	r2, [r7, #0]
2000417a:	440a      	add	r2, r1
2000417c:	7812      	ldrb	r2, [r2, #0]
2000417e:	4611      	mov	r1, r2
20004180:	687a      	ldr	r2, [r7, #4]
20004182:	440a      	add	r2, r1
20004184:	f043 0301 	orr.w	r3, r3, #1
20004188:	6013      	str	r3, [r2, #0]
}
2000418a:	bf00      	nop
2000418c:	370c      	adds	r7, #12
2000418e:	46bd      	mov	sp, r7
20004190:	f85d 7b04 	ldr.w	r7, [sp], #4
20004194:	4770      	bx	lr
20004196:	bf00      	nop
20004198:	200065dc 	.word	0x200065dc

2000419c <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
2000419c:	b480      	push	{r7}
2000419e:	b083      	sub	sp, #12
200041a0:	af00      	add	r7, sp, #0
200041a2:	6078      	str	r0, [r7, #4]
200041a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
200041a6:	4a0c      	ldr	r2, [pc, #48]	; (200041d8 <LL_DMA_DisableStream+0x3c>)
200041a8:	683b      	ldr	r3, [r7, #0]
200041aa:	4413      	add	r3, r2
200041ac:	781b      	ldrb	r3, [r3, #0]
200041ae:	461a      	mov	r2, r3
200041b0:	687b      	ldr	r3, [r7, #4]
200041b2:	4413      	add	r3, r2
200041b4:	681b      	ldr	r3, [r3, #0]
200041b6:	4908      	ldr	r1, [pc, #32]	; (200041d8 <LL_DMA_DisableStream+0x3c>)
200041b8:	683a      	ldr	r2, [r7, #0]
200041ba:	440a      	add	r2, r1
200041bc:	7812      	ldrb	r2, [r2, #0]
200041be:	4611      	mov	r1, r2
200041c0:	687a      	ldr	r2, [r7, #4]
200041c2:	440a      	add	r2, r1
200041c4:	f023 0301 	bic.w	r3, r3, #1
200041c8:	6013      	str	r3, [r2, #0]
}
200041ca:	bf00      	nop
200041cc:	370c      	adds	r7, #12
200041ce:	46bd      	mov	sp, r7
200041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200041d4:	4770      	bx	lr
200041d6:	bf00      	nop
200041d8:	200065dc 	.word	0x200065dc

200041dc <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream)
{
200041dc:	b480      	push	{r7}
200041de:	b083      	sub	sp, #12
200041e0:	af00      	add	r7, sp, #0
200041e2:	6078      	str	r0, [r7, #4]
200041e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR));
200041e6:	4a08      	ldr	r2, [pc, #32]	; (20004208 <LL_DMA_GetDataTransferDirection+0x2c>)
200041e8:	683b      	ldr	r3, [r7, #0]
200041ea:	4413      	add	r3, r2
200041ec:	781b      	ldrb	r3, [r3, #0]
200041ee:	461a      	mov	r2, r3
200041f0:	687b      	ldr	r3, [r7, #4]
200041f2:	4413      	add	r3, r2
200041f4:	681b      	ldr	r3, [r3, #0]
200041f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
}
200041fa:	4618      	mov	r0, r3
200041fc:	370c      	adds	r7, #12
200041fe:	46bd      	mov	sp, r7
20004200:	f85d 7b04 	ldr.w	r7, [sp], #4
20004204:	4770      	bx	lr
20004206:	bf00      	nop
20004208:	200065dc 	.word	0x200065dc

2000420c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
2000420c:	b480      	push	{r7}
2000420e:	b085      	sub	sp, #20
20004210:	af00      	add	r7, sp, #0
20004212:	60f8      	str	r0, [r7, #12]
20004214:	60b9      	str	r1, [r7, #8]
20004216:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
20004218:	4a0d      	ldr	r2, [pc, #52]	; (20004250 <LL_DMA_SetDataLength+0x44>)
2000421a:	68bb      	ldr	r3, [r7, #8]
2000421c:	4413      	add	r3, r2
2000421e:	781b      	ldrb	r3, [r3, #0]
20004220:	461a      	mov	r2, r3
20004222:	68fb      	ldr	r3, [r7, #12]
20004224:	4413      	add	r3, r2
20004226:	685b      	ldr	r3, [r3, #4]
20004228:	0c1b      	lsrs	r3, r3, #16
2000422a:	041b      	lsls	r3, r3, #16
2000422c:	4908      	ldr	r1, [pc, #32]	; (20004250 <LL_DMA_SetDataLength+0x44>)
2000422e:	68ba      	ldr	r2, [r7, #8]
20004230:	440a      	add	r2, r1
20004232:	7812      	ldrb	r2, [r2, #0]
20004234:	4611      	mov	r1, r2
20004236:	68fa      	ldr	r2, [r7, #12]
20004238:	440a      	add	r2, r1
2000423a:	4611      	mov	r1, r2
2000423c:	687a      	ldr	r2, [r7, #4]
2000423e:	4313      	orrs	r3, r2
20004240:	604b      	str	r3, [r1, #4]
}
20004242:	bf00      	nop
20004244:	3714      	adds	r7, #20
20004246:	46bd      	mov	sp, r7
20004248:	f85d 7b04 	ldr.w	r7, [sp], #4
2000424c:	4770      	bx	lr
2000424e:	bf00      	nop
20004250:	200065dc 	.word	0x200065dc

20004254 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t SrcAddress, uint32_t DstAddress, uint32_t Direction)
{
20004254:	b480      	push	{r7}
20004256:	b085      	sub	sp, #20
20004258:	af00      	add	r7, sp, #0
2000425a:	60f8      	str	r0, [r7, #12]
2000425c:	60b9      	str	r1, [r7, #8]
2000425e:	607a      	str	r2, [r7, #4]
20004260:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
20004262:	69bb      	ldr	r3, [r7, #24]
20004264:	2b40      	cmp	r3, #64	; 0x40
20004266:	d114      	bne.n	20004292 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, SrcAddress);
20004268:	4a17      	ldr	r2, [pc, #92]	; (200042c8 <LL_DMA_ConfigAddresses+0x74>)
2000426a:	68bb      	ldr	r3, [r7, #8]
2000426c:	4413      	add	r3, r2
2000426e:	781b      	ldrb	r3, [r3, #0]
20004270:	461a      	mov	r2, r3
20004272:	68fb      	ldr	r3, [r7, #12]
20004274:	4413      	add	r3, r2
20004276:	461a      	mov	r2, r3
20004278:	687b      	ldr	r3, [r7, #4]
2000427a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, DstAddress);
2000427c:	4a12      	ldr	r2, [pc, #72]	; (200042c8 <LL_DMA_ConfigAddresses+0x74>)
2000427e:	68bb      	ldr	r3, [r7, #8]
20004280:	4413      	add	r3, r2
20004282:	781b      	ldrb	r3, [r3, #0]
20004284:	461a      	mov	r2, r3
20004286:	68fb      	ldr	r3, [r7, #12]
20004288:	4413      	add	r3, r2
2000428a:	461a      	mov	r2, r3
2000428c:	683b      	ldr	r3, [r7, #0]
2000428e:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
  }
}
20004290:	e013      	b.n	200042ba <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
20004292:	4a0d      	ldr	r2, [pc, #52]	; (200042c8 <LL_DMA_ConfigAddresses+0x74>)
20004294:	68bb      	ldr	r3, [r7, #8]
20004296:	4413      	add	r3, r2
20004298:	781b      	ldrb	r3, [r3, #0]
2000429a:	461a      	mov	r2, r3
2000429c:	68fb      	ldr	r3, [r7, #12]
2000429e:	4413      	add	r3, r2
200042a0:	461a      	mov	r2, r3
200042a2:	687b      	ldr	r3, [r7, #4]
200042a4:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
200042a6:	4a08      	ldr	r2, [pc, #32]	; (200042c8 <LL_DMA_ConfigAddresses+0x74>)
200042a8:	68bb      	ldr	r3, [r7, #8]
200042aa:	4413      	add	r3, r2
200042ac:	781b      	ldrb	r3, [r3, #0]
200042ae:	461a      	mov	r2, r3
200042b0:	68fb      	ldr	r3, [r7, #12]
200042b2:	4413      	add	r3, r2
200042b4:	461a      	mov	r2, r3
200042b6:	683b      	ldr	r3, [r7, #0]
200042b8:	60d3      	str	r3, [r2, #12]
}
200042ba:	bf00      	nop
200042bc:	3714      	adds	r7, #20
200042be:	46bd      	mov	sp, r7
200042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
200042c4:	4770      	bx	lr
200042c6:	bf00      	nop
200042c8:	200065dc 	.word	0x200065dc

200042cc <TFTDisplay_ILI9341_Initialization>:
static void tftDisplay_ILI9341_Reset(void);
static void tftDisplay_ILI9341_FontsInitialization(void);
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_Initialization(uint16_t screenWidth, uint16_t screeHeight)
{
200042cc:	b580      	push	{r7, lr}
200042ce:	b082      	sub	sp, #8
200042d0:	af00      	add	r7, sp, #0
200042d2:	4603      	mov	r3, r0
200042d4:	460a      	mov	r2, r1
200042d6:	80fb      	strh	r3, [r7, #6]
200042d8:	4613      	mov	r3, r2
200042da:	80bb      	strh	r3, [r7, #4]
	CS_ACTIVE();
200042dc:	2104      	movs	r1, #4
200042de:	4823      	ldr	r0, [pc, #140]	; (2000436c <TFTDisplay_ILI9341_Initialization+0xa0>)
200042e0:	f7ff feda 	bl	20004098 <LL_GPIO_ResetOutputPin>
	tftDisplay_ILI9341_Reset();
200042e4:	f000 fb84 	bl	200049f0 <tftDisplay_ILI9341_Reset>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SWRESET);
200042e8:	2001      	movs	r0, #1
200042ea:	f000 fa65 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(1000);
200042ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
200042f2:	f7fc fb9f 	bl	20000a34 <LL_mDelay>

	tftDisplay_ILI9341_Init_PowerControl_A();
200042f6:	f000 fc1b 	bl	20004b30 <tftDisplay_ILI9341_Init_PowerControl_A>
	tftDisplay_ILI9341_Init_PowerControl_B();
200042fa:	f000 fc37 	bl	20004b6c <tftDisplay_ILI9341_Init_PowerControl_B>
	tftDisplay_ILI9341_Init_DriverTimingControl_A();
200042fe:	f000 fc4d 	bl	20004b9c <tftDisplay_ILI9341_Init_DriverTimingControl_A>
	tftDisplay_ILI9341_Init_DriverTimingControl_B();
20004302:	f000 fc63 	bl	20004bcc <tftDisplay_ILI9341_Init_DriverTimingControl_B>
	tftDisplay_ILI9341_Init_PowerSequenceControl();
20004306:	f000 fc75 	bl	20004bf4 <tftDisplay_ILI9341_Init_PowerSequenceControl>
	tftDisplay_ILI9341_Init_PumpRatioControl();
2000430a:	f000 fc8d 	bl	20004c28 <tftDisplay_ILI9341_Init_PumpRatioControl>
	tftDisplay_ILI9341_Init_PowerControlVRH();
2000430e:	f000 fc9b 	bl	20004c48 <tftDisplay_ILI9341_Init_PowerControlVRH>
	tftDisplay_ILI9341_Init_PowerControlSAP();
20004312:	f000 fca9 	bl	20004c68 <tftDisplay_ILI9341_Init_PowerControlSAP>
	tftDisplay_ILI9341_Init_VCOMControl_1();
20004316:	f000 fcb7 	bl	20004c88 <tftDisplay_ILI9341_Init_VCOMControl_1>
	tftDisplay_ILI9341_Init_VCOMControl_2();
2000431a:	f000 fcc9 	bl	20004cb0 <tftDisplay_ILI9341_Init_VCOMControl_2>
	tftDisplay_ILI9341_Init_MemmoryAccessControl();
2000431e:	f000 fcd7 	bl	20004cd0 <tftDisplay_ILI9341_Init_MemmoryAccessControl>
	tftDisplay_ILI9341_Init_PixelFormatSet();
20004322:	f000 fce5 	bl	20004cf0 <tftDisplay_ILI9341_Init_PixelFormatSet>
	tftDisplay_ILI9341_Init_FrameRationControl();
20004326:	f000 fcf3 	bl	20004d10 <tftDisplay_ILI9341_Init_FrameRationControl>
	tftDisplay_ILI9341_Init_DisplayFunctionControl();
2000432a:	f000 fd05 	bl	20004d38 <tftDisplay_ILI9341_Init_DisplayFunctionControl>
	tftDisplay_ILI9341_Init_GammaSet();
2000432e:	f000 fd13 	bl	20004d58 <tftDisplay_ILI9341_Init_GammaSet>
	tftDisplay_ILI9341_Init_PositiveGammaCorection();
20004332:	f000 fd21 	bl	20004d78 <tftDisplay_ILI9341_Init_PositiveGammaCorection>
	tftDisplay_ILI9341_Init_NegativeGammaCorection();
20004336:	f000 fd5b 	bl	20004df0 <tftDisplay_ILI9341_Init_NegativeGammaCorection>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_SLEEP_OUT);
2000433a:	2011      	movs	r0, #17
2000433c:	f000 fa3c 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>

	LL_mDelay(120);
20004340:	2078      	movs	r0, #120	; 0x78
20004342:	f7fc fb77 	bl	20000a34 <LL_mDelay>

	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DISPLAY_ON);
20004346:	2029      	movs	r0, #41	; 0x29
20004348:	f000 fa36 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(TFT_ILI9341_ROTATION);
2000434c:	2048      	movs	r0, #72	; 0x48
2000434e:	f000 fa81 	bl	20004854 <tftDisplay_ILI9341_SendData>
	TFTDisplay_ILI9341_WIDTH = screenWidth;
20004352:	4a07      	ldr	r2, [pc, #28]	; (20004370 <TFTDisplay_ILI9341_Initialization+0xa4>)
20004354:	88fb      	ldrh	r3, [r7, #6]
20004356:	8013      	strh	r3, [r2, #0]
	TFTDisplay_ILI9341_HEIGHT = screeHeight;
20004358:	4a06      	ldr	r2, [pc, #24]	; (20004374 <TFTDisplay_ILI9341_Initialization+0xa8>)
2000435a:	88bb      	ldrh	r3, [r7, #4]
2000435c:	8013      	strh	r3, [r2, #0]
	tftDisplay_ILI9341_FontsInitialization();
2000435e:	f000 fb5b 	bl	20004a18 <tftDisplay_ILI9341_FontsInitialization>
}
20004362:	bf00      	nop
20004364:	3708      	adds	r7, #8
20004366:	46bd      	mov	sp, r7
20004368:	bd80      	pop	{r7, pc}
2000436a:	bf00      	nop
2000436c:	40020800 	.word	0x40020800
20004370:	2000eee0 	.word	0x2000eee0
20004374:	2000eee2 	.word	0x2000eee2

20004378 <TFTDisplay_ILI9341_DrawPixel>:
{
	TFTDisplay_ILI9341_FillRect(0, 0, TFTDisplay_ILI9341_WIDTH-1, TFTDisplay_ILI9341_HEIGHT-1, color);
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawPixel(int x, int y, uint16_t color)
{
20004378:	b580      	push	{r7, lr}
2000437a:	b084      	sub	sp, #16
2000437c:	af00      	add	r7, sp, #0
2000437e:	60f8      	str	r0, [r7, #12]
20004380:	60b9      	str	r1, [r7, #8]
20004382:	4613      	mov	r3, r2
20004384:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFTDisplay_ILI9341_WIDTH)||(y>=TFTDisplay_ILI9341_HEIGHT))
20004386:	68fb      	ldr	r3, [r7, #12]
20004388:	2b00      	cmp	r3, #0
2000438a:	db2b      	blt.n	200043e4 <TFTDisplay_ILI9341_DrawPixel+0x6c>
2000438c:	68bb      	ldr	r3, [r7, #8]
2000438e:	2b00      	cmp	r3, #0
20004390:	db28      	blt.n	200043e4 <TFTDisplay_ILI9341_DrawPixel+0x6c>
20004392:	4b16      	ldr	r3, [pc, #88]	; (200043ec <TFTDisplay_ILI9341_DrawPixel+0x74>)
20004394:	881b      	ldrh	r3, [r3, #0]
20004396:	461a      	mov	r2, r3
20004398:	68fb      	ldr	r3, [r7, #12]
2000439a:	4293      	cmp	r3, r2
2000439c:	da22      	bge.n	200043e4 <TFTDisplay_ILI9341_DrawPixel+0x6c>
2000439e:	4b14      	ldr	r3, [pc, #80]	; (200043f0 <TFTDisplay_ILI9341_DrawPixel+0x78>)
200043a0:	881b      	ldrh	r3, [r3, #0]
200043a2:	461a      	mov	r2, r3
200043a4:	68bb      	ldr	r3, [r7, #8]
200043a6:	4293      	cmp	r3, r2
200043a8:	da1c      	bge.n	200043e4 <TFTDisplay_ILI9341_DrawPixel+0x6c>
	{
		return;
	}

	tftDisplay_ILI9341_SetAddrWindow(x,y,x,y);
200043aa:	68fb      	ldr	r3, [r7, #12]
200043ac:	b298      	uxth	r0, r3
200043ae:	68bb      	ldr	r3, [r7, #8]
200043b0:	b299      	uxth	r1, r3
200043b2:	68fb      	ldr	r3, [r7, #12]
200043b4:	b29a      	uxth	r2, r3
200043b6:	68bb      	ldr	r3, [r7, #8]
200043b8:	b29b      	uxth	r3, r3
200043ba:	f000 fb69 	bl	20004a90 <tftDisplay_ILI9341_SetAddrWindow>
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
200043be:	202c      	movs	r0, #44	; 0x2c
200043c0:	f000 f9fa 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	DataBuffer[0] = color>>8;
200043c4:	88fb      	ldrh	r3, [r7, #6]
200043c6:	0a1b      	lsrs	r3, r3, #8
200043c8:	b29b      	uxth	r3, r3
200043ca:	b2da      	uxtb	r2, r3
200043cc:	4b09      	ldr	r3, [pc, #36]	; (200043f4 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
200043ce:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = color & 0xFF;
200043d0:	88fb      	ldrh	r3, [r7, #6]
200043d2:	b2da      	uxtb	r2, r3
200043d4:	4b07      	ldr	r3, [pc, #28]	; (200043f4 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
200043d6:	705a      	strb	r2, [r3, #1]


	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
200043d8:	2201      	movs	r2, #1
200043da:	2102      	movs	r1, #2
200043dc:	4805      	ldr	r0, [pc, #20]	; (200043f4 <TFTDisplay_ILI9341_DrawPixel+0x7c>)
200043de:	f000 fab7 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
200043e2:	e000      	b.n	200043e6 <TFTDisplay_ILI9341_DrawPixel+0x6e>
		return;
200043e4:	bf00      	nop
}
200043e6:	3710      	adds	r7, #16
200043e8:	46bd      	mov	sp, r7
200043ea:	bd80      	pop	{r7, pc}
200043ec:	2000eee0 	.word	0x2000eee0
200043f0:	2000eee2 	.word	0x2000eee2
200043f4:	2000eee4 	.word	0x2000eee4

200043f8 <TFTDisplay_ILI9341_DrawLine>:
//------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawLine(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
200043f8:	b590      	push	{r4, r7, lr}
200043fa:	b08b      	sub	sp, #44	; 0x2c
200043fc:	af00      	add	r7, sp, #0
200043fe:	4604      	mov	r4, r0
20004400:	4608      	mov	r0, r1
20004402:	4611      	mov	r1, r2
20004404:	461a      	mov	r2, r3
20004406:	4623      	mov	r3, r4
20004408:	80fb      	strh	r3, [r7, #6]
2000440a:	4603      	mov	r3, r0
2000440c:	80bb      	strh	r3, [r7, #4]
2000440e:	460b      	mov	r3, r1
20004410:	807b      	strh	r3, [r7, #2]
20004412:	4613      	mov	r3, r2
20004414:	803b      	strh	r3, [r7, #0]
    int steep = abs(y_end-y_start)>abs(x_end-x_start);
20004416:	883a      	ldrh	r2, [r7, #0]
20004418:	88bb      	ldrh	r3, [r7, #4]
2000441a:	1ad3      	subs	r3, r2, r3
2000441c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
20004420:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
20004424:	8879      	ldrh	r1, [r7, #2]
20004426:	88fb      	ldrh	r3, [r7, #6]
20004428:	1acb      	subs	r3, r1, r3
2000442a:	2b00      	cmp	r3, #0
2000442c:	bfb8      	it	lt
2000442e:	425b      	neglt	r3, r3
20004430:	429a      	cmp	r2, r3
20004432:	bfcc      	ite	gt
20004434:	2301      	movgt	r3, #1
20004436:	2300      	movle	r3, #0
20004438:	b2db      	uxtb	r3, r3
2000443a:	61fb      	str	r3, [r7, #28]
    int dx=0;
2000443c:	2300      	movs	r3, #0
2000443e:	61bb      	str	r3, [r7, #24]
    int dy=0;
20004440:	2300      	movs	r3, #0
20004442:	617b      	str	r3, [r7, #20]
    int err=0;
20004444:	2300      	movs	r3, #0
20004446:	627b      	str	r3, [r7, #36]	; 0x24
    int ystep=0;
20004448:	2300      	movs	r3, #0
2000444a:	623b      	str	r3, [r7, #32]

    if (steep)
2000444c:	69fb      	ldr	r3, [r7, #28]
2000444e:	2b00      	cmp	r3, #0
20004450:	d00b      	beq.n	2000446a <TFTDisplay_ILI9341_DrawLine+0x72>
    {
    	SWAP(x_start,y_start);
20004452:	88fb      	ldrh	r3, [r7, #6]
20004454:	827b      	strh	r3, [r7, #18]
20004456:	88bb      	ldrh	r3, [r7, #4]
20004458:	80fb      	strh	r3, [r7, #6]
2000445a:	8a7b      	ldrh	r3, [r7, #18]
2000445c:	80bb      	strh	r3, [r7, #4]
    	SWAP(x_end,y_end);
2000445e:	887b      	ldrh	r3, [r7, #2]
20004460:	823b      	strh	r3, [r7, #16]
20004462:	883b      	ldrh	r3, [r7, #0]
20004464:	807b      	strh	r3, [r7, #2]
20004466:	8a3b      	ldrh	r3, [r7, #16]
20004468:	803b      	strh	r3, [r7, #0]
    }

    if(x_start>x_end)
2000446a:	88fa      	ldrh	r2, [r7, #6]
2000446c:	887b      	ldrh	r3, [r7, #2]
2000446e:	429a      	cmp	r2, r3
20004470:	d90b      	bls.n	2000448a <TFTDisplay_ILI9341_DrawLine+0x92>
    {
    	SWAP(x_start,x_end);
20004472:	88fb      	ldrh	r3, [r7, #6]
20004474:	81fb      	strh	r3, [r7, #14]
20004476:	887b      	ldrh	r3, [r7, #2]
20004478:	80fb      	strh	r3, [r7, #6]
2000447a:	89fb      	ldrh	r3, [r7, #14]
2000447c:	807b      	strh	r3, [r7, #2]
    	SWAP(y_start,y_end);
2000447e:	88bb      	ldrh	r3, [r7, #4]
20004480:	81bb      	strh	r3, [r7, #12]
20004482:	883b      	ldrh	r3, [r7, #0]
20004484:	80bb      	strh	r3, [r7, #4]
20004486:	89bb      	ldrh	r3, [r7, #12]
20004488:	803b      	strh	r3, [r7, #0]
    }

    dx=x_end-x_start;
2000448a:	887a      	ldrh	r2, [r7, #2]
2000448c:	88fb      	ldrh	r3, [r7, #6]
2000448e:	1ad3      	subs	r3, r2, r3
20004490:	61bb      	str	r3, [r7, #24]
    dy=abs(y_end-y_start);
20004492:	883a      	ldrh	r2, [r7, #0]
20004494:	88bb      	ldrh	r3, [r7, #4]
20004496:	1ad3      	subs	r3, r2, r3
20004498:	2b00      	cmp	r3, #0
2000449a:	bfb8      	it	lt
2000449c:	425b      	neglt	r3, r3
2000449e:	617b      	str	r3, [r7, #20]
    err=dx/2;
200044a0:	69bb      	ldr	r3, [r7, #24]
200044a2:	0fda      	lsrs	r2, r3, #31
200044a4:	4413      	add	r3, r2
200044a6:	105b      	asrs	r3, r3, #1
200044a8:	627b      	str	r3, [r7, #36]	; 0x24

    if(y_start<y_end)
200044aa:	88ba      	ldrh	r2, [r7, #4]
200044ac:	883b      	ldrh	r3, [r7, #0]
200044ae:	429a      	cmp	r2, r3
200044b0:	d202      	bcs.n	200044b8 <TFTDisplay_ILI9341_DrawLine+0xc0>
    {
        ystep = 1;
200044b2:	2301      	movs	r3, #1
200044b4:	623b      	str	r3, [r7, #32]
200044b6:	e026      	b.n	20004506 <TFTDisplay_ILI9341_DrawLine+0x10e>
    }
    else
    {
        ystep = -1;
200044b8:	f04f 33ff 	mov.w	r3, #4294967295
200044bc:	623b      	str	r3, [r7, #32]
    }
    for (;x_start<=x_end;x_start++)
200044be:	e022      	b.n	20004506 <TFTDisplay_ILI9341_DrawLine+0x10e>
    {
       if (steep)
200044c0:	69fb      	ldr	r3, [r7, #28]
200044c2:	2b00      	cmp	r3, #0
200044c4:	d006      	beq.n	200044d4 <TFTDisplay_ILI9341_DrawLine+0xdc>
       {
    	   TFTDisplay_ILI9341_DrawPixel(y_start,x_start,color);
200044c6:	88bb      	ldrh	r3, [r7, #4]
200044c8:	88f9      	ldrh	r1, [r7, #6]
200044ca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
200044cc:	4618      	mov	r0, r3
200044ce:	f7ff ff53 	bl	20004378 <TFTDisplay_ILI9341_DrawPixel>
200044d2:	e005      	b.n	200044e0 <TFTDisplay_ILI9341_DrawLine+0xe8>
       }
       else
       {
    	   TFTDisplay_ILI9341_DrawPixel(x_start,y_start,color);
200044d4:	88fb      	ldrh	r3, [r7, #6]
200044d6:	88b9      	ldrh	r1, [r7, #4]
200044d8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
200044da:	4618      	mov	r0, r3
200044dc:	f7ff ff4c 	bl	20004378 <TFTDisplay_ILI9341_DrawPixel>
       }
       err-=dy;
200044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200044e2:	697b      	ldr	r3, [r7, #20]
200044e4:	1ad3      	subs	r3, r2, r3
200044e6:	627b      	str	r3, [r7, #36]	; 0x24
       if (err<0)
200044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200044ea:	2b00      	cmp	r3, #0
200044ec:	da08      	bge.n	20004500 <TFTDisplay_ILI9341_DrawLine+0x108>
       {
        y_start += ystep;
200044ee:	6a3b      	ldr	r3, [r7, #32]
200044f0:	b29a      	uxth	r2, r3
200044f2:	88bb      	ldrh	r3, [r7, #4]
200044f4:	4413      	add	r3, r2
200044f6:	80bb      	strh	r3, [r7, #4]
        err+=dx;
200044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200044fa:	69bb      	ldr	r3, [r7, #24]
200044fc:	4413      	add	r3, r2
200044fe:	627b      	str	r3, [r7, #36]	; 0x24
    for (;x_start<=x_end;x_start++)
20004500:	88fb      	ldrh	r3, [r7, #6]
20004502:	3301      	adds	r3, #1
20004504:	80fb      	strh	r3, [r7, #6]
20004506:	88fa      	ldrh	r2, [r7, #6]
20004508:	887b      	ldrh	r3, [r7, #2]
2000450a:	429a      	cmp	r2, r3
2000450c:	d9d8      	bls.n	200044c0 <TFTDisplay_ILI9341_DrawLine+0xc8>
       }
    }
}
2000450e:	bf00      	nop
20004510:	bf00      	nop
20004512:	372c      	adds	r7, #44	; 0x2c
20004514:	46bd      	mov	sp, r7
20004516:	bd90      	pop	{r4, r7, pc}

20004518 <TFTDisplay_ILI9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
20004518:	b590      	push	{r4, r7, lr}
2000451a:	b08b      	sub	sp, #44	; 0x2c
2000451c:	af00      	add	r7, sp, #0
2000451e:	4603      	mov	r3, r0
20004520:	80fb      	strh	r3, [r7, #6]
20004522:	460b      	mov	r3, r1
20004524:	80bb      	strh	r3, [r7, #4]
20004526:	4613      	mov	r3, r2
20004528:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
2000452a:	2300      	movs	r3, #0
2000452c:	627b      	str	r3, [r7, #36]	; 0x24
2000452e:	2300      	movs	r3, #0
20004530:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint16_t y_cur = y;
20004532:	88bb      	ldrh	r3, [r7, #4]
20004534:	83fb      	strh	r3, [r7, #30]
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
20004536:	2300      	movs	r3, #0
20004538:	61bb      	str	r3, [r7, #24]
  height = lcdprop.pFont->Height;
2000453a:	4b70      	ldr	r3, [pc, #448]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000453c:	685b      	ldr	r3, [r3, #4]
2000453e:	88db      	ldrh	r3, [r3, #6]
20004540:	82fb      	strh	r3, [r7, #22]
  width  = lcdprop.pFont->Width;
20004542:	4b6e      	ldr	r3, [pc, #440]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004544:	685b      	ldr	r3, [r3, #4]
20004546:	889b      	ldrh	r3, [r3, #4]
20004548:	82bb      	strh	r3, [r7, #20]
  offset = 8 *((width + 7)/8) -  width ;
2000454a:	8abb      	ldrh	r3, [r7, #20]
2000454c:	3307      	adds	r3, #7
2000454e:	2b00      	cmp	r3, #0
20004550:	da00      	bge.n	20004554 <TFTDisplay_ILI9341_DrawChar+0x3c>
20004552:	3307      	adds	r3, #7
20004554:	10db      	asrs	r3, r3, #3
20004556:	b2db      	uxtb	r3, r3
20004558:	00db      	lsls	r3, r3, #3
2000455a:	b2da      	uxtb	r2, r3
2000455c:	8abb      	ldrh	r3, [r7, #20]
2000455e:	b2db      	uxtb	r3, r3
20004560:	1ad3      	subs	r3, r2, r3
20004562:	74fb      	strb	r3, [r7, #19]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
20004564:	4b65      	ldr	r3, [pc, #404]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004566:	685b      	ldr	r3, [r3, #4]
20004568:	681a      	ldr	r2, [r3, #0]
2000456a:	78fb      	ldrb	r3, [r7, #3]
2000456c:	3b20      	subs	r3, #32
2000456e:	4963      	ldr	r1, [pc, #396]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004570:	6849      	ldr	r1, [r1, #4]
20004572:	88c9      	ldrh	r1, [r1, #6]
20004574:	fb03 f101 	mul.w	r1, r3, r1
20004578:	4b60      	ldr	r3, [pc, #384]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000457a:	685b      	ldr	r3, [r3, #4]
2000457c:	889b      	ldrh	r3, [r3, #4]
2000457e:	3307      	adds	r3, #7
20004580:	2b00      	cmp	r3, #0
20004582:	da00      	bge.n	20004586 <TFTDisplay_ILI9341_DrawChar+0x6e>
20004584:	3307      	adds	r3, #7
20004586:	10db      	asrs	r3, r3, #3
20004588:	fb01 f303 	mul.w	r3, r1, r3
2000458c:	4413      	add	r3, r2
2000458e:	60fb      	str	r3, [r7, #12]
  for(i = 0; i < height; i++)
20004590:	2300      	movs	r3, #0
20004592:	627b      	str	r3, [r7, #36]	; 0x24
20004594:	e087      	b.n	200046a6 <TFTDisplay_ILI9341_DrawChar+0x18e>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
20004596:	8abb      	ldrh	r3, [r7, #20]
20004598:	3307      	adds	r3, #7
2000459a:	2b00      	cmp	r3, #0
2000459c:	da00      	bge.n	200045a0 <TFTDisplay_ILI9341_DrawChar+0x88>
2000459e:	3307      	adds	r3, #7
200045a0:	10db      	asrs	r3, r3, #3
200045a2:	461a      	mov	r2, r3
200045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200045a6:	fb02 f303 	mul.w	r3, r2, r3
200045aa:	68fa      	ldr	r2, [r7, #12]
200045ac:	4413      	add	r3, r2
200045ae:	60bb      	str	r3, [r7, #8]
    switch(((width + 7)/8))
200045b0:	8abb      	ldrh	r3, [r7, #20]
200045b2:	3307      	adds	r3, #7
200045b4:	2b00      	cmp	r3, #0
200045b6:	da00      	bge.n	200045ba <TFTDisplay_ILI9341_DrawChar+0xa2>
200045b8:	3307      	adds	r3, #7
200045ba:	10db      	asrs	r3, r3, #3
200045bc:	2b01      	cmp	r3, #1
200045be:	d002      	beq.n	200045c6 <TFTDisplay_ILI9341_DrawChar+0xae>
200045c0:	2b02      	cmp	r3, #2
200045c2:	d004      	beq.n	200045ce <TFTDisplay_ILI9341_DrawChar+0xb6>
200045c4:	e00c      	b.n	200045e0 <TFTDisplay_ILI9341_DrawChar+0xc8>
    {
      case 1:
          line =  pchar[0];      
200045c6:	68bb      	ldr	r3, [r7, #8]
200045c8:	781b      	ldrb	r3, [r3, #0]
200045ca:	61bb      	str	r3, [r7, #24]
          break;
200045cc:	e016      	b.n	200045fc <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
200045ce:	68bb      	ldr	r3, [r7, #8]
200045d0:	781b      	ldrb	r3, [r3, #0]
200045d2:	021b      	lsls	r3, r3, #8
200045d4:	68ba      	ldr	r2, [r7, #8]
200045d6:	3201      	adds	r2, #1
200045d8:	7812      	ldrb	r2, [r2, #0]
200045da:	4313      	orrs	r3, r2
200045dc:	61bb      	str	r3, [r7, #24]
          break;
200045de:	e00d      	b.n	200045fc <TFTDisplay_ILI9341_DrawChar+0xe4>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
200045e0:	68bb      	ldr	r3, [r7, #8]
200045e2:	781b      	ldrb	r3, [r3, #0]
200045e4:	041a      	lsls	r2, r3, #16
200045e6:	68bb      	ldr	r3, [r7, #8]
200045e8:	3301      	adds	r3, #1
200045ea:	781b      	ldrb	r3, [r3, #0]
200045ec:	021b      	lsls	r3, r3, #8
200045ee:	4313      	orrs	r3, r2
200045f0:	68ba      	ldr	r2, [r7, #8]
200045f2:	3202      	adds	r2, #2
200045f4:	7812      	ldrb	r2, [r2, #0]
200045f6:	4313      	orrs	r3, r2
200045f8:	61bb      	str	r3, [r7, #24]
        break;
200045fa:	bf00      	nop
    }
    for (j = 0; j < width; j++)
200045fc:	2300      	movs	r3, #0
200045fe:	623b      	str	r3, [r7, #32]
20004600:	e047      	b.n	20004692 <TFTDisplay_ILI9341_DrawChar+0x17a>
    {
      if(line & (1 << (width- j + offset- 1))) 
20004602:	8aba      	ldrh	r2, [r7, #20]
20004604:	6a3b      	ldr	r3, [r7, #32]
20004606:	1ad2      	subs	r2, r2, r3
20004608:	7cfb      	ldrb	r3, [r7, #19]
2000460a:	4413      	add	r3, r2
2000460c:	3b01      	subs	r3, #1
2000460e:	2201      	movs	r2, #1
20004610:	fa02 f303 	lsl.w	r3, r2, r3
20004614:	461a      	mov	r2, r3
20004616:	69bb      	ldr	r3, [r7, #24]
20004618:	4013      	ands	r3, r2
2000461a:	2b00      	cmp	r3, #0
2000461c:	d01b      	beq.n	20004656 <TFTDisplay_ILI9341_DrawChar+0x13e>
      {
    	DataBuffer[(i*width + j) * 2] = lcdprop.TextColor >> 8;
2000461e:	4b37      	ldr	r3, [pc, #220]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004620:	881b      	ldrh	r3, [r3, #0]
20004622:	0a1b      	lsrs	r3, r3, #8
20004624:	b299      	uxth	r1, r3
20004626:	8abb      	ldrh	r3, [r7, #20]
20004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000462a:	fb03 f202 	mul.w	r2, r3, r2
2000462e:	6a3b      	ldr	r3, [r7, #32]
20004630:	4413      	add	r3, r2
20004632:	005b      	lsls	r3, r3, #1
20004634:	b2c9      	uxtb	r1, r1
20004636:	4a32      	ldr	r2, [pc, #200]	; (20004700 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20004638:	54d1      	strb	r1, [r2, r3]
    	DataBuffer[(i*width + j)*2+1] = lcdprop.TextColor & 0xFF;
2000463a:	4b30      	ldr	r3, [pc, #192]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
2000463c:	8819      	ldrh	r1, [r3, #0]
2000463e:	8abb      	ldrh	r3, [r7, #20]
20004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004642:	fb03 f202 	mul.w	r2, r3, r2
20004646:	6a3b      	ldr	r3, [r7, #32]
20004648:	4413      	add	r3, r2
2000464a:	005b      	lsls	r3, r3, #1
2000464c:	3301      	adds	r3, #1
2000464e:	b2c9      	uxtb	r1, r1
20004650:	4a2b      	ldr	r2, [pc, #172]	; (20004700 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20004652:	54d1      	strb	r1, [r2, r3]
20004654:	e01a      	b.n	2000468c <TFTDisplay_ILI9341_DrawChar+0x174>
      }
      else
      {
    	DataBuffer[(i*width + j)*2] = lcdprop.BackColor >> 8;
20004656:	4b29      	ldr	r3, [pc, #164]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004658:	885b      	ldrh	r3, [r3, #2]
2000465a:	0a1b      	lsrs	r3, r3, #8
2000465c:	b299      	uxth	r1, r3
2000465e:	8abb      	ldrh	r3, [r7, #20]
20004660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20004662:	fb03 f202 	mul.w	r2, r3, r2
20004666:	6a3b      	ldr	r3, [r7, #32]
20004668:	4413      	add	r3, r2
2000466a:	005b      	lsls	r3, r3, #1
2000466c:	b2c9      	uxtb	r1, r1
2000466e:	4a24      	ldr	r2, [pc, #144]	; (20004700 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
20004670:	54d1      	strb	r1, [r2, r3]
        DataBuffer[(i*width + j)*2+1] = lcdprop.BackColor & 0xFF;
20004672:	4b22      	ldr	r3, [pc, #136]	; (200046fc <TFTDisplay_ILI9341_DrawChar+0x1e4>)
20004674:	8859      	ldrh	r1, [r3, #2]
20004676:	8abb      	ldrh	r3, [r7, #20]
20004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
2000467a:	fb03 f202 	mul.w	r2, r3, r2
2000467e:	6a3b      	ldr	r3, [r7, #32]
20004680:	4413      	add	r3, r2
20004682:	005b      	lsls	r3, r3, #1
20004684:	3301      	adds	r3, #1
20004686:	b2c9      	uxtb	r1, r1
20004688:	4a1d      	ldr	r2, [pc, #116]	; (20004700 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
2000468a:	54d1      	strb	r1, [r2, r3]
    for (j = 0; j < width; j++)
2000468c:	6a3b      	ldr	r3, [r7, #32]
2000468e:	3301      	adds	r3, #1
20004690:	623b      	str	r3, [r7, #32]
20004692:	8abb      	ldrh	r3, [r7, #20]
20004694:	6a3a      	ldr	r2, [r7, #32]
20004696:	429a      	cmp	r2, r3
20004698:	d3b3      	bcc.n	20004602 <TFTDisplay_ILI9341_DrawChar+0xea>
      } 
    }
    y_cur++;
2000469a:	8bfb      	ldrh	r3, [r7, #30]
2000469c:	3301      	adds	r3, #1
2000469e:	83fb      	strh	r3, [r7, #30]
  for(i = 0; i < height; i++)
200046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200046a2:	3301      	adds	r3, #1
200046a4:	627b      	str	r3, [r7, #36]	; 0x24
200046a6:	8afb      	ldrh	r3, [r7, #22]
200046a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200046aa:	429a      	cmp	r2, r3
200046ac:	f4ff af73 	bcc.w	20004596 <TFTDisplay_ILI9341_DrawChar+0x7e>
  }

  DmaSpiCnt = 1;
200046b0:	4b14      	ldr	r3, [pc, #80]	; (20004704 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
200046b2:	2201      	movs	r2, #1
200046b4:	601a      	str	r2, [r3, #0]
  tftDisplay_ILI9341_SetAddrWindow(x, y, x+width-1, y+height-1);
200046b6:	88fa      	ldrh	r2, [r7, #6]
200046b8:	8abb      	ldrh	r3, [r7, #20]
200046ba:	4413      	add	r3, r2
200046bc:	b29b      	uxth	r3, r3
200046be:	3b01      	subs	r3, #1
200046c0:	b29c      	uxth	r4, r3
200046c2:	88ba      	ldrh	r2, [r7, #4]
200046c4:	8afb      	ldrh	r3, [r7, #22]
200046c6:	4413      	add	r3, r2
200046c8:	b29b      	uxth	r3, r3
200046ca:	3b01      	subs	r3, #1
200046cc:	b29b      	uxth	r3, r3
200046ce:	88b9      	ldrh	r1, [r7, #4]
200046d0:	88f8      	ldrh	r0, [r7, #6]
200046d2:	4622      	mov	r2, r4
200046d4:	f000 f9dc 	bl	20004a90 <tftDisplay_ILI9341_SetAddrWindow>
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], width * height * 2, DmaSpiCnt);
200046d8:	8abb      	ldrh	r3, [r7, #20]
200046da:	8afa      	ldrh	r2, [r7, #22]
200046dc:	fb02 f303 	mul.w	r3, r2, r3
200046e0:	005b      	lsls	r3, r3, #1
200046e2:	4619      	mov	r1, r3
200046e4:	4b07      	ldr	r3, [pc, #28]	; (20004704 <TFTDisplay_ILI9341_DrawChar+0x1ec>)
200046e6:	681b      	ldr	r3, [r3, #0]
200046e8:	b2db      	uxtb	r3, r3
200046ea:	461a      	mov	r2, r3
200046ec:	4804      	ldr	r0, [pc, #16]	; (20004700 <TFTDisplay_ILI9341_DrawChar+0x1e8>)
200046ee:	f000 f92f 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
200046f2:	bf00      	nop
200046f4:	372c      	adds	r7, #44	; 0x2c
200046f6:	46bd      	mov	sp, r7
200046f8:	bd90      	pop	{r4, r7, pc}
200046fa:	bf00      	nop
200046fc:	2001eee4 	.word	0x2001eee4
20004700:	2000eee4 	.word	0x2000eee4
20004704:	2000a424 	.word	0x2000a424

20004708 <TFTDisplay_ILI9341_SetRotation>:
      (void)*str++;
  }
}
//-------------------------------------------------------------------
void TFTDisplay_ILI9341_SetRotation(uint8_t RotationSelectVal)
{
20004708:	b580      	push	{r7, lr}
2000470a:	b082      	sub	sp, #8
2000470c:	af00      	add	r7, sp, #0
2000470e:	4603      	mov	r3, r0
20004710:	71fb      	strb	r3, [r7, #7]
  tftDisplay_ILI9341_SendCommand(0x36);
20004712:	2036      	movs	r0, #54	; 0x36
20004714:	f000 f850 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
  switch(RotationSelectVal)
20004718:	79fb      	ldrb	r3, [r7, #7]
2000471a:	2b03      	cmp	r3, #3
2000471c:	d842      	bhi.n	200047a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
2000471e:	a201      	add	r2, pc, #4	; (adr r2, 20004724 <TFTDisplay_ILI9341_SetRotation+0x1c>)
20004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20004724:	20004735 	.word	0x20004735
20004728:	20004751 	.word	0x20004751
2000472c:	2000476d 	.word	0x2000476d
20004730:	20004789 	.word	0x20004789
  {
    case 0:
      DataBuffer[0] = ORIENTATION_PORTRAIT;
20004734:	4b1d      	ldr	r3, [pc, #116]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004736:	2248      	movs	r2, #72	; 0x48
20004738:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000473a:	481c      	ldr	r0, [pc, #112]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000473c:	f000 f8bc 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20004740:	4b1b      	ldr	r3, [pc, #108]	; (200047b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
20004742:	22f0      	movs	r2, #240	; 0xf0
20004744:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
20004746:	4b1b      	ldr	r3, [pc, #108]	; (200047b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
20004748:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000474c:	801a      	strh	r2, [r3, #0]
      break;
2000474e:	e029      	b.n	200047a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 1:
      DataBuffer[0] = ORIENTATION_LANDSCAPE;
20004750:	4b16      	ldr	r3, [pc, #88]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004752:	2228      	movs	r2, #40	; 0x28
20004754:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004756:	4815      	ldr	r0, [pc, #84]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004758:	f000 f8ae 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
2000475c:	4b14      	ldr	r3, [pc, #80]	; (200047b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000475e:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004762:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
20004764:	4b13      	ldr	r3, [pc, #76]	; (200047b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
20004766:	22f0      	movs	r2, #240	; 0xf0
20004768:	801a      	strh	r2, [r3, #0]
      break;
2000476a:	e01b      	b.n	200047a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 2:
      DataBuffer[0] = ORIENTATION_PORTRAIT_MIRROR;
2000476c:	4b0f      	ldr	r3, [pc, #60]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000476e:	2288      	movs	r2, #136	; 0x88
20004770:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004772:	480e      	ldr	r0, [pc, #56]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004774:	f000 f8a0 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 240;
20004778:	4b0d      	ldr	r3, [pc, #52]	; (200047b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
2000477a:	22f0      	movs	r2, #240	; 0xf0
2000477c:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 320;
2000477e:	4b0d      	ldr	r3, [pc, #52]	; (200047b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
20004780:	f44f 72a0 	mov.w	r2, #320	; 0x140
20004784:	801a      	strh	r2, [r3, #0]
      break;
20004786:	e00d      	b.n	200047a4 <TFTDisplay_ILI9341_SetRotation+0x9c>
    case 3:
      DataBuffer[0] = ORIENTATION_LANDSCAPE_MIRROR;
20004788:	4b08      	ldr	r3, [pc, #32]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
2000478a:	22e8      	movs	r2, #232	; 0xe8
2000478c:	701a      	strb	r2, [r3, #0]
      tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
2000478e:	4807      	ldr	r0, [pc, #28]	; (200047ac <TFTDisplay_ILI9341_SetRotation+0xa4>)
20004790:	f000 f892 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
      TFTDisplay_ILI9341_WIDTH = 320;
20004794:	4b06      	ldr	r3, [pc, #24]	; (200047b0 <TFTDisplay_ILI9341_SetRotation+0xa8>)
20004796:	f44f 72a0 	mov.w	r2, #320	; 0x140
2000479a:	801a      	strh	r2, [r3, #0]
      TFTDisplay_ILI9341_HEIGHT = 240;
2000479c:	4b05      	ldr	r3, [pc, #20]	; (200047b4 <TFTDisplay_ILI9341_SetRotation+0xac>)
2000479e:	22f0      	movs	r2, #240	; 0xf0
200047a0:	801a      	strh	r2, [r3, #0]
      break;
200047a2:	bf00      	nop
  }
}
200047a4:	bf00      	nop
200047a6:	3708      	adds	r7, #8
200047a8:	46bd      	mov	sp, r7
200047aa:	bd80      	pop	{r7, pc}
200047ac:	2000eee4 	.word	0x2000eee4
200047b0:	2000eee0 	.word	0x2000eee0
200047b4:	2000eee2 	.word	0x2000eee2

200047b8 <tftDisplay_ILI9341_SendCommand>:
//-------------------------------------------------------------------
//-------------------------------------------------------------------
static void tftDisplay_ILI9341_SendCommand(uint8_t command)
{
200047b8:	b5b0      	push	{r4, r5, r7, lr}
200047ba:	b084      	sub	sp, #16
200047bc:	af02      	add	r7, sp, #8
200047be:	4603      	mov	r3, r0
200047c0:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
200047c2:	2104      	movs	r1, #4
200047c4:	481d      	ldr	r0, [pc, #116]	; (2000483c <tftDisplay_ILI9341_SendCommand+0x84>)
200047c6:	f7ff fc67 	bl	20004098 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_COMMAND();
200047ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200047ce:	481c      	ldr	r0, [pc, #112]	; (20004840 <tftDisplay_ILI9341_SendCommand+0x88>)
200047d0:	f7ff fc62 	bl	20004098 <LL_GPIO_ResetOutputPin>
	DmaSpiCnt = 1;
200047d4:	4b1b      	ldr	r3, [pc, #108]	; (20004844 <tftDisplay_ILI9341_SendCommand+0x8c>)
200047d6:	2201      	movs	r2, #1
200047d8:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200047da:	2104      	movs	r1, #4
200047dc:	481a      	ldr	r0, [pc, #104]	; (20004848 <tftDisplay_ILI9341_SendCommand+0x90>)
200047de:	f7ff fcdd 	bl	2000419c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
200047e2:	2201      	movs	r2, #1
200047e4:	2104      	movs	r1, #4
200047e6:	4818      	ldr	r0, [pc, #96]	; (20004848 <tftDisplay_ILI9341_SendCommand+0x90>)
200047e8:	f7ff fd10 	bl	2000420c <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4, (uint32_t)&command,
200047ec:	1dfc      	adds	r4, r7, #7
200047ee:	4817      	ldr	r0, [pc, #92]	; (2000484c <tftDisplay_ILI9341_SendCommand+0x94>)
200047f0:	f7ff fc87 	bl	20004102 <LL_SPI_DMA_GetRegAddr>
200047f4:	4605      	mov	r5, r0
200047f6:	2104      	movs	r1, #4
200047f8:	4813      	ldr	r0, [pc, #76]	; (20004848 <tftDisplay_ILI9341_SendCommand+0x90>)
200047fa:	f7ff fcef 	bl	200041dc <LL_DMA_GetDataTransferDirection>
200047fe:	4603      	mov	r3, r0
20004800:	9300      	str	r3, [sp, #0]
20004802:	462b      	mov	r3, r5
20004804:	4622      	mov	r2, r4
20004806:	2104      	movs	r1, #4
20004808:	480f      	ldr	r0, [pc, #60]	; (20004848 <tftDisplay_ILI9341_SendCommand+0x90>)
2000480a:	f7ff fd23 	bl	20004254 <LL_DMA_ConfigAddresses>
			LL_SPI_DMA_GetRegAddr(SPI5), LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
2000480e:	2104      	movs	r1, #4
20004810:	480d      	ldr	r0, [pc, #52]	; (20004848 <tftDisplay_ILI9341_SendCommand+0x90>)
20004812:	f7ff fca3 	bl	2000415c <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20004816:	bf00      	nop
20004818:	4b0d      	ldr	r3, [pc, #52]	; (20004850 <tftDisplay_ILI9341_SendCommand+0x98>)
2000481a:	681b      	ldr	r3, [r3, #0]
2000481c:	f003 0301 	and.w	r3, r3, #1
20004820:	2b00      	cmp	r3, #0
20004822:	d1f9      	bne.n	20004818 <tftDisplay_ILI9341_SendCommand+0x60>
20004824:	4b08      	ldr	r3, [pc, #32]	; (20004848 <tftDisplay_ILI9341_SendCommand+0x90>)
20004826:	685b      	ldr	r3, [r3, #4]
20004828:	f003 0320 	and.w	r3, r3, #32
2000482c:	2b00      	cmp	r3, #0
2000482e:	d1f3      	bne.n	20004818 <tftDisplay_ILI9341_SendCommand+0x60>
}
20004830:	bf00      	nop
20004832:	bf00      	nop
20004834:	3708      	adds	r7, #8
20004836:	46bd      	mov	sp, r7
20004838:	bdb0      	pop	{r4, r5, r7, pc}
2000483a:	bf00      	nop
2000483c:	40020800 	.word	0x40020800
20004840:	40020c00 	.word	0x40020c00
20004844:	2000a424 	.word	0x2000a424
20004848:	40026400 	.word	0x40026400
2000484c:	40015000 	.word	0x40015000
20004850:	40026470 	.word	0x40026470

20004854 <tftDisplay_ILI9341_SendData>:
static void tftDisplay_ILI9341_SendData(uint8_t data)
{
20004854:	b580      	push	{r7, lr}
20004856:	b082      	sub	sp, #8
20004858:	af00      	add	r7, sp, #0
2000485a:	4603      	mov	r3, r0
2000485c:	71fb      	strb	r3, [r7, #7]
//	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
//
//	  while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
//	  //CS_DESELECT();

	CS_ACTIVE();
2000485e:	2104      	movs	r1, #4
20004860:	4812      	ldr	r0, [pc, #72]	; (200048ac <tftDisplay_ILI9341_SendData+0x58>)
20004862:	f7ff fc19 	bl	20004098 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
20004866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000486a:	4811      	ldr	r0, [pc, #68]	; (200048b0 <tftDisplay_ILI9341_SendData+0x5c>)
2000486c:	f7ff fc06 	bl	2000407c <LL_GPIO_SetOutputPin>
    while(!LL_SPI_IsActiveFlag_TXE(SPI5)) {}
20004870:	bf00      	nop
20004872:	4810      	ldr	r0, [pc, #64]	; (200048b4 <tftDisplay_ILI9341_SendData+0x60>)
20004874:	f7ff fc32 	bl	200040dc <LL_SPI_IsActiveFlag_TXE>
20004878:	4603      	mov	r3, r0
2000487a:	2b00      	cmp	r3, #0
2000487c:	d0f9      	beq.n	20004872 <tftDisplay_ILI9341_SendData+0x1e>
	LL_SPI_TransmitData8 (SPI5, data);
2000487e:	79fb      	ldrb	r3, [r7, #7]
20004880:	4619      	mov	r1, r3
20004882:	480c      	ldr	r0, [pc, #48]	; (200048b4 <tftDisplay_ILI9341_SendData+0x60>)
20004884:	f7ff fc57 	bl	20004136 <LL_SPI_TransmitData8>
	while(!LL_SPI_IsActiveFlag_RXNE(SPI5)) {}
20004888:	bf00      	nop
2000488a:	480a      	ldr	r0, [pc, #40]	; (200048b4 <tftDisplay_ILI9341_SendData+0x60>)
2000488c:	f7ff fc13 	bl	200040b6 <LL_SPI_IsActiveFlag_RXNE>
20004890:	4603      	mov	r3, r0
20004892:	2b00      	cmp	r3, #0
20004894:	d0f9      	beq.n	2000488a <tftDisplay_ILI9341_SendData+0x36>
	LL_SPI_ReceiveData8(SPI5);
20004896:	4807      	ldr	r0, [pc, #28]	; (200048b4 <tftDisplay_ILI9341_SendData+0x60>)
20004898:	f7ff fc3f 	bl	2000411a <LL_SPI_ReceiveData8>
	CS_DESELECT();
2000489c:	2104      	movs	r1, #4
2000489e:	4803      	ldr	r0, [pc, #12]	; (200048ac <tftDisplay_ILI9341_SendData+0x58>)
200048a0:	f7ff fbec 	bl	2000407c <LL_GPIO_SetOutputPin>
}
200048a4:	bf00      	nop
200048a6:	3708      	adds	r7, #8
200048a8:	46bd      	mov	sp, r7
200048aa:	bd80      	pop	{r7, pc}
200048ac:	40020800 	.word	0x40020800
200048b0:	40020c00 	.word	0x40020c00
200048b4:	40015000 	.word	0x40015000

200048b8 <tftDisplay_ILI9341_SendSingleData>:

static void tftDisplay_ILI9341_SendSingleData(uint32_t* BufferPtr)
{
200048b8:	b5b0      	push	{r4, r5, r7, lr}
200048ba:	b084      	sub	sp, #16
200048bc:	af02      	add	r7, sp, #8
200048be:	6078      	str	r0, [r7, #4]
	CS_ACTIVE();
200048c0:	2104      	movs	r1, #4
200048c2:	481d      	ldr	r0, [pc, #116]	; (20004938 <tftDisplay_ILI9341_SendSingleData+0x80>)
200048c4:	f7ff fbe8 	bl	20004098 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
200048c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
200048cc:	481b      	ldr	r0, [pc, #108]	; (2000493c <tftDisplay_ILI9341_SendSingleData+0x84>)
200048ce:	f7ff fbd5 	bl	2000407c <LL_GPIO_SetOutputPin>
	DmaSpiCnt = 1;
200048d2:	4b1b      	ldr	r3, [pc, #108]	; (20004940 <tftDisplay_ILI9341_SendSingleData+0x88>)
200048d4:	2201      	movs	r2, #1
200048d6:	601a      	str	r2, [r3, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200048d8:	2104      	movs	r1, #4
200048da:	481a      	ldr	r0, [pc, #104]	; (20004944 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200048dc:	f7ff fc5e 	bl	2000419c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, 1);
200048e0:	2201      	movs	r2, #1
200048e2:	2104      	movs	r1, #4
200048e4:	4817      	ldr	r0, [pc, #92]	; (20004944 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200048e6:	f7ff fc91 	bl	2000420c <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
200048ea:	687c      	ldr	r4, [r7, #4]
200048ec:	4816      	ldr	r0, [pc, #88]	; (20004948 <tftDisplay_ILI9341_SendSingleData+0x90>)
200048ee:	f7ff fc08 	bl	20004102 <LL_SPI_DMA_GetRegAddr>
200048f2:	4605      	mov	r5, r0
200048f4:	2104      	movs	r1, #4
200048f6:	4813      	ldr	r0, [pc, #76]	; (20004944 <tftDisplay_ILI9341_SendSingleData+0x8c>)
200048f8:	f7ff fc70 	bl	200041dc <LL_DMA_GetDataTransferDirection>
200048fc:	4603      	mov	r3, r0
200048fe:	9300      	str	r3, [sp, #0]
20004900:	462b      	mov	r3, r5
20004902:	4622      	mov	r2, r4
20004904:	2104      	movs	r1, #4
20004906:	480f      	ldr	r0, [pc, #60]	; (20004944 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004908:	f7ff fca4 	bl	20004254 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
2000490c:	2104      	movs	r1, #4
2000490e:	480d      	ldr	r0, [pc, #52]	; (20004944 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004910:	f7ff fc24 	bl	2000415c <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
20004914:	bf00      	nop
20004916:	4b0d      	ldr	r3, [pc, #52]	; (2000494c <tftDisplay_ILI9341_SendSingleData+0x94>)
20004918:	681b      	ldr	r3, [r3, #0]
2000491a:	f003 0301 	and.w	r3, r3, #1
2000491e:	2b00      	cmp	r3, #0
20004920:	d1f9      	bne.n	20004916 <tftDisplay_ILI9341_SendSingleData+0x5e>
20004922:	4b08      	ldr	r3, [pc, #32]	; (20004944 <tftDisplay_ILI9341_SendSingleData+0x8c>)
20004924:	685b      	ldr	r3, [r3, #4]
20004926:	f003 0320 	and.w	r3, r3, #32
2000492a:	2b00      	cmp	r3, #0
2000492c:	d1f3      	bne.n	20004916 <tftDisplay_ILI9341_SendSingleData+0x5e>
}
2000492e:	bf00      	nop
20004930:	bf00      	nop
20004932:	3708      	adds	r7, #8
20004934:	46bd      	mov	sp, r7
20004936:	bdb0      	pop	{r4, r5, r7, pc}
20004938:	40020800 	.word	0x40020800
2000493c:	40020c00 	.word	0x40020c00
20004940:	2000a424 	.word	0x2000a424
20004944:	40026400 	.word	0x40026400
20004948:	40015000 	.word	0x40015000
2000494c:	40026470 	.word	0x40026470

20004950 <tftDisplay_ILI9341_WriteMultipleData>:

static void tftDisplay_ILI9341_WriteMultipleData(uint32_t* BufferPtr, uint32_t BufferSize, uint8_t DmaCount)
{
20004950:	b5b0      	push	{r4, r5, r7, lr}
20004952:	b086      	sub	sp, #24
20004954:	af02      	add	r7, sp, #8
20004956:	60f8      	str	r0, [r7, #12]
20004958:	60b9      	str	r1, [r7, #8]
2000495a:	4613      	mov	r3, r2
2000495c:	71fb      	strb	r3, [r7, #7]
	CS_ACTIVE();
2000495e:	2104      	movs	r1, #4
20004960:	481d      	ldr	r0, [pc, #116]	; (200049d8 <tftDisplay_ILI9341_WriteMultipleData+0x88>)
20004962:	f7ff fb99 	bl	20004098 <LL_GPIO_ResetOutputPin>
	DC_SET_SEND_DATA();
20004966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000496a:	481c      	ldr	r0, [pc, #112]	; (200049dc <tftDisplay_ILI9341_WriteMultipleData+0x8c>)
2000496c:	f7ff fb86 	bl	2000407c <LL_GPIO_SetOutputPin>
	DmaSpiCnt = DmaCount;
20004970:	79fb      	ldrb	r3, [r7, #7]
20004972:	4a1b      	ldr	r2, [pc, #108]	; (200049e0 <tftDisplay_ILI9341_WriteMultipleData+0x90>)
20004974:	6013      	str	r3, [r2, #0]
	LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20004976:	2104      	movs	r1, #4
20004978:	481a      	ldr	r0, [pc, #104]	; (200049e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
2000497a:	f7ff fc0f 	bl	2000419c <LL_DMA_DisableStream>
	LL_DMA_SetDataLength(DMA2, LL_DMA_STREAM_4, BufferSize);
2000497e:	68ba      	ldr	r2, [r7, #8]
20004980:	2104      	movs	r1, #4
20004982:	4818      	ldr	r0, [pc, #96]	; (200049e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20004984:	f7ff fc42 	bl	2000420c <LL_DMA_SetDataLength>
	LL_DMA_ConfigAddresses(DMA2, LL_DMA_STREAM_4,
20004988:	68fc      	ldr	r4, [r7, #12]
2000498a:	4817      	ldr	r0, [pc, #92]	; (200049e8 <tftDisplay_ILI9341_WriteMultipleData+0x98>)
2000498c:	f7ff fbb9 	bl	20004102 <LL_SPI_DMA_GetRegAddr>
20004990:	4605      	mov	r5, r0
20004992:	2104      	movs	r1, #4
20004994:	4813      	ldr	r0, [pc, #76]	; (200049e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
20004996:	f7ff fc21 	bl	200041dc <LL_DMA_GetDataTransferDirection>
2000499a:	4603      	mov	r3, r0
2000499c:	9300      	str	r3, [sp, #0]
2000499e:	462b      	mov	r3, r5
200049a0:	4622      	mov	r2, r4
200049a2:	2104      	movs	r1, #4
200049a4:	480f      	ldr	r0, [pc, #60]	; (200049e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200049a6:	f7ff fc55 	bl	20004254 <LL_DMA_ConfigAddresses>
			(uint32_t)BufferPtr,
			LL_SPI_DMA_GetRegAddr(SPI5),
			LL_DMA_GetDataTransferDirection(DMA2, LL_DMA_STREAM_4));
	LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_4);
200049aa:	2104      	movs	r1, #4
200049ac:	480d      	ldr	r0, [pc, #52]	; (200049e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200049ae:	f7ff fbd5 	bl	2000415c <LL_DMA_EnableStream>

	while(((DMA2_Stream4->CR & DMA_SxCR_EN) != 0) || ((DMA2->HISR & DMA_HISR_TCIF4) != 0)) { }
200049b2:	bf00      	nop
200049b4:	4b0d      	ldr	r3, [pc, #52]	; (200049ec <tftDisplay_ILI9341_WriteMultipleData+0x9c>)
200049b6:	681b      	ldr	r3, [r3, #0]
200049b8:	f003 0301 	and.w	r3, r3, #1
200049bc:	2b00      	cmp	r3, #0
200049be:	d1f9      	bne.n	200049b4 <tftDisplay_ILI9341_WriteMultipleData+0x64>
200049c0:	4b08      	ldr	r3, [pc, #32]	; (200049e4 <tftDisplay_ILI9341_WriteMultipleData+0x94>)
200049c2:	685b      	ldr	r3, [r3, #4]
200049c4:	f003 0320 	and.w	r3, r3, #32
200049c8:	2b00      	cmp	r3, #0
200049ca:	d1f3      	bne.n	200049b4 <tftDisplay_ILI9341_WriteMultipleData+0x64>
}
200049cc:	bf00      	nop
200049ce:	bf00      	nop
200049d0:	3710      	adds	r7, #16
200049d2:	46bd      	mov	sp, r7
200049d4:	bdb0      	pop	{r4, r5, r7, pc}
200049d6:	bf00      	nop
200049d8:	40020800 	.word	0x40020800
200049dc:	40020c00 	.word	0x40020c00
200049e0:	2000a424 	.word	0x2000a424
200049e4:	40026400 	.word	0x40026400
200049e8:	40015000 	.word	0x40015000
200049ec:	40026470 	.word	0x40026470

200049f0 <tftDisplay_ILI9341_Reset>:
static void tftDisplay_ILI9341_Reset(void)
{
200049f0:	b580      	push	{r7, lr}
200049f2:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
200049f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
200049f8:	4806      	ldr	r0, [pc, #24]	; (20004a14 <tftDisplay_ILI9341_Reset+0x24>)
200049fa:	f7ff fb4d 	bl	20004098 <LL_GPIO_ResetOutputPin>
	LL_mDelay(5);
200049fe:	2005      	movs	r0, #5
20004a00:	f7fc f818 	bl	20000a34 <LL_mDelay>
	RESET_IDLE();
20004a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
20004a08:	4802      	ldr	r0, [pc, #8]	; (20004a14 <tftDisplay_ILI9341_Reset+0x24>)
20004a0a:	f7ff fb37 	bl	2000407c <LL_GPIO_SetOutputPin>
}
20004a0e:	bf00      	nop
20004a10:	bd80      	pop	{r7, pc}
20004a12:	bf00      	nop
20004a14:	40020c00 	.word	0x40020c00

20004a18 <tftDisplay_ILI9341_FontsInitialization>:
static void tftDisplay_ILI9341_FontsInitialization(void)
{
20004a18:	b480      	push	{r7}
20004a1a:	af00      	add	r7, sp, #0
  Font8.Height = 8;
20004a1c:	4b16      	ldr	r3, [pc, #88]	; (20004a78 <tftDisplay_ILI9341_FontsInitialization+0x60>)
20004a1e:	2208      	movs	r2, #8
20004a20:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
20004a22:	4b15      	ldr	r3, [pc, #84]	; (20004a78 <tftDisplay_ILI9341_FontsInitialization+0x60>)
20004a24:	2205      	movs	r2, #5
20004a26:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
20004a28:	4b14      	ldr	r3, [pc, #80]	; (20004a7c <tftDisplay_ILI9341_FontsInitialization+0x64>)
20004a2a:	220c      	movs	r2, #12
20004a2c:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
20004a2e:	4b13      	ldr	r3, [pc, #76]	; (20004a7c <tftDisplay_ILI9341_FontsInitialization+0x64>)
20004a30:	2207      	movs	r2, #7
20004a32:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
20004a34:	4b12      	ldr	r3, [pc, #72]	; (20004a80 <tftDisplay_ILI9341_FontsInitialization+0x68>)
20004a36:	2210      	movs	r2, #16
20004a38:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
20004a3a:	4b11      	ldr	r3, [pc, #68]	; (20004a80 <tftDisplay_ILI9341_FontsInitialization+0x68>)
20004a3c:	220b      	movs	r2, #11
20004a3e:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
20004a40:	4b10      	ldr	r3, [pc, #64]	; (20004a84 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
20004a42:	2214      	movs	r2, #20
20004a44:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
20004a46:	4b0f      	ldr	r3, [pc, #60]	; (20004a84 <tftDisplay_ILI9341_FontsInitialization+0x6c>)
20004a48:	220e      	movs	r2, #14
20004a4a:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
20004a4c:	4b0e      	ldr	r3, [pc, #56]	; (20004a88 <tftDisplay_ILI9341_FontsInitialization+0x70>)
20004a4e:	2218      	movs	r2, #24
20004a50:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
20004a52:	4b0d      	ldr	r3, [pc, #52]	; (20004a88 <tftDisplay_ILI9341_FontsInitialization+0x70>)
20004a54:	2211      	movs	r2, #17
20004a56:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT_COLOR_ILI9341_BLACK;
20004a58:	4b0c      	ldr	r3, [pc, #48]	; (20004a8c <tftDisplay_ILI9341_FontsInitialization+0x74>)
20004a5a:	2200      	movs	r2, #0
20004a5c:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT_COLOR_ILI9341_GREEN;
20004a5e:	4b0b      	ldr	r3, [pc, #44]	; (20004a8c <tftDisplay_ILI9341_FontsInitialization+0x74>)
20004a60:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
20004a64:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
20004a66:	4b09      	ldr	r3, [pc, #36]	; (20004a8c <tftDisplay_ILI9341_FontsInitialization+0x74>)
20004a68:	4a05      	ldr	r2, [pc, #20]	; (20004a80 <tftDisplay_ILI9341_FontsInitialization+0x68>)
20004a6a:	605a      	str	r2, [r3, #4]
}
20004a6c:	bf00      	nop
20004a6e:	46bd      	mov	sp, r7
20004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a74:	4770      	bx	lr
20004a76:	bf00      	nop
20004a78:	2000a418 	.word	0x2000a418
20004a7c:	2000a410 	.word	0x2000a410
20004a80:	2000a408 	.word	0x2000a408
20004a84:	2000a400 	.word	0x2000a400
20004a88:	2000a3f8 	.word	0x2000a3f8
20004a8c:	2001eee4 	.word	0x2001eee4

20004a90 <tftDisplay_ILI9341_SetAddrWindow>:
static void tftDisplay_ILI9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
20004a90:	b590      	push	{r4, r7, lr}
20004a92:	b083      	sub	sp, #12
20004a94:	af00      	add	r7, sp, #0
20004a96:	4604      	mov	r4, r0
20004a98:	4608      	mov	r0, r1
20004a9a:	4611      	mov	r1, r2
20004a9c:	461a      	mov	r2, r3
20004a9e:	4623      	mov	r3, r4
20004aa0:	80fb      	strh	r3, [r7, #6]
20004aa2:	4603      	mov	r3, r0
20004aa4:	80bb      	strh	r3, [r7, #4]
20004aa6:	460b      	mov	r3, r1
20004aa8:	807b      	strh	r3, [r7, #2]
20004aaa:	4613      	mov	r3, r2
20004aac:	803b      	strh	r3, [r7, #0]
  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_COLUMN_ADDR);
20004aae:	202a      	movs	r0, #42	; 0x2a
20004ab0:	f7ff fe82 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (x0 >> 8) & 0xFF;
20004ab4:	88fb      	ldrh	r3, [r7, #6]
20004ab6:	0a1b      	lsrs	r3, r3, #8
20004ab8:	b29b      	uxth	r3, r3
20004aba:	b2da      	uxtb	r2, r3
20004abc:	4b1b      	ldr	r3, [pc, #108]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004abe:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = x0 & 0xFF;
20004ac0:	88fb      	ldrh	r3, [r7, #6]
20004ac2:	b2da      	uxtb	r2, r3
20004ac4:	4b19      	ldr	r3, [pc, #100]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004ac6:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (x1 >> 8) & 0xFF;
20004ac8:	887b      	ldrh	r3, [r7, #2]
20004aca:	0a1b      	lsrs	r3, r3, #8
20004acc:	b29b      	uxth	r3, r3
20004ace:	b2da      	uxtb	r2, r3
20004ad0:	4b16      	ldr	r3, [pc, #88]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004ad2:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = x1 & 0xFF;
20004ad4:	887b      	ldrh	r3, [r7, #2]
20004ad6:	b2da      	uxtb	r2, r3
20004ad8:	4b14      	ldr	r3, [pc, #80]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004ada:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004adc:	2201      	movs	r2, #1
20004ade:	2104      	movs	r1, #4
20004ae0:	4812      	ldr	r0, [pc, #72]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004ae2:	f7ff ff35 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PAGE_ADDR);
20004ae6:	202b      	movs	r0, #43	; 0x2b
20004ae8:	f7ff fe66 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
  DataBuffer[0] = (y0 >> 8) & 0xFF;
20004aec:	88bb      	ldrh	r3, [r7, #4]
20004aee:	0a1b      	lsrs	r3, r3, #8
20004af0:	b29b      	uxth	r3, r3
20004af2:	b2da      	uxtb	r2, r3
20004af4:	4b0d      	ldr	r3, [pc, #52]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004af6:	701a      	strb	r2, [r3, #0]
  DataBuffer[1] = y0 & 0xFF;
20004af8:	88bb      	ldrh	r3, [r7, #4]
20004afa:	b2da      	uxtb	r2, r3
20004afc:	4b0b      	ldr	r3, [pc, #44]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004afe:	705a      	strb	r2, [r3, #1]
  DataBuffer[2] = (y1 >> 8) & 0xFF;
20004b00:	883b      	ldrh	r3, [r7, #0]
20004b02:	0a1b      	lsrs	r3, r3, #8
20004b04:	b29b      	uxth	r3, r3
20004b06:	b2da      	uxtb	r2, r3
20004b08:	4b08      	ldr	r3, [pc, #32]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004b0a:	709a      	strb	r2, [r3, #2]
  DataBuffer[3] = y1 & 0xFF;
20004b0c:	883b      	ldrh	r3, [r7, #0]
20004b0e:	b2da      	uxtb	r2, r3
20004b10:	4b06      	ldr	r3, [pc, #24]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004b12:	70da      	strb	r2, [r3, #3]
  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004b14:	2201      	movs	r2, #1
20004b16:	2104      	movs	r1, #4
20004b18:	4804      	ldr	r0, [pc, #16]	; (20004b2c <tftDisplay_ILI9341_SetAddrWindow+0x9c>)
20004b1a:	f7ff ff19 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>

  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GRAM);
20004b1e:	202c      	movs	r0, #44	; 0x2c
20004b20:	f7ff fe4a 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
}
20004b24:	bf00      	nop
20004b26:	370c      	adds	r7, #12
20004b28:	46bd      	mov	sp, r7
20004b2a:	bd90      	pop	{r4, r7, pc}
20004b2c:	2000eee4 	.word	0x2000eee4

20004b30 <tftDisplay_ILI9341_Init_PowerControl_A>:
//------------------------------------------------------------------
/* Initialization static functions */
static void tftDisplay_ILI9341_Init_PowerControl_A()
{
20004b30:	b580      	push	{r7, lr}
20004b32:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x39;
20004b34:	4b0c      	ldr	r3, [pc, #48]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004b36:	2239      	movs	r2, #57	; 0x39
20004b38:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x2C;
20004b3a:	4b0b      	ldr	r3, [pc, #44]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004b3c:	222c      	movs	r2, #44	; 0x2c
20004b3e:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x00;
20004b40:	4b09      	ldr	r3, [pc, #36]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004b42:	2200      	movs	r2, #0
20004b44:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x34;
20004b46:	4b08      	ldr	r3, [pc, #32]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004b48:	2234      	movs	r2, #52	; 0x34
20004b4a:	70da      	strb	r2, [r3, #3]
	DataBuffer[4] = 0x02;
20004b4c:	4b06      	ldr	r3, [pc, #24]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004b4e:	2202      	movs	r2, #2
20004b50:	711a      	strb	r2, [r3, #4]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERA);
20004b52:	20cb      	movs	r0, #203	; 0xcb
20004b54:	f7ff fe30 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 5, 1);
20004b58:	2201      	movs	r2, #1
20004b5a:	2105      	movs	r1, #5
20004b5c:	4802      	ldr	r0, [pc, #8]	; (20004b68 <tftDisplay_ILI9341_Init_PowerControl_A+0x38>)
20004b5e:	f7ff fef7 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004b62:	bf00      	nop
20004b64:	bd80      	pop	{r7, pc}
20004b66:	bf00      	nop
20004b68:	2000eee4 	.word	0x2000eee4

20004b6c <tftDisplay_ILI9341_Init_PowerControl_B>:

static void tftDisplay_ILI9341_Init_PowerControl_B()
{
20004b6c:	b580      	push	{r7, lr}
20004b6e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004b70:	4b09      	ldr	r3, [pc, #36]	; (20004b98 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004b72:	2200      	movs	r2, #0
20004b74:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0xC1;
20004b76:	4b08      	ldr	r3, [pc, #32]	; (20004b98 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004b78:	22c1      	movs	r2, #193	; 0xc1
20004b7a:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x30;
20004b7c:	4b06      	ldr	r3, [pc, #24]	; (20004b98 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004b7e:	2230      	movs	r2, #48	; 0x30
20004b80:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWERB);
20004b82:	20cf      	movs	r0, #207	; 0xcf
20004b84:	f7ff fe18 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20004b88:	2201      	movs	r2, #1
20004b8a:	2103      	movs	r1, #3
20004b8c:	4802      	ldr	r0, [pc, #8]	; (20004b98 <tftDisplay_ILI9341_Init_PowerControl_B+0x2c>)
20004b8e:	f7ff fedf 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004b92:	bf00      	nop
20004b94:	bd80      	pop	{r7, pc}
20004b96:	bf00      	nop
20004b98:	2000eee4 	.word	0x2000eee4

20004b9c <tftDisplay_ILI9341_Init_DriverTimingControl_A>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_A()
{
20004b9c:	b580      	push	{r7, lr}
20004b9e:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x85;
20004ba0:	4b09      	ldr	r3, [pc, #36]	; (20004bc8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004ba2:	2285      	movs	r2, #133	; 0x85
20004ba4:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
20004ba6:	4b08      	ldr	r3, [pc, #32]	; (20004bc8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004ba8:	2200      	movs	r2, #0
20004baa:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x78;
20004bac:	4b06      	ldr	r3, [pc, #24]	; (20004bc8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004bae:	2278      	movs	r2, #120	; 0x78
20004bb0:	709a      	strb	r2, [r3, #2]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20004bb2:	20ea      	movs	r0, #234	; 0xea
20004bb4:	f7ff fe00 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 3, 1);
20004bb8:	2201      	movs	r2, #1
20004bba:	2103      	movs	r1, #3
20004bbc:	4802      	ldr	r0, [pc, #8]	; (20004bc8 <tftDisplay_ILI9341_Init_DriverTimingControl_A+0x2c>)
20004bbe:	f7ff fec7 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004bc2:	bf00      	nop
20004bc4:	bd80      	pop	{r7, pc}
20004bc6:	bf00      	nop
20004bc8:	2000eee4 	.word	0x2000eee4

20004bcc <tftDisplay_ILI9341_Init_DriverTimingControl_B>:

static void tftDisplay_ILI9341_Init_DriverTimingControl_B()
{
20004bcc:	b580      	push	{r7, lr}
20004bce:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004bd0:	4b07      	ldr	r3, [pc, #28]	; (20004bf0 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004bd2:	2200      	movs	r2, #0
20004bd4:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x00;
20004bd6:	4b06      	ldr	r3, [pc, #24]	; (20004bf0 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004bd8:	2200      	movs	r2, #0
20004bda:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DTCB);
20004bdc:	20ea      	movs	r0, #234	; 0xea
20004bde:	f7ff fdeb 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004be2:	2201      	movs	r2, #1
20004be4:	2102      	movs	r1, #2
20004be6:	4802      	ldr	r0, [pc, #8]	; (20004bf0 <tftDisplay_ILI9341_Init_DriverTimingControl_B+0x24>)
20004be8:	f7ff feb2 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004bec:	bf00      	nop
20004bee:	bd80      	pop	{r7, pc}
20004bf0:	2000eee4 	.word	0x2000eee4

20004bf4 <tftDisplay_ILI9341_Init_PowerSequenceControl>:

static void tftDisplay_ILI9341_Init_PowerSequenceControl()
{
20004bf4:	b580      	push	{r7, lr}
20004bf6:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x64;
20004bf8:	4b0a      	ldr	r3, [pc, #40]	; (20004c24 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004bfa:	2264      	movs	r2, #100	; 0x64
20004bfc:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x03;
20004bfe:	4b09      	ldr	r3, [pc, #36]	; (20004c24 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004c00:	2203      	movs	r2, #3
20004c02:	705a      	strb	r2, [r3, #1]
	DataBuffer[2] = 0x12;
20004c04:	4b07      	ldr	r3, [pc, #28]	; (20004c24 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004c06:	2212      	movs	r2, #18
20004c08:	709a      	strb	r2, [r3, #2]
	DataBuffer[3] = 0x81;
20004c0a:	4b06      	ldr	r3, [pc, #24]	; (20004c24 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004c0c:	2281      	movs	r2, #129	; 0x81
20004c0e:	70da      	strb	r2, [r3, #3]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER_SEQ);
20004c10:	20ed      	movs	r0, #237	; 0xed
20004c12:	f7ff fdd1 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 4, 1);
20004c16:	2201      	movs	r2, #1
20004c18:	2104      	movs	r1, #4
20004c1a:	4802      	ldr	r0, [pc, #8]	; (20004c24 <tftDisplay_ILI9341_Init_PowerSequenceControl+0x30>)
20004c1c:	f7ff fe98 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004c20:	bf00      	nop
20004c22:	bd80      	pop	{r7, pc}
20004c24:	2000eee4 	.word	0x2000eee4

20004c28 <tftDisplay_ILI9341_Init_PumpRatioControl>:

static void tftDisplay_ILI9341_Init_PumpRatioControl()
{
20004c28:	b580      	push	{r7, lr}
20004c2a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x20;
20004c2c:	4b05      	ldr	r3, [pc, #20]	; (20004c44 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
20004c2e:	2220      	movs	r2, #32
20004c30:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PRC);
20004c32:	20f7      	movs	r0, #247	; 0xf7
20004c34:	f7ff fdc0 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004c38:	4802      	ldr	r0, [pc, #8]	; (20004c44 <tftDisplay_ILI9341_Init_PumpRatioControl+0x1c>)
20004c3a:	f7ff fe3d 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004c3e:	bf00      	nop
20004c40:	bd80      	pop	{r7, pc}
20004c42:	bf00      	nop
20004c44:	2000eee4 	.word	0x2000eee4

20004c48 <tftDisplay_ILI9341_Init_PowerControlVRH>:

static void tftDisplay_ILI9341_Init_PowerControlVRH()
{
20004c48:	b580      	push	{r7, lr}
20004c4a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
20004c4c:	4b05      	ldr	r3, [pc, #20]	; (20004c64 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
20004c4e:	2210      	movs	r2, #16
20004c50:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER1);
20004c52:	20c0      	movs	r0, #192	; 0xc0
20004c54:	f7ff fdb0 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004c58:	4802      	ldr	r0, [pc, #8]	; (20004c64 <tftDisplay_ILI9341_Init_PowerControlVRH+0x1c>)
20004c5a:	f7ff fe2d 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004c5e:	bf00      	nop
20004c60:	bd80      	pop	{r7, pc}
20004c62:	bf00      	nop
20004c64:	2000eee4 	.word	0x2000eee4

20004c68 <tftDisplay_ILI9341_Init_PowerControlSAP>:

static void tftDisplay_ILI9341_Init_PowerControlSAP()
{
20004c68:	b580      	push	{r7, lr}
20004c6a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x10;
20004c6c:	4b05      	ldr	r3, [pc, #20]	; (20004c84 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
20004c6e:	2210      	movs	r2, #16
20004c70:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_POWER2);
20004c72:	20c1      	movs	r0, #193	; 0xc1
20004c74:	f7ff fda0 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004c78:	4802      	ldr	r0, [pc, #8]	; (20004c84 <tftDisplay_ILI9341_Init_PowerControlSAP+0x1c>)
20004c7a:	f7ff fe1d 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004c7e:	bf00      	nop
20004c80:	bd80      	pop	{r7, pc}
20004c82:	bf00      	nop
20004c84:	2000eee4 	.word	0x2000eee4

20004c88 <tftDisplay_ILI9341_Init_VCOMControl_1>:

static void tftDisplay_ILI9341_Init_VCOMControl_1()
{
20004c88:	b580      	push	{r7, lr}
20004c8a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x3E;
20004c8c:	4b07      	ldr	r3, [pc, #28]	; (20004cac <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004c8e:	223e      	movs	r2, #62	; 0x3e
20004c90:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x28;
20004c92:	4b06      	ldr	r3, [pc, #24]	; (20004cac <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004c94:	2228      	movs	r2, #40	; 0x28
20004c96:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM1);
20004c98:	20c5      	movs	r0, #197	; 0xc5
20004c9a:	f7ff fd8d 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004c9e:	2201      	movs	r2, #1
20004ca0:	2102      	movs	r1, #2
20004ca2:	4802      	ldr	r0, [pc, #8]	; (20004cac <tftDisplay_ILI9341_Init_VCOMControl_1+0x24>)
20004ca4:	f7ff fe54 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004ca8:	bf00      	nop
20004caa:	bd80      	pop	{r7, pc}
20004cac:	2000eee4 	.word	0x2000eee4

20004cb0 <tftDisplay_ILI9341_Init_VCOMControl_2>:

static void tftDisplay_ILI9341_Init_VCOMControl_2()
{
20004cb0:	b580      	push	{r7, lr}
20004cb2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x86;
20004cb4:	4b05      	ldr	r3, [pc, #20]	; (20004ccc <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20004cb6:	2286      	movs	r2, #134	; 0x86
20004cb8:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_VCOM2);
20004cba:	20c7      	movs	r0, #199	; 0xc7
20004cbc:	f7ff fd7c 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004cc0:	4802      	ldr	r0, [pc, #8]	; (20004ccc <tftDisplay_ILI9341_Init_VCOMControl_2+0x1c>)
20004cc2:	f7ff fdf9 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004cc6:	bf00      	nop
20004cc8:	bd80      	pop	{r7, pc}
20004cca:	bf00      	nop
20004ccc:	2000eee4 	.word	0x2000eee4

20004cd0 <tftDisplay_ILI9341_Init_MemmoryAccessControl>:

static void tftDisplay_ILI9341_Init_MemmoryAccessControl()
{
20004cd0:	b580      	push	{r7, lr}
20004cd2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x48;
20004cd4:	4b05      	ldr	r3, [pc, #20]	; (20004cec <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20004cd6:	2248      	movs	r2, #72	; 0x48
20004cd8:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_MAC);
20004cda:	2036      	movs	r0, #54	; 0x36
20004cdc:	f7ff fd6c 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004ce0:	4802      	ldr	r0, [pc, #8]	; (20004cec <tftDisplay_ILI9341_Init_MemmoryAccessControl+0x1c>)
20004ce2:	f7ff fde9 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004ce6:	bf00      	nop
20004ce8:	bd80      	pop	{r7, pc}
20004cea:	bf00      	nop
20004cec:	2000eee4 	.word	0x2000eee4

20004cf0 <tftDisplay_ILI9341_Init_PixelFormatSet>:

static void tftDisplay_ILI9341_Init_PixelFormatSet()
{
20004cf0:	b580      	push	{r7, lr}
20004cf2:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x55;
20004cf4:	4b05      	ldr	r3, [pc, #20]	; (20004d0c <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20004cf6:	2255      	movs	r2, #85	; 0x55
20004cf8:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PIXEL_FORMAT);
20004cfa:	203a      	movs	r0, #58	; 0x3a
20004cfc:	f7ff fd5c 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004d00:	4802      	ldr	r0, [pc, #8]	; (20004d0c <tftDisplay_ILI9341_Init_PixelFormatSet+0x1c>)
20004d02:	f7ff fdd9 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004d06:	bf00      	nop
20004d08:	bd80      	pop	{r7, pc}
20004d0a:	bf00      	nop
20004d0c:	2000eee4 	.word	0x2000eee4

20004d10 <tftDisplay_ILI9341_Init_FrameRationControl>:

static void tftDisplay_ILI9341_Init_FrameRationControl()
{
20004d10:	b580      	push	{r7, lr}
20004d12:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x00;
20004d14:	4b07      	ldr	r3, [pc, #28]	; (20004d34 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004d16:	2200      	movs	r2, #0
20004d18:	701a      	strb	r2, [r3, #0]
	DataBuffer[1] = 0x18;
20004d1a:	4b06      	ldr	r3, [pc, #24]	; (20004d34 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004d1c:	2218      	movs	r2, #24
20004d1e:	705a      	strb	r2, [r3, #1]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_FRMCTR1);
20004d20:	20b1      	movs	r0, #177	; 0xb1
20004d22:	f7ff fd49 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 2, 1);
20004d26:	2201      	movs	r2, #1
20004d28:	2102      	movs	r1, #2
20004d2a:	4802      	ldr	r0, [pc, #8]	; (20004d34 <tftDisplay_ILI9341_Init_FrameRationControl+0x24>)
20004d2c:	f7ff fe10 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004d30:	bf00      	nop
20004d32:	bd80      	pop	{r7, pc}
20004d34:	2000eee4 	.word	0x2000eee4

20004d38 <tftDisplay_ILI9341_Init_DisplayFunctionControl>:

static void tftDisplay_ILI9341_Init_DisplayFunctionControl()
{
20004d38:	b580      	push	{r7, lr}
20004d3a:	af00      	add	r7, sp, #0
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_DFC);
20004d3c:	20b6      	movs	r0, #182	; 0xb6
20004d3e:	f7ff fd3b 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendData(0x08);
20004d42:	2008      	movs	r0, #8
20004d44:	f7ff fd86 	bl	20004854 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x82);
20004d48:	2082      	movs	r0, #130	; 0x82
20004d4a:	f7ff fd83 	bl	20004854 <tftDisplay_ILI9341_SendData>
	tftDisplay_ILI9341_SendData(0x27);
20004d4e:	2027      	movs	r0, #39	; 0x27
20004d50:	f7ff fd80 	bl	20004854 <tftDisplay_ILI9341_SendData>
}
20004d54:	bf00      	nop
20004d56:	bd80      	pop	{r7, pc}

20004d58 <tftDisplay_ILI9341_Init_GammaSet>:

static void tftDisplay_ILI9341_Init_GammaSet()
{
20004d58:	b580      	push	{r7, lr}
20004d5a:	af00      	add	r7, sp, #0
	DataBuffer[0] = 0x01;
20004d5c:	4b05      	ldr	r3, [pc, #20]	; (20004d74 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
20004d5e:	2201      	movs	r2, #1
20004d60:	701a      	strb	r2, [r3, #0]
	tftDisplay_ILI9341_SendCommand(TFT_ILI9341_GAMMA);
20004d62:	2026      	movs	r0, #38	; 0x26
20004d64:	f7ff fd28 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	tftDisplay_ILI9341_SendSingleData((uint32_t*)&DataBuffer[0]);
20004d68:	4802      	ldr	r0, [pc, #8]	; (20004d74 <tftDisplay_ILI9341_Init_GammaSet+0x1c>)
20004d6a:	f7ff fda5 	bl	200048b8 <tftDisplay_ILI9341_SendSingleData>
}
20004d6e:	bf00      	nop
20004d70:	bd80      	pop	{r7, pc}
20004d72:	bf00      	nop
20004d74:	2000eee4 	.word	0x2000eee4

20004d78 <tftDisplay_ILI9341_Init_PositiveGammaCorection>:

static void tftDisplay_ILI9341_Init_PositiveGammaCorection()
{
20004d78:	b580      	push	{r7, lr}
20004d7a:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x0F;
20004d7c:	4b1b      	ldr	r3, [pc, #108]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004d7e:	220f      	movs	r2, #15
20004d80:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x31;
20004d82:	4b1a      	ldr	r3, [pc, #104]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004d84:	2231      	movs	r2, #49	; 0x31
20004d86:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x2B;
20004d88:	4b18      	ldr	r3, [pc, #96]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004d8a:	222b      	movs	r2, #43	; 0x2b
20004d8c:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x0C;
20004d8e:	4b17      	ldr	r3, [pc, #92]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004d90:	220c      	movs	r2, #12
20004d92:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x0E;
20004d94:	4b15      	ldr	r3, [pc, #84]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004d96:	220e      	movs	r2, #14
20004d98:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x08;
20004d9a:	4b14      	ldr	r3, [pc, #80]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004d9c:	2208      	movs	r2, #8
20004d9e:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x4E;
20004da0:	4b12      	ldr	r3, [pc, #72]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004da2:	224e      	movs	r2, #78	; 0x4e
20004da4:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xF1;
20004da6:	4b11      	ldr	r3, [pc, #68]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004da8:	22f1      	movs	r2, #241	; 0xf1
20004daa:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x37;
20004dac:	4b0f      	ldr	r3, [pc, #60]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004dae:	2237      	movs	r2, #55	; 0x37
20004db0:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x07;
20004db2:	4b0e      	ldr	r3, [pc, #56]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004db4:	2207      	movs	r2, #7
20004db6:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x10;
20004db8:	4b0c      	ldr	r3, [pc, #48]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004dba:	2210      	movs	r2, #16
20004dbc:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x03;
20004dbe:	4b0b      	ldr	r3, [pc, #44]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004dc0:	2203      	movs	r2, #3
20004dc2:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x0E;
20004dc4:	4b09      	ldr	r3, [pc, #36]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004dc6:	220e      	movs	r2, #14
20004dc8:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x09;
20004dca:	4b08      	ldr	r3, [pc, #32]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004dcc:	2209      	movs	r2, #9
20004dce:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x00;
20004dd0:	4b06      	ldr	r3, [pc, #24]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004dd2:	2200      	movs	r2, #0
20004dd4:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_PGAMMA);
20004dd6:	20e0      	movs	r0, #224	; 0xe0
20004dd8:	f7ff fcee 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20004ddc:	2201      	movs	r2, #1
20004dde:	210f      	movs	r1, #15
20004de0:	4802      	ldr	r0, [pc, #8]	; (20004dec <tftDisplay_ILI9341_Init_PositiveGammaCorection+0x74>)
20004de2:	f7ff fdb5 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004de6:	bf00      	nop
20004de8:	bd80      	pop	{r7, pc}
20004dea:	bf00      	nop
20004dec:	2000eee4 	.word	0x2000eee4

20004df0 <tftDisplay_ILI9341_Init_NegativeGammaCorection>:

static void tftDisplay_ILI9341_Init_NegativeGammaCorection()
{
20004df0:	b580      	push	{r7, lr}
20004df2:	af00      	add	r7, sp, #0
	  DataBuffer[0] = 0x00;
20004df4:	4b1b      	ldr	r3, [pc, #108]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004df6:	2200      	movs	r2, #0
20004df8:	701a      	strb	r2, [r3, #0]
	  DataBuffer[1] = 0x0E;
20004dfa:	4b1a      	ldr	r3, [pc, #104]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004dfc:	220e      	movs	r2, #14
20004dfe:	705a      	strb	r2, [r3, #1]
	  DataBuffer[2] = 0x14;
20004e00:	4b18      	ldr	r3, [pc, #96]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e02:	2214      	movs	r2, #20
20004e04:	709a      	strb	r2, [r3, #2]
	  DataBuffer[3] = 0x03;
20004e06:	4b17      	ldr	r3, [pc, #92]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e08:	2203      	movs	r2, #3
20004e0a:	70da      	strb	r2, [r3, #3]
	  DataBuffer[4] = 0x11;
20004e0c:	4b15      	ldr	r3, [pc, #84]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e0e:	2211      	movs	r2, #17
20004e10:	711a      	strb	r2, [r3, #4]
	  DataBuffer[5] = 0x07;
20004e12:	4b14      	ldr	r3, [pc, #80]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e14:	2207      	movs	r2, #7
20004e16:	715a      	strb	r2, [r3, #5]
	  DataBuffer[6] = 0x31;
20004e18:	4b12      	ldr	r3, [pc, #72]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e1a:	2231      	movs	r2, #49	; 0x31
20004e1c:	719a      	strb	r2, [r3, #6]
	  DataBuffer[7] = 0xC1;
20004e1e:	4b11      	ldr	r3, [pc, #68]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e20:	22c1      	movs	r2, #193	; 0xc1
20004e22:	71da      	strb	r2, [r3, #7]
	  DataBuffer[8] = 0x48;
20004e24:	4b0f      	ldr	r3, [pc, #60]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e26:	2248      	movs	r2, #72	; 0x48
20004e28:	721a      	strb	r2, [r3, #8]
	  DataBuffer[9] = 0x08;
20004e2a:	4b0e      	ldr	r3, [pc, #56]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e2c:	2208      	movs	r2, #8
20004e2e:	725a      	strb	r2, [r3, #9]
	  DataBuffer[10] = 0x0F;
20004e30:	4b0c      	ldr	r3, [pc, #48]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e32:	220f      	movs	r2, #15
20004e34:	729a      	strb	r2, [r3, #10]
	  DataBuffer[11] = 0x0C;
20004e36:	4b0b      	ldr	r3, [pc, #44]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e38:	220c      	movs	r2, #12
20004e3a:	72da      	strb	r2, [r3, #11]
	  DataBuffer[12] = 0x31;
20004e3c:	4b09      	ldr	r3, [pc, #36]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e3e:	2231      	movs	r2, #49	; 0x31
20004e40:	731a      	strb	r2, [r3, #12]
	  DataBuffer[13] = 0x36;
20004e42:	4b08      	ldr	r3, [pc, #32]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e44:	2236      	movs	r2, #54	; 0x36
20004e46:	735a      	strb	r2, [r3, #13]
	  DataBuffer[14] = 0x0F;
20004e48:	4b06      	ldr	r3, [pc, #24]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e4a:	220f      	movs	r2, #15
20004e4c:	739a      	strb	r2, [r3, #14]
	  tftDisplay_ILI9341_SendCommand(TFT_ILI9341_NGAMMA);
20004e4e:	20e1      	movs	r0, #225	; 0xe1
20004e50:	f7ff fcb2 	bl	200047b8 <tftDisplay_ILI9341_SendCommand>
	  tftDisplay_ILI9341_WriteMultipleData((uint32_t*)&DataBuffer[0], 15, 1);
20004e54:	2201      	movs	r2, #1
20004e56:	210f      	movs	r1, #15
20004e58:	4802      	ldr	r0, [pc, #8]	; (20004e64 <tftDisplay_ILI9341_Init_NegativeGammaCorection+0x74>)
20004e5a:	f7ff fd79 	bl	20004950 <tftDisplay_ILI9341_WriteMultipleData>
}
20004e5e:	bf00      	nop
20004e60:	bd80      	pop	{r7, pc}
20004e62:	bf00      	nop
20004e64:	2000eee4 	.word	0x2000eee4

20004e68 <__NVIC_SetPriorityGrouping>:
{
20004e68:	b480      	push	{r7}
20004e6a:	b085      	sub	sp, #20
20004e6c:	af00      	add	r7, sp, #0
20004e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20004e70:	687b      	ldr	r3, [r7, #4]
20004e72:	f003 0307 	and.w	r3, r3, #7
20004e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20004e78:	4b0c      	ldr	r3, [pc, #48]	; (20004eac <__NVIC_SetPriorityGrouping+0x44>)
20004e7a:	68db      	ldr	r3, [r3, #12]
20004e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20004e7e:	68ba      	ldr	r2, [r7, #8]
20004e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20004e84:	4013      	ands	r3, r2
20004e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20004e88:	68fb      	ldr	r3, [r7, #12]
20004e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20004e8c:	68bb      	ldr	r3, [r7, #8]
20004e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20004e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20004e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20004e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20004e9a:	4a04      	ldr	r2, [pc, #16]	; (20004eac <__NVIC_SetPriorityGrouping+0x44>)
20004e9c:	68bb      	ldr	r3, [r7, #8]
20004e9e:	60d3      	str	r3, [r2, #12]
}
20004ea0:	bf00      	nop
20004ea2:	3714      	adds	r7, #20
20004ea4:	46bd      	mov	sp, r7
20004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
20004eaa:	4770      	bx	lr
20004eac:	e000ed00 	.word	0xe000ed00

20004eb0 <__NVIC_GetPriorityGrouping>:
{
20004eb0:	b480      	push	{r7}
20004eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20004eb4:	4b04      	ldr	r3, [pc, #16]	; (20004ec8 <__NVIC_GetPriorityGrouping+0x18>)
20004eb6:	68db      	ldr	r3, [r3, #12]
20004eb8:	0a1b      	lsrs	r3, r3, #8
20004eba:	f003 0307 	and.w	r3, r3, #7
}
20004ebe:	4618      	mov	r0, r3
20004ec0:	46bd      	mov	sp, r7
20004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ec6:	4770      	bx	lr
20004ec8:	e000ed00 	.word	0xe000ed00

20004ecc <__NVIC_EnableIRQ>:
{
20004ecc:	b480      	push	{r7}
20004ece:	b083      	sub	sp, #12
20004ed0:	af00      	add	r7, sp, #0
20004ed2:	4603      	mov	r3, r0
20004ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004eda:	2b00      	cmp	r3, #0
20004edc:	db0b      	blt.n	20004ef6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20004ede:	79fb      	ldrb	r3, [r7, #7]
20004ee0:	f003 021f 	and.w	r2, r3, #31
20004ee4:	4907      	ldr	r1, [pc, #28]	; (20004f04 <__NVIC_EnableIRQ+0x38>)
20004ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004eea:	095b      	lsrs	r3, r3, #5
20004eec:	2001      	movs	r0, #1
20004eee:	fa00 f202 	lsl.w	r2, r0, r2
20004ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
20004ef6:	bf00      	nop
20004ef8:	370c      	adds	r7, #12
20004efa:	46bd      	mov	sp, r7
20004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f00:	4770      	bx	lr
20004f02:	bf00      	nop
20004f04:	e000e100 	.word	0xe000e100

20004f08 <__NVIC_SetPriority>:
{
20004f08:	b480      	push	{r7}
20004f0a:	b083      	sub	sp, #12
20004f0c:	af00      	add	r7, sp, #0
20004f0e:	4603      	mov	r3, r0
20004f10:	6039      	str	r1, [r7, #0]
20004f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20004f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004f18:	2b00      	cmp	r3, #0
20004f1a:	db0a      	blt.n	20004f32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004f1c:	683b      	ldr	r3, [r7, #0]
20004f1e:	b2da      	uxtb	r2, r3
20004f20:	490c      	ldr	r1, [pc, #48]	; (20004f54 <__NVIC_SetPriority+0x4c>)
20004f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
20004f26:	0112      	lsls	r2, r2, #4
20004f28:	b2d2      	uxtb	r2, r2
20004f2a:	440b      	add	r3, r1
20004f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
20004f30:	e00a      	b.n	20004f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20004f32:	683b      	ldr	r3, [r7, #0]
20004f34:	b2da      	uxtb	r2, r3
20004f36:	4908      	ldr	r1, [pc, #32]	; (20004f58 <__NVIC_SetPriority+0x50>)
20004f38:	79fb      	ldrb	r3, [r7, #7]
20004f3a:	f003 030f 	and.w	r3, r3, #15
20004f3e:	3b04      	subs	r3, #4
20004f40:	0112      	lsls	r2, r2, #4
20004f42:	b2d2      	uxtb	r2, r2
20004f44:	440b      	add	r3, r1
20004f46:	761a      	strb	r2, [r3, #24]
}
20004f48:	bf00      	nop
20004f4a:	370c      	adds	r7, #12
20004f4c:	46bd      	mov	sp, r7
20004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004f52:	4770      	bx	lr
20004f54:	e000e100 	.word	0xe000e100
20004f58:	e000ed00 	.word	0xe000ed00

20004f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20004f5c:	b480      	push	{r7}
20004f5e:	b089      	sub	sp, #36	; 0x24
20004f60:	af00      	add	r7, sp, #0
20004f62:	60f8      	str	r0, [r7, #12]
20004f64:	60b9      	str	r1, [r7, #8]
20004f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20004f68:	68fb      	ldr	r3, [r7, #12]
20004f6a:	f003 0307 	and.w	r3, r3, #7
20004f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20004f70:	69fb      	ldr	r3, [r7, #28]
20004f72:	f1c3 0307 	rsb	r3, r3, #7
20004f76:	2b04      	cmp	r3, #4
20004f78:	bf28      	it	cs
20004f7a:	2304      	movcs	r3, #4
20004f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20004f7e:	69fb      	ldr	r3, [r7, #28]
20004f80:	3304      	adds	r3, #4
20004f82:	2b06      	cmp	r3, #6
20004f84:	d902      	bls.n	20004f8c <NVIC_EncodePriority+0x30>
20004f86:	69fb      	ldr	r3, [r7, #28]
20004f88:	3b03      	subs	r3, #3
20004f8a:	e000      	b.n	20004f8e <NVIC_EncodePriority+0x32>
20004f8c:	2300      	movs	r3, #0
20004f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004f90:	f04f 32ff 	mov.w	r2, #4294967295
20004f94:	69bb      	ldr	r3, [r7, #24]
20004f96:	fa02 f303 	lsl.w	r3, r2, r3
20004f9a:	43da      	mvns	r2, r3
20004f9c:	68bb      	ldr	r3, [r7, #8]
20004f9e:	401a      	ands	r2, r3
20004fa0:	697b      	ldr	r3, [r7, #20]
20004fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20004fa4:	f04f 31ff 	mov.w	r1, #4294967295
20004fa8:	697b      	ldr	r3, [r7, #20]
20004faa:	fa01 f303 	lsl.w	r3, r1, r3
20004fae:	43d9      	mvns	r1, r3
20004fb0:	687b      	ldr	r3, [r7, #4]
20004fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20004fb4:	4313      	orrs	r3, r2
         );
}
20004fb6:	4618      	mov	r0, r3
20004fb8:	3724      	adds	r7, #36	; 0x24
20004fba:	46bd      	mov	sp, r7
20004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fc0:	4770      	bx	lr
	...

20004fc4 <LL_DMA_DisableStream>:
{
20004fc4:	b480      	push	{r7}
20004fc6:	b083      	sub	sp, #12
20004fc8:	af00      	add	r7, sp, #0
20004fca:	6078      	str	r0, [r7, #4]
20004fcc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
20004fce:	4a0c      	ldr	r2, [pc, #48]	; (20005000 <LL_DMA_DisableStream+0x3c>)
20004fd0:	683b      	ldr	r3, [r7, #0]
20004fd2:	4413      	add	r3, r2
20004fd4:	781b      	ldrb	r3, [r3, #0]
20004fd6:	461a      	mov	r2, r3
20004fd8:	687b      	ldr	r3, [r7, #4]
20004fda:	4413      	add	r3, r2
20004fdc:	681b      	ldr	r3, [r3, #0]
20004fde:	4908      	ldr	r1, [pc, #32]	; (20005000 <LL_DMA_DisableStream+0x3c>)
20004fe0:	683a      	ldr	r2, [r7, #0]
20004fe2:	440a      	add	r2, r1
20004fe4:	7812      	ldrb	r2, [r2, #0]
20004fe6:	4611      	mov	r1, r2
20004fe8:	687a      	ldr	r2, [r7, #4]
20004fea:	440a      	add	r2, r1
20004fec:	f023 0301 	bic.w	r3, r3, #1
20004ff0:	6013      	str	r3, [r2, #0]
}
20004ff2:	bf00      	nop
20004ff4:	370c      	adds	r7, #12
20004ff6:	46bd      	mov	sp, r7
20004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ffc:	4770      	bx	lr
20004ffe:	bf00      	nop
20005000:	2000a2c0 	.word	0x2000a2c0

20005004 <LL_DMA_SetDataTransferDirection>:
{
20005004:	b480      	push	{r7}
20005006:	b085      	sub	sp, #20
20005008:	af00      	add	r7, sp, #0
2000500a:	60f8      	str	r0, [r7, #12]
2000500c:	60b9      	str	r1, [r7, #8]
2000500e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
20005010:	4a0d      	ldr	r2, [pc, #52]	; (20005048 <LL_DMA_SetDataTransferDirection+0x44>)
20005012:	68bb      	ldr	r3, [r7, #8]
20005014:	4413      	add	r3, r2
20005016:	781b      	ldrb	r3, [r3, #0]
20005018:	461a      	mov	r2, r3
2000501a:	68fb      	ldr	r3, [r7, #12]
2000501c:	4413      	add	r3, r2
2000501e:	681b      	ldr	r3, [r3, #0]
20005020:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
20005024:	4908      	ldr	r1, [pc, #32]	; (20005048 <LL_DMA_SetDataTransferDirection+0x44>)
20005026:	68bb      	ldr	r3, [r7, #8]
20005028:	440b      	add	r3, r1
2000502a:	781b      	ldrb	r3, [r3, #0]
2000502c:	4619      	mov	r1, r3
2000502e:	68fb      	ldr	r3, [r7, #12]
20005030:	440b      	add	r3, r1
20005032:	4619      	mov	r1, r3
20005034:	687b      	ldr	r3, [r7, #4]
20005036:	4313      	orrs	r3, r2
20005038:	600b      	str	r3, [r1, #0]
}
2000503a:	bf00      	nop
2000503c:	3714      	adds	r7, #20
2000503e:	46bd      	mov	sp, r7
20005040:	f85d 7b04 	ldr.w	r7, [sp], #4
20005044:	4770      	bx	lr
20005046:	bf00      	nop
20005048:	2000a2c0 	.word	0x2000a2c0

2000504c <LL_DMA_SetMode>:
{
2000504c:	b480      	push	{r7}
2000504e:	b085      	sub	sp, #20
20005050:	af00      	add	r7, sp, #0
20005052:	60f8      	str	r0, [r7, #12]
20005054:	60b9      	str	r1, [r7, #8]
20005056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
20005058:	4a0d      	ldr	r2, [pc, #52]	; (20005090 <LL_DMA_SetMode+0x44>)
2000505a:	68bb      	ldr	r3, [r7, #8]
2000505c:	4413      	add	r3, r2
2000505e:	781b      	ldrb	r3, [r3, #0]
20005060:	461a      	mov	r2, r3
20005062:	68fb      	ldr	r3, [r7, #12]
20005064:	4413      	add	r3, r2
20005066:	681b      	ldr	r3, [r3, #0]
20005068:	f423 7290 	bic.w	r2, r3, #288	; 0x120
2000506c:	4908      	ldr	r1, [pc, #32]	; (20005090 <LL_DMA_SetMode+0x44>)
2000506e:	68bb      	ldr	r3, [r7, #8]
20005070:	440b      	add	r3, r1
20005072:	781b      	ldrb	r3, [r3, #0]
20005074:	4619      	mov	r1, r3
20005076:	68fb      	ldr	r3, [r7, #12]
20005078:	440b      	add	r3, r1
2000507a:	4619      	mov	r1, r3
2000507c:	687b      	ldr	r3, [r7, #4]
2000507e:	4313      	orrs	r3, r2
20005080:	600b      	str	r3, [r1, #0]
}
20005082:	bf00      	nop
20005084:	3714      	adds	r7, #20
20005086:	46bd      	mov	sp, r7
20005088:	f85d 7b04 	ldr.w	r7, [sp], #4
2000508c:	4770      	bx	lr
2000508e:	bf00      	nop
20005090:	2000a2c0 	.word	0x2000a2c0

20005094 <LL_DMA_SetPeriphIncMode>:
{
20005094:	b480      	push	{r7}
20005096:	b085      	sub	sp, #20
20005098:	af00      	add	r7, sp, #0
2000509a:	60f8      	str	r0, [r7, #12]
2000509c:	60b9      	str	r1, [r7, #8]
2000509e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
200050a0:	4a0d      	ldr	r2, [pc, #52]	; (200050d8 <LL_DMA_SetPeriphIncMode+0x44>)
200050a2:	68bb      	ldr	r3, [r7, #8]
200050a4:	4413      	add	r3, r2
200050a6:	781b      	ldrb	r3, [r3, #0]
200050a8:	461a      	mov	r2, r3
200050aa:	68fb      	ldr	r3, [r7, #12]
200050ac:	4413      	add	r3, r2
200050ae:	681b      	ldr	r3, [r3, #0]
200050b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
200050b4:	4908      	ldr	r1, [pc, #32]	; (200050d8 <LL_DMA_SetPeriphIncMode+0x44>)
200050b6:	68bb      	ldr	r3, [r7, #8]
200050b8:	440b      	add	r3, r1
200050ba:	781b      	ldrb	r3, [r3, #0]
200050bc:	4619      	mov	r1, r3
200050be:	68fb      	ldr	r3, [r7, #12]
200050c0:	440b      	add	r3, r1
200050c2:	4619      	mov	r1, r3
200050c4:	687b      	ldr	r3, [r7, #4]
200050c6:	4313      	orrs	r3, r2
200050c8:	600b      	str	r3, [r1, #0]
}
200050ca:	bf00      	nop
200050cc:	3714      	adds	r7, #20
200050ce:	46bd      	mov	sp, r7
200050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
200050d4:	4770      	bx	lr
200050d6:	bf00      	nop
200050d8:	2000a2c0 	.word	0x2000a2c0

200050dc <LL_DMA_SetMemoryIncMode>:
{
200050dc:	b480      	push	{r7}
200050de:	b085      	sub	sp, #20
200050e0:	af00      	add	r7, sp, #0
200050e2:	60f8      	str	r0, [r7, #12]
200050e4:	60b9      	str	r1, [r7, #8]
200050e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
200050e8:	4a0d      	ldr	r2, [pc, #52]	; (20005120 <LL_DMA_SetMemoryIncMode+0x44>)
200050ea:	68bb      	ldr	r3, [r7, #8]
200050ec:	4413      	add	r3, r2
200050ee:	781b      	ldrb	r3, [r3, #0]
200050f0:	461a      	mov	r2, r3
200050f2:	68fb      	ldr	r3, [r7, #12]
200050f4:	4413      	add	r3, r2
200050f6:	681b      	ldr	r3, [r3, #0]
200050f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
200050fc:	4908      	ldr	r1, [pc, #32]	; (20005120 <LL_DMA_SetMemoryIncMode+0x44>)
200050fe:	68bb      	ldr	r3, [r7, #8]
20005100:	440b      	add	r3, r1
20005102:	781b      	ldrb	r3, [r3, #0]
20005104:	4619      	mov	r1, r3
20005106:	68fb      	ldr	r3, [r7, #12]
20005108:	440b      	add	r3, r1
2000510a:	4619      	mov	r1, r3
2000510c:	687b      	ldr	r3, [r7, #4]
2000510e:	4313      	orrs	r3, r2
20005110:	600b      	str	r3, [r1, #0]
}
20005112:	bf00      	nop
20005114:	3714      	adds	r7, #20
20005116:	46bd      	mov	sp, r7
20005118:	f85d 7b04 	ldr.w	r7, [sp], #4
2000511c:	4770      	bx	lr
2000511e:	bf00      	nop
20005120:	2000a2c0 	.word	0x2000a2c0

20005124 <LL_DMA_SetPeriphSize>:
{
20005124:	b480      	push	{r7}
20005126:	b085      	sub	sp, #20
20005128:	af00      	add	r7, sp, #0
2000512a:	60f8      	str	r0, [r7, #12]
2000512c:	60b9      	str	r1, [r7, #8]
2000512e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
20005130:	4a0d      	ldr	r2, [pc, #52]	; (20005168 <LL_DMA_SetPeriphSize+0x44>)
20005132:	68bb      	ldr	r3, [r7, #8]
20005134:	4413      	add	r3, r2
20005136:	781b      	ldrb	r3, [r3, #0]
20005138:	461a      	mov	r2, r3
2000513a:	68fb      	ldr	r3, [r7, #12]
2000513c:	4413      	add	r3, r2
2000513e:	681b      	ldr	r3, [r3, #0]
20005140:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
20005144:	4908      	ldr	r1, [pc, #32]	; (20005168 <LL_DMA_SetPeriphSize+0x44>)
20005146:	68bb      	ldr	r3, [r7, #8]
20005148:	440b      	add	r3, r1
2000514a:	781b      	ldrb	r3, [r3, #0]
2000514c:	4619      	mov	r1, r3
2000514e:	68fb      	ldr	r3, [r7, #12]
20005150:	440b      	add	r3, r1
20005152:	4619      	mov	r1, r3
20005154:	687b      	ldr	r3, [r7, #4]
20005156:	4313      	orrs	r3, r2
20005158:	600b      	str	r3, [r1, #0]
}
2000515a:	bf00      	nop
2000515c:	3714      	adds	r7, #20
2000515e:	46bd      	mov	sp, r7
20005160:	f85d 7b04 	ldr.w	r7, [sp], #4
20005164:	4770      	bx	lr
20005166:	bf00      	nop
20005168:	2000a2c0 	.word	0x2000a2c0

2000516c <LL_DMA_SetMemorySize>:
{
2000516c:	b480      	push	{r7}
2000516e:	b085      	sub	sp, #20
20005170:	af00      	add	r7, sp, #0
20005172:	60f8      	str	r0, [r7, #12]
20005174:	60b9      	str	r1, [r7, #8]
20005176:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
20005178:	4a0d      	ldr	r2, [pc, #52]	; (200051b0 <LL_DMA_SetMemorySize+0x44>)
2000517a:	68bb      	ldr	r3, [r7, #8]
2000517c:	4413      	add	r3, r2
2000517e:	781b      	ldrb	r3, [r3, #0]
20005180:	461a      	mov	r2, r3
20005182:	68fb      	ldr	r3, [r7, #12]
20005184:	4413      	add	r3, r2
20005186:	681b      	ldr	r3, [r3, #0]
20005188:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
2000518c:	4908      	ldr	r1, [pc, #32]	; (200051b0 <LL_DMA_SetMemorySize+0x44>)
2000518e:	68bb      	ldr	r3, [r7, #8]
20005190:	440b      	add	r3, r1
20005192:	781b      	ldrb	r3, [r3, #0]
20005194:	4619      	mov	r1, r3
20005196:	68fb      	ldr	r3, [r7, #12]
20005198:	440b      	add	r3, r1
2000519a:	4619      	mov	r1, r3
2000519c:	687b      	ldr	r3, [r7, #4]
2000519e:	4313      	orrs	r3, r2
200051a0:	600b      	str	r3, [r1, #0]
}
200051a2:	bf00      	nop
200051a4:	3714      	adds	r7, #20
200051a6:	46bd      	mov	sp, r7
200051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200051ac:	4770      	bx	lr
200051ae:	bf00      	nop
200051b0:	2000a2c0 	.word	0x2000a2c0

200051b4 <LL_DMA_SetStreamPriorityLevel>:
{
200051b4:	b480      	push	{r7}
200051b6:	b085      	sub	sp, #20
200051b8:	af00      	add	r7, sp, #0
200051ba:	60f8      	str	r0, [r7, #12]
200051bc:	60b9      	str	r1, [r7, #8]
200051be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
200051c0:	4a0d      	ldr	r2, [pc, #52]	; (200051f8 <LL_DMA_SetStreamPriorityLevel+0x44>)
200051c2:	68bb      	ldr	r3, [r7, #8]
200051c4:	4413      	add	r3, r2
200051c6:	781b      	ldrb	r3, [r3, #0]
200051c8:	461a      	mov	r2, r3
200051ca:	68fb      	ldr	r3, [r7, #12]
200051cc:	4413      	add	r3, r2
200051ce:	681b      	ldr	r3, [r3, #0]
200051d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
200051d4:	4908      	ldr	r1, [pc, #32]	; (200051f8 <LL_DMA_SetStreamPriorityLevel+0x44>)
200051d6:	68bb      	ldr	r3, [r7, #8]
200051d8:	440b      	add	r3, r1
200051da:	781b      	ldrb	r3, [r3, #0]
200051dc:	4619      	mov	r1, r3
200051de:	68fb      	ldr	r3, [r7, #12]
200051e0:	440b      	add	r3, r1
200051e2:	4619      	mov	r1, r3
200051e4:	687b      	ldr	r3, [r7, #4]
200051e6:	4313      	orrs	r3, r2
200051e8:	600b      	str	r3, [r1, #0]
}
200051ea:	bf00      	nop
200051ec:	3714      	adds	r7, #20
200051ee:	46bd      	mov	sp, r7
200051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200051f4:	4770      	bx	lr
200051f6:	bf00      	nop
200051f8:	2000a2c0 	.word	0x2000a2c0

200051fc <LL_DMA_SetChannelSelection>:
{
200051fc:	b480      	push	{r7}
200051fe:	b085      	sub	sp, #20
20005200:	af00      	add	r7, sp, #0
20005202:	60f8      	str	r0, [r7, #12]
20005204:	60b9      	str	r1, [r7, #8]
20005206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
20005208:	4a0d      	ldr	r2, [pc, #52]	; (20005240 <LL_DMA_SetChannelSelection+0x44>)
2000520a:	68bb      	ldr	r3, [r7, #8]
2000520c:	4413      	add	r3, r2
2000520e:	781b      	ldrb	r3, [r3, #0]
20005210:	461a      	mov	r2, r3
20005212:	68fb      	ldr	r3, [r7, #12]
20005214:	4413      	add	r3, r2
20005216:	681b      	ldr	r3, [r3, #0]
20005218:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
2000521c:	4908      	ldr	r1, [pc, #32]	; (20005240 <LL_DMA_SetChannelSelection+0x44>)
2000521e:	68bb      	ldr	r3, [r7, #8]
20005220:	440b      	add	r3, r1
20005222:	781b      	ldrb	r3, [r3, #0]
20005224:	4619      	mov	r1, r3
20005226:	68fb      	ldr	r3, [r7, #12]
20005228:	440b      	add	r3, r1
2000522a:	4619      	mov	r1, r3
2000522c:	687b      	ldr	r3, [r7, #4]
2000522e:	4313      	orrs	r3, r2
20005230:	600b      	str	r3, [r1, #0]
}
20005232:	bf00      	nop
20005234:	3714      	adds	r7, #20
20005236:	46bd      	mov	sp, r7
20005238:	f85d 7b04 	ldr.w	r7, [sp], #4
2000523c:	4770      	bx	lr
2000523e:	bf00      	nop
20005240:	2000a2c0 	.word	0x2000a2c0

20005244 <LL_DMA_DisableFifoMode>:
{
20005244:	b480      	push	{r7}
20005246:	b083      	sub	sp, #12
20005248:	af00      	add	r7, sp, #0
2000524a:	6078      	str	r0, [r7, #4]
2000524c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
2000524e:	4a0c      	ldr	r2, [pc, #48]	; (20005280 <LL_DMA_DisableFifoMode+0x3c>)
20005250:	683b      	ldr	r3, [r7, #0]
20005252:	4413      	add	r3, r2
20005254:	781b      	ldrb	r3, [r3, #0]
20005256:	461a      	mov	r2, r3
20005258:	687b      	ldr	r3, [r7, #4]
2000525a:	4413      	add	r3, r2
2000525c:	695b      	ldr	r3, [r3, #20]
2000525e:	4908      	ldr	r1, [pc, #32]	; (20005280 <LL_DMA_DisableFifoMode+0x3c>)
20005260:	683a      	ldr	r2, [r7, #0]
20005262:	440a      	add	r2, r1
20005264:	7812      	ldrb	r2, [r2, #0]
20005266:	4611      	mov	r1, r2
20005268:	687a      	ldr	r2, [r7, #4]
2000526a:	440a      	add	r2, r1
2000526c:	f023 0304 	bic.w	r3, r3, #4
20005270:	6153      	str	r3, [r2, #20]
}
20005272:	bf00      	nop
20005274:	370c      	adds	r7, #12
20005276:	46bd      	mov	sp, r7
20005278:	f85d 7b04 	ldr.w	r7, [sp], #4
2000527c:	4770      	bx	lr
2000527e:	bf00      	nop
20005280:	2000a2c0 	.word	0x2000a2c0

20005284 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll HIFCR  CTCIF4    LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
20005284:	b480      	push	{r7}
20005286:	b083      	sub	sp, #12
20005288:	af00      	add	r7, sp, #0
2000528a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTCIF4);
2000528c:	687b      	ldr	r3, [r7, #4]
2000528e:	2220      	movs	r2, #32
20005290:	60da      	str	r2, [r3, #12]
}
20005292:	bf00      	nop
20005294:	370c      	adds	r7, #12
20005296:	46bd      	mov	sp, r7
20005298:	f85d 7b04 	ldr.w	r7, [sp], #4
2000529c:	4770      	bx	lr

2000529e <LL_DMA_ClearFlag_TE4>:
  * @rmtoll HIFCR  CTEIF4    LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
2000529e:	b480      	push	{r7}
200052a0:	b083      	sub	sp, #12
200052a2:	af00      	add	r7, sp, #0
200052a4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
200052a6:	687b      	ldr	r3, [r7, #4]
200052a8:	2208      	movs	r2, #8
200052aa:	60da      	str	r2, [r3, #12]
}
200052ac:	bf00      	nop
200052ae:	370c      	adds	r7, #12
200052b0:	46bd      	mov	sp, r7
200052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
200052b6:	4770      	bx	lr

200052b8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Stream)
{
200052b8:	b480      	push	{r7}
200052ba:	b083      	sub	sp, #12
200052bc:	af00      	add	r7, sp, #0
200052be:	6078      	str	r0, [r7, #4]
200052c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TEIE);
200052c2:	4a0c      	ldr	r2, [pc, #48]	; (200052f4 <LL_DMA_EnableIT_TE+0x3c>)
200052c4:	683b      	ldr	r3, [r7, #0]
200052c6:	4413      	add	r3, r2
200052c8:	781b      	ldrb	r3, [r3, #0]
200052ca:	461a      	mov	r2, r3
200052cc:	687b      	ldr	r3, [r7, #4]
200052ce:	4413      	add	r3, r2
200052d0:	681b      	ldr	r3, [r3, #0]
200052d2:	4908      	ldr	r1, [pc, #32]	; (200052f4 <LL_DMA_EnableIT_TE+0x3c>)
200052d4:	683a      	ldr	r2, [r7, #0]
200052d6:	440a      	add	r2, r1
200052d8:	7812      	ldrb	r2, [r2, #0]
200052da:	4611      	mov	r1, r2
200052dc:	687a      	ldr	r2, [r7, #4]
200052de:	440a      	add	r2, r1
200052e0:	f043 0304 	orr.w	r3, r3, #4
200052e4:	6013      	str	r3, [r2, #0]
}
200052e6:	bf00      	nop
200052e8:	370c      	adds	r7, #12
200052ea:	46bd      	mov	sp, r7
200052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200052f0:	4770      	bx	lr
200052f2:	bf00      	nop
200052f4:	2000a2c0 	.word	0x2000a2c0

200052f8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
200052f8:	b480      	push	{r7}
200052fa:	b083      	sub	sp, #12
200052fc:	af00      	add	r7, sp, #0
200052fe:	6078      	str	r0, [r7, #4]
20005300:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
20005302:	4a0c      	ldr	r2, [pc, #48]	; (20005334 <LL_DMA_EnableIT_TC+0x3c>)
20005304:	683b      	ldr	r3, [r7, #0]
20005306:	4413      	add	r3, r2
20005308:	781b      	ldrb	r3, [r3, #0]
2000530a:	461a      	mov	r2, r3
2000530c:	687b      	ldr	r3, [r7, #4]
2000530e:	4413      	add	r3, r2
20005310:	681b      	ldr	r3, [r3, #0]
20005312:	4908      	ldr	r1, [pc, #32]	; (20005334 <LL_DMA_EnableIT_TC+0x3c>)
20005314:	683a      	ldr	r2, [r7, #0]
20005316:	440a      	add	r2, r1
20005318:	7812      	ldrb	r2, [r2, #0]
2000531a:	4611      	mov	r1, r2
2000531c:	687a      	ldr	r2, [r7, #4]
2000531e:	440a      	add	r2, r1
20005320:	f043 0310 	orr.w	r3, r3, #16
20005324:	6013      	str	r3, [r2, #0]
}
20005326:	bf00      	nop
20005328:	370c      	adds	r7, #12
2000532a:	46bd      	mov	sp, r7
2000532c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005330:	4770      	bx	lr
20005332:	bf00      	nop
20005334:	2000a2c0 	.word	0x2000a2c0

20005338 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
20005338:	b480      	push	{r7}
2000533a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
2000533c:	4b05      	ldr	r3, [pc, #20]	; (20005354 <LL_RCC_HSE_Enable+0x1c>)
2000533e:	681b      	ldr	r3, [r3, #0]
20005340:	4a04      	ldr	r2, [pc, #16]	; (20005354 <LL_RCC_HSE_Enable+0x1c>)
20005342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005346:	6013      	str	r3, [r2, #0]
}
20005348:	bf00      	nop
2000534a:	46bd      	mov	sp, r7
2000534c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005350:	4770      	bx	lr
20005352:	bf00      	nop
20005354:	40023800 	.word	0x40023800

20005358 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
20005358:	b480      	push	{r7}
2000535a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
2000535c:	4b07      	ldr	r3, [pc, #28]	; (2000537c <LL_RCC_HSE_IsReady+0x24>)
2000535e:	681b      	ldr	r3, [r3, #0]
20005360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005364:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
20005368:	bf0c      	ite	eq
2000536a:	2301      	moveq	r3, #1
2000536c:	2300      	movne	r3, #0
2000536e:	b2db      	uxtb	r3, r3
}
20005370:	4618      	mov	r0, r3
20005372:	46bd      	mov	sp, r7
20005374:	f85d 7b04 	ldr.w	r7, [sp], #4
20005378:	4770      	bx	lr
2000537a:	bf00      	nop
2000537c:	40023800 	.word	0x40023800

20005380 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
20005380:	b480      	push	{r7}
20005382:	b083      	sub	sp, #12
20005384:	af00      	add	r7, sp, #0
20005386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
20005388:	4b06      	ldr	r3, [pc, #24]	; (200053a4 <LL_RCC_SetSysClkSource+0x24>)
2000538a:	689b      	ldr	r3, [r3, #8]
2000538c:	f023 0203 	bic.w	r2, r3, #3
20005390:	4904      	ldr	r1, [pc, #16]	; (200053a4 <LL_RCC_SetSysClkSource+0x24>)
20005392:	687b      	ldr	r3, [r7, #4]
20005394:	4313      	orrs	r3, r2
20005396:	608b      	str	r3, [r1, #8]
}
20005398:	bf00      	nop
2000539a:	370c      	adds	r7, #12
2000539c:	46bd      	mov	sp, r7
2000539e:	f85d 7b04 	ldr.w	r7, [sp], #4
200053a2:	4770      	bx	lr
200053a4:	40023800 	.word	0x40023800

200053a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
200053a8:	b480      	push	{r7}
200053aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
200053ac:	4b04      	ldr	r3, [pc, #16]	; (200053c0 <LL_RCC_GetSysClkSource+0x18>)
200053ae:	689b      	ldr	r3, [r3, #8]
200053b0:	f003 030c 	and.w	r3, r3, #12
}
200053b4:	4618      	mov	r0, r3
200053b6:	46bd      	mov	sp, r7
200053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200053bc:	4770      	bx	lr
200053be:	bf00      	nop
200053c0:	40023800 	.word	0x40023800

200053c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
200053c4:	b480      	push	{r7}
200053c6:	b083      	sub	sp, #12
200053c8:	af00      	add	r7, sp, #0
200053ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
200053cc:	4b06      	ldr	r3, [pc, #24]	; (200053e8 <LL_RCC_SetAHBPrescaler+0x24>)
200053ce:	689b      	ldr	r3, [r3, #8]
200053d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
200053d4:	4904      	ldr	r1, [pc, #16]	; (200053e8 <LL_RCC_SetAHBPrescaler+0x24>)
200053d6:	687b      	ldr	r3, [r7, #4]
200053d8:	4313      	orrs	r3, r2
200053da:	608b      	str	r3, [r1, #8]
}
200053dc:	bf00      	nop
200053de:	370c      	adds	r7, #12
200053e0:	46bd      	mov	sp, r7
200053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
200053e6:	4770      	bx	lr
200053e8:	40023800 	.word	0x40023800

200053ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
200053ec:	b480      	push	{r7}
200053ee:	b083      	sub	sp, #12
200053f0:	af00      	add	r7, sp, #0
200053f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
200053f4:	4b06      	ldr	r3, [pc, #24]	; (20005410 <LL_RCC_SetAPB1Prescaler+0x24>)
200053f6:	689b      	ldr	r3, [r3, #8]
200053f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
200053fc:	4904      	ldr	r1, [pc, #16]	; (20005410 <LL_RCC_SetAPB1Prescaler+0x24>)
200053fe:	687b      	ldr	r3, [r7, #4]
20005400:	4313      	orrs	r3, r2
20005402:	608b      	str	r3, [r1, #8]
}
20005404:	bf00      	nop
20005406:	370c      	adds	r7, #12
20005408:	46bd      	mov	sp, r7
2000540a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000540e:	4770      	bx	lr
20005410:	40023800 	.word	0x40023800

20005414 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
20005414:	b480      	push	{r7}
20005416:	b083      	sub	sp, #12
20005418:	af00      	add	r7, sp, #0
2000541a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
2000541c:	4b06      	ldr	r3, [pc, #24]	; (20005438 <LL_RCC_SetAPB2Prescaler+0x24>)
2000541e:	689b      	ldr	r3, [r3, #8]
20005420:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20005424:	4904      	ldr	r1, [pc, #16]	; (20005438 <LL_RCC_SetAPB2Prescaler+0x24>)
20005426:	687b      	ldr	r3, [r7, #4]
20005428:	4313      	orrs	r3, r2
2000542a:	608b      	str	r3, [r1, #8]
}
2000542c:	bf00      	nop
2000542e:	370c      	adds	r7, #12
20005430:	46bd      	mov	sp, r7
20005432:	f85d 7b04 	ldr.w	r7, [sp], #4
20005436:	4770      	bx	lr
20005438:	40023800 	.word	0x40023800

2000543c <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
2000543c:	b480      	push	{r7}
2000543e:	b083      	sub	sp, #12
20005440:	af00      	add	r7, sp, #0
20005442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
20005444:	4b07      	ldr	r3, [pc, #28]	; (20005464 <LL_RCC_SetTIMPrescaler+0x28>)
20005446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
2000544a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
2000544e:	4905      	ldr	r1, [pc, #20]	; (20005464 <LL_RCC_SetTIMPrescaler+0x28>)
20005450:	687b      	ldr	r3, [r7, #4]
20005452:	4313      	orrs	r3, r2
20005454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
20005458:	bf00      	nop
2000545a:	370c      	adds	r7, #12
2000545c:	46bd      	mov	sp, r7
2000545e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005462:	4770      	bx	lr
20005464:	40023800 	.word	0x40023800

20005468 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
20005468:	b480      	push	{r7}
2000546a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
2000546c:	4b05      	ldr	r3, [pc, #20]	; (20005484 <LL_RCC_PLL_Enable+0x1c>)
2000546e:	681b      	ldr	r3, [r3, #0]
20005470:	4a04      	ldr	r2, [pc, #16]	; (20005484 <LL_RCC_PLL_Enable+0x1c>)
20005472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20005476:	6013      	str	r3, [r2, #0]
}
20005478:	bf00      	nop
2000547a:	46bd      	mov	sp, r7
2000547c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005480:	4770      	bx	lr
20005482:	bf00      	nop
20005484:	40023800 	.word	0x40023800

20005488 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
20005488:	b480      	push	{r7}
2000548a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
2000548c:	4b07      	ldr	r3, [pc, #28]	; (200054ac <LL_RCC_PLL_IsReady+0x24>)
2000548e:	681b      	ldr	r3, [r3, #0]
20005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20005494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
20005498:	bf0c      	ite	eq
2000549a:	2301      	moveq	r3, #1
2000549c:	2300      	movne	r3, #0
2000549e:	b2db      	uxtb	r3, r3
}
200054a0:	4618      	mov	r0, r3
200054a2:	46bd      	mov	sp, r7
200054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200054a8:	4770      	bx	lr
200054aa:	bf00      	nop
200054ac:	40023800 	.word	0x40023800

200054b0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
200054b0:	b480      	push	{r7}
200054b2:	b085      	sub	sp, #20
200054b4:	af00      	add	r7, sp, #0
200054b6:	60f8      	str	r0, [r7, #12]
200054b8:	60b9      	str	r1, [r7, #8]
200054ba:	607a      	str	r2, [r7, #4]
200054bc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
200054be:	4b0d      	ldr	r3, [pc, #52]	; (200054f4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200054c0:	685a      	ldr	r2, [r3, #4]
200054c2:	4b0d      	ldr	r3, [pc, #52]	; (200054f8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
200054c4:	4013      	ands	r3, r2
200054c6:	68f9      	ldr	r1, [r7, #12]
200054c8:	68ba      	ldr	r2, [r7, #8]
200054ca:	4311      	orrs	r1, r2
200054cc:	687a      	ldr	r2, [r7, #4]
200054ce:	0192      	lsls	r2, r2, #6
200054d0:	430a      	orrs	r2, r1
200054d2:	4908      	ldr	r1, [pc, #32]	; (200054f4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200054d4:	4313      	orrs	r3, r2
200054d6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
200054d8:	4b06      	ldr	r3, [pc, #24]	; (200054f4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200054da:	685b      	ldr	r3, [r3, #4]
200054dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
200054e0:	4904      	ldr	r1, [pc, #16]	; (200054f4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
200054e2:	683b      	ldr	r3, [r7, #0]
200054e4:	4313      	orrs	r3, r2
200054e6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
200054e8:	bf00      	nop
200054ea:	3714      	adds	r7, #20
200054ec:	46bd      	mov	sp, r7
200054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200054f2:	4770      	bx	lr
200054f4:	40023800 	.word	0x40023800
200054f8:	ffbf8000 	.word	0xffbf8000

200054fc <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
200054fc:	b480      	push	{r7}
200054fe:	b085      	sub	sp, #20
20005500:	af00      	add	r7, sp, #0
20005502:	60f8      	str	r0, [r7, #12]
20005504:	60b9      	str	r1, [r7, #8]
20005506:	607a      	str	r2, [r7, #4]
20005508:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
2000550a:	4b0a      	ldr	r3, [pc, #40]	; (20005534 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
2000550c:	685a      	ldr	r2, [r3, #4]
2000550e:	4b0a      	ldr	r3, [pc, #40]	; (20005538 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
20005510:	4013      	ands	r3, r2
20005512:	68f9      	ldr	r1, [r7, #12]
20005514:	68ba      	ldr	r2, [r7, #8]
20005516:	4311      	orrs	r1, r2
20005518:	687a      	ldr	r2, [r7, #4]
2000551a:	0192      	lsls	r2, r2, #6
2000551c:	4311      	orrs	r1, r2
2000551e:	683a      	ldr	r2, [r7, #0]
20005520:	430a      	orrs	r2, r1
20005522:	4904      	ldr	r1, [pc, #16]	; (20005534 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
20005524:	4313      	orrs	r3, r2
20005526:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
20005528:	bf00      	nop
2000552a:	3714      	adds	r7, #20
2000552c:	46bd      	mov	sp, r7
2000552e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005532:	4770      	bx	lr
20005534:	40023800 	.word	0x40023800
20005538:	f0bf8000 	.word	0xf0bf8000

2000553c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
2000553c:	b480      	push	{r7}
2000553e:	b085      	sub	sp, #20
20005540:	af00      	add	r7, sp, #0
20005542:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
20005544:	4b08      	ldr	r3, [pc, #32]	; (20005568 <LL_AHB1_GRP1_EnableClock+0x2c>)
20005546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005548:	4907      	ldr	r1, [pc, #28]	; (20005568 <LL_AHB1_GRP1_EnableClock+0x2c>)
2000554a:	687b      	ldr	r3, [r7, #4]
2000554c:	4313      	orrs	r3, r2
2000554e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
20005550:	4b05      	ldr	r3, [pc, #20]	; (20005568 <LL_AHB1_GRP1_EnableClock+0x2c>)
20005552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20005554:	687b      	ldr	r3, [r7, #4]
20005556:	4013      	ands	r3, r2
20005558:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000555a:	68fb      	ldr	r3, [r7, #12]
}
2000555c:	bf00      	nop
2000555e:	3714      	adds	r7, #20
20005560:	46bd      	mov	sp, r7
20005562:	f85d 7b04 	ldr.w	r7, [sp], #4
20005566:	4770      	bx	lr
20005568:	40023800 	.word	0x40023800

2000556c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
2000556c:	b480      	push	{r7}
2000556e:	b085      	sub	sp, #20
20005570:	af00      	add	r7, sp, #0
20005572:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
20005574:	4b08      	ldr	r3, [pc, #32]	; (20005598 <LL_AHB2_GRP1_EnableClock+0x2c>)
20005576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20005578:	4907      	ldr	r1, [pc, #28]	; (20005598 <LL_AHB2_GRP1_EnableClock+0x2c>)
2000557a:	687b      	ldr	r3, [r7, #4]
2000557c:	4313      	orrs	r3, r2
2000557e:	634b      	str	r3, [r1, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
20005580:	4b05      	ldr	r3, [pc, #20]	; (20005598 <LL_AHB2_GRP1_EnableClock+0x2c>)
20005582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
20005584:	687b      	ldr	r3, [r7, #4]
20005586:	4013      	ands	r3, r2
20005588:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
2000558a:	68fb      	ldr	r3, [r7, #12]
}
2000558c:	bf00      	nop
2000558e:	3714      	adds	r7, #20
20005590:	46bd      	mov	sp, r7
20005592:	f85d 7b04 	ldr.w	r7, [sp], #4
20005596:	4770      	bx	lr
20005598:	40023800 	.word	0x40023800

2000559c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
2000559c:	b480      	push	{r7}
2000559e:	b085      	sub	sp, #20
200055a0:	af00      	add	r7, sp, #0
200055a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
200055a4:	4b08      	ldr	r3, [pc, #32]	; (200055c8 <LL_APB1_GRP1_EnableClock+0x2c>)
200055a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200055a8:	4907      	ldr	r1, [pc, #28]	; (200055c8 <LL_APB1_GRP1_EnableClock+0x2c>)
200055aa:	687b      	ldr	r3, [r7, #4]
200055ac:	4313      	orrs	r3, r2
200055ae:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
200055b0:	4b05      	ldr	r3, [pc, #20]	; (200055c8 <LL_APB1_GRP1_EnableClock+0x2c>)
200055b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
200055b4:	687b      	ldr	r3, [r7, #4]
200055b6:	4013      	ands	r3, r2
200055b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
200055ba:	68fb      	ldr	r3, [r7, #12]
}
200055bc:	bf00      	nop
200055be:	3714      	adds	r7, #20
200055c0:	46bd      	mov	sp, r7
200055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200055c6:	4770      	bx	lr
200055c8:	40023800 	.word	0x40023800

200055cc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
200055cc:	b480      	push	{r7}
200055ce:	b085      	sub	sp, #20
200055d0:	af00      	add	r7, sp, #0
200055d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
200055d4:	4b08      	ldr	r3, [pc, #32]	; (200055f8 <LL_APB2_GRP1_EnableClock+0x2c>)
200055d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200055d8:	4907      	ldr	r1, [pc, #28]	; (200055f8 <LL_APB2_GRP1_EnableClock+0x2c>)
200055da:	687b      	ldr	r3, [r7, #4]
200055dc:	4313      	orrs	r3, r2
200055de:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
200055e0:	4b05      	ldr	r3, [pc, #20]	; (200055f8 <LL_APB2_GRP1_EnableClock+0x2c>)
200055e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
200055e4:	687b      	ldr	r3, [r7, #4]
200055e6:	4013      	ands	r3, r2
200055e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
200055ea:	68fb      	ldr	r3, [r7, #12]
}
200055ec:	bf00      	nop
200055ee:	3714      	adds	r7, #20
200055f0:	46bd      	mov	sp, r7
200055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200055f6:	4770      	bx	lr
200055f8:	40023800 	.word	0x40023800

200055fc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
200055fc:	b480      	push	{r7}
200055fe:	b083      	sub	sp, #12
20005600:	af00      	add	r7, sp, #0
20005602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
20005604:	4b06      	ldr	r3, [pc, #24]	; (20005620 <LL_FLASH_SetLatency+0x24>)
20005606:	681b      	ldr	r3, [r3, #0]
20005608:	f023 020f 	bic.w	r2, r3, #15
2000560c:	4904      	ldr	r1, [pc, #16]	; (20005620 <LL_FLASH_SetLatency+0x24>)
2000560e:	687b      	ldr	r3, [r7, #4]
20005610:	4313      	orrs	r3, r2
20005612:	600b      	str	r3, [r1, #0]
}
20005614:	bf00      	nop
20005616:	370c      	adds	r7, #12
20005618:	46bd      	mov	sp, r7
2000561a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000561e:	4770      	bx	lr
20005620:	40023c00 	.word	0x40023c00

20005624 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
20005624:	b480      	push	{r7}
20005626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
20005628:	4b04      	ldr	r3, [pc, #16]	; (2000563c <LL_FLASH_GetLatency+0x18>)
2000562a:	681b      	ldr	r3, [r3, #0]
2000562c:	f003 030f 	and.w	r3, r3, #15
}
20005630:	4618      	mov	r0, r3
20005632:	46bd      	mov	sp, r7
20005634:	f85d 7b04 	ldr.w	r7, [sp], #4
20005638:	4770      	bx	lr
2000563a:	bf00      	nop
2000563c:	40023c00 	.word	0x40023c00

20005640 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
20005640:	b480      	push	{r7}
20005642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
20005644:	4b05      	ldr	r3, [pc, #20]	; (2000565c <LL_PWR_EnableOverDriveMode+0x1c>)
20005646:	681b      	ldr	r3, [r3, #0]
20005648:	4a04      	ldr	r2, [pc, #16]	; (2000565c <LL_PWR_EnableOverDriveMode+0x1c>)
2000564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000564e:	6013      	str	r3, [r2, #0]
}
20005650:	bf00      	nop
20005652:	46bd      	mov	sp, r7
20005654:	f85d 7b04 	ldr.w	r7, [sp], #4
20005658:	4770      	bx	lr
2000565a:	bf00      	nop
2000565c:	40007000 	.word	0x40007000

20005660 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
20005660:	b480      	push	{r7}
20005662:	b083      	sub	sp, #12
20005664:	af00      	add	r7, sp, #0
20005666:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
20005668:	4b06      	ldr	r3, [pc, #24]	; (20005684 <LL_PWR_SetRegulVoltageScaling+0x24>)
2000566a:	681b      	ldr	r3, [r3, #0]
2000566c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20005670:	4904      	ldr	r1, [pc, #16]	; (20005684 <LL_PWR_SetRegulVoltageScaling+0x24>)
20005672:	687b      	ldr	r3, [r7, #4]
20005674:	4313      	orrs	r3, r2
20005676:	600b      	str	r3, [r1, #0]
}
20005678:	bf00      	nop
2000567a:	370c      	adds	r7, #12
2000567c:	46bd      	mov	sp, r7
2000567e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005682:	4770      	bx	lr
20005684:	40007000 	.word	0x40007000

20005688 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
20005688:	b480      	push	{r7}
2000568a:	b083      	sub	sp, #12
2000568c:	af00      	add	r7, sp, #0
2000568e:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
20005690:	687b      	ldr	r3, [r7, #4]
20005692:	681b      	ldr	r3, [r3, #0]
20005694:	f043 0204 	orr.w	r2, r3, #4
20005698:	687b      	ldr	r3, [r7, #4]
2000569a:	601a      	str	r2, [r3, #0]
}
2000569c:	bf00      	nop
2000569e:	370c      	adds	r7, #12
200056a0:	46bd      	mov	sp, r7
200056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200056a6:	4770      	bx	lr

200056a8 <LL_SPI_Enable>:
{
200056a8:	b480      	push	{r7}
200056aa:	b083      	sub	sp, #12
200056ac:	af00      	add	r7, sp, #0
200056ae:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
200056b0:	687b      	ldr	r3, [r7, #4]
200056b2:	681b      	ldr	r3, [r3, #0]
200056b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200056b8:	687b      	ldr	r3, [r7, #4]
200056ba:	601a      	str	r2, [r3, #0]
}
200056bc:	bf00      	nop
200056be:	370c      	adds	r7, #12
200056c0:	46bd      	mov	sp, r7
200056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
200056c6:	4770      	bx	lr

200056c8 <LL_SPI_SetStandard>:
{
200056c8:	b480      	push	{r7}
200056ca:	b083      	sub	sp, #12
200056cc:	af00      	add	r7, sp, #0
200056ce:	6078      	str	r0, [r7, #4]
200056d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
200056d2:	687b      	ldr	r3, [r7, #4]
200056d4:	685b      	ldr	r3, [r3, #4]
200056d6:	f023 0210 	bic.w	r2, r3, #16
200056da:	683b      	ldr	r3, [r7, #0]
200056dc:	431a      	orrs	r2, r3
200056de:	687b      	ldr	r3, [r7, #4]
200056e0:	605a      	str	r2, [r3, #4]
}
200056e2:	bf00      	nop
200056e4:	370c      	adds	r7, #12
200056e6:	46bd      	mov	sp, r7
200056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200056ec:	4770      	bx	lr

200056ee <LL_SPI_EnableDMAReq_TX>:
{
200056ee:	b480      	push	{r7}
200056f0:	b083      	sub	sp, #12
200056f2:	af00      	add	r7, sp, #0
200056f4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
200056f6:	687b      	ldr	r3, [r7, #4]
200056f8:	685b      	ldr	r3, [r3, #4]
200056fa:	f043 0202 	orr.w	r2, r3, #2
200056fe:	687b      	ldr	r3, [r7, #4]
20005700:	605a      	str	r2, [r3, #4]
}
20005702:	bf00      	nop
20005704:	370c      	adds	r7, #12
20005706:	46bd      	mov	sp, r7
20005708:	f85d 7b04 	ldr.w	r7, [sp], #4
2000570c:	4770      	bx	lr

2000570e <LL_GPIO_SetOutputPin>:
{
2000570e:	b480      	push	{r7}
20005710:	b083      	sub	sp, #12
20005712:	af00      	add	r7, sp, #0
20005714:	6078      	str	r0, [r7, #4]
20005716:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
20005718:	687b      	ldr	r3, [r7, #4]
2000571a:	683a      	ldr	r2, [r7, #0]
2000571c:	619a      	str	r2, [r3, #24]
}
2000571e:	bf00      	nop
20005720:	370c      	adds	r7, #12
20005722:	46bd      	mov	sp, r7
20005724:	f85d 7b04 	ldr.w	r7, [sp], #4
20005728:	4770      	bx	lr

2000572a <LL_GPIO_ResetOutputPin>:
{
2000572a:	b480      	push	{r7}
2000572c:	b083      	sub	sp, #12
2000572e:	af00      	add	r7, sp, #0
20005730:	6078      	str	r0, [r7, #4]
20005732:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
20005734:	683b      	ldr	r3, [r7, #0]
20005736:	041a      	lsls	r2, r3, #16
20005738:	687b      	ldr	r3, [r7, #4]
2000573a:	619a      	str	r2, [r3, #24]
}
2000573c:	bf00      	nop
2000573e:	370c      	adds	r7, #12
20005740:	46bd      	mov	sp, r7
20005742:	f85d 7b04 	ldr.w	r7, [sp], #4
20005746:	4770      	bx	lr

20005748 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
20005748:	b480      	push	{r7}
2000574a:	b085      	sub	sp, #20
2000574c:	af00      	add	r7, sp, #0
2000574e:	6078      	str	r0, [r7, #4]
20005750:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
20005752:	687b      	ldr	r3, [r7, #4]
20005754:	695b      	ldr	r3, [r3, #20]
20005756:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
20005758:	68fa      	ldr	r2, [r7, #12]
2000575a:	683b      	ldr	r3, [r7, #0]
2000575c:	4013      	ands	r3, r2
2000575e:	041a      	lsls	r2, r3, #16
20005760:	68fb      	ldr	r3, [r7, #12]
20005762:	43d9      	mvns	r1, r3
20005764:	683b      	ldr	r3, [r7, #0]
20005766:	400b      	ands	r3, r1
20005768:	431a      	orrs	r2, r3
2000576a:	687b      	ldr	r3, [r7, #4]
2000576c:	619a      	str	r2, [r3, #24]
}
2000576e:	bf00      	nop
20005770:	3714      	adds	r7, #20
20005772:	46bd      	mov	sp, r7
20005774:	f85d 7b04 	ldr.w	r7, [sp], #4
20005778:	4770      	bx	lr
	...

2000577c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000577c:	b580      	push	{r7, lr}
2000577e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ptr = napis;
20005780:	4b40      	ldr	r3, [pc, #256]	; (20005884 <main+0x108>)
20005782:	4a41      	ldr	r2, [pc, #260]	; (20005888 <main+0x10c>)
20005784:	601a      	str	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
20005786:	f44f 4080 	mov.w	r0, #16384	; 0x4000
2000578a:	f7ff ff1f 	bl	200055cc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
2000578e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
20005792:	f7ff ff03 	bl	2000559c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20005796:	2003      	movs	r0, #3
20005798:	f7ff fb66 	bl	20004e68 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  NVIC_SetPriority(PendSV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
2000579c:	f7ff fb88 	bl	20004eb0 <__NVIC_GetPriorityGrouping>
200057a0:	4603      	mov	r3, r0
200057a2:	2200      	movs	r2, #0
200057a4:	210f      	movs	r1, #15
200057a6:	4618      	mov	r0, r3
200057a8:	f7ff fbd8 	bl	20004f5c <NVIC_EncodePriority>
200057ac:	4603      	mov	r3, r0
200057ae:	4619      	mov	r1, r3
200057b0:	f06f 0001 	mvn.w	r0, #1
200057b4:	f7ff fba8 	bl	20004f08 <__NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
200057b8:	f7ff fb7a 	bl	20004eb0 <__NVIC_GetPriorityGrouping>
200057bc:	4603      	mov	r3, r0
200057be:	2200      	movs	r2, #0
200057c0:	210f      	movs	r1, #15
200057c2:	4618      	mov	r0, r3
200057c4:	f7ff fbca 	bl	20004f5c <NVIC_EncodePriority>
200057c8:	4603      	mov	r3, r0
200057ca:	4619      	mov	r1, r3
200057cc:	f04f 30ff 	mov.w	r0, #4294967295
200057d0:	f7ff fb9a 	bl	20004f08 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
200057d4:	f000 f880 	bl	200058d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
200057d8:	f000 f978 	bl	20005acc <MX_GPIO_Init>
  MX_DMA_Init();
200057dc:	f000 f95e 	bl	20005a9c <MX_DMA_Init>
  MX_RNG_Init();
200057e0:	f000 f8cc 	bl	2000597c <MX_RNG_Init>
  MX_SPI5_Init();
200057e4:	f000 f8d6 	bl	20005994 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
200057e8:	2104      	movs	r1, #4
200057ea:	4828      	ldr	r0, [pc, #160]	; (2000588c <main+0x110>)
200057ec:	f7ff fbea 	bl	20004fc4 <LL_DMA_DisableStream>
  LL_DMA_ClearFlag_TC4(DMA2);
200057f0:	4826      	ldr	r0, [pc, #152]	; (2000588c <main+0x110>)
200057f2:	f7ff fd47 	bl	20005284 <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA2);
200057f6:	4825      	ldr	r0, [pc, #148]	; (2000588c <main+0x110>)
200057f8:	f7ff fd51 	bl	2000529e <LL_DMA_ClearFlag_TE4>
  LL_SPI_EnableDMAReq_TX(SPI5);
200057fc:	4824      	ldr	r0, [pc, #144]	; (20005890 <main+0x114>)
200057fe:	f7ff ff76 	bl	200056ee <LL_SPI_EnableDMAReq_TX>
  LL_DMA_EnableIT_TC(DMA2, LL_DMA_STREAM_4);
20005802:	2104      	movs	r1, #4
20005804:	4821      	ldr	r0, [pc, #132]	; (2000588c <main+0x110>)
20005806:	f7ff fd77 	bl	200052f8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA2, LL_DMA_STREAM_4);
2000580a:	2104      	movs	r1, #4
2000580c:	481f      	ldr	r0, [pc, #124]	; (2000588c <main+0x110>)
2000580e:	f7ff fd53 	bl	200052b8 <LL_DMA_EnableIT_TE>
  LL_SPI_Enable(SPI5);
20005812:	481f      	ldr	r0, [pc, #124]	; (20005890 <main+0x114>)
20005814:	f7ff ff48 	bl	200056a8 <LL_SPI_Enable>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
20005818:	f7fb f976 	bl	20000b08 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem01 */
  BinarySem01Handle = osSemaphoreNew(1, 1, &BinarySem01_attributes);
2000581c:	4a1d      	ldr	r2, [pc, #116]	; (20005894 <main+0x118>)
2000581e:	2101      	movs	r1, #1
20005820:	2001      	movs	r0, #1
20005822:	f7fb fa68 	bl	20000cf6 <osSemaphoreNew>
20005826:	4603      	mov	r3, r0
20005828:	4a1b      	ldr	r2, [pc, #108]	; (20005898 <main+0x11c>)
2000582a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD_Task */
  LCD_TaskHandle = osThreadNew(StartLCDTask, NULL, &LCD_Task_attributes);
2000582c:	4a1b      	ldr	r2, [pc, #108]	; (2000589c <main+0x120>)
2000582e:	2100      	movs	r1, #0
20005830:	481b      	ldr	r0, [pc, #108]	; (200058a0 <main+0x124>)
20005832:	f7fb f9b3 	bl	20000b9c <osThreadNew>
20005836:	4603      	mov	r3, r0
20005838:	4a1a      	ldr	r2, [pc, #104]	; (200058a4 <main+0x128>)
2000583a:	6013      	str	r3, [r2, #0]

  /* creation of LED1_task */
  LED1_taskHandle = osThreadNew(StartTaskLED1, NULL, &LED1_task_attributes);
2000583c:	4a1a      	ldr	r2, [pc, #104]	; (200058a8 <main+0x12c>)
2000583e:	2100      	movs	r1, #0
20005840:	481a      	ldr	r0, [pc, #104]	; (200058ac <main+0x130>)
20005842:	f7fb f9ab 	bl	20000b9c <osThreadNew>
20005846:	4603      	mov	r3, r0
20005848:	4a19      	ldr	r2, [pc, #100]	; (200058b0 <main+0x134>)
2000584a:	6013      	str	r3, [r2, #0]

  /* creation of LED2_tack */
  LED2_tackHandle = osThreadNew(StartTaskLED2, NULL, &LED2_tack_attributes);
2000584c:	4a19      	ldr	r2, [pc, #100]	; (200058b4 <main+0x138>)
2000584e:	2100      	movs	r1, #0
20005850:	4819      	ldr	r0, [pc, #100]	; (200058b8 <main+0x13c>)
20005852:	f7fb f9a3 	bl	20000b9c <osThreadNew>
20005856:	4603      	mov	r3, r0
20005858:	4a18      	ldr	r2, [pc, #96]	; (200058bc <main+0x140>)
2000585a:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
2000585c:	4a18      	ldr	r2, [pc, #96]	; (200058c0 <main+0x144>)
2000585e:	2100      	movs	r1, #0
20005860:	4818      	ldr	r0, [pc, #96]	; (200058c4 <main+0x148>)
20005862:	f7fb f99b 	bl	20000b9c <osThreadNew>
20005866:	4603      	mov	r3, r0
20005868:	4a17      	ldr	r2, [pc, #92]	; (200058c8 <main+0x14c>)
2000586a:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
2000586c:	4a17      	ldr	r2, [pc, #92]	; (200058cc <main+0x150>)
2000586e:	2100      	movs	r1, #0
20005870:	4817      	ldr	r0, [pc, #92]	; (200058d0 <main+0x154>)
20005872:	f7fb f993 	bl	20000b9c <osThreadNew>
20005876:	4603      	mov	r3, r0
20005878:	4a16      	ldr	r2, [pc, #88]	; (200058d4 <main+0x158>)
2000587a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
2000587c:	f7fb f968 	bl	20000b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20005880:	e7fe      	b.n	20005880 <main+0x104>
20005882:	bf00      	nop
20005884:	2001ef58 	.word	0x2001ef58
20005888:	2000a428 	.word	0x2000a428
2000588c:	40026400 	.word	0x40026400
20005890:	40015000 	.word	0x40015000
20005894:	2000a37c 	.word	0x2000a37c
20005898:	2001ef54 	.word	0x2001ef54
2000589c:	2000a2c8 	.word	0x2000a2c8
200058a0:	20005c0d 	.word	0x20005c0d
200058a4:	2001ef40 	.word	0x2001ef40
200058a8:	2000a2ec 	.word	0x2000a2ec
200058ac:	20005cd1 	.word	0x20005cd1
200058b0:	2001ef44 	.word	0x2001ef44
200058b4:	2000a310 	.word	0x2000a310
200058b8:	20005d01 	.word	0x20005d01
200058bc:	2001ef48 	.word	0x2001ef48
200058c0:	2000a334 	.word	0x2000a334
200058c4:	20005d31 	.word	0x20005d31
200058c8:	2001ef4c 	.word	0x2001ef4c
200058cc:	2000a358 	.word	0x2000a358
200058d0:	20005dd1 	.word	0x20005dd1
200058d4:	2001ef50 	.word	0x2001ef50

200058d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
200058d8:	b580      	push	{r7, lr}
200058da:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
200058dc:	2005      	movs	r0, #5
200058de:	f7ff fe8d 	bl	200055fc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
200058e2:	bf00      	nop
200058e4:	f7ff fe9e 	bl	20005624 <LL_FLASH_GetLatency>
200058e8:	4603      	mov	r3, r0
200058ea:	2b05      	cmp	r3, #5
200058ec:	d1fa      	bne.n	200058e4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
200058ee:	f44f 4040 	mov.w	r0, #49152	; 0xc000
200058f2:	f7ff feb5 	bl	20005660 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
200058f6:	f7ff fea3 	bl	20005640 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
200058fa:	f7ff fd1d 	bl	20005338 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
200058fe:	bf00      	nop
20005900:	f7ff fd2a 	bl	20005358 <LL_RCC_HSE_IsReady>
20005904:	4603      	mov	r3, r0
20005906:	2b01      	cmp	r3, #1
20005908:	d1fa      	bne.n	20005900 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLP_DIV_2);
2000590a:	2300      	movs	r3, #0
2000590c:	22b4      	movs	r2, #180	; 0xb4
2000590e:	2104      	movs	r1, #4
20005910:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005914:	f7ff fdcc 	bl	200054b0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 180, LL_RCC_PLLQ_DIV_8);
20005918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000591c:	22b4      	movs	r2, #180	; 0xb4
2000591e:	2104      	movs	r1, #4
20005920:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005924:	f7ff fdea 	bl	200054fc <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
20005928:	f7ff fd9e 	bl	20005468 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
2000592c:	bf00      	nop
2000592e:	f7ff fdab 	bl	20005488 <LL_RCC_PLL_IsReady>
20005932:	4603      	mov	r3, r0
20005934:	2b01      	cmp	r3, #1
20005936:	d1fa      	bne.n	2000592e <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
20005938:	2000      	movs	r0, #0
2000593a:	f7ff fd43 	bl	200053c4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
2000593e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
20005942:	f7ff fd53 	bl	200053ec <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
20005946:	f44f 4000 	mov.w	r0, #32768	; 0x8000
2000594a:	f7ff fd63 	bl	20005414 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
2000594e:	2002      	movs	r0, #2
20005950:	f7ff fd16 	bl	20005380 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
20005954:	bf00      	nop
20005956:	f7ff fd27 	bl	200053a8 <LL_RCC_GetSysClkSource>
2000595a:	4603      	mov	r3, r0
2000595c:	2b08      	cmp	r3, #8
2000595e:	d1fa      	bne.n	20005956 <SystemClock_Config+0x7e>
  {

  }
  LL_Init1msTick(180000000);
20005960:	4805      	ldr	r0, [pc, #20]	; (20005978 <SystemClock_Config+0xa0>)
20005962:	f7fb f859 	bl	20000a18 <LL_Init1msTick>
  LL_SetSystemCoreClock(180000000);
20005966:	4804      	ldr	r0, [pc, #16]	; (20005978 <SystemClock_Config+0xa0>)
20005968:	f7fb f88a 	bl	20000a80 <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
2000596c:	2000      	movs	r0, #0
2000596e:	f7ff fd65 	bl	2000543c <LL_RCC_SetTIMPrescaler>
}
20005972:	bf00      	nop
20005974:	bd80      	pop	{r7, pc}
20005976:	bf00      	nop
20005978:	0aba9500 	.word	0x0aba9500

2000597c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
2000597c:	b580      	push	{r7, lr}
2000597e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
20005980:	2040      	movs	r0, #64	; 0x40
20005982:	f7ff fdf3 	bl	2000556c <LL_AHB2_GRP1_EnableClock>

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  LL_RNG_Enable(RNG);
20005986:	4802      	ldr	r0, [pc, #8]	; (20005990 <MX_RNG_Init+0x14>)
20005988:	f7ff fe7e 	bl	20005688 <LL_RNG_Enable>
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
2000598c:	bf00      	nop
2000598e:	bd80      	pop	{r7, pc}
20005990:	50060800 	.word	0x50060800

20005994 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
20005994:	b580      	push	{r7, lr}
20005996:	b090      	sub	sp, #64	; 0x40
20005998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 0 */

  /* USER CODE END SPI5_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
2000599a:	f107 0318 	add.w	r3, r7, #24
2000599e:	2228      	movs	r2, #40	; 0x28
200059a0:	2100      	movs	r1, #0
200059a2:	4618      	mov	r0, r3
200059a4:	f000 fd06 	bl	200063b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
200059a8:	463b      	mov	r3, r7
200059aa:	2200      	movs	r2, #0
200059ac:	601a      	str	r2, [r3, #0]
200059ae:	605a      	str	r2, [r3, #4]
200059b0:	609a      	str	r2, [r3, #8]
200059b2:	60da      	str	r2, [r3, #12]
200059b4:	611a      	str	r2, [r3, #16]
200059b6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI5);
200059b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
200059bc:	f7ff fe06 	bl	200055cc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
200059c0:	2020      	movs	r0, #32
200059c2:	f7ff fdbb 	bl	2000553c <LL_AHB1_GRP1_EnableClock>
  /**SPI5 GPIO Configuration
  PF7   ------> SPI5_SCK
  PF8   ------> SPI5_MISO
  PF9   ------> SPI5_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
200059c6:	f44f 7360 	mov.w	r3, #896	; 0x380
200059ca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
200059cc:	2302      	movs	r3, #2
200059ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
200059d0:	2303      	movs	r3, #3
200059d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
200059d4:	2300      	movs	r3, #0
200059d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
200059d8:	2300      	movs	r3, #0
200059da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
200059dc:	2305      	movs	r3, #5
200059de:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
200059e0:	463b      	mov	r3, r7
200059e2:	4619      	mov	r1, r3
200059e4:	482a      	ldr	r0, [pc, #168]	; (20005a90 <MX_SPI5_Init+0xfc>)
200059e6:	f7fa ff14 	bl	20000812 <LL_GPIO_Init>

  /* SPI5 DMA Init */

  /* SPI5_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_4, LL_DMA_CHANNEL_2);
200059ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
200059ee:	2104      	movs	r1, #4
200059f0:	4828      	ldr	r0, [pc, #160]	; (20005a94 <MX_SPI5_Init+0x100>)
200059f2:	f7ff fc03 	bl	200051fc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
200059f6:	2240      	movs	r2, #64	; 0x40
200059f8:	2104      	movs	r1, #4
200059fa:	4826      	ldr	r0, [pc, #152]	; (20005a94 <MX_SPI5_Init+0x100>)
200059fc:	f7ff fb02 	bl	20005004 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_4, LL_DMA_PRIORITY_LOW);
20005a00:	2200      	movs	r2, #0
20005a02:	2104      	movs	r1, #4
20005a04:	4823      	ldr	r0, [pc, #140]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a06:	f7ff fbd5 	bl	200051b4 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MODE_CIRCULAR);
20005a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
20005a0e:	2104      	movs	r1, #4
20005a10:	4820      	ldr	r0, [pc, #128]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a12:	f7ff fb1b 	bl	2000504c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_PERIPH_NOINCREMENT);
20005a16:	2200      	movs	r2, #0
20005a18:	2104      	movs	r1, #4
20005a1a:	481e      	ldr	r0, [pc, #120]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a1c:	f7ff fb3a 	bl	20005094 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_4, LL_DMA_MEMORY_INCREMENT);
20005a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
20005a24:	2104      	movs	r1, #4
20005a26:	481b      	ldr	r0, [pc, #108]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a28:	f7ff fb58 	bl	200050dc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_4, LL_DMA_PDATAALIGN_BYTE);
20005a2c:	2200      	movs	r2, #0
20005a2e:	2104      	movs	r1, #4
20005a30:	4818      	ldr	r0, [pc, #96]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a32:	f7ff fb77 	bl	20005124 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_4, LL_DMA_MDATAALIGN_BYTE);
20005a36:	2200      	movs	r2, #0
20005a38:	2104      	movs	r1, #4
20005a3a:	4816      	ldr	r0, [pc, #88]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a3c:	f7ff fb96 	bl	2000516c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_4);
20005a40:	2104      	movs	r1, #4
20005a42:	4814      	ldr	r0, [pc, #80]	; (20005a94 <MX_SPI5_Init+0x100>)
20005a44:	f7ff fbfe 	bl	20005244 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
20005a48:	2300      	movs	r3, #0
20005a4a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
20005a4c:	f44f 7382 	mov.w	r3, #260	; 0x104
20005a50:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
20005a52:	2300      	movs	r3, #0
20005a54:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
20005a56:	2300      	movs	r3, #0
20005a58:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
20005a5a:	2300      	movs	r3, #0
20005a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
20005a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
20005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
20005a64:	2300      	movs	r3, #0
20005a66:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
20005a68:	2300      	movs	r3, #0
20005a6a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
20005a6c:	2300      	movs	r3, #0
20005a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
20005a70:	230a      	movs	r3, #10
20005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI5, &SPI_InitStruct);
20005a74:	f107 0318 	add.w	r3, r7, #24
20005a78:	4619      	mov	r1, r3
20005a7a:	4807      	ldr	r0, [pc, #28]	; (20005a98 <MX_SPI5_Init+0x104>)
20005a7c:	f7fa ff5f 	bl	2000093e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI5, LL_SPI_PROTOCOL_MOTOROLA);
20005a80:	2100      	movs	r1, #0
20005a82:	4805      	ldr	r0, [pc, #20]	; (20005a98 <MX_SPI5_Init+0x104>)
20005a84:	f7ff fe20 	bl	200056c8 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
20005a88:	bf00      	nop
20005a8a:	3740      	adds	r7, #64	; 0x40
20005a8c:	46bd      	mov	sp, r7
20005a8e:	bd80      	pop	{r7, pc}
20005a90:	40021400 	.word	0x40021400
20005a94:	40026400 	.word	0x40026400
20005a98:	40015000 	.word	0x40015000

20005a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
20005a9c:	b580      	push	{r7, lr}
20005a9e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
20005aa0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
20005aa4:	f7ff fd4a 	bl	2000553c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
20005aa8:	f7ff fa02 	bl	20004eb0 <__NVIC_GetPriorityGrouping>
20005aac:	4603      	mov	r3, r0
20005aae:	2200      	movs	r2, #0
20005ab0:	2105      	movs	r1, #5
20005ab2:	4618      	mov	r0, r3
20005ab4:	f7ff fa52 	bl	20004f5c <NVIC_EncodePriority>
20005ab8:	4603      	mov	r3, r0
20005aba:	4619      	mov	r1, r3
20005abc:	203c      	movs	r0, #60	; 0x3c
20005abe:	f7ff fa23 	bl	20004f08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream4_IRQn);
20005ac2:	203c      	movs	r0, #60	; 0x3c
20005ac4:	f7ff fa02 	bl	20004ecc <__NVIC_EnableIRQ>

}
20005ac8:	bf00      	nop
20005aca:	bd80      	pop	{r7, pc}

20005acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
20005acc:	b580      	push	{r7, lr}
20005ace:	b086      	sub	sp, #24
20005ad0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
20005ad2:	463b      	mov	r3, r7
20005ad4:	2200      	movs	r2, #0
20005ad6:	601a      	str	r2, [r3, #0]
20005ad8:	605a      	str	r2, [r3, #4]
20005ada:	609a      	str	r2, [r3, #8]
20005adc:	60da      	str	r2, [r3, #12]
20005ade:	611a      	str	r2, [r3, #16]
20005ae0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
20005ae2:	2004      	movs	r0, #4
20005ae4:	f7ff fd2a 	bl	2000553c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
20005ae8:	2020      	movs	r0, #32
20005aea:	f7ff fd27 	bl	2000553c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
20005aee:	2080      	movs	r0, #128	; 0x80
20005af0:	f7ff fd24 	bl	2000553c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
20005af4:	2001      	movs	r0, #1
20005af6:	f7ff fd21 	bl	2000553c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
20005afa:	2008      	movs	r0, #8
20005afc:	f7ff fd1e 	bl	2000553c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOG);
20005b00:	2040      	movs	r0, #64	; 0x40
20005b02:	f7ff fd1b 	bl	2000553c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_2);
20005b06:	2104      	movs	r1, #4
20005b08:	482b      	ldr	r0, [pc, #172]	; (20005bb8 <MX_GPIO_Init+0xec>)
20005b0a:	f7ff fe0e 	bl	2000572a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_12|LL_GPIO_PIN_13);
20005b0e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
20005b12:	482a      	ldr	r0, [pc, #168]	; (20005bbc <MX_GPIO_Init+0xf0>)
20005b14:	f7ff fe09 	bl	2000572a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOG, LL_GPIO_PIN_13|LL_GPIO_PIN_14);
20005b18:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
20005b1c:	4828      	ldr	r0, [pc, #160]	; (20005bc0 <MX_GPIO_Init+0xf4>)
20005b1e:	f7ff fe04 	bl	2000572a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
20005b22:	f44f 5360 	mov.w	r3, #14336	; 0x3800
20005b26:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
20005b28:	2300      	movs	r3, #0
20005b2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
20005b2c:	2301      	movs	r3, #1
20005b2e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20005b30:	463b      	mov	r3, r7
20005b32:	4619      	mov	r1, r3
20005b34:	4820      	ldr	r0, [pc, #128]	; (20005bb8 <MX_GPIO_Init+0xec>)
20005b36:	f7fa fe6c 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
20005b3a:	2304      	movs	r3, #4
20005b3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005b3e:	2301      	movs	r3, #1
20005b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20005b42:	2303      	movs	r3, #3
20005b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005b46:	2300      	movs	r3, #0
20005b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005b4a:	2300      	movs	r3, #0
20005b4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20005b4e:	463b      	mov	r3, r7
20005b50:	4619      	mov	r1, r3
20005b52:	4819      	ldr	r0, [pc, #100]	; (20005bb8 <MX_GPIO_Init+0xec>)
20005b54:	f7fa fe5d 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
20005b58:	2301      	movs	r3, #1
20005b5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
20005b5c:	2300      	movs	r3, #0
20005b5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005b60:	2300      	movs	r3, #0
20005b62:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
20005b64:	463b      	mov	r3, r7
20005b66:	4619      	mov	r1, r3
20005b68:	4816      	ldr	r0, [pc, #88]	; (20005bc4 <MX_GPIO_Init+0xf8>)
20005b6a:	f7fa fe52 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
20005b6e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
20005b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005b74:	2301      	movs	r3, #1
20005b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
20005b78:	2303      	movs	r3, #3
20005b7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005b7c:	2300      	movs	r3, #0
20005b7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005b80:	2300      	movs	r3, #0
20005b82:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
20005b84:	463b      	mov	r3, r7
20005b86:	4619      	mov	r1, r3
20005b88:	480c      	ldr	r0, [pc, #48]	; (20005bbc <MX_GPIO_Init+0xf0>)
20005b8a:	f7fa fe42 	bl	20000812 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
20005b8e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
20005b92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
20005b94:	2301      	movs	r3, #1
20005b96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
20005b98:	2300      	movs	r3, #0
20005b9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
20005b9c:	2300      	movs	r3, #0
20005b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
20005ba0:	2300      	movs	r3, #0
20005ba2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
20005ba4:	463b      	mov	r3, r7
20005ba6:	4619      	mov	r1, r3
20005ba8:	4805      	ldr	r0, [pc, #20]	; (20005bc0 <MX_GPIO_Init+0xf4>)
20005baa:	f7fa fe32 	bl	20000812 <LL_GPIO_Init>

}
20005bae:	bf00      	nop
20005bb0:	3718      	adds	r7, #24
20005bb2:	46bd      	mov	sp, r7
20005bb4:	bd80      	pop	{r7, pc}
20005bb6:	bf00      	nop
20005bb8:	40020800 	.word	0x40020800
20005bbc:	40020c00 	.word	0x40020c00
20005bc0:	40021800 	.word	0x40021800
20005bc4:	40020000 	.word	0x40020000

20005bc8 <DMA1_Stream4_TransferComplete>:

/* USER CODE BEGIN 4 */
void DMA1_Stream4_TransferComplete(void)
{
20005bc8:	b580      	push	{r7, lr}
20005bca:	af00      	add	r7, sp, #0
  LL_DMA_ClearFlag_TC4(DMA2);
20005bcc:	480c      	ldr	r0, [pc, #48]	; (20005c00 <DMA1_Stream4_TransferComplete+0x38>)
20005bce:	f7ff fb59 	bl	20005284 <LL_DMA_ClearFlag_TC4>
  DmaSpiCnt--;
20005bd2:	4b0c      	ldr	r3, [pc, #48]	; (20005c04 <DMA1_Stream4_TransferComplete+0x3c>)
20005bd4:	781b      	ldrb	r3, [r3, #0]
20005bd6:	3b01      	subs	r3, #1
20005bd8:	b2da      	uxtb	r2, r3
20005bda:	4b0a      	ldr	r3, [pc, #40]	; (20005c04 <DMA1_Stream4_TransferComplete+0x3c>)
20005bdc:	701a      	strb	r2, [r3, #0]

  if(DmaSpiCnt == 0)
20005bde:	4b09      	ldr	r3, [pc, #36]	; (20005c04 <DMA1_Stream4_TransferComplete+0x3c>)
20005be0:	781b      	ldrb	r3, [r3, #0]
20005be2:	2b00      	cmp	r3, #0
20005be4:	d10a      	bne.n	20005bfc <DMA1_Stream4_TransferComplete+0x34>
  {
    LL_DMA_DisableStream(DMA2, LL_DMA_STREAM_4);
20005be6:	2104      	movs	r1, #4
20005be8:	4805      	ldr	r0, [pc, #20]	; (20005c00 <DMA1_Stream4_TransferComplete+0x38>)
20005bea:	f7ff f9eb 	bl	20004fc4 <LL_DMA_DisableStream>
    DmaSpiCnt=1;
20005bee:	4b05      	ldr	r3, [pc, #20]	; (20005c04 <DMA1_Stream4_TransferComplete+0x3c>)
20005bf0:	2201      	movs	r2, #1
20005bf2:	701a      	strb	r2, [r3, #0]
    CS_DESELECT();
20005bf4:	2104      	movs	r1, #4
20005bf6:	4804      	ldr	r0, [pc, #16]	; (20005c08 <DMA1_Stream4_TransferComplete+0x40>)
20005bf8:	f7ff fd89 	bl	2000570e <LL_GPIO_SetOutputPin>
  }
}
20005bfc:	bf00      	nop
20005bfe:	bd80      	pop	{r7, pc}
20005c00:	40026400 	.word	0x40026400
20005c04:	2000a424 	.word	0x2000a424
20005c08:	40020800 	.word	0x40020800

20005c0c <StartLCDTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
20005c0c:	b580      	push	{r7, lr}
20005c0e:	b086      	sub	sp, #24
20005c10:	af02      	add	r7, sp, #8
20005c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	  TFTDisplay_ILI9341_Initialization(240, 320);
20005c14:	f44f 71a0 	mov.w	r1, #320	; 0x140
20005c18:	20f0      	movs	r0, #240	; 0xf0
20005c1a:	f7fe fb57 	bl	200042cc <TFTDisplay_ILI9341_Initialization>
      TFTDisplay_ILI9341_SetRotation(2);
20005c1e:	2002      	movs	r0, #2
20005c20:	f7fe fd72 	bl	20004708 <TFTDisplay_ILI9341_SetRotation>


	  for (int i=0; i < dl_n; i++){
20005c24:	2300      	movs	r3, #0
20005c26:	60fb      	str	r3, [r7, #12]
20005c28:	e018      	b.n	20005c5c <StartLCDTask+0x50>
		  TFTDisplay_ILI9341_DrawChar (nx, ny, *ptr);
20005c2a:	4b24      	ldr	r3, [pc, #144]	; (20005cbc <StartLCDTask+0xb0>)
20005c2c:	681b      	ldr	r3, [r3, #0]
20005c2e:	b298      	uxth	r0, r3
20005c30:	4b23      	ldr	r3, [pc, #140]	; (20005cc0 <StartLCDTask+0xb4>)
20005c32:	681b      	ldr	r3, [r3, #0]
20005c34:	b299      	uxth	r1, r3
20005c36:	4b23      	ldr	r3, [pc, #140]	; (20005cc4 <StartLCDTask+0xb8>)
20005c38:	681b      	ldr	r3, [r3, #0]
20005c3a:	781b      	ldrb	r3, [r3, #0]
20005c3c:	461a      	mov	r2, r3
20005c3e:	f7fe fc6b 	bl	20004518 <TFTDisplay_ILI9341_DrawChar>
		  nx= nx +10;
20005c42:	4b1e      	ldr	r3, [pc, #120]	; (20005cbc <StartLCDTask+0xb0>)
20005c44:	681b      	ldr	r3, [r3, #0]
20005c46:	330a      	adds	r3, #10
20005c48:	4a1c      	ldr	r2, [pc, #112]	; (20005cbc <StartLCDTask+0xb0>)
20005c4a:	6013      	str	r3, [r2, #0]
		  ptr++;
20005c4c:	4b1d      	ldr	r3, [pc, #116]	; (20005cc4 <StartLCDTask+0xb8>)
20005c4e:	681b      	ldr	r3, [r3, #0]
20005c50:	3301      	adds	r3, #1
20005c52:	4a1c      	ldr	r2, [pc, #112]	; (20005cc4 <StartLCDTask+0xb8>)
20005c54:	6013      	str	r3, [r2, #0]
	  for (int i=0; i < dl_n; i++){
20005c56:	68fb      	ldr	r3, [r7, #12]
20005c58:	3301      	adds	r3, #1
20005c5a:	60fb      	str	r3, [r7, #12]
20005c5c:	4b1a      	ldr	r3, [pc, #104]	; (20005cc8 <StartLCDTask+0xbc>)
20005c5e:	681b      	ldr	r3, [r3, #0]
20005c60:	68fa      	ldr	r2, [r7, #12]
20005c62:	429a      	cmp	r2, r3
20005c64:	dbe1      	blt.n	20005c2a <StartLCDTask+0x1e>

	  }


	  TFTDisplay_ILI9341_DrawLine(0, 0, 240, 240, TFT_COLOR_ILI9341_RED);
20005c66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
20005c6a:	9300      	str	r3, [sp, #0]
20005c6c:	23f0      	movs	r3, #240	; 0xf0
20005c6e:	22f0      	movs	r2, #240	; 0xf0
20005c70:	2100      	movs	r1, #0
20005c72:	2000      	movs	r0, #0
20005c74:	f7fe fbc0 	bl	200043f8 <TFTDisplay_ILI9341_DrawLine>


	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
20005c78:	e002      	b.n	20005c80 <StartLCDTask+0x74>
		{
		osDelay(2);					//aby nie blokować innych tasków
20005c7a:	2002      	movs	r0, #2
20005c7c:	f7fb f820 	bl	20000cc0 <osDelay>
	while(!(GPIOA -> IDR & 0x0001)) //sprawdzanie klawisza pod PA0
20005c80:	4b12      	ldr	r3, [pc, #72]	; (20005ccc <StartLCDTask+0xc0>)
20005c82:	691b      	ldr	r3, [r3, #16]
20005c84:	f003 0301 	and.w	r3, r3, #1
20005c88:	2b00      	cmp	r3, #0
20005c8a:	d0f6      	beq.n	20005c7a <StartLCDTask+0x6e>
		}

  /* Infinite loop */
  for(;;)
  {
      for(int i=0; i< 10; i++)
20005c8c:	2300      	movs	r3, #0
20005c8e:	60bb      	str	r3, [r7, #8]
20005c90:	e00f      	b.n	20005cb2 <StartLCDTask+0xa6>
        {
            TFTDisplay_ILI9341_DrawChar(100, 100, 0x30 + i);
20005c92:	68bb      	ldr	r3, [r7, #8]
20005c94:	b2db      	uxtb	r3, r3
20005c96:	3330      	adds	r3, #48	; 0x30
20005c98:	b2db      	uxtb	r3, r3
20005c9a:	461a      	mov	r2, r3
20005c9c:	2164      	movs	r1, #100	; 0x64
20005c9e:	2064      	movs	r0, #100	; 0x64
20005ca0:	f7fe fc3a 	bl	20004518 <TFTDisplay_ILI9341_DrawChar>
            osDelay(1000);
20005ca4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20005ca8:	f7fb f80a 	bl	20000cc0 <osDelay>
      for(int i=0; i< 10; i++)
20005cac:	68bb      	ldr	r3, [r7, #8]
20005cae:	3301      	adds	r3, #1
20005cb0:	60bb      	str	r3, [r7, #8]
20005cb2:	68bb      	ldr	r3, [r7, #8]
20005cb4:	2b09      	cmp	r3, #9
20005cb6:	ddec      	ble.n	20005c92 <StartLCDTask+0x86>
20005cb8:	e7e8      	b.n	20005c8c <StartLCDTask+0x80>
20005cba:	bf00      	nop
20005cbc:	2001ef5c 	.word	0x2001ef5c
20005cc0:	2000a448 	.word	0x2000a448
20005cc4:	2001ef58 	.word	0x2001ef58
20005cc8:	2000a444 	.word	0x2000a444
20005ccc:	40020000 	.word	0x40020000

20005cd0 <StartTaskLED1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED1 */
void StartTaskLED1(void *argument)
{
20005cd0:	b580      	push	{r7, lr}
20005cd2:	b082      	sub	sp, #8
20005cd4:	af00      	add	r7, sp, #0
20005cd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskLED1 */
  /* Infinite loop */
  for(;;)
  {

	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
20005cd8:	4b07      	ldr	r3, [pc, #28]	; (20005cf8 <StartTaskLED1+0x28>)
20005cda:	681b      	ldr	r3, [r3, #0]
20005cdc:	f04f 31ff 	mov.w	r1, #4294967295
20005ce0:	4618      	mov	r0, r3
20005ce2:	f7fb f891 	bl	20000e08 <osSemaphoreAcquire>

	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_13);
20005ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20005cea:	4804      	ldr	r0, [pc, #16]	; (20005cfc <StartTaskLED1+0x2c>)
20005cec:	f7ff fd2c 	bl	20005748 <LL_GPIO_TogglePin>


	  osDelay(100);
20005cf0:	2064      	movs	r0, #100	; 0x64
20005cf2:	f7fa ffe5 	bl	20000cc0 <osDelay>
	  osSemaphoreAcquire(BinarySem01Handle, osWaitForever);  //synchronizacja tasków - zwolnienie w TaskLED2
20005cf6:	e7ef      	b.n	20005cd8 <StartTaskLED1+0x8>
20005cf8:	2001ef54 	.word	0x2001ef54
20005cfc:	40021800 	.word	0x40021800

20005d00 <StartTaskLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLED2 */
void StartTaskLED2(void *argument)
{
20005d00:	b580      	push	{r7, lr}
20005d02:	b082      	sub	sp, #8
20005d04:	af00      	add	r7, sp, #0
20005d06:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20005d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
20005d0c:	4806      	ldr	r0, [pc, #24]	; (20005d28 <StartTaskLED2+0x28>)
20005d0e:	f7ff fd1b 	bl	20005748 <LL_GPIO_TogglePin>

	  osDelay(1000);
20005d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
20005d16:	f7fa ffd3 	bl	20000cc0 <osDelay>
	  osSemaphoreRelease(BinarySem01Handle);	//zwolnienie semafora i odblokowanie TaskLED1
20005d1a:	4b04      	ldr	r3, [pc, #16]	; (20005d2c <StartTaskLED2+0x2c>)
20005d1c:	681b      	ldr	r3, [r3, #0]
20005d1e:	4618      	mov	r0, r3
20005d20:	f7fb f8c4 	bl	20000eac <osSemaphoreRelease>
	  LL_GPIO_TogglePin(GPIOG, LL_GPIO_PIN_14);
20005d24:	e7f0      	b.n	20005d08 <StartTaskLED2+0x8>
20005d26:	bf00      	nop
20005d28:	40021800 	.word	0x40021800
20005d2c:	2001ef54 	.word	0x2001ef54

20005d30 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
20005d30:	b580      	push	{r7, lr}
20005d32:	b082      	sub	sp, #8
20005d34:	af00      	add	r7, sp, #0
20005d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
    if(!(GPIOC -> IDR & 0x0800)){
20005d38:	4b23      	ldr	r3, [pc, #140]	; (20005dc8 <StartTask04+0x98>)
20005d3a:	691b      	ldr	r3, [r3, #16]
20005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20005d40:	2b00      	cmp	r3, #0
20005d42:	d117      	bne.n	20005d74 <StartTask04+0x44>
        pid.expected += 0.1;
20005d44:	4b21      	ldr	r3, [pc, #132]	; (20005dcc <StartTask04+0x9c>)
20005d46:	69db      	ldr	r3, [r3, #28]
20005d48:	4618      	mov	r0, r3
20005d4a:	f7fa fbb5 	bl	200004b8 <__aeabi_f2d>
20005d4e:	a31c      	add	r3, pc, #112	; (adr r3, 20005dc0 <StartTask04+0x90>)
20005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
20005d54:	f7fa fa52 	bl	200001fc <__adddf3>
20005d58:	4602      	mov	r2, r0
20005d5a:	460b      	mov	r3, r1
20005d5c:	4610      	mov	r0, r2
20005d5e:	4619      	mov	r1, r3
20005d60:	f7fa fc02 	bl	20000568 <__aeabi_d2f>
20005d64:	4603      	mov	r3, r0
20005d66:	4a19      	ldr	r2, [pc, #100]	; (20005dcc <StartTask04+0x9c>)
20005d68:	61d3      	str	r3, [r2, #28]
        TFTDisplay_ILI9341_DrawChar(100, 150, 0x31);
20005d6a:	2231      	movs	r2, #49	; 0x31
20005d6c:	2196      	movs	r1, #150	; 0x96
20005d6e:	2064      	movs	r0, #100	; 0x64
20005d70:	f7fe fbd2 	bl	20004518 <TFTDisplay_ILI9341_DrawChar>
    }
    if(!(GPIOC -> IDR & 0x1000)){
20005d74:	4b14      	ldr	r3, [pc, #80]	; (20005dc8 <StartTask04+0x98>)
20005d76:	691b      	ldr	r3, [r3, #16]
20005d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
20005d7c:	2b00      	cmp	r3, #0
20005d7e:	d117      	bne.n	20005db0 <StartTask04+0x80>
        pid.expected -= 0.1;
20005d80:	4b12      	ldr	r3, [pc, #72]	; (20005dcc <StartTask04+0x9c>)
20005d82:	69db      	ldr	r3, [r3, #28]
20005d84:	4618      	mov	r0, r3
20005d86:	f7fa fb97 	bl	200004b8 <__aeabi_f2d>
20005d8a:	a30d      	add	r3, pc, #52	; (adr r3, 20005dc0 <StartTask04+0x90>)
20005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
20005d90:	f7fa fa32 	bl	200001f8 <__aeabi_dsub>
20005d94:	4602      	mov	r2, r0
20005d96:	460b      	mov	r3, r1
20005d98:	4610      	mov	r0, r2
20005d9a:	4619      	mov	r1, r3
20005d9c:	f7fa fbe4 	bl	20000568 <__aeabi_d2f>
20005da0:	4603      	mov	r3, r0
20005da2:	4a0a      	ldr	r2, [pc, #40]	; (20005dcc <StartTask04+0x9c>)
20005da4:	61d3      	str	r3, [r2, #28]
        TFTDisplay_ILI9341_DrawChar(100, 150, 0x32);
20005da6:	2232      	movs	r2, #50	; 0x32
20005da8:	2196      	movs	r1, #150	; 0x96
20005daa:	2064      	movs	r0, #100	; 0x64
20005dac:	f7fe fbb4 	bl	20004518 <TFTDisplay_ILI9341_DrawChar>
    }
    if(!(GPIOC -> IDR & 0x2000)){
20005db0:	4b05      	ldr	r3, [pc, #20]	; (20005dc8 <StartTask04+0x98>)
20005db2:	691b      	ldr	r3, [r3, #16]

    }
    osDelay(10);
20005db4:	200a      	movs	r0, #10
20005db6:	f7fa ff83 	bl	20000cc0 <osDelay>
    if(!(GPIOC -> IDR & 0x0800)){
20005dba:	e7bd      	b.n	20005d38 <StartTask04+0x8>
20005dbc:	f3af 8000 	nop.w
20005dc0:	9999999a 	.word	0x9999999a
20005dc4:	3fb99999 	.word	0x3fb99999
20005dc8:	40020800 	.word	0x40020800
20005dcc:	2001eeec 	.word	0x2001eeec

20005dd0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
20005dd0:	b580      	push	{r7, lr}
20005dd2:	b084      	sub	sp, #16
20005dd4:	af00      	add	r7, sp, #0
20005dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
    PID_s_init(&pid, 10, 3, 0.9, tp);
20005dd8:	4b2c      	ldr	r3, [pc, #176]	; (20005e8c <StartTask05+0xbc>)
20005dda:	edd3 7a00 	vldr	s15, [r3]
20005dde:	eef0 1a67 	vmov.f32	s3, s15
20005de2:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 20005e90 <StartTask05+0xc0>
20005de6:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
20005dea:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
20005dee:	4829      	ldr	r0, [pc, #164]	; (20005e94 <StartTask05+0xc4>)
20005df0:	f000 f90a 	bl	20006008 <PID_s_init>
    Inercja_s_init(&in3, 1, tp, 5);
20005df4:	4b25      	ldr	r3, [pc, #148]	; (20005e8c <StartTask05+0xbc>)
20005df6:	edd3 7a00 	vldr	s15, [r3]
20005dfa:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
20005dfe:	eef0 0a67 	vmov.f32	s1, s15
20005e02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
20005e06:	4824      	ldr	r0, [pc, #144]	; (20005e98 <StartTask05+0xc8>)
20005e08:	f000 f992 	bl	20006130 <Inercja_s_init>
    Inercja_s_init(&in4, 2, tp, 3);
20005e0c:	4b1f      	ldr	r3, [pc, #124]	; (20005e8c <StartTask05+0xbc>)
20005e0e:	edd3 7a00 	vldr	s15, [r3]
20005e12:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
20005e16:	eef0 0a67 	vmov.f32	s1, s15
20005e1a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
20005e1e:	481f      	ldr	r0, [pc, #124]	; (20005e9c <StartTask05+0xcc>)
20005e20:	f000 f986 	bl	20006130 <Inercja_s_init>
    float expected = 0;
20005e24:	f04f 0300 	mov.w	r3, #0
20005e28:	60bb      	str	r3, [r7, #8]
    float output = 0;
20005e2a:	f04f 0300 	mov.w	r3, #0
20005e2e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    pid.expected = expected;
20005e30:	4a18      	ldr	r2, [pc, #96]	; (20005e94 <StartTask05+0xc4>)
20005e32:	68bb      	ldr	r3, [r7, #8]
20005e34:	61d3      	str	r3, [r2, #28]
    pid.input = output;
20005e36:	4a17      	ldr	r2, [pc, #92]	; (20005e94 <StartTask05+0xc4>)
20005e38:	68fb      	ldr	r3, [r7, #12]
20005e3a:	6193      	str	r3, [r2, #24]
    Reg_s_step(&pid);
20005e3c:	4815      	ldr	r0, [pc, #84]	; (20005e94 <StartTask05+0xc4>)
20005e3e:	f000 f909 	bl	20006054 <Reg_s_step>
    //output = pid.output;
    in3.input = pid.output;
20005e42:	4b14      	ldr	r3, [pc, #80]	; (20005e94 <StartTask05+0xc4>)
20005e44:	6a1b      	ldr	r3, [r3, #32]
20005e46:	4a14      	ldr	r2, [pc, #80]	; (20005e98 <StartTask05+0xc8>)
20005e48:	6153      	str	r3, [r2, #20]
    Inercja_s_step(&in3);
20005e4a:	4813      	ldr	r0, [pc, #76]	; (20005e98 <StartTask05+0xc8>)
20005e4c:	f000 f98d 	bl	2000616a <Inercja_s_step>
    in4.input = in3.output;
20005e50:	4b11      	ldr	r3, [pc, #68]	; (20005e98 <StartTask05+0xc8>)
20005e52:	691b      	ldr	r3, [r3, #16]
20005e54:	4a11      	ldr	r2, [pc, #68]	; (20005e9c <StartTask05+0xcc>)
20005e56:	6153      	str	r3, [r2, #20]
    Inercja_s_step(&in4);
20005e58:	4810      	ldr	r0, [pc, #64]	; (20005e9c <StartTask05+0xcc>)
20005e5a:	f000 f986 	bl	2000616a <Inercja_s_step>
    output =  in4.output;
20005e5e:	4b0f      	ldr	r3, [pc, #60]	; (20005e9c <StartTask05+0xcc>)
20005e60:	691b      	ldr	r3, [r3, #16]
20005e62:	60fb      	str	r3, [r7, #12]
    Draw_info((int)output, (int) expected, false);
20005e64:	edd7 7a03 	vldr	s15, [r7, #12]
20005e68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
20005e6c:	edd7 7a02 	vldr	s15, [r7, #8]
20005e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
20005e74:	2200      	movs	r2, #0
20005e76:	ee17 1a90 	vmov	r1, s15
20005e7a:	ee17 0a10 	vmov	r0, s14
20005e7e:	f000 f80f 	bl	20005ea0 <Draw_info>
    osDelay(50);
20005e82:	2032      	movs	r0, #50	; 0x32
20005e84:	f7fa ff1c 	bl	20000cc0 <osDelay>
    pid.expected = expected;
20005e88:	e7d2      	b.n	20005e30 <StartTask05+0x60>
20005e8a:	bf00      	nop
20005e8c:	2000a420 	.word	0x2000a420
20005e90:	3f666666 	.word	0x3f666666
20005e94:	2001eeec 	.word	0x2001eeec
20005e98:	2001ef10 	.word	0x2001ef10
20005e9c:	2001ef28 	.word	0x2001ef28

20005ea0 <Draw_info>:
#include "myfunctions.h"

unsigned short int *const LCD_FB = (unsigned short int*) 0xD0000000;
unsigned short int *const LCD_BUF = (unsigned short int*) 0xD0100000;

void Draw_info(int real_temp, int exp_temp, bool window){
20005ea0:	b5b0      	push	{r4, r5, r7, lr}
20005ea2:	b08c      	sub	sp, #48	; 0x30
20005ea4:	af00      	add	r7, sp, #0
20005ea6:	60f8      	str	r0, [r7, #12]
20005ea8:	60b9      	str	r1, [r7, #8]
20005eaa:	4613      	mov	r3, r2
20005eac:	71fb      	strb	r3, [r7, #7]
    unsigned char data[]= "Temp:  .  Set:  .  Okno: ";
20005eae:	4b53      	ldr	r3, [pc, #332]	; (20005ffc <Draw_info+0x15c>)
20005eb0:	f107 0410 	add.w	r4, r7, #16
20005eb4:	461d      	mov	r5, r3
20005eb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
20005eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
20005eba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
20005ebe:	c403      	stmia	r4!, {r0, r1}
20005ec0:	8022      	strh	r2, [r4, #0]
    if(real_temp > 500) real_temp = 500;
20005ec2:	68fb      	ldr	r3, [r7, #12]
20005ec4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
20005ec8:	dd02      	ble.n	20005ed0 <Draw_info+0x30>
20005eca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
20005ece:	60fb      	str	r3, [r7, #12]
    data[5] = real_temp / 100 + '0';
20005ed0:	68fb      	ldr	r3, [r7, #12]
20005ed2:	4a4b      	ldr	r2, [pc, #300]	; (20006000 <Draw_info+0x160>)
20005ed4:	fb82 1203 	smull	r1, r2, r2, r3
20005ed8:	1152      	asrs	r2, r2, #5
20005eda:	17db      	asrs	r3, r3, #31
20005edc:	1ad3      	subs	r3, r2, r3
20005ede:	b2db      	uxtb	r3, r3
20005ee0:	3330      	adds	r3, #48	; 0x30
20005ee2:	b2db      	uxtb	r3, r3
20005ee4:	757b      	strb	r3, [r7, #21]
    data[6] = ((real_temp / 10) - (real_temp / 100 * 10)) + '0';
20005ee6:	68fb      	ldr	r3, [r7, #12]
20005ee8:	4a46      	ldr	r2, [pc, #280]	; (20006004 <Draw_info+0x164>)
20005eea:	fb82 1203 	smull	r1, r2, r2, r3
20005eee:	1092      	asrs	r2, r2, #2
20005ef0:	17db      	asrs	r3, r3, #31
20005ef2:	1ad3      	subs	r3, r2, r3
20005ef4:	b2da      	uxtb	r2, r3
20005ef6:	68fb      	ldr	r3, [r7, #12]
20005ef8:	4941      	ldr	r1, [pc, #260]	; (20006000 <Draw_info+0x160>)
20005efa:	fb81 0103 	smull	r0, r1, r1, r3
20005efe:	1149      	asrs	r1, r1, #5
20005f00:	17db      	asrs	r3, r3, #31
20005f02:	1a5b      	subs	r3, r3, r1
20005f04:	b2db      	uxtb	r3, r3
20005f06:	4619      	mov	r1, r3
20005f08:	0089      	lsls	r1, r1, #2
20005f0a:	440b      	add	r3, r1
20005f0c:	005b      	lsls	r3, r3, #1
20005f0e:	b2db      	uxtb	r3, r3
20005f10:	4413      	add	r3, r2
20005f12:	b2db      	uxtb	r3, r3
20005f14:	3330      	adds	r3, #48	; 0x30
20005f16:	b2db      	uxtb	r3, r3
20005f18:	75bb      	strb	r3, [r7, #22]
    data[8] = real_temp % 10 + '0';
20005f1a:	68fa      	ldr	r2, [r7, #12]
20005f1c:	4b39      	ldr	r3, [pc, #228]	; (20006004 <Draw_info+0x164>)
20005f1e:	fb83 1302 	smull	r1, r3, r3, r2
20005f22:	1099      	asrs	r1, r3, #2
20005f24:	17d3      	asrs	r3, r2, #31
20005f26:	1ac9      	subs	r1, r1, r3
20005f28:	460b      	mov	r3, r1
20005f2a:	009b      	lsls	r3, r3, #2
20005f2c:	440b      	add	r3, r1
20005f2e:	005b      	lsls	r3, r3, #1
20005f30:	1ad1      	subs	r1, r2, r3
20005f32:	b2cb      	uxtb	r3, r1
20005f34:	3330      	adds	r3, #48	; 0x30
20005f36:	b2db      	uxtb	r3, r3
20005f38:	763b      	strb	r3, [r7, #24]
    data[14] = exp_temp / 100 + '0';
20005f3a:	68bb      	ldr	r3, [r7, #8]
20005f3c:	4a30      	ldr	r2, [pc, #192]	; (20006000 <Draw_info+0x160>)
20005f3e:	fb82 1203 	smull	r1, r2, r2, r3
20005f42:	1152      	asrs	r2, r2, #5
20005f44:	17db      	asrs	r3, r3, #31
20005f46:	1ad3      	subs	r3, r2, r3
20005f48:	b2db      	uxtb	r3, r3
20005f4a:	3330      	adds	r3, #48	; 0x30
20005f4c:	b2db      	uxtb	r3, r3
20005f4e:	77bb      	strb	r3, [r7, #30]
    data[15] = ((exp_temp / 10) - (exp_temp / 100 * 10)) + '0';
20005f50:	68bb      	ldr	r3, [r7, #8]
20005f52:	4a2c      	ldr	r2, [pc, #176]	; (20006004 <Draw_info+0x164>)
20005f54:	fb82 1203 	smull	r1, r2, r2, r3
20005f58:	1092      	asrs	r2, r2, #2
20005f5a:	17db      	asrs	r3, r3, #31
20005f5c:	1ad3      	subs	r3, r2, r3
20005f5e:	b2da      	uxtb	r2, r3
20005f60:	68bb      	ldr	r3, [r7, #8]
20005f62:	4927      	ldr	r1, [pc, #156]	; (20006000 <Draw_info+0x160>)
20005f64:	fb81 0103 	smull	r0, r1, r1, r3
20005f68:	1149      	asrs	r1, r1, #5
20005f6a:	17db      	asrs	r3, r3, #31
20005f6c:	1a5b      	subs	r3, r3, r1
20005f6e:	b2db      	uxtb	r3, r3
20005f70:	4619      	mov	r1, r3
20005f72:	0089      	lsls	r1, r1, #2
20005f74:	440b      	add	r3, r1
20005f76:	005b      	lsls	r3, r3, #1
20005f78:	b2db      	uxtb	r3, r3
20005f7a:	4413      	add	r3, r2
20005f7c:	b2db      	uxtb	r3, r3
20005f7e:	3330      	adds	r3, #48	; 0x30
20005f80:	b2db      	uxtb	r3, r3
20005f82:	77fb      	strb	r3, [r7, #31]
    data[17] = exp_temp % 10 + '0';
20005f84:	68ba      	ldr	r2, [r7, #8]
20005f86:	4b1f      	ldr	r3, [pc, #124]	; (20006004 <Draw_info+0x164>)
20005f88:	fb83 1302 	smull	r1, r3, r3, r2
20005f8c:	1099      	asrs	r1, r3, #2
20005f8e:	17d3      	asrs	r3, r2, #31
20005f90:	1ac9      	subs	r1, r1, r3
20005f92:	460b      	mov	r3, r1
20005f94:	009b      	lsls	r3, r3, #2
20005f96:	440b      	add	r3, r1
20005f98:	005b      	lsls	r3, r3, #1
20005f9a:	1ad1      	subs	r1, r2, r3
20005f9c:	b2cb      	uxtb	r3, r1
20005f9e:	3330      	adds	r3, #48	; 0x30
20005fa0:	b2db      	uxtb	r3, r3
20005fa2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    if(window){
20005fa6:	79fb      	ldrb	r3, [r7, #7]
20005fa8:	2b00      	cmp	r3, #0
20005faa:	d003      	beq.n	20005fb4 <Draw_info+0x114>
        data[24] = '1';
20005fac:	2331      	movs	r3, #49	; 0x31
20005fae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
20005fb2:	e002      	b.n	20005fba <Draw_info+0x11a>
    }else{
        data[24] = '0';
20005fb4:	2330      	movs	r3, #48	; 0x30
20005fb6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    }
    for(int i = 0; i < 25; i++){
20005fba:	2300      	movs	r3, #0
20005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
20005fbe:	e014      	b.n	20005fea <Draw_info+0x14a>
    	TFTDisplay_ILI9341_DrawChar(i * 6 + 5, 5, data[i]);
20005fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005fc2:	b29b      	uxth	r3, r3
20005fc4:	461a      	mov	r2, r3
20005fc6:	0052      	lsls	r2, r2, #1
20005fc8:	4413      	add	r3, r2
20005fca:	005b      	lsls	r3, r3, #1
20005fcc:	b29b      	uxth	r3, r3
20005fce:	3305      	adds	r3, #5
20005fd0:	b298      	uxth	r0, r3
20005fd2:	f107 0210 	add.w	r2, r7, #16
20005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005fd8:	4413      	add	r3, r2
20005fda:	781b      	ldrb	r3, [r3, #0]
20005fdc:	461a      	mov	r2, r3
20005fde:	2105      	movs	r1, #5
20005fe0:	f7fe fa9a 	bl	20004518 <TFTDisplay_ILI9341_DrawChar>
    for(int i = 0; i < 25; i++){
20005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005fe6:	3301      	adds	r3, #1
20005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
20005fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20005fec:	2b18      	cmp	r3, #24
20005fee:	dde7      	ble.n	20005fc0 <Draw_info+0x120>
    }

}
20005ff0:	bf00      	nop
20005ff2:	bf00      	nop
20005ff4:	3730      	adds	r7, #48	; 0x30
20005ff6:	46bd      	mov	sp, r7
20005ff8:	bdb0      	pop	{r4, r5, r7, pc}
20005ffa:	bf00      	nop
20005ffc:	200065c0 	.word	0x200065c0
20006000:	51eb851f 	.word	0x51eb851f
20006004:	66666667 	.word	0x66666667

20006008 <PID_s_init>:
#include "reg2.h"

void PID_s_init(PID_s* reg, float kp, float ti, float td, float t){
20006008:	b480      	push	{r7}
2000600a:	b087      	sub	sp, #28
2000600c:	af00      	add	r7, sp, #0
2000600e:	6178      	str	r0, [r7, #20]
20006010:	ed87 0a04 	vstr	s0, [r7, #16]
20006014:	edc7 0a03 	vstr	s1, [r7, #12]
20006018:	ed87 1a02 	vstr	s2, [r7, #8]
2000601c:	edc7 1a01 	vstr	s3, [r7, #4]
    reg->Kp = kp;
20006020:	697b      	ldr	r3, [r7, #20]
20006022:	693a      	ldr	r2, [r7, #16]
20006024:	601a      	str	r2, [r3, #0]
    reg->Ti = ti;
20006026:	697b      	ldr	r3, [r7, #20]
20006028:	68fa      	ldr	r2, [r7, #12]
2000602a:	605a      	str	r2, [r3, #4]
    reg->Td = td;
2000602c:	697b      	ldr	r3, [r7, #20]
2000602e:	68ba      	ldr	r2, [r7, #8]
20006030:	609a      	str	r2, [r3, #8]
    reg->Ts = t;
20006032:	697b      	ldr	r3, [r7, #20]
20006034:	687a      	ldr	r2, [r7, #4]
20006036:	60da      	str	r2, [r3, #12]
    reg->last_i = 0;
20006038:	697b      	ldr	r3, [r7, #20]
2000603a:	f04f 0200 	mov.w	r2, #0
2000603e:	611a      	str	r2, [r3, #16]
    reg->last_input = 0;
20006040:	697b      	ldr	r3, [r7, #20]
20006042:	f04f 0200 	mov.w	r2, #0
20006046:	615a      	str	r2, [r3, #20]
}
20006048:	bf00      	nop
2000604a:	371c      	adds	r7, #28
2000604c:	46bd      	mov	sp, r7
2000604e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006052:	4770      	bx	lr

20006054 <Reg_s_step>:

void Reg_s_step(PID_s* reg){
20006054:	b480      	push	{r7}
20006056:	b087      	sub	sp, #28
20006058:	af00      	add	r7, sp, #0
2000605a:	6078      	str	r0, [r7, #4]
    //printf("(input: %f, expected: %f)",input, expected);
    float P = reg->Kp * (reg->expected - reg->input);
2000605c:	687b      	ldr	r3, [r7, #4]
2000605e:	ed93 7a00 	vldr	s14, [r3]
20006062:	687b      	ldr	r3, [r7, #4]
20006064:	edd3 6a07 	vldr	s13, [r3, #28]
20006068:	687b      	ldr	r3, [r7, #4]
2000606a:	edd3 7a06 	vldr	s15, [r3, #24]
2000606e:	ee76 7ae7 	vsub.f32	s15, s13, s15
20006072:	ee67 7a27 	vmul.f32	s15, s14, s15
20006076:	edc7 7a05 	vstr	s15, [r7, #20]
    float I = (reg->Kp /reg->Ti * reg->Ts * (reg->expected - reg->input)) + reg->last_i;        
2000607a:	687b      	ldr	r3, [r7, #4]
2000607c:	edd3 6a00 	vldr	s13, [r3]
20006080:	687b      	ldr	r3, [r7, #4]
20006082:	edd3 7a01 	vldr	s15, [r3, #4]
20006086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2000608a:	687b      	ldr	r3, [r7, #4]
2000608c:	edd3 7a03 	vldr	s15, [r3, #12]
20006090:	ee27 7a27 	vmul.f32	s14, s14, s15
20006094:	687b      	ldr	r3, [r7, #4]
20006096:	edd3 6a07 	vldr	s13, [r3, #28]
2000609a:	687b      	ldr	r3, [r7, #4]
2000609c:	edd3 7a06 	vldr	s15, [r3, #24]
200060a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
200060a4:	ee27 7a27 	vmul.f32	s14, s14, s15
200060a8:	687b      	ldr	r3, [r7, #4]
200060aa:	edd3 7a04 	vldr	s15, [r3, #16]
200060ae:	ee77 7a27 	vadd.f32	s15, s14, s15
200060b2:	edc7 7a04 	vstr	s15, [r7, #16]
    float D = reg->Kp * ((reg->expected - reg->input) - (reg->expected - reg->last_input))/reg->Ts * reg->Td;
200060b6:	687b      	ldr	r3, [r7, #4]
200060b8:	ed93 7a00 	vldr	s14, [r3]
200060bc:	687b      	ldr	r3, [r7, #4]
200060be:	edd3 6a07 	vldr	s13, [r3, #28]
200060c2:	687b      	ldr	r3, [r7, #4]
200060c4:	edd3 7a06 	vldr	s15, [r3, #24]
200060c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
200060cc:	687b      	ldr	r3, [r7, #4]
200060ce:	ed93 6a07 	vldr	s12, [r3, #28]
200060d2:	687b      	ldr	r3, [r7, #4]
200060d4:	edd3 7a05 	vldr	s15, [r3, #20]
200060d8:	ee76 7a67 	vsub.f32	s15, s12, s15
200060dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
200060e0:	ee67 6a27 	vmul.f32	s13, s14, s15
200060e4:	687b      	ldr	r3, [r7, #4]
200060e6:	edd3 7a03 	vldr	s15, [r3, #12]
200060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
200060ee:	687b      	ldr	r3, [r7, #4]
200060f0:	edd3 7a02 	vldr	s15, [r3, #8]
200060f4:	ee67 7a27 	vmul.f32	s15, s14, s15
200060f8:	edc7 7a03 	vstr	s15, [r7, #12]
    //printf("P: %.2f \t", P);
    reg->last_i = I;
200060fc:	687b      	ldr	r3, [r7, #4]
200060fe:	693a      	ldr	r2, [r7, #16]
20006100:	611a      	str	r2, [r3, #16]
    reg->last_input = reg->input;
20006102:	687b      	ldr	r3, [r7, #4]
20006104:	699a      	ldr	r2, [r3, #24]
20006106:	687b      	ldr	r3, [r7, #4]
20006108:	615a      	str	r2, [r3, #20]
    reg->output = P + I + D;
2000610a:	ed97 7a05 	vldr	s14, [r7, #20]
2000610e:	edd7 7a04 	vldr	s15, [r7, #16]
20006112:	ee37 7a27 	vadd.f32	s14, s14, s15
20006116:	edd7 7a03 	vldr	s15, [r7, #12]
2000611a:	ee77 7a27 	vadd.f32	s15, s14, s15
2000611e:	687b      	ldr	r3, [r7, #4]
20006120:	edc3 7a08 	vstr	s15, [r3, #32]
}
20006124:	bf00      	nop
20006126:	371c      	adds	r7, #28
20006128:	46bd      	mov	sp, r7
2000612a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000612e:	4770      	bx	lr

20006130 <Inercja_s_init>:

void Inercja_s_init(Inercja_s* in,float  k, float t, float ti){
20006130:	b480      	push	{r7}
20006132:	b085      	sub	sp, #20
20006134:	af00      	add	r7, sp, #0
20006136:	60f8      	str	r0, [r7, #12]
20006138:	ed87 0a02 	vstr	s0, [r7, #8]
2000613c:	edc7 0a01 	vstr	s1, [r7, #4]
20006140:	ed87 1a00 	vstr	s2, [r7]
    in->last_input = 0;
20006144:	68fb      	ldr	r3, [r7, #12]
20006146:	f04f 0200 	mov.w	r2, #0
2000614a:	601a      	str	r2, [r3, #0]
    in->kp = k;
2000614c:	68fb      	ldr	r3, [r7, #12]
2000614e:	68ba      	ldr	r2, [r7, #8]
20006150:	605a      	str	r2, [r3, #4]
    in->ts = t;
20006152:	68fb      	ldr	r3, [r7, #12]
20006154:	687a      	ldr	r2, [r7, #4]
20006156:	60da      	str	r2, [r3, #12]
    in->tin = ti;
20006158:	68fb      	ldr	r3, [r7, #12]
2000615a:	683a      	ldr	r2, [r7, #0]
2000615c:	609a      	str	r2, [r3, #8]
}
2000615e:	bf00      	nop
20006160:	3714      	adds	r7, #20
20006162:	46bd      	mov	sp, r7
20006164:	f85d 7b04 	ldr.w	r7, [sp], #4
20006168:	4770      	bx	lr

2000616a <Inercja_s_step>:

void Inercja_s_step(Inercja_s* in){
2000616a:	b480      	push	{r7}
2000616c:	b083      	sub	sp, #12
2000616e:	af00      	add	r7, sp, #0
20006170:	6078      	str	r0, [r7, #4]
    //local out =  (Tp / (5 + Tp)) * enter + (5 / (5 + Tp)) * last           -- 1/(5s+1)
    //local out = ((Tp / (3 + Tp)) * enter + (3 / (3 + Tp)) * last/2)*2     -- 2/(3s+1)
    in->output = ((in->ts / (in->tin + in->ts)) * in->input + (in->tin / (in->tin + in->ts)) * in->last_input/in->kp)*in->kp;
20006172:	687b      	ldr	r3, [r7, #4]
20006174:	edd3 6a03 	vldr	s13, [r3, #12]
20006178:	687b      	ldr	r3, [r7, #4]
2000617a:	ed93 7a02 	vldr	s14, [r3, #8]
2000617e:	687b      	ldr	r3, [r7, #4]
20006180:	edd3 7a03 	vldr	s15, [r3, #12]
20006184:	ee77 7a27 	vadd.f32	s15, s14, s15
20006188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2000618c:	687b      	ldr	r3, [r7, #4]
2000618e:	edd3 7a05 	vldr	s15, [r3, #20]
20006192:	ee27 7a27 	vmul.f32	s14, s14, s15
20006196:	687b      	ldr	r3, [r7, #4]
20006198:	ed93 6a02 	vldr	s12, [r3, #8]
2000619c:	687b      	ldr	r3, [r7, #4]
2000619e:	edd3 6a02 	vldr	s13, [r3, #8]
200061a2:	687b      	ldr	r3, [r7, #4]
200061a4:	edd3 7a03 	vldr	s15, [r3, #12]
200061a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
200061ac:	eec6 6a27 	vdiv.f32	s13, s12, s15
200061b0:	687b      	ldr	r3, [r7, #4]
200061b2:	edd3 7a00 	vldr	s15, [r3]
200061b6:	ee26 6aa7 	vmul.f32	s12, s13, s15
200061ba:	687b      	ldr	r3, [r7, #4]
200061bc:	edd3 6a01 	vldr	s13, [r3, #4]
200061c0:	eec6 7a26 	vdiv.f32	s15, s12, s13
200061c4:	ee37 7a27 	vadd.f32	s14, s14, s15
200061c8:	687b      	ldr	r3, [r7, #4]
200061ca:	edd3 7a01 	vldr	s15, [r3, #4]
200061ce:	ee67 7a27 	vmul.f32	s15, s14, s15
200061d2:	687b      	ldr	r3, [r7, #4]
200061d4:	edc3 7a04 	vstr	s15, [r3, #16]
    in->last_input = in->input;
200061d8:	687b      	ldr	r3, [r7, #4]
200061da:	695a      	ldr	r2, [r3, #20]
200061dc:	687b      	ldr	r3, [r7, #4]
200061de:	601a      	str	r2, [r3, #0]
200061e0:	bf00      	nop
200061e2:	370c      	adds	r7, #12
200061e4:	46bd      	mov	sp, r7
200061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200061ea:	4770      	bx	lr

200061ec <LL_DMA_IsActiveFlag_TC4>:
{
200061ec:	b480      	push	{r7}
200061ee:	b083      	sub	sp, #12
200061f0:	af00      	add	r7, sp, #0
200061f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TCIF4)==(DMA_HISR_TCIF4));
200061f4:	687b      	ldr	r3, [r7, #4]
200061f6:	685b      	ldr	r3, [r3, #4]
200061f8:	f003 0320 	and.w	r3, r3, #32
200061fc:	2b20      	cmp	r3, #32
200061fe:	bf0c      	ite	eq
20006200:	2301      	moveq	r3, #1
20006202:	2300      	movne	r3, #0
20006204:	b2db      	uxtb	r3, r3
}
20006206:	4618      	mov	r0, r3
20006208:	370c      	adds	r7, #12
2000620a:	46bd      	mov	sp, r7
2000620c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006210:	4770      	bx	lr

20006212 <LL_DMA_IsActiveFlag_TE4>:
{
20006212:	b480      	push	{r7}
20006214:	b083      	sub	sp, #12
20006216:	af00      	add	r7, sp, #0
20006218:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->HISR ,DMA_HISR_TEIF4)==(DMA_HISR_TEIF4));
2000621a:	687b      	ldr	r3, [r7, #4]
2000621c:	685b      	ldr	r3, [r3, #4]
2000621e:	f003 0308 	and.w	r3, r3, #8
20006222:	2b08      	cmp	r3, #8
20006224:	bf0c      	ite	eq
20006226:	2301      	moveq	r3, #1
20006228:	2300      	movne	r3, #0
2000622a:	b2db      	uxtb	r3, r3
}
2000622c:	4618      	mov	r0, r3
2000622e:	370c      	adds	r7, #12
20006230:	46bd      	mov	sp, r7
20006232:	f85d 7b04 	ldr.w	r7, [sp], #4
20006236:	4770      	bx	lr

20006238 <LL_DMA_ClearFlag_TE4>:
{
20006238:	b480      	push	{r7}
2000623a:	b083      	sub	sp, #12
2000623c:	af00      	add	r7, sp, #0
2000623e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->HIFCR , DMA_HIFCR_CTEIF4);
20006240:	687b      	ldr	r3, [r7, #4]
20006242:	2208      	movs	r2, #8
20006244:	60da      	str	r2, [r3, #12]
}
20006246:	bf00      	nop
20006248:	370c      	adds	r7, #12
2000624a:	46bd      	mov	sp, r7
2000624c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006250:	4770      	bx	lr

20006252 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20006252:	b480      	push	{r7}
20006254:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
20006256:	bf00      	nop
20006258:	46bd      	mov	sp, r7
2000625a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000625e:	4770      	bx	lr

20006260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20006260:	b480      	push	{r7}
20006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20006264:	e7fe      	b.n	20006264 <HardFault_Handler+0x4>

20006266 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20006266:	b480      	push	{r7}
20006268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000626a:	e7fe      	b.n	2000626a <MemManage_Handler+0x4>

2000626c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000626c:	b480      	push	{r7}
2000626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20006270:	e7fe      	b.n	20006270 <BusFault_Handler+0x4>

20006272 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20006272:	b480      	push	{r7}
20006274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20006276:	e7fe      	b.n	20006276 <UsageFault_Handler+0x4>

20006278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20006278:	b480      	push	{r7}
2000627a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000627c:	bf00      	nop
2000627e:	46bd      	mov	sp, r7
20006280:	f85d 7b04 	ldr.w	r7, [sp], #4
20006284:	4770      	bx	lr

20006286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20006286:	b580      	push	{r7, lr}
20006288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
2000628a:	f7fc fd91 	bl	20002db0 <xTaskGetSchedulerState>
2000628e:	4603      	mov	r3, r0
20006290:	2b01      	cmp	r3, #1
20006292:	d001      	beq.n	20006298 <SysTick_Handler+0x12>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
20006294:	f7fd fc78 	bl	20003b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20006298:	bf00      	nop
2000629a:	bd80      	pop	{r7, pc}

2000629c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
2000629c:	b580      	push	{r7, lr}
2000629e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */
  if(LL_DMA_IsActiveFlag_TC4(DMA2) == 1)
200062a0:	4809      	ldr	r0, [pc, #36]	; (200062c8 <DMA2_Stream4_IRQHandler+0x2c>)
200062a2:	f7ff ffa3 	bl	200061ec <LL_DMA_IsActiveFlag_TC4>
200062a6:	4603      	mov	r3, r0
200062a8:	2b01      	cmp	r3, #1
200062aa:	d102      	bne.n	200062b2 <DMA2_Stream4_IRQHandler+0x16>
  {
    DMA1_Stream4_TransferComplete();
200062ac:	f7ff fc8c 	bl	20005bc8 <DMA1_Stream4_TransferComplete>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
  {
    LL_DMA_ClearFlag_TE4(DMA2);
  }
  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
200062b0:	e008      	b.n	200062c4 <DMA2_Stream4_IRQHandler+0x28>
  else if(LL_DMA_IsActiveFlag_TE4(DMA2) == 1)
200062b2:	4805      	ldr	r0, [pc, #20]	; (200062c8 <DMA2_Stream4_IRQHandler+0x2c>)
200062b4:	f7ff ffad 	bl	20006212 <LL_DMA_IsActiveFlag_TE4>
200062b8:	4603      	mov	r3, r0
200062ba:	2b01      	cmp	r3, #1
200062bc:	d102      	bne.n	200062c4 <DMA2_Stream4_IRQHandler+0x28>
    LL_DMA_ClearFlag_TE4(DMA2);
200062be:	4802      	ldr	r0, [pc, #8]	; (200062c8 <DMA2_Stream4_IRQHandler+0x2c>)
200062c0:	f7ff ffba 	bl	20006238 <LL_DMA_ClearFlag_TE4>
}
200062c4:	bf00      	nop
200062c6:	bd80      	pop	{r7, pc}
200062c8:	40026400 	.word	0x40026400

200062cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
200062cc:	b480      	push	{r7}
200062ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
200062d0:	4b08      	ldr	r3, [pc, #32]	; (200062f4 <SystemInit+0x28>)
200062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
200062d6:	4a07      	ldr	r2, [pc, #28]	; (200062f4 <SystemInit+0x28>)
200062d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
200062dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
200062e0:	4b04      	ldr	r3, [pc, #16]	; (200062f4 <SystemInit+0x28>)
200062e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
200062e6:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
200062e8:	bf00      	nop
200062ea:	46bd      	mov	sp, r7
200062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200062f0:	4770      	bx	lr
200062f2:	bf00      	nop
200062f4:	e000ed00 	.word	0xe000ed00

200062f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
200062f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 20006330 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
200062fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
200062fe:	e003      	b.n	20006308 <LoopCopyDataInit>

20006300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
20006300:	4b0c      	ldr	r3, [pc, #48]	; (20006334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
20006302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
20006304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
20006306:	3104      	adds	r1, #4

20006308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
20006308:	480b      	ldr	r0, [pc, #44]	; (20006338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000630a:	4b0c      	ldr	r3, [pc, #48]	; (2000633c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000630c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000630e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
20006310:	d3f6      	bcc.n	20006300 <CopyDataInit>
  ldr  r2, =_sbss
20006312:	4a0b      	ldr	r2, [pc, #44]	; (20006340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
20006314:	e002      	b.n	2000631c <LoopFillZerobss>

20006316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
20006316:	2300      	movs	r3, #0
  str  r3, [r2], #4
20006318:	f842 3b04 	str.w	r3, [r2], #4

2000631c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000631c:	4b09      	ldr	r3, [pc, #36]	; (20006344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000631e:	429a      	cmp	r2, r3
  bcc  FillZerobss
20006320:	d3f9      	bcc.n	20006316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
20006322:	f7ff ffd3 	bl	200062cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20006326:	f000 f811 	bl	2000634c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000632a:	f7ff fa27 	bl	2000577c <main>
  bx  lr    
2000632e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
20006330:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
20006334:	2000a3f4 	.word	0x2000a3f4
  ldr  r0, =_sdata
20006338:	2000a3f4 	.word	0x2000a3f4
  ldr  r3, =_edata
2000633c:	2000a4b4 	.word	0x2000a4b4
  ldr  r2, =_sbss
20006340:	2000a4b4 	.word	0x2000a4b4
  ldr  r3, = _ebss
20006344:	2001ef68 	.word	0x2001ef68

20006348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20006348:	e7fe      	b.n	20006348 <ADC_IRQHandler>
	...

2000634c <__libc_init_array>:
2000634c:	b570      	push	{r4, r5, r6, lr}
2000634e:	4d0d      	ldr	r5, [pc, #52]	; (20006384 <__libc_init_array+0x38>)
20006350:	4c0d      	ldr	r4, [pc, #52]	; (20006388 <__libc_init_array+0x3c>)
20006352:	1b64      	subs	r4, r4, r5
20006354:	10a4      	asrs	r4, r4, #2
20006356:	2600      	movs	r6, #0
20006358:	42a6      	cmp	r6, r4
2000635a:	d109      	bne.n	20006370 <__libc_init_array+0x24>
2000635c:	4d0b      	ldr	r5, [pc, #44]	; (2000638c <__libc_init_array+0x40>)
2000635e:	4c0c      	ldr	r4, [pc, #48]	; (20006390 <__libc_init_array+0x44>)
20006360:	f000 f8f2 	bl	20006548 <_init>
20006364:	1b64      	subs	r4, r4, r5
20006366:	10a4      	asrs	r4, r4, #2
20006368:	2600      	movs	r6, #0
2000636a:	42a6      	cmp	r6, r4
2000636c:	d105      	bne.n	2000637a <__libc_init_array+0x2e>
2000636e:	bd70      	pop	{r4, r5, r6, pc}
20006370:	f855 3b04 	ldr.w	r3, [r5], #4
20006374:	4798      	blx	r3
20006376:	3601      	adds	r6, #1
20006378:	e7ee      	b.n	20006358 <__libc_init_array+0xc>
2000637a:	f855 3b04 	ldr.w	r3, [r5], #4
2000637e:	4798      	blx	r3
20006380:	3601      	adds	r6, #1
20006382:	e7f2      	b.n	2000636a <__libc_init_array+0x1e>
20006384:	2000a3ec 	.word	0x2000a3ec
20006388:	2000a3ec 	.word	0x2000a3ec
2000638c:	2000a3ec 	.word	0x2000a3ec
20006390:	2000a3f0 	.word	0x2000a3f0

20006394 <__retarget_lock_acquire_recursive>:
20006394:	4770      	bx	lr

20006396 <__retarget_lock_release_recursive>:
20006396:	4770      	bx	lr

20006398 <memcpy>:
20006398:	440a      	add	r2, r1
2000639a:	4291      	cmp	r1, r2
2000639c:	f100 33ff 	add.w	r3, r0, #4294967295
200063a0:	d100      	bne.n	200063a4 <memcpy+0xc>
200063a2:	4770      	bx	lr
200063a4:	b510      	push	{r4, lr}
200063a6:	f811 4b01 	ldrb.w	r4, [r1], #1
200063aa:	f803 4f01 	strb.w	r4, [r3, #1]!
200063ae:	4291      	cmp	r1, r2
200063b0:	d1f9      	bne.n	200063a6 <memcpy+0xe>
200063b2:	bd10      	pop	{r4, pc}

200063b4 <memset>:
200063b4:	4402      	add	r2, r0
200063b6:	4603      	mov	r3, r0
200063b8:	4293      	cmp	r3, r2
200063ba:	d100      	bne.n	200063be <memset+0xa>
200063bc:	4770      	bx	lr
200063be:	f803 1b01 	strb.w	r1, [r3], #1
200063c2:	e7f9      	b.n	200063b8 <memset+0x4>

200063c4 <cleanup_glue>:
200063c4:	b538      	push	{r3, r4, r5, lr}
200063c6:	460c      	mov	r4, r1
200063c8:	6809      	ldr	r1, [r1, #0]
200063ca:	4605      	mov	r5, r0
200063cc:	b109      	cbz	r1, 200063d2 <cleanup_glue+0xe>
200063ce:	f7ff fff9 	bl	200063c4 <cleanup_glue>
200063d2:	4621      	mov	r1, r4
200063d4:	4628      	mov	r0, r5
200063d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
200063da:	f000 b869 	b.w	200064b0 <_free_r>
	...

200063e0 <_reclaim_reent>:
200063e0:	4b2c      	ldr	r3, [pc, #176]	; (20006494 <_reclaim_reent+0xb4>)
200063e2:	681b      	ldr	r3, [r3, #0]
200063e4:	4283      	cmp	r3, r0
200063e6:	b570      	push	{r4, r5, r6, lr}
200063e8:	4604      	mov	r4, r0
200063ea:	d051      	beq.n	20006490 <_reclaim_reent+0xb0>
200063ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
200063ee:	b143      	cbz	r3, 20006402 <_reclaim_reent+0x22>
200063f0:	68db      	ldr	r3, [r3, #12]
200063f2:	2b00      	cmp	r3, #0
200063f4:	d14a      	bne.n	2000648c <_reclaim_reent+0xac>
200063f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
200063f8:	6819      	ldr	r1, [r3, #0]
200063fa:	b111      	cbz	r1, 20006402 <_reclaim_reent+0x22>
200063fc:	4620      	mov	r0, r4
200063fe:	f000 f857 	bl	200064b0 <_free_r>
20006402:	6961      	ldr	r1, [r4, #20]
20006404:	b111      	cbz	r1, 2000640c <_reclaim_reent+0x2c>
20006406:	4620      	mov	r0, r4
20006408:	f000 f852 	bl	200064b0 <_free_r>
2000640c:	6a61      	ldr	r1, [r4, #36]	; 0x24
2000640e:	b111      	cbz	r1, 20006416 <_reclaim_reent+0x36>
20006410:	4620      	mov	r0, r4
20006412:	f000 f84d 	bl	200064b0 <_free_r>
20006416:	6ba1      	ldr	r1, [r4, #56]	; 0x38
20006418:	b111      	cbz	r1, 20006420 <_reclaim_reent+0x40>
2000641a:	4620      	mov	r0, r4
2000641c:	f000 f848 	bl	200064b0 <_free_r>
20006420:	6be1      	ldr	r1, [r4, #60]	; 0x3c
20006422:	b111      	cbz	r1, 2000642a <_reclaim_reent+0x4a>
20006424:	4620      	mov	r0, r4
20006426:	f000 f843 	bl	200064b0 <_free_r>
2000642a:	6c21      	ldr	r1, [r4, #64]	; 0x40
2000642c:	b111      	cbz	r1, 20006434 <_reclaim_reent+0x54>
2000642e:	4620      	mov	r0, r4
20006430:	f000 f83e 	bl	200064b0 <_free_r>
20006434:	6de1      	ldr	r1, [r4, #92]	; 0x5c
20006436:	b111      	cbz	r1, 2000643e <_reclaim_reent+0x5e>
20006438:	4620      	mov	r0, r4
2000643a:	f000 f839 	bl	200064b0 <_free_r>
2000643e:	6da1      	ldr	r1, [r4, #88]	; 0x58
20006440:	b111      	cbz	r1, 20006448 <_reclaim_reent+0x68>
20006442:	4620      	mov	r0, r4
20006444:	f000 f834 	bl	200064b0 <_free_r>
20006448:	6b61      	ldr	r1, [r4, #52]	; 0x34
2000644a:	b111      	cbz	r1, 20006452 <_reclaim_reent+0x72>
2000644c:	4620      	mov	r0, r4
2000644e:	f000 f82f 	bl	200064b0 <_free_r>
20006452:	69a3      	ldr	r3, [r4, #24]
20006454:	b1e3      	cbz	r3, 20006490 <_reclaim_reent+0xb0>
20006456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
20006458:	4620      	mov	r0, r4
2000645a:	4798      	blx	r3
2000645c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
2000645e:	b1b9      	cbz	r1, 20006490 <_reclaim_reent+0xb0>
20006460:	4620      	mov	r0, r4
20006462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20006466:	f7ff bfad 	b.w	200063c4 <cleanup_glue>
2000646a:	5949      	ldr	r1, [r1, r5]
2000646c:	b941      	cbnz	r1, 20006480 <_reclaim_reent+0xa0>
2000646e:	3504      	adds	r5, #4
20006470:	6a63      	ldr	r3, [r4, #36]	; 0x24
20006472:	2d80      	cmp	r5, #128	; 0x80
20006474:	68d9      	ldr	r1, [r3, #12]
20006476:	d1f8      	bne.n	2000646a <_reclaim_reent+0x8a>
20006478:	4620      	mov	r0, r4
2000647a:	f000 f819 	bl	200064b0 <_free_r>
2000647e:	e7ba      	b.n	200063f6 <_reclaim_reent+0x16>
20006480:	680e      	ldr	r6, [r1, #0]
20006482:	4620      	mov	r0, r4
20006484:	f000 f814 	bl	200064b0 <_free_r>
20006488:	4631      	mov	r1, r6
2000648a:	e7ef      	b.n	2000646c <_reclaim_reent+0x8c>
2000648c:	2500      	movs	r5, #0
2000648e:	e7ef      	b.n	20006470 <_reclaim_reent+0x90>
20006490:	bd70      	pop	{r4, r5, r6, pc}
20006492:	bf00      	nop
20006494:	2000a450 	.word	0x2000a450

20006498 <__malloc_lock>:
20006498:	4801      	ldr	r0, [pc, #4]	; (200064a0 <__malloc_lock+0x8>)
2000649a:	f7ff bf7b 	b.w	20006394 <__retarget_lock_acquire_recursive>
2000649e:	bf00      	nop
200064a0:	2001ef60 	.word	0x2001ef60

200064a4 <__malloc_unlock>:
200064a4:	4801      	ldr	r0, [pc, #4]	; (200064ac <__malloc_unlock+0x8>)
200064a6:	f7ff bf76 	b.w	20006396 <__retarget_lock_release_recursive>
200064aa:	bf00      	nop
200064ac:	2001ef60 	.word	0x2001ef60

200064b0 <_free_r>:
200064b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
200064b2:	2900      	cmp	r1, #0
200064b4:	d044      	beq.n	20006540 <_free_r+0x90>
200064b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
200064ba:	9001      	str	r0, [sp, #4]
200064bc:	2b00      	cmp	r3, #0
200064be:	f1a1 0404 	sub.w	r4, r1, #4
200064c2:	bfb8      	it	lt
200064c4:	18e4      	addlt	r4, r4, r3
200064c6:	f7ff ffe7 	bl	20006498 <__malloc_lock>
200064ca:	4a1e      	ldr	r2, [pc, #120]	; (20006544 <_free_r+0x94>)
200064cc:	9801      	ldr	r0, [sp, #4]
200064ce:	6813      	ldr	r3, [r2, #0]
200064d0:	b933      	cbnz	r3, 200064e0 <_free_r+0x30>
200064d2:	6063      	str	r3, [r4, #4]
200064d4:	6014      	str	r4, [r2, #0]
200064d6:	b003      	add	sp, #12
200064d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
200064dc:	f7ff bfe2 	b.w	200064a4 <__malloc_unlock>
200064e0:	42a3      	cmp	r3, r4
200064e2:	d908      	bls.n	200064f6 <_free_r+0x46>
200064e4:	6825      	ldr	r5, [r4, #0]
200064e6:	1961      	adds	r1, r4, r5
200064e8:	428b      	cmp	r3, r1
200064ea:	bf01      	itttt	eq
200064ec:	6819      	ldreq	r1, [r3, #0]
200064ee:	685b      	ldreq	r3, [r3, #4]
200064f0:	1949      	addeq	r1, r1, r5
200064f2:	6021      	streq	r1, [r4, #0]
200064f4:	e7ed      	b.n	200064d2 <_free_r+0x22>
200064f6:	461a      	mov	r2, r3
200064f8:	685b      	ldr	r3, [r3, #4]
200064fa:	b10b      	cbz	r3, 20006500 <_free_r+0x50>
200064fc:	42a3      	cmp	r3, r4
200064fe:	d9fa      	bls.n	200064f6 <_free_r+0x46>
20006500:	6811      	ldr	r1, [r2, #0]
20006502:	1855      	adds	r5, r2, r1
20006504:	42a5      	cmp	r5, r4
20006506:	d10b      	bne.n	20006520 <_free_r+0x70>
20006508:	6824      	ldr	r4, [r4, #0]
2000650a:	4421      	add	r1, r4
2000650c:	1854      	adds	r4, r2, r1
2000650e:	42a3      	cmp	r3, r4
20006510:	6011      	str	r1, [r2, #0]
20006512:	d1e0      	bne.n	200064d6 <_free_r+0x26>
20006514:	681c      	ldr	r4, [r3, #0]
20006516:	685b      	ldr	r3, [r3, #4]
20006518:	6053      	str	r3, [r2, #4]
2000651a:	4421      	add	r1, r4
2000651c:	6011      	str	r1, [r2, #0]
2000651e:	e7da      	b.n	200064d6 <_free_r+0x26>
20006520:	d902      	bls.n	20006528 <_free_r+0x78>
20006522:	230c      	movs	r3, #12
20006524:	6003      	str	r3, [r0, #0]
20006526:	e7d6      	b.n	200064d6 <_free_r+0x26>
20006528:	6825      	ldr	r5, [r4, #0]
2000652a:	1961      	adds	r1, r4, r5
2000652c:	428b      	cmp	r3, r1
2000652e:	bf04      	itt	eq
20006530:	6819      	ldreq	r1, [r3, #0]
20006532:	685b      	ldreq	r3, [r3, #4]
20006534:	6063      	str	r3, [r4, #4]
20006536:	bf04      	itt	eq
20006538:	1949      	addeq	r1, r1, r5
2000653a:	6021      	streq	r1, [r4, #0]
2000653c:	6054      	str	r4, [r2, #4]
2000653e:	e7ca      	b.n	200064d6 <_free_r+0x26>
20006540:	b003      	add	sp, #12
20006542:	bd30      	pop	{r4, r5, pc}
20006544:	2001ef64 	.word	0x2001ef64

20006548 <_init>:
20006548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000654a:	bf00      	nop
2000654c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000654e:	bc08      	pop	{r3}
20006550:	469e      	mov	lr, r3
20006552:	4770      	bx	lr

20006554 <_fini>:
20006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20006556:	bf00      	nop
20006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000655a:	bc08      	pop	{r3}
2000655c:	469e      	mov	lr, r3
2000655e:	4770      	bx	lr
